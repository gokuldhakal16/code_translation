return self._possibly_eval(res, eval_in_python)
fake_course_key = CourseKey.from_string('course-v1:FakeOrg+CN1+CR-FALLNEVER1') self.assertEqual(utils.get_course_chapters(fake_course_key), None)
with super(FollowedThreadsUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
entry_needs_updating = True entry_needs_saving = False task_output = None
_apply_whitelist = _series_apply_whitelist for _def_str in _whitelist_method_generator(Series, _series_apply_whitelist): exec(_def_str)
import integration from salttesting import skipIf
delete_course_and_groups(course_id, self.user.id)
self.blocks = [XBlockFixtureDesc('html', str(i)) for i in xrange(1, 41)] library_fixture.add_children(*self.blocks)
self.assertTrue(filecmp.cmp(path_test, path_out))
salt.utils.cloud.remove_key(self.opts['pki_dir'], os.path.basename(key_file)) continue
res = self._evaluate() return _reconstruct_object(self.result_type, res, self.aligned_axes, self.expr.terms.return_type)
verify_group_id_always_present(profiled_user=self.student, pass_group_id=True) verify_group_id_always_present(profiled_user=self.student, pass_group_id=False) verify_group_id_always_present(profiled_user=self.moderator, pass_group_id=True) verify_group_id_always_present(profiled_user=self.moderator, pass_group_id=False)
return (None, None)
TEST_ROOT = REPO_ROOT / "test_root" LOG_DIR = (TEST_ROOT / "log").abspath()
no_index = DataFrame(columns=[0, 1, 3])
p_idx = rng.randint(num_p)
assert (np.diag(cm)[:-1] > np.diag(cm)[1:]).all()
import os import glob
from __future__ import unicode_literals
self.assertEqual(1.0, pnt.distance(Point(0, 1)))
log_resp = weighted_log_prob - log_prob_norm[:, np.newaxis]
def __iter__(self): raise IndexError
SplitTestTransformer.collect(block_structure)
from __future__ import absolute_import import pprint import logging
required_keys = ['provider'] alias, driver = provider.split(':')
provider = None
log = logging.getLogger(__name__)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
phi_aj = phi(a_j) derphi_aj = derphi(a_j)
if settings.ROOT_URLCONF == 'lms.urls': url_pattern = '/dashboard' else: url_pattern = '/home'
anon_user = Client() resp = anon_user.post( self.postback_url, self.student_answers ) self.assertEquals(resp.status_code, 302)
input_formula = "2*x - x + y + y" self.assert_grade(problem, input_formula, "correct")
if self._validate_session_key(value): self.__session_key = value else: self.__session_key = None
self.full_path = full_path self.directory = os.path.dirname(full_path) self.is_file = os.path.isfile(full_path) self.violations = []
return cls.AUDIT in modes_dict or cls.HONOR in modes_dict
self.assertFalse(self.advanced_settings.is_validation_modal_present())
self.steps = tosequence(steps) transforms = estimators[:-1] estimator = estimators[-1]
self.navigate_to_video()
if isinstance(reference, basestring): reference = BlockUsageLocator.from_string(reference) elif isinstance(reference, BlockKey): return reference return BlockKey.from_usage_key(reference)
NUM_RANDOMIZATION_BINS = 20 MAX_RANDOMIZATION_BINS = 1000
_subscriptions = __salt__['boto_sns.get_all_subscriptions_by_topic']( name, region=region, key=key, keyid=keyid, profile=profile )
external_solver = ['Isomap', 'KernelPCA', 'LocallyLinearEmbedding', 'RandomizedLasso', 'LogisticRegressionCV']
beta = linalg.solve_triangular(G, np.dot(Q.T, Yt))
self.assertRaises(NotImplementedError, store.select, 'df', "columns=['A'] | columns=['B']")
self.assertEqual(module.attempts, 3)
block_structure.request_xblock_fields('is_proctored_enabled') block_structure.request_xblock_fields('is_practice_exam')
sliced = self.frame.ix[:, -2:] expected = self.frame.reindex(columns=self.frame.columns[-2:]) tm.assert_sp_frame_equal(sliced, expected)
__virtualname__ = 'pkg'
tasks.environment.messages = []
if hasattr(decorator, '__iter__'): for dec in decorator[::-1]: function = dec(function) return function return decorator(function)
sorted_index, _ = index.sortlevel(0) sorted_index.slice_locs((1, 0, 1), (2, 1, 0))
clf = self.factory(alpha=0.1, n_iter=1000, fit_intercept=False) clf.fit(X, Y, sample_weight=np.arange(7))
self.client.login(username=self.user.username, password='test')
self.assertIn('LEFT OUTER', str(qs.query))
ss = tm.makeStringSeries() ts = tm.makeTimeSeries() ns = Series(np.arange(100))
__slots__ = 'a',
from __future__ import unicode_literals
config = os.path.splitext(os.path.basename(path))[0]
template = lookup_template(namespace, template_name) return template.render_unicode(**context_dictionary)
assert_almost_equal(s[:k], sap, decimal=3)
raise SaltSystemExit('Cannot complete login due to an incorrect user name or password.')
attribute = getattr(module, attribute_name) return hasattr(attribute, __BACKUP_ATTRIBUTE_NAME)
if prefix: pipsearch = __salt__['pip.list'](prefix, bin_env, user=user, cwd=cwd)
dual_coefs = np.empty([n_targets, n_samples])
from __future__ import unicode_literals
protocol_str = '0'
s = _values_from_object(series) k = _values_from_object(key)
if not isinstance(data, (ABCSeries, list, tuple)): data = list(data) data = np.asarray(data)
from salt.states import splunk_search
'start': course_overview.start, 'start_display': course_overview.start_display, 'start_type': course_overview.start_type, 'end': course_overview.end,
import os.path
import salt.utils.http
return abs(dt1 - dt2) < allowed_delta
'contentserver',
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if try_quick:
for i in range(self.n_eigen + self.minibatch_size): self.G[i,i] += self.regularizer
return self.q(css='.conditional-wrapper').visible
def __iter__(self): return self def __next__(self): raise AbstractMethodError(self)
self.frame['E'] = np.inf self.frame['F'] = -np.inf
random_state = check_random_state(0) p = random_state.rand(n_samples) * (2 * np.pi - 0.55) t = random_state.rand(n_samples) * np.pi
import salt.ext.six as six
return certificate
alpha_ = 1. / np.var(y) lambda_ = 1.
return subject.replace('\n', '\\n').replace('\r', '\\r')
user = User.objects.get(id=user_id) return anonymous_id_for_user(user, None)
values = Series([u('fooBAD__barBAD'), NA, u('foo')])
self.assertTrue( bool(access.has_staff_access_to_preview_mode(self.global_staff, obj=self.course, course_key=course_key)) )
self.courseware_page.click_previous_button_on_bottom() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 3, next_enabled=True, prev_enabled=True)
from django.core.management import call_command
self.q(css=self._bounded_selector("div.form-actions .action-save")).first.click()
return course_metadata_utils.course_starts_within(self.start, days)
if not self._verify_auth(): self.redirect('/login') return
node = mock.Mock(due=1, extended_due=None) self.assertEqual(self.call_fut(node), 1)
mi = MultiIndex.from_product([list('abcdefg'), range(10)], names=['first', 'second']) result = str(mi)
from __future__ import absolute_import import logging
rng = date_range(START, END, freq=datetools.bmonthEnd)
self.assertEqual(Employee.objects.get(employee_code=123), self.dan)
keys = set() for subcontext in self: for dict in subcontext: keys |= set(dict.keys()) return keys
'winrepo_source_dir': str,
__virtualname__ = 'yaml'
child_name = os.ttyname(stdout_child_fd) try: tty_fd = os.open('/dev/tty', os.O_RDWR | os.O_NOCTTY) if tty_fd >= 0: os.close(tty_fd)
return self.oauth2_adapter.create_confidential_client( name='Test Confidential Application', user=user, client_id=client_id, redirect_uri=DUMMY_REDIRECT_URL, )
return CourseFactory.create( org=course_location.org, number=course_location.course, run=course_location.run )
if not organizations_enabled(): return [] from organizations import api as organizations_api return organizations_api.get_organization_courses(organization_id)
total_student_count[curr_problem] = total_student_count.get(curr_problem, 0) + row['count_grade']
desired_volumes = sorted(list(data) + [ k for k in _image_get(config['image_path']) or [] if k not in data])
(index < 2 or tokens[index - 2][1] != 'class') and not keyword.iskeyword(prev_text)): yield prev_end, "E211 whitespace before '%s'" % text
input_dict = {'1_2_1': '21'} correct_map = problem.grade_answers(input_dict)
import salt.ext.six as six
from __future__ import absolute_import import logging import time import decimal
return self.database.connection.max_wire_version
proc.start()
self.assertIn('<header class="xblock-header xblock-header-vertical">', html) self.assertIn('<article class="xblock-render">', html)
if value == 0: raise ValueError('The database backend does not accept 0 as a ' 'value for AutoField.') return value
self.start_blocking_transaction()
result = f.clean('1:30 PM') self.assertEqual(result, time(13, 30, 0))
for extension in self.cv_extensions: extension.setup(self.trainers)
cp = df.copy() cp.ix[3:11] = 0 self.assertTrue((cp.ix[3:11] == 0).values.all())
self.set_select_value(self.PROBLEM_TYPE_LABEL, value) EmptyPromise(lambda: self.capa_type == value, "problem type is updated in modal.").fulfill()
return obj["id"] in self.context["cc_requester"]["upvoted_ids"]
xp = DataFrame(index=['a']) rs = xp.apply(lambda x: x['a'], axis=1) assert_frame_equal(xp, rs)
with self.assertNumQueries(0): RestrictedCourse.is_restricted_course(course_id) RestrictedCourse.is_disabled_access_check(course_id)
s = X.shape if len(s) > 1: return tuple(tuplify(row) for row in X) else: return tuple(r for r in X)
response = self.send_patch(client, {field: ""}) self.assertEqual("", response.data[field])
self.name = getattr(obj, 'name', None) self.fill_value = getattr(obj, 'fill_value', None)
FEATURES['ENABLE_COURSEWARE_INDEX'] = True FEATURES['ENABLE_LIBRARY_INDEX'] = True SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine"
return iter(getattr(d, _iterkeys)(**kw))
source = String( help=_("The external URL to download the video."), display_name=_("Download Video"), scope=Scope.settings, default="" ) download_video = Boolean(
from crum import get_current_request
time.sleep(0.01) ret = render(input_data, saltenv, sls, **render_kwargs)
if group == 'multilabel-indicator' and issparse(example): sparse_assert_, sparse_exp = assert_true, 'True' else: sparse_assert_, sparse_exp = assert_false, 'False'
tags = list(tags or []) tags.append('LMS')
if url_name is None or url_name == "": url_name = fallback_name()
continue
self.selenium.switch_to.window(main_window) self.wait_for_value('#id_main_band', '98')
if not hasattr(xblock, '_published_on'): self.modulestore.compute_published_info_internal(xblock) return getattr(xblock, '_published_on', None)
expected = orig2.drop_duplicates(['A', 'B']) result = df2 tm.assert_frame_equal(result, expected)
oa = OAS(store_precision=False, assume_centered=True) oa.fit(X_centered) assert_almost_equal(oa.score(X_centered), score_, 4) assert(oa.precision_ is None)
if self.has_mi_columns: if cols is not None: raise TypeError("cannot specify cols with a MultiIndex on the " "columns")
from __future__ import absolute_import
y_pred_proba_mo = knn_mo.predict_proba(X_test) assert_equal(len(y_pred_proba_mo), n_output)
try: kwargs['entrypoint'] = salt.utils.shlex_split(kwargs['entrypoint']) except AttributeError: pass
try: import numpy except ImportError: numpy = False
raise NotImplementedError
query = queries[[rng.randint(0, n_queries)]]
self.B = sharedX(numpy.zeros(self.nvis) + B0, name='B', borrow=True)
logger.info(self.__str__())
if geos: from django.contrib.gis.geos import GEOSGeometry return [GEOSGeometry(feat.geom.wkb) for feat in self] else: return [feat.geom for feat in self]
rs = df.iloc[[0, 1]] xp = df.xs(4, drop_level=False) assert_frame_equal(rs, xp)
self.publish_unit_and_verify_groups_in_lms(courseware_page, [u'Group A', u'Group B'])
colors = ['r-', 'b-', 'y-', 'm-']
self.check_level_names(view, level_names) self.check_level_names(copy, level_names) self.check_level_names(shallow_copy, level_names)
self.check_event_response_by_key('flag_resource', resource, 'reason', 'reason 0')
thing = models.CharField(max_length=100, blank=True, choices=Things())
uid = self.provider.get_social_auth_uid('uid') if uid is not 'uid': query_set = query_set.filter(uid__startswith=uid[:-3])
return Page(*args, **kwargs)
annotation_input_selector = self.active_problem_selector('.annotation-input') return self.q(css=annotation_input_selector).visible
ACCOUNT_VISIBILITY_CONFIGURATION = { "default_visibility": "all_users",
s = pd.Series(['a', 'b', 'c', 'd'], dtype='category')
else: msg = _(u"Error: {msg}").format(msg=inst.message)
result = strings.str_contains(values, 'foo', regex=False, case=False) expected = np.array([True, False, True, False]) tm.assert_numpy_array_equal(result, expected)
AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
for key in locations: self.assertFalse(self._has_changes(locations[key]))
import salt.utils from salt.returners import local_cache
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call ensure_in_syspath('../../')
pairwise = True if pairwise is None else pairwise
htmlhelp_basename = 'edxdoc'
Foo.objects.filter(d__gte=100000000000)
error_msg = "XQueue could not decode grade request" self._send_immediate_response(False, message=error_msg)
_legacy_reverse_map = dict((v, k) for k, v in reversed(sorted(compat.iteritems(_rule_aliases))))
least_squares[...] = 1 AA = 1.
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
params_wrong_amt = params.copy() params_wrong_amt['ccAuthReply_amount'] = '1.00' with self.assertRaises(CCProcessorWrongAmountException): payment_accepted(params_wrong_amt)
'default_top': str,
self.initiate_rerun()
def f(): Categorical.from_codes([-2, 1, 2], ["a", "b", "c"])
self.client.login(username=self.student.username, password=self.PASSWORD) response = self.client.get(reverse("dashboard"))
course.tabs.append(CourseTab.load("edxnotes")) modulestore().update_item(course, user_id)
from __future__ import absolute_import import os import re import sys import time import types import socket import logging import logging.handlers import traceback import multiprocessing
from __future__ import absolute_import
course_image_asset_key = StaticContent.compute_location(course.id, course.course_image) course_image_content = StaticContent(course_image_asset_key, image_name, 'image/jpeg', image_buff) contentstore().save(course_image_content)
if key is not None:
self._iterations = 0 while True: result = self.optimize_inner(operations, app_label) self._iterations += 1 if result == operations: return result operations = result
continue
raise NotImplementedError('subclasses of Serializer must provide a start_object() method')
module = get_module( user, request, problem.scope_ids.usage_id, field_data_cache, )._xmodule module.system.publish(problem, 'grade', grade_dict)
return False
resp = self.client.get(url, HTTP_HOST=settings.MICROSITE_TEST_HOSTNAME) self.assertContains(resp, settings.MICROSITE_CONFIGURATION['test_microsite']['email_from_address'])
try: WINAPI = True import win32serviceutil except ImportError: WINAPI = False
cs = CourseStructure.objects.get(course_id=self.course.id) self.assertEqual(cs.structure_json, structure_json)
if python_shell: cmd = 'chcp 437 > nul & ' + cmd
self.assertEqual(formset.is_valid(), False) self.assertEqual(Poet.objects.count(), 1)
return edxval_api.get_video_info_for_course_and_profiles(unicode(course_id), video_profile_names)
if RateLimitConfiguration.current().enabled: return func(*args, **kwargs) else: msg = "Rate limiting is disabled because `RateLimitConfiguration` is not enabled." LOGGER.info(msg) return
def cummin(x): return np.minimum.accumulate(x)
if field in self._dirty_fields: del self._dirty_fields[field]
def contribute_to_class(self, cls, name, **kwargs): super(GeometryField, self).contribute_to_class(cls, name, **kwargs)
APP.config_from_object('django.conf:settings') APP.autodiscover_tasks(lambda: settings.INSTALLED_APPS)
ret = self.run_function( 'state.sls', mods='issue-1879.step-1', timeout=120 ) self.assertSaltTrueReturn(ret)
iris = datasets.load_iris() X = iris.data y = iris.target
from __future__ import absolute_import import logging import os import re
span_element = rendered_html.find('span') self.assertEqual(span_element.text, 'Test text')
return all([ self.q(css='body.view-profile .account-settings-container').present, not self.q(css='ui-loading-indicator').visible ])
from salt.ext.six.moves import zip
result = f.clean('13:30:05') self.assertEqual(result, time(13, 30, 5))
self._do_create_preferences_test(True)
if not self._rot_set: self.rot = 30 format_date_labels(ax, rot=self.rot)
plt.figure() plt.legend(legend_rects, legend_labels, loc='upper left')
sorted_axis = data.axes[self.axis].take(self.sort_idx) sorted_data = data.reindex_axis(sorted_axis, axis=self.axis)
ssh_gateway_port: 22
log = logging.getLogger(__name__)
params = self._signed_callback_params(self.order.id, self.COST, self.COST) del params[missing_param]
return None
result = store.select_column('df', 'index') tm.assert_almost_equal(result.values, Series(df.index).values) self.assertIsInstance(result, Series)
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO['username'])
raise NotImplementedError()
return CaselessPreservingLiteral(char)
duplicate_positions = np.random.randint(0, len(dates) - 1, 20) for p in duplicate_positions: dates[p + 1] = dates[p]
_period_code_map = {
v3.set_params(strip_accents='_gabbledegook_', preprocessor=None) assert_raises(ValueError, v3.build_preprocessor)
#local_dict={'lhs': lhs, 'rhs': rhs}, #import ipdb; ipdb.set_trace()
tm._skip_if_no_pytz() import pytz
import salt.utils.itertools from salt.exceptions import CommandExecutionError
state = com._random_state(5) tm.assert_equal(state.uniform(), npr.RandomState(5).uniform())
return install_updates([guid])
import salt.utils
mask = isnull(values) if mask.any(): result = np.array(result) result[mask] = na_rep result = result.tolist()
date = models.DateField(db_column="event_date")
with self.assertRaises(SerializerDoesNotExist) as cm: serializers.get_serializer("nonsense") self.assertEqual(cm.exception.args, ("nonsense",))
return X, y
from __future__ import unicode_literals
centers = [[1, 1], [-1, -1], [1, -1]] X, labels_true = make_blobs(n_samples=750, centers=centers, cluster_std=0.4, random_state=0)
return self._filter_or_exclude(False, *args, **kwargs)
([], 'credit'),
socket.setdefaulttimeout(10)
return template.strip().format(hotfix_hash=hotfix_hash)
from __future__ import unicode_literals
result._set_is_copy(self, copy=not result._is_view) return result
self.assertTrue(self.video.is_aligned(True))
exc_info_on_loglevel=logging.DEBUG
df = DataFrame({"a": [5, 15, 25]}) c = pd.cut(df.a, bins=[0, 10, 20, 30, 40])
wkt_r = WKTReader() wkt = 'POINT (5 23)'
return get_valid_filename(name)
params_not_accepted = params.copy() params_not_accepted['decision'] = "REJECT" self.assertFalse(payment_accepted(params_not_accepted)['accepted'])
matching = get_matching_by_name(name) if not matching: continue
self.courseware_page.visit() self.courseware_page.wait_for_page()
rval = X.copy()
elif isinstance(index, string_types): return [index] elif isinstance(index, list): return index else: return None
expected = Series(np.nan, index=pd.Index([], dtype='int64')) assert_series_equal(result, expected)
assert_equal(train.union(test), set(range(n_samples)))
'submissions', 'openassessment', 'openassessment.assessment', 'openassessment.fileupload', 'openassessment.workflow', 'openassessment.xblock',
self.browser.refresh()
assert_raises(ValueError, AdaBoostClassifier(learning_rate=-1).fit, X, y_class)
if _np_version_under1p9: raise nose.SkipTest("Numpy version under 1.9")
from __future__ import absolute_import, print_function import random import string
tolerance_xml = xml.xpath( '//*[@id=$id]//responseparam[@type="tolerance"]/@default', id=xml.get('id') )
default = self.defaults.get(option.dest) value = getattr(self.options, option.dest, default) if value != default: continue
y = 0.5 * X.ravel() + rng.randn(n_samples, 1).ravel()
allow_access(course_ccx, staff, 'staff')
click_css(self, self._bounded_selector('.delete-button'), require_notification=False) confirm_prompt(self, cancel)
layers = model.get_all_layers() states = [final_state['V_hat']] + final_state['H_hat']
CHINESE_LANGUAGE_CODE_MAP = {
return self.teams_configuration.get('topics', None)
for name in ALL_TREES: yield (check_no_sparse_y_support, name)
head, tail = self.frame[:5], self.frame[5:]
self._unpickle_matrix_compat(state)
date = get_date(ccx, node=parent_node, date_type=date_type)
return "DROP CONSTRAINT"
cmd_mock = MagicMock(return_value=lsscsi) with patch.dict(scsi.__salt__, {'cmd.run_all': cmd_mock}): self.assertDictEqual(scsi.ls_(get_size=False), result)
list_price = 'N/A' payment_amount = 'N/A' coupon_codes_used = 'N/A' registration_code_used = 'N/A' payment_status = _('Data Integrity Error') transaction_reference_number = 'N/A'
args = [_sdecode(name)] if kill: args.append('--kill')
self.mixed_frame['datetime'] = datetime.now() self.mixed_frame['timedelta'] = timedelta(days=1, seconds=1)
#html_show_sourcelink = True
import salt.utils from salt.exceptions import CommandExecutionError
import salt.ext.six as six
expected = df[10] assert_frame_equal(result, expected)
sample_weight = (sample_weight * compute_sample_weight(self.class_weight, y))
return self.network_address in other or ( self.broadcast_address in other or ( other.network_address in self or ( other.broadcast_address in self)))
for _ in range(num_students): random_id = uuid4().hex[:8] self.create_student(username='student{0}'.format(random_id))
salt '*' vsphere.syslog_service_reload my.esxi.host root bad-password
if format == 'table': pt += u('_table')
s = pd.DataFrame(randn(1000, 1000), index=pd.date_range( '2000-1-1', periods=1000)).stack()
if self.is_shape_reversed: shape = shape[::-1]
return [self.filter]
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
account_settings = AccountSettingsPage(self.browser).visit() account_settings.switch_account_settings_tabs('accounts-tab')
self.covariance_ = covariance if self.store_precision: self.precision_ = pinvh(covariance) else: self.precision_ = None
salt '*' vsphere.update_date_time my.esxi.host root bad-password
return student.views.index(request)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, patch ensure_in_syspath('../../')
self.assertIn("ufeff", filedata) self.ufeff_srt_file.write(filedata) self.ufeff_srt_file.seek(0)
result = p.iloc[1:3] expected = p.loc[['B', 'C']] assert_panel_equal(result, expected)
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) initial_group_id_to_child = split_test.group_id_to_child
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_key): self.assertTrue(self.store.has_item(problem_location)) assertProblemNameEquals(problem_original_name)
self.assert_no_xpath(xml, "//div[@class='capa_alert']", self.context)
self.client.post(url, post_args)
return sorted(course_module.teams_topics, key=lambda t: t['name'].lower())
return self._ic['bic']
self.assertContains(response, unicode(self.course.id))
std_y = std(y) assert_equal(corr_x_y, cov_x_y / (std_x * std_y))
assert_raise_message(ValueError, msg, check_X_y, X, y, ensure_min_samples=2, ensure_2d=False)
if isinstance(address, bytes): self.network_address = IPv6Address(address) self._prefixlen = self._max_prefixlen self.netmask = IPv6Address(self._ALL_ONES) return
self.assert_student_in_group(None)
__array_priority__ = 1000
enrollment = cls.get_or_create_enrollment(user, course_key) enrollment.update_enrollment(is_active=True, mode=mode) if badges_enabled(): from lms.djangoapps.badges.events.course_meta import award_enrollment_badge award_enrollment_badge(user)
request.META = {'HTTP_HOST': 'example.com:81'} site = get_current_site(request) self.assertEqual(site, s1)
problem_page.fill_answer("4") problem_page.click_check() self.assertFalse(problem_page.is_correct())
from __future__ import absolute_import
Permission.objects.filter(content_type__app_label='swappable_models').delete() ContentType.objects.filter(app_label='swappable_models').delete()
if php is not None: cmd = [php] + cmd
return HttpResponse(status=status.HTTP_500_INTERNAL_SERVER_ERROR)
cookies = response.cookies response = HttpResponseNotModified() response.cookies = cookies return response
current_leaf = birch_instance.dummy_leaf_.next_leaf_ while current_leaf: subclusters = current_leaf.subclusters_ for sc in subclusters: assert_greater_equal(threshold, sc.radius) current_leaf = current_leaf.next_leaf_
delete_item(category='vertical', name='test_vertical')
from __future__ import absolute_import import os import tempfile
rng = date_range('1/1/2000', '1/30/2000', tz='US/Eastern') frame = DataFrame(np.random.randn(len(rng), 4), index=rng)
raise TypeError('Cannot infer number of levels from empty list')
self.assertIn('authorwithage', connection.queries[-1]['sql'].lower()) self.assertIn(' IN ', connection.queries[-1]['sql'])
self.attrs.encoding = self.encoding
self._first_chunk = False
p = linear_response return p
plt.subplot(2, 3, pairidx + 1)
assert_equals('"/static/data_dir/file.png"', replace_static_urls(STATIC_SOURCE, DATA_DIRECTORY))
if mswindows: def _execute(self): raise NotImplementedError
return [ credential['credential']['program_id'] for credential in get_user_credentials(student) if 'program_id' in credential['credential'] and credential['status'] == 'awarded' ]
from __future__ import absolute_import
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
mfield = field_name.lower() if mfield[-1:] == '_': mfield += 'field'
from __future__ import unicode_literals
from pylearn2.datasets.mnist import MNIST dataset = MNIST(which_set='train') data = numpy.asarray(dataset.X, dtype=config.floatX)
for weekday, group in grouped: self.assertEqual(group.index[0].weekday(), weekday)
draft = 'draft-branch' published = 'published-branch' library = 'library'
try:
self._create_test_survey() with self.assertRaises(SurveyFormNameAlreadyExists): self._create_test_survey()
systemd.__salt__ = {} systemd.__context__ = {}
names = []
return
deploy_scripts_search_paths = [] for entry in config.get('deploy_scripts_search_path', []): if entry.startswith(builtin_deploy_dir): continue
y1 = np.array([[0, 1, 1], [1, 0, 1]]) y2 = np.array([[0, 0, 1], [1, 0, 1]])
result = self.index[2:5] expected = self.index[[2, 3, 4]] self.assertTrue(result.equals(expected))
pnt.y = 3.14 pnt.x = 2.71 self.assertEqual(3.14, pnt.y) self.assertEqual(2.71, pnt.x)
try: hexin = ord(x) except TypeError: hexin = x
assert_raises(ValueError, cval.KFold, 3, 4)
if not DETAILS['url'].endswith('/'): DETAILS['url'] += '/'
org_access_role(lib_key_pacific.org).add_users(self.non_staff_user)
checkpoint = VerificationCheckpoint(course_id=self.course_id, checkpoint_location=reverification.location) checkpoint.save()
'order_masters': bool,
filelist = random.sample(filelist, int(num_entries / self._cull_frequency)) for fname in filelist: self._delete(fname)
if properties: optlist = [] for prop in properties.keys():
est = TreeEstimator(min_samples_split=10, max_leaf_nodes=max_leaf_nodes, random_state=0) est.fit(X, y) node_samples = est.tree_.n_node_samples[est.tree_.children_left != -1]
import copy import json import logging
data = "\n\n\n" self.assertRaises(EmptyDataError, self.read_csv, StringIO(data))
import salt.utils
validate_xml(input_xsd, output_xml)
self.assertQuerysetEqual( Article.objects.complex_filter({'pk': self.a1}), [ 'Hello' ], attrgetter("headline"), )
self.assertNumQueries(0, lambda: list(Number.objects.all()[1:1]))
errors = [] minions = [] for minion in response: minions.append(minion) if not response[minion]: errors.append(minion)
raise NotImplementedError(str(type(self)) + " does not implement get_default_cost.")
rng = np.random.RandomState(0)
return np.array(self._block.to_dense(), copy=False)
query_features = microsite.get_value('student_profile_download_fields')
from __future__ import absolute_import import os import logging import pwd import shutil
rs = read_csv(filename, compression="gzip", index_col=0) assert_frame_equal(df, rs)
group_axes = _get_axes(group) res = f(group) if not _is_indexed_like(res, group_axes): mutated = True result_values.append(res)
from __future__ import unicode_literals
self.store.delete_item(published_xblock.location, self.user_id)
self._user_info = None
random_cohorts = CourseUserGroup.objects.filter( course_id=user_group.course_id, group_type=CourseUserGroup.COHORT, cohort__assignment_type=CourseCohort.RANDOM ) return len(random_cohorts) == 1 and random_cohorts[0].name == user_group.name
assert_almost_equal(s[:k], sa)
self.assertRaises(KeyError, self.cf.get_option, 'no_such_option') self.cf.deprecate_option('KanBan')
def test_inheritance(self): Event.objects.create() Screening.objects.create(movie=self.movie)
with translation.override('de'): output = self.engine.render_to_string('i18n13') self.assertEqual(output, 'Passwort')
log = logging.getLogger(__name__)
from __future__ import unicode_literals
if obj.pk is None: continue self.deleted_objects.append(obj) self.delete_existing(obj, commit=commit)
new_obj = DataFrame(new_obj, index=self.obj.index) new_obj.columns = self.obj.columns self.obj = new_obj
output.append('\'{0}\': {1!r}'.format(key, value))
raise ValueError( "kd_tree algorithm does not support callable metric '%s'" % metric)
from __future__ import absolute_import
'mode': 'r+' if memmap.mode in ('r+', 'w+') else 'r'}
return self.__class__
GeneratedCertificateFactory( user=self.bob, course_id=self.alternate_course_id, mode=MODES.verified, status=failing_status, )
self.assertEqual(request.GET.urlencode(), '') self.assertEqual(request.POST.urlencode(), '')
try: import boto.ec2 import boto.utils import boto.exception HAS_BOTO = True except ImportError: HAS_BOTO = False
result = sparse.loc[sparse % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
def path_level(name): return len(name.split(os.sep))
return None
for max_leaf_nodes, name in product((None, 1000), ALL_TREES.keys()): TreeEstimator = ALL_TREES[name]
onlyrepo = True for arepo in six.iterkeys(repos): if arepo == repo: continue if repos[arepo]['file'] == repofile: onlyrepo = False
import salt.client
this = self.reindex(items=items, major=major, minor=minor) other = other.reindex(items=items, major=major, minor=minor)
api_path = getattr(settings, "ENROLLMENT_DATA_API", DEFAULT_DATA_API)
compressed = zlib.compress(data) if len(compressed) < (len(data) - 1): data = compressed is_compressed = True
self.assertListEqual(problem.responders.values()[0].context['idset'], correct_order)
tasks = instructor_task.api.get_instructor_task_history(course_id, module_state_key)
microsite.enable_microsites(log)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
ret['Not Actioned/Not Running'] = list(names) ret['Not Found'] = list(names) return ret
args = [func.__self__, ] + args
for bad_byteorder in (-1, 2, 523, 'foo', None): with self.assertRaises(ValueError): wkb_w._set_byteorder(bad_byteorder)
dec_mock(request) self.assertTrue(self.mock.called) self.assertEqual(0, len(ExternalAuthMap.objects.all()))
X, y = datasets.make_classification(n_samples=2000, n_features=10, n_informative=3, n_redundant=0, n_repeated=0, shuffle=False, random_state=1)
__func_alias__ = { 'list_': 'list' }
self._producer = []
from cms.djangoapps.contentstore.courseware_index import CourseAboutSearchIndexer CourseAboutSearchIndexer.remove_deleted_items(course_key)
try: scheme, netloc, path, query, fragment = urlsplit(url) except ValueError: return unquote_quote(url)
pass
fig, axes = self.plt.subplots(2, 3) df = DataFrame(np.random.rand(10, 3), index=list(string.ascii_letters[:10]))
session = requests.Session() response = session.get(LMS_BASE_URL + "/auto_auth?superuser=true")
df3 = df1.set_index(['text'], append=True) df2 = df1.set_index(['text'], append=True) self.assertTrue(df3.equals(df2))
try: len(seq) except TypeError: return list(seq) else: return seq
result = f.clean('21-12-2010') self.assertEqual(result, date(2010, 12, 21))
response = external_auth.views.redirect_with_get('root', request.GET)
query = self.q(css='.page-content-secondary > .team-user-membership-status') return query.text[0] if query.present else ''
((), {}, '<label for="id_field">Field:</label>'),
self.assertTrue(payment_accepted(params)['accepted'])
_check_is_partition([row_levels, column_levels], range(ss.index.nlevels))
try: self.destroy()
select_option_by_value(self.settings_page.pre_requisite_course_options, self.pre_requisite_course_id) self.settings_page.save_changes()
self.context.update({ 'response_id': self.id,
course.delete() with self.assertNumQueries(1): CountryAccessRule.check_country_access(course_id, 'NZ')
expected = s.iloc[3] s2 = s.copy()
from salt.modules import beacons from salt.exceptions import CommandExecutionError import integration
import os import time import logging
get_tracker.side_effect = Exception self.assertEquals( self.middleware.process_response(self.request, self.response), self.response )
compress = 3
if not isinstance(xblock.location, LibraryUsageLocator): modulestore().has_changes(modulestore().get_course(xblock.location.course_key, depth=None))
expected_url = course_image_url(course) self.assertEqual( course_overview_after.image_urls, { 'raw': expected_url, 'small': expected_url, 'large': expected_url } )
max_depth = ((2 ** 31) - 1 if self.max_depth is None else self.max_depth) max_leaf_nodes = (-1 if self.max_leaf_nodes is None else self.max_leaf_nodes)
tasks = instructor_task.api.get_running_instructor_tasks(course_id)
df.iloc[0:5]['group'] = 'a'
return port
if 'cygwin' in platform.system().lower():
Z = Z.reshape(grid.shape[:-1]) plt.contourf(multiples, multiples, Z, cmap=plt.cm.Paired) plt.axis('off')
for encoding in self.utf_encodings: for frame in compat.itervalues(self.frame): result = self.encode_decode(frame, encoding=encoding) assert_frame_equal(result, frame)
context['disable_student_access'] = True
return course_metadata_utils.has_course_ended(self.end)
if not course: course = modulestore().get_course(course_overview.id)
def _parse_wrapper(base_commit): def inner(repo_path): return _parse_commit_log(repo_path,base_commit) return inner
thisMonthEnd = MonthEnd(0) thisBMonthEnd = BMonthEnd(0) thisYearEnd = YearEnd(0) thisYearBegin = YearBegin(0) thisBQuarterEnd = BQuarterEnd(0) thisQuarterEnd = QuarterEnd(0)
true_path = os.path.realpath(file_path) if not os.path.exists(true_path): continue
self.key = key return 1
supports_partially_nullable_unique_constraints = True
if master is not None: tmp_ip = _host_to_ip(master) if tmp_ip is not None: master_ip = tmp_ip
try: import win32con import win32api import win32process import win32security import win32pipe import win32event import win32profile import msvcrt import ctypes from ctypes import wintypes HAS_WIN32 = True except ImportError: HAS_WIN32 = False
self.q(css="input.proctored_exam").first.click() self.q(css=".action-save").first.click() self.wait_for_ajax()
from __future__ import absolute_import import logging
ignore_warnings(lshf.partial_fit)(X) assert_array_equal(X, lshf._fit_X)
from __future__ import unicode_literals
if self.indexer is not None: indexer = self.indexer.argsort(kind='quicksort') grouper = grouper.take(indexer) return grouper
if 'Ebs.VolumeType' not in ex_blockdevicemappings[dev_index]: type_key = '{0}BlockDeviceMapping.{1}.Ebs.VolumeType'.format(spot_prefix, dev_index) params[type_key] = rd_type
check_err(result) ptr = ptr_byref(cargs, offset) s = ptr.value
cat = pd.Categorical(['a', 'b', 'c', 'd', 'a'])
wiki_slug = None wiki_tag = xml_object.find("wiki") if wiki_tag is not None: wiki_slug = wiki_tag.attrib.get("slug", default=None) xml_object.remove(wiki_tag)
if self.is_datetime_lhs or self.is_datetime_rhs:
return self.__deepcopy__({})
self.fs_files.database.connection.close()
return (name, ext_network, admin_state_up)
warnings.filterwarnings('always', category=DeprecationWarning, module='^{0}\.'.format(re.escape(__name__)))
rbenv.__grains__ = {} rbenv.__salt__ = {}
try: return loader(name, dirs) except TemplateDoesNotExist: pass
assert_method = getattr(self, expected_result) assert_method(block_list)
self.assertEqual(i18n_service.ugettext(self.test_language), 'dummy language')
violations_count_str = "Number of {safecommit_script} violations: {num_violations}\n".format( safecommit_script=safecommit_script, num_violations=num_violations )
idx = pd.PeriodIndex(values, name='xxx') tm.assert_series_equal(idx.value_counts(), exp)
PACKAGES_TO_UNINSTALL = [
self.assert_matching_events_were_emitted( event_filter={'name': u'edx.instructor.report.requested', 'report_type': report_type} )
return _fail( ret, 'No revision matching \'{0}\' exists in the remote ' 'repository'.format(rev) )
self.course_info['number'] = self.unique_id[0:6]
"form-1-id": str(fd2.id), "form-1-reference": "456", "form-1-driver": "bill", "form-1-restaurant": "thai",
[{0: 'a', 1: 'b'}, {0: 'a'}],
current_proba = _samme_proba(estimator, n_classes, X)
script = 'raise Exception("Test")' problem = self.build_problem(answer=script)
paver.easy.sh("exit 1")
access.has_access(None, 'staff', 'global', None)
rng = date_range('1/1/1990', periods=N, freq='H', tz='US/Eastern') ts = Series(np.random.randn(N), index=rng)
if 0 not in classes_k and y_nnz[k] < y.shape[0]: classes_k = np.insert(classes_k, 0, 0) class_prior_k = np.insert(class_prior_k, 0, zeros_samp_weight_sum)
if os.path.isfile(cached_file_path): file_meta = _find_file_meta(metadata, bucket_name, saltenv, path) if file_meta: file_etag = file_meta['ETag']
self.browser.execute_script("window.scrollTo" + str(self.coordinates_for_scrolling(UNDO_BUTTON_SELECTOR))) self.q(css=UNDO_BUTTON_SELECTOR).click() self.wait_for_ajax()
else: return func(self, *args, **kwargs)
estimator = _make_estimators(X_train, y_train, y_ml_train)
pass
elif strategy == "most_frequent":
url = settings.STATIC_URL + settings.DEFAULT_COURSE_ABOUT_IMAGE_URL
sample_interval = 0.3 transform = AdditiveChi2Sampler(sample_steps=4, sample_interval=sample_interval) assert_equal(transform.sample_interval, sample_interval) transform.fit(X) assert_equal(transform.sample_interval_, sample_interval)
deploy_scripts_search_path.pop(idx)
if xblock_name is None: xblock_name = TestRecommender.XBLOCK_NAMES[0] url = self.get_handler_url(handler, xblock_name) return self.client.post(url, json.dumps(resource), '')
assert len(corruptors) >= 1 self._corruptors = corruptors
provider_details.update(profile_data) profile_data = provider_details
self._process_includes()
ridge.fit(X, y, sample_weight=np.ones(n_samples)) assert_greater(ridge.score(X, y), 0.47)
return saltstack_version
from salt.ext.six import string_types
out = {} start = 0 for name, length in parts: out[name] = s[start:start + length].strip() start += length del out['_'] return out
X = [[3, 2], [1, 6]] y = [1, 0] clf = MLPClassifier
raise NotImplementedError()
counter = [0, 0, 0] for chosen in self.permut: index = counter[chosen] counter[chosen] = (counter[chosen] + 1) % self.limit[chosen] yield chosen, index
if rast is None or rast == '': return
for database_name in DATABASES: DATABASES[database_name]['ATOMIC_REQUESTS'] = False
mlp = MLP(nvis=10, layers=[Linear(layer_name='h', dim=10, irange=0.01)]) Conditional(mlp=mlp, name='conditional')
X_ = X[:, np.newaxis, :] Y_ = Y[np.newaxis, :, :]
templates_path = ['../_templates']
if kwargs.get('current_zone_only') == 'True': cmd_prefix += '-G '
response = AboutTemplateView.as_view()(self.rf.head('/about/')) self.assertEqual(response.status_code, 200)
file_counts = {} for key in request.FILES.keys(): file_counts[key] = len(request.FILES.getlist(key)) return HttpResponse(json.dumps(file_counts))
flags = [('Name', name)]
_maybe_remove(store, 'df2') store.append('df2', df)
@ignore_warnings def test_factor_analysis(): rng = np.random.RandomState(0) n_samples, n_features, n_components = 20, 5, 3
iris = load_iris() X = iris.data pca = PCA(n_components=2, svd_solver='full') pipeline = Pipeline([('pca', pca)])
self._assert_history([], enroll_msg='embargo', access_msg='embargo')
reg.fit(X, y, sample_weights_OK) reg.fit(X, y, sample_weights_OK_1) reg.fit(X, y, sample_weights_OK_2)
if self.transcripts: for language in self.transcripts.keys(): _update_transcript_for_index(language)
return get_connection(using).get_autocommit()
import salt
node = etree.Element('unknown') descriptor.add_xml_to_node(node)
if band.nodata_value is not None: pixeltype += 64
self.validate_metadata(existing_table)
score_means = list() score_stds = list() percentiles = (1, 3, 6, 10, 15, 20, 30, 40, 60, 80, 100)
try: review1.content_object = dive except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
from __future__ import absolute_import
num_vis = rng.randint(1,11) n_classes = rng.randint(1, 11)
newFrame = self.frame.reindex(list(self.ts1.index)) self.assert_index_equal(newFrame.index, self.ts1.index)
return lib.array_equivalent_object(_ensure_object(left.ravel()), _ensure_object(right.ravel()))
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
df.pivot_table(index=[u('clé1')], columns=[u('clé2')])._repr_html_()
dm['C'] = 1 self.assertEqual(dm['C'].dtype, np.int64)
return self.sm_ols.df_resid
raise salt.exceptions.SaltSystemExit( 'The minimum required python version to run salt-ssh is "2.6".' )
geodetic = f.geodetic(self.connection) geography = f.geography
if getattr(field, 'remote_field', None) is None: field_type = field.db_type(connection)
to_expand = '~' + str(user) if user else '~'
self.go_to_tab_and_assert_problem(2, self.problem2_name)
CourseOverview.objects.filter(id=course_key).delete()
return template % unquote(transformed_url)
certs_api.set_cert_generation_enabled(self.COURSE_KEY, True) self._assert_enabled_for_course(self.COURSE_KEY, True)
return
pass
stack = [node] locations = [] while stack: curr = stack.pop() locations.append(curr.location) if curr.has_children: stack.extend(curr.get_children()) return locations
implicit_first_cols = 0 if line is not None: if self.index_col is not False: implicit_first_cols = len(line) - self.num_original_columns
EmptyPromise(lambda: self.is_closed_captions_visible() == closed_captions_new_state, "Closed captions are {state}".format(state=state)).fulfill()
try: with transaction.atomic(): with transaction.atomic(): self.do(1) raise ForcedError() except ForcedError: pass self.assertDone([])
course = modulestore().get_item(block_map['course'].location) course.children.remove(block_key) block_map['course'] = update_block(course)
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
__virtualname__ = 'group'
return arg
DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'ATOMIC_REQUESTS': True, },
result = isnull(['foo', 'bar']) assert (not result.any())
assert len(state) == 2 assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
response = self.client.get(path) self.assertContains(response, "The password reset link was invalid")
substring = [ "--with-xunitmp --xunitmp-file={}".format(self.xunit_report), "--processes={}".format(self.num_processes), "--no-color --process-timeout=1200" ]
ensure_in_syspath(CODE_DIR)
if offset: check_err(result, cpl=cpl) ptr = ptr_byref(cargs, offset) return ptr.value else: return result
from __future__ import absolute_import import glob import sys import os
if _TEST_MODE: _store_test_result(False) return op(a, b)
problem = CapaFactory.create() self.assertFalse(problem.answer_available())
assert_less_equal(call_count, maximum_calls)
return self
values = self.block.astype(np.object_).values
selectable_modes = CourseMode.modes_for_course_dict(self.course_key) self.assertItemsEqual(selectable_modes.keys(), expected_selectable_modes)
pass
ModuleStoreNoSettings.modulestore = class_(
logadm.__salt__ = {}
self.q(css='a[data-section=special_exams]').first.click() timed_exam_section = SpecialExamsPage(self.browser) timed_exam_section.wait_for_page() return timed_exam_section
self.mu = sharedX(bias, name = 'mu')
join_index = left_ax.take(left_indexer) return join_index, left_indexer, right_indexer
email, password = self._setup_user() self._login(email, password) email, password = self._setup_user(is_staff=True) self._login(email, password)
template_dir_name = None module_class = StaticTabModule
content = None try: content = self.load_asset_from_location(loc) except (ItemNotFoundError, NotFoundError): return HttpResponseNotFound()
msg = 'no signature found for builtin function {0!r}'.format(obj) raise ValueError(msg)
return comdat['stderr']
import yaml import salt.ext.six as six
return self.df.index.tolist()[section]
'random_reauth_delay': int,
binarized = label_binarize(y, classes, neg_label=neg_label, pos_label=pos_label, sparse_output=sparse_output) assert_array_equal(toarray(binarized), expected) assert_equal(issparse(binarized), sparse_output)
url_path = embargo_api.message_url_path(self.course.id, access_point) self.assertEqual(url_path, expected_url_path)
ax = df.ix[:, [0]].plot(color='DodgerBlue') self._check_colors(ax.lines, linecolors=['DodgerBlue'])
id = models.UUIDField(default=uuid.uuid4, primary_key=True)
html_parent = self.store.get_parent_location(html.location) self.assertEquals(unicode(html_parent), unicode(vertical1.location))
n_neighbors += 1
#pylint: disable=E0602
self.set_config(False) course = CourseFactory.create()
from __future__ import unicode_literals
assert_array_equal(np.log(proba[k]), log_proba[k])
super(UngenerateCertificatesTest, self).setUp() self.course = self.courses[0]
if not inspect.isclass(value) and hasattr(value, 'contribute_to_class'): value.contribute_to_class(cls, name) else: setattr(cls, name, value)
self.assertEqual(new_bob_profile._state.db, None) self.assertEqual(charlie._state.db, None)
dt_str = ''.join(tokens) if parsed_datetime.strftime(guessed_format) == dt_str: return guessed_format
self.assertIn('<button class="{} inactive progress-0 nav-item"'.format(self.ICON_CLASSES[user_tag]), content) for tooltip in self.TOOLTIPS[user_tag]: self.assertIn(tooltip, content)
data = data._data
if __opts__['test']: ret['result'] = None return ret
with ignore_warnings(): estimator = Estimator()
import salt.ext.six as six
BlockCountsTransformer.collect(self.block_structure) self.block_structure._collect_requested_xblock_fields()
city_dict = {name: coords for name, coords in city_data}
self.define_option_problem(PROBLEM_URL_NAME) self._test_run_with_task(task_class, action_name, 0)
pass
return self.check_root()
microsite.set_by_domain(self.microsite_subdomain) self.assertEqual(microsite.get_value('platform_name'), 'Test Microsite')
import salt.ext.six as six from salt.ext.six.moves import filter from salt.ext.six.moves.urllib.parse import quote as _quote
if power_iteration_normalizer == 'auto': if n_iter <= 2: power_iteration_normalizer = 'none' else: power_iteration_normalizer = 'LU'
mask = labels == curr_label current_distances = distances[mask]
return self.q(css="#register-email").attrs('value')[0]
if is_comment_too_deep(parent=cc.Comment(comment_id)): return JsonError(_("Comment level too deep")) return _create_comment(request, CourseKey.from_string(course_id), parent_id=comment_id)
missing_node_cache(prov_dir, nodes, provider, opts)
if not pvdisplay(device): cmd.append(device) elif not override: raise CommandExecutionError('Device "{0}" is already an LVM physical volume.'.format(device))
from pylearn2.gui.patch_viewer import PatchViewer
import salt.utils
pass
return last_arg_byref(cargs)
other = tslib._localize_pydatetime(other, tzinfo)
ica = FastICA(n_components=1, whiten=False, random_state=0) assert_warns(UserWarning, ica.fit, m) assert_true(hasattr(ica, 'mixing_'))
n_samples, n_features = iris.data.shape
if staff not in list_staff_ccx: try: enroll_email( course_id=ccx_key, student_email=staff.email, auto_enroll=True, email_students=send_email, email_params=email_params, )
s = Series(date_range('20130101', periods=5, freq='D')) s.iloc[2] = pd.NaT
return cls.get_reso(cls.get_str_from_freq(freq))
if installed_apps is None and hasattr(sys.modules[__name__], 'apps'): raise RuntimeError("You must supply an installed_apps argument.")
self.assertEqual(iptables.build_rule(jump='LOG', **{'log-prefix': 'spam: '}), '--jump LOG --log-prefix "spam: "')
if course_data.get('name'):
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if backing in ('aufs', 'dir', 'overlayfs', 'btrfs'): lvname = vgname = None
self.assertNotEqual(global_vars, [], msg='No modules were loaded.')
MIGRATION_MODULES = NoOpMigrationModules()
mock.side_effect = ValueError self.assertEqual(client.get('not-found'), None)
get_deployment = show_deployment
ret.update(set( [x for x in _get_sysv_services() if _sysv_enabled(x)] )) return sorted(ret)
request = HttpRequest()
result = f.clean('1:30 PM 21-12-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
gbq.to_gbq(df, destination_table, PROJECT_ID, chunksize=10000)
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
self.assertFalse(res_json['success']) self.assertEqual( res_json['message'], u'Invalid data, generate_for must be "new" or "all".' )
log.error('Unable to create symlink {0}'.format(down_file)) if not start: os.unlink(down_file) return False
mako_middleware_process_request(request)
from __future__ import absolute_import
b01c_shape = [result.shape[0], space.shape[0], space.shape[1], space.num_channels] result = result.flatten() result = tensor.reshape(result, newshape=b01c_shape, ndim=4)
return self.page.paginator.num_pages
if getattr(self.distribution, 'salt_version_hardcoded_path', None) is None: print('This command is not meant to be called on it\'s own') exit(1)
return self._asides
with assertRaisesRegexp(ValueError, "level should contain"): unstacked.stack([0, 'month'])
return comdat['stderr']
with self.assertRaises(UserOrgTag.DoesNotExist): UserOrgTag.objects.get(user=self.user, org=self.course.id.org, key="email-optin")
import urllib2 urlopen = urllib2.urlopen
config = CertificateHtmlViewConfiguration(enabled=enabled, configuration=configuration_string) config.save() return config
resp = self.client.get(get_url('xblock_handler', handouts.location))
group_element_names = { 'checkbox': 'checkboxgroup', 'radio': 'radiogroup', 'multiple': 'choicegroup' }
return False
try: os.unlink(filename_numpy) except: pass try: os.unlink(filename_larry) except: pass try: os.unlink(filename_pandas) except: pass
nat_index = to_datetime( ['NaT'] * 10 + ['2000-01-01', '1/1/2000', '1-1-2000']) nat_frame = DataFrame({'A': nat_index}, index=nat_index)
__virtualname__ = 'sysctl'
assert_almost_equal(result._y.values.flat, [1, 4, 5], check_dtype=False)
mode = 'r+'
from __future__ import unicode_literals
train_composite = Train(shared_dataset, mlp_composite, SGD(0.1, batch_size=5, monitoring_dataset=shared_dataset)) train_composite.algorithm.termination_criterion = EpochCounter(1) train_composite.main_loop()
if isinstance(index_names[0], compat.string_types)\ and 'Unnamed' in index_names[0]: index_names[0] = None
var_f_star = self.kernel_.diag(X) - np.einsum("ij,ij->j", v, v)
self.assertEqual(len(self.certificates_page.certificates), 1)
CourseEnrollmentFactory( course_id=self.course.id, user=self.user, mode="verified" )
return '', 'Password authentication failed', 254
assert_raises(ValueError, mlb.inverse_transform, np.array([[1]])) assert_raises(ValueError, mlb.inverse_transform, np.array([[1, 1, 1]]))
with store.branch_setting(ModuleStoreEnum.Branch.draft_preferred): store.publish(item_location, ModuleStoreEnum.UserID.test)
return self._enabled
HAS_LIBS = False try: import splunklib.client from splunklib.client import AuthenticationError from splunklib.binding import HTTPError HAS_LIBS = True except ImportError: pass
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [])
for attr in REQUISITES: if attr in kwargs: kwargs[attr] = [ req() if isinstance(req, StateRequisite) else req for req in kwargs[attr] ]
is_eligible = api.is_user_eligible_for_credit("staff", credit_course.course_key) self.assertFalse(is_eligible)
s = self.get_node(key) if s is not None: s._f_remove(recursive=True) return None
gbq.to_gbq(df, destination_table, PROJECT_ID, chunksize=10000)
certificate = res_json['certificates'][1] self.assertEqual(certificate.get('total_issued_certificate'), 3) self.assertEqual(certificate.get('mode'), 'verified')
self.assertNotContains(resp, 'Robot_Super_Course')
result.queryset = result.queryset return result
from __future__ import absolute_import
desc1 = df.describe(include="all") desc2 = df.describe(include=[np.generic, "category"]) assert_frame_equal(desc1, desc2)
ret = pem_header+'\n' for i in range(0, len(pem_body), 64): ret += pem_body[i:i+64]+'\n' ret += pem_footer+'\n'
self._captions_visibility(True)
from __future__ import unicode_literals
return clean
self._create_block_hierarchy() self.store.publish(self.course.location, self.user_id)
import integration import salt.utils from salt.exceptions import CommandExecutionError
X, y = self._build_y(X, y, sample_weight)
{% load_yaml as var1 %} foo: it works {% endload %} {% load_yaml as var2 %} bar: for real {% endload %}
return queryset.order_by('-created')
content = '\n'.join([TAB + line for line in content])
if public: for filename in self.filenames: make_readable(filename)
return super(SplitBulkWriteMixin, self)._get_bulk_ops_record( course_key.replace(branch=None, version_guid=None), ignore_case )
from __future__ import absolute_import
return self.answer_values
flags += libvirt.VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES
return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
non_editable_fields = super(SequenceDescriptor, self).non_editable_metadata_fields non_editable_fields.append(self.fields['is_entrance_exam']) return non_editable_fields
descriptor.raw_grader = descriptor.raw_grader
binner, grouper, obj = self._get_grouper(obj)
for c in City.objects.annotate(num_points=functions.NumPoints('point')): self.assertEqual(1, c.num_points)
from __future__ import unicode_literals
self.fake_payment_page.submit_payment()
return self.q(css=self.search_results_selector)
from salt.states import test
courses, in_process_course_actions = _accessible_courses_summary_list(request)
return None, None
from salttesting import skipIf, TestCase from salttesting.helpers import ( ensure_in_syspath, requires_network, TestsLoggingHandler ) ensure_in_syspath('../../')
self.assertEqual(self.engine.template_loaders[0].cache_key('-template.html', []), '-template.html')
p = Post(title="Django 1.0 is released", posted=datetime.datetime(2008, 9, 4)) p.full_clean()
import salt.utils from salt import crypt
num_students = len(students) self.assertDictContainsSubset({'attempted': num_students, 'succeeded': num_students, 'failed': 0}, result)
self._set_opt_in_pref(self.user, "MyOrg", True) self._set_opt_in_pref(self.user, "myorg", False)
pass
DELAY = 0.5
from salt.states import boto_secgroup from salt.utils.odict import OrderedDict
if self.due is None: return False return datetime.now(UTC()) > self.due
"Big data" * 68000, encode=base64.encodestring if PY2 else base64.encodebytes)
request = self.request_factory.get('/', {'date_registered__isnull': 'True'}) changelist = self.get_changelist(request, Book, modeladmin)
self.url = reverse('instructor_dashboard', kwargs={'course_id': self.course_key.to_deprecated_string()}) self.email_link = '<a href="" data-section="send_email">Email</a>'
for key, val in six.iteritems(string_kwarg): invalid_kwargs.append('{0}={1}'.format(key, val))
np.unique(self.ts)
for c in Country.objects.annotate(num_geom=functions.NumGeometries('mpoly')): self.assertEqual(2, c.num_geom)
self.assertIn(INSTANCE_NAME, ret.keys())
call_command('manage_user', TEST_USERNAME, TEST_EMAIL, '--remove') self.assertEqual([], list(User.objects.all()))
try: code_redemption = cls.objects.get(registration_code__code=code, registration_code__course_id=course_id) except cls.DoesNotExist: code_redemption = None return code_redemption
Lars.fit(self, X, y) return self
assert_series_equal(result.to_series(), s, check_index_type=check_index_type, check_categorical=check_categorical)
return xblock._edited_on
pass
return _get_timezone_name(get_current_timezone())
ops.add_flex_arithmetic_methods( cls, _panel_arith_method, use_numexpr=use_numexpr, flex_comp_method=ops._comp_method_PANEL)
output = six.StringIO() output.write('content') output.seek(0)
return '\n'.join([(' ' * spaces) + l for l in pprint.pformat(text).splitlines()])
for p in listener_policies: if re.match(r'^ELBSecurityPolicy-\d{4}-\d{2}$', p): default_aws_policies.add(p)
pass
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
assets, count = content_store.get_all_content_for_course(self.course.id) self.assertEqual(count, 2)
qs = Parcel.objects.filter(border2__contains=F('city__location__point')) self.assertEqual(1, len(qs)) self.assertEqual('P1', qs[0].name)
from django.conf import settings, global_settings
with warnings.catch_warnings(record=True): dates += offset
from ..gaussian_process.kernels import Kernel as GPKernel
expected = df2.drop_duplicates(['AAA', 'B']) tm.assert_frame_equal(result, expected)
return self.metric == 'precomputed'
return CompositeSpace((CompositeSpace((image_space,) * 2), VectorSpace(dim=1)))
from __future__ import absolute_import import re
PY2 = sys.version_info[0] == 2 PY3 = sys.version_info[0] == 3 PY34 = sys.version_info[0:2] >= (3, 4)
data = self.frame.unstack()
def callable(): raise Exception try: raise Exception except Exception: return technical_500_response(request, *sys.exc_info())
L = np.empty((max_features, max_features), dtype=Gram.dtype)
module = CapaFactory.create(attempts=1)
'reactor_worker_hwm': int,
else: self.set_atom_data(block)
try: new_other = np.array(other, dtype=self.dtype) except ValueError: new_other = np.array(other)
ind2 = self.index.set_labels(new_labels, level=[0, 1]) assert_matching(ind2.labels, new_labels) assert_matching(self.index.labels, labels)
if not snapshot: ret['error'] = 'one or more snapshots must be specified'
Book.objects.filter(pages__gt=150).delete()
return self.q(css='.bit-publishing .wrapper-visibility').first.text[0]
from __future__ import absolute_import
expected = Timestamp('3/11/2012 05:00', tz=self.tzstr('US/Eastern'))
add_function_parentheses = False
world.browser.execute_script("window.scrollTo(0,1024)") assert world.is_css_present("button.check.is-disabled")
expected = idx1 ^ idx2 self.assertTrue(tm.equalContents(result, expected)) self.assertIsNone(result.name)
r = 0.1 real_cov = toeplitz(r ** np.arange(n_features)) coloring_matrix = cholesky(real_cov)
role_class(*args)
from pandas.core.nanops import unique1d values = self.values if hasattr(values, 'unique'): return values.unique() return unique1d(values)
return reverse('admin:view_on_site', kwargs={ 'content_type_id': get_content_type_for_model(obj).pk, 'object_id': obj.pk })
from __future__ import absolute_import import os
i = pd.date_range('20130101', periods=3, tz='US/Eastern')
s = Series([1.2345] * 100) s[::2] = np.nan result = s.unique() self.assertEqual(len(result), 2)
splits = iter(cval.KFold(4, 2)) train, test = next(splits) assert_array_equal(test, [0, 1]) assert_array_equal(train, [2, 3])
super(RemoteUserCustomTest, self).test_unknown_user() newuser = User.objects.get(username='newuser') self.assertEqual(newuser.email, 'user@example.com')
channels[prefix + name] = (raw_channels[name], cost_ipt, (spaces[i], sources[i]))
self.plural = other.plural self._info = other._info.copy() self._catalog = other._catalog.copy()
sample_dict = {'x': (-10, 10), 'y': (-10, 10)}
conversions = { }
loc = Location.objects.annotate(num_cities=Count('city')).get(id=dallas.location.id) self.assertEqual(2, loc.num_cities)
yield current.node visited.add(current.node) stack.pop()
self.assertEqual(df.index.freq, None) self.assertEqual(df.index.inferred_freq, 'D')
e = Employee.objects.get(pk=123) self.assertEqual(e.pk, 123) self.assertEqual(e.employee_code, 123)
idx = DatetimeIndex(['2013-01-01', '2013-01-02'], dtype='datetime64[ns, US/Eastern]')
exception = Exception("failure in rerunning") try: raise exception except: CourseRerunState.objects.failed(course_key=self.course_key)
ct = ContentType.objects.get_for_model(Model) return Permission.objects.get(content_type=ct, codename=perm)
super(WSGIServer, self).server_bind() self.setup_environ()
urlconf_repr = '<%s list>' % self.urlconf_name[0].__class__.__name__
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
if isinstance(original, Series): expected = original.iloc[indexer] else: if getitem: expected = original.iloc[:, indexer] else: expected = original.iloc[indexer] assert_almost_equal(result, expected)
Map.__salt__ = __salt__ _globals['Map'] = Map
ret = self.run_script( 'salt-call', '-c {0} --output-file={1} test.versions'.format( self.get_config_dir(), output_file_append ), catch_stderr=True, with_retcode=True )
with translation.override('de'): output = self.engine.render_to_string('i18n06') self.assertEqual(output, 'Seite nicht gefunden')
if course_org_filter: org_filter_out_set.remove(course_org_filter)
try: self.assertTrue(np.may_share_memory(self.series.index, identity.index)) except (AttributeError): pass
self._test_dropdown_field( u'country', u'Country or Region', u'', [u'Pakistan', u'Palau'], )
params = {'bandwidth': np.logspace(-1, 1, 20)} grid = GridSearchCV(KernelDensity(), params) grid.fit(data)
import MySQLdb import MySQLdb.cursors import MySQLdb.converters from MySQLdb.constants import FIELD_TYPE, FLAG HAS_MYSQLDB = True
if not os.path.isdir(self.git_repo_dir / 'edx4edx'): os.mkdir(self.git_repo_dir / 'edx4edx')
from __future__ import absolute_import
pillar_dir = os.path.normpath(os.path.join(gitpil.working_dir, root))
__virtualname__ = 'desktop'
if progress and num_feat % progress_interval == 0: stream.write('Processed %d features, saved %d ...\n' % (num_feat, num_saved))
_deprecated_invalids = ['iloc', 'loc', 'ix', 'iat', 'at']
return theano.function(*args, on_unused_input='ignore', **kwargs)
@property def tuple(self): "Returns a tuple version of the geometry from the coordinate sequence." return self._cs.tuple coords = tuple
self.content = content
CertificateGenerationConfiguration.objects.create(enabled=True)
if self.io_loop is None: self.io_loop = tornado.ioloop.IOLoop.current()
grid_search = GridSearchCV(clf, param_grid=param_grid) start = time() grid_search.fit(X, y)
FEATURES['ENABLE_PREREQUISITE_COURSES'] = True
url(r'^lang_pref/session_language', 'lang_pref.views.update_session_language', name='session_language'),
can_introspect_big_integer_field = True
from __future__ import absolute_import
df = DataFrame([np.arange(5) for x in range(5)]) result = df.get_dtype_counts() expected = Series({'int64': 5})
self._rot_set = True
import xml.etree.ElementTree as ElementTree
for i in range(columns.nlevels):
if 'course_id' in data and data['course_id'] is None:
self.check_assertion_structure(assertion, response['results'][0])
re.compile(r'^Pages \|'): [ 'js/models/explicit_url', 'coffee/src/views/tabs', 'xmodule', 'coffee/src/main', 'xblock/cms.runtime.v1' ],
self.assert_redirect_to_provider_looks_correct(self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN)))
import salt.ext.six as six
attempt2 = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt2.mark_ready() attempt2.submit() attempt2.approve() attempt2.save()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
self.browser.execute_script(script) time.sleep(DELAY) self.wait_for_ajax()
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
class Category(models.Model): name = models.CharField(max_length=50)
multioutput_y = np.column_stack([y2, y2[::-1]]) scores = cross_val_score(clf, X_sparse, multioutput_y) assert_array_equal(scores, clf.score(X_sparse, multioutput_y))
try: ts_b36, hash = token.split("-") except ValueError: return False
try: from pandas import to_datetime return to_datetime(v) except: pass
self.login_student() self.submit_answer('Correct', 'Correct') self.assertEqual(self.get_progress_detail(), u'2/2')
mlp._coef_grads = [0] * (mlp.n_layers_ - 1) mlp._intercept_grads = [0] * (mlp.n_layers_ - 1)
return dt.strftime('%Y%m%d')
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): result = ols(y=y, x=x, pool=False, **kwds)
if args or kwargs: if is_callable(func):
comps = fun.split('.') if len(comps) < 2: __context__['retcode'] = 1 return 'Invalid function passed'
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
for col in f.columns: ts = f[col] for idx in f.index[::5]: self.assertEqual(ix[idx, col], ts[idx])
pass
ret[name] = version_rev
results[k] = v
from __future__ import absolute_import
'retry_dns': float,
with make_image_file() as image_file: response = self.client.post(self.url, {'file': image_file}, format='multipart') self.check_response(response, 204)
module_count_before = len(world.browser.find_by_css(module_css))
store = self._verify_modulestore_support(course_id, 'branch_setting') with store.branch_setting(branch_setting, course_id): yield
from __future__ import absolute_import import json import logging import os import yaml
name = _sdecode(name) if snap_name: snap_name = _validate_snap_name(name, snap_name, runas=runas)
if new_datetime is not None: self.expiration_datetime_is_explicit = True self._expiration_datetime = new_datetime
import salt.utils.xmlutil as xml from salt._compat import ElementTree as ET
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
receiver = DatabaseReceiver() signals.m2m_changed.connect(receiver=receiver)
result = self._constructor(self._data.get(key)) if result.columns.is_unique: result = result[key]
continue
a.update({'c': 3}) b.update({'c': 3}) self.assertNotEqual(a, b)
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
self.assertTrue(check_password({}, 'test@example.com', 'test'))
start_time = time.time() timeout_in_seconds = timeout / 1000 max_time = start_time + timeout_in_seconds
content = json.loads(response.content) parameters = content['parameters']
for inputfile in inputfiles:
return time.strftime('%Y-%m-%dT%H:%M:%SZ', value)
comment = kwargs['post'] handle_activity(kwargs['user'], comment, long(comment.thread.user_id))
import pytz data = StringIO("Date,x\n2012-06-13T01:39:00Z,0.5")
import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudSystemExit
y = np.reshape(y, (-1, 1))
return ngroup_pillar
(["foo", "bar", "baz"], [None, "bar", "baz"]),
return get_instructions(xmltree)
module = module + '.' if not module.endswith('.') else module
panel = tm.makePanel()
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.NEVER_PUBLISHED, is_locked=True), self.STAFF_ONLY_WARNING )
def _str_header(self, name, symbol='`'): return ['**' + name + '**'] + [symbol*(len(name)+4)]
self.assertFalse(hasattr(self.series.iteritems(), 'reverse'))
try: from pysqlcipher import dbapi2 as sqlcipher HAS_SQLCIPHER = True except ImportError: HAS_SQLCIPHER = False
if __grains__['os'] == 'FreeBSD': return __virtualname__ return (False, 'The freebsdservice execution module cannot be loaded: only available on FreeBSD systems.')
return (tok.lower() for tok in re.findall(r"\w+", doc))
import json import logging
import salt.utils
if isinstance(key, string_types): self.env.swapkey(self.local_name, key, new_value=value)
act_func = None if i == 0: act_func = self.aes[0].act_dec else: act_func = self.aes[i - 1].act_enc
y_true = rng.randint(0, 3, size=10) assert_raise_message(ValueError, "multiclass format is not supported", average_precision_score, y_true, y_pred)
X = X_2d n = X.shape[0]
ext_user = User.objects.get(email=self.ext_user.email) self.assertTrue(auth.user_has_role(ext_user, CourseInstructorRole(self.course.id)))
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
import integration from salt.config import cloud_providers_config
try: ip_int = self._ip_int_from_string(ip_str) except AddressValueError: self._report_invalid_netmask(ip_str)
if module_name in self.loaded_modules: mod_dict = self.loaded_modules[module_name] else: mod_dict = self.mod_dict_class()
self.fill_color, self.fill_opacity = fill_color, fill_opacity
return reverse('social:complete', kwargs={'backend': self.PROVIDER_BACKEND})
x_squared_norms_from_csr = row_norms(X_csr, squared=True) labels_csr, inertia_csr = _labels_inertia( X_csr, x_squared_norms_from_csr, noisy_centers) assert_array_almost_equal(inertia_csr, inertia_gold) assert_array_equal(labels_csr, labels_gold)
_upload_file(self.srt_file, self.item_descriptor.location, uk_translation_filename)
clf = NearestCentroid() clf.fit(X, y) assert_array_equal(clf.predict(T_csr), true_result)
self.assertQuerysetEqual( Order.objects.exclude(items__status=1), ['<Order: 3>'])
f = F("foo") g = deepcopy(f) self.assertEqual(f.name, g.name)
try: validate_new_email(self.request.user, email) except ValueError as err: return err.message
FEATURES['MILESTONES_APP'] = True
self.assertEqual(views.get_cosmetic_display_price(self.course, registration_price), "$99")
return ipsec_site_connection
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.lisa])
if not try_quick:
click_css(self, 'a.action-save')
axes = df.plot(style='r', subplots=True) for ax in axes: self._check_colors(ax.get_lines(), linecolors=['r']) tm.close()
from salt.modules import portage_config
__virtualname__ = 'git'
if self.axis is not None: axis = self.obj._get_axis_number(self.axis) return self._getitem_axis(tup, axis=axis)
thumbnail_name = StaticContent.generate_thumbnail_name( content.location.name, dimensions=dimensions ) thumbnail_file_location = StaticContent.compute_location( content.location.course_key, thumbnail_name, is_thumbnail=True )
token = win32security.LogonUser(username, domain, password, win32con.LOGON32_LOGON_INTERACTIVE, win32con.LOGON32_PROVIDER_DEFAULT)
from __future__ import absolute_import import logging
self.assertTrue(bool(version))
(['honor', 'verified', 'audit'], 'course_modes_choose', CourseMode.HONOR),
mat = self.mixed_frame.as_matrix(['foo', 'A']) self.assertEqual(mat[0, 0], 'bar')
if left_list or right_list or left_str or right_str: op_instance = self.rewrite_map[op_type]()
import salt.log import salt.crypt import salt.transport.frame from salt.exceptions import SaltReqTimeoutError
for prov_name, prov_settings in six.iteritems(config.pop('providers')): config[prov_name] = prov_settings break
self.assertIsNone(cache.get("does_not_exist")) self.assertEqual(cache.get("does_not_exist", "bang!"), "bang!")
import salt.utils.sdb
self._update_password(staff_email, "updated") self._login(staff_email, "updated")
if save_definition: return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
connection.settings_dict.update(settings_dict) connection.close()
microsite_orgs = microsite.get_all_orgs() return [course for course in courses if course.location.org not in microsite_orgs]
rng = date_range(START, END, freq=datetools.bmonthEnd)
assert com._random_state() is np.random
cached_pkg = cached_pkg.replace('/', '\\') cache_path, _ = os.path.split(cached_pkg)
environ['QUERY_STRING'] = str(raw_query_string, 'iso-8859-1')
for key, expected_value in subset.iteritems(): self.assertEquals(superset[key], expected_value)
self.q(css=self._bounded_selector("a.link-cross-reference[data-section=data_download]")).first.click()
import atexit import logging
default_encoded_video = {}
if not hasattr(coeffs, '__iter__'): coeffs = [coeffs] * len(self.layers)
content_type = models.ForeignKey(ContentType, models.CASCADE) object_pk = models.TextField() content_object = GenericForeignKey(ct_field="content_type", fk_field="object_pk")
from __future__ import absolute_import
return self.q(css='.prompt.{dialog_type}'.format(dialog_type=dialog_type)).visible
if self.metadata is not None: handler.write_metadata(self.cname, self.metadata)
ret = self.run_run_plus(fun='fileserver.dir_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
tm.assert_frame_equal(shifted.to_dense(), exp, check_dtype=False) shifted = frame.shift(1) exp = orig.shift(1) tm.assert_frame_equal(shifted, exp)
return matched.group('charset').replace('"', '')
eval_frame_chained_cmp_all_threads = \ Benchmark("pd.eval('df < df2 < df3 < df4')", common_setup, name='eval_frame_chained_cmp_all_threads', start_date=datetime(2013, 7, 21))
self.q(css='div.problem button.save').click() self.wait_for_ajax()
args = (machine, session) progress = wait_for(_start_machine, timeout=timeout_in_seconds, func_args=args) if not progress: progress = machine.launchVMProcess(session, "", "")
return None
pos = logical_line.find('`') if pos > -1: yield pos, "W604 backticks are deprecated, use 'repr()'"
import os import shutil import logging import tempfile
return (self.q(css=self._bounded_selector('.cohort-management-nav')).visible and self.q(css=self._bounded_selector('.wrapper-cohort-supplemental')).visible)
return self.q(css='a[data-section=student_admin].active-section').present
unique_together = ('user', 'usage_key')
if self.section.default_tab: courseware_context['default_tab'] = self.section.default_tab
if self.edx_video_id and edxval_api: try: val_profiles = ["youtube", "desktop_webm", "desktop_mp4"] val_video_urls = edxval_api.get_urls_for_profiles(self.edx_video_id, val_profiles)
update_url = reverse_usage_url("xblock_handler", usage_key) return self.client.ajax_post( update_url, data={ 'metadata': metadata, } )
self.assertTrue(cp_blk.equals(blk)) self.assertTrue(cp_blk.values.base is blk.values.base)
self.batch_axis=list(axes).index('b') self.axes_to_sum = list(range(len(axes))) self.axes_to_sum.remove(self.batch_axis)
if depth: cmd = '{0} -d {1}'.format(cmd, depth) elif recursive: cmd = '{0} -r'.format(cmd)
result = f.clean('12/21/2010') self.assertEqual(result, date(2010, 12, 21))
panel = panel.copy() panel[name] = 1. return panel.consolidate()
return cls._str_reso_map.get(resostr, cls.RESO_DAY)
return self.q(css='.page-content-secondary .team-country :last-child').text[0]
from salt.states import mac_defaults as macdefaults
UNKNOWN_SOURCE = '<unknown source>'
res = df.copy() res.iloc[lambda x: [1, 3]] = 0 exp = df.copy() exp.iloc[[1, 3]] = 0 tm.assert_frame_equal(res, exp)
for covariance_type in ["full", "tied", "diag", "spherical"]: yield check_positive_definite_covars, covariance_type
ADD_USER = __random_string() DEL_USER = __random_string() PRIMARY_GROUP_USER = __random_string() CHANGE_USER = __random_string()
assert_almost_equal(dists[3], 2, decimal=5)
if _has_infs(result): result = alt(values, axis=axis, skipna=skipna, **kwds)
import versioneer cmdclass = versioneer.get_cmdclass()
from pandas import date_range s = Series(date_range('20130102', periods=6)) result = s.idxmin() self.assertEqual(result, 0)
assert V is orig_V assert drop_mask is orig_drop_mask
self.edited_on = edit_info.get('edited_on', None) self.edited_by = edit_info.get('edited_by', None)
tupl = d.as_tuple() units = len(tupl[1]) - tupl[2] prec = abs(p) + units + 1
return np.hstack([l.ravel() for l in coefs_ + intercepts_])
if clone: return self.clone() else: return
output = self.engine.render_to_string('list-index05', {'var': {'1': "hello"}}) self.assertEqual(output, 'hello')
self.assertEqual(XBlockDisableConfig.disabled_create_block_types(), ['poll', 'survey'])
self.assertTrue(self.video.select_transcript_format('txt'))
__virtualname__ = 'pkgutil'
with filesystem.open('updates.html', 'r') as course_policy: on_disk = course_policy.read() self.assertEqual(course_updates.data, on_disk)
problem = self.build_problem(answer="1/3", tolerance=1e-3) correct_responses = ["1/3", "0.333333"] incorrect_responses = [] self.assert_multiple_grade(problem, correct_responses, incorrect_responses)
return sum(self.maxpoints.values())
f = ignore_warnings X = sp.lil_matrix((3, 1)) X[0, 0] = -1 X[2, 0] = 1
filenames = ['', 'C:\\Windows\\']
if len(bits) % 2 == 0: prefix = bits[1] else: prefix = None
message = "np.nan is an invalid document, expected byte or unicode string." exception = ValueError
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import string_types
fs_root = mkdtemp()
result = self.client.login(username=self.USERNAME, password=self.OLD_PASSWORD) self.assertFalse(result)
#man_show_urls = False
ASSET_XML_TAG = 'asset'
ensure my cloudwatch service exists: pagerduty_service.present: - name: my cloudwatch service - service: escalation_policy_id: "my escalation policy" type: aws_cloudwatch description: "my cloudwatch service controlled by salt"
self.get_select_option(to_box, str(self.jason.id)).click() self.get_select_option(to_box, str(self.john.id)).click()
self.payment_and_verification_flow.proceed_to_payment()
may_translation = month_name expected_caption = '{0:s} {1:d}'.format(may_translation.upper(), 1984)
elif self.ndim >= 3: return self.obj.__setitem__(indexer, value)
CourseFixture(**self.course_info).install() course_id = self.course_id if enroll else None AutoAuthPage(self.browser, course_id=course_id).visit()
from salt.utils import dictdiffer from salt.exceptions import CommandExecutionError
history = HistoricalRecords()
self.q(css=self._bounded_selector(".annotator-close")).first.click() self.wait_for_notes_invisibility("Note is canceled.") return self
searcher = SearchEngine.get_search_engine(index_name)
problem = self.build_problem(answer="Second", case_sensitive=False)
axes = df.plot.barh(width=width, subplots=True) for ax in axes: for r in ax.patches: self.assertEqual(r.get_height(), width)
super(UnderscoreTemplateLinter, self).__init__() self._skip_underscore_dirs = SKIP_DIRS + ('test',)
EMAIL_PORT = 25
__virtualname__ = 'user'
self.lib_page.click_delete_button(first_block_id, confirm=True) self.assertEqual(len(self.lib_page.xblocks), 1) self.assertEqual(self.lib_page.xblocks[0].locator, second_block_id)
from salt.utils.odict import OrderedDict import salt.ext.six as six
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
root_dir = path(mkdtemp_clean()) print 'Exporting to tempdir = {0}'.format(root_dir) export_course_to_xml(self.store, content_store, course.id, root_dir, 'test_export')
for mode in available_modes: CourseModeFactory.create( course_id=self.course_key, mode_display_name=mode, mode_slug=mode, )
from __future__ import division
from salt.utils import dictupdate
sparse_results = sparse_classifier.staged_predict(X_test_sparse) dense_results = dense_classifier.staged_predict(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
body = self.q(css=selector)[0] ActionChains(self.browser).move_to_element(body).perform() return self
self.assertRaises(ValueError, lambda: to_datetime(malformed, errors='raise'))
AFFILIATE_COOKIE_NAME = 'affiliate_id'
return super(NullBackend, self).clear()
if len(masks): mask = masks[0] for m in masks[1:]: mask = mask & m mask = mask.ravel() else: mask = None
pygments_style = 'sphinx'
X = X_2d[:100, :]
if event_index is not None: staticSlice = _period_slice(static, -1) movingSlice = _period_slice(moving, event_index)
response = self.client.get(collector_url) self.assertContains(response, 'name="widget_set-0-id"')
bootstrap=bootstrap, bootstrap_features=False, n_estimators=n_estimators, max_samples=max_samples, max_features=max_features, n_jobs=n_jobs, random_state=random_state, verbose=verbose)
closest_dist_sq = euclidean_distances( centers[0, np.newaxis], X, Y_norm_squared=x_squared_norms, squared=True) current_pot = closest_dist_sq.sum()
overview_v10 = CourseOverview.get_from_id(course.id) self.assertEqual(overview_v10.version, 10)
return cls(arr, index=index, name=name, copy=copy, fill_value=fill_value, fastpath=fastpath)
XP = np.empty((n_samples, self.n_output_features_), dtype=X.dtype)
if info.external_attr == 2716663808: source = zfile.read(target) os.symlink(source, os.path.join(dest, target)) continue
team_list = self.get_teams_list(user=user, expected_status=200, data=course_two_data) self.assertEqual(team_list['count'], 0)
return False
self.clear() self.delete() self._session_key = None
b2 = b.reindex(index=reversed(b.index)) result = a.dot(b) assert_series_equal(result, expected)
plt.figure() plt.legend(legend_rects, legend_labels, loc='upper left')
while stack:
if sp.issparse(preds[0]): preds = sp.vstack(preds, format=preds[0].format) else: preds = np.concatenate(preds) return preds[inv_locs]
if s is None: ret = salt.utils.shlex_split('') else: ret = salt.utils.shlex_split(s)
self.value = value self.categorical = False
super(CookieSessionTests, self).test_actual_expiry()
self.test_outbox.extend(email_messages) return len(email_messages)
if str(tz) != str(data.tz): raise TypeError("Already tz-aware, use tz_convert " "to convert.")
self.assertIsNotNone(get_template_request_context())
P3P_HEADER = 'CP="Open EdX does not have a P3P policy."'
return wrap(value, int(arg))
else: values, changed = _maybe_upcast_putmask(values, mask, fill_value)
self.assertEqual(len(calls), 1) self.assertIn('corrupted', calls[0])
self.assertUgettext('Date/time', 'Datum/Zeit')
if not alpha == 0: assert_array_less(np.diff(costs), 0)
result = next(k for k in parse_result if isinstance(k, numbers.Number)) return result
import yaml
currency = models.CharField(default="usd", max_length=8)
if not isinstance(model_att, six.string_types): model_att = att
bokchoy_utils.clear_mongo() self.cache.flush_all()
THIRD_PARTY_AUTH_OLD_CONFIG = AUTH_TOKENS.get('THIRD_PARTY_AUTH', None)
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
import logging import os import functools from itertools import repeat import warnings
for i, clf in enumerate((kernel_svm, nystroem_approx_svm, fourier_approx_svm)): plt.subplot(1, 3, i + 1) Z = clf.predict(flat_grid)
errors = super(InlineModelAdminChecks, self)._check_exclude(obj) if errors: return []
import salt.utils from salt.exceptions import CommandNotFoundError
self.assertTrue(self.video.downloaded_transcript_contains_text('txt', 'Equal transcripts'))
AccessTestData( partition_groups={1: 1, 2: 2}, xblock_access={1: [1]}, merged_parents_list=[{1: {3}}, {1: {1}}], expected_access=True, ),
if self._is_nested_tuple_indexer(tup): return self._getitem_nested_tuple(tup)
'ENABLE_VIDEO_UPLOAD_PIPELINE': False,
from salt.states import modjk import salt.ext.six as six
exc = IndexError if _np_version_under1p12 else TypeError
pidx = idx.to_period(freq='M') mask = isnull(pidx) assert (mask[0]) assert (not mask[1:].any())
assert world.is_css_not_present(ASSET_NAMES_CSS)
location = u'i4x://edX/DemoX/edx-reverification-block/invalid_location' checkpoint = VerificationCheckpoint.get_or_create_verification_checkpoint(self.course.id, location)
country_id = models.IntegerField() city_id = models.IntegerField()
if isinstance(block, list):
_sentinel = object()
result = salt.utils.slack.query(function='message', api_key=api_key, method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=_urlencode(parameters), opts=__opts__)
self._test_dropdown_field( u'pref-lang', u'Language', u'English', [u'Dummy Language (Esperanto)', u'English'], reloads_on_save=True, )
return (len(active_groups) + len(inactive_groups) == len(container.xblocks) - 1, len(active_groups))
return False
q1 = Tag.objects.filter(parent__isnull=True) q2 = Tag.objects.filter(parent__isnull=False)
self.assertIsNone(xblock_info.get('is_header_visible', None))
output = self.engine.render_to_string('inheritance 28') self.assertEqual(output, '!')
return self.q(css='#content .container section.course-content .sequential-status-message')
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
self._assert_course_verification_status(VERIFY_STATUS_MISSED_DEADLINE)
query = 'CREATE DATABASE "{0}"'.format(name)
assert_array_equal(lfw_pairs_train.target, [1, 1, 1, 1, 1, 0, 0, 0, 0, 0])
self.testing_course.enrollment_start = self.tomorrow self.testing_course.enrollment_end = self.nextday self.testing_course = self.update_course(self.testing_course, self.user.id)
AutoAuthPage(self.browser, course_id=self.course_id).visit()
add_arg('-m', '--match', dest='match', action='append')
from salttesting.unit import skipIf, TestCase from salttesting.case import ModuleCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
i2 = PeriodIndex([end_intv, Period('2005-05-05', 'B')]) self.assertEqual(len(i2), 2) self.assertEqual(i2[0], end_intv)
params = estimator.get_params() original_params = deepcopy(params)
from __future__ import absolute_import import logging import os import os.path import hashlib import json
monitoring_dataset = DenseDesignMatrix(X=X)
index = PeriodIndex(['NaT', '2011-01', '2011-02'], freq='M', name='idx')
kws.update(context) context = kws assert 'opts' in context assert 'saltenv' in context
for key, value in mappings.iteritems(): setattr(self, key, value)
listener_state = 'cmd_|-listener_test_listen_in_resolution_|-echo "Successful listen_in resolution"_|-mod_watch' self.assertIn(listener_state, state_run)
if tree.n_outputs == 1: value = tree.value[node_id][0, :] else: value = tree.value[node_id]
sparse = self.dense1.to_sparse() sparse2 = self.dense2.to_sparse()
self.assert_enrollment_status(as_server=True)
self.srs = value
world.wait_for( lambda _: world.css_has_value(grace_period_css, grace_period) )
pass
course_module = self.store.get_course(target_id)
for static_dir in STATICFILES_DIRS: try: _, data_dir = static_dir except ValueError: data_dir = static_dir
#today = '' #today_fmt = '%B %d, %Y'
mode, is_active = CourseEnrollment.enrollment_mode_for_user(self.user, self.course_key) self.assertTrue(is_active) self.assertEqual(mode, 'verified')
result = sparse.loc[orig % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
import salt.ext.six as six
render_args, _ = module.system.render_template.call_args context = render_args[1] self.assertIn("error", context['problem']['html'])
self._city = reader self._city_file = path
mock_get.return_value.content = json.dumps({}) self.assertRaises(EdxNotesParseError, helpers.get_notes, self.request, self.course)
BULK_EMAIL_MAX_RETRIES = 5
self.path = preprocess(self.path) X, y = self._load_data()
top_level_export_dir = 'exported_source_course' export_course_to_xml( modulestore, contentstore, source_course_key, export_dir, top_level_export_dir, ) import_course_from_xml( modulestore, 'test_user', export_dir, source_dirs=[top_level_export_dir], static_content_store=contentstore, target_id=source_course_key, create_if_not_present=True, raise_on_failure=True, )
applied = self.frame.apply(np.sqrt) assert_series_equal(np.sqrt(self.frame['A']), applied['A'])
'ioflo_console_logdir': str,
dataname = dataname.lower().replace(' ', '-') return re.sub(r'[().]', '', dataname)
from __future__ import absolute_import, print_function import datetime import copy import textwrap import difflib import logging import tempfile import os import pipes import time import shutil import re import random
cache_key = self._cache_key_for_kvs_key(kvs_key) field_object = self._cache.get(cache_key) if field_object is None: raise KeyError(kvs_key.field_name) field_object.delete() del self._cache[cache_key]
import logging import os
if youtube_stub_config: YouTubeStubConfig.configure(youtube_stub_config) if subtitles: self.assets.append('subs_3_yD_cEKoCk.srt.sjson') self.navigate_to_course_unit()
field_dict.update(self._field_overrides.get(name, {}))
reg = svm.SVR(kernel='rbf', gamma=1).fit(X, y)
return iter(self.estimators_)
response = self.client.get(reverse("dashboard")) self.assertHttpOK(response)
break
if (self._start - other._start) % gcd: return RangeIndex()
from __future__ import unicode_literals
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
visibility_editor = self.edit_component_visibility(component) for label in labels: visibility_editor.select_option(label, save=False) visibility_editor.save()
self.client.force_login(self.u1)
example_input[0, 0] = -2.5
return not self == other
assert_not_equal(len(np.intersect1d(tr_a, tr_b)), len(tr1))
self.mountpoint = ''
'ENABLE_LIBRARY_INDEX': False,
from salt.modules import mac_brew
VERSION = 4
block_structure.remove_block_if( check_child_removal )
key = safe_key('test', prefix, '')
t2v = Index(t2.values) self.assertTrue(t1.equals(t2v)) self.assertFalse(t1.identical(t2v))
label_type_to_index = {'category': 0, 'instance': 1, 'elevation': 2, 'azimuth': 3, 'lighting': 4}
BODY_SELECTOR = "#search-results-panel" TAB_SELECTOR = ".tab#view-search-results"
if 'openid_error' in request.session: error = True del request.session['openid_error']
self.course_key = course_key self.role = role self.user_partition_id = user_partition_id self.group_id = group_id self.user_name = user_name
with tm.assertRaisesRegexp(TypeError, 'not enough/duplicate arguments'): self.panel.transpose('minor', maj='major', minor='items')
try: SimpleView.as_view('value') self.fail('Should not be able to use non-keyword arguments instantiating a view') except TypeError: pass
ambiguous = datetime.datetime(2015, 10, 25, 2, 30)
expected = DataFrame(False, index=df1.index, columns=df1.columns) result = df1.isin(df2) tm.assert_frame_equal(result, expected)
self.na_op = lambda x, y: getattr(x, self.name)(y) return lvalues, rvalues
self.dashboard_page.visit()
params["username"] = "this_username_has_31_characters" assert_username_error("Username cannot be more than 30 characters long")
rhobar1 = sqrt(rhobar**2 + damp**2) cs1 = rhobar / rhobar1 sn1 = damp / rhobar1 psi = sn1 * phibar phibar = cs1 * phibar
Worker.objects.filter(department__gte=0)
cache.clear()
self.assertEqual(response.status_code, 400)
pki_dir = pki_dir.replace('minion', 'master')
cache = uuid() if cache: if not force: log.error('BCache cache {0} is already on the system'.format(cache)) return False cache = _bdev()
from __future__ import absolute_import
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, )
assert_array_almost_equal(K.flat[::6], np.ones(5))
cv = (rng.rand() + 1.0) ** 2 samples = mixture.sample_gaussian( mu, cv, covariance_type='spherical', n_samples=n_samples)
foo = Series([1, 2], name='foo') bar = Series([1, 2]) baz = Series([4, 5])
tm.assert_series_equal(result, s, check_categorical=False)
if col_order is not None: if sorted(col_order) == sorted(final_df.columns): final_df = final_df[col_order] else: raise InvalidColumnOrder( 'Column order does not match this DataFrame.' )
result = grouped.aggregate('var') expected = grouped.var() assert_frame_equal(result, expected)
self.wait_for_element_visibility(selector, 'Success div is shown')
line = line[len(match.group(1)):] for daemon in start_daemon_parameter_regex.findall(line): daemons_flags[daemon] = True
avz = config.get_cloud_config_value( 'availability_zone', vm_, __opts__, default=None, search_global=False ) if avz is not None: kwargs['ex_availability_zone'] = avz
prev = _OVERRIDES_DISABLED.disabled _OVERRIDES_DISABLED.disabled += (True,) yield _OVERRIDES_DISABLED.disabled = prev
if vm.guest.toolsStatus in ["toolsNotRunning", "toolsNotInstalled"]: status = 'VMware tools is either not running or not installed' return status
result = ungettext(singular, plural, number)
problem = new_loncapa_problem(xml_str)
y_predicted = grid_search.predict(docs_test)
from salt.states import rabbitmq_plugin
if not os.path.isdir(os.path.join(local_path, 'h5')): os.makedirs(os.path.join(local_path, 'h5'))
self.dom_ids = ['map%d' % i for i in range(len(self.maps))]
if self.initial_index is None: return self.index.get('versions', {}).keys()
html_encapsulated = module.get_problem_html(encapsulate=True)
self.certificates_section.refresh()
try: uid_int = base36_to_int(uidb36) user = User.objects.get(id=uid_int) user.is_active = True user.save() except (ValueError, User.DoesNotExist): pass
f_init = compile_f_init() cc = self._compiled_cache self._compiled_cache = (state, indices, f_init, cc[3]) return self._compiled_cache[2:]
run_code(code_piece, code_path, ns)
nv.validate_repeat(args, kwargs) return self._shallow_copy(self.values.repeat(repeats), freq=None)
result = s.resample('w-sun').last()
ADVANCED_SECURITY_CONFIG = {}
salt.utils.compat.pack_dunder(__name__)
self.assertRedirects(response, '/permanent_redirect_view/', target_status_code=301)
config_course_cohorts( course, is_cohorted=True, discussion_topics=["General", "Feedback"], cohorted_discussions=["Feedback"] )
if not expected_probes: return { 'remove': configured_probes }
for mode in unexpired_modes[course_key]: if mode.min_price > 0 and not CourseMode.is_credit_mode(mode): return mode
gated_content = gating_api.get_gated_content(course, user)
n_valid = valid_repr.shape[0] n_test = test_repr.shape[0]
df = DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])
if self.event_queue: self.flush_events() self.stop = True super(EventReturn, self)._handle_signals(signum, sigframe)
task_args = [entry_id, {}] return task_class.apply(task_args, task_id=task_id).get()
n_classes = n_classes.astype(theano.config.floatX) return sm * (1 - n_classes * min_val) + min_val
for f in fields: f.required = False self.fields = fields
assert_equal(7, counts_1.max()) assert_equal(7, counts_3.max()) assert_equal(7, counts_None.max())
unique_together = ('one', 'two')
self.assertRaises(AssertionError, df.groupby('a').apply, f2) self.assertRaises(AssertionError, df2.groupby('a').apply, f2)
from salt.exceptions import ( #CommandExecutionError, SaltInvocationError ) from salt.utils import warn_until
raise NotImplementedError
from __future__ import absolute_import
self.obj._check_is_chained_assignment_possible()
sys.modules['cherrypy'].config = mock_decorator_with_params
if not has_studio_write_access(user, course_key): raise PermissionDenied() course_module = modulestore().get_course(course_key, depth=depth) return course_module
pass
columns = self.column_classes(Note) self.assertFalse(columns['info'][1][6])
lar1 = la.larry(arr1, [idx1, idx2]) lar2 = la.larry(arr2, [idx1[::-1], idx2[::-1]])
enrollment = CourseEnrollment.get_or_create_enrollment(user, course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
for c in categories: self.assertIn(c.pk, d['categories']) self.assertIsInstance(d['categories'], list)
self.store.publish(problem_location, self.user_id)
from __future__ import absolute_import
if len(results.violations) != len(rules): for violation in results.violations: print("Found violation: {}".format(violation.rule))
return all(hasattr(file_to_test, method) for method in ['read', 'name'])
return Categorical(data, **kwargs)
os.environ.clear() os.environ.update(original_environ)
num_bytes = count * numpy.dtype(num_type).itemsize string = file_handle.read(num_bytes) return numpy.fromstring(string, dtype=num_type)
with MongoContentstoreBuilder().build() as self.contentstore: with modulestore_builder.build(contentstore=self.contentstore) as self.store: self._create_course(self.store) yield
act_grad = self._activation_grad(inputs) jacobian = self.weights * act_grad.dimshuffle(0, 'x', 1) return jacobian
RateLimitConfiguration = apps.get_model("util", "RateLimitConfiguration") objects = RateLimitConfiguration.objects if not objects.exists(): objects.create(enabled=True)
#epub_fix_images = False
for view in get_valid_salt_views(): if view not in _response['views']: return set_salt_view()
return self._find_block(self.course, self.chapter_url_name, 'chapter', CONTENT_DEPTH - 1)
salt-run state.event | while read -r tag data; do echo $tag echo $data | jq -colour-output . done
return "{}/{}".format(self._badge_create_url, slug)
using_ip_for_id = False if not opts.get('id'): opts['id'], using_ip_for_id = get_id( opts, cache_minion_id=cache_minion_id)
repr = [inputs]
result = middleware.process_request(request) self.assertIsNone(result)
return BlockUsageLocator( course_key=self.course_key, block_type=block_type, block_id=block_id )
import salt.defaults.exitcodes from salt.exceptions import SaltException
#html_use_opensearch = ''
if on_rtd: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms' else: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms'
glusterfs.__salt__ = {'glusterfs.peer': mod_glusterfs.peer} glusterfs.__opts__ = {}
y_error = np.zeros(n_test)
root_dir = path(mkdtemp_clean()) print 'Exporting to tempdir = {0}'.format(root_dir) export_course_to_xml(self.store, content_store, course.id, root_dir, 'test_export')
create_point = GeomOutput('GEOSGeom_createPoint', [CS_PTR]) create_linestring = GeomOutput('GEOSGeom_createLineString', [CS_PTR]) create_linearring = GeomOutput('GEOSGeom_createLinearRing', [CS_PTR])
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'ec2'
sale_order_dict = dict((feature, getattr(purchased_course.order, feature)) for feature in sale_order_features)
self.assertEqual(unicode(self.annotation), u'{} : {}'.format(self.course_key.to_deprecated_string(), self.TEST_ANNOTATION))
rng = date_range('1/1/2000', '1/30/2000') frame = DataFrame(np.random.randn(len(rng), 4), index=rng)
params["terms_of_service"] = "tRUe" self.assert_success(params)
len_m1 = 473504.769553813 len_m2 = 4617.668
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
role.add_users(self.student) role.remove_users(self.student) self.assertFalse(role.has_user(self.student))
try: import ldap import ldap.modlist HAS_LDAP = True except ImportError: HAS_LDAP = False
request.user = user request.scopes = [SCOPE_VALUE_DICT[scope]] request.client = client request.state = None request.refresh_token = None request.extra_credentials = None request.grant_type = client.authorization_grant_type
return comb(n, 2, exact=1)
add_info = self.run_function('user.info', [ADD_USER]) if add_info: self.run_function('user.delete', [ADD_USER])
try: self.assertIsNotNone(o.data) except ValueError: pass
'verify_master_pubkey_sign': bool,
if is_setter: return list(key)
Y = np.zeros((y.shape[0], self.K), dtype=np.float64) for k in range(self.K): Y[:, k] = y == k
n_samples_min = int(1e3) n_samples_max = int(1e5) n_features = 100 n_centers = 100 n_queries = 100 n_steps = 6 n_iter = 5
cv = _covar_mstep_diag(*args) return np.tile(cv.mean(axis=1)[:, np.newaxis], (1, cv.shape[1]))
block_path = course_export_dir if draft: block_path = os.path.join(block_path, 'drafts') return os.path.join(block_path, block_type)
rng = make_np_rng(None, 322, which_method="shuffle")
thread = self.make_minimal_cs_thread({ "thread_type": thread_type, response_field: [make_minimal_cs_comment()], response_total_field: 5, })
import logging
'div': both_before + [ Tok("punct", literals("/= /"), next='reg'), ] + both_after,
course = modulestore().get_course(course_key, depth=2)
if index_entry is not None: self._update_head(course_key, index_entry, xblock.location.branch, new_id)
loss_l = self.loss.lower()
result = df[df.a > df.a[3]] expected = df.iloc[4:] assert_frame_equal(result, expected)
self.n_classes = np.unique(y).shape[0] if self.n_classes == 2: self.n_classes = 1
all_assets, count = content_store.get_all_content_for_course(course.id) self.assertEqual(len(all_assets), 0) self.assertEqual(count, 0)
for addr in hosts: if host in hosts[addr]: return addr return ''
class UnaryPredicate(GEOSFuncFactory): "For GEOS unary predicate functions." argtypes = [GEOM_PTR] restype = c_char errcheck = staticmethod(check_predicate)
self.assertProfessionalModeBypassed()
arr = Series(np.random.randn(10), index=np.arange(10), dtype=object)
raise NotImplementedError('subclasses of Serializer must provide an handle_m2m_field() method')
self.assertIsNotNone(problem_block.markdown) self.assertIsNone(problem_block_course.markdown)
return provider_details
content = ['Check for cache with streaming content.'] response = StreamingHttpResponse(content) UpdateCacheMiddleware().process_response(request, response)
index_names = header.pop(-1) index_names, names, index_col = _clean_index_names(index_names, self.index_col)
dropped_minions = set(curr_minions) - set(minions_detected)
if (is_categorical_dtype(getattr(values, 'dtype', None)) or is_categorical_dtype(dtype)):
self.assertTrue("success_file" in os.path.basename(filename)) store_file_data(storage, filename)
response = self.client.get('/header_view/') self.assertTrue(hasattr(response, 'resolver_match'))
if 'file_client' not in __opts__ or not __opts__['file_client']: __opts__['file_client'] = 'local'
for idx1, idx2 in cases:
URLCONF_MODULES = ['myapp.url']
#)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
tm.close() gc.collect() for key in results: with tm.assertRaises(ReferenceError): results[key].lines
if six.PY2 and not isinstance(path, bytes): return path.encode(fs_encoding) return path
return '{num_members} / {max_size} {members_text}'.format( num_members=num_members, max_size=max_size, members_text='Member' if num_members == max_size else 'Members' )
return self._folds[0][0].get_input_space()
import logging
import salt.utils import salt.utils.minions
class PartialArticleFormWithSlug(forms.ModelForm): class Meta: model = Article fields = ('headline', 'slug', 'pub_date')
X = iris.data[45:100, :] y = iris.target[45:100] solvers = ("lbfgs", "newton-cg", "liblinear") class_weight_dict = _compute_class_weight_dictionary(y)
clf = self.factory(alpha=0.1, n_iter=1000, class_weight={0: 0.5}) clf.fit(X, Y)
response = default_with_prefix_view(request, '6') self.assertEqual(response.content, b'Hello World 4')
self.xml_data = "about page 463139"
for k2, v2 in v: if value == k2 or text_value == force_text(k2): return True
ci = CategoricalIndex(np.random.randint(0, 5, size=100)) if PY3: str(ci) else: compat.text_type(ci)
from __future__ import absolute_import
if not hasattr(settings, 'TEST_RUNNER'): settings.TEST_RUNNER = 'django.test.runner.DiscoverRunner' TestRunner = get_runner(settings)
from salt.modules import win_firewall
assert correctness in ['correct', 'incorrect', 'unanswered'] assert problem_type in PROBLEM_DICT
assert_raises(ValueError, sample_without_replacement, 0, 1) assert_raises(ValueError, sample_without_replacement, 1, 2)
kwargs.setdefault('enabled', True) SAMLConfiguration(**kwargs).save()
CourseModeFactory.create( course_id=self.course.id, mode_slug=CourseMode.HONOR, mode_display_name=CourseMode.HONOR, )
new_nsamples[not marginalize_odd] += pa_bias * (1. - beta)
try: from gentoolkit.eclean import search, clean, cli, exclude as excludemod HAS_GENTOOLKIT = True except ImportError: pass
return False
from __future__ import absolute_import
user = models.ForeignKey(User, db_index=True) site = models.CharField(max_length=255, db_index=True)
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
top_level_logger.propagate = False
request = self.request_factory.get(reverse('about_course', args=[unicode(ccx_locator)])) request.user = student mako_middleware_process_request(request)
__virtualname__ = 'zfs'
self.page.create_experiment_group_configuration() config = self.page.experiment_group_configurations[0] config.description = "Description of the group configuration."
from uuid import uuid4
self.assertEqual(course.edited_by, "testassist@edx.org") self.assertDictEqual(course.grade_cutoffs, {"Pass": 0.55})
sample_weight = np.asarray(sample_weight, dtype=np.float64, order="C")
self.assertEqual(private_director.school, private_school)
with self._mock_xqueue() as mock_queue: certs_api.generate_example_certificates(self.COURSE_KEY)
subplot.format_coord = lambda t, y: ( "t = {0} y = {1:8f}".format(Period(ordinal=int(t), freq=freq), y))
child = self.store.get_item(child.location) child.display_name = 'Changed Display Name' self.store.update_item(child, user_id=editing_user)
s2 = Series([0.001, 0, 10000], index=[3, 5, 10]) assert_frame_equal(df.loc[[3]], df.sample(1, weights=s2))
username = re.sub(r'\s', '', _flatten_to_ascii(eamap.external_name), flags=re.UNICODE)
('ALIGN', (5, 0), (5, 0), 'RIGHT'),
if not ignore_missing: for field in mandatory_fields: if field not in request_data: field_errors[field] = {'error_code': 'missing_field_{0}'.format(field)} if field_errors: return valid_input, field_errors
yield (start, "E128 continuation line " "under-indented for visual indent")
self.skipUI = skipUI self.skipDownloaded = skipDownloaded self.skipInstalled = skipInstalled self.skipReboot = skipReboot self.skipPresent = skipPresent self.skipHidden = skipHidden
self.course.discussion_blackouts = [[]] self.assertTrue(self.course.forum_posts_allowed)
query = "SELECT * FROM raw_query_author" translations = {'something': 'else'} authors = Author.objects.all() self.assertSuccessfulRawQuery(Author, query, authors, translations=translations)
files_to_fingerprint.append(sysconfig.get_python_lib())
from __future__ import absolute_import, print_function, with_statement import os import re import sys import copy import time import types import signal import fnmatch import logging import threading import traceback import contextlib import multiprocessing from random import randint, shuffle from stat import S_IMODE
self.assertNotContains(resp, 'Robot_Course_Outside_Microsite')
log.exception(u"Error occurred while caching course enrollment details for course %s", course_id) raise errors.CourseEnrollmentError(u"An unexpected error occurred while retrieving course enrollment details.")
levels = [[0, 1], [0, 1, 2, 3]] labels = [[0, 0, 1, 1], [0, 2, 0, 2]]
result = result.remove_categories(['foo%05d' % i for i in range(300)]) self.assertTrue(result.codes.dtype == 'int8')
ret['result'] = True ret['comment'] = 'property {0} already has value "{1}"'.format(name, value)
err_count = 0 while True: try: shutil.rmtree(fullname, False, None) break except os.error: if err_count > 0: raise err_count += 1 time.sleep(RM_SUBDIRS_RETRY_TIME)
while listening_to_events:
import logging
locked = self.is_content_locked(content) newrelic.agent.add_custom_parameter('contentserver.locked', locked)
index = MultiIndex.from_arrays([np.arange(4000)] * 3) df = DataFrame(np.random.randn(4000), index=index, dtype=np.int64)
try: return cls.objects.get(user=student, course_id=course_id) except cls.DoesNotExist: pass return None
clf = AdaBoostRegressor(n_estimators=10, random_state=0) clf.fit(boston.data, boston.target, sample_weight=boston_weights)
self.assertTrue(all(isinstance(course, CourseSummary) for course in courses_summary_list)) self.assertEqual(len(courses_summary_list), 1)
if skip_perm_errors: return raise SaltClientError(msg)
yield check_estimators_empty_data_messages
url(r'^template_response_view/$', views.template_response_view),
definition_guid = course_key.as_object_id(definition_guid) return self.db_connection.get_definition(definition_guid, course_key)
if is_advanced_problem: advanced_tab = page.q(css='.problem-type-tabs a').filter(text='Advanced').first advanced_tab.click()
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
ret = self.run_state('ssh_known_hosts.present', test=True, **kwargs) self.assertSaltTrueReturn(ret)
xml = renderer.get_html() context = extract_context(xml) self.assertEqual(context, {'id': 'solution_12'})
section = get_current_child(chapter, min_depth=1) if section is None: log.debug("No section found when loading current position in course") return None
result = p1.join(p2) expected = p1.copy() expected['ItemC'] = p2['ItemC'] tm.assert_panel_equal(result, expected)
self.client.handler = POSTAccessingHandler()
output = self.old_ugettext(*args, **kwargs) return "XYZ " + output
export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_export')
unrestricted_country, __ = self._setup_embargo()
res = df.loc[['a', 'a', 'b']]
var_unbiased_x = var_unbiased(x) var_biased_x = var_biased(x) var_debiasing_factors_x = var_debiasing_factors(x) assert_equal(var_unbiased_x, var_biased_x * var_debiasing_factors_x)
return None if self._is_anonymous(obj) else obj["username"]
return self._y_fitted_raw
server_thread = threading.Thread(target=self.serve_forever) server_thread.daemon = True server_thread.start()
class Layer(GDALBase): "A class that wraps an OGR Layer, needs to be instantiated from a DataSource object."
return start(name, path=path)
pass
self.assertNumQueries(2, f.delete)
from salt.modules import win_groupadd
pnt1 = fromstr('POINT (649287.0363174 4177429.4494686)', srid=2847) pnt2 = fromstr('POINT(-98.4919715741052 29.4333344025053)', srid=4326)
for layer in layer_to_state: old = layer_to_state[layer] new = updated[layer] if layer_to_clamp[layer]: assert new is old else: add_updates(old, new)
component_class = XBlock.load_class(category, select=settings.XBLOCK_SELECT_FUNCTION) mixologist = Mixologist(settings.XBLOCK_MIXINS) return mixologist.mix(component_class)
if self.advertised_start: return self.advertised_start elif self.start != DEFAULT_START_DATE: return defaultfilters.date(self.start, "DATE_FORMAT") else: return None
def ol_bounds(extent): return 'new OpenLayers.Bounds(%s)' % str(extent)
import sklearn version = sklearn.__version__ release = sklearn.__version__
self.run_function('desktop.set_output_volume', [current_vol])
if self.expires_at and timezone.now() > self.expires_at: return False return bool(self.entity_id and self.sso_url and self.public_key)
if res['stderr'].startswith('Successfully created VM'): return res['stderr'][24:]
OverrideFieldData.provider_classes = None super(SharedModuleStoreTestCase, self).setUp()
if not v.index.equals(index): v = v.reindex(index)
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor', grade=default_grade )
args.extend(arg)
problem = self.build_problem(script=script, cfn="check_func")
copy_Gram = True
self.wait_for_field(field_id) query = self.q(css='.u-field-{} .u-field-value'.format(field_id)) if not query.present: return None return query.text[0]
labels = ax.get_xticklabels()
redirect("urlpatterns_reverse.nonimported_module.view") self.assertNotIn("urlpatterns_reverse.nonimported_module", sys.modules)
foo = Foo()
request = self.factory.get('/') request.user = AnonymousUser() mako_middleware_process_request(request) student.views.index(request)
from salt.exceptions import CommandExecutionError from salt.modules import uptime
return {'xml': True}
_urlconfs = local()
click_css(self, 'a.action-cancel', require_notification=False)
enc_query = self._check_query(query, city=True) return City(self._city.city(enc_query))
from __future__ import absolute_import import os import re import socket import logging from string import ascii_letters, digits
request = self.request_factory.get('/', {'publication-decade': 'the 90s'}) changelist = self.get_changelist(request, Book, modeladmin)
NOT_CONFIGURED = "not-configured"
block_structure._collect_requested_xblock_fields()
return name
from salt.textformat import TextFormat from salt.log.handlers import (TemporaryLoggingHandler, StreamHandler, SysLogHandler, FileHandler, WatchedFileHandler, QueueHandler) from salt.log.mixins import LoggingMixInMeta, NewStyleClassMixIn
cs_bounds = models.PolygonField(null=True) objects = models.GeoManager()
for i, tab in enumerate(xmodule_tabs.CourseTabList.iterate_displayable( self.course, inline_collections=False )): self.assertEquals(tab.type, self.course.tabs[i].type)
key = cleaned_string(key) key_prefix = cleaned_string(key_prefix) version = cleaned_string(version)
jid_dir_name = jid_file.rpartition('/')[2] self.assertEqual(jid_dir_name, 'jid')
password = generate_random_string(password_length) while password in generated_passwords: password = generate_random_string(password_length) generated_passwords.append(password) return password
self.user.is_active = False self.user.save()
f, ax = plt.subplots() ax.plot(x, y) ax.set_title('Simple plot')
re.compile(r'^/api/course_structure/v[\d+]/courses/{}/$'.format(settings.COURSE_ID_PATTERN)),
for item in items: self.assertChildNodes(item, ['title', 'link', 'description', 'guid', 'georss:point'])
try: milestone_paths = get_course_milestones_fulfillment_paths( unicode(course.id), serialize_user(user) ) except InvalidMilestoneRelationshipTypeException: return required_content
g[['A', 'C']]
if axis == 0: result = com._coerce_to_dtypes(result, self.dtypes)
from __future__ import absolute_import import os import hashlib
list_ = salt.utils.alias_function(list_running, 'list_')
data={'metadata': {'user_partition_id': str(partition_id)}}
for item in ret: self.assertSaltTrueReturn(item)
tm.assert_almost_equal(variance_0, (n - 1.0) / n * var, check_less_precise=2)
assert_equal(v_measure_score(true_labels, labels), 1.0) assert_greater(km.inertia_, 0.0)
roll = np.where(base_period.to_timestamp() == i - off, self.n, self.n + 1)
log_likelihoods, responsibilities = self.score_samples(X) current_log_likelihood = log_likelihoods.mean()
self._fetch_all() obj_dict = self.__dict__.copy() obj_dict[DJANGO_VERSION_PICKLE_KEY] = get_version() return obj_dict
self.cohort_a_student_username = "cohort_a_student" self.cohort_a_student_email = "cohort_a_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_a_student_username, email=self.cohort_a_student_email, no_login=True ).visit()
self.assertContains(response, "<h2>Built-in tags</h2>", count=2, html=True)
self.client.login(username=self.non_staff_user.username, password='test') response = self.call_add_users_to_cohorts('') self.assertEqual(response.status_code, 403)
return len(self.q(css='nav.course-navigation a.chapter'))
assert_false(hasattr(SequenceDescriptor, 'rerandomize'))
import integration
self.refresh_course()
coef_grads[layer] = safe_sparse_dot(activations[layer].T, deltas[layer]) coef_grads[layer] += (self.alpha * self.coefs_[layer]) coef_grads[layer] /= n_samples intercept_grads[layer] = np.mean(deltas[layer], 0) return coef_grads, intercept_grads
key = world.css_value(KEY_CSS, index=i) if key == expected_key: return i
class LinearRing(LineString): _minlength = 4 _init_func = capi.create_linearring
return _wrap_results(get_median(values) if notempty else np.nan, dtype)
Number.objects.filter(pk=self.n.pk).update(integer=15 + F('integer'), float=42.7 + F('float'))
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
FEATURES['LICENSING'] = True
return prlctl('stop', args, runas=runas)
self.assertEqual( urlize('HTTPS://github.com/'), '<a href="https://github.com/" rel="nofollow">HTTPS://github.com/</a>', )
result = f.clean('13:30:05') self.assertEqual(result, time(13, 30, 5))
import os import sys import time import signal import tempfile import traceback import inspect
return _get_enabled_disabled("true")
if not self.is_internal_request(domain, referer) and '?' in referer: return True
frame["E"] = [np.nan for item in frame["A"]]
df = tm.makeTimeDataFrame() store.append('df_time', df) self.assertRaises( ValueError, store.select, 'df_time', [Term("index>0")])
if val == val and val != %(nan_val)s: nobs[lab, 0] += 1 if val < minx[lab, 0]: minx[lab, 0] = val
try: sdist = _make_sdist(opts, python_bin=python_bin) except NameError: sdist = _make_sdist(opts)
call_command("migrate", "migrations", "zero", verbosity=0)
for dir_name in dir_names: pillar_node[dir_name] = {}
def render_to_template_mock(*args): pass
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
with assert_raises(TypeError): StudioValidation("id").set_summary("foo")
body = copy.deepcopy(body)
return self._get_cohort_messages("errors")
self.page = LibraryUsersPage(self.browser, self.library_key) self.page.visit()
import crypt HAS_CRYPT = True
return self.posterior.sample_from_epsilon(shape)
press_the_notification_button(self, "save") if wait_for_confirmation: self.wait_for_element_visibility( '#alert-confirmation-title', 'Save confirmation message is visible' )
clf = svm.SVC(kernel='linear') clf.fit(X, Y)
for X in [X_1row, X_1col, X_list_1row, X_list_1row]:
self.assertEqual(len(httpretty.httpretty.latest_requests), 3)
pass
self.assertContains(self.client.delete(course_update_url + '19'), "delete", status_code=400)
return self.runtime.get_edited_by(self)
delta = delta + datetime.timedelta(seconds=1) expires = None max_age = max(0, delta.days * 86400 + delta.seconds)
option2=main2
return self.q(css='.warning-heading-text').text[0]
milestones_api.add_course_milestone(course_key, 'requires', milestone)
restricted_course, __ = RestrictedCourse.objects.get_or_create(course_key=course_key) restricted_course.enroll_msg_key = 'default' restricted_course.access_msg_key = 'default' restricted_course.disable_access_check = disable_access_check restricted_course.save()
assert_raises(ValueError, _inverse_binarize_thresholding, y=np.array([[1, 2, 3], [2, 1, 3]]), output_type="binary", classes=[1, 2, 3], threshold=0)
gc.collect() time.sleep(0.1)
self.check_modal_shows_correct_contents(self.type_fields) self.advanced_settings.refresh_and_wait_for_load()
for n_labels in range(2, 10): y_score = n_labels - (np.arange(n_labels).reshape((1, n_labels)) + 1)
self.assertTrue(obj.custom_valid_name.name.endswith("/random_file_valid")) obj.custom_valid_name.close()
cert_items = CertificateItem.objects.filter(order=order)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
return self.remote_field
return map(cls._convert_to_color, stop_seq)
instance._original_run = instance.run instance.run = instance._run return instance
paginator = pagination_cls() page = paginator.paginate_queryset(queryset, request)
rval = -T.dot(state, self.bias)
if path.startswith('/static/'): path = path[len('/static/'):]
import salt.utils import salt.ext.six as six from salt.exceptions import CommandExecutionError
return '<div>{0}</div>'.format(saxutils.escape(repr(context)))
df = DataFrame([[8, 5]], columns=['a', 'a']) edf = DataFrame([[8, 5]]) edf.columns = ['a', 'a']
try: self._srs = gdal.SpatialReference(self.wkt) return self.srs except Exception as msg: pass
self.check_index_and_outline(course_staff_client)
self.setup()
df_mixed.columns = df_mixed.columns.astype('unicode')
errstring = "Course not found." with self.assertRaisesRegexp(CommandError, errstring): call_command('force_publish', unicode('course-v1:org+course+run'))
factory_class = SparseSGDClassifier
self.prev_floatX = config.floatX config.floatX = 'float64'
response['Last-Modified'] = http_date(timegm(lastmod))
modeladmin = BookAdminWithCustomQueryset(self.alfred, Book, site) request = self.request_factory.get('/') changelist = self.get_changelist(request, Book, modeladmin)
before = self.make_project_state([]) after = self.make_project_state([self.custom_user_no_inherit, self.aardvark]) autodetector = MigrationAutodetector(before, after) changes = autodetector._detect_changes()
items = [nan] * 5 + list(range(100)) + [nan] * 5 items2 = np.array(items, dtype='O')
self._assure_grouper() return self.grouper.indices
return False
try: return mark_safe(self.empty_value_display) except AttributeError: return mark_safe(self.admin_site.empty_value_display)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.client.logout()
self.async.close()
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.import_xblock( user_id, course_key, block_type, block_id, fields=fields, runtime=runtime, **kwargs ))
df = DataFrame(randn(5, 5))
query_params = deepcopy(query_params) query_params.update({ "page": page_num, "page_size": page_size }) return url_path + "?" + urlencode(query_params)
if not isinstance(servers, list): ret['result'] = False ret['comment'] = 'servers entry is not a list !' return ret
from __future__ import absolute_import import copy import errno import fnmatch import glob import hashlib import logging import os import shutil from datetime import datetime from salt.exceptions import FileserverConfigError
self.assertIn('some_required_info', response.context['adminform'].form.errors)
__salt__['kmod.load']('bonding')
from __future__ import absolute_import import grp
return self._data.ftype
'master': (string_types, list),
cache.clear()
task_progress.skipped += 1
assert_true((ovr_clf.coef_ != cs_clf.coef_).all())
pass
if len(self._fields or self.model._meta.concrete_fields) > 1: raise TypeError('Cannot use multi-field values as a filter value.')
import time import logging
df2 = self.read_csv(StringIO(data), index_col=[1, 0], parse_dates=True) self.assertIsInstance(df2.index.levels[1][0], (datetime, np.datetime64, Timestamp))
return cls.objects.get(default=True).icon
pass
m = self.model(**kwargs)
f = np.asarray(f).ravel() prob = special.fdtrc(dfbn, dfwn, f) return f, prob
name = models.CharField(max_length=50) mugshot = TestImageField(storage=temp_storage, upload_to='tests')
username = request.data.get('username') if not username: raise ValidationError({'detail': 'A username must be specified.'})
os.environ['EXPENSIVE_TESTS'] = 'True'
if spatialite: qs = qs.exclude(name='Texas') else: qs = qs.annotate(intersection=functions.Intersection('mpoly', geom))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath
__func_alias__ = { 'set_': 'set', 'rm_': 'rm' }
self.assertEqual(self.func(None), [])
set_user_preference(self.user, "dict_pref", {"int_key": 10}) set_user_preference(self.user, "string_pref", "value")
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
self.a.friends.add(self.b, self.c)
mock_from_django_user.return_value = Mock()
if isinstance(series.index, DatetimeIndex): series = series.to_period(freq=freq)
mi = MultiIndex(levels=new_levels, labels=new_labels, names=self.names, sortorder=self.sortorder, verify_integrity=False)
FILE_UPLOAD_HANDLERS = [ 'django.core.files.uploadhandler.MemoryFileUploadHandler', 'django.core.files.uploadhandler.TemporaryFileUploadHandler', ]
cfn = xml.get('cfn') if cfn: log.debug("cfn = %s", cfn)
CertificateGenerationConfiguration.objects.create(enabled=False) cache.clear()
source_version = block.edit_info.source_version return source_version if source_version is not None else block.edit_info.update_version
if course_message: msg = u"{} <br /> {}".format(msg, course_message.message)
train(os.path.join( pylearn2.__path__[0], 'train_extensions/tests/live_monitor_test.yaml' ))
index = DatetimeIndex([datetime(2012, 1, 1)], tz=self.tzstr('EST')) index.hour index[0]
tm.assert_frame_equal(rs2, df_expected)
_upload_sjson_file(good_sjson, self.item_descriptor.location)
from __future__ import absolute_import
return xmodule_instance_args.get('task_id', UNKNOWN_TASK_ID) if xmodule_instance_args is not None else UNKNOWN_TASK_ID
'error': _("Refresh the page and make an attempt before resetting."),
self.assertNotIn(REG_STR, resp.content)
self.assertEqual(iptables.build_rule(jump='REDIRECT', **{'to-port': 8080}), '--jump REDIRECT --to-port 8080')
with self.assertRaisesMessage(Exception, 'exception message'): self.client.get('/nesting_exception_view/')
log.warning( 'Assuming tag \'{0}\' for repo \'{1}\'' .format(default_tag, image) ) r_tag = default_tag
level_num = frame.columns._get_level_number(level)
self.assertRaises(RuntimeError, utils.kwargs_warn_until, {}, [])
from __future__ import absolute_import, print_function import os import tempfile import time
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
self.bulk.insert_course_index(self.course_key, self.index_entry) self.assertConnCalls(call.insert_course_index(self.index_entry, self.course_key)) self.assertCacheNotCleared()
try: return self.checkpoint_status.filter(user_id=user_id).latest() except ObjectDoesNotExist: return None
from __future__ import absolute_import
rval = X.copy()
path, final_field, targets, rest = self.names_to_path( names, opts, allow_many, fail_on_missing=True)
courses = [course for course in courses if course.id != course_key] if courses: courses = _remove_in_process_courses(courses, in_process_course_actions) settings_context.update({'possible_pre_requisite_courses': courses})
pass
return _PSA_BACKENDS[self.backend_name]
task_key = hashlib.md5(task_key_stub).hexdigest()
from salt.modules import extfs
return from_addr_format.format( course_title=course_title_no_quotes, course_name=course_name, from_email=theming_helpers.get_value( 'bulk_email_default_from_email', settings.BULK_EMAIL_DEFAULT_FROM_EMAIL ) )
'mailing',
return _after_ignition_network_profile(cmd, ret, name, network_profile, path, nic_opts)
self._build_data_specs()
handler = WatchedFileHandler(log_path, mode='a', encoding='utf-8', delay=0)
description = cls._line_item_description(course_id=course_id)
if is_aware(value): raise ValueError( "make_aware expects a naive datetime, got %s" % value) return value.replace(tzinfo=timezone)
NPM_VENDOR_DIRECTORY.mkdir_p()
ftype = c2f_dict[ctype_name] return np.typeDict[ctype_name](ftype(r) + 1j * ftype(i))
weight = np.ones(classes.shape[0], dtype=np.float64, order='C')
self.dim = dim
self.release_languages('ar, es-419')
if options['course']: try: course = CourseKey.from_string(options['course']) except InvalidKeyError: course = SlashSeparatedCourseKey.from_deprecated_string(options['course'])
from __future__ import absolute_import import os import time
foo = Foo()
self.assertNotEqual( self.live_server_url, TestCase.live_server_url, "Acquired duplicate server addresses for server threads: %s" % self.live_server_url )
self.assertFalse(user_has_role(self.user, CourseCreatorRole()))
from salt.states import grafana
__set_levels = deprecate("setting `levels` directly", partial(set_levels, inplace=True, verify_integrity=True), alt_name="set_levels") levels = property(fget=_get_levels, fset=__set_levels)
ret = self.run_function('system.list_startup_disks') self.assertIsInstance(ret, list) self.assertIn(self.run_function('system.get_startup_disk'), ret)
if name in exclude: break
fkeys = partial(_factorize_keys, sort=sort)
from __future__ import absolute_import
pass
qs = qs.all() self.assertQuerysetEqual( qs, [c], lambda x: x) self.assertEqual(qs[0].alfa, a)
_step.given('I have uploaded subtitles "{}"'.format(sub_id))
return True
if self.index is None: return []
asset_md.thumbnail = 'ABC39XJUDN2' return asset_md
if not isinstance(srs, SpatialReference): srs = SpatialReference(srs)
CONTACT_MAILING_ADDRESS = ''
return _registered_options.get(key)
open(self.distribution.salt_ssh_packaging_file, 'w').write('Packaged for Salt-SSH\n')
from salt.utils.odict import OrderedDict from salt.ext.six.moves import range from salt.ext import six
ApiAccessRequestFactory(user=self.user) response = self.client.get(self.url) self.assertRedirects(response, reverse('api_admin:api-status'))
#html_split_index = False
return self._data.view(np.ndarray)
tm.assert_numpy_array_equal(mi.values[:4], mi[:4].values)
response = self._get_page(payment_flow, course.id, expected_status_code=302) self.assertRedirects(response, redirect_url)
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000
with self.assertRaises(TypeError): cntry_g.country_code(17) with self.assertRaises(TypeError): cntry_g.country_name(GeoIP)
from __future__ import unicode_literals
try: mask = int(mask) except ValueError: return False else: if not 1 <= mask <= int(mask_max): return False
if sp.issparse(X): variances = mean_variance_axis(X, axis=0)[1] else: variances = np.var(X, axis=0) return np.mean(variances) * tol
for ind, merged_parent in enumerate(merged_parents_list): converted_object = _MergedGroupAccess([], block, []) converted_object._access = merged_parent merged_parents_list[ind] = converted_object
if out is None: out_shape = len(row_idx), len(col_idx) out = np.empty(out_shape, dtype=dtype)
toy_course = store.get_course(SlashSeparatedCourseKey('edX', 'toy', '2012_Fall')) toy_course.wiki_slug = 'simple'
((field.many_to_one and not field.related_model) or field.one_to_many)):
from salt.states import win_network
is_increasing = y_[0] < y_[-1] assert_true(is_increasing)
if (os.path.exists(lockdirName) and os.path.isdir(lockdirName)): os.rmdir(lockdirName)
cur.executemany(cmd, newitems)
if version_num == old.get(pkg_name) \ or (pkg_name in old and old[pkg_name] == 'Not Found'): ret[pkg_name] = {'current': version_num} continue
self.assertEqual(p._savecount, 1)
import salt.utils
ldapmod.__salt__ = {}
_maybe_remove(store, 'df')
if 'honor' not in course_mode_slugs: cert_status['status'] = CertificateStatuses.auditing return cert_status
try: import git import gitdb HAS_GITPYTHON = True except ImportError: HAS_GITPYTHON = False
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
dummy1 = _("This is a translatable string.")
return course_id in [ item.course_id for item in order.orderitem_set.all().select_subclasses("paidcourseregistration") if isinstance(item, cls) ]
tm._skip_if_no_pytz()
methods = downsample_methods + ['count'] for method in methods: result = getattr(f.resample(freq), method)()
break
from __future__ import print_function from pandas import DataFrame from pandas.compat import range, zip import timeit
s = Series(np.arange(len(i)), index=i) s[3] self.assertRaises(TypeError, lambda: s[3.0])
#pylint: disable=E0602
self.len = 4 + 4 + 4 * self.n + 4 * self.n + self.text_len
config = CourseEventBadgesConfiguration.current().enrolled_settings enrollments = user.courseenrollment_set.filter(is_active=True).count() award_badge(config, enrollments, user)
if com.is_numeric_v_string_like(arr, x): mask = False else: mask = arr == x
res = prlctl('snapshot-list', args, runas=runas)
LANGUAGE_KEY = 'pref-lang'
for frag in remainder: pats.append(re.escape(frag))
raise NotImplementedError('partial sum')
ret = {'name': name, 'result': False, 'comment': '', 'changes': {},
new_key = tup[:i] + (_NS,) + tup[i + 1:]
if filter_type is None and axis == 0: try:
y_pred1 = clf.fit(X7, y6).predict(X7) assert_array_equal(y_pred1, y6)
testing.assert_array_equal( FunctionTransformer(np.log1p).transform(X), np.log1p(X), )
order_by.append(( OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending), True)) continue
result['names'] = names result['converters'] = converters result['na_values'] = na_values result['na_fvalues'] = na_fvalues result['skiprows'] = skiprows
for mode in [CourseMode.DEFAULT_MODE_SLUG, CourseMode.VERIFIED]: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
import collections import logging import os import sys import traceback
def func(_start, _stop, _where): return s.read(start=_start, stop=_stop, where=_where, columns=columns, **kwargs)
from __future__ import absolute_import
logger.warning("no '{0}' found".format(this_check))
rng = timedelta_range('1 day 10:11:12', freq='us', periods=2000) s = Series(np.arange(len(rng)), index=rng)
problem1_content_before_switch = self.problem_page.problem_content
self.q(css=".subsection-header-actions .configure-button").nth(index).click() self.wait_for_element_presence('.course-outline-modal', 'Subsection settings modal is present.')
self.assertInCourseListing(existent_course_key)
return False
this_yaml = test_yaml_which_set % {'which_set': ['train', 'test']} trainer = yaml_parse.load(this_yaml) trainer.main_loop()
return len(self._codes)
X = self._check_non_neg_array(X, "LatentDirichletAllocation.score") doc_topic_distr = self.transform(X) score = self._approx_bound(X, doc_topic_distr, sub_sampling=False) return score
df = SparseDataFrame({'A': [1.1, 3.3], 'B': [2.5, -3.9]})
poem = super(PoemForm, self).save(commit=False) poem.name = "Brooklyn Bridge" if commit: poem.save() return poem
return False
import logging
public_vertical = get_and_verify_publish_state('vertical', self.PUBLISHED_VERTICAL, True)
from __future__ import absolute_import, print_function
if ltype: cmd = '{0} -t {1}'.format(cmd, ltype)
if self._is_single_block:
scaler.fit_transform(X_2d)
return reverse_course_url(self.VIEW_NAME, course_key)
response = self.client.get(reverse('admin:admin_views_notreferenced_changelist'), {TO_FIELD_VAR: 'id'}) self.assertEqual(response.status_code, 200)
self.application = application self.events_to_fire = 0 return application
if isinstance(course_descriptor, ErrorDescriptor): return course_descriptor
assert_array_equal(linkage_X_ward[:, :2], out_X_unstructured[0]) assert_array_equal(linkage_X_ward[:, :2], out_X_structured[0])
data = data.sort(columns='id') data.index = pandas.Index(lrange(data.shape[0])) return data
for kernel in kernels: gpr = GaussianProcessRegressor(kernel=kernel, normalize_y=True) gpr.fit(X, y)
new_mean_squared_grad = (self.decay * mean_square_grad + (1 - self.decay) * T.sqr(grads[param]))
for argument in args: ret['args'].append(str(type(argument)))
return _int64_max
result = Timestamp('2013-11-01 00:00:00-0500', tz='America/Chicago') self.assertEqual(result.value, Timestamp('2013-11-01 05:00').value)
html_theme = 'default'
def edge(request): return redirect('/')
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
from salt.modules import proxy as proxy
mugshot = TestImageField(storage=temp_storage, upload_to='tests', height_field='mugshot_height') mugshot_height = models.PositiveSmallIntegerField() class Meta: abstract = True
self.save_m2m = self._save_m2m
raise NotImplementedError('subclasses of SessionBase must provide a create() method')
import logging import warnings from yaml.scanner import ScannerError from yaml.parser import ParserError from yaml.constructor import ConstructorError
EXCLUDE_ALL = '*'
yield
settings.ALLOWED_HOSTS.append(hostname) self.addCleanup(settings.ALLOWED_HOSTS.pop)
return
SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine"
if course_key is None: return self._bulk_ops_record_type()
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six from salt.ext.six.moves import zip
if len(idset) > 1: self.context['overall_message'] = msg else: self.context['messages'][0] = msg
with self.settings(DEBUG=True): self.verify_unsafe_response(custom_exception_reporter_filter_view, check_for_vars=False) with self.settings(DEBUG=False): self.verify_unsafe_response(custom_exception_reporter_filter_view, check_for_vars=False)
class PointField(GeometryField): geom_type = 'POINT' form_class = forms.PointField description = _("Point")
from salt.utils import cloud from integration import TMP, CODE_DIR
from __future__ import unicode_literals
results = list(model.objects.raw(query, params=params, translations=translations)) self.assertProcessed(model, results, expected_results, expected_annotations) self.assertAnnotations(results, expected_annotations)
'renderer_whitelist': list,
'open_mode': bool,
self.assert_account_settings_context_looks_correct(account_settings_context(request), request.user, linked=False) self.assert_social_auth_does_not_exist_for_user(request.user, strategy)
world.trigger_event(SELECTORS['url_inputs'], event='input', index=index)
f_ordered = new_values.flags.f_contiguous if f_ordered: new_values = new_values.T axis = new_values.ndim - axis - 1
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
if Y.ndim == 1: Y = Y[:, np.newaxis] if Y.shape[1] == 1: Y = np.append(1 - Y, Y, axis=1)
import logging from salt.exceptions import SaltInvocationError from time import time, sleep
from contextlib import contextmanager import logging
if not os.path.isdir(sourcepath): _LOG.error('Path is not present: %s', sourcepath) return False
return npm_output
self.assertEqual(self.store.get_modulestore_type( SlashSeparatedCourseKey('foo', 'bar', '2012_Fall')), default_ms )
return self.conditional.get_weights()
Sdist.run(self)
css = {'scss': [resource_string(__name__, 'css/codemirror/codemirror.scss')]} js = {'coffee': [resource_string(__name__, 'js/src/raw/edit/json.coffee')]} js_module_name = "JSONEditingDescriptor"
engine = Engine() loader = engine.template_loaders[0] with self.assertRaises(UnicodeDecodeError): list(loader.get_template_sources(b'\xc3\xc3', ['/dir1']))
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
self.assertNumContains(sql, 'idx_tbsp', 1)
self.pendings = None
sr = self.layer.srs
if options: ret['comment'] += ' ' + _build_option_string(options) return ret
dashboard_url = reverse('dashboard') self._test_change_session_hash(dashboard_url, reverse('signin_user') + '?next=' + dashboard_url)
raise NotImplementedError('Not implemented in _PCABase. Use a ' + 'subclass (and implement it there).')
ret = [] for lookup in lookups: if not isinstance(lookup, Prefetch): lookup = Prefetch(lookup) if prefix: lookup.add_prefix(prefix) ret.append(lookup) return ret
from salttesting import skipIf, TestCase from salttesting.helpers import destructiveTest, ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON
return 'some html safe content'
user2 = UserFactory.create() user2.save() assert_is_none(SoftwareSecurePhotoVerification.active_for_user(user2))
new_axis = self.items.insert(loc, item)
hasher.iterations = old_iterations
pass
score_dict = self.get_score() return score_dict['score'] == score_dict['total']
known_user = 'knownuser@example.com' known_user2 = 'knownuser2@example.com'
raise NotImplementedError
if axis != 0: raise AssertionError('axis must be 0') return self.obj.reindex(keyarr, level=level)
cr_ec2 = MockEC2() cr_ec2.profile = profile cr_ec2.access = access cr_ec2.user_id = user_id cr_ec2.connection_args = connection_args return cr_ec2
from __future__ import unicode_literals
warnings.warn("Do you really want to regularize the detector units to be more active than the pooling units?")
clf = TreeClassifier(class_weight='the larch', random_state=0) assert_raises(ValueError, clf.fit, X, y) assert_raises(ValueError, clf.fit, X, _y)
self.assertRaises(ValueError, df.iloc.__getitem__, tuple(['j', 'D']))
check_arguments_for_rescoring(usage_key)
if not self.q(css="input.proctored_exam").present: return False
from salt.modules import rbenv import os
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1, 2, 3]}, refit=True) grid_search.fit(X, y)
instance.__dict__[self._field.attname] = value return value
student_dict['cohort'] = next( (cohort.name for cohort in student.course_groups.all() if cohort.course_id == course_key), "[unassigned]" )
df['foo'].values[:] = 0 self.assertTrue((df['foo'].values == 0).all())
if line > num_template_lines: return template
if settings.FEATURES["ENABLE_SYSADMIN_DASHBOARD"]: urlpatterns += ( url(r'^sysadmin/', include('dashboard.sysadmin_urls')), )
log.debug( 'KeyError when loading {0}'.format(module_name), exc_info=True )
for CourseState in self.course_actions_displayable_states + self.courses_with_state3_non_displayable: action_class.objects.update_state( CourseState.course_key, CourseState.state, should_display=CourseState.should_display, allow_not_found=True )
assert len(course_assets['assets']) == 0 self.asset_collection.update( {'_id': doc_id}, {'$set': {'assets': {}}} )
inferred_type = lib.infer_dtype(data.ravel()) if inferred_type != 'string':
if text.endswith(truncate): return text return '%s%s' % (text, truncate)
self.key = key if not isinstance(delta, integer_types): raise SaltInvocationError('Delta value must be an integer') return key
for descriptor in items:
alice = User.objects.db_manager('default').create_user('alice', 'alice@example.com')
self.assertTrue(DecoratedDispatchView.as_view().is_decorated)
from salt.modules import zpool
if all_students or delete_module: if not has_access(request.user, 'instructor', course): return HttpResponseForbidden(_("Requires instructor access."))
from salt.modules import win_dns_client
print('explained variance ratio (first two components): %s' % str(pca.explained_variance_ratio_))
elif len(cond[icond]) == len(other):
self.assertIsInstance(self.container._shallow_copy(), FrozenNDArray)
assert_equal(grid_search.best_score_, 1.0) best_vectorizer = grid_search.best_estimator_.named_steps['vect'] assert_equal(best_vectorizer.ngram_range, (1, 1))
pass
if columns is not None and self.is_multi_index: for n in self.levels: if n not in columns: columns.insert(0, n)
self.indent(0) self.xml.endElement("django-objects") self.xml.endDocument()
return False
if value in self.empty_values: return None if isinstance(value, datetime.time): return value return super(TimeField, self).to_python(value)
evaluate_prerequisite(self.course, self.prob1.location, self.user.id) self.assertFalse(mock_module_score.called)
if not settings.FEATURES['ADVANCED_SECURITY']: return False min_days_pw_reset = settings.ADVANCED_SECURITY_CONFIG.get( 'MIN_DAYS_FOR_STUDENT_ACCOUNTS_PASSWORD_RESETS' ) return min_days_pw_reset
lw = LedoitWolf(store_precision=False) lw.fit(X) assert_almost_equal(lw.score(X), score_, 4) assert(lw.precision_ is None)
self.assertTrue(Article.objects.filter(headline=new_headline)) self.assertFalse(Article.objects.filter(headline=old_headline))
import salt.utils import salt.utils.decorators as decorators
return u'{cat}/{name}'.format(cat=location.category, name=location.name)
cmd = ['prlctl', sub_cmd] if args: cmd.extend(_normalize_args(args))
from __future__ import absolute_import import re
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
pass
raise NotImplementedError
assert last_row % stride[0] == 0 num_row_steps = last_row / stride[0] + 1
ORDER_STATUS_MAP = { 'cart': 'defunct-cart', 'paying': 'defunct-paying', }
forms.MultiWidget.__init__(self, widgets, attrs)
lib_key = CourseKey.from_string(self._library_key) return unicode(lib_key.make_usage_key('library', 'library'))
if found: setattr(self, cache_attr, getattr(f, attr)) break else: found = True
apache.__grains__ = {} apache.__salt__ = {} apache.__context__ = {}
exc_info_on_loglevel=logging.DEBUG
msg = '<div class="capa_alert">%s</div>' % msg return msg
if connection.features.interprets_empty_strings_as_nulls: test_data = [data for data in test_data if not (data[0] == data_obj and data[2]._meta.get_field('data').empty_strings_allowed and data[3] is None)]
from course_modes.models import CourseMode
ROLE = 'staff' def __init__(self, *args, **kwargs): super(CourseStaffRole, self).__init__(self.ROLE, *args, **kwargs)
from __future__ import unicode_literals
if has_access(user, 'load', course_descriptor): world.enroll_user(user, course_descriptor.id)
try: import requests
self.assertIs(e1.topics.__class__, e2.topics.__class__) self.assertIs(t1.entry_set.__class__, t2.entry_set.__class__)
raw_student_words = data.getall('student_words[]') student_words = filter(None, map(self.good_word, raw_student_words))
values = converted if not isnull(converted).all() else values values = values.copy() if copy else values
if N.size(imshp)==2: inshp = (1,)+imshp
import salt.utils.boto3 import salt.utils.compat import salt.utils
pass
with patch.object(XQueueInterface, 'send_to_queue') as mock_send: mock_send.return_value = (0, None) if success else (1, self.ERROR_MSG) yield mock_send
if not isinstance(config, dict): return False, ('Configuration for btmp beacon must ' 'be a list of dictionaries.') return True, 'Valid beacon configuration'
TEST_ROOT = path("test_root") STATIC_ROOT = TEST_ROOT / "staticfiles"
from __future__ import absolute_import import os import shutil
return np.memmap(filename, dtype=dtype, shape=shape, mode=mode, offset=offset, order=order)
y_pred1 = clf.fit(X1, y).predict(X1) assert_array_equal(y_pred1, y, 'solver %s' % solver)
reg_units = theano.tensor.abs_(model.encode(X)).sum(axis=1).mean()
exc_info_on_loglevel=logging.DEBUG
t = Template('{% load i18n %}{% blocktrans context "unexisting" %}May{% endblocktrans %}') rendered = t.render(Context()) self.assertEqual(rendered, 'May')
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
idx = Index(np.arange(10))
if dayfirst and yearfirst and is_lt_253: continue
result = ungettext_lazy( '%(name)s has %(num)d good result', '%(name)s has %(num)d good results',
assert_almost_equal(dists[0], 0, decimal=5)
return reduce(np.result_type, arrays_and_dtypes)
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21')
empty_io = BytesIO() try: images.get_image_dimensions(empty_io) finally: self.assertTrue(not empty_io.closed)
result = result.astype(float) tm.assert_frame_equal(result, df)
from __future__ import absolute_import
domain, port = split_domain_port(host) if not port: raise if domain not in SITE_CACHE: SITE_CACHE[domain] = self.get(domain__iexact=domain) return SITE_CACHE[domain]
cmd = 'make-bcache --cache /dev/{0} --block {1} --wipe-bcache'.format(dev, block_size)
response = self.client.post(update_url, post_data) self.assertEquals(response.status_code, 302)
print _pep8_output(count, violations_list)
s = Series([1, 2]) s[[True, False]] = [0, 1] expected = Series([0, 2]) assert_series_equal(s, expected)
from __future__ import absolute_import
assert_array_almost_equal(X_truth[:, 2], out_X_unstructured[4]) assert_array_almost_equal(X_truth[:, 2], out_X_structured[4])
return self.data_label
result = self.panel.swapaxes(0, 1) self.assertIs(result.items, self.panel.major_axis)
if ret.get('Exists'): log.info('DSC Compile Config: {0}'.format(ret)) return ret
return self.is_enabled(self.PREVIOUS_PAGE_BUTTON_CSS)
raise NotImplementedError('override-me')
return re.sub(r'>\s+<', '><', force_text(value))
SkippedReverification.add_skipped_reverification_attempt( checkpoint=self.checkpoint, user_id=self.user.id, course_id=unicode(self.course.id) )
wb = trials - len(self.aes) if wb <= 0: return 0 else: return wb
self.notes_page.wait_for_ajax() note = self.notes_page.notes[1] assert_page(note, self.raw_note_list[2]['usage_id'], "Location in Course")
from __future__ import absolute_import
self.login() url = self.do_redirect_url + '?next=/custom_next/' response = self.client.get(url) self.assertRedirects(response, '/custom_next/', fetch_redirect_response=False)
n_fits = len(out) n_folds = len(cv)
def test_complex_clash(self): class Target(models.Model): tgt_safe = models.CharField(max_length=10) clash = models.CharField(max_length=10) model = models.CharField(max_length=10)
self.envelope = geom.envelope self.color, self.weight, self.opacity = color, weight, opacity super(GPolyline, self).__init__()
retained = None for flav in flavor: parser = _parser_dispatch(flav) p = parser(io, compiled_match, attrs, encoding)
return '%s-%s' % (self.prefix, field_name) if self.prefix else field_name
self.assertEqual(response.status_code, 302) self.assertEqual( response.url, reverse('courseware', args=[course_id]) )
existing_config = None if __salt__['marathon.has_app'](name): existing_config = __salt__['marathon.app'](name)['app']
__virtualname__ = 'user'
result = s.ix[[(2000, 3, 10), (2000, 3, 13)]] expected = s.reindex(s.index[49:51]) assert_series_equal(result, expected)
if s.index.inferred_type in ['categorical']: pass elif s.index.inferred_type in ['datetime64', 'timedelta64', 'period']:
def __init__(self, email, user, cenr, cea): self.email = email self.user = user self.cenr = cenr self.cea = cea
return self._get_element_text(".group-visibility-label")
self.assertRaises(ValueError, utils.find_json, LORUM_IPSUM)
import salt.returners import salt.utils.jid
continue
can_introspect_default = True
gp_fix = GaussianProcessClassifier(kernel=1.0 * RBF(length_scale=1.0), optimizer=None) gp_fix.fit(X[:train_size], y[:train_size])
raise NotImplementedError
self.assertFalse(ax1._shared_y_axes.joined(ax1, ax2)) self.assertFalse(ax2._shared_y_axes.joined(ax1, ax2))
my_estimator = MyEstimator() str(my_estimator)
self.q(css=".action-toggle-notes").first.click() return self
a = "this is \xe0 test" expected = 'this is a test' assert_equal(strip_accents_unicode(a), expected)
arr = np.arange(15, dtype=np.float64) arr[7:12] = nan arr[-1:] = nan
world.visit('/') signin_css = 'a.action-signin' assert world.is_css_present(signin_css)
html5_id_to_remove = [x for x in videos['html5'] if x != html5_id] if html5_id_to_remove: remove_subs_from_store(html5_id_to_remove, item)
return self.child(title)
fig = plt.figure() fig.subplots_adjust(left=0.05, right=0.95, wspace=0.05)
self.assertEqual(4, len(coll)) self.assertTrue(ref_geom.equals(coll))
expected = Float64Index(arr) a = np.zeros(5, dtype='float64') result = fidx - a tm.assert_index_equal(result, expected)
tm._skip_if_no_scipy()
self.q(css=self._bounded_selector(".annotator-item input")).first.fill(" ".join(tags))
s = Series(pd.date_range('20130101', periods=100000, freq='H')) s[0] += pd.Timedelta('1s 1ms')
students_to_generate_certs_for = students_to_generate_certs_for.filter( certificatewhitelist__course_id=course_id, certificatewhitelist__whitelist=True ).exclude( generatedcertificate__course_id=course_id, generatedcertificate__status__in=CertificateStatuses.PASSED_STATUSES )
if minimum_grade_credit is not None: minimum_grade_credit = minimum_grade_credit
clf = MultiTaskLasso(alpha=1, tol=1e-8).fit(X, Y) assert_true(0 < clf.dual_gap_ < 1e-5) assert_array_almost_equal(clf.coef_[0], clf.coef_[1])
if first_octet == 169 and second_octet == 254: return False
rendered = pieces["short"]
from __future__ import absolute_import import os import shutil
pref = UserOrgTag.objects.filter(user=user).order_by("-modified") return pref[0].modified.isoformat(' ') if len(pref) > 0 else self.DEFAULT_DATETIME_STR
pass
result = DataFrame.from_records([], index='foo', columns=['foo', 'bar'])
from __future__ import absolute_import
return self.q(css=".button.button-reindex")[0]
resp = self.client.post('/courses/def/abc/in_valid/generate_user_cert') self.assertEqual(resp.status_code, HttpResponseBadRequest.status_code) self.assertIn("Course is not valid", resp.content)
self.assertRaises(KeyError, self.cf.get_option, 'no_such_option')
import salt.cloud
if self.flag == 1: raise Unauthorized return True
self.courses.append([CourseFactory().location.course_key for _i in range(3)])
self.assertEqual(dt_result.index.name, 'key')
attrs[k] = v
reduces_to_sql = True
self.assertIsNone( GeneratedCertificate.certificate_for_student(students[4], self.course.id) )
ret.append(local_branch if branch is None else branch) ret.append(desired_upstream)
addr = 'viewx3dtextx26qx3d@yahoo.comx26latlngx3d15854521645943074058' self.assertEqual(addr, f.clean(addr))
self.assert_bookmark_data_is_valid(bookmarks[-1], bookmarks_data[0], check_optional_fields=check_all_fields) self.assert_bookmark_data_is_valid(bookmarks[0], bookmarks_data[-1], check_optional_fields=check_all_fields)
with tempfile.NamedTemporaryFile(mode='w', prefix='shim_', delete=False) as shim_tmp_file: shim_tmp_file.write(cmd_str)
if course is None: course = modulestore().get_course(course_id, depth=0)
w, h, d = original_shape = tuple(china.shape) assert d == 3 image_array = np.reshape(china, (w * h, d))
grid_search_no_score = GridSearchCV(clf_no_score, {'C': Cs}) assert_raise_message(TypeError, "no scoring", grid_search_no_score.fit, [[1]])
val = value.reindex_axis(v, axis=axis)
sequential2 = ItemFactory.create( parent_location=self.chapter.location, category='sequential', display_name='Section 2', modulestore=store, publish_item=True, start=datetime(2015, 3, 1, tzinfo=UTC), )
self.selenium.get(self.live_server_url + reverse('admin:admin_widgets_member_add'))
instance = IntegerArrayModel(field=['1']) instance.save() loaded = IntegerArrayModel.objects.get() self.assertEqual(loaded.field, [1])
df = DataFrame([[True, 1], [False, 2]], columns=["female", "fitness"])
pass
t = obj if t.__name__ == classname: return True for klass in t.__mro__: if klass.__name__ == classname: return True return False
(['honor', 'verified', 'audit'], 'honor'),
class CursorMock(object): "Very simple mock of DB-API cursor" def execute(self, arg): pass
td.astype('int64')
skip_if_no_sklearn() trainer = yaml_parse.load(test_yaml) trainer.main_loop()
class DefaultsForm(ModelForm): class Meta: model = Defaults fields = '__all__'
SignalHandler.course_published.connect(listen_for_course_publish)
try: self.io_loop.start() except (KeyboardInterrupt, SystemExit): salt.log.setup.shutdown_multiprocessing_logging()
self.assertEqual( self.run_function('shadow.set_password', [NO_USER, 'P@SSw0rd']), 'ERROR: User not found: {0}'.format(NO_USER))
child_to_move_location = self.problem_x1a_1 new_parent_location = self.vertical_y1a old_parent_location = self.vertical_x1a
def f(): Categorical.from_codes(["a"], [1, 2])
for k, v in six.iteritems(self.loader._dict): self.assertTrue(k.startswith(self.module_name))
__func_alias__ = { 'set_': 'set' }
return Index(self._values)
result = Series(values).values.value_counts(dropna=dropna) result.name = name counts = result.values
from salt.ext.six import string_types import salt.utils
dtype = dict((columns[k] if com.is_integer(k) else k, v) for k, v in compat.iteritems(dtype))
if axis != 0: raise ValueError("cannot reindex series on non-zero axis!") return self.reindex(index=labels, **kwargs)
DateTimeModel.objects.create(d=d, dt=dt2, t=t) self.assertEqual(m, DateTimeModel.objects.get(dt__date=d))
permutation_option = None if response.has_shuffle(): permutation_option = 'shuffle' elif response.has_answerpool(): permutation_option = 'answerpool'
store = self._verify_modulestore_support(location.course_key, 'convert_to_draft') return store.convert_to_draft(location, user_id)
assert not value or all(0 <= v < self.num_layers for v in value) self.inputs_to_layers[key] = sorted(value)
shutil.rmtree(root_dir)
num_braces = 0
if hasattr(path_or_buf, 'read') and compat.callable(path_or_buf.read): return read(path_or_buf)
s = Series([1, 2, 3, 4, 5], index=date_range( '20130101', periods=5, freq='s')) r = s.resample('2s')
import salt.utils import salt.utils.cloud as suc from salt.exceptions import SaltCloudException
self.assertEqual(a.value[0], 1)
for app in ENV_TOKENS.get('ADDL_INSTALLED_APPS', []): INSTALLED_APPS += (app,)
from __future__ import unicode_literals
attr = cls._translate(attr)
#pylint: disable=E0602
vec = np.zeros(n_features * n_classes) vec[0] = 1 hess_col = hessp(vec)
draft_xblock = self.store.get_item( self.vertical_x1a, revision=ModuleStoreEnum.RevisionOption.draft_only ) self.assertIsNotNone(draft_xblock)
pass
if isinstance(to_space, CompositeSpace):
if not path.endswith('/'): path = path + '/'
self.dashboard_page.visit()
import salt.ext.six as six
response = self._get_page(payment_flow, course.id) self._assert_contribution_amount(response, "")
with patch_logger('django.server', 'info'): WSGIRequestHandler(request, '192.168.0.2', server)
assert self.match_social_auth(social_auth) return social_auth.uid
from pandas.core.index import Index return Index(self._box_values(self.asi8), name=self.name, dtype=object)
_move_ext = Extension('pandas.util._move', depends=[], sources=['pandas/util/move.c']) extensions.append(_move_ext)
logprob, responsibilities = self.score_samples(X) return responsibilities.argmax(axis=1)
return obj.user.email
if from_config is not None: __context__[contextkey] = from_config return from_config
return string.replace('\r\n', '\n').replace('\r', '\n')
import integration import salt.utils
from __future__ import absolute_import
self.url = xml.get('url') or "http://qisx.mit.edu:8889/pyloncapa"
import salt.ext.six as six from salt.ext.six.moves import range
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))
if Bookmark.objects.filter(user=user, course_key=course_key).count() >= settings.MAX_BOOKMARKS_PER_COURSE: return False
class X(object):
return self.find_css("#start_date").present
mb_k_means = MiniBatchKMeans(n_clusters=3, init=test_init, random_state=42).fit(X_csr) _check_fitted_model(mb_k_means)
parallel_units = len(parallel_suite.subsuites) if self.parallel > parallel_units: self.parallel = parallel_units
result = force_text(message)
self.assertQuerysetEqual( Article.objects.order_by("headline")[1:3], [ "Article 2", "Article 3", ], attrgetter("headline") )
retain_settings = opts.get('retain_settings', False) result = current if retain_settings else {}
import salt.ext.six as six
transaction.set_rollback(False) r2.save(force_update=True)
return self.q(css=self._bounded_selector('.flag-role .msg-you')).present
unlock_content = cls.create_image(prefix, (32, 32), 'blue', '{}_unlock.png')
td = Series([np.timedelta64(300000000), pd.NaT]) self.assertEqual(td.dtype, 'timedelta64[ns]')
ns = {} if not ns else ns klass = type(klass_name, (slicer, ), ns)
for key in self: yield self[key]
from salt.modules import schedule from salt.utils.event import SaltEvent
if self.server.delete_note(note_id): self.respond(204, "No Content") else: self.respond(404, "404 Not Found")
text = "J'ai mang\xe9 du kangourou ce midi, c'\xe9tait pas tr\xeas bon." text_bytes = text.encode('utf-8')
ref = GEOSGeometry(wkt) g1 = wkt_r.read(wkt.encode()) g2 = wkt_r.read(wkt)
for logger in loggers: logger.setLevel(logging.NOTSET) logger.removeHandler(import_log_handler)
return urlparse(handler_url(self.block, 'handler', query=query_string)).query
self.assertIsNone(subq._result_cache)
ex_sls.add(exc)
return self.condition
assert_greater(len(estimators), 0)
student_id = AutoAuthPage(self.browser, course_id=self.course_id).visit().get_user_id()
X, y = iris.data, iris.target
assert_equal(X.indptr.shape[0], 7) assert_equal(X.shape[0], 6) assert_equal(X.shape[1], 22)
if used_name != guessed_filename: guessed_path = path.join(tempdir, guessed_filename) shutil.move(the_path, guessed_path) return guessed_path
yield prev_end, "E225 missing whitespace around operator" need_space = False
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
with self.assertNumQueries(3): self.italian_restaurant.save()
doublequote=True, delim_whitespace=False, as_recarray=False, compact_ints=False, use_unsigned=False, low_memory=_c_parser_defaults['low_memory'], buffer_lines=None, memory_map=False, float_precision=None):
m1 = MinusOneSRID(geom=Point(17, 23, srid=4326)) m1.save() self.assertEqual(-1, m1.geom.srid)
dense_classifier = dense_results = AdaBoostRegressor( base_estimator=CustomSVR(), random_state=1 ).fit(X_train, y_train)
err = np.atleast_2d(err)
import time import os import multiprocessing import logging from salt.ext.six.moves import range
__func_alias__ = { 'list_': 'list' }
if state != self.is_cohorted: self.q(css=self._bounded_selector('.cohorts-state')).first.click() self.wait_for_ajax()
raise CommandExecutionError( 'Unterminated marked block. End of file reached before marker_end.' )
with os.fdopen(fh_, 'w'): pass log.trace('Write lock %s obtained', lock_fn) obtained_lock = True yield break
del self.send_queue[0] continue
self.assertEqual( get_object_or_404(Article, title__contains="Run"), article )
'http_request_timeout': float,
import re
self.estimators_.extend(trees)
editable_fields[SplitTestFields.user_partition_id.name] = self._create_metadata_editor_info( SplitTestFields.user_partition_id )
import salt.ext.six as six
'openedx.core.djangoapps.coursetalk',
import matplotlib.pyplot as plt from itertools import cycle
uninstaller = pkginfo[version_num].get('uninstaller')
COURSE_CERT_AWARDED.send(**self.signal_kwargs) self.assertEqual(mock_is_certification_enabled.call_count, 1)
error_rate = OrderedDict((label, []) for label, _ in ensemble_clfs)
clf_base_regressor = CalibratedClassifierCV(Ridge()) clf_base_regressor.fit(X_train, y_train) clf_base_regressor.predict(X_test)
pipe.set_params(svc__a=0.1) assert_equal(clf.a, 0.1) assert_equal(clf.b, None) repr(pipe)
return self.grouper.size()
auth_entry = request.session.get(pipeline.AUTH_ENTRY_KEY)
if is_int_positional:
PIPELINE_UGLIFYJS_BINARY = 'node_modules/.bin/uglifyjs'
self.validate_version(where)
out = merge(left, right, how='left', sort=False) assert_frame_equal(left, out[left.columns.tolist()])
if return_type == 'dict': return bp elif return_type == 'both': return BoxPlot.BP(ax=ax, lines=bp) else: return ax
xx = np.atleast_2d(np.linspace(0, 10, 1000)).T xx = xx.astype(np.float32)
return fname
return tslib.ints_to_pytimedelta(self.asi8)
self.assertEqual(iptables.build_rule(**{'match-set': 'src flag1,flag2'}), '-m set --match-set src flag1,flag2')
xT_A = self.lmul(self.transpose_left(x, True)) rval = self.transpose_right(xT_A, True) return rval
if parse_dates is True or parse_dates is None or parse_dates is False: parse_dates = []
return False
if is_copy: if not result._get_axis(axis).equals(self._get_axis(axis)): result._set_is_copy(self)
ADD_PKG = 'algol68g' DEL_PKG = 'acme'
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
axis_index = getattr(self, axis) d = dict() prefix = axis[0]
locale.__salt__ = {} locale.__opts__ = {}
self.assertEqual(result['success'], 'incorrect')
execlines = ['import numpy as np', 'import matplotlib.pyplot as plt'] app.add_config_value('ipython_execlines', execlines, 'env')
try: from hashlib import md5 except ImportError: from md5 import md5
trainer = yaml_parse.load(load_all_yaml % {'filename': filename}) trainer.main_loop()
__MP_LOGGING_QUEUE_PROCESS.terminate()
return self.tracker.backends['mem']
pass
svm = SVC(kernel="precomputed") assert_raises(ValueError, cval.cross_val_score, svm, X, y)
from __future__ import absolute_import
def __enter__(self): return self
np_ver = [int(x) for x in unpickler.np.__version__.split('.', 2)[:2]]
executor.loader.build_graph()
cur_block = unordered_structure[block]
drop_mask_Y = T.zeros_like(Y)
store_fields = ["OPTIONS", "DOC_STORE_CONFIG"] for field in store_fields: self.assertEqual(store_setting1[field], store_setting2[field])
header = [field for field in output[0].lower().split(" ") if field] del output[0]
import logging import subprocess
raise NotImplementedError("edX Platform doesn't currently implement XBlock resource urls")
return Bunch(data=faces.reshape(len(faces), -1), images=faces, target=target, target_names=target_names, DESCR="LFW faces dataset")
return value or arg
middleware = CacheMiddleware()
self.assertEqual(connection.connection.isolation_level, read_committed)
cls.server_thread.is_ready.wait() if cls.server_thread.error: cls._tearDownClassInternal() raise cls.server_thread.error
from nose.plugins.skip import SkipTest import theano.sandbox.cuda as cuda_ndarray if cuda_ndarray.cuda_available == False: raise SkipTest('Optional package cuda disabled')
from salttesting.helpers import ensure_in_syspath from salttesting.unit import skipIf ensure_in_syspath('../')
return repo.branches()
import salt.modules.cmdmod import salt.modules.smbios
_srid_cache = {}
self.client.login(username=self.user.username, password="password")
with self.assertRaisesMessage(ImproperlyConfigured, "settings.FIXTURE_DIRS contains duplicates."): management.call_command('loaddata', 'absolute.json', verbosity=0)
axes = self._output_axes assert len(axes) == 4
account_settings = get_account_settings(self.default_request) self.assertEqual("Mickey Mouse", account_settings["name"])
return self._df_raw
delete_course_and_groups(course_key, self.user.id)
if error == 0: self.input_state['queuekey'] = queuekey self.input_state['queuestate'] = 'queued' self.input_state['queuetime'] = time.time()
self.X_topo_space = self.view_converter.topo_space
self.assert_enrollment_status(expected_status=status.HTTP_401_UNAUTHORIZED)
clf = self.factory(alpha=0.1, n_iter=1000, class_weight=[0.5]) clf.fit(X, Y)
mask[np.argsort(scores, kind="mergesort")[-self.k:]] = 1 return mask
self.client.force_login(self.u1)
module = module + '.' if not module.endswith('.') else module
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM 21/12/2010")
self.client.logout() resp = self._activate_user(self.email) self.assertEqual(resp.status_code, 200)
assert pdp.shape == (1, 4) assert axes[0].shape[0] == 4
self.assertEqual(item.title, title) self.assertEqual(item.subtitles, subtitles)
klass._add_aggregate_operations() klass._add_numeric_operations()
CELERY_ALWAYS_EAGER = True
if isinstance(y_pred, list): y_pred = np.vstack(p for p in y_pred).T
roles = (CourseStaffRole, CourseInstructorRole)
completed = True
self.assertRaises(Exception, BlockIndex, 10, [2, 5], [5, 3])
self.q(css='#course-index-tabs .programs-tab a').click() self.wait_for_element_visibility("div.programs-tab.active", "Switch to programs tab")
self.setup_logfile_logger() verify_log(self.config)
if messages: self.request.session[self.session_key] = self.serialize_messages(messages) else: self.request.session.pop(self.session_key, None) return []
if schema_attr is None: cret = __salt__['postgres.schema_create'](dbname, name, owner=owner, **db_args) else: msg = 'Schema {0} already exists in database {1}' cret = None
import salt.modules.cmdmod
pass
return ProviderApiPermissions.objects.create(client=client, provider_id=provider_id)
import salt.utils.event import salt.client
pos = 0 end_text_pos = 0 current_len = 0 open_tags = []
self.opts = opts self.lst = lst return {}
scenarios = { "2_choices_correct": ("checkbox_two_choices", "correct"), "2_choices_incorrect": ("checkbox_two_choices", "incorrect"),
return ('%(classname)s(dim=%(dim)s, dtype=%(dtype)s)' % dict(classname=self.__class__.__name__, dim=self.dim, dtype=self.dtype))
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
intAttributes = win32file.GetFileAttributes(path)
if not(len(users) == 1 and caller == users[0]): _check_caller_authority(caller, role) role.remove_users(*users)
instructor = AdminFactory.create() self.client.login(username=instructor.username, password="test")
leglabels = labels if labels is not None else idx for p, l in zip(patches, leglabels): self._add_legend_handle(p, l)
queue_msg = u"<span>{0}</span>".format(_("Error running code."))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
world.disable_jquery_animations() world.css_click(component_button_css)
with contextlib.closing(self.urlopen('/example_view/')) as f: self.assertEqual(f.read(), b'example view')
header='infer', names=None, index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True,
for name, index in self.indices.items(): if isinstance(index, MultiIndex): pass else: idx = index.copy()
__virtualname__ = 'ntp'
if isinstance(module, DiscussionDescriptor) and 'discussion_id' not in items: items['discussion_id'] = module.discussion_id
result = df.iloc[[-1, -1, 1, 3], [-1, 1]] expected = df.ix[[18, 18, 2, 6], [6, 2]] assert_frame_equal(result, expected)
state('A').cmd.run('echo this is state A', cwd='/')
user: MYLOGIN apikey: JVkbSJDGHSDKUKSDJfhsdklfjgsjdkflhjlsdfffhgdgjkenrtuinv driver: softlayer
'ENABLE_SPECIAL_EXAMS': False,
lm = LayerMapping(City, city_shp, city_mapping) lm.save()
def __init__(self, *args, **kwargs): super(Photo, self).__init__(*args, **kwargs) self._savecount = 0
return binascii.hexlify(struct.pack('<' + structure, *data)).upper()
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
trainer = yaml_parse.load(test_yaml_layer0 % {'layer0_filename': layer0_filename}) trainer.main_loop()
__virtualname__ = 'debconf'
for user in [UserFactory(), UserFactory(), UserFactory()]: render.get_module_for_descriptor( user, request, descriptor, field_data_cache, course.id, course=course )
contains_aggregate = False def as_sql(self, compiler=None, connection=None): raise EmptyResultSet
is_dates_only = _is_dates_only(values) if is_dates_only: return date_format or "%Y-%m-%d" return date_format
with self.assertRaisesRegexp(CommandError, 'Error: too few arguments'): call_command('delete_orphans')
return ''
import salt.ext.six as six
__virtualname__ = 'minion'
'user',
X = check_array(X, accept_sparse=('csr', 'csc'), copy=False, ensure_2d=False, dtype=FLOAT_DTYPES) original_ndim = X.ndim
self.values = [] self.related_ids = None if not hasattr(self, 'related_updates'): self.related_updates = {}
CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
os.remove(os.path.join(mine_file))
mock_course_module = MagicMock(id=self.course.id, position=None) mock_course_module.get_display_items.return_value = [MagicMock()] self.assertIsNone(helpers.get_course_position(mock_course_module))
self.users = [ UserFactory.create() for dummy0 in range(self.USER_COUNT) ]
continue
class BinaryTreeAdmin(admin.TabularInline): model = BinaryTree
for section in self.course_outline_page.sections(): section.expand_subsection()
if hasattr(original_file, 'seek'): original_file.seek(0)
class Model(models.Model): foreign_key = models.ForeignKey('Rel1', models.CASCADE)
assert_frame_equal(wp['bool'], panel['bool'], check_names=False)
log = logging.getLogger(__name__)
with self.assertRaises(SomeOtherException): self.engine.render_to_string('filter-syntax14', {"var": SomeClass()})
disable_jquery_animations(page) disable_css_animations(page)
model = CountryAccessRule extra = 1 def has_delete_permission(self, request, obj=None): return True
from __future__ import absolute_import
import logging import copy
problem = new_loncapa_problem(xml_str)
course_key = course.id if view_as_ccx: course_key = CCXLocator.from_course_locator(course_key, self.ccx.id) return progress( self.request, course_id=unicode(course_key), student_id=self.student.id )
break
import salt.ext.six as six
actual = GroupConfiguration.get_content_groups_usage_info(self.store, self.course) self.assertEqual(actual.keys(), [0])
try: maybe_to_datetimelike(data) return True except (Exception): pass return False
assert_panel4d_equal(panel4d.ix[:, items, dates, cols], panel4d.reindex(items=items, major=dates, minor=cols))
connection.close()
if val == val: nobs[lab, j] += 1 prodx[lab, j] *= val
data_home = get_data_home(data_home=DATA_HOME) assert_true(os.path.exists(data_home))
self.assertRaises(TypeError, ujson.encode, input, double_precision='9') self.assertRaises(TypeError, ujson.encode, input, double_precision=None)
super(ContainerBase, self).setUp(is_staff=is_staff)
if not gdal.HAS_GDAL: raise ValueError('Initializing geometry from JSON input requires GDAL.') g = wkb_r().read(gdal.OGRGeometry(geo_input).wkb)
return [child.version_agnostic() for child in children]
ret['hash_type'] = __opts__['hash_type']
result = sql.read_sql_table('test_nan', self.conn) tm.assert_frame_equal(result, df)
err = SearchIndexingError mock_index_dictionary.return_value = err
from __future__ import absolute_import
out_path = __opts__['reactor_path']
if self.parallel > 1: suite = parallel_suite
setattr(builtins, '__salt_system_encoding__', encoding)
select = Select(browser_query.first.results[0]) ddl_selected_value = select.first_selected_option.get_attribute('value') return ddl_selected_value == value
return self._on_user_authentication_failed(request)
log = logging.getLogger(__name__)
post_params = sign(self.CLIENT_POST_PARAMS)
log = logging.getLogger(__name__)
import salt import salt.loader import salt.utils from salt.utils.process import SignalHandlingMultiprocessingProcess
from pandas import Index return Index(self).is_monotonic_decreasing
self.assert_grade( two_choice_two_input, self._make_answer_dict([(True, ["1"]), (True, ["Platypus"])]), "correct" )
log = None if __name__ == '__main__':
try: return self._client.get( self.user.username, kvs_key.block_scope_id, fields=[kvs_key.field_name], ).updated except self._client.DoesNotExist: return None
return self._arrmap(self.values, mapper)
if not hasattr(self.current_request_configuration, 'data'): return {} return self.current_request_configuration.data
get_connection(using).commit()
pass
verify_date_or_time(COURSE_START_TIME_CSS, DUMMY_TIME)
version = sys.version_info if version[0] == 3: if version[1] == 3: reload = None else: from importlib import reload
return connection.ops.get_geom_placeholder(self, value, compiler)
with self.assertRaises(ItalianRestaurant.DoesNotExist): Place.objects.get(name="Demon Dogs").restaurant.italianrestaurant
exception = getattr(klass, exception_name) return exception.__new__(exception)
random_state = check_random_state(0) y_true = random_state.randint(0, 2, size=(n_samples, )) y_pred = random_state.randint(0, 2, size=(n_samples, ))
labels, uniques = algos.factorize(inds, sort=True)
df = DataFrame({'date' : [pd.Timestamp('20130101').tz_localize('UTC')] + [pd.NaT]*5})
return helpers.checkbox.render(helpers.ACTION_CHECKBOX_NAME, force_text(obj.pk))
backend = self.select_backend(request) view = self.get_view_for_backend(backend) return view(request, *args, **kwargs)
return self.q(css='.bookmarks-empty-detail-title').text[0]
with self.assertNumQueries(2, using='other'): authors = ", ".join(a.author.name for a in A.prefetch_related('author'))
from salt.exceptions import SaltInvocationError import salt.utils.http
result = algos.take_nd(arr, indexer, axis=1) expected = arr.take(indexer, axis=1) expected[:, -1] = np.nan tm.assert_almost_equal(result, expected)
import json
testit('L', lambda x: 'ms')
return etree.Element("choicetextresponse")
scsi.__salt__ = {} scsi.__context__ = {}
clf_base_regressor = \ CalibratedClassifierCV(RandomForestRegressor(), method="sigmoid") assert_raises(RuntimeError, clf_base_regressor.fit, X_train, y_train)
__func_alias__ = { 'list_': 'list' }
s2 = self.backend(s1.session_key) s2.delete()
get_version = { 'Linux': linux_version, 'FreeBSD': lambda: __salt__['cmd.run']('sysctl -n kern.version'), }
DATE_INPUT_FORMATS = [
label = world.css_html(".level-element>header>div>div>span.xblock-display-name") assert_equal(display_name, label)
pvals = T.alloc(1.0 / num_classes, num_classes) one_hot = self.s_rng.multinomial(size=(num_examples,), pvals=pvals)
__virtualname__ = 'saltcloud'
df2.ix[0, 'foo'] = 'a'
return np.fromstring(values, dtype=dtype)
if (llx <= ans_x <= urx) and (lly <= ans_y <= ury): correct_map.set(aid, 'correct') break
if isinstance(cur, six.string_types): cur = {desired_pkgs[0]: cur} if isinstance(avail, six.string_types): avail = {desired_pkgs[0]: avail}
for kwargs_key in kwargs_keys: if kwargs_key.startswith('__pub_'): pub_data[kwargs_key] = kwargs.pop(kwargs_key)
self.assertFalse(CourseEnrollment.is_enrolled(self.user, non_existent_course_key))
self.assertEqual(Article.objects.get(pk=self.a.id), self.a)
return True
#%%OPTS
if nowait: return 'FOR UPDATE NOWAIT' else: return 'FOR UPDATE'
from salt.log.setup import ( LOG_LEVELS, SORTED_LEVEL_NAMES, is_console_configured, is_logfile_configured, is_logging_configured, is_temp_logging_configured, setup_temp_logger, setup_console_logger, setup_logfile_logger, set_logger_level, )
(index_name, columns_, self.index_col) = _clean_index_names(columns, self.index_col)
username = data['username'] if request.user.username != username: return HttpResponseForbidden()
if zk_hosts is not None and path not in SEMAPHORE_MAP: zk = _get_zk_conn(zk_hosts) SEMAPHORE_MAP[path] = _Semaphore(zk, path, identifier, max_leases=max_concurrency, ephemeral_lease=ephemeral_lease)
import salt.ext.six as six
self.navigate_to_video()
DATE_INPUT_FORMATS = [
difference = salt.utils.compare_dicts(old, new)
import integration
import salt.search
for message in messages: message._prepare()
if self.should_redirect_with_slash(request): path = self.get_full_path_with_slash(request) else: path = request.get_full_path()
non_default_count = pos_count - pos_default_count for name in positional[:non_default_count]: annotation = annotations.get(name, _empty) parameters.append(Parameter(name, annotation=annotation, kind=_POSITIONAL_OR_KEYWORD))
if len(axes) != len(set(axes)): raise ValueError('Must specify %s unique axes' % self._AXIS_LEN)
from __future__ import absolute_import
X -= X.mean(axis=0) y -= y.mean()
params, response = _validate_post_params(request.POST) if response is not None: return response
self.assertEqual(bytearray(as_stolen_buf), b'test')
assert start >= 0 assert stop > start assert stop <= X.shape[0] X = X[start:stop, :] y = y[start:stop] assert X.shape[0] == y.shape[0]
if kw_overrides_match is None: return profile_match return kw_overrides_match
signed_fields = post_params.get('signed_field_names').split(',')
self.assertEqual(hash(Article(id=1)), hash(1)) with self.assertRaises(TypeError): hash(Article())
try: user_certificate = GeneratedCertificate.eligible_certificates.get( user=user, course_id=course_key, status=CertificateStatuses.downloadable ) except GeneratedCertificate.DoesNotExist: pass
self.assertIn('; %s' % http_cookies.Morsel._reserved['httponly'], str(example_cookie)) self.assertTrue(example_cookie['httponly'])
return os.sep.join(__file__.split(os.sep)[:-4]) + '/data/uploads/' + filename
from .models import CourseStructure
comb = self.frame.combineMult(self.empty) assert_frame_equal(comb, self.frame)
return cls.objects.filter(user=user, status='cart').exists()
result = pd.concat([s.iloc[0:1], s.iloc[1:]]) assert_series_equal(result, s)
if old_db_table == new_db_table: return self.execute(self.sql_rename_table % { "old_table": self.quote_name(old_db_table), "new_table": self.quote_name(new_db_table), })
result = s.interpolate() assert_series_equal(result, s)
from __future__ import unicode_literals
X = np.eye(4) y = np.array(['a', 'b', 'c', 'd'])
ply = Polygon(shell, inner) nullstate = State(name='NullState', poly=ply)
return escape(value)
for obj in objs: name = str(obj.Name).replace(prefix, '', 1) ret[name] = str(obj.LogModuleId)
if meta_attrs != {}: raise TypeError("'class Meta' got invalid attribute(s): %s" % ','.join(meta_attrs.keys()))
selector = self._bounded_selector(".annotator-outer") self.wait_for_element_invisibility(selector, text)
return self.q(css='input[name=list-profiles-csv]')
self.store.publish(self.vertical.location, self.user.id) draft_container = self.store.get_item(draft_container.location) test_container_html(draft_container)
pass
CourseEnrollment.unenroll(self.student, self.CERT_COURSE_KEY)
geography = False geometry = False
if error: ret['changes'] = {} ret['result'] = False ret['comment'] = str(error)
return True
attributes = self.q(css=self._bounded_selector('.cohort-management-assignment-type-settings')).attrs('class') if 'is-disabled' in attributes[0].split(): return True return False
DATABASES = AUTH_TOKENS['DATABASES']
import salt.netapi
return files, symlinks
import logging import os import os.path import re
test_string = "%%user_id%%" result = Ks.substitute_keywords_with_data( test_string, self.context, ) self.assertEquals(test_string, result)
page.wait_for_component_menu() click_css(page, 'button>span.large-advanced-icon', menu_index, require_notification=False)
published_xblock = self.store.create_item( self.user_id, self.course.id, 'vertical', block_id='test_vertical', asides=[aside1, aside2] )
return Fragment(self.FRAG_CONTENT)
return (arg.dtype is not None and str(arg.dtype).startswith('complex'))
Cov -= gamma_ * corr_eq_dir
if 'tgt_type' not in data: data['tgt_type'] = 'glob' kwargs = {}
est = LogOddsEstimator() assert_raises(ValueError, est.fit, None, np.array([1]))
from __future__ import absolute_import import hashlib import logging import sys
__virtualname__ = 'couchdb'
m = UnimportantThing(importance=1) self.assertEqual(m.get_absolute_url(), resolve_url(m))
basepeople = models.ManyToManyField(BasePerson, related_name='relating_basepeople') basepeople_hidden = models.ManyToManyField(BasePerson, related_name='+')
__, __ = self.log_in_as_instructor()
if not locations: locations = [get_location()]
from __future__ import absolute_import import logging
set_credit_requirements(self.course.id, requirements)
return self._beta_raw / self._std_err_raw
if self._intercept: return self._beta_raw[-1] else: return np.zeros(self._k)
out = __salt__['cmd.run_all'](cmd, output_loglevel='trace', python_shell=False)
self.assert_logged_in_cookie_redirect(actions.do_complete(
ret = self.run_function('group.delete', [DEL_GROUP]) self.assertTrue(ret)
if response.has_header('Content-Encoding'): return response
raise NotImplementedError()
file = getattr(instance, field.attname) data[field.attname] = file.name
ret = np.empty(shape, dtype=dtype)
Y_proba = clf_sprs.predict_proba(X_test)
f = lambda x: x.fillna(0, inplace=True) _check_f(d.copy(), f)
assert_array_equal(rfe.get_support(), rfe_svc.get_support())
reg = LinearRegression(fit_intercept=intercept) reg.fit(X, y, sample_weight=sample_weight) coefs1 = reg.coef_ inter1 = reg.intercept_
aggs = City.objects.aggregate(Union('location__point'))
return self.paginate_orphans
check_firefox_version()
from __future__ import absolute_import
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
from __future__ import absolute_import
result = df_swap.loc[idx[:, '2016-01-02'], :] expected = df_swap.iloc[[2, 3, 7, 8, 12, 13]] tm.assert_frame_equal(result, expected)
signal.signal(signal.SIGINT, self.signal_handler)
self.course = CourseFactory.create() self.checkpoint_location = u'i4x://{org}/{course}/edx-reverification-block/first_uuid'.format( org=self.course.id.org, course=self.course.id.course )
list_keypairs = self.run_cloud('-f list_keypairs {0}'.format(PROVIDER_NAME))
for line in lines: name = _ips_get_pkgname(line) version = _ips_get_pkgversion(line) __salt__['pkg_resource.add_pkg'](ret, name, version)
X = [[0, 1, 0], [0, -1, -1], [0, .5, .5]] y = [1, 0, 1]
self.assertEqual("original_get_html", self.problem.get_html())
for missing in SUBMISSION_RESET_KWARGS: kwargs = SUBMISSION_RESET_KWARGS.copy() del kwargs[missing] submissions_score_reset_handler(None, **kwargs) self.signal_mock.assert_not_called()
self.assertEqual( get_list_or_404(Article.objects.all(), title__icontains="Run"), [article] )
self.library = store.get_library(self.lib_key)
module = CapaFactory.create(rerandomize=rerandomize, attempts=0, done=True)
break
from __future__ import absolute_import, print_function import json import logging
try: value = int(value) except (ValueError, TypeError): pass try: value = float(value) except (ValueError, TypeError): pass
try: import Crypto.Random except ImportError:
scorer = get_scorer('mean_squared_error') ridge_gcv4 = RidgeCV(fit_intercept=False, scoring=scorer) ridge_gcv4.fit(filter_(X_diabetes), y_diabetes) assert_equal(ridge_gcv4.alpha_, alpha_)
delete_user(name, runas) msg = 'Error' return _format_response(res2, msg)
y = 0.5 * X.ravel() + rng.randn(n_samples, 1).ravel()
monitor_lr2 = MonitorBasedLRAdjuster(channel_name=dummy)
return isinstance(self.levels, list)
import salt.utils from salt.exceptions import CommandExecutionError
if mean is None: mean = X.mean(axis=0) X = X - mean
first_checkpoint = VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=self.checkpoint_midterm ) second_checkpoint = VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=self.checkpoint_final )
PaymentFakeView.PAYMENT_STATUS_RESPONSE = new_status return HttpResponse()
asset_md = store.find_asset_metadata(new_asset_loc) self.assertIsNone(asset_md)
for field in feature: nm = field.name
def dec(func): return self.tag(name, func) return dec
order = np.argsort(categories) categories = categories[order] y = sp.csr_matrix(y[:, order])
devmap.__grains__ = {} devmap.__salt__ = {} devmap.__context__ = {} devmap.__opts__ = {}
self.expect_error_on_file_content( '', "The file must contain a 'cohort' column containing cohort names." )
world.scenario_dict['COURSE'] = world.CourseFactory.create( org='edx', number=course, display_name='Test Course' )
class GEOSContext(threading.local): handle = None
result = p1.join(p2, how='inner') expected = panel.ix[:, 5:10, 2:3] tm.assert_panel_equal(result, expected)
serialized_tab = tab.to_json() deserialized_tab = tab.from_json(serialized_tab) self.assertEquals(serialized_tab, deserialized_tab)
class MyWidget8(MyWidget1): class Media: css = { 'all': ('/path/to/css3', 'path/to/css1') } js = ('/path/to/js1', '/path/to/js4')
import datetime df = DataFrame({'date': [datetime.datetime(2012, 1, 1), datetime.datetime(1012, 1, 2)]}) expected = df.dtypes
assert key.user_id == self.user.id
PROFILE_COUNTRY_CACHE_KEY = u"user.{user_id}.profile.country"
self.course.visible_to_staff_only = True self.store.update_item(self.course, self.user.id)
perf_test = True
if not wildcards: return dn.lower() == hostname.lower()
s = Series([np.nan, np.nan, 5, 7, np.nan, np.nan])
return data['user'].is_staff
if tolerates is None: return cls.default() else: return tolerates
orig = pd.Series([0., 0., 0., 0., 0.], index=list('ABCDE')) sparse = orig.to_sparse(fill_value=0)
self.conn.execute("DROP SCHEMA IF EXISTS other CASCADE;") self.conn.execute("CREATE SCHEMA other;")
self.emails_sent += new_subtask_status.succeeded return update_subtask_status(entry_id, current_task_id, new_subtask_status)
self.fit_transform(X) return self
return False
return self.header_description.startswith(u"Showing results for")
stress = ((dis.ravel() - disparities.ravel()) ** 2).sum() / 2
'oauth2_provider',
@property def linear_name(self): "Returns the name of the linear units." units, name = capi.linear_units(self.ptr, byref(c_char_p())) return name
from __future__ import unicode_literals
try: import docker import docker.utils HAS_DOCKER_PY = True except ImportError: HAS_DOCKER_PY = False
_expand_elements(body)
for c in reversed(sorted(to_remove)): data.pop(c) col_names.remove(c)
iptables.__salt__ = {} iptables.__opts__ = {}
pass
decisions = sum(all_decisions) / self.n_estimators
if is_order_type_business: email.content_subtype = "html"
xblock_info = create_xblock_info( xblock, data=data, metadata=own_metadata(xblock), include_ancestor_info=include_ancestor_info ) if include_publishing_info: add_container_page_publishing_info(xblock, xblock_info) return xblock_info
for enrollment in _ENROLLMENTS: if student_id == enrollment['student'] and course_id == enrollment['course']['course_id']: return enrollment
with self.assertRaises(TemplateSyntaxError): self.engine.get_template('filter-syntax07')
rng = self.mlp.rng if self.irange is None: raise ValueError("Recurrent layer requires an irange value in " "order to initialize its weight matrices")
self.deferred_sql = [x for x in self.deferred_sql if temp_model._meta.db_table not in x] self.create_model(temp_model)
from __future__ import unicode_literals
filedata = json.dumps(subs, indent=2) filename = subs_filename(subs_id, language) return save_to_store(filedata, filename, 'application/json', item.location)
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=False).visit()
if values.ndim == 1: return values[full_loc[1]]
course_outline.visit() subsection = course_outline.section_at(0).subsection_at(0) subsection.expand_subsection() unit = subsection.unit_at(0) unit.publish()
answer_id = "1_2_1_choiceinput_{index}_numtolerance_input_{ind}".format( index=index, ind=ind ) answer_dict[answer_id] = answer
verify_date_or_time(COURSE_END_TIME_CSS, DEFAULT_TIME) verify_date_or_time(ENROLLMENT_START_TIME_CSS, DEFAULT_TIME) verify_date_or_time(ENROLLMENT_END_TIME_CSS, DUMMY_TIME)
from sklearn.neighbors import KNeighborsClassifier
manager1 = OnlyFred() manager2 = OnlyBarney() objects = models.Manager()
key = 'a' * length
self.assertTrue(isinstance(kubectl_out, dict))
self.assertQuerysetEqual( Item.objects.datetimes('modified', 'day'), ['datetime.datetime(2007, 12, 19, 0, 0)'] )
if data_columns is True: data_columns = axis_labels elif data_columns is None: data_columns = []
if not os.path.isfile(config): raise CommandExecutionError('Bad config file "{0}"'.format(config))
if isinstance(opts['file_ignore_glob'], str): opts['file_ignore_glob'] = [opts['file_ignore_glob']]
self.factory(coef_init=np.zeros((3,))).fit(X, Y)
self.client.logout() self._verify_response(403)
f = os.path.join(self.dirpath, 'test_squeeze' + self.ext)
try: course_code_number = int(request.POST['total_registration_codes']) except ValueError: course_code_number = int(float(request.POST['total_registration_codes']))
self.d = datetime(2014, 7, 1, 10, 00) self.offset1 = CustomBusinessHour(weekmask='Tue Wed Thu Fri')
available_version = salt.utils.alias_function(latest_version, 'available_version')
from __future__ import absolute_import import logging import re
self.assertFalse(payload.get('success')) self.assertIn('There was an error receiving your login information', payload.get('value'))
self.assertQuerysetEqual( self.bob.groups.all(), [] )
salt '*' win_wua.list_updates severities=['Critical']
if not salt_token or not self.auth.get_tok(salt_token): raise cherrypy.HTTPError(401)
self.assertEqual( response['content-disposition'], 'attachment' ) rows = response.content.strip().split('\r') headers = rows[0]
eigvals = np.maximum(eigvals.real, 0)
import salt.utils import socket
block_bits = width if (not max_bits or width < max_bits) else max_bits block_size = 2 ** block_bits
Xcoo = coo_matrix(X) mkchi2(k=2).fit_transform(Xcoo, y)
srtlist = _pad_bytes("", 2 * (nvar + 1)) self._write(srtlist)
RestrictedCourse.invalidate_cache_for_course(instance.course_key) CountryAccessRule.invalidate_cache_for_course(instance.course_key)
self.assertGroupContent( groups[3], title=u"[no tags] (2)", notes=["Fifth note", "First note"] )
bin_sizes = defaultdict(int) for point in X: binned_point = np.round(point / bin_size) bin_sizes[tuple(binned_point)] += 1
except (TypeError, ValueError): exists = False
df.loc[2, 'B'] = None
from __future__ import unicode_literals
comment += 'Search was done without error.\n'
def f(): cat > cat_rev
if names is None: self.extra_select_mask = None else: self.extra_select_mask = set(names) self._extra_select_cache = None
mi2.set_labels(labels2, inplace=True) assert_almost_equal(mi2.values, new_values)
cumsum_xs = self.tsframe.cumsum(axis=1) self.assertEqual(np.shape(cumsum_xs), np.shape(self.tsframe))
return max(0, -(-(self._stop - self._start) // self._step))
if request._finished: future = Future() future.set_exception(TimeoutException()) return future
logging.basicConfig(level=logging.DEBUG, format="%(levelname)s %(message)s")
self.browser.set_window_size( initial['width'], initial['height'] )
if role is not None: role().add_users(user)
rgxin = config.ipython_rgxin rgxout = config.ipython_rgxout promptin = config.ipython_promptin promptout = config.ipython_promptout mplbackend = config.ipython_mplbackend exec_lines = config.ipython_execlines hold_count = config.ipython_holdcount
comps = member.path.split('/') if len(comps) > 1 and comps[0] == comps[1]: member.path = '/'.join(comps[1:])
for from_space in composite_spaces: for to_dtype in composite_dtypes: test_get_origin_batch(from_space, to_dtype) test_make_shared_batch(from_space, to_dtype) test_make_theano_batch(from_space, to_dtype) test_dtype_setter(from_space, to_dtype)
num_labels_by_type = (len(_categories),
with self.assert_logged('SafeCookieData not created due to invalid value for session_id'): yield
ed, created = book.authors.get_or_create(name="Ed") self.assertTrue(created) self.assertEqual(book.authors.count(), 1)
self.loaded = False
with self.assertNumQueries(0): mtv = ModelToValidate(number=10, name='Some Name') setattr(mtv, '_adding', True) mtv.full_clean()
with tm.assertRaises(ValueError): df.sample(n=1, axis=2)
Axis to broadcast over
certs = __salt__['keychain.list_certs'](keychain)
return [program['course_codes'][cc]['display_name'] for cc in course_codes]
class ServerHandler(simple_server.ServerHandler, object): def handle_error(self): if not is_broken_pipe_error(): super(ServerHandler, self).handle_error()
df[df[:-1] < 0] = 2 np.putmask(values[:-1], values[:-1] < 0, 2) assert_almost_equal(df.values, values)
try: eauth = self.opts.get('external_auth', {}).get(token['eauth'], {})
offset = BQuarterEnd(n=-1, startingMonth=1) self.assertEqual(datetime(2010, 1, 31) + offset, datetime(2010, 1, 29))
warnings.warn("figsize='default' is deprecated. Specify figure" "size by tuple instead", FutureWarning, stacklevel=4) figsize = None
def landing(request, org, course, coursename): return render_to_response('temp-course-landing.html', {})
return (BlockTypeKeyV1(key.block_family, key.block_scope_id), key.field_name)
SESSION_KEY = '2b1189a188b44ad18c35e1baac6ceead'
from copy import deepcopy import logging import os import hashlib
self.assertEquals(response.status_code, 403)
raise NotImplementedError
return self.q(css=VIDEO_MODAL_SELECTOR)
from salt.modules import s6
if not isinstance(Y, np.ndarray): raise ValueError("y_pred should be an array of floats.")
'file_client': str,
res = grainsmod.filter_by(dict1) self.assertIs(res, None)
ret['result'] = None
new_container = True
data = np.empty(nd_state[1], dtype=nd_state[2]) np.ndarray.__setstate__(data, nd_state)
raise SaltInvocationError('Only can use keystone admin token ' + 'with Glance API v1')
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
assert_equal('Paragraph', dropdowns[0].text) assert_equal('Font Family', dropdowns[1].text)
predictions = cval.cross_val_predict(clf, X, y) assert_equal(predictions.shape, (10,))
if params: endpoint = 'resources'
with salt.utils.fopen('/etc/rc', 'r') as handle: lines = handle.readlines()
from __future__ import unicode_literals
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
cat = Categorical(["a", "b", "b", "a"], ordered=False) cat.sort_values()
pass
__func_alias__ = { 'list_records': 'list', }
wrappers.insert(0, wrap_with_license)
sys.exit(3)
self.assertEqual( list(iter_format_modules('de', ['i18n.other.locale', 'i18n.other2.locale'])), [test_mod, test_mod2, default_mod])
def _str_header(self, name, symbol='`'): return ['.. rubric:: ' + name, '']
tops.append(os.path.dirname(xml.__file__))
self.fake_payment_page.submit_payment()
return render(request, 'context_processors/auth_attrs_test_access.html', {'session_accessed': request.session.accessed})
n_qs = Number.objects.filter(id=f) self.assertEqual(n_qs.get(), n) self.assertEqual(c_qs.get(), c)
ROLE = 'instructor' def __init__(self, *args, **kwargs): super(CourseInstructorRole, self).__init__(self.ROLE, *args, **kwargs)
get_version = { 'Linux': linux_cpustats, 'FreeBSD': freebsd_cpustats, }
probas_pred = probas_pred[:, 1]
cursor.execute(query, [module_id.to_deprecated_string()])
database: image: mongo:3.0 command: mongod --smallfiles --quiet --logpath=/dev/null '
self.assert_grade(problem, "Other String", "incorrect")
if axis + 1 > self.obj.ndim: raise AssertionError("invalid indexing error with " "non-unique index")
import msgpack if msgpack.loads(msgpack.dumps([1, 2, 3]), use_list=True) is None: raise ImportError HAS_MSGPACK = True
s.write(obj=value, append=append, complib=complib, **kwargs)
return not self == block_data
gtf = (c_double * 6)() capi.get_ds_geotransform(self._ptr, byref(gtf)) return list(gtf)
self.setup_groups_partitions() self.user_partition = self.user_partitions[0]
from django.db.models.query import QuerySet if isinstance(rhs, QuerySet): raise NotImplementedError("Bilateral transformations on nested querysets are not supported.")
import msgpack
service = MockServices() service.id = '005' service.name = name service.description = description service.type = service_type return service
for sql in self.deferred_sql: self.execute(sql) self.deferred_sql = [] if restore_pk_field: restore_pk_field.primary_key = True
clf = QuadraticDiscriminantAnalysis().fit(X6, y6) assert_true(not hasattr(clf, 'covariances_'))
self._upload_file('auto_reg_enrollment_errors_warnings.csv')
import salt.utils from salt.pillar.sql_base import SqlBaseExtPillar
ret['comment'] = 'Image \'{0}\' could not be {1}'.format(name, action)
import os
return '{}{:02d}'.format(block_type, num)
from __future__ import absolute_import
self.assertTrue(np.isnan(self.ts[::2].cov(self.ts[1::2])))
v_mean, v_var = self.mean_var_v_given_h_s(h_sample, s_sample) v_mean_shape = (batch_size, self.nvis) v_sample = rng.normal(size=v_mean_shape) * tensor.sqrt(v_var) + v_mean
self.sigma = 0
from salt.utils import schema
problem = self.build_problem(sample_dict=sample_dict, num_samples=10, tolerance=0.01, answer="x+2*y", hints=hints)
else: response = self.client.get(reverse(url_name), params)
if not len(results): return self._constructor(**self._construct_axes_dict())
from __future__ import absolute_import
response = self.client.get('/redirect_view/') self.assertRedirects(response, 'http://testserver/get_view/')
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
import os import logging from salt.ext.six import string_types import salt.ext.six as six from salt.ext.six.moves import zip
func = with_comprehensive_theme(EDX_THEME_DIR)(func)
social_auths = strategy.storage.user.get_social_auth_for_user( user, provider=self.provider.backend_name) self.assertEqual(0, len(social_auths))
cumsum = self.tsframe.cumsum(axis=1) expected = self.tsframe.apply(Series.cumsum, axis=1) tm.assert_frame_equal(cumsum, expected)
pass
AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
role = __salt__['keystone.service_get'](name=name, profile=profile, **connection_args)
values = Series(['fooBAD__barBAD', NA, 'foo'])
snapshot = models.TextField(blank=True)
self.key = key self.value = value self.time = time self.min_compress_len = min_compress_len return True
response = explicit_default_with_prefix_view(request, '4') self.assertEqual(response.content, b'Hello World 4')
self.assertNotEqual(initial_data["PhotoIDKey"], two_photo_reverification_data["PhotoIDKey"])
self.panel['ItemP'] = self.panel['ItemA'] > 0 self.assertEqual(self.panel['ItemP'].values.dtype, np.bool_)
self.assertRaises(KeyError, df.loc.__getitem__, tuple([[1, 2], [1, 2]]))
delete = salt.utils.alias_function(remove, 'delete') purge = salt.utils.alias_function(remove, 'purge')
assert_allclose(ecov.error_norm(prec_pred[k]), 0, atol=0.1)
clf = svm.NuSVC(nu=0.0) assert_raises(ValueError, clf.fit, X, Y)
result)
update_watch() notifier.check_events(timeout=None) notifier.read_events() notifier.process_events() notifier.stop()
v = v.tostring() return ExtType(0, zlib.compress(v))
if sparse_index is None: data, sparse_index = make_sparse(data, kind=kind, fill_value=fill_value) else: assert (len(data) == sparse_index.npoints)
touch(name, makedirs=makedirs) retry_res, retry_msg = _check_file(name) if not retry_res: return _error(ret, check_msg)
response = client.post(url, data=json.dumps(data), content_type=content_type) self.assertEqual(expected_status, response.status_code) return response
PAYMENT_REPORT_GENERATOR_GROUP = 'shoppingcart_report_access'
JOBLIB_SPAWNED_PROCESS = "__JOBLIB_SPAWNED_PARALLEL__"
obj = self.obj._meta.label
cachedir = self.cachedir[:-7] if self.cachedir is not None else None return (self.__class__, (cachedir, self.mmap_mode, self.compress, self._verbose))
__virtualname__ = 'debconf'
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
if field_name == 'children': continue
self.returners['{0}.save_load'.format(self.opts['master_job_cache'])](jid, job_load)
parent.insert(parent.index(next_include), incxml)
httpretty.register_uri( httpretty.GET, "http://localhost:4567/api/v1/comments/{id}".format(id=comment_id), body="", status=status_code )
sampling_updates = model.get_sampling_updates(layer_to_state, theano_rng) assert layer_to_state[model.visible_layer] in sampling_updates
self.assertEqual( {c.id for c in CourseOverview.get_all_courses(org='TEST_ORG_1')}, {c.id for c in org_courses[1]}, )
HIDDEN_SIZE = 1000 SALT_PEPPER_NOISE = 0.4 GAUSSIAN_NOISE = 0.5
rbf_transform = RBFSampler(gamma=gamma, n_components=1000, random_state=42) X_trans = rbf_transform.fit_transform(X) Y_trans = rbf_transform.transform(Y) kernel_approx = np.dot(X_trans, Y_trans.T)
if self.cache_cli: self.cache_cli.put_cache([load['id']])
response = self.client.get(self.url, content_type="application/json") self.assertHttpOK(response)
if cache: cleaned_results = json_safe(globals_dict) cache.set(key, (emsg, cleaned_results))
from ...search_indexes import CourseTeamIndexer
self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
return [('', [])]
html = module.get_problem_html()
marginalize_odd = (depth % 2) == 0
return all([ self.q(css='body.view-group-configurations').present, self.q(css='div.ui-loading.is-hidden').present ])
qs = Person.objects.prefetch_related('houses__rooms', 'primary_house__occupants') [list(p.primary_house.occupants.all()) for p in qs]
classifier.fit(X_train, Y_train)
raise AbstractMethodError(self)
procedure_args['geo_col'] = self._geocol_select(geo_field, field_name)
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
from pandas import Categorical, Series arr = Categorical(list('abc')) result = lib.infer_dtype(arr) self.assertEqual(result, 'categorical')
cert_type=client
if presort == 'auto' and issparse(X): presort = False elif presort == 'auto': presort = True
del __context__['pagerduty_util.resource_cache'][resource_name] return _query(method='POST', action=resource_name, data=data, profile=profile, subdomain=subdomain, api_key=api_key)
old_password_hash = user.password
if self.__called: self._reset() self.__called = False
from __future__ import absolute_import import os
exclude.extend(self.form._meta.exclude)
HAS_SVN = False try: import pysvn HAS_SVN = True CLIENT = pysvn.Client() except ImportError: pass
unlink = os.unlink
assert_copy(copy.levels, original.levels)
try: correctness = self.check_formula( correct_answer, given, samples ) except Exception: correctness = 'incorrect' if correctness == 'correct': hints_to_show.append(name)
tab_id = models.CharField(max_length=50) course_overview = models.ForeignKey(CourseOverview, db_index=True, related_name="tabs")
fill_error = re.compile("Incompatible type for fill_value")
return self.base_loader.load_template_source(template_name, template_dirs)
return dict(dic1.items() + dic2.items())
results.append(benchmark(SGDClassifier(alpha=.0001, n_iter=50, penalty=penalty)))
if _get_msupdate_status(): try: obj_sm.RemoveService('7971f918-a847-4430-9279-4a52d1efe18d') ret['msupdate'] = msupdate except Exception as error:
return re.split(r'\s+', out['stdout'])[1][:-1] == 'inode/blockdevice'
self.wait_for_field(field_id) self.wait_for_ajax() return self.q(css='.u-field-{} .u-field-value .u-field-value-readonly'.format(field_id)).text[0]
_, created = ed.books.get_or_create(name="Ed's Recipes", publisher=p) self.assertTrue(created)
dec = clf.decision_function(T) res = (dec > 0).astype(np.int) + 1 assert_array_equal(res, true_result)
CourseRerunState.objects.succeeded(course_key=destination_course_key)
if LooseVersion(tables.__version__) < '3.1.0': raise nose.SkipTest('tables version does not support fix for nan ' 'selection bug: GH 4858')
return cls.verification_valid_or_pending(user, earliest_allowed_date, queryset).exists()
iface_data['inet6'] = {} iface_data['inet6']['addrfam'] = 'inet6'
return "Oh yes!"
self.assertTrue(sr.name.startswith(sd['name']))
if dispatch == 'preview_formcalc': return self.preview_formcalc(get) return {}
model_def = ogrinspect(ogr_db, 'Measurement', layer_key=AllOGRFields._meta.db_table, decimal=['f_decimal'])
load_svmlight_file(.42)
authentication_classes = (authentication.SessionAuthentication,) permission_classes = (ApiKeyHeaderPermission,) queryset = User.objects.all().prefetch_related("preferences") serializer_class = UserSerializer paginate_by = 10 paginate_by_param = "page_size"
axes = ('b', 's', 0, 1, 'c') view_converter = StereoViewConverter(datum_shape, axes)
if missing_values == 0: n_zeros_axis = np.zeros(X.shape[not axis], dtype=int) else: n_zeros_axis = X.shape[axis] - np.diff(X.indptr)
if not hasattr(self, 'verbose_name'): self.verbose_name = self.label.title()
with self.assertRaises(ValueError): with transaction.atomic(using='default'): marty.edited.set([pro, dive])
self.assertEqual(formset[0].instance.profile_id, 1)
except: with open(path, 'rb') as fh: return pc.load(fh, encoding=encoding, compat=True)
frame = self.frame.copy() expected = self.frame.copy()
args = ['base_command', 'testlabel', '--settings=alternate_settings', '--option_a=x'] self._test(args)
if not expected_url.startswith("/"): expected_url = "/" + expected_url self.assertEquals(expected_url, actual_url)
for i in range(self.n_layers_ - 1): activations[i + 1] = safe_sparse_dot(activations[i], self.coefs_[i]) activations[i + 1] += self.intercepts_[i]
module = __name__.replace('.video_module', '', 2)
return modulestore().db_connection.get_structure( course.location.as_object_id(course.location.version_guid) )
exc = drf_exceptions.AuthenticationFailed({u'error_code': -1}) self.assertEqual(exc.detail, u"{u'error_code': -1}")
s_orig = Series([1, 2, 3]) df_orig = DataFrame(np.random.randint(0, 5, size=10).reshape(-1, 5))
test_options.pop(0) if len(test_options) <= 1: break
current_info = info(name) if not current_info: raise CommandExecutionError('User \'{0}\' does not exist'.format(name))
import salt.utils try: import wmi except ImportError: pass
for certificate in certificates: is_active = certificate.get('is_active', False) break
student = UserFactory.create() CourseEnrollmentFactory.create(user=student, course_id=self.course.id) self.client.login(username=student.username, password="test")
if parts[0].endswith('sh:'): out = ' '.join(parts[1:]) ret['comment'] = out
shutil.copyfile(path_in, path_test)
dummy1 = _("This is a translatable string.")
return "simple_two_params - Expected result: %s, %s" % (one, two)
self.wait_for_field('image') return self.q(css='.u-field-upload-button').visible
return _get_next_prev(self, date, is_previous=False, period='year')
from __future__ import absolute_import
previous_offset = None
_metadata = DataFrame._metadata _finalize = DataFrame.__finalize__
import logging import json
self.indent(1) self.xml.endElement("object")
gbq.to_gbq(df, destination_table, PROJECT_ID, if_exists='append')
for c in range(1, n_clusters): rand_vals = random_state.random_sample(n_local_trials) * current_pot candidate_ids = np.searchsorted(closest_dist_sq.cumsum(), rand_vals)
'django.middleware.locale.LocaleMiddleware',
ele = (ele * 2 * numpy.pi) / 360. azi = (azi * 2 * numpy.pi) / 360.
dlogz = log_mean(log_ais_w)
X = X_digits_binary[:100] y = y_digits_binary[:100]
if not isinstance(library_key, LibraryLocator): library_key = LibraryLocator.from_string(library_key) try: return self.store.get_library( library_key, remove_version=False, remove_branch=False, head_validation=False ) except ItemNotFoundError: return None
from salt.modules import firewalld
self.assertFalse(linode._validate_name('fooàààààbar'))
from_address = theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL) to_address = user.email
OAuth2AuthenticationAllowInactiveUser, SessionAuthenticationAllowInactiveUser,
try: import pycontrol.pycontrol as f5 HAS_PYCONTROL = True except ImportError: HAS_PYCONTROL = False
self.browser.refresh() return self.components
Ensure myasg is deleted: boto_asg.absent: - name: myasg - force: True
return assert_numpy_array_equal(seq, np.sort(np.array(seq)))
sample_weight = self._validate_sample_weight(sample_weight, n_samples)
_ZFILE_PREFIX = asbytes('ZF') _MAX_LEN = len(hex_str(2 ** 64))
_eps = np.finfo('f4').eps
test_invalid_token("AAAAAAAAAAA=", "initialization_vector")
about = branding_api.get_about_url() if about != branding_api.EMPTY_URL: data.update({'company_about_url': about})
DEBUG = True
mode = CourseMode(mode_slug=slug) self.assertEqual(self.course.get_mode_display_name(mode), expected_display_name)
'use_required_attribute': False,
return models.Client.objects.create( name=name, user=user, client_id=client_id, redirect_uri=redirect_uri, client_type=constants.CONFIDENTIAL, )
class_prior = np.array([0.75, 0.25]) assert_array_almost_equal(np.exp(clf.class_log_prior_), class_prior)
if kind != 'iloc': key = self._maybe_cast_indexer(key) return (super(Int64Index, self) ._convert_scalar_indexer(key, kind=kind))
param += self.mlp.theano_rng.normal(size=param.shape, avg=0., std=self._std_dev, dtype=param.dtype) return param
pass
ips = sorted(set(ips)) nets = sorted(set(nets))
return settings.FEATURES.get(cls.ENABLE_SEARCH_KEY, False)
depth = len(b_list)
unique_student_identifier = strip_if_string(unique_student_identifier) if "@" in unique_student_identifier: student = User.objects.get(email=unique_student_identifier) else: student = User.objects.get(username=unique_student_identifier) return student
self.teams_page.click_specific_topic("Example Topic") self.teams_page.verify_topic_team_count(1)
if perm != 'global': debug("Deny: invalid permission '%s'", perm) return ACCESS_DENIED return ACCESS_GRANTED if GlobalStaff().has_user(user) else ACCESS_DENIED
try: val = self.verify_geom(feat.geom, model_field) except GDALException: raise LayerMapError('Could not retrieve geometry from feature.')
output = {} inds = [] for i, col in enumerate(obj): try: output[col] = self[col].transform(wrapper) inds.append(i) except Exception: pass
local_dict = DeepChainMap()
assert_raises(ValueError, unique_labels)
self.get_selector('#add-exception').click()
log = logging.getLogger(__name__)
self.submit_question_answer('H1P1', {'2_1': 'Correct', '2_2': 'Correct'}) self.check_grade_percent(0.25)
values = Series([u('fooBAD__barBAD'), NA])
if style is not None: args = (x, y, style) else: args = (x, y) return ax.plot(*args, **kwds)
return self.connection.mysql_version >= (5, 6, 4) and Database.version_info >= (1, 2, 5)
self._validate_estimator()
self.assertEqual(actual_padding, expected_padding)
response['X-XRDS-Location'] = get_xrds_url('identity', request) return response
rbm.learning_rate = 0.06 rbm.n_iter = 20 rbm.n_components = 100 logistic.C = 6000.0
exc_info_on_loglevel=logging.DEBUG
try: return machine.launchVMProcess(session, "", "") except Exception as e: log.debug(e.message, exc_info=True) return None
line_number = self.index_to_line_number(index) return self.line_number_to_start_index(line_number)
existing_nodes = [name_node.value for name_node, value_node in node.value] mergeable_items = [x for x in merge if x[0].value not in existing_nodes]
user2 = UserFactory() add_instructor(rerun_course_key, self.user, user2)
self.assert_redirect_to_dashboard_looks_correct(actions.do_disconnect( request.backend, request.user, None, redirect_field_name=auth.REDIRECT_FIELD_NAME))
StudentViewTransformer('video').transform(usage_info=None, block_structure=self.block_structure)
if HAS_ZMQ: try: zmq_version_info = zmq.zmq_version_info() except AttributeError: zmq_version_info = tuple(
class MyMultiWidget(MultiWidget): def __init__(self, attrs=None): widgets = [MyWidget1, MyWidget2, MyWidget3] super(MyMultiWidget, self).__init__(widgets, attrs)
import salt.utils
course_id = CourseKeyField(max_length=255, db_index=True)
from salt.modules import postgres from salt.exceptions import SaltInvocationError
coeffs = np.delete(np.copy(amplitudes), 0) coeffs.resize(int((coeffs.size + 1) / 2), 2)
memcacheoptions = (host, port)
return self.astype('object')
data['changed'] = salt.fileserver.diff_mtime_map(old_mtime_map, new_mtime_map)
site_configuration_history = SiteConfigurationHistory.objects.filter( site=site_configuration.site, ).all()
return get_internal_wsgi_application()
movie_reviews_data_folder = sys.argv[1] dataset = load_files(movie_reviews_data_folder, shuffle=False) print("n_samples: %d" % len(dataset.data))
from openedx.core.djangoapps.credit import api
df = panel.to_frame() df['category'] = df['str'].astype('category')
self.assertEqual(cl.queryset.count(), 1)
from __future__ import division
return self.q(css='button.start-timed-exam[data-start-immediately="false"]').is_present()
return __virtualname__
clf = svm.SVC(kernel='linear') clf.fit(X, y)
from instructor.views.api import save_registration_code
mlb = MultiLabelBinarizer(classes=[1, 3, 2]) assert_array_equal(mlb.fit_transform(inp), indicator_mat) assert_array_equal(mlb.classes_, [1, 3, 2])
self.pid = None self.stdin = None self.stdout = None self.stderr = None
input_dict = {'1_2_1': 'California'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
from __future__ import unicode_literals
def test_to_excel_multiindex_cols(self): _skip_if_no_xlrd()
stacked = result.stack() assert_series_equal(s, stacked.reindex(s.index))
df.set_index(index)
return {"result": "inclusion_explicit_no_context - Expected result: %s" % arg}
return submit_reset_problem_attempts_for_all_students(self.create_task_request(instructor), location)
raise NotImplementedError()
self.dashboard_page.visit() self.assertTrue(self.dashboard_page.has_course( org=self.course_org, number=self.course_number, run=self.course_run ))
else:
from __future__ import absolute_import import pprint
os.chdir(self.repo) subprocess.check_call(['git', 'init', '--quiet', self.repo])
denied_banner = any(item.display for item in reverifications["denied"])
if not all([com.is_integer(x) for x in [rstart, rstop, rstep]]): result = result.astype('float64')
self.assertEqual('DJANGO_LIVE_TEST_SERVER_ADDRESS' in os.environ, address_predefined) self.assertEqual(os.environ.get('DJANGO_LIVE_TEST_SERVER_ADDRESS'), old_address)
set_course_cohort_settings(course_key=self.course.id, is_cohorted=False) check_cohorted(False)
ret['comment'] = 'Cluster {0}/{1} is not present, so it cannot ' \ 'be removed'.format(version, name) return ret
def setUp(self): super(TestRenderXBlockSelfPaced, self).setUp() SelfPacedConfiguration(enabled=True).save() def course_options(self): return {'self_paced': True}
request = self.factory.get('/login') request.META['HTTP_REFERER'] = referer return request
default_login = datetime(2000, 1, 1) if settings.USE_TZ: default_login = default_login.replace(tzinfo=timezone.utc) user.last_login = default_login user.save()
if unpack_ipv4: ipv4_unpacked = _unpack_ipv4(ip_str)
x = np.arange(len(channel.batch_record))
return Fragment(self.get_html())
new_class._meta.parents.update(base_parents)
request = self.rf.options('/') view = SimpleView.as_view() response = view(request) self._assert_allows(response, 'GET', 'HEAD')
fignum = 1
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
if power: vb_start_vm(vm_name, timeout=boot_timeout) ips = vb_wait_for_network_address(wait_for_ip_timeout, machine_name=vm_name)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, course_id)) self.assertTrue(self.user.roles.filter(name="Student", course_id=course_id))
self.setup_mongo_course() result_fragment = self.module.render(STUDENT_VIEW, context=self.default_context) self.assertIn('View Unit in Studio', result_fragment.content)
store = self._get_modulestore_for_courselike(usage_key.course_key) return store.has_item(usage_key, **kwargs)
'ENABLE_CONTENT_LIBRARIES': True,
s = cPickle.dumps(obj, get_pickle_protocol()) return cPickle.loads(s)
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False) actual = get_programs_credentials(self.user, category='dummy_category') expected = self.expected_credentials_display_data()
for k, v in compat.iteritems(meta_vals): if meta_prefix is not None: k = meta_prefix + k
def __init__( self ): super(Empty,self).__init__() self.name = "Empty" self.mayReturnEmpty = True self.mayIndexError = False
hint_index = int(data['hint_index']) return self.get_demand_hint(hint_index)
class UnclosableBytesIO(BytesIO): def close(self): pass
resource = {"id": self.non_existing_resource_id, 'reason': ''} self.check_event_response_by_http_status(test_case, resource, 400)
self.q(css=self.NEXT_PAGE_BUTTON_CSS).click() self.wait_for_ajax()
self.app = app
X_mm, y_mm, y_ml_mm, ESTIMATORS = None, None, None, None shutil.rmtree(TEMP_FOLDER)
cur.executemany(cmd, newitems)
from __future__ import absolute_import import os import random import string
)
import salt.ext.six as six
conflicts = loader.detect_conflicts()
from salt.modules import dnsmasq
W_irange = 2 / numpy.sqrt(nvis * nhid)
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False).visit()
self.assert_logged_in_cookie_redirect(actions.do_complete(
'openedx.core.djangoapps.user_api', 'django_openid_auth',
pnt.tuple = set_tup1 self.assertEqual(set_tup1, pnt.tuple) pnt.coords = set_tup2 self.assertEqual(set_tup2, pnt.coords)
return self.best_estimator_.decision_function(X)
return self.q(css='.course-number-override')
CourseModeFactory.create( course_id=self.course_key, mode_display_name="Honor Not Expired", mode_slug="honor_not_expired", expiration_datetime=future )
ttl = force_text(ttl)
self.assertEqual( get_storage_class('django.core.files.storage.FileSystemStorage'), FileSystemStorage)
LOCATION='createcachetable_dry_run_mode'
self.testing_course.enrollment_start = self.tomorrow self.testing_course.enrollment_end = self.nextday self.testing_course = self.update_course(self.testing_course, self.user.id)
try: WindowsError except NameError: WindowsError = None
import salt.utils import salt.utils.locales
Z = Z.reshape(xx.shape) ax.contourf(xx, yy, Z, cmap=cm, alpha=.8)
self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN))
django_settings.SOCIAL_AUTH_STRATEGY = 'third_party_auth.strategy.ConfigurationModelStrategy'
master_doc = 'index'
if (self._ip >> 32) != 0xFFFF: return None return IPv4Address(self._ip & 0xFFFFFFFF)
self._assert_user_name(self.FULL_NAME)
tm.assert_frame_equal(np.round(df, decimals), expected_rounded)
path = tm.get_data_path('mindex_073.pickle') obj = pd.read_pickle(path)
service = _get_service(name) label = service['plist']['Label']
coefs = coefs[np.newaxis, :, :] y_offset = np.atleast_1d(y_offset) y_test = y_test[:, np.newaxis]
exc_info_on_loglevel=logging.DEBUG
X[0, 0] = 0 X[2, 1] = 0 X[4, 3] = 0 X_lil = sp.lil_matrix(X) X_lil[1, 0] = 0 X[1, 0] = 0
if not (settings.FEATURES.get("ENABLE_CREDIT_ELIGIBILITY", False) and is_credit_course(course_key)): return None
start = datetime(2011, 1, 1, 5, 3, 40) end = datetime(2011, 1, 1, 8, 9, 40)
layer_to_chains = model.sampling_procedure.sample( layer_to_chains, self.theano_rng, layer_to_clamp=layer_to_clamp, num_steps=1 )
for X, y in classification_datasets: X_train = X[:150] y_train = y[:150] X_test = X[150:]
__salt__['file.remove'](temp_dir)
return "user_partitions"
self.assertContains(response, k, status_code=500) self.assertContains(response, v, status_code=500)
result = df1.loc[(slice(None), slice('B2')), :] expected = df1 assert_frame_equal(result, expected)
with self.assertRaises(TypeError): wkt_r.read(1) with self.assertRaises(TypeError): wkt_r.read(memoryview(b'foo'))
return
self._verify_and_return_staff_page().set_staff_view_mode('Student') self._verify_components_visible(expected_components)
try: import zlib
pass
result_key = f.generate_filename(None, key) self.assertEqual(result_key, expected_key)
if 'run_on_start' in data: if data['run_on_start']: run = True else: self.intervals[job] = int(time.time()) else: run = True
if request.user.is_authenticated() and survey.utils.must_answer_survey(course, user): return redirect(reverse('course_survey', args=[unicode(course.id)]))
result.update(_sysfs_parse(_bcpath(dev), base_attr, stats, config, internals)) result.update(_sysfs_parse(_fspath(), base_attr, stats, config, internals))
rng = np.random.RandomState(0) X = generate_clustered_data(n_clusters=3, n_features=3, n_samples_per_cluster=10)
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
tx_cities = ['Downtown Houston', 'Southside Place'] au_cities = ['Mittagong', 'Shellharbour', 'Thirroul', 'Wollongong']
default=models.IntegerField,
return True
message = "Error while calling " + str(type(self)) + ".expr" reraise_as(TypeError(message))
self.store.publish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item))
return self.best_estimator_.decision_function(X)
businesshours = self._get_business_hours_by_sec() return self._onOffset(dt, businesshours)
return self.as_matrix()
speed_selector = self.get_element_selector(CSS_CLASS_NAMES['video_speed']) return self.q(css=speed_selector).text[0]
for element in t.nodes[:-1]: self._dispatch(element) self._write(", ")
if esxi_hosts: if not isinstance(esxi_hosts, list): raise CommandExecutionError('\'esxi_hosts\' must be a list.')
assert_no_warnings(metric, y_true_bin, y_pred_bin)
return stdout
if all_options_selected and not has_option: all_options_selected = False return all_options_selected
split = 'split' mongo = 'mongo'
return self.get(key, default, version=version)
import os import re import sys import uuid import string
raise NotImplementedError()
norm_phi = np.dot(exp_doc_topic_d, exp_topic_word_d) + EPS
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../..')
self.assertIsNotNone(current_last_activity)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'opennebula', vm_['profile']) is False: return False
setattr(instance, self.cache_name, value)
if not __salt__['user.info'](user): user = __salt__['user.current']() if not user: user = 'SYSTEM'
for student in students[:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
self.url = reverse_course_url('tabs_handler', self.course.id)
FEATURES['ENABLE_DASHBOARD_SEARCH'] = True
if isinstance(address, bytes): self._check_packed_address(address, 16) self._ip = _int_from_bytes(address, 'big') return
for field in ('client_type', 'client_secret', 'client_id', 'authorization_grant_type'): form.fields.pop(field)
super(DjangoBackend, self).__init__(**options) self.name = name
with self.assertRaisesMessage(TemplateSyntaxError, 'Empty block tag on line 1'): self.engine.get_template('filter-syntax08')
original_problem = module.lcp
import logging import codecs try: import sqlite3 HAS_SQLITE3 = True except ImportError: HAS_SQLITE3 = False
self.deferred_loading = (set(), True)
cache_key = u"{}".format(course.id)
return auth.user_has_role(user, CourseStaffRole(CourseKey.from_string(course_id)))
self.assertTrue(self.video.downloaded_transcript_contains_text('srt', '00:00:00,260'))
ranks = np.ravel(ranks)
return comdat['stderr']
if field_errors: raise AccountValidationError(field_errors)
Yt /= np.sqrt((Yt ** 2).sum())
return len(tsql_query("SELECT database_id FROM sys.databases WHERE NAME='{0}'".format(database_name), **kwargs)) == 1
ret = self.run_state('ssh_known_hosts.absent', **kwargs) self.assertSaltStateChangesEqual(ret, {})
input_dict = {'1_2_1': '0', '1_2_2': '0'} correct_map = problem.grade_answers(input_dict)
result = df.drop_duplicates('A') expected = df.ix[[0, 2, 3]] tm.assert_frame_equal(result, expected)
results.append(['', label, problem_name, count_grade, student_count_percent, percent])
if salt.utils.is_proxy() and 'proxy' in __opts__: return True return (False, 'The marathon execution module cannot be loaded: this only works in proxy minions.')
pass
output = self.engine.render_to_string('inheritance22') self.assertEqual(output, '1&a3_')
value = value.decode(charset)
if not hasattr(self, 'needs_reformat'): self.needs_reformat = self.needs_reshape del self.needs_reshape
self.panel4d['foo'] = 'bar'
assert_almost_equal(np.array([1.1, 2.000001]), np.array([1.1, 2.0]))
with connection.cursor() as cursor: self.assertIsInstance(cursor, CursorWrapper) self.assertTrue(cursor.closed)
apps = Apps() create_default_site(self.app_config, verbosity=0, apps=apps) self.assertFalse(Site.objects.exists())
rgr = MultiOutputRegressor(GradientBoostingRegressor(random_state=0)) rgr.fit(X, y, w)
res = dfobj.copy() res.replace(r'\s*\.\s*', nan, regex=True, inplace=True) assert_frame_equal(dfobj, res.fillna('.'))
self._click_button('settings_tab')
ops.add_flex_arithmetic_methods(SparseDataFrame, use_numexpr=False, **ops.frame_flex_funcs) ops.add_special_arithmetic_methods(SparseDataFrame, use_numexpr=False, **ops.frame_special_funcs)
return option_together
self.run_state('ssh_known_hosts.present', **kwargs)
mock_create_subtask_fcn_args = mock_create_subtask_fcn.call_args_list self.assertEqual(len(mock_create_subtask_fcn_args[0][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[1][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[2][0][0]), 5)
from notification_prefs.views import enable_notifications
endorsement = obj.get("endorsement") if endorsement: return self._get_user_label(int(endorsement["user_id"])) else: return None
from __future__ import unicode_literals
spmatrix = spmatrix.astype(dtype)
def __init__(self, access_key, secret_key): pass def get_bucket(self, bucket_name): return MockBucket(bucket_name)
PER_REMOTE_ONLY = ('name',) SYMLINK_RECURSE_DEPTH = 100
order = np.lexsort((y, x)) x, y = x[order], y[order]
child_position = None if is_entrance_exams_enabled(): if category == 'chapter' and is_entrance_exam: fields['is_entrance_exam'] = is_entrance_exam
if ret.get(esxi_host) is None: ret.update({esxi_host: {}}) ret[esxi_host].update(response)
nonce = '0123456789012345678901234567890123456789012345678901234567890123' self.assertTrue(SignatureValidator(self.lti_consumer).check_nonce(nonce))
courses = import_course_from_xml( self.store, self.user.id, TEST_DATA_DIR, ['conditional_and_poll'], static_content_store=content_store, create_if_not_present=True )
if ret['changes']: ret = {'changes': {}, 'comment': '', 'name': name, 'result': True}
contentstore().save(content) del_cached_content(content.location)
from __future__ import absolute_import
settings_button = world.browser.find_by_css('.settings-button') if len(settings_button) > 0: world.css_click('.settings-button')
self.assert_grade(problem, 'choice_foil_4', 'incorrect') self.assert_grade(problem, 'not_a_choice', 'incorrect')
elif ((compat.PY3 and dtype not in [_INT64_DTYPE, _TD_DTYPE]) or (not compat.PY3 and dtype != _TD_DTYPE)):
output = self.engine.render_to_string('inheritance09') self.assertEqual(output, '1&3_')
idx = TimedeltaIndex(['2H', '4H', '6H', '8H', '10H'], freq='2H', name='x')
field_data = LicenseMixin.parse_license_from_xml(field_data, xml)
is_enrolled = CourseEnrollment.is_enrolled(self.user, self.course.id) self.assertFalse(is_enrolled)
log.error('Lane Router Received message without share: {0}'.format(msg)) return
if not allow_overwrite and os.access(new_file_name, os.F_OK): raise IOError("Destination file %s exists and allow_overwrite is False" % new_file_name)
sio = StringIO() pprint.pprint(obj, stream=sio) return sio.getvalue()
self.assertNumQueries(2, a.delete) self.assertFalse(User.objects.exists()) self.assertFalse(Avatar.objects.exists())
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.25, random_state=42)
keydata = { 'minion_id': minion_id, 'pub': pub, 'verify': verify}
self.workd = _aligned_zeros(3 * n, self.tp) self.workl = _aligned_zeros(self.ncv * (self.ncv + 8), self.tp)
en_message = "Hello world!" es_message = "Hola mundo!"
class CityBase(NamedModel): population = models.IntegerField() density = models.DecimalField(max_digits=7, decimal_places=1) point = models.PointField()
if expectedrows is None: expectedrows = max(self.nrows_expected, 10000)
keep_idx = numpy.arange(not marginalize_odd, depth, 2) for i in keep_idx: fe -= T.dot(samples[i], b_list[i]) * beta
config = {} candidates = Microsite.objects.all() for microsite in candidates: values = microsite.values config[microsite.key] = values return config
raise TemplateSyntaxError( "'blocktrans' is unable to format string returned by gettext: %r using %r" % (result, data) )
if is_nested_renamer: result = list(_agg(arg, _agg_1dim).values())
result = f.clean('13.30') self.assertEqual(result, time(13, 30, 0))
test = read_csv(path, index_col=0)
lib_key = LibraryLocator("TestOrg", "TestLib") result = self.draft_store.has_course(lib_key) assert_false(result)
EMAIL_SUBJECT_PREFIX = '[Django] '
self.backend = backend self.server = server return 'server disabled'
required_boto3_version = '1.2.1'
from __future__ import absolute_import
if HAS_REQUESTS is False: parser.error( 'The python \'requests\' library needs to be installed' )
if pkginfo[version_num].get('use_scheduler', False):
if display_name is not None: metadata['display_name'] = display_name
for field_index, field_desc in enumerate(results.split(',')): field_desc = field_desc.strip() if field_desc.startswith("UNIQUE"): continue
class Circle1(models.Model): name = models.CharField(max_length=255)
left = self.rng[:10] right = self.rng[5:10]
__zypper__.xml.call('ar', url, repo)
instructor_role = CourseInstructorRole(course_id)
self.assertEqual(cart.status, 'purchased')
func.restype = c_void_p func.errcheck = check_geom
self._auto_auth(self.USERNAME, self.EMAIL, False)
return view_func(request, *args, **kwargs)
theme_root = settings.ENV_ROOT / "themes" / settings.THEME_NAME
request = self.factory.get(self.path, {'foo': 'bar', 'other': 'true'}) request._cache_update_cache = True
for processor in get_template_context_processors(): context.update(processor(request))
DEPRECATED_ADVANCED_COMPONENT_TYPES = []
COMMENT_WITH_NL = tokenize.generate_tokens(['#\n'].pop).send(None)[1] == '#\n'
result = sql.read_sql_table('test_datetime', self.conn) tm.assert_frame_equal(result, df)
return render_body(obj["body"])
if hasattr(clusterer, "random_state"): clusterer.set_params(random_state=0)
for block_data in block_list: (block_type, block_id) = block_data self.assertOLXMissing(block_type, block_id, draft=True) self.assertOLXMissing(block_type, block_id, draft=False)
X = iris.data[:, pair] y = iris.target
os.close(stdout_parent_fd) os.close(stderr_parent_fd) salt.utils.reinit_crypto()
problem_child = self.store.create_child(self.user_id, chapter_location, 'problem', 'Problem_Child') self.assertFalse(self.store.has_published_version(problem_child))
message = ( "Calling modelform_factory without defining 'fields' or 'exclude' " "explicitly is prohibited." ) with self.assertRaisesMessage(ImproperlyConfigured, message): modelform_factory(Person)
for key, val in params.iteritems(): self.assertEqual(self.server.config.get(key), val)
FOOD_CONTAINER = 3 FRUIT = 4 FURNITURE = 6 INSECTS = 7 LARGE_OMNIVORES_HERBIVORES = 11 MEDIUM_MAMMAL = 12
from __future__ import unicode_literals
result = Series([np.timedelta64('NaT')]).sum() self.assertTrue(result is pd.NaT)
CountryAccessRule.objects.create( restricted_course=self.restricted_course, country=self.countries['US'], rule_type=CountryAccessRule.WHITELIST_RULE )
orig_names = list(columns) self.num_original_columns = len(columns) return line, orig_names, columns
if "tags" in kwargs: kwargs["tags"] = _clean_tags(kwargs["tags"]) dog_stats_api.histogram(metric_name, *args, **kwargs)
raise KeyError("Oops! Looks like you wrote some bad code.")
from __future__ import unicode_literals
from .overrides import get_override_for_ccx return get_override_for_ccx(self, self.course, 'start')
td = Timedelta('1 days, 10:11:12.012345678') self.assertTrue(td != td.to_pytimedelta())
return self.make_call(reverse('team_membership_list'), expected_status, 'post', data, **kwargs)
assert_raises(ValueError, lshf.radius_neighbors, X[0])
from __future__ import absolute_import, print_function import errno import logging import os
self.user.is_staff = True self.user.save() video_outline = self.api_response().data self.assertEqual(len(video_outline), 2)
time.sleep(2)
module = CapaFactory.create(rerandomize=rerandomize, done=True)
if not cached_file: log.error('Unable to cache {0}'.format(cache_file)) ret[pkg_name] = { 'failed to cache cache_file': cache_file } continue
'renderer': str,
self._verify_split_test_import( 'split_test_copy', 'split_test_module', 'split1', {"0": 'sample_0', "2": 'sample_2'}, )
self.check_html( self.widget, 'is_cool', 'foo', html='<input checked="checked" type="checkbox" name="is_cool" value="foo" />', )
self.assertEqual(start_ts, p.to_timestamp('3D', how=a))
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 2) self.assertEqual(user_partititons[0].name, 'Name 0')
ser = Series([0.1, 0.2], index=[1, 2])
context['certificate_date_issued_title'] = _("Issued On:")
available_version = salt.utils.alias_function(latest_version, 'available_version')
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
LOOKUP.clear()
if not api_url: self.api_url = getattr(settings, 'GOOGLE_MAPS_URL', GOOGLE_MAPS_URL) % self.version else: self.api_url = api_url
response = self.client.get('/redirect_view/', follow=True) self.assertEqual(response.resolver_match.url_name, 'get_view')
AutoAuthPage( self.browser, username=username, email=email, password=password ).visit()
return ''.join(np.random.choice(RANDU_CHARS, nchars))
for i in reversed(sorted(to_remove)): data.pop(i) if not self._implicit_index: columns.pop(i)
for group_name in groups or set():
self.assertQuerysetEqual( Article.objects.all().reverse()[:2], [ "Article 1", "Article 3", ], attrgetter("headline") )
self.uuid = uuid return self
summary = '[' + summary[len(space2):]
to_concat = [convert_to_pydatetime(x, axis) for x in to_concat] return np.concatenate(to_concat, axis=axis)
result = self.frame.iloc[:, 0] self.assertTrue(isinstance(result, SparseSeries)) tm.assert_sp_series_equal(result, self.frame['A'])
raise ItemNotFoundError(course_id)
cli_config = saltfile_config[self.get_prog_name()]
second_config.edit() second_config.name = "Updated Second Content Group" self.assertEqual(second_config.get_text('.action-primary'), "Save") second_config.save()
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
if cpy_error:
result = df.ix[:, :np.int32(3)] expected = df.reindex(columns=df.columns[:3]) assert_frame_equal(result, expected)
url( r'^user/(?P<user_id>[^/]*)/course/{course_id}'.format(course_id=settings.COURSE_ID_PATTERN), views.render_html_view, name='html_view' ),
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../../')
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
import logging import json import os try:
response = self._auto_auth({ 'username': 'test', 'redirect': True, 'staff': 'true', }, status_code=302)
args.date = parse_datestring(args.date).date()
return rows
return len(get_event_differences(expected_event, actual_event, tolerate=tolerate)) == 0
self.q(css='.prompt.error .action-primary').click()
grouped = self.ts.groupby(self.ts * np.nan) self.assertEqual(self.ts.dtype, np.float64)
assert_frame_equal(joined, expected.ix[:, joined.columns])
self.assertEqual( get_object_or_404(a1.article_set, title__contains="Run"), article )
opts['ext_pillar'] = [x for x in opts['ext_pillar'] if 's3' not in x]
raise NotImplementedError()
if self._annotation is not _empty: formatted = '{0}:{1}'.format(formatted, formatannotation(self._annotation))
with open(file_path, "w") as file_handle: with self._log_execution_time(): self._write_email_opt_in_prefs(file_handle, org_list, courses)
self._enable_cohorting() self._create_verified_cohort() self.assertFalse(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(self.course.id)) self._verify_no_automatic_cohorting() self.assertFalse(error_logger.called)
df = DataFrame([[1, 2], [3, 4]], columns=[u'\xe9', u'b']) df.to_sql('test_unicode', self.conn, index=False)
for key, value in key_value_map.iteritems(): index = self._get_index_of(key) type_in_codemirror(self, index, value) self.save()
output_format.append(guess)
self.assertEqual(2, ls_orig.coord_dim) self.assertAlmostEqual(ls_trans.x[0], ls_orig.x[0], prec) self.assertAlmostEqual(ls_trans.y[0], ls_orig.y[0], prec)
index = MultiIndex(levels=levels, labels=labels) self.assertFalse(index.has_duplicates)
return force_text(urlsafe_base64_encode(force_bytes(base36_to_int(uidb36 or self.uidb36))))
td = Timedelta(min_td.value - 1, 'ns') self.assertIsInstance(td, pd.tslib.NaTType)
password: letmein apikey: 901d3f579h23c8v73q9
INNER = 'INNER JOIN' LOUTER = 'LEFT OUTER JOIN'
self.assertNotIn('brain.left_hemisphere', funcs)
from __future__ import unicode_literals
self.install_results = None
random_state = np.random.RandomState(0) n_samples, n_features = X.shape X = np.c_[X, random_state.randn(n_samples, 200 * n_features)]
self.assertContains(resp, 'Robot_Course_Outside_Microsite')
for l in [slice(0.0, 1), slice(0, 1.0), slice(0.0, 1.0)]:
import os import logging
ItemFactory.create( parent=parent, category='discussion', display_name='scheduled', start=self.future, )
Ensure myelb ELB exists: boto_elb.present: - name: myelb - region: us-east-1 - profile: keyid: GKTADJGHEIQSXMKKRBJ08H key: askdjghsdfjkghWupUjasdflkdfklgjsdfjajkghs
import salt.utils
ForestRegressor = FOREST_REGRESSORS[name]
return None
self.assertIn(self.student_name, self.certificates_section.last_certificate_invalidation.text) self.assertIn(notes, self.certificates_section.last_certificate_invalidation.text)
response = self.searcher.search(field_dictionary={"course": self.course_id}) self.assertEqual(response["total"], expected_count)
TRACKING_IGNORE_URL_PATTERNS = [r'^/event', r'^/login', r'^/heartbeat', r'^/segmentio/event', r'^/performance']
ret['result'] = False ret['comment'] = "Can't determine AllocationId for address {0}.".format(ip) return ret
from django.db.backends.oracle.base import convert_unicode
with self.assertRaises(Restaurant.DoesNotExist): place.restaurant
self.kwargs['os_auth_url'] = auth_url
with self.assertRaises(GeoIPException): cntry_g.city('google.com') with self.assertRaises(GeoIPException): cntry_g.coords('yahoo.com')
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, mock_open, patch, NO_MOCK, NO_MOCK_REASON )
'rss_proxy',
self.assertQuerysetEqual( Director.objects.all(), ["<Director: Director object>"] )
cache_timeout = 300 string_field = models.TextField() int_field = models.IntegerField(default=10)
from salt.modules import nftables import salt.utils from salt.exceptions import CommandExecutionError
STUDIO_EDIT_ROLES = 8 STUDIO_VIEW_USERS = 4 STUDIO_EDIT_CONTENT = 2 STUDIO_VIEW_CONTENT = 1
return super(DraftVersioningModuleStore, self)._find_course_assets( self._map_revision_to_branch(course_key) )
import logging
return Series(values, index=_get_index(), name=self.name)
import salt.utils.dictupdate as dictupdate
subdict_str = _select_block(dict_str[pos:], '{', '}') value = _parse_dict_recursive(subdict_str) pos_tmp = pos + len(subdict_str)
DATE_FORMAT = 'd/m/Y' TIME_FORMAT = 'P' DATETIME_FORMAT = 'd/m/Y P' YEAR_MONTH_FORMAT = 'F Y' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'd/m/Y' SHORT_DATETIME_FORMAT = 'd/m/Y P'
response_dict = self.put_handler(self.course, expected_response_code=400) self.assertEqual("Cohort name must be specified.", response_dict.get("error"))
field, field_list_filter_class = list_filter
module = CapaFactory.create(attempts=1)
if not self._is_masquerading_as_student(): raise Http404('No {block_type} found with name {url_name}'.format( block_type=block_type, url_name=url_name, ))
context = { 'reorderable_items': set(), 'read_only': True } html = get_preview_fragment(request, html, context).content
path %= { 'minion_id': minion_id, 'role': role }
ans = False
r_time = 0
url_path = embargo_api.message_url_path(self.course.id, access_point)
if self._connecting_future.done(): self._connecting_future = self.connect() yield self._connecting_future
self.coach = UserFactory.create() self.mstore = modulestore()
log.warning('Failed to retrieve CourseOverview for [%s]. Using empty course name.', course_id) return None
s3_key = self._generate_s3_key("photo_id") s3_key.set_contents_from_string(encrypt_and_encode(img_data, aes_key))
'grains_refresh_every': int,
with self.assertRaisesMessage(TemplateSyntaxError, 'Empty variable tag on line 1'): self.engine.get_template('basic-syntax08')
dive.save() self.assertEqual(review1._state.db, 'default') self.assertEqual(dive._state.db, 'default')
Number.objects.filter(pk=self.n.pk).update(integer=640 / F('integer'), float=42.7 / F('float'))
output = self.engine.render_to_string('inheritance11') self.assertEqual(output, '1234')
if (hasattr(lvalues, 'values') and not isinstance(lvalues, pd.DatetimeIndex)): lvalues = lvalues.values
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010 13:30:05')
return self._beta_raw / self._std_err_raw
self.reload_course() new_tab = CourseTabList.get_tab_by_type(self.course.tabs, tab_type) self.assertEqual(new_tab.is_hidden, new_is_hidden_setting)
retained_files |= get_first_n_at_depth(files_by_y_week_dow, first_of_week_depth, keep_count + 1)
if mysql: self.assertIsNone(city.num_geom) else: self.assertEqual(1, city.num_geom)
world.css_click('input[name="calculate-grades-csv"]')
blend_arr = copy(patch_arr) blend_arr[mask_arr] = frgd_arr[mask_arr]
from salt.utils import configcomparer
image_path = "{0}/ext2_saved".format(mountpoint) orig_fstype = ret['before']['type']
def __init__(self, user=None, course_id=None): self.user = user self.course_id = course_id
if oper in ('=', ''): oper = '==' return oper, verstr
cursor = connection.cursor() connection.ops.last_executed_query(cursor, '', ())
'tcp_master_pub_port': int,
usage = '%%prog %s [options] %s' % (subcommand, self.args) if self.help: return '%s\n\n%s' % (usage, self.help) else: return usage
from django.test import TestCase from nose.plugins.attrib import attr
revoke_access(course_ccx, instructor, 'instructor')
for label in [bisection_label, 'model_inheritance_same_model_name']: try: test_labels.remove(label) except ValueError: pass
try: result = super(StringOrDate, self).to_json(value) except: return value if result is None: return value else: return result
FormSet = inlineformset_factory(UUIDPKParent, AutoPKChildOfUUIDPKParent, fields='__all__') formset = FormSet() self.assertIsNone(formset.forms[0].fields['parent'].initial)
return ''
response = self.client.get(reverse('verify_student_create_order'), create_order_post_data) self.assertEqual(response.status_code, 405)
FormSet = modelformset_factory(Price, fields="__all__", extra=1, max_num=1) formset = FormSet(data) self.assertTrue(formset.is_valid())
n_population = 100
self.assertHTMLEqual(empty_forms[0].as_p(), empty_forms[1].as_p())
raise TypeError("'%s' does not support mutable operations." % self.__class__.__name__)
self.browser.execute_script("jQuery.fx.off = true;")
from __future__ import unicode_literals
self._pkgdb_fun('register_pkg', pkg_name, formula_def, self.db_conn)
{'type': unique_tab_type}, {'type': unique_tab_type},
import logging
self.assertEqual(self.team_management_page.header_page_name, title) self.assertEqual(self.team_management_page.header_page_description, description) self.assertEqual(self.team_management_page.header_page_breadcrumbs, breadcrumbs)
X = np.linspace(0.1, 9.9, 20) X = np.atleast_2d(X).T
df.groupby(1, as_index=False)[2].agg({'Q': np.mean})
self.backend = backend self.server = server return 'server enabled'
response = self.client.get('/permission_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/permission_protected_view/')
world.wait_for_ajax_complete()
return sorted(results, key=lambda course: unicode(course.id))
with patch('salt.utils.which', mock_true): ret = parallels.__virtual__() self.assertTrue(ret) self.assertEqual(ret, 'parallels')
self._start_time = time.time()
from salt import cloud, defaults
response = self.client.get('/home') self.assertEqual(response.status_code, 200) self.assert_no_xss(response, escaping_content)
d = DataFrame({'A': 'foo', 'B': ts}, index=dr) self.assertTrue(d['B'].isnull().all())
def __init__(self, opts, **kwargs): pass
from __future__ import absolute_import import os import struct
save_child_position(self.course, self.chapter_url_name) save_child_position(self.chapter, self.section_url_name)
if not _level and isinstance(ret, dict): from pandas import concat ret = concat(ret, axis=1) return ret
enrolled_course_keys = [enrollment.course_id for enrollment in course_enrollments] course_deadlines = VerificationDeadline.deadlines_for_courses(enrolled_course_keys)
SEARCH_SKIP_ENROLLMENT_START_DATE_FILTERING = True
args_dict = dict(zip(compat_args, args))
return ( 'name', 'enabled', 'backend_name', 'secondary', 'skip_registration_form', 'skip_email_verification', 'change_date', 'changed_by', 'edit_link', )
response = other_with_prefix_view(request, '9') self.assertEqual(response.content, b'Hello World 9')
params['signed_field_names'] = 'reason_code,message' params['signature'] = self._signature(params)
idx = idx.item(0)
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
model.fit(X_scaled, y) assert_true(np.isfinite(model.coef_).all())
bandwidth = 1.2
self.assertRaises(NotImplementedError, store.select, 'df', "columns=['A','B'] & columns=['C']")
state['new'] = __salt__['lxc.state'](name, path=path)
def test_get_missing_template(self): with self.assertRaises(CourseEmailTemplate.DoesNotExist): CourseEmailTemplate.get_template()
poly.exterior_ring = new_shell
return ret
return settings.FEATURES.get('ENTRANCE_EXAMS', False)
return False
LOGGING_STORE_HANDLER = TemporaryLoggingHandler()
__pillar__.update(kwargs.get('pillar', {}))
PROVIDER_NAME = "override" PROVIDER_BACKEND = "override" PROVIDER_ID = "override" USER_EMAIL = "override" USER_NAME = "override" USER_USERNAME = "override"
return True
self.assertRaises(KeyError, cd.__getitem__, 'foo')
if salt.utils.is_true(kwargs.get('removed')): return {}
return {}
self.chapter1 = ItemFactory.create( parent_location=self.course.location, category='chapter', display_name='untitled chapter 1' )
mock_plugin = Mock() mock_plugin.type = tab_type mock_plugin.priority = priority return mock_plugin
roll = np.where(base_period.to_timestamp(how='end') == i - off, self.n, self.n - 1)
else: for lh_field, rh_field in self.field.related_fields: setattr(instance, lh_field.attname, getattr(value, rh_field.attname))
try: query_string = query_string.decode(encoding) except UnicodeDecodeError: query_string = query_string.decode('iso-8859-1')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON
self.post.assert_called_with(callback_url, data=expected_callback_dict)
location = '//%s' % self.get_full_path()
problem = new_loncapa_problem(xml_str) problem.done = True problem.student_answers = {'1_2_1': 'choice_1'}
from __future__ import absolute_import import os import random import string
is_increasing = assert_no_warnings(check_increasing, x, y) assert_true(is_increasing)
#default_role = None
self.assertFalse(result['success']) self.assertIn(u"badly-typed value", result['error_html'])
from salt.ext import six
self.cluster_centers_ = _init_centroids( X, self.n_clusters, self.init, random_state=self.random_state_, x_squared_norms=x_squared_norms, init_size=self.init_size)
return self.q(css='.pub-status').first.text[0]
if db != 'read_replica': DATABASES[db].update(get_db_overrides(db))
item = order.orderitem_set.all().select_subclasses()[0] coupon_redemption = CouponRedemption.objects.select_related('coupon').filter(order=order)
with tm.assert_produces_warning(FutureWarning): df = make_mixed_dataframe_v2(10) gbq.generate_bq_schema(df)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return True
DATE_INPUT_FORMATS = [
kwargs.setdefault('strip', False) super(RegexField, self).__init__(max_length, min_length, *args, **kwargs) self._set_regex(regex)
plt.scatter(X_test[:, 0], X_test[:, 1], s=80, facecolors='none', zorder=10)
print("Fitting ExtraTreesClassifier on faces data with %d cores..." % n_jobs) t0 = time() forest = ExtraTreesClassifier(n_estimators=1000, max_features=128, n_jobs=n_jobs, random_state=0)
raise NotImplementedError('subclasses of BaseCache must provide a get() method')
if hasattr(self, 'process_manager'): self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children()
if os.path.exists(self.work_path): os.unlink(self.work_path)
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), 1)
mode, is_active = CourseEnrollment.enrollment_mode_for_user(self.user, self.course.id) self.assertEqual(mode, CourseMode.DEFAULT_MODE_SLUG) self.assertEqual(is_active, True)
X = iris.data
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
index = self.index[:] expected = self.index self.assert_index_equal(index, expected)
from __future__ import absolute_import
self.intervals = {}
span_element = rendered_html.find('span') self.assertEqual(span_element.text, 'Welcome student')
with warnings.catch_warnings(record=True): estimator = Estimator() set_testing_parameters(estimator) set_random_state(estimator) estimator.fit(X, y) y_pred = estimator.predict(X)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
morph_to_esri = void_output(lgdal.OSRMorphToESRI, [c_void_p]) morph_from_esri = void_output(lgdal.OSRMorphFromESRI, [c_void_p])
tree = self._compute_metadata_inheritance_tree(course_id)
self._prefixlen = self._prefix_from_ip_string(addr[1])
if not PY3: setattr(cls, name, types.MethodType(func, None, cls)) else: setattr(cls, name, func)
dt = Timestamp('20130101 09:10:11') result = dt.ceil('D') expected = Timestamp('20130102') self.assertEqual(result, expected)
ret['msg'] = _urlopen(url, timeout=timeout).read().splitlines()
results[guid]['NeedsReboot'] = str(update.RebootRequired)
rng = date_range(START, END, freq=datetools.bmonthEnd)
info = {} for key in domain_keys.get(domain, []): value = signode.get(key) if not value: value = '' info[key] = value if not info: continue
if convert_dates == 'coerce': new_values = _possibly_cast_to_datetime(values, 'M8[ns]', errors='coerce')
with self.assertRaises(FieldError): Choice.objects.filter(foo__exact=None)
self._post_init(srid)
import salt.master self.master = salt.master.Master(self.config)
rng = rng = np.random.RandomState(42)
df['int'] = 1 df.ix[2:7, 'int'] = 2
SORTED_LEVEL_NAMES = [ l[0] for l in sorted(six.iteritems(LOG_LEVELS), key=lambda x: x[1]) ]
verify_file_presence(True)
from __future__ import absolute_import import os import traceback
return ret
pro = Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16))
def __unicode__(self): return u'ApiAccessConfig [enabled={}]'.format(self.enabled)
Score = namedtuple("Score", "earned possible graded section module_id")
from __future__ import absolute_import import re import sys
regex = re.compile('^' + answer + '$', flags=flags | re.UNICODE) return re.search(regex, given)
srs = SpatialRefSys.objects.get(srid=sd['srid']) ellps2 = srs.ellipsoid
rng = np.random.RandomState(0) X = rng.rand(5, 5)
warnings.warn("TODO: add unit test that iterators uneven property is set correctly.")
self.user = User.objects.get_by_natural_key(self.user.natural_key()[0])
subtask_status.increment(failed=num_pending, state=FAILURE) return subtask_status, exc
fermat_weber = fmin_bfgs(cost_func, median, disp=False) assert_array_almost_equal(median, fermat_weber) assert_warns(ConvergenceWarning, _spatial_median, X, max_iter=30, tol=0.)
email_instructions = _("The email address you used to register with {platform_name}").format( platform_name=settings.PLATFORM_NAME )
response = self.client.get(self.get_add_url()) self.assertEqual(response.status_code, 200)
date_fmt = '%Y%m%d%H%M%SZ'
task_input = {'statuses_to_regenerate': [CertificateStatuses.downloadable, CertificateStatuses.error]}
return "is-editing" in self.q( css=self._bounded_selector(self.NAME_FIELD_WRAPPER_SELECTOR) )[0].get_attribute("class")
output = self.engine.render_to_string('i18n04', {'anton': b'\xc3\x85'}) self.assertEqual(output, 'å')
class CachedDnsName(object): def __str__(self): return self.get_fqdn()
name = _sdecode(name) snap_name = _sdecode(snap_name)
return "assignment_no_params - Expected result"
mode_slug = models.CharField(max_length=100)
if name_field not in model: raise salt.exceptions.SaltException( "Name '{0}' not found in returned fields.".format( name_field))
if usage_info.has_staff_access: return
dest_dir = os.path.abspath(os.path.join(setup.app.builder.outdir, source_rel_dir))
{date:%A, %d %B %Y @ %H:%m:%S UTC}.
self.assertEqual(self.client.session.get('attempting_upgrade'), is_upgrade)
source_last_modified = source_storage.get_modified_time(path)
self.assertTrue(hasattr(course_overview, 'image_set'))
log_func = log.debug if request.user.id is None else log.warning log_func(
name = com._get_callable_name(a) or a keys.append(name)
required_boto3_version = '1.2.1'
o = Series([1, 2, 3]) result = o._get_numeric_data() self._compare(result, o)
if noise > 0.0: y += generator.normal(scale=noise, size=y.shape)
return {'pythonpath': sys.path}
index = Index(['a', 'b', 'c']) index2 = index + 'foo'
import tornado import tornado.gen import tornado.netutil import tornado.concurrent from tornado.ioloop import IOLoop from tornado.iostream import IOStream
if self._sample_switch: self._apply_corruption(activations, self._layer_samplers, idx_iter) return activations
updated_time = models.DateTimeField(auto_now=True)
self.create_programs_config(enable_student_dashboard=False) actual = utils.get_programs_for_dashboard(self.user, self.COURSE_KEYS) self.assertEqual(actual, {})
if self.normalize_y: self.y_train_mean = np.mean(y, axis=0) y = y - self.y_train_mean else: self.y_train_mean = np.zeros(1)
module.new_lcp.assert_called_once_with(None)
hosts = [] for name in h: name = name.strip() if len(name) > 0: hosts.append(name)
return self._shallow_copy(tz=tz)
TASK_LOGON_NONE = 0 TASK_LOGON_PASSWORD = 1 TASK_LOGON_S4U = 2 TASK_LOGON_INTERACTIVE_TOKEN = 3 TASK_LOGON_GROUP = 4 TASK_LOGON_SERVICE_ACCOUNT = 5 TASK_LOGON_INTERACTIVE_TOKEN_OR_PASSWORD = 6
self.assertLessEqual(old_time, updated_component.published_on) self.assertEqual(updated_component.published_by, publish_user)
return self.q(css=".badges-modal").is_focused()
if is_extension_type(value): return value
self.interpolates_text_or_html = True
names_inv_actual = sel.inverse_transform([feature_names_t]) assert_array_equal(feature_names_inv, names_inv_actual.ravel())
return upload_file.size
from __future__ import absolute_import import logging import time import json from boto.ec2.blockdevicemapping import BlockDeviceMapping, BlockDeviceType
relative_prefix = os.path.relpath(current_dir, os.getcwd()).replace('\\', '/') fixtures = [relative_prefix + '/fixtures/absolute.json']
html_use_modindex = True
est = TreeEstimator(random_state=0) est.fit(X, y, sample_weight=sample_weight) assert_equal(est.tree_.max_depth, 1)
class Color2(Color): class Meta: proxy = True
from __future__ import unicode_literals
response = self.fetch('/', method='POST', body=json.dumps(request_lowstate), headers={'Content-Type': self.content_type_map['json']})
data_base = models.CharField(max_length=10) fk_base = models.ForeignKey(Relation, models.CASCADE, related_name='fk_base_rel')
data_train = Avicenna(which_set='train', standardize=True) assert data_train.X.shape == (150205, 120)
import salt.utils
self._perform_test_using_store(store_type, self._test_delete_course_from_search_index_after_course_deletion)
try: self.client.get('/broken_view/') self.fail('Should raise an error') except KeyError: pass
from config_models.models import cache
self.skipTest('This test fails when using tests/runtests.py. salt-runtests will be available soon.')
store = HDFStore(path, mode='w') store.append('df', df)
self.send_response(500, 'Bad Request: does not contain API key') self.send_header('Content-type', 'text/plain') self.end_headers() return False
geos_relate = GEOSFuncFactory( 'GEOSRelate', argtypes=[GEOM_PTR, GEOM_PTR], restype=geos_char_p, errcheck=check_string )
result = f.clean('12-21-2010 13:30') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
clf = GradientBoostingClassifier(loss='exponential', n_estimators=100, random_state=1)
with np.errstate(under='ignore'): rbm1.score_samples([np.arange(1000) * 100])
columns = self.column_classes(Note) self.assertFalse(columns['info'][1][6])
self._add_entrance_exam() self.init_course_access() self._verify_unfulfilled_milestone_response()
course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE
estimators = [] estimators_samples = [] estimators_features = []
self.assert_error(params, "honor_code", expected_error)
xblock_partition_access = set(xblock_group_access.get(partition.id) or []) or None
transduction = self.classes_[np.argmax(self.label_distributions_, axis=1)] self.transduction_ = transduction.ravel() self.n_iter_ = self.max_iter - remaining_iter return self
PASSWORD_HASHERS = [ 'django.contrib.auth.hashers.MD5PasswordHasher', ]
i = Period(year=1,month=1,day=1,freq='D').asfreq('S', 'S') i.ordinal ===> 1
nv.validate_transpose(args, dict()) return super(DataFrame, self).transpose(1, 0, **kwargs)
self.advanced_settings.undo_changes_via_modal()
to_json_val = super(StaticTab, self).to_json() to_json_val.update({'url_slug': self.url_slug}) return to_json_val
def convert_to_draft(self, location, user_id): raise NotImplementedError()
elif existing['code'] == 404: ret['comment'] = 'A node with this name was not found.' else: ret = _load_result(existing, ret)
from __future__ import absolute_import
from __future__ import absolute_import
X = X.reshape(-1, 2 * numpy.prod(self.original_image_shape))
class ConnectionCreatedSignalTest(TransactionTestCase):
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
from ctypes import cdll, c_char_p, c_int, c_void_p, pointer, create_string_buffer from ctypes.util import find_library
return len(tsql_query(query="SELECT name FROM sys.syslogins WHERE name='{0}'".format(login), **kwargs)) == 1
try: return grouped[key] except KeyError: return grouped
logger.error("'{0}' not found " "but mandatory".format(this_check)) return False
handles_files = True
values[values == -1] = get_base_missing_value(dtype) data_formatted.append((col, values, index))
train, test = slice(None, None, 2), slice(1, None, 2) probas_pred = clf.fit(X[train], y[train]).predict_proba(X[test])
result_dict = json.loads(response.content)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
super(StatsEventerTestCase, self).tearDown()
self.library = modulestore().get_library(self.lib_key)
if self.signal_handler: self.signal_handler.send("course_deleted", course_key=course_key)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
n_samples = X.shape[0]
partial(replace_static_urls, None, course_id=course_id), _studio_wrap_xblock,
return
self.assertRedirects(response, '/get_view/', status_code=301)
MIGRATION_MODULES = {}
nodata, data = chunk(data, pack_size) nodata = unpack(pack_type, nodata)[0]
import salt.ext.six as six
cache.set("key1", "spam", 100.2) self.assertEqual(cache.get("key1"), "spam")
DECIMAL_SEPARATOR = '.'
query = 'objects:' pos = searchindex.find(query) if pos < 0: raise ValueError('"objects:" not found in search index')
if self.pendings: self.pendings += bytes_ bytes_ = self.pendings
raise KeyError
pass
return { "result": ( "inclusion_params_and_context_from_template - Expected result " "(context value: %s): %s" % (context['value'], arg) ) }
assert is_css_present(css_selector) return retry_on_exception(lambda: css_find(css_selector)[index].html)
'mine_enabled': bool,
return ax
size = int(np.round((1 - density) * nrows * ncols)) min_rows = 5 fac = 1.02 extra_size = min(size + min_rows, fac * size)
ContentType.objects.clear_cache()
request = build_launch_request() views.lti_launch(request, unicode(COURSE_KEY), unicode(USAGE_KEY)) render.assert_called_with(request, USAGE_KEY)
child._field_data.set(child, 'due', child_due) compute_inherited_metadata(descriptor) self.override_metadata_check(descriptor, child, course_due, child_due)
try: os.remove(shim_tmp_file.name) except IOError: pass
parsed = urlparse.urlparse(constructed) params = urlparse.parse_qs(parsed.query)
return (self.get_input_space(), self.get_input_source())
self.assertEqual(resp.status_code, 200)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key))
empty_asset_trashcan([self.course.id])
from __future__ import absolute_import import os import shutil import tempfile
def __init__(self, requestedLocation, currentHeadVersionGuid): super(VersionConflictError, self).__init__(u'Requested {}, but current head is {}'.format( requestedLocation, currentHeadVersionGuid ))
out, err = DETAILS['server'].sendline(cmd)
data = data.astype(float)
importlib.invalidate_caches()
g = wkb_r().read(force_bytes(geo_input))
from __future__ import absolute_import
return capi.geos_length(self.ptr, byref(c_double()))
try: return self.maps[0].popitem() except KeyError: raise KeyError('No keys found in the first mapping.')
get_service_certificate = show_service_certificate
return self.make_call(reverse('teams_list'), expected_status, 'post', data, **kwargs)
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, dest_id): self.recursive_build(source_courselike, courselike, courselike_key, dest_id)
assert unsup_counter.get_value() == train_batches assert sup_counter.get_value() == train_batches
sys.path.insert(0, '.')
__salt__ = salt.loader.minion_mods(__opts__) __grains__ = __opts__['grains']
exit(salt.defaults.exitcodes.EX_GENERIC)
if n_components < min(n_features, n_samples): self.noise_variance_ = explained_variance_[n_components:].mean() else: self.noise_variance_ = 0.
labels, y = np.unique(y, return_inverse=True)
return _static(path)
if isinstance(cmd, six.string_types): cmd = cmd.split(' ')
instructor_dashboard_page = self.visit_instructor_dashboard() exam_attempts_section = instructor_dashboard_page.select_special_exams().select_exam_attempts_section()
payment_support_email = microsite.get_value('payment_support_email', settings.PAYMENT_SUPPORT_EMAIL)
return len(self)
index_a = self.create_index() if isinstance(index_a, PeriodIndex): return
return manager._insert([self], fields=fields, return_id=update_pk, using=using, raw=raw)
y_noisy = y + 0.05 * np.random.randn(len(y))
CONFIG_FILE = open(settings.REPO_ROOT / "docs" / "lms_config.ini") CONFIG = ConfigParser.ConfigParser() CONFIG.readfp(CONFIG_FILE)
DATE_FORMAT = 'd F Y' TIME_FORMAT = 'g:i A' SHORT_DATE_FORMAT = 'j M Y'
db.reset_queries()
from __future__ import absolute_import, division import fnmatch
df = DataFrame({'A': np.arange(20)}, index=np.arange(20))
import salt.utils import salt.utils.locales from salt.modules.reg import read_value
_install_from_path.assert_called_with(source)
AUDIT_LOG.info(u"User %s w/o external auth attempting login", user)
_ = lambda text: text
self.sock = None self.io_loop = io_loop or IOLoop.current() self._closing = False
try: try: return super(PutAsCreateMixin, self).update(request, *args, **kwargs) except Http404: return super(PutAsCreateMixin, self).create(request, *args, **kwargs)
warnings.warn("icol(i) is deprecated. Please use .iloc[:,i]", FutureWarning, stacklevel=2) return self._ixs(i, axis=1)
elif _is_scalar_indexer(indexer): values[indexer] = value
index = self.problem_list.index(problem_name) + 1 self.q(css='a.problem-button:nth-of-type({})'.format(index)).first.click()
elif inferred_type == 'string' or dtype == 'object': self.set_atom_string( block, block_items, existing_col, min_itemsize, nan_rep, encoding)
return orig_index
super(HtmlStringVisitor, self).__init__(file_contents, results) self.skip_wrapped_html = skip_wrapped_html self.unsafe_html_string_nodes = [] self.over_escaped_entity_string_nodes = [] self.has_text_or_html_call = False
self.wait_for_element_visibility( '#alert-confirmation-title', 'Alert confirmation title element is available' ) return self.get_element('#alert-confirmation-title')
dbkey['run'] = location.run content_id = unicode(location.for_branch(None))
log.error('{0} is not a valid mount point, skipping.'.format(mount)) continue
K = squareform(K) np.fill_diagonal(K, 1)
if os.path.exists(venv_path): shutil.rmtree(venv_path) if os.path.exists(requirements_file_path): os.unlink(requirements_file_path) raise
targets = [] problems = [] for pkgname, pkgver in six.iteritems(to_remove): origin = bool(re.search('/', pkgname))
from __future__ import absolute_import
values = ['2014', '2013/02', '2013/01/02', '2013/02/01 9H', '2013/02/01 09:00'] for v in values:
assert_greater(n_iter_reference, 2)
assert_series_equal(actual, expected)
response = self.http_get_for_course(self.invalid_course_id) self.assertEqual(response.status_code, 404)
mocked_attr.return_value = {'foo': 'bar'} self.assertEqual(utils.get_course_chapters(self.course_key), [])
X_list = [1., 3., 5., 0.] X_arr = np.array(X_list)
inlier_idxs_subset = sample_idxs[inlier_mask_subset] X_inlier_subset = X[inlier_idxs_subset] y_inlier_subset = y[inlier_idxs_subset]
req = django_to_webob_request(request)
index = 1 for child in subsection.get_children(): if child.location == unit.location: break index += 1
cursor = connection.cursor() commands = connections[DEFAULT_DB_ALIAS].ops.sequence_reset_sql(no_style(), [models.Post]) for sql in commands: cursor.execute(sql)
available_apps = ["migration_test_data_persistence"] serialized_rollback = True def test_persistence(self): self.assertEqual( Book.objects.count(), 1, )
return render_to_string('courseware/date_summary.html', self.get_context())
if self._count >= self.start: return self.final_momentum return self._init_momentum
self.assertRaises(ValueError, self.aapl.get_options_data, month=3) self.assertRaises(ValueError, self.aapl.get_options_data, year=1992)
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandNotFoundError
enrollment = CourseEnrollment.get_enrollment(student, course_key) if enrollment and enrollment.mode not in REQUIREMENTS_DISPLAY_MODES: return None
raise NotImplementedError(str(type(self))+" does not implement setup.")
self.assertEqual(houston_json, City.objects.geojson(crs=True, model_att='json').get(name='Houston').json)
CommerceConfiguration.objects.create( checkout_on_ecommerce_service=enabled, single_course_checkout_page=checkout_page )
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
assert_raises(ValueError, next, StratifiedShuffleSplit(train_size=2).split(X, y)) assert_raises(ValueError, next, StratifiedShuffleSplit(test_size=2).split(X, y))
raise ValueError("cannot set Categorical codes directly")
request.META = {'HTTP_HOST': 'example.com:80'} site = get_current_site(request) self.assertEqual(site, s2)
for method in ['count', 'size']:
make_pkgng_aware(name)
Number.objects.filter(pk=self.n.pk).update(integer=69 % F('integer'))
'config_models',
self.shell.directive = self
if (isinstance(labels, MultiIndex) and len(keyarr) and not isinstance(keyarr[0], tuple)): level = 0 else: level = None
item.is_draft = (item.location.revision == MongoRevisionKey.draft) item.location = item.location.replace(revision=MongoRevisionKey.published) return item
geodetic_units = ('decimal degree', 'degree')
class Model1(models.Model): pkey = models.IntegerField(unique=True, db_index=True)
try: return self.encrypt_session_key(request.session.session_key) except AttributeError: return ''
from salt.modules import zfs from salt.utils.odict import OrderedDict
for field in InheritanceMixin.fields.values(): if field.is_set_on(descriptor): parent_metadata[field.name] = field.read_json(descriptor)
import os import sys import time import errno import select import logging import tempfile import subprocess
def wrapped_view(*args, **kwargs): resp = view_func(*args, **kwargs) resp.xframe_options_exempt = True return resp return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
comb_name = comb_name.decode('utf-8', 'replace')
graph_matrix = self._build_graph()
break
import salt.ext.six as six
est = Ridge(alpha=alpha, fit_intercept=intercept, solver=solver) est.fit(X, y, sample_weight=sample_weight) coefs = est.coef_ inter = est.intercept_
result = self.copy() result._id = self._id return result
full_name = UserProfile.objects.get(user=user).name
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
from __future__ import absolute_import import logging
self.module_store = modulestore()._get_modulestore_by_type(ModuleStoreEnum.Type.mongo)
if parse_dates is True or parse_dates is None or parse_dates is False: parse_dates = []
self.assertEquals(len(self.backend.events), 0)
if not name: return 'Required parameter "name" not passed'
course_id = CourseKeyField(max_length=255, db_index=True, unique=True)
return 'server frontend'
page_size = TEAM_MEMBERSHIPS_PER_PAGE
from __future__ import unicode_literals
kwargs['public_key'] = get_public_key(kwargs['public_key']).replace('\n', '')
def f(): df.quantile(.5, axis=1, numeric_only=False) self.assertRaises(TypeError, f)
clf = cls().fit(X2, y2) assert_raises(ValueError, clf.predict, X2[:, :-1])
os.setsid()
view_html = proctoring_service.get_student_view( user_id=user_id, course_id=course_id, content_id=content_id, context=context, user_role=user_role_in_course )
if nrepl > 0: found = True has_changes = True if pattern != repl else has_changes
error_msg = "This is an exception, voilà" exc = ValueError(error_msg) result = force_bytes(exc) self.assertEqual(result, error_msg.encode('utf-8'))
return self.batch_size * self.num_batches
with Timer() as iteration_over_groups_time_2: courses_list, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
frame = self.tsframe[:1].reindex(columns=[]) result = frame.mul(ts, axis='index') self.assertEqual(len(result), len(ts))
return StaticContent.compute_location(course_key, path)
return {}
exit=False)
request = HttpRequest() request.method = "GET" request.session = session
self.children.extend(args) return self
try: return (self.categories.equals(other.categories) and self.ordered == other.ordered) except (AttributeError, TypeError): return False
module, klass = settings.BADGING_BACKEND.rsplit('.', 1) module = import_module(module) return getattr(module, klass)()
import collections
return set([c for c in self._info_axis if isinstance(c, string_types) and isidentifier(c)])
curl -sSk https://localhost:8000 \\ -b ~/cookies.txt \\ -H 'Accept: application/x-yaml' \\ -d client=local \\ -d tgt='*' \\ -d fun=test.ping
df = orig.copy() df.loc["j", "cats"] = "b" tm.assert_frame_equal(df, exp_single_cats_value)
clf = DecisionTreeClassifier(max_depth=3, min_samples_split=2) clf.fit(X, y)
termination_key = '{0}BlockDeviceMapping.{1}.Ebs.DeleteOnTermination'.format(spot_prefix, dev_index) params[termination_key] = str(set_del_root_vol_on_destroy).lower()
self.ptr = g
for error_inputs, error_message in self.BAD_JSON_INPUTS: for einput in error_inputs: with self.assertRaisesRegexp(LTIError, error_message): self.xmodule.parse_lti_2_0_result_json(einput)
oracle.__salt__ = {} oracle.cx_Oracle = object()
frame = DataFrame() ct1 = frame.count(1) tm.assertIsInstance(ct1, Series)
outliers_sw = sample_weight[outliers_mask] n_sw_outliers = np.sum(outliers_sw) outlier_loss = (2. * epsilon * np.sum(outliers_sw * outliers) - sigma * n_sw_outliers * epsilon ** 2)
geom_type = 'GEOMETRY'
if comps[0] == 'user' and not comps[1]: comps[1] = user elif comps[0] == 'group' and not comps[1]: comps[1] = group vals[comps[0]] = comps[1]
response = None log.exception("Outcome Service: Error when sending result.")
return self.incr(key, -delta, version=version)
return self.masquerade and self.masquerade.role == 'student'
from nose.tools import assert_equal from nose.tools import assert_not_equal from nose.tools import assert_true from nose.tools import assert_false from nose.tools import assert_raises from nose.tools import raises from nose import SkipTest from nose import with_setup
can_introspect_small_integer_field = False
from decimal import Decimal
return sql, params
from __future__ import unicode_literals
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
xpath = "//section[@class='math-string']/span[2]/p/b" self.assert_has_text(xml, xpath, 'tail')
gcd, s, t = self._extended_gcd(self._step, other._step)
if backward: break else: available = True continue
pass
time.sleep(20) ret = self.run_function('grains.item', ['setgrain'])
course_overview_2 = CourseOverview.get_from_id(course.id) self.assertFalse(course_overview_2.mobile_available)
evaluate_prerequisite(self.course, self.prob2.location, self.user.id) self.assertFalse(mock_module_score.called)
self.send_response(200)
X = np.ones((10, 2)) X[:5, :] = 0
from __future__ import unicode_literals
from salt.modules import virt from salt.modules import config from salt._compat import ElementTree as ET import salt.utils
self.assertEqual(first_cohort.users.get(), course_user)
self.mappings[course_key] = store
auth = self._create_authorization_header(token) return self.csrf_client.get(target_url, params, HTTP_AUTHORIZATION=auth)
if asset_collection.name in asset_collection.database.collection_names():
return bool(re.match("^https?://%s/" % re.escape(domain), referer))
return int((datetime_value - datetime(1970, 1, 1, tzinfo=UTC)).total_seconds())
self.fixture_count = 0 self.loaded_object_count = 0 self.fixture_object_count = 0 self.models = set()
model_ransac = linear_model.RANSACRegressor(linear_model.LinearRegression()) model_ransac.fit(X, y) inlier_mask = model_ransac.inlier_mask_ outlier_mask = np.logical_not(inlier_mask)
management.call_command( 'loaddata', 'special-article.json', verbosity=0, )
el = course_listing[0]
for mode in cls.VERIFIED_MODES: if mode in course_mode_dict: return True return False
if name in list_tasks(location): return True else: return False
rendered = "0.post%%d" %% pieces["distance"] if pieces["dirty"]: rendered += ".dev0"
linux_sysctl.__salt__ = {} linux_sysctl.__context__ = {} systemd.__context__ = {}
y_lower = clf.predict(xx)
return AUTHOR_VIEW if has_author_view(block) else STUDENT_VIEW
from __future__ import absolute_import import os import os.path import tempfile
import salt.utils from salt.utils import which as _which from salt.exceptions import CommandNotFoundError, CommandExecutionError
if not self._verify_auth(): self.redirect('/login') return
if created: self.add(obj) return obj, created
if role in PALETTES[NOCOLOR_PALETTE] and definition: palette[role] = definition
s = pd.Series( np.random.randn(20), index=pd.date_range('1/1/2000', periods=20, freq='12H'))
def t(*result): return '|'.join(datetimes[key].isoformat() for key in result)
reload(sklearn.lda) return sklearn.lda
if set(dns_servers or ['None']) != set(cur_dns_servers): changes['dns_servers'] = dns_servers
from __future__ import absolute_import
from __future__ import absolute_import, print_function import os import sys import time import logging import threading import traceback from random import randint
return (requested_fields or set()) | {'type', 'display_name'}
if value is None: return None return six.text_type(value)
file_path = InstructorDashboardPage.get_asset_path(filename) self.q(css=self.auto_enroll_browse_button_selector).results[0].send_keys(file_path) self.click_upload_file_button()
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
y_pred, sigma = gp.predict(x, return_std=True)
self.progress_page.visit() self.tab_nav.go_to_tab('Home')
fetch = get
def __xor__(self, other): "Return the symmetric difference of this Geometry and the other." return self.sym_difference(other)
course_url = '/home/' resp = self.client.get_html(course_url) self.assertEquals(resp.status_code, 200)
raise NotImplementedError()
if numpy.size(imgshp)==2: imgshp = (1,)+imgshp
return self.asobject.values
elif op in ['-', '/']: result = getattr(df, rop)(m) assert_frame_equal(result, expected)
_, _, traceback_obj = sys.exc_info() raise ResponseError(err.message, traceback_obj)
if 'Key not removed' in rval: return 'Key not removed' elif 'Key removed' in rval: return 'Key removed' else: return 'Key not present'
body.update(custom_parameters)
return np.array(self._data, dtype=dtype)
response_providers = get_credit_provider_display_names(self.course_key) self.assertListEqual(self.PROVIDERS_LIST, response_providers)
if salt.utils.compare_versions(ver1=pip_version, oper='>=', ver2='1.4'): cmd.append('--pre')
if master is not None: tmp_ip = _host_to_ip(master) if tmp_ip is not None: master_ip = tmp_ip
from __future__ import print_function from __future__ import absolute_import import os import sys
_check_plot_works(df.hist, bins=5)
create_result = __salt__['dockerng.create']( image, name=name, validate_ip_addrs=False, validate_input=False, client_timeout=client_timeout, **create_kwargs )
from __future__ import unicode_literals
raise NotImplementedError
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
return getattr(course, 'enable_ccx', False)
clf = GaussianNB(priors=np.array([-1., 2.])) assert_raises(ValueError, clf.fit, X, y)
self.conn.execute("DROP SCHEMA IF EXISTS other CASCADE;") self.conn.execute("CREATE SCHEMA other;")
run_command = (test_command + 'run').format(mode) result = __salt__['cmd.run'](run_command) ret_val[key] = _parser(result)
feature_names = [feature_names[i] for i in ch2.get_support(indices=True)]
values = values.asi8.reshape(block.shape)
course = modulestore().get_course(course_key, depth=0) if course is None: raise CourseNotFoundError return course
assert_almost_equal(mcc, 0.)
logging.root.addHandler(LOGGING_STORE_HANDLER)
return data_key + 't1.val1.' + unicode(block_key)
course_id = course.id if course else self.course.id for mode_slug in course_modes: CourseModeFactory.create( course_id=course_id, mode_slug=mode_slug, mode_display_name=mode_slug, )
SplitTestFields.build_partition_values(self.user_partitions, self.get_selected_partition())
if cfg.versionfile_build: target_versionfile = os.path.join(self.build_lib, cfg.versionfile_build) print("UPDATING %s" % target_versionfile) write_to_version_file(target_versionfile, versions)
return op(self.get_values(), skipna=skipna, **kwds)
self.video.wait_for_position('0:05') self.video.click_player_button('skip_bumper')
FEATURES['ENABLE_PREREQUISITE_COURSES'] = True
'master_failback': bool,
self.wait_for_element_visibility( 'div.certificate-invalidation-container', 'Certificate invalidations section is visible.' ) self.wait_for_element_visibility('#invalidate-certificate', 'Invalidate Certificate button is visible')
X, y = iris.data, iris.target base = DecisionTreeClassifier()
expected_classes = ['Abdelatif Smith', 'Abhati Kepler', 'Onur Lopez'] assert_array_equal(lfw_people.target_names, expected_classes)
result = ts2['2011'].sort_index() expected = ts['2011'] assert_series_equal(result, expected)
uninstall_ruby(ruby, runas=runas) return False
class Person(Form): first_name = CharField(required=False) last_name = CharField(required=False)
status = None
from __future__ import unicode_literals
self.assertFalse(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(course_key))
if dtype is not None:
sys_doc_load = self.valid_clear_load sys_doc_load['fun'] = 'sys.doc' self.clear.publish(sys_doc_load)
url = BASE_URL + "/logout" def is_browser_on_page(self): return self.q(css='.btn-login').present
call_command("migrate", "migrations", fake=True, verbosity=0) call_command("migrate", "migrations", "zero", verbosity=0)
hasher = RandomTreesEmbedding(n_estimators=10, sparse_output=False) X, y = datasets.make_circles(factor=0.5) X_transformed = hasher.fit_transform(X)
finished_future = yield Any(inflight_futures) try: b_ret = finished_future.result() except TimeoutException: break chunk_ret.update(b_ret) inflight_futures.remove(finished_future)
if not err_msg: err_msg = u"Unknown error" error_rows.append(student_fields + [err_msg]) task_progress.failed += 1 continue
if not _np_version_under1p8: result = td1[0] + dt1 expected = ( dt1.dt.tz_localize(None) + td1[0]).dt.tz_localize('US/Eastern') assert_series_equal(result, expected)
user_country_from_ip = _country_code_from_ip(ip_address)
def cpu_affinity(self, *args, **kwargs): if args or kwargs: return self.set_cpu_affinity(*args, **kwargs) else: return self.get_cpu_affinity()
elif cl.list_editable: FormSet = self.get_changelist_formset(request) formset = cl.formset = FormSet(queryset=cl.result_list)
import datetime import warnings from functools import partial from sys import getsizeof
cached_module = self.modulestore.get_cached_block(course_key, version_guid, block_key) if cached_module: return cached_module
from __future__ import absolute_import
import salt.utils from salt.exceptions import CommandExecutionError
expected = np.argsort(a, kind='mergesort') assert (np.array_equal(result, expected))
result = VerificationStatus.objects.filter(checkpoint=self.first_checkpoint)[0] self.assertEqual(result.status, status) self.assertEqual(result.user, self.user)
return self.serialize_headers() + b'\r\n\r\n' + self.content
email_label = _(u"Email")
return False
result)
return course_metadata_utils.has_course_started(self.start)
from __future__ import absolute_import import json import logging as logger
return value.replace('\\', '\\\\').replace('"', '\\"').replace("'", "\\'")
sheet_name = self._get_sheet_name(sheet_name)
if center: offset = _offset(window, center) additional_nans = np.array([np.NaN] * offset)
name = _sdecode(name) snap_name = _validate_snap_name(name, snap_name, runas=runas)
test.__salt__ = {} test.__opts__ = {} test.__low__ = {'__reqs__': {'watch': ''}}
import salt.utils.event
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
tm._skip_if_no_pytz() import pytz
from napalm import get_network_driver HAS_NAPALM = True
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'verified')
DATE_INPUT_FORMATS = [
return self.to + self.cc + self.bcc
ret[zpool] = {}
lm2 = LayerMapping(ICity2, city_shp, icity_mapping) lm2.save()
res_df = df.ix["j":"k", :] tm.assert_frame_equal(res_df, exp_df) self.assertTrue(com.is_categorical_dtype(res_df["cats"]))
return ( self.created_at < deadline and self.expiration_datetime > deadline )
cases = [ dict(case_data, edx_video_id=""), dict(case_data, edx_video_id="vid-v1:12345"), ]
import time import math import fnmatch import logging from copy import copy from collections import defaultdict
response = self.the_input.handle_ajax("obviously_not_real", {}) self.assertEqual(response, {})
exp = pd.Series(self.rep[to_key], index=index, name='yyy', dtype=from_key)
return self.default is not NOT_PROVIDED
self.browser.refresh()
from __future__ import absolute_import
values = self.values if deep: values = values.copy(deep=True) return self.make_block_same_class(values)
buf = buf[offset:offset+size+1][:-1] data = np.ndarray(shape, dtype, buf, order=order) data.fill(0) return data
option2 = main2
if flip_y >= 0.0: flip_mask = generator.rand(n_samples) < flip_y y[flip_mask] = generator.randint(n_classes, size=flip_mask.sum())
from salt.states import service
self.request.user = student self.request.session = {}
from __future__ import absolute_import import time import json import pprint import logging import hmac import base64 from hashlib import sha256
ENROLLMENT_COURSE_DETAILS_CACHE_TIMEOUT = ENV_TOKENS.get('ENROLLMENT_COURSE_DETAILS_CACHE_TIMEOUT', 60)
__virtualname__ = 'system'
url('^中文/target/$', views.index_page),
unit_update_url = reverse_usage_url('xblock_handler', unit_usage_key) self.assertFalse(self._is_location_published(unit_usage_key)) self.assertFalse(self._is_location_published(html_usage_key))
returned = UserManager.normalize_email(r'Abc\@DEF@EXAMPLE.com') self.assertEqual(returned, r'Abc\@DEF@example.com')
return list(reversed(course_updates.items))
request_lowstate = { "client": "local", "tgt": "*", "fun": "test.fib", "arg": "10" }
return None, mods, errors
data_train, targets_train = data[:n_samples / 2], digits.target[:n_samples / 2]
axis = self.grouper.axis grouper = axis[axis.isin(dropped.index)]
self.q(css='div.csh_rate_hint').click() self.wait_for_ajax()
import integration
from salttesting.unit import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
CourseEnrollmentFactory( user=self.user, is_active=True, mode=mode, course_id=unicode(self.course.id), )
self.LibraryValueNotFoundException = value_not_found_exception
return value.center(int(arg))
self.wait_for_field(field_id) query = self.q(css='.u-field-{} .u-field-message'.format(field_id)) return query.text[0] if query.present else None
return response
node = mock.Mock(due=1, extended_due=2) self.assertEqual(self.call_fut(node), 2)
self.course_enrollment = CourseEnrollment.enroll(user=self.user, course_key=self.course_id, mode=self.mode) self.save()
script = "correct = ['correct' if 'test' in submission[0] else 'incorrect']" problem = self.build_problem(answer=script)
import os
config_data = __salt__['config.option']('virt.nic', {}).get( profile_name, None )
assert all(np.all(this_point.cv_validation_scores == 0.0) for this_point in gs.grid_scores_ if this_point.parameters['parameter'] == FailingClassifier.FAILING_PARAMETER)
self.go_to_tab_and_assert_problem(1, self.problem1_name) problem1_content_after_coming_back = self.problem_page.problem_content self.assertIn(problem1_content_after_coming_back, problem1_content_before_switch)
import integration import salt.utils
def utcoffset(self, _dt): return timedelta(hours=4)
return any( access_role.role == role and access_role.course_id == course_id and access_role.org == org for access_role in self._roles )
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'gogrid'
last_name_label = _(u"Last Name")
response = middleware.process_response(request, response)
for choice in subset_choices: choicegroup.append(choice)
self.assertTrue(provider_redirect_url.startswith(TESTSHIB_SSO_URL)) return self.client.post( self.complete_url, content_type='application/x-www-form-urlencoded', data=self.read_data_file('testshib_response.txt'), )
x = 0 for digit in str(number): x = x * len(from_digits) + from_digits.index(digit)
registration_codes = CourseRegistrationCode.order_generated_registration_codes(self.course_key) self.assertEqual(registration_codes.count(), item.qty)
import pwd runas = pwd.getpwuid(os.getuid())[0]
DEBUG = 10 INFO = 20 WARNING = 30 ERROR = 40 CRITICAL = 50
return
index = list('bca') t = Series([True, False, True])
if not args.show_plot: print(n, np.mean(time_per_iteration))
HAS_PSUTIL = False try: import salt.utils.psutil_compat as psutil HAS_PSUTIL = True except ImportError: pass
self.assertEqual(repr(idx), expected)
expected_message = self.get_dashboard_enrollment_message() self.assertTrue(expected_message in response.content)
if name not in list_tasks(location): return True else: return False
self.assertQuerysetEqual( self.a.friends.all(), [] )
'django.middleware.clickjacking.XFrameOptionsMiddleware',
request_token=None, course=course
_, sa, _ = randomized_svd(X, k, n_iter=0, power_iteration_normalizer=normalizer, random_state=0)
return -self.ebm.free_energy(X) - self.logZ_driver * self.logZ_lr_scale
log = logging.getLogger(__name__)
return self._validation_paragraph('not-configured').text[0]
import copy import os import logging
if wait_to_finish: salt.utils.cloud.run_func_until_ret_arg(fun=describe_volumes, kwargs={'volume_id': volume_id}, fun_call=call, argument_being_watched='status', required_argument_response='available')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
format = 's' if format is None else format return to_datetime(col, errors='coerce', unit=format, utc=True)
from __future__ import absolute_import import sys
from __future__ import unicode_literals
for vdev in vdevs: if not os.path.isfile(vdev): ret[vdev] = 'failed' else: if vdev not in ret: ret[vdev] = 'created' return ret
old_value = self[key] try: self[key] = value yield self finally: self[key] = old_value
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
resp = self._build_and_run_request(user, fields) self.assertEqual(resp.status_code, 200)
return False
backend = "multiprocessing"
LogoutPage(self.browser).visit()
self._create_course_unit(subtitles=True) self.video.hide_captions() self.assertFalse(self.video.is_captions_visible())
self.assertRaises(ValueError, sql.to_sql, frame=df_if_exists_1, con=self.conn, name=table_name, flavor='mysql', if_exists='notvalidvalue') clean_up(table_name)
staff_member_required,
X = csc_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
renderers = salt.loader.render(__opts__, __salt__) config = {}
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
assert isinstance(library_id, LibraryLocator) for library in self.get_courses(**kwargs): if library.location.library_key == library_id: return library return None
different = df2.copy() different.columns = df2.columns[::-1] self.assertFalse(df1.equals(different))
self.assertEqual(len(courses), 3)
query = self._course_key_to_son(location.course_key) query['definition.children'] = location.to_deprecated_string()
if not len(result_columns) and errors is not None: raise errors
if len(key) > 250: return False
from __future__ import unicode_literals
class ObjectiveSmallGradient: def __init__(self): self.it = -1
from salt.modules import openstack_config from salt.exceptions import CommandExecutionError
data = np.random.randint(0, 11, size=10) result = np.argmax(Series(data)) self.assertEqual(result, np.argmax(data))
'enable_lspci': bool,
contexts = to_list(response.context) if not contexts: self.fail(msg_prefix + "Response did not use any contexts to render the response")
for asset in assets: self.assertEquals(asset['displayname'], expected_displayname)
false_discovery_rate = np.mean([single_fdr(alpha, n_informative, random_state) for random_state in range(30)]) assert_greater_equal(alpha, false_discovery_rate)
self.assertRaises(TypeError, lambda bins: s.value_counts(bins=bins), 1)
context = RequestContext(request, processors=[csrf]) template = Template("") return HttpResponse(template.render(context))
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
from salt.states import status
names = self.index_names level_names = [level.name for level in self.index.levels] self.assertEqual(names, level_names)
import os
if res['retcode'] != 0: ret[zpool] = res['stderr'] if 'stderr' in res else res['stdout'] else: ret[zpool] = 'created'
self.assertEqual(config.get_text('.action-primary'), "Create") self.assertFalse(config.delete_button_is_present) config.save()
test_course_data = self.assert_created_course(number_suffix=uuid4().hex) self.assertTrue(are_permissions_roles_seeded(_get_course_id(self.store, test_course_data)))
with self.assertRaises(AttributeError): CommonInfo.objects.all()
vdata = sum(_SERVICE_TYPES[service] for service in services)
usage_key = UsageKey.from_string('i4x://edX/apis/html/interactive') usage_key.replace(course_key=self.course.id) self.assertEqual(Bookmark.get_path(usage_key), [])
idx = pd.CategoricalIndex(values, name='xxx') tm.assert_series_equal(idx.value_counts(), exp)
example_messages = ['test', 'me'] set_session_data(storage, example_messages) self.assertEqual(list(storage), example_messages)
source = find_staff_lock_source(xblock) return _xblock_type_and_display_name(source) if source else None
if True not in perms.values(): continue
pass
return sample_weight, 1., 0.
e = pd.Series([0, 1, 2, 3.5, 4]) tr, v = [3], [3.5] check_replace(tr, v, e)
form_errors = list(itertools.chain(*response.context['form'].errors.values())) self.assertIn(force_text(error), form_errors)
return self.q(css=self._bounded_selector('.team-card'))
if not chunk_size: chunk_size = self.DEFAULT_CHUNK_SIZE return self.size > chunk_size
if not eventtime: eventtime = str(int(time.time()))
num_optout = len(optouts) to_list = [recipient for recipient in to_list if recipient['email'] not in optouts] return to_list, num_optout
'edx_proctoring',
if self.chunksize is not None: if not self.s.is_table: raise TypeError( "can only use an iterator or chunksize on a table")
lines[ind] = newline + os.linesep
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
course_key = course.location.course_key
return iter(getattr(d, _iteritems)(**kw))
credit_api.set_credit_requirement_status( self.user.username, self.course.id, "grade", "grade", status="satisfied", reason={"final_grade": 0.95} )
if (not isinstance(indexer, slice) or indexer.stop - indexer.start != 1): return partial_selection(key, indexer)
g_endpoint_url = re.sub('/v2', '', g_endpoint_url['internalurl'])
result = df.drop_duplicates('C') expected = df.iloc[[0, 1, 5, 6]] tm.assert_frame_equal(result, expected)
get_request_dict = {} result = module.reset_problem(get_request_dict)
pass
if 'private' in cc and 'public' in kwargs: del cc['private'] elif 'public' in cc and 'private' in kwargs: del cc['public']
for v in values: if v is not None: ax = v._get_axis(self.axis) ax._reset_identity() return values
def lrange(*args, **kwargs): return list(range(*args, **kwargs))
tol = 0.000000001
self.assertEqual(os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS'], 'blah')
decision_only = OneVsRestClassifier(svm.SVC(probability=False)) decision_only.fit(X_train, Y_train) assert_raises(AttributeError, decision_only.predict_proba, X_test)
p, created = Person.objects.update_or_create(**params) self.assertFalse(created)
frgd_img = to_img(blend_arr, os)
ROLE = LibraryUserRole.ROLE def __init__(self, *args, **kwargs): super(OrgLibraryUserRole, self).__init__(self.ROLE, *args, **kwargs)
eobjs = mes.create_user(self.course_key) ees = EmailEnrollmentState(self.course_key, eobjs.email) self.assertEqual(mes, ees)
Membership.objects.create(membership_country=self.usa, person=self.jane, group=self.cia)
log.exception('Error occurred while sending payment confirmation email')
super(TestLTIModuleListing, self).setUp()
output = self.engine.render_to_string('namedendblocks06') self.assertEqual(output, '1_2_3')
self.crypt = kwargs.get('crypt', 'aes')
df = mkdf(N, 3) df.columns = ['a', 'a', 'b'] _check_df(df, None)
return com.isnull(self).any()
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.status = "must_retry" attempt.system_error("Error!")
if self.dataset_local_dir == "": return filename
center_id = random_state.randint(n_samples) if sp.issparse(X): centers[0] = X[center_id].toarray() else: centers[0] = X[center_id]
errstring = "Course with 'TestX/TS01/2015_Q7' key not found." with self.assertRaisesRegexp(CommandError, errstring): call_command('delete_course', 'TestX/TS01/2015_Q7')
HAS_LIBS = False try: from servicenow_rest.api import Client
labels_csr, new_inertia_csr = _labels_inertia( X_mb_csr, x_mb_squared_norms_csr, new_centers_csr) assert_greater(new_inertia_csr, 0.0) assert_less(new_inertia_csr, old_inertia_csr)
multi_db = True
if isinstance(self.grouper, Grouping): self.grouper = self.grouper.grouper
return '%s.%s' % (self.model._meta.label, self.name)
error_msg = _(u"You must agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
if rolename == FORUM_ROLE_ADMINISTRATOR and not has_instructor_access: return HttpResponseBadRequest("Operation requires instructor access.")
self.modules = defaultdict(dict) self.definitions = {} self.definitions_in_db = set() self.course_key = None
remove_review_policy(exam_id=exam_id)
return None
('&gotcha&#;<>', '&gotcha&#;<>'),
import salt.loader
agc = AgglomerativeClustering(n_clusters=2, connectivity=connectivity) agc.fit(X) n_samples = X.shape[0] n_nodes = agc.children_.shape[0] assert_equal(n_nodes, n_samples - 1)
if not ignore_failures: for o in self.not_valid_objs:
from salt.exceptions import SaltInvocationError from salt.utils import exactly_one
import zipfile self.assertRaises(zipfile.BadZipfile, df.to_csv, filename, compression="zip")
from __future__ import print_function
if self.y is None: return self.X else: return (self.X, self.y)
request.COOKIES[settings.SESSION_COOKIE_NAME] = 'abc'
engine=engine)
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 boot_volume: <volume id>
assets, count = contentstore().get_all_content_for_course(self.course.id) self.assertEqual(len(assets), 0) self.assertEqual(count, 0)
jll = safe_sparse_dot(X, (self.feature_log_prob_ - neg_prob).T) jll += self.class_log_prior_ + neg_prob.sum(axis=1)
self.assertRaises(KeyError, df.__getitem__, df.index[2], )
salt.utils.enable_ctrl_logoff_handler()
with outer_atomic(): entry = InstructorTask.objects.get(pk=entry_id) entry.task_state = PROGRESS entry.save_now()
'timeout': get_config_value('timeout', 1),
__virtualname__ = 'win_smtp_server'
return [field for field in self if field.is_hidden]
return { 'user': self.user, 'enrollment': self.enrollment, 'allowed': self.allowed, 'auto_enroll': self.auto_enroll, }
ssh_keys = get_public_keys(vm_)
rval = [None] * self.n_unique_specs
json.dumps(assets._get_asset_json( "sample_static.txt", content_type, upload_date, asset_location, None, lock)), "application/json"
if (indexer == -1).any(): return True
from __future__ import absolute_import import logging
return transform(X)
X, _, _, _, _ = _preprocess_data(X, y, True, True)
if not self or not other: return False
self.assertFalse(thread_page.check_if_selector_is_focused(selector='.thread-wrapper'))
log.debug( 'ext_tops.mongo: no document found in collection {0}'.format( collection ) ) return {}
from salt.pillar import mysql
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch, Mock
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
microsite.set_by_domain(self.microsite.site.domain) self.assertEqual(microsite.get_value('email_from_address'), self.microsite.values['email_from_address'])
self._active_count += 1
return course_metadata_utils.may_certify_for_course( self.certificates_display_behavior, self.certificates_show_before_end, self.has_ended() )
assert rbmA_params[0].shape[0] == rbmB_params[0].shape[0] assert len(rbmA_params[1]) == len(rbmB_params[1])
stack_k = stack[k] stack[k] = _cleanup(v) v = stack_k
self.assertTrue(np.allclose(result.value / 1000, expected.value / 1000))
self.user.passwordhistory_set.add(PasswordHistory(password='new_password')) self.user.save() self.assert_no_events_were_emitted()
if gid is not None: gid_group = None for lgrp in grps: if lgrp['gid'] == gid: gid_group = lgrp['name'] break
self._for_write = True try: return self.get(**lookup), False except self.model.DoesNotExist: return self._create_object_from_params(lookup, params)
'config_models',
return reverse_url(handler_name, 'course_key_string', course_key, kwargs)
import salt.utils.extmods
is_dynamic = False
SEARCH_ENGINE = "search.tests.mock_search_engine.MockSearchEngine" MOCK_SEARCH_BACKING_FILE = ( TEST_ROOT / "index_file.dat" ).abspath()
if not should_grade_section: should_grade_section = any( descriptor.location.to_deprecated_string() in submissions_scores for descriptor in section['xmoduledescriptors'] )
y = 0.5 * X.ravel() + rng.randn(n_samples, 1).ravel()
MESSAGE = _('Unable to run import command.')
step = n_samples // n_classes
raise SaltRenderError( 'Jinja variable {0}{1}'.format( exc, out), buf=tmplstr)
pass
if any(new_locator.block_id == child.block_id for child in new_parent.children): continue new_parent_cursor = 0 for old_child_loc in old_parent.children: if old_child_loc.block_id == draft_location.block_id:
s = pd.Series(np.arange(10), pd.date_range('2014-01-01', periods=10))
except CyclicDefinitionError: return default_location
self.assert_student_in_group(new_groups[0], new_user_partition)
return form.save(commit=False)
return self.make_call( reverse('teams_detail', args=[team_id]), expected_status, 'patch', json.dumps(data) if data else None, 'application/merge-patch+json', **kwargs )
c = Categorical(["a", "b", "c", "a"]) with tm.assert_produces_warning(FutureWarning):
options.modules = [os.path.normpath(labels) for labels in options.modules]
raise WorkerInterrupt()
self.assertEqual(self.func(None), [sessions.W013])
result = f.clean('12-21-2010') self.assertEqual(result, date(2010, 12, 21))
conn = mail.get_connection(username='', password='') conn.close()
if crypt.crypt('', '') is None: crypt = None
'provider', 'provider.oauth2', 'edx_oauth2_provider',
beta1 = sqrt_inner_product(bs)
return self.q(css='.components-list').visible
try: import Crypto
self._assert_enable_certs_button(True)
if weight is None or raw_total == 0: return (raw_correct, raw_total) return (float(raw_correct) * weight / raw_total, float(weight))
raise NotImplementedError()
response = self._load_dashboard() self.assertContains(response, "credit-request-approved-msg")
return usage_key in self.modules[usage_key.course_key]
BULK_EMAIL_DEFAULT_FROM_EMAIL = 'no-reply@example.com'
cs_clone = CsOutput('GEOSCoordSeq_clone', [CS_PTR]) create_cs = CsOutput('GEOSCoordSeq_create', [c_uint, c_uint]) get_cs = CsOutput('GEOSGeom_getCoordSeq', [GEOM_PTR])
classes = np.unique(iris.target) clf_samme = prob_samme = None
idx1 = pd.timedelta_range('1 day', '31 day', freq='D', name='idx')
response_dict = self._get_page_data(response) self.assertEqual(response_dict['full_name'], full_name)
self.assertNotIn('broadcast_address', self.ipv6_network._cache) self.assertNotIn('hostmask', self.ipv6_network._cache)
import salt.utils
return self.q(css=self._bounded_selector('h3.card-title')).map(lambda e: e.text).results
from __future__ import unicode_literals
least_squares, info = solve_cholesky(L[:n_active, :n_active], sign_active[:n_active], lower=True)
instance = RenamedField() self.assertTrue(hasattr(instance, 'get_fieldname_display')) self.assertFalse(hasattr(instance, 'get_modelname_display'))
wait_for_visible(css_selector, index=index) retry_on_exception(lambda: css_find(css_selector)[index].fill(text)) wait_for(lambda _: css_has_value(css_selector, text, index=index)) return True
cache1 = caches['default'] cache2 = caches['default'] self.assertIs(cache1, cache2)
renderer = kwargs.pop('renderer', None) if renderer: self.renderer = renderer super(RendererMixin, self).__init__(*args, **kwargs)
return T.nnet.sigmoid(conditional_params[0])
request.META = {'HTTP_HOST': 'example.net'} with self.assertRaises(ObjectDoesNotExist): get_current_site(request)
if result['retcode'] in (0, 2): __context__[k] = ret = not result['retcode']
try: kwargs['format'] = _FORMAT_MAP[format.lower()] except: raise TypeError("invalid HDFStore format specified [{0}]" .format(format))
self.assertContains(response, "Please enter your new password")
result = idx / 2
import integration
from __future__ import unicode_literals
CHAPTER = 'Test Section' SECTION = 'Test Subsection' EXPECTED_SCORES = [(0, 3), (0, 1)]
with open(os.path.join(self.module_dir, '__init__.py'), 'w') as fh: fh.write(deep_init_base) fh.flush()
switch_user(request, lti_user, lti_consumer)
module = self.get_student_module(username, descriptor) state = json.loads(module.state) return state['attempts']
class HiddenForm(Form): data = IntegerField(widget=HiddenInput)
self._auto_auth(self.STAFF_USERNAME, self.STAFF_EMAIL, True) self.course_outline.visit() section = self.course_outline.section_at(section_index) section.change_name(self.EDITED_CHAPTER_NAME)
x_likelihood = numpy.sum((-energy_fn(1.0) + hq - log_z)[:batch_size0])
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
data.update(invalid_fields)
(12, True, False, u"False")
epoch_num = 15 termination_criterion = EpochCounter(epoch_num)
is_active = models.BooleanField(default=True)
return self.q(css=BANNER_SELECTOR)
t = field.type
self._mock_ecommerce_courses_api(self.course_key, self.COURSE_API_RESPONSE) response_providers = get_credit_provider_display_names(self.course_key) self.assertListEqual(self.PROVIDERS_LIST, response_providers)
with self.assertRaises(CreditRequestNotFound): api.update_credit_request_status("invalid_uuid", self.PROVIDER_ID, "approved")
result = s.reindex(new_index).ffill() assert_series_equal(result, expected.astype('float64'))
def f(): s[Series([], dtype=bool)]
from salt.modules import qemu_nbd
dist_param = value
split_test = self._update_partition_id(-50) self.assertEqual(2, len(split_test.children)) self.assertEqual(initial_group_id_to_child, split_test.group_id_to_child)
est = TreeEstimator(min_samples_split=0.2, max_leaf_nodes=max_leaf_nodes, random_state=0) est.fit(X, y) node_samples = est.tree_.n_node_samples[est.tree_.children_left != -1]
self.q(css='a[data-section=data_download]').first.click() data_download_section = DataDownloadPage(self.browser) data_download_section.wait_for_page() return data_download_section
request = self.rf.get('/slash') r = CommonMiddleware().process_request(request) self.assertEqual(r.status_code, 301)
import salt.exceptions
output = self.engine.render_to_string('i18n02') self.assertEqual(output, 'xxxyyyxxx')
wiki_courses = self.store.get_courses_for_wiki('999') self.assertEqual(len(wiki_courses), 0)
braces = '}' * num_braces rval = basic_setup + \ setup_nv_hid_acts + \ setup_nv_filters + \ setup_nv_targets + \ do_convolution + \ braces rval = rval % locals() return rval
import logging
self.other_sequential_2.children.append(self.other_vertical_1.location)
f_id = models.IntegerField()
return dict((k, self.errored_courses[k].errors) for k in self.errored_courses)
import urllib.request urlopen = urllib.request.urlopen
offset = self._offset() offset2 = self._offset() offset2.normalize = True self.assertEqual(offset, offset2)
raise GitLockError( exc.errno, 'Checkout lock exists for {0} remote \'{1}\'' .format(self.role, self.id) )
self.assertInHTML('<option value="0">empty_label</option>', w.render('mydate', ''), count=3)
with open(report_file) as f: violations_list = f.readlines() num_lines = len(violations_list) return num_lines, violations_list
tracker._initialize_backends_from_django_settings()
return self.q(css=self.get_selector(css=css_selector))
project = 'Pylearn2' copyright = '2011-2015, LISA lab'
pass
self.assertTrue(did_load_item)
def fit(self, X, y): self.y = y return self def predict(self, X): return self.y
uncertainty_index = uncertainty_index = np.argsort(pred_entropies)[-5:]
for _def_str in _whitelist_method_generator(DataFrame, _apply_whitelist): exec(_def_str)
def receive_data_chunk(self, raw_data, start): raise CustomUploadError("Oops!")
import logging import os import shutil
pass
return self.save()
beta = 5 eps = 1e-6 graph.data = np.exp(-beta * graph.data / graph.data.std()) + eps
nrs = rs - rs.shift(1) nxp = xp.diff() assert_series_equal(nrs, nxp)
if out['retcode']: ret = out['stderr'].strip() else: ret = out['stdout'].strip()
listen_for_course_publish(self, self.course.id)
additional_requested_fields = [ 'student_view_data', 'block_counts', 'nav_depth', 'block_types_filter', ] for additional_field in additional_requested_fields: field_value = cleaned_data.get(additional_field)
queryset = CourseMode.objects.all()
if directory is not None: cmd.extend(['--working-dir', directory])
try: import salt.cloud HAS_SALTCLOUD = True except ImportError: HAS_SALTCLOUD = False
return frozenset()
from __future__ import absolute_import from unittest2 import skipIf from integration.cloud.helpers import random_name from salt.utils import virtualbox import json import logging import os import unittest import integration
salt '*' vsphere.get_vsan_eligible_disks my.esxi.host root bad-password
_ = lambda text: text
return self._index[mask.cumsum() >= self._window]
send_mail_to_student(student_email, email_params, language=language)
if signal.getsignal(signal.SIGINT) is signal.SIG_DFL: signal.signal(signal.SIGINT, self._handle_signals)
Y = None
course_id = CourseKeyField( max_length=255, db_index=True, help_text="Which course is this group associated with?", )
return self._service
cloned = clone(self) cloned.theta = theta return cloned
html_theme = 'scikit-learn'
'job_cache_store_endtime': bool,
if credit_type is not None: response_element.set('partial_credit', str(credit_type))
comp = self.localize(tz, dr[0].to_pydatetime().replace(tzinfo=None)).tzinfo self.assertIs(central[0].tz, comp)
return False
__virtualname__ = 'imgadm'
categories = np.empty(N_CATEGORIES, dtype=object) for k in category_names.keys(): categories[category_names[k]] = k
Created Certificate for "DBReplica_No.1": "/etc/pki/my_little/certs/DBReplica_No.1.crt"
if values is not None: course_ids = list(set(course_ids) & set(values))
self.assertIn(self.seq_loc, course.system.module_data)
result = self.panel4d.reindex() assert_panel4d_equal(result, self.panel4d) self.assertFalse(result is self.panel4d)
precision = tp / T.maximum(1., tp + fp) return precision
return None
if include_pat and not exclude_pat: ret = retchk_include elif exclude_pat and not include_pat: ret = retchk_exclude elif include_pat and exclude_pat: ret = retchk_include and retchk_exclude else: ret = True
required_boto3_version = '1.2.1'
ret['comment'] = 'User {0} is already present'.format(name) return ret
import msgpack
def get_absolute_url(self): return "/users/%s/" % urlquote(self.name)
([TestTransformer1()], []),
dr = date_range('03/06/2012 00:00', periods=200, freq='W-FRI', tz='US/Eastern')
del expected_event['event']['currentTime']
assert library.location.library_key.version_guid is not None return library.location.library_key.version_guid
return "DATE_TRUNC('%s', %s)" % (lookup_type, field_name)
module = module + '.' if not module.endswith('.') else module
from __future__ import absolute_import import functools import copy import logging import os import pipes import time import traceback
self.enrollment.can_refund = True self.assertTrue(self.enrollment.refundable())
classes = [pd.Series, pd.DataFrame, pd.Panel, pd.Panel4D]
msg += 'salt-master will crash pretty soon! ' level = logging.CRITICAL
self.page.visit() config = self.page.experiment_group_configurations[0] config.toggle() config.click_outline_anchor()
orig_filters = admin_email_handler.filters try: admin_email_handler.filters = []
from __future__ import absolute_import import copy import logging try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False
result = f.clean('1:30:05 PM 21/12/2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
self.check_discussion( tab_list=self.tabs_with_discussion, discussion_link_in_course="other_discussion_link", expected_discussion_link="other_discussion_link", expected_can_display_value=True, )
packed_coef_inter = _pack(self.coefs_, self.intercepts_)
ccx = CcxFactory(course_id=self.course.id, coach=self.coach) ccx_locator = CCXLocator.from_course_locator(self.course.id, unicode(ccx.id))
country_label = _(u"Country") error_msg = _(u"Please select your Country.")
'lms.djangoapps.teams',
self.video.wait_for_state('pause')
selector = RFE(estimator, step=5) sel = selector.fit(X, y) assert_equal(sel.support_.sum(), n_features // 2)
problem_text = re.sub(r"startouttext\s*/", "text", problem_text) problem_text = re.sub(r"endouttext\s*/", "/text", problem_text) self.problem_text = problem_text
sort_order = 'name' topics = get_alphabetical_topics(course)
self.assertEquals(xmodule_tabs.CourseTabList.get_tab_by_id(self.course.tabs, tab.tab_id), tab)
self.assertQuerysetEqual(Choice.objects.filter(choice__iexact=None), [])
values = self.values mask = isnull(values)
return os.geteuid()==0
from __future__ import unicode_literals
break
self.assertEqual(dive._state.db, 'other') chris.save() dive.editor = chris html5.editor = mark
class Person(Form): first_name = CharField() last_name = CharField() birthday = DateField()
verify_name(self.html_usage_key, self.seq_usage_key, "Duplicate of 'Text'")
if columns is not None: columns = _ensure_index(columns)
return request.build_absolute_uri(staticfiles_storage.url(name))
repr(df)
calendar0 = self.selenium.find_element_by_id('calendarin0') tds = calendar0.find_elements_by_tag_name('td')
cached_metadata = self._get_cached_metadata_inheritance_tree(course_id, force_refresh=True) if runtime: runtime.cached_metadata = cached_metadata
return self._topology(capi.geos_linemerge(self.ptr))
self._wrapped = empty
'an hour ago', '%(count)s hours ago', count
self.assertEqual(tag.tag, 'stinky')
with patch('student.models.cc.User.save'): uname = 'student' email = 'student@edx.org'
self._consolidate_inplace() return any([block.is_datelike for block in self.blocks])
suff_stats = np.zeros(exp_topic_word_distr.shape) if cal_sstats else None
df = self.frame.copy() resetted = self.frame.reset_index() df.reset_index(inplace=True) assert_frame_equal(df, resetted, check_names=False)
from pandas.core.algorithms import factorize return factorize(self, sort=sort, na_sentinel=na_sentinel)
return os.path.basename(_bcsys(dev, 'cache'))
from salt.states import composer
content_type = 'application/atom+xml; charset=utf-8' ns = "http://www.w3.org/2005/Atom"
assert_array_almost_equal(np.asarray([1.0, 2.0, 3.0]), cw)
link_cohort_to_partition_group( test_cohort, self.user_partition.id, self.groups[0].id, ) add_user_to_cohort(test_cohort, self.student.username) self.assert_student_in_group(self.groups[0])
return social_auth.uid[len(self.idp_slug) + 1:]
from __future__ import unicode_literals
g1 = wkb_r.read(wkb) g2 = wkb_r.read(hex) for geom in (g1, g2): self.assertEqual(ref, geom)
self.dashboard_page.visit()
kwargs.setdefault('label_suffix', '') super(ApiAccessRequestForm, self).__init__(*args, **kwargs)
delayed_grade_func = lambda: self._send_grade_response( callback_url, xqueue_header, self.post_dict['xqueue_body'] )
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
with self.assertNumQueries(1): self.field_data_cache = FieldDataCache([self.mock_descriptor], course_id, self.user) self.kvs = DjangoKeyValueStore(self.field_data_cache)
default=_("Text")
cls.clear_caches()
self.user_preference.value = "new value" self.user_preference.save() self.assert_user_setting_event_emitted(setting=self.TEST_KEY, old=self.TEST_VALUE, new="new value")
self._convert_to_draft(xblock.location, user_id, ignore_if_draft=True)
obj = TimedeltaIndex([]) self.assertTrue(pd.isnull(getattr(obj, op)()))
salt '*' pkg.install sources='[{"<pkg name>": "salt://pkgs/<pkg filename>"}]' instance="overwrite"
self.assertEqual(microsite.get_backend(None, BaseMicrositeBackend), None)
'ENFORCE_PASSWORD_POLICY': False,
self.assertEquals(self.draft_store.get_all_asset_metadata(course.id, 'asset'), [])
result = Series(result, index=self.index, name=self.name)
params = dict(params.items())
self.source_expressions.pop(0) return super(AsKML, self).as_sql(compiler, connection)
if is_prerequisite_courses_enabled(): fulfill_course_milestone(course_key, user)
return None
problem_page.fill_answer("20") problem_page.click_check() self.assertTrue(problem_page.is_correct())
try: dt = xldate.xldate_as_tuple(cell_contents, epoch1904)
tmplstr = tmplstr.decode(SLS_ENCODING)
assert_frame_equal(p.ix[:, date], p.major_xs(date)) assert_frame_equal(p.ix[:, date, :], p.major_xs(date))
if os.path.dirname(form_data['file_field'].name) != '': return HttpResponseServerError() return HttpResponse('')
best = sorted(grid_scores, key=lambda x: x.mean_validation_score, reverse=True)[0] self.best_params_ = best.parameters self.best_score_ = best.mean_validation_score
from __future__ import absolute_import import logging
if limit is not None: raise NotImplementedError("specifying a limit for 'fillna' has " "not been implemented yet")
THOUSAND_SEPARATOR = ','
suff_stats = np.zeros(self.components_.shape) for sstats in sstats_list: suff_stats += sstats suff_stats *= self.exp_dirichlet_component_
n_samples_sizes = [5, 10, 20] n_features = 3 rng = np.random.RandomState(42)
EmptyPromise( lambda: cohort_name == cohort_management_page.get_selected_cohort(), "Waiting for new cohort" ).fulfill() cohort_management_page.add_students_to_selected_cohort([student])
mem -= 256 for vm_ in list_domains(): dom = _get_domain(vm_) if dom.ID() > 0: mem -= dom.info()[2] / 1024 return mem
value, lookups, used_joins = self.prepare_lookup_value(value, lookups, can_reuse, allow_joins)
test_cases = [('unsubmitted', 'unanswered'), ('incomplete', 'incorrect'), ('incorrect', 'incorrect')]
return self.q(css="#search_attempt_id").present
if category == "static_tab": dog_stats_api.increment( DEPRECATION_VSCOMPAT_EVENT, tags=( "location:xml_load_extra_content_static_tab", u"course_dir:{}".format(course_dir), ) )
beta, indices, mask = self._rolling_ols_call return beta[indices]
task_input = {'statuses_to_regenerate': [CertificateStatuses.deleted, CertificateStatuses.generating]}
if view_name == 'ccx_manage_student' and not is_email(identifier): self.assertContains(response, 'Could not find a user with name or email ', status_code=200)
start_index = start_index + len(start_delim)
container.visit() container.delete(0)
STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'
course_orphans = self.store.get_orphans(course_locator) self.assertEqual(len(course_orphans), 0) self.store.delete_item(vertical.location, self.user_id)
import salt.utils import salt.ext.six as six
self.clear_autoreload_caches() filenames = set(autoreload.gen_filenames(only_new=True)) filenames_reference = set(autoreload.gen_filenames()) self.assertEqual(filenames, filenames_reference)
'course_id': u'edX/toy/2012_Fall',
fi exit 0
course_enrollment.mode = u'verified' course_enrollment.save() self.assertEqual(course_enrollment.mode, u'verified')
self.set_logged_in_cookies(request)
from __future__ import absolute_import
if grad.shape[0] > n_features: grad[-1] = z0.sum() return out, grad
try: _table_file_open_policy_is_strict = ( tables.file._FILE_OPEN_POLICY == 'strict') except: pass
path = os.path.join(integration.FILES, 'conf', 'cloud.providers.d', provider + '.conf') config = cloud_providers_config(path)
iris = datasets.load_iris()
if ( transcripts_presence['youtube_diff'] and transcripts_presence['youtube_local'] and
url_pattern = '/u/test#about_me' response = self._auto_auth({ 'username': 'test', 'redirect_to': url_pattern, 'staff': 'true', }, status_code=302)
return self.fields_map[field_name]
from salt.modules import kapacitor
for db in connections: recorder = MigrationRecorder(connections[db]) recorder.migration_qs.filter(app='migrations').delete()
return self._extra_fields_setting.get(field_name) == "required"
res, lidx, ridx = self.index.join(other, how='inner', return_indexers=True)
self._mixin_after_parsed_funcs.append(self.__merge_config_with_cli)
from salt.exceptions import SaltInvocationError from salt.utils.reclass import ( prepend_reclass_source_path, filter_out_source_path_option, set_inventory_base_uri_default )
self.courseware_page.click_previous_button_on_bottom() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 2, next_enabled=True, prev_enabled=True)
return u"Invalid user preference key '{preference_key}'.".format(preference_key=preference_key)
X_3d = X[:, :, np.newaxis] clf = MockClassifier(allow_nd=True) scores = cross_val_score(clf, X_3d, y2)
self.create_credentials_config() self.mock_credentials_api(self.user, data={'results': []}) actual = get_user_program_credentials(self.user) self.assertEqual(actual, [])
EmptyPromise( lambda: self.current_form != old_form, "Finish toggling to the other form" ).fulfill()
if course_tabs != course_module.tabs: course_module.tabs = course_tabs
import logging
repr(slo)
self.navigate_to_video() self.video.show_captions()
if auth.user_has_role(user, CourseInstructorRole(course_id)): return 'instructor' else: return 'staff'
if (self.is_data_valid is not None and not self.is_data_valid(X_subset, y_subset)): continue
username = self.cleaned_data.get('username') return username or ''
legacy_profile = UserProfile.objects.get(id=self.user.id) legacy_profile.year_of_birth = 2000 legacy_profile.save()
other_parent_loc = course_key.make_usage_key('vertical', 'zeta') other_parent = store.get_item(other_parent_loc) self.assertIn(shared_item_loc, other_parent.children)
n_samples_per_label = np.bincount(labels)
_infinitedict = lambda: collections.defaultdict(_infinitedict)
return settings.FEATURES.get(cls.ENABLE_INDEXING_KEY, False)
y[::5] += 3 * (0.5 - rng.rand(X.shape[0]/5))
answer.field_value = value answer.course_key = course_key answer.save()
assert((display_src and display_class) or (not display_src and not display_class))
from __future__ import absolute_import import os import tempfile import sys import errno import time import random import shutil import salt.ext.six as six
le = LabelEncoder() le.fit([1, 2, 3, 1, -1]) assert_raises(ValueError, le.inverse_transform, [-1])
if name is None: name = getattr(result, 'name', None) if name is None: name = self._orig.name
clf = GradientBoostingRegressor(n_estimators=10, random_state=1) clf.fit(boston.data, boston.target)
s = Series(list('abcdef'))
self.assert_enrollment_status(as_server=True)
if six.text_type(remote) not in repo['url']: continue
expected = s1.apply(lambda x: x / np.timedelta64(m, unit)) result = s1 / np.timedelta64(m, unit) assert_series_equal(result, expected)
(ModuleStoreEnum.RevisionOption.published_only, 'assertOLXIsDeleted'), (ModuleStoreEnum.RevisionOption.all, 'assertOLXIsDeleted'), (None, 'assertOLXIsDeleted'),
return URLPath.create_article(parent, slug, title=slug)
total_mu = (n_new * new_mu + n_past * mu) / n_total
clf.fit(X, y) assert_array_equal(np.diff(clf.scores_) > 0, True)
def visit_table(self, node): self.context.append(self.compact_p) self.compact_p = True
X2 = rng.randint(5, size=(6, 100)) y2 = np.array([1, 1, 2, 2, 3, 3])
link = utils.get_lms_link_for_item(location, True) self.assertEquals( link, "//preview.localhost/courses/mitX/101/test/jump_to/i4x://mitX/101/vertical/contacting_us" )
try: result = np.empty(len(values), dtype=object) result[:] = values except ValueError: result[:] = [tuple(x) for x in values]
return self.make_call(reverse('teams_detail', args=[team_id]), expected_status, 'get', data, **kwargs)
basedirs = _normalize_basedir(basedir) repos = list_repos(basedirs)
angle = np.arctan(u[1] / u[0])
if kwargs['shell'] is True: kwargs['executable'] = shell kwargs['close_fds'] = True
Certificate "MasterDBReplica_No.2" already exists
yield prev_end, "E225 missing whitespace around operator"
name = _sdecode(name) snap_name = _validate_snap_name(name, snap_name, runas=runas)
return self._data.view(np.ndarray)
self.assertTrue(self._is_valid_key(key), msg="Failed for key length {0}".format(length))
if not include.isdisjoint(exclude): raise ValueError('include and exclude overlap on %s' % (include & exclude))
create_unknown_user = False
return self.apply(lambda x: x.bfill(limit=limit))
ss = cval.ShuffleSplit(10, random_state=21) assert_array_equal(list(a for a, b in ss), list(a for a, b in ss))
mpoly = OGRGeometry(mp.wkt, srs=None) mpoly.srs = mpoly.srs mpoly.srid = mpoly.srid
tsf = self.tsframe.copy() with ensure_clean(self.ext) as path:
from __future__ import absolute_import import logging
command = app_name
df.iloc[0] = np.nan expected = df[df['values'] > 2.0]
params_bad_ordernum = params.copy() params_bad_ordernum['orderNumber'] = str(order1.id + 10) with self.assertRaises(CCProcessorDataException): payment_accepted(params_bad_ordernum)
self._pydsl_render_stack = []
for req_file in PYTHON_REQ_FILES: sh("pip install -q --disable-pip-version-check --exists-action w -r {req_file}".format(req_file=req_file))
super(ContentStoreToyCourseTest, self).setUp() self.staff_usr = AdminFactory.create() self.non_staff_usr = UserFactory.create() self.client = Client()
buf = g.buffer(width, quadsegs) self.assertEqual(exp_buf.num_coords, buf.num_coords) self.assertEqual(len(exp_buf), len(buf))
ret['result'] = True ret['comment'] = 'image {0} is present'.format(name)
tests = self.test_loader.discover(start_dir=label, **kwargs)
Language = namedtuple('Language', 'code name')
return (None, None)
self._credit_provider_callback(request_uuid, 'approved') self._assert_request_status(request_uuid, "approved")
assert_equals(len(base64.urlsafe_b64encode(encrypted_aes_key)), 344)
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
always_cohort_inline_discussions = True
from __future__ import absolute_import
response = copy(obj_a)
self.forward_events = tornado.ioloop.PeriodicCallback(self._forward_events, self.opts['syndic_event_forward_timeout'] * 1000, io_loop=self.io_loop) self.forward_events.start()
from salt.modules import logrotate
CourseEnrollment.unenroll(self.user, self.courses[0].id, skip_refund=True)
class CustomURLConfMiddleware(MiddlewareMixin): def process_request(self, request): request.urlconf = 'template_tests.alternate_urls'
if save_definition: return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=None, logon_type=task_definition.Principal.LogonType)
group_vpc = conn.create_security_group(name=group_name, description=group_description, vpc_id=vpc_id) retrieved_group_id = boto_secgroup.get_group_id(group_name, **conn_parameters) self.assertEqual(group_classic.id, retrieved_group_id)
team.add_user(self.user)
return GEOSGeometry(capi.geom_clone(self._get_single_internal(index)), srid=self.srid)
zendesk_tags = list(tags.values()) + ["LMS"]
self.export_fs = None
return len(self.temps)
class Meta(AbstractUser.Meta): swappable = 'AUTH_USER_MODEL'
if self.transcript_language == 'en': return Transcript.asset(self.location, youtube_id).data
pv = get_weights_report.get_weights_report(model_path=model_path, rescale=rescale, border=border) if out is None: pv.show() else: pv.save(out)
if self.instance: raise ValidationError("This field is not allowed in an update.") return value
self.assertEqual(len(response.redirect_chain), 1) self.assertIn(302, response.redirect_chain[0]) self.assertEqual(len(outbox), outbox_count) if send_email:
self.names_with_path = path_with_names
student_count_percent = 0 if total_student_count.get(child.location, 0) > 0: student_count_percent = count_grade * 100 / total_student_count[child.location]
exc_info_on_loglevel=logging.DEBUG
response_dict = _reset_syslog_config_params(host, username, password, cmd, resets, valid_resets, protocol=protocol, port=port) ret.update({host: response_dict})
data = cls._coerce_to_ndarray(data)
reraise_as(ImportError("Could not import %s; ImportError was %s" % (modulename, str_e)))
self.cohort_management_page.select_cohort(cohort_name) self.cohort_management_page.set_cohort_associated_content_group(content_group) self._verify_settings_saved_and_reload(cohort_name)
schedule.__salt__ = {} schedule.__opts__ = {} schedule.__pillar__ = {}
event_name = '.'.join(['edx', 'certificate', 'configuration', event_name]) tracker.emit(event_name, event_data)
def inner(*args, **kwargs): with self: return func(*args, **kwargs) return inner
return {d[0]: i for i, d in enumerate(self.get_table_description(cursor, table_name))}
categories = self.metadata self.data = Categorical.from_codes(self.data.ravel(), categories=categories, ordered=self.ordered)
raise NotImplementedError()
import salt.ext.six as six from salt.exceptions import SaltClientError
_refresh_course_tabs(request, course_module)
return HttpResponse()
if self._non_form_errors is None: self.full_clean() return self._non_form_errors
self.ensure_registered()
from __future__ import absolute_import
if 'family' in _CREATE_OPTIONS[set_type]: cmd = '{0} family {1}'.format(cmd, ipset_family)
if driver == 'linode' and profile_key.get('clonefrom', False): non_image_drivers.append('linode') non_size_drivers.append('linode')
self.assertFalse(BulkEmailFlag.feature_enabled(self.course.id)) response = self.client.get(self.url) self.assertNotIn(self.email_modal_link, response.content)
self.problem = ItemFactory.create( category="problem", parent_location=self.library.location,
res = dfobj.replace(re.compile(r'\s*\.\s*'), nan, regex=True) assert_frame_equal(dfobj, res.fillna('.'))
for node in range(len(children_map)): self.assertIn(node, block_structure) self.assertNotIn(len(children_map) + 1, block_structure)
if self.__manager: yield else: try: self.__manager = _BulkAssertionManager(self) yield except Exception: raise else: manager = self.__manager self.__manager = None manager.raise_assertion_errors()
content = contentstore('trashcan').find(asset_key, throw_on_not_found=False) self.assertIsNotNone(content)
if not s: return
for svd_sparse, svd_dense in svds_sparse_v_dense: assert_array_almost_equal(svd_sparse.explained_variance_ratio_, svd_dense.explained_variance_ratio_)
try: return content and content['user_id'] == str(user.id) except KeyError: return False
p._set_single(0, 100) self.assertEqual(p.coords, (100.0, 2.0, 3.0), 'Point _set_single')
with transaction.atomic(): objs = serializers.deserialize(self.serializer_name, self.fwd_ref_str) with connection.constraint_checks_disabled(): for obj in objs: obj.save()
if which_norb == 'big': self.label_index_to_name = (self.label_index_to_name +
with self.assertRaises(PageNotFoundError): self.get_comment_list(thread, endorsed=True, page=2, page_size=10)
n_nonzero_coefs = max(int(0.1 * X.shape[1]), 1)
return self.q(css=CARD_TITLE_CSS).map(lambda e: e.text).results
where = "index >= '%s'" % beg_dt result = store.select('df', where=where) tm.assert_frame_equal(expected, result)
return (loads, (dumps(np.asarray(a), protocol=HIGHEST_PROTOCOL),))
"Test for Annotation Xmodule functional logic."
if not args: format_str = urllib.unquote(format_str) return u"{0} - - [{1}] {2}\n".format( self.client_address[0], self.log_date_time_string(), format_str % args )
self.estimators_ = []
exc_value = exceptions.pop() tb = self.tb if six.PY2 or not exceptions else exc_value.__traceback__
errstring = "Unparsable course_id" with self.assertRaisesRegexp(CommandError, errstring): call_command('export_olx', 'InvalidCourseID')
cls.engine().remove(cls.DOCUMENT_TYPE_NAME, [course_team.team_id])
from salt.utils import migrations from salt.utils import kinds
#html_short_title = None
import logging
(['honor', 'verified', 'audit'], 'verified'),
return {self.name: getattr(obj, self.attname)}
return False
return ( self.enabled and self.enable_studio_tab and bool(self.authoring_app_js_path) and bool(self.authoring_app_css_path) )
content = json.loads(response.content) self.assertEqual(response.status_code, 200) self.assertEqual(content['return_code'], 0)
profile_image_names = get_profile_image_names(username) remove_profile_images(profile_image_names)
raise NotImplementedError("%s doesn't implement make_state" % type(self))
response = self.client.get( self._url(), HTTP_ACCEPT="text/plain", ) self.assertEqual(response.status_code, 406)
self.reset_password_page.visit()
dt = as_timestamp(dt) if not self.onOffset(dt): dt = dt - self.__class__(1, normalize=self.normalize, **self.kwds) return dt
self.read_csv(StringIO(data)) self.read_table(StringIO(data), sep=',')
modulestore().update_item(course, ModuleStoreEnum.UserID.test)
return int(self.as_double())
problem1_content_before_switch = self.problem_page.problem_content
self.assertEqual(courses_list, courses_list_by_groups)
return iter(getattr(d, _iterlists)(**kw))
PACKAGED_FOR_SALT_SSH_FILE = os.path.join(os.path.abspath(SETUP_DIRNAME), '.salt-ssh-package') PACKAGED_FOR_SALT_SSH = os.path.isfile(PACKAGED_FOR_SALT_SSH_FILE)
rng = np.random.RandomState(1999) n, p = 50, 3
out, err = DETAILS['server'].sendline(cmd)
user = create_user_and_user_profile(email, username, name, country, password)
from __future__ import unicode_literals
self.assertIs(c.parent, p)
self._initialize_mixed(mappings={})
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=real_user_ids)), expected_success )
if os.path.exists(venv_path): shutil.rmtree(venv_path) if os.path.exists(requirements_file_path): os.unlink(requirements_file_path) raise
if self.spheroid:
if style_kwargs: first_row = startrow + cell.row + 1 last_row = startrow + cell.mergestart + 1 first_col = startcol + cell.col + 1 last_col = startcol + cell.mergeend + 1
return ret1 == ret2 == 0
parent = verticals[0] new_block = self.store.create_child( self.user.id, parent.location, 'html', 'new_component' )
from __future__ import absolute_import import time import datetime
stacklevel = 2
self.assertEqual(set(subtree_roots_urls), set(expected_roots_urls))
execute_from_command_line(['django-admin', 'help', 'compilemessages'])
self._auto_auth() self.client.logout() self._auto_auth() self.assertEqual(User.objects.all().count(), 2)
try: import requests import requests.exceptions HAS_LIBS = True except ImportError: HAS_LIBS = False
import numpy as np from sklearn.tree import DecisionTreeRegressor import matplotlib.pyplot as plt
result.index = result.index._to_safe_for_reshape() result = result.append(margin_dummy)
DATE_INPUT_FORMATS = [
self.assertEquals(resp.status_code, 400)
self._set_selection_from_grouper()
capa_system = test_capa_system() capa_system.can_execute_unsafe_code = lambda: False
from __future__ import absolute_import import logging
return self._folds[k]
self.assertEqual(alice_profile.user.username, 'alice') self.assertEqual(bob_profile.user.username, 'bob')
from __future__ import absolute_import
lines[ind] = ''
exc_info_on_loglevel=logging.DEBUG
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
def myattr_dec(func): def wrapper(*args, **kwargs): return func(*args, **kwargs) wrapper.myattr = True return wraps(func)(wrapper)
bad_id = SlashSeparatedCourseKey(u'Broken{}'.format(self.course.id.org), 'hello', self.course.id.run + '_typo')
time_format = _get_date_time_format(time) dt_obj = datetime.strptime(time, time_format)
if url is not None:
estimator_weight = self.learning_rate * np.log(1. / beta)
izip = zip(* map(reversed, ( self.grouper.names, self.grouper.get_group_levels(), [grp.in_axis for grp in self.grouper.groupings])))
response = self.client.get(reverse('admin:admin_views_language_changelist'), {'o': '-1'}) self.assertContentBefore(response, link1, link2)
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
self.assertEqual(Celebrity.objects.count(), num_celebs)
self._login(staff_email, staff_password, should_succeed=False, err_msg_check="Your password has expired due to password policy on this account")
mailchimp = MailSnake(api_key) result = mailchimp.ping() log.debug(result) return mailchimp
module = CapaFactory.create(attempts=1)
render_kw_only_separator = False
for obj_name, obj in attrs.items(): new_class.add_to_class(obj_name, obj)
assert_true(sp.issparse(X1)) assert_true(sp.issparse(Y1)) assert_equal(60915113, X1.data.size) assert_equal(2606875, Y1.data.size)
self.assertRaises(Exception, func, p1, p)
match = uncommented_line_start_index_regex.search(template, line_start_index) if match is None: return None elif match.start() < start_index: return start_index else: return match.start()
raise NotImplementedError( 'subclasses of Loader must provide a load_template_source() method' )
return self.q(css='.signatory-title-value').first.html[0]
from salt.exceptions import SaltSystemExit
indexed_count = self.reindex_course(store) self.assertFalse(indexed_count)
self.verify_my_team_count(1)
from salttesting.helpers import ensure_in_syspath
self.assertEqual(1, len(mail.outbox)) self.assertIn(expected_message, mail.outbox[0].subject) self.assertIn(expected_message, mail.outbox[0].body)
from salt.states import virtualenv_mod
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch
try: minions_remaining.remove(event['data']['id']) except ValueError: pass if len(minions_remaining) == 0: raise tornado.gen.Return(chunk_ret)
updates, layer_to_chains = model.get_sampling_updates( layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps, return_layer_to_updated=True)
Z = Z.reshape(XX.shape) plt.figure(fignum, figsize=(4, 3)) plt.pcolormesh(XX, YY, Z, cmap=plt.cm.Paired)
wrappers=wrappers, wrappers_asides=wrappers_asides, error_descriptor_class=ErrorDescriptor, get_user_role=lambda: get_user_role(request.user, course_id),
from sqlalchemy import Numeric for column in tbl.columns: if isinstance(column.type, Numeric): column.type.asdecimal = False
MAXSIZE = int((1 << 63) - 1)
continue
df0 = DataFrame([[10, 20, 30], [10, 20, 30], [10, 20, 30]])
connection.savepoint_rollback(sid)
result.fillna(value=0.0)
batch_size = 1
seen.add(cand.__name__) q.insert(0,cand)
rng1 = bdate_range('12/5/2011', '12/5/2011') rng2 = bdate_range('12/2/2011', '12/5/2011') rng2.offset = datetools.BDay()
this_labels = np.unique(this_labels, return_index=True)[1][this_labels] np.testing.assert_array_equal(this_labels, labels)
problem = self.store.get_item(problem.location)
context = test_view.get_context_data(object_list=queryset) self.assertEqual(context['object_list'], queryset)
self.__class__ = GEO_CLASSES[self.geom_type.num]
X_dense = theano.sparse.dense_from_sparse(X) noise = self.random_stream.binomial(size=X_dense.shape, n=1, prob=self.one_ratio, ndim=None)
self.kernel = kernel self.gamma = gamma self.n_neighbors = n_neighbors
0.416...
sfn = '' source_sum = {}
review3.content_object = dive self.assertEqual(review3._state.db, 'default')
if isinstance(exceptions, tuple): names = " or ".join(e.__name__ for e in exceptions) else: names = exceptions.__name__
q = Tag.objects.filter(parent__isnull=True)
for c_data in conversion_data: if dtype == c_data[0]: if data[col].max() <= np.iinfo(c_data[1]).max: dtype = c_data[1] else: dtype = c_data[2]
now = datetime.datetime.now(pytz.UTC) tomorrow = now + datetime.timedelta(days=1) nextday = tomorrow + datetime.timedelta(days=1)
serial = salt.payload.Serial(self.opts.get('serial', ''))
if settings != DEFAULT_SETTINGS: collect_assets(['lms'], asset_settings_lms) collect_assets(['studio'], asset_settings_cms)
df1 = DataFrame([]) df2 = DataFrame([]) result = df1.append(df2) expected = df1.copy() assert_frame_equal(result, expected)
obj.srid = self.get_srid(obj)
world.wait_for_visible('#data-student-profiles-table')
TEST_DIR = REPO_ROOT / ".testids"
else: status = VERIFY_STATUS_MISSED_DEADLINE
assert self.prefix is not None return "-".join((self.prefix, ) + tuple(getattr(self, field) for field in self.KEY_FIELDS))
atom_feed = feedgenerator.Atom1Feed("title", "link", "description") self.assertEqual( atom_feed.content_type, "application/atom+xml; charset=utf-8" )
email_id = kwargs.get('id', 0) return self.emails[email_id]
def authenticate(self, username=None, password=None): raise TypeError
digits = datasets.load_digits(n_class=9)
self.assertFalse(self.course.teams_enabled)
self.assertTrue(self.certificates_section.certificate_exceptions_section.visible)
newFrame = self.frame.reindex([]) self.assertTrue(newFrame.empty) self.assertEqual(len(newFrame.columns), len(self.frame.columns))
assert_equal(slo.get_n_splits(X, y, labels=l), n_iter)
self.assertEqual(Permission.objects.filter( content_type=permission_content_type, ).count(), 1)
#])
for localedir in reversed(settings.LOCALE_PATHS): translation = self._new_gnu_trans(localedir) self.merge(translation)
if not (ipv4_re.match(query) or is_valid_ipv6_address(query)): query = socket.gethostbyname(query)
CreditRequirementStatus.objects.create( username=username, requirement=requirement, status='satisfied', reason={'final_grade': final_grade} )
manager._originating_model = base
log = logging.getLogger(__name__)
list_maintenance_windows = salt.utils.alias_function(list_windows, 'list_maintenance_windows')
tol = 0
dest_structure['blocks'][new_parent_block_key].fields['children'] = new_children
return self.default_modulestore
from salt.states import event
input_dict = {'1_2_1': 'California'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
self.assertListEqual(response.redirect_chain, [('/en/account/register/', 302)]) self.assertRedirects(response, '/en/account/register/', 302)
postgis = False spatialite = False mysql = False oracle = False spatial_version = None
from salt.daemons.flo import core from salt.daemons.test.plan import actors
user_partition_values = [] no_partition_selected = {'display_name': _("Not Selected"), 'value': -1}
from salt.modules import linux_acl from salt.exceptions import CommandExecutionError
assert_true(set(votes[:, class_idx]).issubset(set([0., 1., 2.])))
import salt.client.ssh.shell import salt.client.ssh import salt.utils import salt.utils.thin import salt.utils.url import salt.roster import salt.state import salt.loader import salt.minion
break
SplitModuleTest.modulestore = class_(
return 'Page not found (404)' in browser.find_element_by_tag_name('h1').text
algo = cert.get_signature_algorithm()
simplefilter('ignore')
while len(acceptable) > 1: if acceptable[0] == wait_for: break else: acceptable.pop(0)
return microsite.is_request_in_microsite()
kl_divergence = 2.0 * np.dot(P, np.log(P / Q))
retval = func(field_decorator=strip_key_collection, *args, **kwargs)
if [ -z '$debian_chroot' ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
if sys.platform.startswith('win'): import win32file else: import resource
if enabled is not None: task_definition.Settings.Enabled = enabled if hidden is not None: task_definition.Settings.Hidden = hidden
self.submit_question_answer('p1', {'2_1': u'Correct'}) self.submit_question_answer('p2', {'2_1': u'Correct'})
cert_type=server cert_filename="something_completely_different"
std_error = scores_std / np.sqrt(n_folds)
obj = obj.consolidate() return obj
self.assertEqual(provider_redirect_url, self.url_prefix + self.complete_url) return self.client.get(provider_redirect_url)
'ALWAYS_REDIRECT_HOMEPAGE_TO_DASHBOARD_FOR_AUTHENTICATED_USER': True,
log.exception(ex)
return ' '.join(cmd)
private_ip_assignment = get_private_ip(vm_) if private_ip_assignment: create_private_ip(node_id)
scalar_label = int(scalar_label) assert scalar_label >= 0 assert scalar_label < 9 return 30 + 5 * scalar_label
ret = self.run_function('beacons.disable_beacon', ['ps']) self.assertTrue(ret['result'])
safe_exec("rnums = [random.randint(0, 999) for _ in xrange(100)]", g, random_seed=17) self.assertEqual(g['rnums'], rnums)
return None
if os.path.exists(filename): os.remove(filename)
self.course_nav.go_to_vertical('Test Vertical-2')
import os import inspect import pkgutil import warnings import sys import re import platform import struct
value = value.__reduce__()[1][0]
__func_alias__ = { 'list_': 'list' }
syslog_opts['address'] = os.sep.join( parsed_log_path.path.split(os.sep)[:-1] )
ser.replace([np.nan, 'foo', 'bar'], -1, inplace=True)
super(SimpleTemplateResponse, self).__init__('', content_type, status, charset)
df = orig.copy() df.ix["j":"k", 0] = ["b", "b"] tm.assert_frame_equal(df, exp_parts_cats_col)
self.load_extra_content( system, course_descriptor, 'course_info', self.data_dir / course_dir / 'info', course_dir, url_name )
return self.as_widget(TextInput(), attrs, **kwargs)
create_exam( course_id=unicode(self.course.id), content_id='foo3', exam_name='A Proctored Exam', time_limit_mins=10, is_proctored=True, is_active=True, is_practice_exam=True )
self.config = dict()
if not location: self.base_location = None self.location = None
super(TestPublishOverExportImport, self).setUp() self.user_id = ModuleStoreEnum.UserID.test self.export_dir = mkdtemp() self.addCleanup(rmtree, self.export_dir, ignore_errors=True)
self.assertTrue('success' in result and result['success'])
'master_roots': dict,
def f(): s[slice(-6.0, 6.0)]
data = SingleBlockManager(data, index, fastpath=True) generic.NDFrame.__init__(self, data)
log.info('Approving API request from user [%s].', self.user.id) self.status = self.APPROVED self.save()
self.assertRaises(ValueError, ct, '1foo') self.assertRaises(ValueError, ct, 'foo')
role = MockRoles() if self.flag == 1: role.id = None return role role.id = role_id return role
__virtualname__ = 'ports'
self._create_course_unit() self.assertFalse(self.video.is_autoplay_enabled)
H = self.mf(V)[0] downward_state = self.hidden_layers[0].downward_state(H) recons = self.visible_layer.inpaint_update( layer_above=self.hidden_layers[0], state_above=downward_state, drop_mask=None, V=None) return recons
deconstructed = deconstructed[1:]
salt '*' vsphere.set_service_policy my.esxi.host root bad-password 'ntpd' 'automatic'
_win(kernel32.GetCurrentProcess, wintypes.HANDLE)
if check_objects: s = Series(bdate_range('1/1/2000', periods=10)) res = f(s) exp = alternate(s) self.assertEqual(res, exp)
self._set_gender(gender_enum) self.assertEqual(self.profile.gender_display, display_gender)
required_boto3_version = '1.2.1'
draft_html = self.store.get_item(course_id.make_usage_key('html', self.DRAFT_HTML)) self.assertTrue(getattr(draft_html, 'is_draft', False))
store = HDFStore(hh) result = store.select('df', where='l1=l') assert_frame_equal(result, expected) store.close()
if is_float(key) and not self.is_floating(): try: ckey = int(key) if ckey == key: key = ckey except (ValueError, TypeError): pass return key
d = Decimal(str(ogr_field.value))
self.rng = make_np_rng(None, [2012, 10, 17], which_method="uniform")
_SQL_GET_IDENTIFIER = { 'mysql': _get_valid_mysql_name, 'sqlite': _get_valid_sqlite_name, }
import copy import logging import sys
s1 = Person.objects.only('name').get(pk=s.pk) with self.assertNumQueries(1): s1.save()
url = BASE_URL + '/dashboard/programs/123/program-name/' def is_browser_on_page(self): return self.q(css='.js-program-details-wrapper').present
return not self.user_partition_id == SplitTestFields.no_partition_selected['value']
else:
ax = df.plot.bar(stacked=True, width=width) for r in ax.patches: self.assertEqual(r.get_width(), width)
'badges',
if isinstance(arg, XBlock): return unicode(arg.location) else: return unicode(arg)
self.assertRaises(ValueError, p.iloc.__getitem__, tuple(['j', 'D']))
warnings.warn("generate_bq_schema is deprecated and will be removed in " "a future version", FutureWarning, stacklevel=2)
if data.dtype == 'int':
self.__init__(**state)
alice = User.objects.db_manager('default').create_user('alice', 'alice@example.com')
import salt.utils import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
ax0 = self.obj._get_axis(0) if not ax0.is_lexsorted_for_tuple(tup): raise e1
self.dicts[self._processors_index] = {}
response2 = self.client.get('/template_response_view/') self.assertEqual(response2.status_code, 200)
from salt.pillar.sql_base import SqlBaseExtPillar
values = self.block.get_values()
except NotFoundError: log.exception("Module indicating to user that request doesn't exist") raise Http404
from __future__ import absolute_import import logging
if not badges_enabled(): return return function(*args, **kwargs)
response = self.client.post(self.url, { "email": self.EMAIL, }) self.assertHttpBadRequest(response)
from salttesting import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock
rval_space = out_space
assert_is_none(get_current_request())
assert sreq.send_auto({}) == {'enc': 'clear', 'load': {}}
pass
return None
from __future__ import absolute_import
from copy import deepcopy import sys import nose from distutils.version import LooseVersion
from __future__ import absolute_import
real_user = self.runtime.get_real_user(self.runtime.anonymous_student_id) return real_user
return _reduce_memmap_backed(a, m)
self.stored_app_configs = []
serial_str = serializers.serialize(self.serializer_name, Article.objects.all()) self.assertTrue(self._validate_output(serial_str))
base_estimator = Lasso() ransac_estimator = RANSACRegressor(base_estimator) assert_raises(ValueError, ransac_estimator.fit, X, y, weights)
lab_slice = slice(label[0], label[-1]) return self.ix[:, lab_slice]
connections_dict = {} for conn in connections.all(): connections_dict[id(conn)] = conn
cherrypy.request.lowstate = [data]
AssetBaseUrlConfig.objects.create(enabled=True, base_url='fakecdn.edx.org') expected_cdn_url = "//fakecdn.edx.org" + expected_path_start
result = str_pad(self._data, width, side='left', fillchar='0') return self._wrap_result(result)
return True
expected = left_f(s, Timestamp('20010109')) result = right_f(Timestamp('20010109'), s) tm.assert_series_equal(result, expected)
offsets = [pd.offsets.Hour(2), timedelta(hours=2), np.timedelta64(2, 'h'), Timedelta(hours=2)]
rng = timedelta_range(start='0s', periods=25, freq='s') ts = Series(np.random.randn(len(rng)), index=rng)
with override_settings(DEBUG=False): response = self.client.get(url) self.assertNotContains(response, 'Have debug')
else: local = salt.client.LocalClient() ret = local.cmd('{0}'.format(target), cmd, args, kwargs)
'ellipsoid': (6378137.0, 6356752.31414, 298.257222101), 'eprec': (1, 5, 10),
self._check_non_staff_light(self.course) self._check_non_staff_dark(self.course) self._check_non_staff_light(self.test_course) self._check_non_staff_dark(self.test_course)
import os import re import logging
import msgpack
self.assertQuerysetEqual( self.c.friends.all(), [ "David", ], attrgetter("name") )
settings.DEFAULT_TEMPLATE_ENGINE['DIRS'].insert(0, theme_root / 'templates') edxmako.paths.add_lookup('main', theme_root / 'templates', prepend=True)
first_obj = obj_list[0] to_attr = lookup.get_current_to_attr(level)[0] prefetcher, descriptor, attr_found, is_fetched = get_prefetcher(first_obj, through_attr, to_attr)
if not record.exc_text: record.exc_text = self.formatException(record.exc_info)
microsite.set_by_domain('unknown') self.assertIsNone(microsite.get_value('platform_name'))
self.register_comment() update_comment(self.request, "test_comment", {}) for request in httpretty.httpretty.latest_requests: self.assertEqual(request.method, "GET")
self._iter_mode = resolve_iterator_class('sequential')
if name not in list_folders(location): return True else: return False
else:
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')
try: deadline = cls.objects.get(course_key=course_key) return deadline.deadline except cls.DoesNotExist: return None
if not has_files: input_element = etree.SubElement(response_element, "textbox") input_element.set("mode", "python")
d = data.copy()['c']
person.delete()
for instances in six.itervalues(self.data): instances.reverse()
store_iterator = iter(modulestores) next_modulestore = lambda *args, **kwargs: store_iterator.next()
ac = AppConfig('label', Stub(__file__='b/__init__.py')) self.assertEqual(ac.path, 'b')
coffee = cls.js.setdefault('coffee', []) js = cls.js.setdefault('js', [])
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
course_keys = CourseOverview.get_all_course_keys() for expected_course_key in courses: self.assertNotIn(expected_course_key, course_keys)
return getattr(_prefixes, "value", '/')
self.assertEqual(settings.XBLOCK_SETTINGS, {self.xblock_setting_key1: 42}) self.assertEqual(self.settings_service.get_settings_bucket(self.xblock_mock), 42)
self.assertTrue(self.cohort_management_page.is_save_button_disabled(key))
from pandas import * from pandas.util.testing import rands
htmlhelp_basename = 'performance'
return (self.network_address.is_link_local and self.broadcast_address.is_link_local)
self.assertEqual(iptables.build_rule(**{'match-set': '!src flag'}), '-m set ! --match-set src flag')
result = idx.isin(set(values)) tm.assert_numpy_array_equal(result, expected)
adder['tail_text'] = elt.tail if elt.tail else '' components.append(adder)
for parent, children in enumerate(children_map): self.assertSetEqual(set(block_structure.get_children(parent)), set(children))
__virtualname__ = 'service'
expand = False if result.ndim == 1 else True
admin_readonly_fields = self.get_admin_readonly_fields(response) for field in admin_readonly_fields: if field.field['name'] == field_name: return field
ans = True
s = Series([Timestamp('2015-02-03'), Timestamp('2015-02-07')]) self.assertEqual(s.diff().median(), timedelta(days=4))
self.some_url = '/'
return d.iteritems() if hasattr(d, "iteritems") else d.items()
memb = ax.asfreq(self.freq, how=self.convention)
assert isinstance(course_id, CourseKey) for course in self.get_courses(**kwargs): if course.id == course_id: return course return None
if hasattr(pip, '__version__'): pip.__version__ = original_pip_version
from salt.modules import launchctl
if false_discovery_rate != 0: assert_greater(false_discovery_rate, alpha / 10)
self._fields[key.field_name] = value
if self.is_active and self.is_superuser: return True
path = self.path(name) return FileSystemStorage(path).open(path, mode)
ps_uncached = self._create_service(username)
create_attach_volumes = volume_create_attach
BODY_SELECTOR = "#recent-panel" TAB_SELECTOR = ".tab#view-recent-activity"
return np.empty((0, 2), dtype=arr.dtype)
reg = RidgeClassifierCV(class_weight={1: 0.001}, alphas=[.01, .1, 1, 10]) reg.fit(X, y)
self.assertTrue(views.is_course_passed(self.course, None, self.student, self.request))
self.assertEqual(len(cache), 1) cache_exc_msg, cache_globals = cache.values()[0] self.assertIn("ZeroDivisionError", cache_exc_msg)
return _has_instructor_access_to_location(user, descriptor.location, course_key)
class zzUrlconfSubstitutionTests(SimpleTestCase):
if self._convert_dates is not None: for i, col in enumerate(data): if i in convert_dates: data[col] = _datetime_to_stata_elapsed_vec(data[col], self.fmtlist[i])
return Response(create_thread(request, request.data))
groupby_frame_nth_none = Benchmark("df.groupby(0).nth(0)", setup, start_date=datetime(2014, 3, 1))
from __future__ import unicode_literals
@property def size(self): "Returns the size of this coordinate sequence." return capi.cs_getsize(self.ptr, byref(c_uint()))
import ioflo.base.deeding
return self.make_block(np.empty(values.shape, dtype=dtype), placement, fastpath=True)
return
if len(bits) >= 5: if bits[-4] != 'for': raise template.TemplateSyntaxError(syntax_message) user = bits[-3] else: user = None
index, columns, col_dict = self._create_index(ret)
if requesting_user.username != username: if not requesting_user.is_staff or not allow_staff: raise UserNotAuthorized()
else:
self.assertDictEqual(json.loads(response.content), data)
kwargs['queryset'] = qs.select_related('content_type')
email_feature_dict['email'] = email_info
self.certificates_section.add_certificate_exception(self.user_name, '')
LOGGING_TEMP_HANDLER = StreamHandler(sys.stderr)
self._queryset = qs
return FILE_INPUT_CONTRADICTION
def get(self, request): return HttpResponse('This is a simple view')
super(DraftModuleStore, self).update_item( item, user_id, isPublish=True, is_publish_root=is_root, allow_not_found=True ) to_be_deleted.append(as_draft(item_location).to_deprecated_son())
if self.opts['transport'] in ('zeromq', 'tcp'): key_dirs = self._check_minions_directories() else: key_dirs = self._check_minions_directories()
return request.user.is_active and request.user.is_staff
self.click(".action-save") self.page.wait_for_ajax()
qs = Author.objects.annotate(Count('item')) qs = qs.filter(~Q(extra__value=0))
df = DataFrame({'date': [pd.Timestamp('20130101').tz_localize('UTC'), pd.NaT]}) expected = df.dtypes
if regex_re: to_replace = regex
import shutil import tempfile import os from distutils.version import LooseVersion try:
return list(result)
n_targets = y.shape[1] Xy = np.empty(shape=(n_features, n_targets), dtype=common_dtype, order='F') np.dot(y.T, X, out=Xy.T)
check_password('wrong_password', encoded) self.assertEqual(hasher.harden_runtime.call_count, 1)
module = import_module(entry)
corr = safe_sparse_dot(y, X) corr /= row_norms(X.T) corr /= norm(y)
cohort = CohortFactory(course_id=course_id, name=cohort_name) CourseCohortFactory(course_user_group=cohort, assignment_type=assignment_type) return cohort
self.attempt_login(200)
if privacy is None: privacy = self.PRIVACY_PUBLIC self.visit_profile_page(username, privacy=privacy)
from __future__ import division
cls._internal_names_set.add(iname)
__virtualname__ = 'lowpkg'
time.sleep(0.5)
self.cout.set_encodings(self.output_encoding)
exc_info=log.isEnabledFor(logging.DEBUG)
self.assertContains(response, '<h3 id="built_in-add">add</h3>', html=True) self.assertContains(response, '<li><a href="#built_in-add">add</a></li>', html=True)
centers[center_idx] *= counts[center_idx]
missing_courses = set(course_id_list) - set(modes_by_course.keys()) for course_id in missing_courses: modes_by_course[course_id] = [cls.DEFAULT_MODE]
auto_reject = self.auto_key.check_autoreject(load['id']) auto_sign = self.auto_key.check_autosign(load['id'])
return random.choice((True, False))
log = logging.getLogger(__name__)
self.assertEqual(self.cart.total_cost, self.get_discount(self.cost))
return
if node.value == '': node.value = '0'
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
api.add_enrollment(self.USERNAME, self.COURSE_ID, mode='audit')
self.courseware_page.stop_timed_exam()
return self._batch_size
self.wait_for_element_presence(self.upload_image_popup_window_selector, 'upload dialog is present')
composite_dtypes = ((None, 'int8'), ('complex128', theano.config.floatX))
raise CommandExecutionError( 'none of the specified sources were found' )
metric_str = metric if name in METRICS_WITH_POS_LABEL: metric_str = partial(metric_str, pos_label=pos_label_str)
from salttesting import TestCase from salttesting.mock import MagicMock, patch
self.series[5:7] = np.NaN str(self.series)
from __future__ import absolute_import
norm_expected = expecteds.copy() for k in norm_expected: norm_expected[k] = Timestamp(norm_expected[k].date())
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
nv.validate_compress(args, kwargs) return self[condition]
assert_bad({"files": [{"file_name": "test.mp4"}]})
if seconds < 0: continue
return {}
return self.q(css='{} input[name=entrance-exam-task-history]'.format(self.EE_CONTAINER))
kind = arr.dtype.kind if kind == 'M' or kind == 'm': return arr.dtype in _DATELIKE_DTYPES
optima = [self._constrained_optimization(obj_func, self.kernel_.theta, self.kernel_.bounds)]
return self.q(css='.create-user-button').present
from __future__ import absolute_import
self.assertTrue(self._has_changes(chapter.location)) self.assertTrue(self._has_changes(sequential.location)) self.assertTrue(self._has_changes(vertical.location))
if not lib.isscalar(value): msg = "'value' must be a scalar, passed: {0}" raise TypeError(msg.format(type(value).__name__))
meta = xml_object.find('meta') if meta is None: return '' dmdata = meta.text if remove: xml_object.remove(meta) return dmdata
alice = User.objects.using('default').get(username="alice") self.assertEqual(alice.userprofile.flavor, "chocolate")
try: pattern = to_replace.pattern except AttributeError: pattern = to_replace
is_secure_default = request.is_secure request.is_secure = lambda: False try: yield finally: request.is_secure = is_secure_default
self.course_outline_page.visit() self.assertEquals(self.course_outline_page.expand_collapse_link_state, ExpandCollapseLinkState.COLLAPSE) self.verify_all_sections(collapsed=False)
import salt.utils from salt.exceptions import CommandExecutionError
result = self.service.delete_student_attempt( 'bad_student', unicode(self.course.id), 'foo/bar/baz', requesting_user=self.student, ) self.assertIsNone(result)
return course.id.course
mdata[col] = np.asanyarray(frame.columns.get_level_values(i)).repeat(N)
pass
return [x + "0" if x.endswith('.') and x != na_rep else x for x in trimmed]
datasets = list(datasets[label] for label in data_subsets.keys()) if len(datasets) == 1: datasets, = datasets
iris = load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
MULTI = 'multi' SINGLE = 'single' CURSOR = 'cursor' NO_RESULTS = 'no results'
wua_session = win32com.client.Dispatch('Microsoft.Update.Session') wua_session.ClientApplicationID = 'Salt: Install Update'
if isinstance(source, inst): return True if isinstance(source, NonCapture): for elt in source: if contains(elt, inst): return True return False
self._coef_indptr = [] self._intercept_indptr = [] start = 0
lookup_name = 'strictly_above'
response['Accept-Ranges'] = 'bytes' response['Content-Type'] = content.content_type
rs = DataFrame(vals).rolling(5, win_type='boxcar', center=True).mean() tm.assert_frame_equal(DataFrame(xp), rs)
return hash(str(self))
return self._concat_objects( keys, values, not_indexed_same=not_indexed_same )
return False
with override_settings(REGISTRATION_EXTRA_FIELDS=extra_fields_setting): response = self.client.get(self.url) self.assertHttpOK(response)
self._handle_usecols(columns, names)
exp[2] = 5 assert_frame_equal(tmp, exp)
dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=None, nrows=None,
User.objects.db_manager('default').create_user('bob', 'bob@example.com')
clf = ensemble.RandomForestClassifier(n_estimators=100, random_state=0)
self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children()
from __future__ import absolute_import
setuptools_kwargs['use_2to3'] = True if BUILD_CACHE_DIR is None else False
from salt.modules import introspect
class BinaryTree(models.Model): name = models.CharField(max_length=100) parent = models.ForeignKey('self', models.SET_NULL, null=True, blank=True)
assert_raises( AssertionError, monitor.update_channels, ['train_objective'], start=2, end=1 )
return _create_item(request)
self.set_date('release_date', "#start_date", date)
def __setstate__(self, state): self._is_child = True args = state['args'] kwargs = state['kwargs'] self.__init__(*args, **kwargs)
count, ch = get_quantifier(ch, pattern_iter) if ch: consume_next = False
send_user_notification = Signal(providing_args=["user", "state"])
instructor = UserFactory() allow_access(self.course, instructor, 'instructor') self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
i = len(commonprefix([start_list, path_list]))
dummy = DataFrame(index=self._y.index) dummy['y'] = 1
func.restype = gdal_char_p
return VisibilityError() if descriptor.visible_to_staff_only else ACCESS_GRANTED
self.assertEqual(cl.queryset.count(), 1)
import integration
x = df.iloc[[0, 1, 2]] self.assertIsNotNone(x.is_copy) x = df.iloc[[0, 1, 2, 4]] self.assertIsNotNone(x.is_copy)
export_course_to_xml( self.store, self.contentstore, self.course.id, self.root_export_dir, self.export_dir, )
'range_server': str,
self.client.login(username=self.instructor.username, password="test") self._assert_certificates_visible(False)
from pylearn2.datasets import cifar10
self.assertEqual(form.instance.left, 1)
text_document = self._white_spaces.sub(" ", text_document)
import os import re import logging
if len(inputfiles) > settings.MAX_FILEUPLOADS_PER_INPUT: msg = 'Submission aborted! Maximum %d files may be submitted at once' % \ settings.MAX_FILEUPLOADS_PER_INPUT return msg
pow_term = atom + ZeroOrMore("^" + atom) pow_term = Group(pow_term)("power")
'keysize': int,
self.avg()
rxml = etree.fromstring(req.text)
indexer = convert_to_index_sliceable(self, key) if indexer is not None: return self._setitem_slice(indexer, value)
for item_type in item_types: if cart.has_items(item_type): return True
if features is not None: valid_set = valid_set[:, features] test_set = test_set[:, features]
salt.log.setup.shutdown_multiprocessing_logging()
with patch('openedx.core.djangoapps.safe_sessions.middleware.log.warning') as mock_log: yield self.assertFalse(mock_log.called)
self.emit_event(EVENT_NAME_ENROLLMENT_MODE_CHANGED)
return True
stats_a = os.stat(filename_a) stats_b = os.stat(filename_b) return stats_a.st_dev == stats_b.st_dev;
from salt.utils.async import SyncWrapper
ret = instance.copy()
return mark_safe(value)
api.set_credit_requirements(self.course_key, requirements[1:])
inline_formset = generic_inlineformset_factory(Media, exclude=('url',))
self.conn.put_method.return_value = method_ret self.conn.put_integration.return_value = method_integration_ret self.conn.put_method_response.return_value = method_response_200_ret self.conn.put_intgration_response.return_value = method_integration_response_200_ret
return self._check_login_or_register_page(self.login_page_url, "loginUrl")
if any(b.is_sparse for b in result.blocks): from pandas.sparse.api import SparseDataFrame return SparseDataFrame else: return objs[0]
itemsize = max_len_string_array(com._ensure_object(column.values)) return chr(max(itemsize, 1))
response = other_with_prefix_view(request, '16') self.assertEqual(response.content, b'Hello World 16')
if library: component_types = [component for component in component_types if component != 'discussion']
if not kwargs.get('no_django', False): kwargs['lookup'] = edxmako.LOOKUP['main'] super(Template, self).__init__(*args, **kwargs)
save_definition = False if kwargs.get('task_definition', False): task_definition = kwargs.get('task_definition') else: save_definition = True
from salt.ext.six import string_types
from salt.exceptions import CommandExecutionError import salt.utils
for typ in self.typlist: self._write(typ)
import salt.output import salt.utils.http
shutil.copyfile(path_in, path_test)
from salt.utils.vt_helper import SSHConnection from salt.utils.vt import TerminalException
import salt.utils
from __future__ import unicode_literals
with self.assertRaises(ImproperlyConfigured): with self.settings(INSTALLED_APPS=['apps.apps.NotAConfig']): pass
if not is_list_like_indexer(section): return section
self.animal_partition.groups.pop() self.color_partition.groups.pop()
f = DateField() with self.assertRaisesMessage(ValidationError, "'Enter a valid date.'"): f.clean('a\x00b')
from pandas.core.series import Series
return self.find_css("#due_time").first.attrs('value')[0]
self.assertSessionLangEquals( 'rel', self.process_request(preview_lang='rel') )
X = np.arange(12).reshape(3, 4)
EmptyPromise(lambda: self.is_button_shown('transcript_button'), "transcript button is shown").fulfill()
microsite.set_by_domain(domain) return func(request, *args, **kwargs)
assert_almost_equal(np.diag(y_cov), np.exp(kernel.theta[0]), 5)
response = self.client.get(reverse('admin:admin_views_article_changelist')) self.assertContains(response, 'bodyclass_consistency_check ')
self.assert_middleware_usage(middleware, True, True, True, True, False)
n_clusters_1 = len(set(labels)) - int(-1 in labels) assert_equal(n_clusters_1, n_clusters)
groups = [name]
self.context['return_to_annotation'] = False xml = self.render_to_xml(self.context) self.assert_no_xpath(xml, xpath, self.context)
n_samples_range = np.logspace(1, 9, 9)
self.assert_index_equal(uniques, exp_uniques, check_names=False)
world.browser.driver.execute_script(script, str(text)) world.wait_for_ajax_complete()
if not course_key_string or not action_state_id: return HttpResponseBadRequest()
from __future__ import absolute_import
if __opts__.get('state_output_diff', False) and \ ret['result'] and not schanged: continue
return message
if (sum_aligners == self.ndim and all([com.is_sequence(_) for _ in indexer])): ser = ser.reindex(obj.axes[0][indexer[0]], copy=True)._values
disturb_mem.disturb_mem() rng = np.random.RandomState([2012, 11, 27])
index = DatetimeIndex(["2013-08-27", "2013-10-01", "2013-10-29", "2013-11-26"]) assert frequencies.infer_freq(index) != 'WOM-4TUE'
gmm2 = GaussianMixture(n_components=n_components, n_init=1, reg_covar=0, random_state=rng, covariance_type=covar_type).fit(X) assert_greater(gmm2.score(X), gmm1.score(X))
if fast_dot is np.dot: return
self.enrollment.can_refund = True self.assertTrue(self.enrollment.refundable())
try: return len(value) except (ValueError, TypeError): return 0
import salt.utils from salt._compat import subprocess
if isinstance(frames, OrderedDict): result = OrderedDict()
if self.credit_type[0] not in graders: raise LoncapaProblemError('partial_credit attribute should be one of: ' + ','.join(graders))
cost = SumOfCosts([SumOfParams(), (0., DummyCost())])
__virtualname__ = 'timezone'
return parent
AssetBaseUrlConfig.objects.create(enabled=True, base_url='fakecdn.edx.org') expected_cdn_url = "//fakecdn.edx.org"
le = LabelEncoder() if isinstance(class_weight, dict) or multi_class == 'multinomial': class_weight_ = compute_class_weight(class_weight, classes, y) sample_weight *= class_weight_[le.fit_transform(y)]
is_multivalue_dict = isinstance(value, MultiValueDict)
honor, _ = self.create_mode('honor', 'Honor') self.assertFalse(CourseMode.has_payment_options(self.course_key))
restore_asset_from_trashcan(unicode(asset_key))
frame = self.frame.copy() expected = self.frame.copy()
response = self.client.get(self.programs_path) self.assertEquals(response.status_code, status_code) return response
mopts['file_roots'] = self.actual_file_roots mopts['saltversion'] = __version__ pillar['master'] = mopts
HANDLER_CLASS = StubHttpRequestHandler
return get_instructions(xmltree)
df = pd.DataFrame([[1, 2], [3, 4]], columns=pd.date_range('1/1/2013', '1/2/2013'), index=['A', 'B'])
pass
df = DataFrame(np.random.randn(4, 4), columns=list('AABC')) df.columns.name = 'foo'
value = self.options[name]
AutoAuthPage(self.browser, course_id=self.course_id).visit()
if lookup == 'in': stripped_value = [_strip_object(el) for el in value] else: stripped_value = _strip_object(value) return stripped_value
anonymous_client = APIClient() request_method = getattr(anonymous_client, method) response = request_method(self.url) self.check_response(response, 401) self.assert_no_events_were_emitted()
self.assertEqual(len(apps), 2)
from __future__ import absolute_import
return username
CourseEnrollment.enroll(self.user, self.course.id, mode="honor")
return -1
if not rd_data: err_msg = 'There was an error querying EC2 for the root device ' \ 'of image id {0}. Empty response.'.format(image_id) raise SaltCloudSystemExit(err_msg)
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
expected = self.read_csv(self.csv15) expected['date_td'] = expected['date_td'].apply(datetime.strptime, args=('%Y-%m-%d',))
if inv: X_pred2 = kpca.inverse_transform(X_pred_transformed) assert_equal(X_pred2.shape, X_pred.shape)
current_name = None
simple_option_desc_re = re.compile( r'([-_a-zA-Z0-9]+)(\s*.*?)(?=,\s+(?:/|-|--)|$)')
y_pred = clf.classes_.take(y_proba.argmax(axis=1), axis=0) assert_array_equal(y_pred, true_result)
response = self.client.get('/old_jsi18n_admin/?language=de') self.assertContains(response, '\\x04')
raise TypeError("PermWrapper is not iterable.")
rows_of_fields_as_sql = ( (self.field_as_sql(field, v) for field, v in zip(fields, row)) for row in value_rows )
return self.q(css="div.problem section.inputtype div.correct span.status").is_present()
os.chmod(dfn, stat.S_IRUSR | stat.S_IWUSR)
b = np.zeros((self.dim,))
continue
from salt.exceptions import SaltInvocationError import salt.utils
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.guitar_book, self.djangonaut_book])
import yaml
reindexed_int = int_ts.reindex(int_ts.index[::2]) self.assertEqual(reindexed_int.dtype, np.int_)
if self.advertised_start: return u'string' elif self.start != DEFAULT_START_DATE: return u'timestamp' else: return u'empty'
g = wkb_r().read(geo_input)
response = requests.post(self.url) self.assertEqual(response.status_code, 400)
s = SparseSeries([0, 1, np.nan, 3, 4, 5], index=np.arange(6))
self.assertTrue(self.coach_dashboard_page.is_browser_on_enrollment_page())
return
df_with_missing = DataFrame( {'col1': [0, np.nan, 2], 'col2': [1, np.nan, np.nan]})
for idx in range(3): self._create_cert(self.courses[idx].id, self.user, CertificateStatuses.error)
plan = [(executor.loader.graph.nodes[targets[0]], options['backwards'])] sql_statements = executor.collect_sql(plan) return '\n'.join(sql_statements)
return isinstance(op, _ElemwiseNoGradient)
np.random.RandomState(j).shuffle(X[:, j]) np.random.RandomState(j).shuffle(X_true[:, j])
NUM_ROWS = 100 NUM_COLS = 10 col_names = ['A' + num for num in map(str, np.arange(NUM_COLS).tolist())] index_cols = col_names[:5]
start = request.json.get('start', CourseFields.start.default) run = request.json.get('run')
from __future__ import unicode_literals
if not PY3: axes = _check_plot_works(df.plot.box, subplots=True, logy=True)
recomposed_video_tag = CourseDetails.recompose_video_tag(video_id) cls.update_about_item(course, 'video', recomposed_video_tag, user_id)
url_user_invoice_preference = reverse('get_user_invoice_preference', kwargs={'course_id': self.course.id.to_deprecated_string()})
raise TemplateNotFound(template)
self.assertEquals(3, self.response.content.count('grade_None'))
X_sparse_pruned = sparse.csr_matrix(X_dense)
weight_cdf = self.estimator_weights_[sorted_idx].cumsum(axis=1) median_or_above = weight_cdf >= 0.5 * weight_cdf[:, -1][:, np.newaxis] median_idx = median_or_above.argmax(axis=1)
return len(objs)
username = email.split("@")[0] try: email = people[username]['email'] except KeyError: pass
from __future__ import absolute_import from salt.exceptions import CommandExecutionError, CommandNotFoundError
self.wait_for_element_visibility( '#entrance-exam-enabled', 'Entrance exam checkbox is available' ) return self.get_element('#entrance-exam-enabled')
aapl = DataReader("AAPL", "google")
cert_type=server type_ext=True
options = re.sub(r"([a-zA-Z])('|\\')([a-zA-Z])", r"\1&#39;\3", options)
val = self.verify_fk(feat, model_field, ogr_name)
self.assertEqual(len(all_modes[other_course_key]), 1) self.assertEqual(all_modes[other_course_key][0], CourseMode.DEFAULT_MODE)
self.assertNotEqual(response.content, b'request method: HEAD') self.assertEqual(response.content, b'')
self.assertNotIn('course', course_xml.attrib) self.assertNotIn('org', course_xml.attrib)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if youtube_id: return 'https://www.youtube.com/watch?v={0}'.format(youtube_id) else: return ''
self.assertTrue(self.cart.has_items(item_type=Donation)) self.assertEqual(self.cart.total_cost, unit_cost)
default_store=ModuleStoreEnum.Type.mongo
global tables if tables is None: import tables
log = logging.getLogger(__name__)
weight_k[in1d(y_full, list(classes_missing))] = 0.
break
@classmethod def open(cls, full_path, cache): return GeoIP(full_path, cache)
if created: self.add(obj) return obj, created
import salt.utils import salt.payload
migrations_to_squash = [ loader.get_migration(al, mn) for al, mn in loader.graph.forwards_plan((migration.app_label, migration.name)) if al == migration.app_label ]
iris = datasets.load_iris() X, y = iris.data[:, 1:3], iris.target
from __future__ import absolute_import
for dt in [dtype_str, 'object']: f = getattr(_algos, "%s_%s" % (fname, dtype_str), None) if f is not None: return f
assert_array_equal(clf.predict([[0.2, -1.0]]), np.array([-1]))
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
assert_raises( AssertionError, monitor.update_channels, [] )
for i in ['0.4', '1.4', '2.4']: result[i] = to_datetime(result[i])
log.info(str(ret))
security_attributes = win32security.SECURITY_ATTRIBUTES() security_attributes.bInheritHandle = 1
'rest_framework', 'openedx.core.djangoapps.user_api',
import numpy from theano import tensor
if 'port' in _options: _options['port'] = int(_options['port']) return _options
if is_local: return self.scope[key]
as_view_decorator = CacheMiddleware(cache_alias=None, key_prefix=None)
self.assertRaises(ValueError, self.frame.align, af.ix[0, :3], join='inner', axis=2)
full_url = ( reverse(next_url, kwargs={'course_id': unicode(self.course.id)}) if next_url else next_url )
from __future__ import absolute_import import logging
return html
'top_file_merging_strategy': str,
self.assertRedirects(response, reverse('dashboard'))
from salttesting.case import TestCase from salttesting.helpers import ensure_in_syspath
self._base_geom = geom from .geometry import GEOSGeometry if not isinstance(geom, GEOSGeometry): raise TypeError self.ptr = capi.geos_prepare(geom.ptr)
'ENABLE_SHOPPING_CART': False,
nb = BernoulliNB() nb.fit(X_transformed, y)
world.wait_for_js_to_load()
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
if not is_platform_windows(): for i in [tm.makeStringIndex(10), tm.makeUnicodeIndex(10)]: self.assertRaises(ValueError, lambda: frequencies.infer_freq(i))
call_command("loaddata", "course_email_template.json")
assert_false("copyright" in vocabulary)
self.assert_index_equal(idx[0:4], result.insert(0, idx[0]))
return self.remote_field.related_query_name or self.remote_field.related_name or self.opts.model_name
self.request.user = user self.assertEqual(self.permission.has_object_permission(self.request, None, self.obj), permitted)
if value is None and key != '_id.revision': del query[key]
r = repr(df) for ix, l in enumerate(r.splitlines()): if not r.split()[cand_col] == '...': return False return True
changed = [] latest = [] for pkg_name, options in six.iteritems(pkg_params):
self.params['wkt'] = ''
comp_ids, obs_group_ids = table.get_labels_groupby(group_index)
from salt.ext import six from salt.ext.six.moves import zip
with self.assertRaises(ValueError): Author.objects.annotate(age=Avg('friends__age'))
if ( tag == 'msup' and len(k) == 2 and gettag(k[1]) == 'mrow' and
pass
import salt.ext.six as six
return True
with warnings.catch_warnings(record=True) as warns: warnings.simplefilter('always', RemovedInDjango20Warning)
if hasattr(error, 'order'): _record_payment_info(params, error.order) else: log.info(json.dumps(params)) return { 'success': False,
signal_handler.send.assert_called_with('course_published', course_key=course.id)
return self.q(css=".license-value").first.text[0]
if getattr(self, '_client', None) is None: self._client = self._lib.Client(self._servers) return self._client
'course_modes',
ret['result'] = None ret['comment'] = ( 'Sysctl option {0} would be changed to {1}'.format(name, value) ) return ret
from salttesting.helpers import ensure_in_syspath, expensiveTest
block = modulestore().get_item(block_location) block.user_partitions = partitions modulestore().update_item(block, 1)
url(r'^gradebook$', 'instructor.views.gradebook_api.spoc_gradebook', name='spoc_gradebook'),
self.database.connection._ensure_connected() return self.database.connection.max_wire_version
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
commit = False current_rules = __salt__['firewall.get_rule'](name) if not current_rules: commit = True ret['changes'] = {'new rule': name}
if start is not None and start.tz is None: start = start.tz_localize(tz, ambiguous=False)
__virtualname__ = 'bigip'
names = []
raise NotImplementedError("Specific Modulestores must provide implementations of create_definition")
self.assertEqual( pueblo_json, City.objects.annotate(geojson=functions.AsGeoJSON('point')).get(name='Pueblo').geojson )
test_environ = os.environ.copy() if sys.platform.startswith('java'): python_path_var_name = 'JYTHONPATH' else: python_path_var_name = 'PYTHONPATH'
data = sorted(data.items()) data = dict((k, v) for k, (i, v) in zip(names, data))
arguments[kwargs_param.name] = kwargs
wait_for_xblock_initialization(self, '.xblock[data-block-type="split_test"]')
if field.null: new_type += " NULL" else: new_type += " NOT NULL" return new_type
import salt.wheel
for o in self.is_valid_objs: if isinstance(o, Series):
STATIC_ROOT = (TEST_ROOT / "staticfiles" / "lms").abspath()
@contextmanager def urlopen(*args, **kwargs): with closing(_urlopen(*args, **kwargs)) as f: yield f
del_query.query.select_for_update = False del_query.query.select_related = False del_query.query.clear_ordering(force_empty=True)
super(DenseMulticlassSVM, self).fit(X, y) return self
video_url = world.browser.url
VerificationDeadline.set_deadline(self.id, self.verification_deadline, is_explicit=True)
precompute = False
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
return True
if self._module_store is None: self._module_store = modulestore() return self._module_store
if response.streaming: response.streaming_content = closing_iterator_wrapper( response.streaming_content, response.close) else: request_finished.disconnect(close_old_connections)
clf_constrained = LassoCV(n_alphas=3, eps=1e-1, max_iter=max_iter, positive=True, cv=2, n_jobs=1) clf_constrained.fit(X, y) assert_true(min(clf_constrained.coef_) >= 0)
duration = video_data.get('duration', None) size = default_encoded_video.get('file_size', 0)
Membership.objects.create(membership_country=self.usa, person=self.jane, group=self.cia)
return CourseMode.objects.get_or_create( course_id=self.course_key, mode_display_name=mode_name, mode_slug=mode_slug, min_price=min_price, suggested_prices=suggested_prices, currency=currency, _expiration_datetime=expiration_datetime, )
from __future__ import print_function
self.factory(loss="foobar")
try: fields = kwargs['context'].pop('fields', DEFAULT_FIELDS) or DEFAULT_FIELDS except KeyError: fields = DEFAULT_FIELDS super(BookmarkSerializer, self).__init__(*args, **kwargs)
@receiver(pre_delete, sender=CohortMembership)
fgraph = f.maker.env
cmp_mode = 'equal'
self.test_init_database()
y = lfw_people.target target_names = lfw_people.target_names n_classes = target_names.shape[0]
with ensure_clean_store(self.path) as store:
response_gone_class = http.HttpResponseGone response_redirect_class = http.HttpResponsePermanentRedirect
monitoring_dataset = DenseDesignMatrix(X=X)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
upload_csv_to_report_store(rows, 'may_enroll_info', course_id, start_date)
import integration
if related is not None: setattr(related, self.field.remote_field.get_cache_name(), None)
assert_almost_equal(s_, np.dot(np.dot(mixing_, k_), m))
statuses = ["approved", "denied", "pending", "must_reverify"] reverifications = reverification_info(statuses)
o_list_primary.insert(0, param) o_list_toggle.append(param)
return self.connection.ops.spatial_version >= (4, 1, 0)
answer_correct = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="0", due=self.tomorrow_str, correct=True) self.assertTrue(answer_correct.answer_available())
cached_pkg = __salt__['cp.is_cached'](installer, saltenv) if not cached_pkg: cached_pkg = __salt__['cp.cache_file'](installer, saltenv)
return self.q(css='.wrapper-create-course').visible
self._block_relations.pop(usage_key, None) self._block_data_map.pop(usage_key, None)
result = df.get_dtype_counts().sort_values() expected = Series({'datetime64[ns]': 3})
pass
try: return CourseKey.from_string(data) except InvalidKeyError as ex: raise serializers.ValidationError("Invalid course key: {msg}".format(msg=ex.msg))
result = f.clean('13.30 12-21-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
if self._user_info is None: user_info = self.get_user_info() if user_info is not None: self._user_info = self.get_user_info() return self._user_info
return {'xqueue_callback_url_prefix': 'dummy_value', 'request_info': {}, }
git@github.com:user/repo.git: git.latest: - user: deployer - identity: - /home/deployer/.ssh/id_rsa - /home/deployer/.ssh/id_rsa_alternate
initial_status = "submitted" VerificationStatus.add_verification_status( checkpoint=self.first_checkpoint, user=self.user, status=initial_status ) VerificationStatus.add_verification_status( checkpoint=self.second_checkpoint, user=self.user, status=initial_status )
buckets = 10 bucket_width = 1. / float(buckets) for i in xrange(buckets): lower_lim = i * bucket_width upper_lim = (i+1) * bucket_width
stack.append(_Node(next_child, get_children))
cmd = '{0} {1}'.format(cmd, ' '.join(dataset))
fake_course_image = 'sample_image.png' patched_create_thumbnail.side_effect = Exception("Kaboom!")
for url_pattern in get_resolver(urlconf).url_patterns: if isinstance(url_pattern, LocaleRegexURLResolver): return True, url_pattern.prefix_default_language return False, False
current_line_number = 0 for line_break_index in self._line_start_indexes: if line_break_index <= index: current_line_number += 1 else: break return current_line_number
lines.append(line) continue
drac.__grains__ = {} drac.__salt__ = {} drac.__context__ = {}
example_messages = ['test', 'me'] set_cookie_data(storage, example_messages, invalid=True) self.assertEqual(list(storage), [])
super(TestGenerateCourseBlocks, self).setUp() self.course_1 = CourseFactory.create() self.course_2 = CourseFactory.create() self.command = generate_course_blocks.Command()
def clone(self): "Clones this OGR Geometry." return OGRGeometry(capi.clone_geom(self.ptr), self.srs)
with tm.assert_produces_warning(FutureWarning): pd.TimeSeries(1, index=date_range('20130101', periods=3))
with lock: return _CacheInfo(stats[HITS], stats[MISSES], maxsize, len(cache))
from __future__ import absolute_import
raise SaltInvocationError('Command must be specified')
XBLOCK_SELECT_FUNCTION = prefer_xmodules
return ret
self.submit_question_answer('p2', {'2_1': u'Incorrect'})
self.assertIsNone(self.profile.level_of_education_display)
if i is not None: k = res_index[i] e.args = e.args + ('occurred at index %s' % pprint_thing(k), )
assert_raises(TypeError, KFold, n_folds=4, shuffle=None)
_win(kernel32.GetStdHandle, HANDLE_IHV,
salt '*' win_wua.list_updates summary=True
for element in collection: if element.location.block_id == _id: return element
Season.objects.create(year=2013, gt=444) self.assertQuerysetEqual(Season.objects.filter(gt__regex=r'^444$'), ['<Season: 2013>'])
self.q(css=self.search_bar_selector + ' input[type="text"]').fill(text)
response = self.http_get_for_course(HTTP_AUTHORIZATION=auth_header) self.assertEqual(response.status_code, 200)
result = self.asi8 if result is None: result = np.array(self) return result.argsort(*args, **kwargs)
class BaseCustomFormSet(BaseFormSet): def clean(self): raise ValidationError("This is a non-form error")
result = df.set_index(['A', 'B']) result_nodrop = df.set_index(['A', 'B'], drop=False)
pythoncom.CoInitialize()
l = [1, 2, 3]
_EASY_CHOICE_FEATURES = ('gender', 'level_of_education') _OPEN_CHOICE_FEATURES = ('year_of_birth',)
import salt.ext.six as six from salt.ext.six.moves.urllib.error import URLError from salt.ext.six.moves.urllib.request import urlopen
self.assertQuerysetEqual(Animal.objects.order_by('common_name'), [ "<Animal: Lion>", "<Animal: Platypus>" ])
apikey: asdff7896asdh789 sharedsecret: saltybacon driver: gogrid
safe_course_key = loc.course_key if safe_course_key.run is None: safe_course_key = safe_course_key.replace(run='only')
manager = LibraryImportManager(*args, **kwargs) return list(manager.run_imports())
pattern = named_group_matcher.sub(lambda m: m.group(1), pattern)
course_badge_check(user, course_key)
sleekxmpp_version = distutils.version.LooseVersion(sleekxmpp.__version__) valid_version = distutils.version.LooseVersion('1.3.1') if sleekxmpp_version >= valid_version: return __virtualname__
opts = self.remote_field.model._meta from_opts = self.model._meta return [PathInfo(from_opts, opts, self.foreign_related_fields, self, False, True)]
forms = ' '.join(form.as_table() for form in self) return mark_safe('\n'.join([six.text_type(self.management_form), forms]))
result = s.iloc[[0, 2, 3, 4, 5]] expected = s.reindex(s.index[[0, 2, 3, 4, 5]]) assert_series_equal(result, expected)
from salt.states import aws_sqs
dti = DatetimeIndex(start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq='D', name='index')
exception = TypeError if six.PY3 else UnicodeError with self.assertRaises(exception): force_text(MyString())
X = check_array(X, accept_sparse='csr') check_non_negative(X, whom) return X
import salt.fileserver import salt.loader import salt.utils.minions import salt.daemons.masterapi
redirect_to = get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to)
for f in self.instance._meta.fields: field = f.name if field not in self.fields: exclude.append(f.name)
comment, passed, retries = _search(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch, Mock
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
if not self.index.is_unique: result = self._constructor( result, index=[key] * len(result), dtype=self.dtype).__finalize__(self)
for i in fxs: l.append(feature_names[i]) names.append(l)
layers = [self.visible_layer] + self.hidden_layers
self.assertEqual(formset[0].instance.user_id, "guido")
Author.objects.create(name='Foo') Author.objects.create(name='Bar')
gp = GaussianProcess(corr='absolute_exponential', theta0=1e-4, thetaL=1e-12, thetaU=1e-2, nugget=1e-2, optimizer='Welch', regr="linear", random_state=0)
dtypes = map(np.dtype, ['float64', 'int8', 'uint8', 'bool', 'm8[ns]', 'M8[ns]'])
import salt.utils
return False
if pk is None and slug is None: raise AttributeError("Generic detail view %s must be called with " "either an object pk or a slug." % self.__class__.__name__)
response = middleware.process_response(request, response)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing
if not __opts__['test'] and len(ret['changes']) > 0: ret['result'] = _write_config(config)
return self.q(css='.wrapper-release .copy').first.text[0]
log = logging.getLogger(__name__)
self.assertNumContains(sql, 'tbl_tbsp', 0) self.assertNumContains(sql, 'idx_tbsp', 2)
response = self.client.get(self.url) self.assertTrue(self.e_commerce_link in response.content) self.assertFalse('Coupons List' in response.content)
new = list_pkgs(saltenv=saltenv)
curr_logprob, z = self.score_samples(X)
from sklearn.utils.linear_assignment_ import _hungarian
with np.errstate(all="ignore"): return np.ravel(sums) / np.ravel(n_non_missing)
return self.q(css='.leave-team-link').present
self.__dict__[attr] = val
if __opts__['pillar_roots'].get(branch, []) == [pillar_dir]: return {}
_version = '0.15.2'
res = __salt__['cmd.run_all'](cmd, python_shell=False)
stochastic = False
self.expected_settings_change_initiated_event( 'email', email, 'you@there.com', username=username, user_id=user_id),
result = p.select(lambda x: x in ('foo', ), axis='items') self.assert_panel_equal(result, p.reindex(items=[]))
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
import salt.utils
clf = ForestClassifier(class_weight=1, random_state=0) assert_raises(ValueError, clf.fit, X, _y)
supports_temporal_subtraction = False
return token.client
self.assertEqual(CourseMode.is_eligible_for_certificate(mode_slug), expected_eligibility)
np.array([[[0, 1], [2, 3]], [[4, 5], [6, 7]]]),
self._submit_photos(expected_status_code=400) self._assert_confirmation_email(False)
get_input_space = Model.get_input_space get_output_space = Model.get_output_space
example_messages = [str(i) for i in range(5)] set_cookie_data(cookie_storage, example_messages)
dot_update = (old_W * scal_points).sum(axis=0)
self.login_page.visit().password_reset(email=email)
self.assertIsNone(annotated_books.query.alias_map["aggregation_book"].join_type) self.assertIsNone(excluded_books.query.alias_map["aggregation_book"].join_type)
with restrict_course(self.course.id): response = self.client.get( url, HTTP_X_FORWARDED_FOR=ip_address, REMOTE_ADDR=ip_address ) self.assertEqual(response.status_code, 200)
created_time = models.DateTimeField(auto_now_add=True)
kwargs = dict(zip(compat_args, args)) _check_for_default_values(fname, kwargs, compat_args)
assert_raises(ValueError, _fast_dot, A, A[0])
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
raise NotImplementedError
from __future__ import absolute_import import logging import datetime from copy import copy
axes = [_ensure_index(columns), _ensure_index(index)]
desc = feature['description']
return super(NullBackend, self).get_value(val_name, default, **kwargs)
if block.is_object and not self.is_object: block = block.convert(numeric=False)
if self.child_fd in rlist: try: stdout = self._translate_newlines( salt.utils.to_str( os.read(self.child_fd, maxsize) ) )
ready = self.ready self.ready = False try: yield finally: self.ready = ready self.clear_cache()
from __future__ import absolute_import import textwrap
'use_master_when_local': bool,
overflow_grader = graders.AssignmentFormatGrader("Lab", 3, 2) lab_grader = graders.AssignmentFormatGrader("Lab", 7, 3)
draggables = world.css_find(css_class + ' .drag-handle') source = draggables.first target = draggables.last
resp = self._change_enrollment('unenroll') self.assertEqual(resp.status_code, 400)
self.assert_grade(problem, 'choice_3', 'incorrect') self.assert_grade(problem, 'not_a_choice', 'incorrect')
admin = User.objects.get(username=username, email=email)
import salt.utils
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"]) self.assertEqual(request["parameters"]["user_country"], "")
from __future__ import absolute_import import os import re import sys import shutil import subprocess
if asset_collection is None: asset_collection = self.DEFAULT_ASSET_COLLECTION_NAME self.asset_collection = self.database[asset_collection]
blocks = _get_course_date_summary_blocks(course, user) return '\n'.join( b.render() for b in blocks )
out.get('deploy_kwargs', {}) or out.pop('deploy_kwargs', {})
huge = 2 ** (n_bits + 1) clf = DecisionTreeClassifier(splitter='best', max_leaf_nodes=huge) assert_raises(Exception, clf.fit, X, y)
descriptor = modulestore().get_course(course_key) descriptor.grade_cutoffs = cutoffs modulestore().update_item(descriptor, user.id) return cutoffs
probas = self.predict_proba(X) return self.classes_[np.argmax(probas, axis=1)].ravel()
if not settings.USE_TZ: return settings.TIME_ZONE elif self.settings_dict['TIME_ZONE'] is None: return 'UTC' else: return self.settings_dict['TIME_ZONE']
import logging import os.path import re import tempfile
rng = np.random.RandomState(0) n_features = 5 n_samples = 4 X = rng.randn(n_samples, n_features)
rlist, _, _ = select.select(rfds, [], [], 0)
else: with closing(_gen_open(f)) as f: actual_dtype, data, ind, indptr, labels, query = \ _load_svmlight_file(f, dtype, multilabel, zero_based, query_id)
if isinstance(self.children[-1], six.string_types): if self.children[-1].isspace(): self.children.pop()
if e.args[0] in self.codes_for_integrityerror: six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2]) raise
linear_units = units_func(lgdal.OSRGetLinearUnits) angular_units = units_func(lgdal.OSRGetAngularUnits)
timezone.get_default_timezone.cache_clear()
res_row = df.ix["j", :] tm.assert_series_equal(res_row, exp_row) tm.assertIsInstance(res_row["cats"], compat.string_types)
if prerequisite_course_keys: for prerequisite_course_key_string in prerequisite_course_keys: prerequisite_course_key = CourseKey.from_string(prerequisite_course_key_string) add_prerequisite_course(course_key, prerequisite_course_key)
try: problem.grade_answers({'1_2_1': '42'})
course_id=course_overview.id
self.assertEqual(errors[0].id, 'postgres.E001') self.assertIn('max_length', errors[0].msg)
@property def num_interior_rings(self): "Returns the number of interior rings." return capi.get_nrings(self.ptr)
@classmethod def get_template_dir(cls): return 'foo'
return 'all_users' if self.q(css=PROFILE_VISIBILITY_SELECTOR.format('all_users')).selected else 'private'
visible_serialized_account = {} for field_name in field_whitelist: visible_serialized_account[field_name] = serialized_account.get(field_name, None) return visible_serialized_account
self.course_fixture.create_xblock( parent_vertical.locator, XBlockFixtureDesc(category='poll', display_name="", data=load_data_str('poll_markdown.xml')) ) self.course_outline_page.visit()
return self.display_name_with_default
import salt.crypt import salt.payload import salt.transport import salt.utils.args from salt.exceptions import SaltReqTimeoutError
if isinstance(data, collections.Mapping): data_dict.update(data)
import salt.payload import salt.utils
/etc/redis/redis.conf: file.managed: - source: salt://redis.conf - template: jinja - context: bind: 127.0.0.1
fname.replace('_', r'\_'),
import salt.ext.six as six
ind -= total
try: import pymongo HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
def get_pointer_arr(n): "Gets a ctypes pointer array (of length `n`) for GEOSGeom_t opaque pointer." GeomArr = GEOM_PTR * n return GeomArr()
self._examples_seen += num_examples self._num_batches_seen += 1
res_val = df.iloc[2, 0] self.assertEqual(res_val, exp_val)
B, C, IR, IC = ishp4 K, CH, KR, KC = kshp4
continue
df = DataFrame(dict(A=date_range('20130102', periods=5), B=date_range('20130104', periods=5), C=np.random.randn(5)))
self.assertRaises(KeyError, lambda: self.df2.loc[['a', 'd']])
return "{course}_{run}_{name}".format( course=course.location.course, run=course.url_name, name=name )
rng = np.random.RandomState(0)
staff_role.add_users(self.user)
with self.assertRaises(ValueError): Country.objects.filter(mpoly__relate=(23, 'foo'))
scores = cross_val_score(reg, X, y, cv=5) assert_array_almost_equal(scores, [0.94, 0.97, 0.97, 0.99, 0.92], 2)
from __future__ import unicode_literals
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
recorder.record_applied("migrations", "1_auto") loader.build_graph() self.assertEqual(num_nodes(), 4)
if salt.utils.is_windows(): return __virtualname__ return (False, 'Module cyg: module only works on Windows systems.')
bounds = np.tile([-np.inf, np.inf], (parameters.shape[0], 1)) bounds[-1][0] = 1e-12
raise NotImplementedError()
return __render_script(os_, vm_, opts, minion)
args.append(arg)
if already_exists: return _valid(comment='Container {0!r} already exists'.format(name)) dports, denvironment = {}, {}
if normalize is not False: table = _normalize(table, normalize=normalize, margins=margins)
dest_info = dest_structure['blocks'][block_key]
while r < 100: r = r * 10 while r >= 1000: r = r / 10
if _NUMEXPR_INSTALLED and _USE_NUMEXPR: if n is None: n = ne.detect_number_of_cores() ne.set_num_threads(n)
from __future__ import absolute_import
log.error('Received message without share: {0}'.format(msg)) return
user = UserFactory.create() CourseEnrollment.objects.create( user=user, course_id=self.course.id, mode=enrollment_type, is_active=True ) return user
prb1 = StudentModule.objects.get( course_id=self.course.id, student=self.student_user )
from __future__ import absolute_import
if org_to_include and course_overview.location.org != org_to_include: continue
if total is None: return (None, None) else: max_scores_cache.set(problem_descriptor.location, total)
for l in [slice(-10, 10), slice(-10.0, 10.0)]:
self._hints.update(hints)
available_version = salt.utils.alias_function(latest_version, 'available_version')
'RESTRICT_ENROLL_BY_REG_METHOD': False,
del result['X'] del result['y']
return "'%s'%s" % ( self.connection.alias, (" ('%s')" % database_name) if verbosity >= 2 else '', )
if not hasattr(self, 'chapter'): self.chapter = ItemFactory.create( parent_location=self.course.location, category='chapter' )
exc_info_on_loglevel=logging.DEBUG
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='edc' )
return self.paginate_by
from __future__ import absolute_import
state = np.random.RandomState(0) X = state.rand(10, 10) kpca = KernelPCA(random_state=state).fit(X) transformed1 = kpca.transform(X)
staff_lock = self._create_xblock_with_start_date( name + "_locked", start_date, publish, visible_to_staff_only=True ) self.assertFalse(utils.is_currently_visible_to_students(staff_lock))
scaler_batch = MinMaxScaler().fit(X)
self.client.login(username="jack", password="test")
third = models.ForeignKey(OuterB, models.SET_NULL, null=True)
close_bracket = (token_type == tokenize.OP and text in ']})')
from __future__ import unicode_literals
creation_counter = 0
_prefixes = local()
return bool( settings.DEBUG or has_access(user, CourseStaffRole.ROLE, course) or has_access(user, CourseInstructorRole.ROLE, course) )
return False
@context_cache def _test_set_cache(): pass _test_set_cache()
if self.max_attempts is not None and self.attempts >= self.max_attempts: return True if self.is_past_due(): return True return False
if mode_slug is None: mode_slug = self.course_mode.mode_slug course_reg_code = CourseRegistrationCode( code=self.reg_code, course_id=course_key, created_by=self.user, mode_slug=mode_slug, is_valid=is_valid ) course_reg_code.save()
self.assertEqual( self.run_function('shadow.get_login_failed_count', [TEST_USER]), '0')
add_user_with_status_granted(self.admin, self.admin) self.assertIsNone(get_course_creator_status(self.admin))
if field_name == 'action_checkbox': yield { "text": text, "class_attrib": mark_safe(' class="action-checkbox-column"'), "sortable": False, } continue
c_int32 = astype(a_int32, dtype=np.int32, copy=False) assert_true(c_int32 is a_int32)
deadline = self.UPGRADE_DEADLINE if mode == "verified" else None form = self._admin_form(mode, upgrade_deadline=deadline)
return None
fld_name = model_field.__class__.__name__
L = np.empty((max_features, max_features), dtype=X.dtype)
component = self.store.create_child( self.user_id, test_course.location, 'vertical', )
ret = _default_runlevel()
if self.__bounds is None: inds = np.arange(len(self.levels[0])) self.__bounds = self.labels[0].searchsorted(inds) return self.__bounds
self._create_courses_and_enrollments((self.TEST_ORG, True)) self._set_opt_in_pref(self.user, self.TEST_ORG, opt_in_pref)
clf = self.factory() assert_raises(ValueError, clf.fit, X2, Y2, coef_init=np.zeros((2, 2)))
return self.q(css='.wrapper-xblock.level-page .studio-xblock-wrapper').filter( lambda el: el.get_attribute('data-locator') == xblock_id )
if child.visible_to_staff_only: continue
parser = CommandParser(None, usage="%(prog)s subcommand [options] [args]", add_help=False) parser.add_argument('--settings') parser.add_argument('--pythonpath')
pip_version = version(pip_bin)
mongo_course1_id = self.import_and_populate_course()
BlockCountsTransformer(['problem', 'chapter']).transform(usage_info=None, block_structure=self.block_structure)
X_transformed = Nystroem(n_components=X.shape[0]).fit_transform(X) K = rbf_kernel(X) assert_array_almost_equal(np.dot(X_transformed, X_transformed.T), K)
keyring.set_keyring(TestKeyring()) HAS_KEYRING = True
self.assertTrue(SAMLConfiguration.is_enabled(), "SAML Provider Configuration only works if SAML is enabled.") obj = SAMLProviderConfig(**kwargs) obj.save() return obj
store = self._verify_modulestore_support(xblock.location.course_key, 'has_changes') return store.has_changes(xblock)
for prefix, root in self.locations: storage = self.storages[root] for path in utils.get_files(storage, ignore_patterns): yield path, storage
password_history_entry = PasswordHistory() password_history_entry.create(user)
VERIFICATION_DEADLINE = "verification" UPGRADE_DEADLINE = "upgrade"
CREDIT_HELP_LINK_URL = "#"
self.assertEquals( SafeSessionMiddleware.get_user_id_from_session(self.request), self.user.id )
if uid is None: user = list_users() uid = user[username]['index']
if vm_: for item in list(required_keys): if item in vm_: required_keys.remove(item)
from __future__ import absolute_import
source, source_hash = __salt__['file.source_list']( source, source_hash, __env__ )
format = ugettext("DATE_TIME_FORMAT") if format == "DATE_TIME_FORMAT": format = DEFAULT_DATE_TIME_FORMAT
contents = String(scope=Scope.content) error_msg = String(scope=Scope.content) display_name = String(scope=Scope.settings)
#unused_docs = []
assert len(self.hidden_layers) > 0
user_list[0].course_groups.remove(*cohort_list) assert_events("removed", user_list[:1], cohort_list) mock_tracker.reset_mock()
if self.reset_sequences: self._reset_sequences(db_name)
assert_series_equal(ser.loc[sel], ser)
self.assertNotIn('index_in_children_list', attributes) self.assertNotIn('parent_sequential_url', attributes) self.assertNotIn('parent_url', attributes)
height.groupby(gender).plot(alpha=0.5) tm.close()
has_access.return_value = True response = views.section_problem_grade_distrib(self.request, 'test/test/test', '1') self.assertEqual(json.dumps(self.simple_data), response.content)
msg = _("answer-pool value should be an integer") raise LoncapaProblemError(msg)
self.assertEqual( len(list(Article.objects.order_by("?"))), 4 )
output = self.engine.render_to_string('for-tag-filter-ws', {'s': 'abc'}) self.assertEqual(output, 'abc')
return self
empty = Series() self.assertIsNone(empty.last_valid_index()) self.assertIsNone(empty.first_valid_index())
arr = arr.astype(object) self.assertEqual(pd.lib.infer_dtype(arr), compare)
print("", file=out) print("{} violations total".format(self.total_violations), file=out)
modulestore().request_cache = None modulestore().metadata_inheritance_cache_subsystem = None
iris = datasets.load_iris()
for g in self.groups(): yield g._v_pathname, g
i2 = PeriodIndex([end_intv, Period('2005-05-05', 'B')]) self.assertEqual(len(i2), 2) self.assertEqual(i2[0], end_intv)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
for plot in self.plots: if plot.freq is None: plot.freq = self.freq
credit_request, created = CreditRequest.objects.get_or_create( course=credit_course, provider=credit_provider, username=username, )
regression.fit(x, y, sample_weight=w)
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
currency = models.CharField(default="usd", max_length=8)
import integration import salt.utils
locale_dirs = ['locale/'] gettext_compact = False
from __future__ import absolute_import
runtime_reqs_sec = self.total_complete / elapsed_time.total_seconds() print('Recalibrating. Current reqs/sec: {0}'.format(runtime_reqs_sec)) return
post_data = {"name": "First Gadget"} response = self.client.post(reverse('admin:admin_views_gadget_add'), post_data)
assert_almost_equal(result._y_trans.values.flat, [0, -0.5, 0.5], check_dtype=False)
for field in o2m_type_fields: if field.concrete: reverse_field = field.remote_field self.assertTrue(reverse_field.is_relation and reverse_field.many_to_one)
display_name = 'chapter created' resp = self.create_xblock(display_name=display_name, category='chapter') chap_usage_key = self.response_usage_key(resp)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.event_publisher = salt.utils.event.AsyncEventPublisher( self.opts, self.handle_event, io_loop=self.io_loop, )
from salt.modules import mod_random import salt.utils.pycrypto from salt.exceptions import SaltInvocationError
if tasks.environment.dry_run: tasks.environment.info("install npm_assets") return
df = concat([df1, df2], axis=1) assert_frame_equal(df.iloc[:, :4], df1) assert_frame_equal(df.iloc[:, 4:], df2)
idx = TimedeltaIndex([1e14, 'NaT', pd.NaT, np.NaN])
rstfile = tempfile.NamedTemporaryFile(suffix='.tif') ndv = 99
for original in self.objs: if isinstance(original, Index):
self.assertTrue(isinstance(df.set_index(df.index).index, MultiIndex))
clf = QuadraticDiscriminantAnalysis() y_pred = clf.fit(X6, y6).predict(X6) assert_array_equal(y_pred, y6)
try: obj_sm.AddService2('7971f918-a847-4430-9279-4a52d1efe18d', 7, '') ret['msupdate'] = msupdate except Exception as error:
def __init__(self, message, status=HTTP_200_OK): data = {'detail': message} super(DetailResponse, self).__init__(resp_obj=data, status=status)
if compat.PY2:
self.data = _set_tz(self.data, self.tz, coerce=True)
from __future__ import unicode_literals
if 'provider' in server_: server_['driver'] = server_.pop('provider')
self._files.appendlist( force_text(old_field_name, self._encoding, errors='replace'), file_obj) break
verification_checkpoint = VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=checkpoint_location ) self.assertEqual( VerificationCheckpoint.get_or_create_verification_checkpoint(self.course.id, checkpoint_location), verification_checkpoint )
from __future__ import absolute_import
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
pass
if user is not None and user.is_authenticated(): if CourseEnrollmentAllowed.objects.filter(email=user.email, course_id=course_key): return ACCESS_GRANTED
self.q(css='.new-course-button').first.click() self.wait_for_ajax()
self.setup_user() self.assertFalse(access.has_ccx_coach_role(self.user, ccx_locator))
from salt.exceptions import CommandExecutionError import salt.utils
request = args[0] request.META['CROSS_DOMAIN_CSRF_COOKIE_USED'] = True
def setUp(self): super(SignalDisconnectTestMixin, self).setUp() SignalHandler.course_published.disconnect(listen_for_course_publish)
def __init__(self): self.exceptions = MockExceptions()
go_to_section("data_download")
return date + datetime.timedelta(days=7 - self._get_weekday(date))
pass
raise NotImplementedError()
__virtualname__ = 'service'
email_placeholder = _(u"username@domain.com")
_infer_as_myclass = False
result = self.panel4d.reindex( major=self.panel4d.major_axis, copy=False) assert_panel4d_equal(result, self.panel4d) self.assertTrue(result is self.panel4d)
v1 = getattr(o, op)(o)
return self.build_membership_data_raw(self.users[username].username, team.team_id)
class BandAdmin(ModelAdmin): exclude = ['bio']
makedirs_perms(directory, user, group, mode)
self._send_handler_response("GET")
if is_staff: user = User.objects.get(email=email) user.is_staff = True user.save()
df3 = df1.set_index(['floats'], append=True) df2 = df1.set_index(['floats'], append=True) self.assertTrue(df3.equals(df2))
self._check_visible(ax.get_yticklabels(), visible=True) self._check_visible(ax.get_xticklabels(), visible=True) self._check_visible(ax.get_xticklabels(minor=True), visible=True)
if requesting_user.username == target_username: return True elif not target_username: raise TypeError("target_username must be specified") else: staff = GlobalStaff() return staff.has_user(requesting_user)
return _('Free')
null = True
for item in structure.get_children(): prepare_item_index(item, groups_usage_info=groups_usage_info) searcher.index(cls.DOCUMENT_TYPE, items_index) cls.remove_deleted_items(searcher, structure_key, indexed_items)
self.assertEqual(list(self.book.model_options_bookstores.all()), [])
pass
filepath_or_buffer = _stringify_path(filepath_or_buffer) return _expand_user(filepath_or_buffer), None, compression
class BandAdmin(ModelAdmin): fields = ['name']
assert_almost_equal(metric(y1_1d, y2_list), measure, err_msg="%s is not representation invariant " "with mix np-array-1d and list" % name)
try: connection.rollback() except Error: connection.close()
resp = self._login(email, password) data = parse_json(resp) self.assertTrue(data['success']) return resp
self.version_block(parent, user_id, new_structure['_id'])
X = coo_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
self.assertRaises(PossibleDataLossError, store.open, 'w') store.close() self.assertFalse(store.is_open)
if self.metadata_inheritance_cache_subsystem is not None: self.metadata_inheritance_cache_subsystem.set(unicode(course_id), tree)
sampling_algorithm["custom-pool"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="pool", random_state=random_state)
v.fit(["to be or not to be", "and me too", "and so do you"]) assert False, "we shouldn't get here"
sign_active[idx] = -sign_active[idx]
self._restrict_course(self.course.id) embargo_api.message_url_path(self.course.id, 'courseware')
output = self.engine.render_to_string('filter-syntax10', {"var": None}) self.assertEqual(output, ' endquote" hah')
with self.assertRaises(IOError): file_move_safe(self.file_a, self.file_b, allow_overwrite=False)
if isinstance(s, (np.bytes_, bytes)): s = s.decode(pd.get_option('display.encoding')) return s
import salt.utils
return stdout
field_name = getattr(field, 'name', field) return self[field_name].value
assert handlers == logger.handlers assert level == logger.getEffectiveLevel()
ram = ET.SubElement(content, 'ram-size') ram.text = config.get_cloud_config_value( 'ram', vm_, __opts__, default='256', search_global=False )
]
X = random_state.randn(100, 2) assert_equal(trustworthiness(X, 5.0 + X / 10.0), 1.0)
for index, band in enumerate(self.bands): target.bands[index].nodata_value = band.nodata_value
POST_AUTH_PARAMS = ('course_id', 'enrollment_action', 'course_mode', 'email_opt_in')
return
if not offset.isAnchored() and hasattr(offset, '_inc'): if end_date in self.index: end = self.index.searchsorted(end_date, side='left')
params = self._signed_callback_params(self.order.id, "145.00", "145.00") result = process_postpay_callback(params)
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_id) if has_instructor_access_for_class(request.user, course_key): try: data = dashboard_data.get_d3_sequential_open_distrib(course_key)
@isolate_apps('invalid_models_tests') class UniqueTogetherTests(SimpleTestCase):
if self.is_open: self.close()
tok = tok.replace("\\", "U")
s = (y != 4) X = X[s, :] y = y[s] y = (y != 1).astype(int)
metadata = _init() return list(metadata.keys())
return u"{user}, {course}".format( user=self.username, course=self.course.course_key, )
data = read_sas(self.file01, index="SEQN", format="xport") tm.assert_frame_equal(data, data_csv, check_index_type=False)
__virtualname__ = 'reg'
if location.category in DIRECT_ONLY_CATEGORIES: raise InvalidVersionError(location)
self.assertEqual(len(email_info), 1)
self.assertTrue(self.video.downloaded_transcript_contains_text('srt', 'Welcome to edX.'))
match.__grains__ = {} match.__salt__ = {} match.__opts__ = {} match.__pillar__ = {}
BODY_SELECTOR = "#tags-panel" TAB_SELECTOR = ".tab#view-tags" CHILD_SELECTOR = ".note-group" CHILD_CLASS = EdxNotesTagsGroup
vms[profile] = extended
if branch_setting != ModuleStoreEnum.Branch.published_only: raise ValueError(u"Cannot set branch setting to {} on a ReadOnly store".format(branch_setting)) yield
cost = SumOfCosts([SumOfParams(), (0., DummyCost())]) model = DummyModel(shapes, lr_scalers=scales) dataset = ArangeDataset(1) momentum = 0.5
if _mpl_le_2_0_0(): self.scaled[1. / SEC_PER_DAY] = '%H:%M:%S' self.scaled[1. / MUSEC_PER_DAY] = '%H:%M:%S.%f'
self._params.update(l._params)
log = logging.getLogger(__name__)
import salt.utils import salt.utils.jid
self._get_fields_cache[cache_key] = fields return fields
disabled = self.disable_constraint_checking() try: yield finally: if disabled: self.enable_constraint_checking()
arr = np.arange(15, dtype=float) index = np.arange(15) arr[7:12] = nan arr[-1:] = nan return arr, index
self.assertAlmostEqual( calc.evaluator(variables, {}, "T", case_sensitive=True), 298, delta=0.2 )
def __init__(self, opts, **kwargs): pass
del params["username"] assert_username_error("Username must be minimum of two characters long")
left = self.rng[:10] right = self.rng[5:10]
applied = self.panel.apply(np.sqrt) self.assertTrue(assert_almost_equal(applied.values, np.sqrt( self.panel.values)))
for line in installed_list_file:
_city_file = '' _country_file = ''
if is_jail(name): return 'Created jail {0}'.format(name)
from __future__ import division, absolute_import, print_function
pieces["short"] = mo.group(3)
reader = geoip2.database.Reader(path, mode=cache) db_type = reader.metadata().database_type
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.UNPUBLISHED_CHANGES, is_locked=True), self.STAFF_ONLY_WARNING )
num_braces = 0
for row in unicodecsv.DictReader(csv_file): if row.get('Username') == username: self.assertEqual(row[column_header], expected_cell_content)
pass
import salt.utils
sample_problem_xml = textwrap.dedent(xml)
opts['providers'][lprovider] = {} opts['providers'][lprovider][lprovider] = provider_config
self.assertQuerysetEqual( qs & qs2, [('Second Revision', 'First Revision')], transform=lambda r: (r.title, r.base.title), ordered=False )
serializer = serializer_cls(page, context=serializer_ctx, many=True)
self.assertIn( settings.MICROSITE_CONFIGURATION['test_microsite']["urls"]['TOS_AND_HONOR'], data['company_tos_url'] )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
def reset_queries(**kwargs): for conn in connections.all(): conn.queries_log.clear() signals.request_started.connect(reset_queries)
self.course_info_page.visit() self.tab_nav.go_to_tab('Wiki')
self.find_css(selector).nth(index).click()
self.courseware.go_to_sequential_position(2)
A = np.empty(n_nodes, dtype=object) inertia = list()
options = self.parse_options_string(options_string) self.reset_task_messages() call_task("pavelib.js_test.test_js_run", options=options) self.verify_messages(options=options, dev_mode=False)
self.youtube_configuration.update({ 'youtube_api_blocked': True, })
self.profile.year_of_birth = year_of_birth self.profile.save()
self.assertEqual(s.titles.related_val, (s.id,)) self.assertQuerysetEqual(s.titles.all(), [])
return ' '.join([ descriptor.display_org_with_default, descriptor.display_number_with_default ])
no_steps = -(-(lower_limit - self._start) // abs(self._step)) return self._start + abs(self._step) * no_steps
unshifted = self.tsframe.shift(0) assert_frame_equal(unshifted, self.tsframe)
from __future__ import absolute_import import os import threading
return self._value.dtype
if isinstance(devices, str): devices = devices.split(',')
with assertRaises(ValueError): f() raise ValueError
n_samples, self.n_features_ = X.shape is_classification = isinstance(self, ClassifierMixin)
"corruptor" : *corr
CountryAccessRule.objects.create( rule_type=CountryAccessRule.BLACKLIST_RULE, restricted_course=self.restricted_course, country=Country.objects.get(country='US') )
for cat in item['categories']: handler.addQuickElement("category", "", {"term": cat})
self.find_css('p.group-configuration-usage-text a').first.click()
return None
self.assert_grade(problem, "Second", "correct")
return "'%s'::raster" % self.ewkb
return request.user.is_staff and (obj is not None) and (obj.id % 2 == 0)
response = self.client.get('/lastmod/tz-sitemap.xml') self.assertEqual(response['Last-Modified'], 'Wed, 13 Mar 2013 15:00:00 GMT')
class_priority = ['video', 'problem']
if invoice_transaction.amount > 0: payment_status = 'Invoice Paid' else: payment_status = 'Refunded'
y = np.dot(X, w) X = sp.csc_matrix(X) if n_targets == 1: y = np.ravel(y) return X, y
seed_permissions_roles(course_key)
Xt = X for name, transform in self.steps[:-1]: Xt = transform.transform(Xt) return self.steps[-1][-1].predict_proba(Xt)
for parent in cls._meta.get_parent_list(): for f in parent._meta.get_fields(): if f not in used_fields: used_fields[f.name] = f
return self.list_select_related
return Int64Index([])._values
if subarr.dtype != np.float64: subarr = subarr.astype(np.float64)
return Response(status=status.HTTP_204_NO_CONTENT)
'minion_opts': ssh_schemas.DictItem(title='Minion Options', description='Dictionary of minion options', properties=MinionConfiguration()).serialize(),
if LooseVersion(tables.__version__) < '3.0.0': raise ImportError("PyTables version >= 3.0.0 is required")
if sys.platform.startswith('java'): memoryview = memoryview else: memoryview = buffer buffer_types = (bytearray, memoryview)
l1 = np.random.normal(size=n) l2 = np.random.normal(size=n)
import salt.utils import salt.utils.files import salt.utils.itertools import salt.utils.url from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.ext import six
if len(os.path.dirname(filename)): raise ValueError("Can't pass a qualified name to ensure_clean()")
import functools import re
os.utime(path_test, (fstats_orig.st_mtime-age, fstats_orig.st_atime-age))
import salt.ext.six as six
content = "<p><br><br></p>" payload = get_response(content, 'January 11, 2013') self.assertHTMLEqual(content, payload['content'])
config_course_cohorts(self.course1, is_cohorted=True, auto_cohorts=["Course1AutoGroup1", "Course1AutoGroup2"])
__virtualname__ = 'shadow'
obj = self._convert_freq(how) return obj.as_blocks(copy=False).values(), obj
assert_raises(ValueError, ir.predict, [min(x) - 10, max(x) + 10])
invalid_list = [None, "string", 5, datetime.datetime.today()]
X_var *= X.shape[0] X_scale = np.sqrt(X_var, X_var) del X_var X_scale[X_scale == 0] = 1 inplace_column_scale(X, 1. / X_scale)
from __future__ import absolute_import import sys import warnings
from __future__ import absolute_import import os import time import random import logging import itertools from collections import deque from _socket import gaierror
self._check_align(empty, right, axis=ax, fill_axis=fax, how=kind, method=meth) self._check_align(empty, right, axis=ax, fill_axis=fax, how=kind, method=meth, limit=1)
user.is_active = False user.save() user_fetched = UserModel._default_manager.get(pk=user.pk) self.assertEqual(user_fetched.is_active, True)
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
__func_alias__ = { 'list_': 'list' }
output = self.engine.render_to_string('list-index06', {"var": {1: "hello"}}) self.assertEqual(output, 'hello')
return True
return {key: getattr(self, key) for key in self.FEATURES}
self.lc_block = self.store.get_item(self.lc_block.location) self._bind_course_module(self.lc_block) self.lc_block.xmodule_runtime.publish = self.publisher
def loss_grad_fun(t): return mlp._loss_grad_lbfgs(t, X, Y, activations, deltas, coef_grads, intercept_grads)
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
coords = x
obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')
return __render_script('{0}.sh'.format(os_), vm_, opts, minion)
response = middleware.process_response(request, response)
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_VERIFY)
PARTNER_SUPPORT_EMAIL = ''
if not hasattr(request, '_messages'): return False request._messages.level = level return True
return self.copy(deep=True)
response = self.client.get('/set_session/') self.assertEqual(response.status_code, 200) self.assertEqual(response.content, b'set_session')
return
self.assertEqual(connection.autocommit, autocommit)
self.assertIn(settings.EDXMKTG_LOGGED_IN_COOKIE_NAME, self.client.cookies) self.assertIn(settings.EDXMKTG_USER_INFO_COOKIE_NAME, self.client.cookies)
response = self.client.get(test_url) self.assertIn(str(self.cert.verify_uuid), response.content)
if gdal.HAS_GDAL: return 3857 else: return 900913
DATE_INPUT_FORMATS = [
if os.name == 'nt': old_path = self.work_path new_path = self.path else: old_path = self.work_path[2:] new_path = self.path[2:]
self.opts = None
if self._get_version(draft_block) != self._get_version(published_block): return True
history = PasswordHistory.objects.filter(user=user).order_by('-time_set')[:min_diff_passwords_required]
from salt.exceptions import SaltInvocationError from salt.utils import dictdiffer
ALTER_OPTION_KEYS = [ "get_latest_by", "managed", "ordering", "permissions", "default_permissions", "select_on_save", "verbose_name", "verbose_name_plural", ]
n_classes = 4 n_samples = 50
expected = DataFrame( {0: Series(1, index=range(4))}, columns=['A', 'B', 0])
class UserRegistration(Form): username = CharField(max_length=10, label='Your username') password1 = CharField(widget=PasswordInput) password2 = CharField(widget=PasswordInput, label='Contraseña (de nuevo)')
elif version_num not in pkginfo: log.error('Version {0} not found for package ' '{1}'.format(version_num, pkg_name)) ret[pkg_name] = {'not found': version_num} continue
return self.posterior.encode_conditional_params(X)
pass
self.assertRaises(TypeError, rng.__lt__, rng[3].value)
raise NotImplementedError("non-square filter shape", (frows, fcols))
self.assertEqual(f(None), "0")
import dateutil index = date_range("2012-01-01", periods=3, freq='H', tz='US/Eastern')
targets = email_obj.targets.all() global_email_context = _get_course_email_context(course)
if h_len < len(dev_header): sys_header = dev_header[h_len:] dev_header = dev_header[0:h_len]
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, call )
if not iboost == self.n_estimators - 1: sample_weight *= np.exp(estimator_weight * ((sample_weight > 0) | (estimator_weight < 0)))
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
num_lookups = len(lookups) if num_lookups > 1: raise FieldError('Related Field got invalid lookup: {}'.format(lookups[0]))
loc = self.items.get_loc(item) self._block.delete(loc) self.axes[0] = self.axes[0].delete(loc)
pca = PCA(svd_solver='full') pca.fit(X) assert_almost_equal(pca.explained_variance_ratio_.sum(), 1.0, 3)
check_problem(step)
ldem = left - left.mean() rdem = right - right.mean()
event_iter = self.get_event_iter_returns(jid, minions, timeout=timeout)
continue
add_instance = False
assert_true(np.any(y_pred3 != y7))
newrelic.agent.add_custom_parameter('seq.num_units', len(display_items))
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'vultr'
total_amount_paid = InvoiceTransaction.get_total_amount_of_paid_course_invoices(self.course_key) self.assertEqual(float(total_amount_paid), 0)
from reclass.adapters.salt import top as reclass_top from reclass.errors import ReclassException
return _get_fake_enrollment(student_id, course_id)
response = super(Client, self).head(path, data=data, secure=secure, **extra) if follow: response = self._handle_redirects(response, **extra) return response
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(courses_list_by_groups, [])
self.factory(alpha=0.01, n_iter=20).fit(X2, np.ones(9))
EDXNOTES_PUBLIC_API = 'http://localhost:8120/api/v1' EDXNOTES_INTERNAL_API = 'http://localhost:8120/api/v1'
request.POST['queuekey'] = fake_key self.mock_module.handle_ajax.assert_called_once_with(self.dispatch, request.POST)
store.append('df_dc', df_dc, data_columns=[ 'B', 'C', 'string', 'string2'])
import salt.utils as utils import salt.ext.six as six
updated_overview.version = 11 updated_overview.save()
try: module = getattr(self, '_xmodule', None) if not module: module = self except UndefinedContext: module = self
data = None
destroy_geom = GEOSFuncFactory('GEOSGeom_destroy', argtypes=[GEOM_PTR])
from urllib.request import Request, build_opener
VerificationDeadline.set_deadline(self.course.id, self.VERIFICATION_DEADLINE)
sfn = tmp_filename
def __init__(self, *args, **kwargs): super(CourseTeamSerializerWithoutMembership, self).__init__(*args, **kwargs) del self.fields['membership']
elif self.ndim == ndim: if axes is None: return self._constructor(result) return self._constructor(result, **self._construct_axes_dict())
if item in ['constraint']: if isinstance(item_type, six.string_types): cmd += [item_type]
if 'SYN' in flags and len(flags) == 1: return 100 elif 'FIN' in flags: return 120
import salt.utils from salt.exceptions import CommandExecutionError
if self.indices: return max(len(v) for v in self.indices.values()) else: return 0
parsed_115 = read_stata(self.dta19_115) parsed_117 = read_stata(self.dta19_117) tm.assert_frame_equal(expected, parsed_115, check_categorical=False) tm.assert_frame_equal(expected, parsed_117, check_categorical=False)
def __discover_version(saltstack_version): import os import subprocess
if hasattr(self, 'event'): del self.event
from scipy import misc face = misc.face(gray=True)
if exc.errno != errno.EEXIST: raise else: ret['comment'] = 'File {0} exists and cannot be overwritten'.format(name)
try: indent = min(len(s) - len(s.lstrip()) for s in docstring if s.strip()) except ValueError: indent = 0
select_option_by_value( browser_query=self.settings_detail.pre_requisite_course_options, value=pre_requisite_course_id ) self.settings_detail.save_changes() self.assertEqual( 'Your changes have been saved.', self.settings_detail.alert_confirmation_title.text )
'API': 'https://www.youtube.com/iframe_api',
return [MockUsers()]
received_objects = fetch_results['received_objects']
self.assertEquals( block_key in block_structure, block_key not in missing_blocks, 'Expected presence in block_structure for block_key {} to match absence in missing_blocks.'.format( unicode(block_key) ), )
self.assertTrue(CourseEnrollment.is_enrolled(self.user, course_id)) self.assertTrue(self.user.roles.filter(name="Student", course_id=course_id))
gateway_set = True
from salt.modules import saltcloudmod
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
in_block = True
data['l2'] = data['l2']['ItemB'] self.assertRaises(Exception, Panel4D, data)
(instance_id, region) = _get_instance_info()
return len(self.q(css='div.wrapper-note-excerpts').results)
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
return self.filter_by(data, "user", user)
for name in names: ret[name] = '' cmd = ['pacman', '-Sp', '--needed', '--print-format', '%n %v'] cmd.extend(names)
return self._clone()
ax0 = fig.add_subplot(nrows, ncols, 1, **subplot_kw)
return _("{currency_symbol}{price}").format(currency_symbol=currency_symbol, price=price)
X_transformed_parallel2 = fs_parallel2.fit_transform(X) assert_array_equal( X_transformed.toarray(), X_transformed_parallel2.toarray() )
return {}
import re
best_optimal_theta = [] best_optimal_rlf_value = [] best_optimal_par = []
est = DummyRegressor(strategy="quantile", quantile=0.8) est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
if not encoding or 'ascii' in encoding.lower(): encoding = sys.getdefaultencoding()
if (not directed) and isspmatrix_csc(csgraph): csgraph = csgraph.T
graph = image.img_to_graph(face)
"form-1-id": str(fd2.id), "form-1-reference": "456", "form-1-driver": "bill", "form-1-restaurant": "thai",
with patch.object(XQueueCertInterface, 'add_example_cert') as mock_queue: yield mock_queue
return alias
url(r'^api/bookmarks/', include('openedx.core.djangoapps.bookmarks.urls')),
video_outline = self.api_response().data self.assertEqual(len(video_outline), 0)
return dict(enumerables)[enum_value]
if ndim is None: if isinstance(result, dict): ndim = getattr(list(compat.itervalues(result))[0], 'ndim', 0)
import salt.client.netapi import salt.utils.parsers as parsers from salt.utils.verify import check_user, verify_files, verify_log
value = timezone.make_aware(value.replace(tzinfo=None), tzinfo)
self.series[3] = None self.assertIs(self.series[3], None)
def course_id(course_num): return world.scenario_dict['COURSE'].id.replace(course=course_num)
import salt.config import salt.syspaths as syspaths
return super(NullBackend, self).get_value_for_org(org, val_name, default)
show_keypair = self.run_cloud('-f show_keypair {0} keyname={1}'.format(PROVIDER_NAME, 'MyPubKey'))
@method_decorator(myattr_dec_m, "method") class TestMethodAndClass(object): @method_decorator(myattr2_dec_m) def method(self): "A method" pass
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
raise cls.MyException()
ROOT_EXTRA_FIELDS = 'root_extra_fields'
patched_create_thumbnail.assert_called()
choice_element.append(inp)
assert grad_counter.get_value() == train_batches * updates_per_batch
testing.assert_array_equal(F.transform(X), np.around(X, decimals=1))
return self.mean_h_given_v(v)
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES from salt.exceptions import CommandExecutionError
from __future__ import unicode_literals
master, self.pub_channel = yield self.eval_master(opts=self.opts)
import salt.utils
continue
if any(isnull(removals)): not_included = [x for x in not_included if notnull(x)] new_categories = [x for x in new_categories if notnull(x)]
self.submit_student_answer(self.student_a.username, problem_a_url, [OPTION_1, OPTION_1]) self.submit_student_answer(self.student_b.username, problem_b_url, [OPTION_1, OPTION_2])
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch ) ensure_in_syspath('../../')
else: for str_group_id, usage_key in self.group_id_to_child.items():
buf = [to_str(i) if isinstance(i, six.text_type) else i for i in buf]
field = item
capi.identify_epsg(self.ptr)
courses = self._get_courses_for_org(org_list) only_courses = options.get("courses")
data_abstract = models.CharField(max_length=10) fk_abstract = models.ForeignKey(Relation, models.CASCADE, related_name='fk_abstract_rel')
with self.assertRaises(TemplateSyntaxError): self.engine.get_template('basic-syntax06')
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
ret['result'] = True ret['comment'] = 'property {0} deleted'.format(name) ret['changes'][name] = None del config[name]
self.assertQuerysetEqual( NullableName.objects.exclude(name__in=[None]), ['i1'], attrgetter('name'))
if e in punish: second = punish.index(e) else: second = -1
if sp_version >= (0, 12): solvers.append('lbfgs')
('saml_key', 'MIICsDCCAhmgAw'), ('saml_key_alt', 'MIICWDCCAcGgAw'),
@override_settings(ROOT_URLCONF='auth_tests.urls_admin') class ChangelistTests(AuthViewsTestCase):
cauth = CourseAuthorization(course_id=course_id, email_enabled=False) cauth.save()
mongouri = 'mongodb://{user}:{password}@{host}:{port}/{db}'.format(**mongo_db)
src_dir = parent_dir.replace(':', '_')
assert_greater(np.mean(labels == true_labels), .3)
discussion_item = self.store.create_item(self.user.id, course.id, 'discussion', 'new_component')
fgroups = hgroups filters_per_group = hcolors_per_group
with salt.utils.fopen(path_test, 'r') as fp_test_: self.assertTrue((sum(1 for _ in fp_test_) == 1))
if len(rtnv) == 0: rtnv.append([])
__virtualname__ = 'influxdb'
result = transf(result)
'pub_hwm': int,
response = getattr(self.client, method)(self.path, content_type=JSON_CONTENT_TYPE) self.assertEqual(response.status_code, 403)
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
long_name += '1' self.assertEqual(len(long_name), 49) self.assertFalse(linode._validate_name(long_name))
other_cmap = CorrectMap() other_cmap.update(self.cmap)
from __future__ import absolute_import
_do_scale_test(scaled) assert_almost_equal(scaled.sum(axis=0).mean(), scaled.sum(axis=1).mean(), decimal=1)
rng = np.random.RandomState(42) all_data, _ = make_blobs(n_samples=n_samples_max + n_queries, n_features=n_features, centers=n_centers, shuffle=True, random_state=0) queries = all_data[:n_queries] index_data = all_data[n_queries:]
f = lambda x: x.rename({1: 'foo'}, inplace=True) _check_f(d.copy(), f)
self.store.delete_course(self.course.id, self.user.id)
if len(found.intersection(minions)) >= len(minions): raise StopIteration()
if user is not None and password is not None: mongo_conn.authenticate(user, password)
return self._decision_function(X)
self._fire_master_syndic_start()
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
assert_equal(iterations, expected_n_iter) if n_samples is not None: assert_equal(collected_test_samples, set(range(n_samples)))
self.assertContains(resp, 'payment-button')
offset = klass._from_name(*split[1:])
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
del params["terms_of_service"] assert_terms_of_service_error("You must accept the terms of service.")
log.warning( "Error while previewing formula", exc_info=True ) result['error'] = _("Error while rendering preview")
(grains['kernel'], grains['nodename'], grains['kernelrelease'], version, grains['cpuarch'], _) = platform.uname()
g.precisions_init = rand_data.precisions[covar_type] g.fit(X) assert_array_equal(rand_data.precisions[covar_type], g.precisions_init)
expected_1 = DatetimeIndex(['2000-01-31', '2000-03-31', '2000-04-30', '2000-05-31'], freq=None, name='idx')
self.password = 'abc' self.student = UserFactory.create(username='student', email='student@test.com', password=self.password)
log = logging.getLogger(__name__)
import integration import salt.utils
moments_1[k] = moments_1[i] + moments_1[j] moments_2[k] = moments_2[i] + moments_2[j]
if 'error' in _response: return set_salt_view()
with tm.assertRaises(ValueError): df.hist(layout=(1,)) with tm.assertRaises(ValueError): df.hist(layout=(-1, -1))
kwargs['force'] = True return image_present(name, **kwargs)
request = self.request_factory.get('/', {'publication-decade': 'the 00s'}) changelist = self.get_changelist(request, Book, modeladmin)
for zp in res['stdout'].splitlines(): zp = zp.split("\t") zp_data = {}
'post_params_success': post_params_success,
shape = left.apply(Series.nunique).values self.assertTrue(_int64_overflow_possible(shape))
donation_type = models.CharField(max_length=32, default="general", choices=DONATION_TYPES)
self.assertRaises( FileserverConfigError, role_class, *args )
get_connection(using).clean_savepoints()
if not os.path.isdir(orig_path): raise IOError("You need to download the SVHN format2 dataset MAT files " "before running this conversion script.")
#epub_cover = ()
#latex_use_parts = False
return CourseEmailTemplate.get_template(name=self.template_name)
return not ( (converter(opts.db_table) in tables) or (opts.auto_created and converter(opts.auto_created._meta.db_table) in tables) )
pstat = os.lstat(path)
return models.Client.objects.create( name=name, user=user, client_id=client_id, redirect_uri=redirect_uri, client_type=constants.PUBLIC, )
if self.nlevels != other.nlevels: return False for i in range(self.nlevels): if not self.levels[i].equals(other.levels[i]): return False return True
import salt.utils from salt._compat import subprocess, ipaddress
self.config.pop('log_datefmt_console', None)
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children() exit(0)
sdist_class = cmdclass['sdist']
xT_AT = self.lmul_T(self.transpose_right(x, False)) rval = self.transpose_left(xT_AT, False) return rval
return int(self.q(css=self.CURRENT_PAGE_NUMBER_CSS).text[0])
'monitoring',
range_ = T.tile(range_.dimshuffle(0, 'x'), (1, self.binary_target_dim)).flatten()
self.assertEqual(len(course.children), 2) self.assertIn(dangling_pointer, course.children)
self._assert_not_almost_equal_both(iter([1, 2, 3]), [1, 2, 3])
results = self.proxy.search({ 'name': self.package_name, 'description': self.package_name }, 'or')[:15]
face = face.mean(axis=2)
list_staff_master_course = list_with_level(self.course, 'staff') list_instructor_master_course = list_with_level(self.course, 'instructor')
for block_hierarchy in course_hierarchy: self.add_parents(block_hierarchy, block_map)
qs = RasterRelatedModel.objects.filter(rastermodel__rast__1__dwithin=(rast, 40)) self.assertEqual(qs.count(), 1)
assert_index_equal(idx1, idx2, check_exact=False, check_less_precise=True)
alpha = float(alpha) random_state = check_random_state(random_state)
proba[(1.0 < proba) & (proba <= 1.0 + 1e-5)] = 1.0
self.process_manager.add_process(self.run_reqserver, kwargs=kwargs, name='ReqServer')
raise NotImplementedError('subclasses of SessionBase must provide a load() method')
self.q(css='.action-edit-members').first.click() self.wait_for_ajax()
p_idx = rng.randint(num_p)
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
err.truncate(0) with self.assertRaises(CommandError): command.run_from_argv(['', '', '--traceback'])
import logging
break
self.assertEqual( res_json['message'], u"{user} does not exist in the LMS. Please check your spelling and retry.".format(user=invalid_user) )
self._pool = None self._output = None self._jobs = list() self._managed_pool = False
vals = Series(np.random.randn(10)) vals[4] = np.nan vals[8] = np.nan
initial_file = os.path.join(migration_dir, "0001_initial.py") self.assertTrue(os.path.exists(initial_file))
regr_1 = DecisionTreeRegressor(max_depth=4)
from __future__ import absolute_import import copy import contextlib
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
import sys import time import datetime
from __future__ import absolute_import
try: if os.path.exists('/proc/sys/kernel/pty/nr'): with fopen('/proc/sys/kernel/pty/nr') as fh_: return int(fh_.read().strip())
pass
__context__['cmd.run_chroot.func'] = __salt__['cmd.run'] ret = __salt__['cmd.run_chroot'](rootfs, cmd, stdin=stdin, python_shell=python_shell, output_loglevel=output_loglevel, ignore_retcode=ignore_retcode)
if all((ky,kx) >= topleft) and all((ky,kx) < botright):
try: with fopen(fp_, 'rb') as fp2_: block = fp2_.read(blocksize) except IOError: return False
import salt.ext.six as six from salt.ext.six.moves import input try: import msgpack except ImportError: pass
from __future__ import absolute_import
assert_array_almost_equal(dist1, dist2)
for block_type, block_id in self.selected_children(): yield self.runtime.get_block(self.location.course_key.make_usage_key(block_type, block_id))
super(CourseViewMixin, self).perform_authentication(request) if request.user.is_anonymous() and not settings.DEBUG: raise AuthenticationFailed
return False
return self.to_object_block(mgr=mgr).fillna(original_value, limit=limit, inplace=inplace, downcast=False)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( mock_open, patch, NO_MOCK, NO_MOCK_REASON )
self.opts = opts
def __init__(self, delay, func): self.func = func def start(self): self.func()
assert self.get_mlp() is None self.mlp = mlp
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
safe_exec("a = int(math.pi)", g) self.assertEqual(g['a'], 3)
if coefs.ndim > 1: ranks = np.argsort(safe_sqr(coefs).sum(axis=0)) else: ranks = np.argsort(safe_sqr(coefs))
child_descriptor = self.descriptor.get_child(usage_id) child_block = None if child_descriptor is not None: child_block = self.system.get_module(child_descriptor)
self.q(css='div.problem .choicegroup input[value="' + choice_value + '"]').click() self.wait_for_ajax()
pass
BODY_SELECTOR = ".note-section" TITLE_SELECTOR = ".course-subtitle"
pool = ThreadPool(8) results = pool.map(self.read_csv, files) first_result = results[0]
csv_file, courses_info = self.generate_registration_codes_csv(orderitems, site_name)
num_vis = rng.randint(1,11) n_classes = rng.randint(1, 11)
return render_javascript_catalog()
pkgs_str = ','.join([state_name for _, state_name in target_pkgs])
try: import confidant.client import confidant.formatter HAS_LIBS = True except ImportError: HAS_LIBS = False
from __future__ import unicode_literals
log.debug("No module %s for user %s -- access denied?", usage_key, user) raise Http404
self.assertContains(response, "<h2>admin_list</h2>", count=2, html=True)
pred = mb_k_means.predict(mb_k_means.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
self._setup_mode_and_enrollment(self.PAST, "verified")
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
raise NotImplementedError('subclasses of ListFilter must provide a has_output() method')
cat = pd.Categorical([np.nan, 1, 2., 3]) self.assertTrue(com.is_float_dtype(cat.categories))
import salt.utils import salt.modules.cmdmod import salt.utils.systemd
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
instance.image.delete(save=False)
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
self.assertEqual(event.dt.replace(tzinfo=EAT), dt)
if value is None: return arg return value
if not statefiles: statefiles = [sls_match]
item = self.panel['ItemA'] self.panel.items = new_items
for key, val in new_block.edit_info.to_storable().iteritems(): if getattr(destination_block.edit_info, key) is None: setattr(destination_block.edit_info, key, val)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
cur_out = self._func(*augmented) rval = [x + y for x, y in safe_zip(rval, cur_out)]
import pymysql pymysql.install_as_MySQLdb() import MySQLdb import MySQLdb.cursors import MySQLdb.converters from MySQLdb.constants import FIELD_TYPE, FLAG HAS_MYSQLDB = True
response = views.container_handler( request=request, usage_key_string=unicode(self.vertical.location) ) self.assertEqual(response.status_code, 200)
import salt.utils.boto3 import salt.utils.compat import salt.utils from salt.ext.six import string_types
ForestClassifier = FOREST_CLASSIFIERS[name]
continue
out = [head] (head, tail) = os.path.split(head)
self.download_results = None
return status in cls.PASSED_STATUSES
super(ForumTestCase, self).setUp() self.course = CourseFactory.create(org='testX', number='727', display_name='Forum Course')
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return ''.join(np.random.choice(RANDS_CHARS, nchars))
widget = MyMultiWidget(widgets=(TextInput(), TextInput())) self.assertFalse(widget.needs_multipart_form)
mock_get.return_value.content = "Error" self.assertRaises(EdxNotesParseError, helpers.get_notes, self.request, self.course)
if 'Code' in items or len(items['Images']['Image']) == 0: raise SaltCloudNotFound('The specified image could not be found.')
CourseEnrollment.enroll(user, course_key=course.location.course_key) self.assertFalse(user.badgeassertion_set.all())
CELERYD_PREFETCH_MULTIPLIER = 1
_UA_PRODUCT = 'salt-cloud' _UA_VERSION = '0.2.0'
latex_documents = [ ('contents', 'django.tex', 'Django Documentation', 'Django Software Foundation', 'manual'), ]
import salt import salt.netapi
class First(models.Model): second = models.IntegerField()
if self.default: return self.get_default() return None
if len(image.shape) == 3 and image.shape[2] == 1: image = image[:, :, 0]
return self._upsample('backfill', limit=limit)
match_type = match_type.group()[6:-1].lower() if match_type in html_types: context_type = 'html' elif match_type not in javascript_types: context_type = 'unknown'
for i, key in enumerate(tup): if is_label_like(key) or isinstance(key, tuple): section = self._getitem_axis(key, axis=i)
return item.location.version_agnostic().replace(branch=None)
course_id = None
response = self.client.get('/permission_protected_method_view/') self.assertRedirects(response, '/accounts/login/?next=/permission_protected_method_view/')
bogus_task_id = "this-is-bogus" update_subtask_status(entry_id, bogus_task_id, new_subtask_status)
ret['retcode'] = int(not __salt__['ps.kill_pid'](pid))
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
startdate = Series(date_range('2013-01-01', '2013-01-03')) enddate = Series(date_range('2013-03-01', '2013-03-03'))
__func_alias__ = { 'set_': 'set', 'list_': 'list', }
alpha_scaled = float(alpha) / n_samples
from __future__ import absolute_import
minion.setdefault('grains', {}).update( salt.config.get_cloud_config_value( 'grains', vm_, opts, default={}, search_global=True ) ) return minion
self.assertFalse(self._has_changes(locations['grandparent'])) self.assertFalse(self._has_changes(locations['parent']))
if not self.index: self.make_index() block = self.index.get(lineno, None) text = getattr(block, 'text', default) return text
ManagedModel.objects.create(data='mm1', tag=self.t1, public=True) self.assertEqual(ManagedModel.objects.update(data='mm'), 1)
course_id = student_module.course_id student = student_module.student usage_key = student_module.module_state_key
if isinstance(geo_fld, BaseSpatialField): return geo_fld else: return False
precision recall f1-score support a 0.83 0.79 0.81 24 b 0.33 0.10 0.15 31 c 0.42 0.90 0.57 20
to_string(monitor)
self.a.headline = 'Parrot programs in Python' self.a.save()
assert len(world.browser.windows) == 1 alert = world.browser.get_alert() alert.accept() check_no_alert()
__virtualname__ = 'sysctl'
out = StringIO() DummyCommand().execute(*args, stdout=out, **kwargs) out.seek(0) return json.loads(out.read())
df = self.hist_df
truncated = ts.truncate(after=self.ts.index[0] - offset) assert (len(truncated) == 0)
if com.is_datetime64_dtype(arr): arr = arr.view(com._NS_DTYPE)
log_format = '[%(name)s] %(message)s' handler = TestsLoggingHandler(format=log_format) log.addHandler(handler)
with ensure_clean_store(self.path) as store:
class AsyncTestCase(object): pass
form = ExplicitPKForm({'key': '', 'desc': ''}) self.assertFalse(form.is_valid())
for backend in auth.get_backends(): if not hasattr(backend, 'has_module_perms'): continue try: if backend.has_module_perms(user, app_label): return True except PermissionDenied: return False return False
indices = np.arange(n_features) generator.shuffle(indices) X[:, :] = X[:, indices]
fixtures = [] def testClassFixtures(self): "Check that there were no fixture objects installed" self.assertEqual(Article.objects.count(), 0)
'dark_lang',
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
all_perms = set(Permission.objects.using(using).filter( content_type__in=ctypes, ).values_list( "content_type", "codename" ))
b1 = b.reindex(index=reversed(b.index)) result = a.dot(b) tm.assert_frame_equal(result, expected)
return course_metadata_utils.has_course_ended(self.end)
bin_path = bin_path.strip('"') if exe_args is not None: bin_path = '{0} {1}'.format(bin_path, exe_args)
python_block_regex = re.compile(r'<%\s(?P<code>.*?)%>', re.DOTALL)
for topic_id in range(self.NUM_TOPICS): team = CourseTeamFactory.create( name=u"Team for topic {}".format(topic_id), course_id=self.course.id, topic_id=topic_id, )
lines = text[:10000].split('\n')[:-1][:10]
response = super(Client, self).options(path, data=data, content_type=content_type, secure=secure, **extra) if follow: response = self._handle_redirects(response, **extra) return response
self.assertRaises(Exception, self.panel.minor_xs, 'E')
(self.gx, self.gy) = [int(x) - 15 for x in m.groups()]
self.assertEqual(1, c.num_geom)
raise NotImplementedError()
source_course = self.store.get_course( source_course.location.course_key, remove_version=False, remove_branch=False )
pass
test_model = CourseMetadata.fetch(self.fullcourse) self.assertIn('giturl', test_model)
def makeTimeDataFrame(nper=None, freq='B'): data = getTimeSeriesData(nper, freq) return DataFrame(data)
from __future__ import unicode_literals
if axis is None: axis = 0 axis = self._get_axis_number(axis) method = missing.clean_fill_method(method)
prob_sum = prob.sum(axis=1) all_zero = (prob_sum == 0) if np.any(all_zero): prob[all_zero, :] = 1 prob_sum[all_zero] = len(self.classes_)
mean = species.cov_train.mean(axis=0) std = species.cov_train.std(axis=0) train_cover_std = (species.cov_train - mean) / std
CREDIT_REQUIREMENT_XBLOCK_CATEGORIES = [ "edx-reverification-block", ]
try: atomic_replace(temp_filename,local_dst) except Exception as e: raise IOError("[ac] %s %s --> %s" % (str(e),temp_filename,local_dst))
if request.status_code == 204: return True
from selenium.webdriver.common.by import By from selenium.webdriver.support import expected_conditions as ec self.wait_until( ec.visibility_of_element_located((By.CSS_SELECTOR, css_selector)), timeout )
first_request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"])
data = read_sas(self.file01, format="xport") tm.assert_frame_equal(data, data_csv)
result = df.iloc[4:8] expected = df.ix[8:14] assert_frame_equal(result, expected)
ret = {} for minion, data in six.iteritems(returns): ret[minion] = json.loads(data) return ret
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
x = np.array([0, 1, 1, 0, 0]) y = np.array([1, 0, 0, 0, 1])
pass
with self._capture_assertion_errors(): context = assertion(*args, **kwargs)
if file_name == os.path.basename(__file__): return results
return self.prior.log_p_z(z)
assert_array_almost_equal(coef_dense, coef_sorted.toarray())
evecs /= np.apply_along_axis(np.linalg.norm, 0, evecs)
raise NotImplementedError()
youtube_stub_config_url = cls.URL + 'get_config' response = requests.get(youtube_stub_config_url) if response.ok: return json.loads(response.content) else: return {}
def __init__(self, msg, eigenvalues, eigenvectors): ArpackError.__init__(self, -1, {-1: msg}) self.eigenvalues = eigenvalues self.eigenvectors = eigenvectors
break
steps = [self.activations[:]]
return event['event_type'] in ('load_video', 'play_video', 'pause_video')
if xmodule_runtime is None: xmodule_runtime = ModuleSystemFactory() self.xmodule_runtime = xmodule_runtime
if self.total_curr_counts == 0: self.reset() raise StopIteration()
course = ItemFactory.create( parent_location=self.course.location, category="course", display_name="Test course", )
youtube_video_id = microsite.get_value('homepage_promo_video_youtube_id', "your-youtube-id") context['homepage_promo_video_youtube_id'] = youtube_video_id
'syndic_master_port', opts.get( 'master_port', minion_defaults.get( 'master_port', DEFAULT_MINION_OPTS['master_port'] ) )
updated_user = User.objects.get(id=uid_int)
return block_structure.get_transformer_block_field( block_key, cls, cls.MERGED_VISIBLE_TO_STAFF_ONLY, False )
qs1 = SouthTexasCity.objects.filter(point__distance_gte=(self.stx_pnt, D(km=7))).filter( point__distance_lte=(self.stx_pnt, D(km=20)), )
d = TreeEstimator(random_state=0, max_depth=max_depth).fit(X, y) s = TreeEstimator(random_state=0, max_depth=max_depth).fit(X_sparse, y)
if wua_download_list.Count == 0: log.debug('No updates to download') else: log.debug('Downloading...') wua_downloader.Updates = wua_download_list
'ssh_connect_timeout', vm_, __opts__, 900
start_delim_index = template.find(start_delim, start_index, close_char_index) if 0 <= start_delim_index < open_char_index: return None
for (x, is_constant, no_nans) in self.data: functions = self.base_functions
with self.assertRaises(ValueError): Book.objects.all().annotate(Avg('authors__age'), authors__age__avg=Avg('authors__age'))
try: geo_value = instance.__dict__[self._field.attname] except KeyError: geo_value = super(SpatialProxy, self).__get__(instance, cls)
self._change_student_enrollment(self.enrolled_student, self.course, 'enroll')
if time_since_last_activity > timedelta(seconds=timeout_in_seconds): del request.session[LAST_TOUCH_KEYNAME] auth.logout(request) return
try: with open(env_path) as env_file: return json.load(env_file)
fig = plt.figure(figsize=(15, 8)) plt.suptitle("Manifold Learning with %i points, %i neighbors" % (1000, n_neighbors), fontsize=14)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
self.course_nav.go_to_vertical('Test Problem 1')
ws = create_connection('wss://localhost:8000/formatted_events/d0ce6c1a37e99dcc0374392f272fe19c0090cca7')
self.assert_enrollment_status(as_server=True, mode=selected_mode)
descriptor.save() return descriptor
if auth_entry and auth_entry in pipeline.AUTH_DISPATCH_URLS: redirect_uri = pipeline.AUTH_DISPATCH_URLS[auth_entry]
salt '*' vsphere.set_coredump_network_config my.esxi.host root bad-password 'dump_ip.host.com'
if runas: os.seteuid(euid) os.setegid(egid) if exc is not None: raise CommandExecutionError( 'Exception encountered unpacking zipfile: {0}'.format(exc) )
container = self.go_to_nested_container_page() self.verify_groups(container, ['alpha', 'gamma'], ['beta'])
return self._decision_function(X)
try: self._destructor(self._ptr) except (AttributeError, TypeError):
ofile.writelines(lines)
p1.save_base(raw=True) self.assertEqual(data, [ (p1, True), (p1, False, True), ]) data[:] = []
clf = svm.SVC().fit(X, Y) assert_raises(ValueError, clf.predict, sparse.lil_matrix(X))
log.exception("Error in get_module") return None
if hasattr(self, 'vae'): return self.vae else: return None
if self.coord_dim != geom.coord_dim: geom.coord_dim = self.coord_dim
self.browser.refresh() self.cohort_management_page.wait_for_page() self.instructor_dashboard_page.select_cohort_management() self.cohort_management_page.wait_for_page() self.cohort_discussion_topics_are_visible()
scores = cval.cross_val_score(clf, X_sparse, X) assert_array_equal(scores, clf.score(X_sparse, X))
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key))
continue
def testit(container): container[0] = 16
VerificationStatus.add_status_from_checkpoints( checkpoints=[self.first_checkpoint, self.second_checkpoint], user=self.user, status=status )
_setup_mp_logging_listener_ = False
with self.assertRaises(Exception): r.tell()
setattr(_MovedItems, move.name, move)
cols = [] for source in self.get_source_expressions(): cols.extend(source.get_group_by_cols()) return cols
self._access = {}
if item.has_children: for child_loc in item.children: _internal_depth_first(child_loc, False)
self.course = CourseFactory.create()
assert_equal(sample_without_replacement(5, 0).shape, (0, )) assert_equal(sample_without_replacement(5, 1).shape, (1, ))
G_diag = G_diag[:, np.newaxis]
response = self.client.get(reverse('admin:admin_views_recipe_changelist'), {TO_FIELD_VAR: 'rname'}) self.assertEqual(response.status_code, 200)
for output_dir in [self.temp_dir_1, self.temp_dir_2]: call_command('export', course_id, output_dir)
inherited = String(scope=Scope.settings, default="the default") not_inherited = String(scope=Scope.settings, default="nothing")
ret = ret[self.quoteCharLen:-self.endQuoteCharLen]
super(CustomSVR, self).fit(X, y, sample_weight=sample_weight) self.data_type_ = type(X) return self
url = endpoint + urlquote(user.username) response = openid_request.answer(True, None, url)
ret += '{0}\n'.format(pprint.pformat(data))
response = self.client.get(reverse('admin:admin_views_supervillain_change', args=('abc',))) self.assertEqual(response.status_code, 404)
age = time.time() - timestamp if age > max_age: raise SignatureExpired( 'Signature age %s > %s seconds' % (age, max_age))
from __future__ import unicode_literals
didx = DatetimeIndex(start='2013/01/01', freq='D', periods=400) pidx = PeriodIndex(start='2013/01/01', freq='D', periods=400)
actual = grouped_df.pid.transform(len) assert_series_equal(actual, expected)
caption_line_selector = ".subtitles li[data-index='{index}']".format(index=line_number - 1) self.q(css=caption_line_selector).results[0].send_keys(Keys.ENTER)
import integration import salt.utils
enable_sigusr1_handler()
return self._constructor_sliced.from_array(values, index=self.index, name=items, fastpath=True)
from __future__ import absolute_import, print_function
self.q(css='.button-preview').first.click() self._switch_to_lms()
date = tz('US/Central').localize(datetime(1990, 1, 1, 3)) result[date] = 0 result[date] = ts[4] assert_series_equal(result, ts)
if getattr(storage, 'prefix', None): prefixed_path = os.path.join(storage.prefix, path) else: prefixed_path = path
return getattr(self.queryables.get(self.lhs), 'kind', None)
c = self.copy() expressions = [ Coalesce(expression, Value('')) for expression in c.get_source_expressions() ] c.set_source_expressions(expressions) return c
n_samples, n_features = 6, 5 y = rng.randn(n_samples) X = rng.randn(n_samples, n_features)
if mode in ['r', 'r+']: self.assertRaises(IOError, HDFStore, path, mode=mode)
key = safe_key(key, '', '')
assert_raises(VerificationException, attempt.submit)
self.exceptions.extend([KeyboardInterrupt, WorkerInterrupt])
with warnings.catch_warnings(record=True) as recorded_warnings: raise_warning() self.assertEqual( 'Deprecation Message!', str(recorded_warnings[0].message) )
self.q(css="input[name=authorize]").click()
try: if self._offset in (BusinessHour, CustomBusinessHour): offset = self._get_offset(self._offset, value=100000) else: offset = self._get_offset(self._offset, value=10000)
middleware.process_request(request) request.session['hello'] = 'world'
new_conf.append(line)
elif line[0].isspace(): sline = line.split()
NUMBER_GROUPING = 0
response = other_view(request, '7') self.assertEqual(response.content, b'Hello World 7')
self.dashboard_page.visit()
requested_format = request.GET.get('_accept', request.META.get('HTTP_ACCEPT', 'text/html'))
from datetime import datetime, date import time import re import copy import itertools import warnings import os
try: os.remove(trans_tar) except (OSError, IOError): pass
self.q(css=".payment-button").click() FakePaymentPage(self.browser, self._course_id).wait_for_page()
dest_course_id = self._map_revision_to_branch(dest_course_id, revision=revision) return super(DraftVersioningModuleStore, self).clone_course( source_course_id, dest_course_id, user_id, fields=fields, **kwargs )
from salt.states import rabbitmq_cluster
stringToSign = 'GET&%2F&' + percent_encode(canonicalizedQueryString[1:])
__virtualname__ = 'pkg'
course_one_team.add_user(self.user)
for name in FOREST_CLASSIFIERS: yield check_gridsearch, name
del_info = self.run_function('user.info', [DEL_USER]) if del_info: self.run_function('user.delete', [DEL_USER])
from .comment import Comment from .thread import Thread from .user import User from .commentable import Commentable
return self.render()
lookup_name = 'testyear'
log = logging.getLogger(__name__)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
self.current_request_configuration.data = {} self.current_request_configuration.cache = {}
self.server.config['test_reset'] = 'This is a reset config test'
Q, _ = linalg.qr(safe_sparse_dot(A, Q), mode='economic') return Q
from __future__ import unicode_literals
if load['tgt_type'] == 'list': int_payload['topic_lst'] = load['tgt']
try: mod = import_module(app + '.startup') except ImportError: continue
self.assertTrue( CourseEnrollment.objects.filter(course_id=self.course.id, user=student).exists() )
calendar0 = self.selenium.find_element_by_id('calendarin0') tds = calendar0.find_elements_by_tag_name('td')
self.store.delete_item( self.icrv.location, ModuleStoreEnum.UserID.test, revision=ModuleStoreEnum.RevisionOption.published_only )
import sass
return 'telemetry_alert' if 'telemetry.get_alert_config' in __salt__ else False
return [lib for lib in modulestore().get_libraries() if has_studio_read_access(user, lib.location.library_key)]
self.assertTrue(form.is_valid()) self.assertEqual(form.cleaned_data['dt'], datetime.datetime(2011, 3, 27, 2, 30, 0))
exp = Series([], dtype='float64', index=Index([], dtype='float64')) assert_series_equal(result, exp)
assert_equal(hamming_loss(y1[0], y2[0]), sp_hamming(y1[0], y2[0]))
ret['changes'] = {name: __salt__['chocolatey.install'](name, version, source, force, install_args, override_args, force_x86, package_args)}
('purchased', 'purchased'),
self.definition_loaded = False self.from_storable(kwargs)
scaler = StandardScaler(with_mean=False).fit(X) scaler_incr = StandardScaler(with_mean=False)
from salt.modules import pkgutil from salt.exceptions import CommandExecutionError, MinionError
from __future__ import absolute_import import os import shutil
n_samples = 100 n_features = 500 rank = 5 k = 10
cidx2 = CategoricalIndex(list('aacded'), categories=list('edabc')) idx2 = Index(list('aacded'))
raise nose.SkipTest("failing on %s" % ' '.join(platform.uname()).strip())
centers = clusterer.cluster_centers_ ax2.scatter(centers[:, 0], centers[:, 1], marker='o', c="white", alpha=1, s=200)
raise NotImplementedError("Unable to send refund processing emails to microsite teams.")
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from datetime import timedelta, datetime import json
for handler in logging.root.handlers: handler.addFilter(SleekXMPPMUC())
return tslib.maybe_get_tz('dateutil/' + tz)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, Mock, NO_MOCK, NO_MOCK_REASON )
CourseTeamIndexer.engine().destroy() for team in self.test_team_name_id_map.values(): CourseTeamIndexer.index(team)
gated_content = gating_api.get_gated_content(self.course, self.effective_user) if gated_content: if unicode(self.section.location) in gated_content: raise Http404
return 'Undefined SHIM state'
if value == 0: return 0 return math.pow(2, math.ceil(math.log(value, 2)))
arr, index = _test_data2() arr[np.isnan(arr)] = 0 return arr, index
MAX_STUDENTS_PER_PAGE_GRADE_BOOK = 20
params = self._signed_callback_params(self.order.id, self.COST, self.COST, decision='REJECT') result = process_postpay_callback(params)
rng = check_random_state(0)
if 'user_id' in context and 'course_id' in context: message_body = substitute_keywords_with_data(message_body, context)
atexit.register(shutil.rmtree, six.text_type(TMPDIR))
return redirect_with_get('signin_user', request.GET)
import salt.utils
self.assertEqual(course.edited_by, "testassist@edx.org") self.assertDictEqual(course.grade_cutoffs, {"Pass": 0.45})
import salt.utils from salt.ext import six
mylocalrepo: git.config_unset: - name: foo.bar - value_regex: 'baz' - repo: /path/to/repo
class MyEstimator(BaseEstimator):
memb = ax.asfreq(self.freq, how=self.convention)
for op in ['__eq__', '__le__', '__ge__']:
self.client.get('/logout/next_page/') self.assertEqual(len(self.logged_out), 1) self.assertEqual(self.logged_out[0], None)
if not available(name): return False
return
Thing.objects.create(num=num) transaction.on_commit(lambda: self.notify(num))
log_setup.setup_multiprocessing_logging()
expected = self.create_index() if not isinstance(expected, MultiIndex): expected.name = 'foo' result = pd.Index(expected) tm.assert_index_equal(result, expected)
return self.best_estimator_.predict_log_proba(X)
'ADVANCED_SECURITY': False,
city_label = _(u"City")
self.assertEqual(result['success'], 'correct') self.assertEqual(module.attempts, num_attempts + 1)
return '<p class="error_msg">EXCEPTION!</p>'
srs = srs_input
request.session.flush()
expected = ''
X = check_array(X, dtype=DTYPE, order="C") return self._decision_function(X).ravel()
del self._args_for_getstate del self._kwargs_for_getstate return {'args': args, 'kwargs': kwargs}
course = xml.CourseFactory.build() sequence = xml.SequenceFactory.build(parent=course) vertical = xml.VerticalFactory.build(parent=sequence)
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.get_items(course_key, **kwargs))
if key.scope not in self.VALID_SCOPES: raise InvalidScopeError(key, self.VALID_SCOPES) if key.scope == Scope.content: self._load_definition()
origin = bool(re.search('/', pkgname))
self.join(other2, main)
def __init__(self, developer_message, user_message=None): self.developer_message = developer_message self.user_message = user_message
epub_theme = 'djangodocs-epub'
X = [[0, 1], [1, 0]] for n_components in [-1, 0, .99, 3]: assert_raises(ValueError, IncrementalPCA(n_components, batch_size=10).fit, X)
LOGGER.info(u"Output file: {file_path}".format(file_path=file_path))
cache.set('infinite_foo', 'bar') self.assertEqual(cache.get('infinite_foo'), 'bar')
self.assertTrue(self.store.has_changes(self.store.get_item(self.course.location)))
df = _make_mixed_dtypes_df('float', dict(A=1, B='foo', C='bar')) _check_mixed_dtypes(df)
self.assertFalse([ requirement for requirement in requirements if requirement['namespace'] == 'proctored_exam' ])
'external_auth', 'django_openid_auth',
CELERYD_PREFETCH_MULTIPLIER = 1
all_lists = np.all([not hasattr(v, "rvs") for v in self.param_distributions.values()]) rnd = check_random_state(self.random_state)
ret = {'name': name, 'result': True, 'changes': {}, 'comment': ''}
if len(self): self._check_setitem_copy()
from __future__ import absolute_import import os
from __future__ import absolute_import
monitor = lm.LiveMonitor() monitor.update_channels(['train_objective'], start=0, end=2) assert(len(monitor.channels['train_objective'].val_record) == 2)
self.frame.to_excel(path, 'test1') recons = read_excel(path, 'test1', index_col=0) tm.assert_frame_equal(self.frame, recons)
elif storage in self._used_storages: storage._store([], response) self._used_storages.remove(storage)
with option_context('display.max_rows', 3, 'display.max_columns', 3):
pass
tm._skip_if_no_localpath()
pass
return 1 / numpy.sinh(arg)
with self.assertRaises(PermissionDenied): add_user_with_status_granted(self.user, self.user) with self.assertRaises(PermissionDenied): update_course_creator_group(self.user, self.user, True)
name = self.get_available_name(name) full_path = self.path(name)
mmd = min_dists.mean()
with tm.assert_produces_warning(FutureWarning): rng += other tm.assert_index_equal(rng, expected)
super(FormatInterpolateVisitor, self).__init__(file_contents, results) self.interpolates_text_or_html = False self.format_caller_node = None
bulk_write_record = self._get_bulk_ops_record(course_key) if bulk_write_record.active: try: del bulk_write_record.modules[version_guid][block_key] except KeyError: pass
response = self.client.get(self.url, content_type="application/json") self.assertHttpOK(response)
if hasattr(new_context, '_processors_index'): del new_context._processors_index return new_context
_delete_entrance_exam(request, course_key) return _create_entrance_exam( request=request, course_key=course_key, entrance_exam_minimum_score_pct=entrance_exam_minimum_score_pct )
try: import SoftLayer HAS_SLLIBS = True except ImportError: HAS_SLLIBS = False
seed = random_state.randint(0, np.iinfo(np.int32).max)
from functools import wraps import random
df = pd.read_csv(StringIO(raw), sep=r'\s+') res = df.replace({'\D': 1}) assert_frame_equal(df, res)
(['honor', 'verified', 'audit', 'credit'], 'credit'),
ir = IsotonicRegression(increasing='auto', out_of_bounds="clip") ir.fit(x, y)
from __future__ import absolute_import import logging import datetime import os
with StataReader(self.dta1_114) as rdr:
try: return cls(unit=string) except ValueError: raise TypeError("could not construct DatetimeTZDtype")
lasso_lars = LassoLars(alpha=alpha, fit_intercept=False, verbose=verbose, normalize=False, precompute=gram, fit_path=False) lasso_lars.fit(dictionary.T, X.T, Xy=cov) new_code = lasso_lars.coef_
mock_response = mock.Mock() mock_citc.return_value = mock_response course_id = u'course-v1:OrgFoo+CN199+CR-FALL01' tasks.update_ccxcon.delay(course_id) mock_citc.assert_called_once_with(CourseKey.from_string(course_id))
import cycler colors = mpl_stylesheet.pop('axes.color_cycle') mpl_stylesheet['axes.prop_cycle'] = cycler.cycler('color', colors)
tgt = ipaddress.ip_network(tgt)
ensemble = BaggingClassifier(base_estimator=LogisticRegression(), random_state=rng, max_samples=5).fit(X_train, y_train)
PYTHON_LIB_ZIP = "python_lib.zip"
import salt.utils.cloud
return y, None
duplicated_item.location = original_item.location duplicated_item.display_name = original_item.display_name duplicated_item.parent = original_item.parent
'AUTOPLAY_VIDEOS': False,
wa = CountVectorizer(ngram_range=(1, 2), encoding='ascii').build_analyzer() assert_raises(UnicodeDecodeError, wa, text_bytes)
assert len(tm.get_locales()) > 0
self.assert_grade(problem, "Other String", "incorrect") self.assert_grade(problem, "second", "incorrect")
if current_os == 'Linux' or \ current_os == 'Darwin' or \ current_os.startswith('CYGWIN'): tuple_xy = _get_terminal_size_linux() if tuple_xy is None:
self.navigate_to_video() self.video.show_closed_captions()
try: original_pip_version = pip.__version__ pip.__version__ = MagicMock( side_effect=AttributeError( 'Faked missing __version__ attribute' ) ) except AttributeError: pass
for v in (v1, v2): counts_test = v.transform(test_data) if hasattr(counts_test, 'tocsr'): counts_test = counts_test.tocsr()
expected_y = y.mf_update( state_below = v.upward_state(v_state))
from __future__ import absolute_import import logging
return self.q(css=".field-hide-after-due").visible
return self.initial["password"]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
self.assertIsNone(dti2.freq)
answers = ["Second", "Third", "Fourth"]
CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52 CSRF_COOKIE_SECURE = False
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'linode', vm_['profile'], vm_=vm_) is False: return False
from __future__ import absolute_import, with_statement import os import time import signal import datetime import itertools import threading import logging import errno import random
self.assertQuerysetEqual(Article.objects.all(), [ '<Article: Time to reform copyright>', '<Article: Poker has no place on ESPN>', ])
self.assertFalse(self.store.has_changes(self.store.get_item(self.course.location)))
y_score = sparse_random_matrix(n_components=y_true.shape[0], n_features=y_true.shape[1], random_state=random_state)
self.assertEquals(USER_COUNT + 1, len(response.content.splitlines()))
raise TypeError("invalid type {0} for astype".format(dtype))
errs = {} for store in self.modulestores: errs.update(store.get_errored_courses()) return errs
from __future__ import unicode_literals
with salt.utils.fopen(self.path, 'w') as fic: fic.write(content) fic.flush()
second_checkpoint.photo_verification.remove(attempt) self.assertEqual(second_checkpoint.photo_verification.count(), 0)
self.assertEqual(4326, nullcity.point.srid) nullcity.save()
output = StringIO.StringIO() import_log_handler = logging.StreamHandler(output) import_log_handler.setLevel(logging.DEBUG)
self.q(css='input.save').click() self.wait_for_ajax()
try: return datetime.utcfromtimestamp(int(timestamp)).replace(tzinfo=UTC) except (ValueError, TypeError): return None
subsection_css = ( ".course-navigation .chapter-content-container:nth-of-type({0}) " ".menu-item:nth-of-type({1})" ).format(sec_index + 1, subsec_index + 1)
self.create_mode('professional', 'Professional Education Verified Certificate', 10)
import salt.utils import salt.utils.decorators as decorators from salt.utils.decorators import depends from salt.exceptions import CommandExecutionError
from __future__ import absolute_import
valid_states = [ 'Download complete', 'Already exists', ]
orig_name = orig_name[len(tag) + 1:-12]
url_path = "settings/grading" def is_browser_on_page(self): return self.q(css='body.grading').present
xp = DataFrame() self.assertRaises(TypeError, lambda: xp.resample('A').mean())
try: import pythoncom import win32com.client HAS_DEPENDENCIES = True except ImportError: HAS_DEPENDENCIES = False from salt.ext.six.moves import range
try: config = cls.objects.get(course_key=course_key) return config.verified_cohort_name except cls.DoesNotExist: return None
base_json_obj['resultScore'] = round(self.module_score, 2) base_json_obj['comment'] = self.score_comment return Response(json.dumps(base_json_obj), content_type=LTI_2_0_JSON_CONTENT_TYPE)
with override_settings(SESSION_EXPIRE_AT_BROWSER_CLOSE=False): self.session.set_expiry(10) self.assertFalse(self.session.get_expire_at_browser_close())
USE_ETAGS = False
l_ups, learn_rates = self.learning_rate_updates(gradients) safe_update(ups, l_ups)
self.assertEqual(hasattr(self.client, "i_am_customized"), True)
return self.apply('reshape_nd', axes=axes, **kwargs)
__proxyenabled__ = ['esxi']
MIDDLEWARE_CLASSES = [ 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', ]
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
raise NotImplementedError('subclasses of BaseDatabaseWrapper may require an init_connection_state() method')
for student in students[7:]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.generating, mode='honor', grade=default_grade )
from salt.states import svn
cases = [(tdidx1, tdidx2)]
kernel = (large_kernel.sum(axis=2))
self.store.delete_item( orphan.location, self.user.id, skip_auto_publish=True )
'openedx.core.djangoapps.theming',
result = td.std() expected = to_timedelta(Series(td.dropna().values).std()) self.assertEqual(result, expected)
if not add_noise: assert_almost_equal(np.dot(s1_, s1) / n_samples, 1, decimal=3) assert_almost_equal(np.dot(s2_, s2) / n_samples, 1, decimal=3)
response = self.client.get(reverse('admin:admin_views_color2_changelist')) self.assertTemplateUsed(response, 'custom_filter_template.html')
templates_path = ['.templates']
classifier = svm.SVC(kernel='linear', C=0.01) y_pred = classifier.fit(X_train, y_train).predict(X_test)
from __future__ import absolute_import import os import sys import re import shutil import yaml from datetime import datetime import logging
start = TODAY().replace(tzinfo=pytz.UTC) override_field_for_ccx(ccx, course, 'start', start) override_field_for_ccx(ccx, course, 'due', None)
return social_user.user.username
params = self._signed_callback_params("98272", self.COST, self.COST) result = process_postpay_callback(params)
GUID_REGEX = re.compile(r'{?([0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})}?', re.I)
result = f.clean('13:30:05') self.assertEqual(result, time(13, 30, 5))
rendered_html = etree.XML(problem.get_html())
children = [] for child in tree: children.append(_merge_children(child, tags))
df2.columns = ['B', 'B'] with tm.assertRaises(ValueError): df1.isin(df2)
_skip_if_no_xlrd()
for child, parents in enumerate(self.get_parents_map(children_map)): self.assertSetEqual(set(block_structure.get_parents(child)), set(parents))
linter = MakoTemplateLinter() self.assertEqual(linter._is_valid_directory(data['directory']), data['expected'])
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
self.login(self.email, self.pw)
if not has_course_author_access(request.user, course_key): return HttpResponse(status=403)
new_data = self._data if deep: new_data = self._data.copy() return self._constructor(new_data, sparse_index=self.sp_index, fill_value=self.fill_value).__finalize__(self)
self.notes_page.go_to_page(3) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
if [ -z '$debian_chroot' ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
try: return data.get('code', None) except AttributeError: return None
df = DataFrame({"a": [5, 15, 25, -5]}) c = pd.cut(df.a, bins=[-10, 0, 10, 20, 30, 40])
_resolver_configured = False
course = self.get_item_from_modulestore(self.usage_key) self.assertIn(chap_usage_key, course.children)
keyed_result = OrderedDict() for component in result: keyed_result[component['module']] = component del keyed_result[component['module']]['module']
raise AbstractMethodError(self)
return {}
import salt.ext.six as six
for section_format, sections in grading_context['graded_sections'].iteritems(): format_scores = [] for section in sections: section_descriptor = section['section_descriptor'] section_name = section_descriptor.display_name_with_default_escaped
self.__dict__["_wrapped"] = value
depth = len(b_list)
return self.q(css='.wrapper-content ' + self.certficate_css + ' .no-content a.new-button').text[0]
if size is None: size = self._chunksize return self.read(nrows=size)
continue
self.assertRaises(ValueError, sql.to_sql, temp_frame, 'test_index_label', self.conn, if_exists='replace', index_label='C')
df = DataFrame(np.arange(0, 9), columns=['count']) df['group'] = 'b'
for key in self: yield key, self[key]
params = get_required_parameters(request.POST) if not params: return HttpResponseBadRequest() params.update(get_optional_parameters(request.POST))
for the_input in self.inputs.values(): if hasattr(the_input, 'ungraded_response'): the_input.ungraded_response(xqueue_msg, queuekey)
ix = np.flatnonzero(last_card == 2314885530818453536)
'float64': 0x1E3D4C53, 'int32': 0x1E3D4C54, 'uint8': 0x1E3D4C55, 'int16': 0x1E3D4C56
return ''
for err in self.geometries.errors: with self.assertRaises((GEOSException, ValueError)): fromstr(err.wkt)
raise NotImplementedError('subclasses of BasePasswordHasher must provide a verify() method')
self.set_user_partitions(self.vertical_location, []) self.check_access(self.red_cat, self.vertical_location, True)
from __future__ import print_function
article = Article.objects.annotate( headline=Coalesce('summary', 'text', output_field=TextField()), )
__virtualname__ = 'service'
with self.assertRaises(LayerMapError): LayerMapping(Point3D, city_file, point_mapping, transform=False)
new_mean_square_dx = ( self.decay * mean_square_dx + (1 - self.decay) * T.sqr(delta_x_t) )
title = None description = None _items = _sections = _order = None __flatten__ = False __allow_additional_items__ = False
group = group.ix[:, columns]
car = models.ForeignKey(Car, models.CASCADE)
if which_set in ['train', 'test']: data_x, data_y = load_data("{0}{1}_32x32.mat".format(path, which_set))
if (name not in (MULTIOUTPUT_METRICS + THRESHOLDED_MULTILABEL_METRICS + MULTILABELS_METRICS)): assert_raises(ValueError, metric, y1_row, y2_row)
serializer_ctx["request"] = request
for option in self.option_list: if option.dest is None: continue
from __future__ import unicode_literals
from __future__ import absolute_import
import numpy as np
def read(self): return MOCK_STATUS_OUTPUT def close(self): pass
self.assertTrue(apps.ready) self.assertTrue(Apps().ready)
continue
assert_panel_equal(result.to_pandas(), p)
new = values.take(indexer) if need_mask: new = new.values np.putmask(new, mask, fill_value)
servicename = 'bar'
ALL_USERS_VISIBILITY = 'all_users'
import salt.returners import salt.utils.slack
idx = PeriodIndex([2000, 2007, 2007, 2009, 2007], freq='A-JUN') ts = Series(np.random.randn(len(idx)), index=idx)
pass
mixed = Series(['aBAD', NA, 'bBAD', True, datetime.today(), 'fooBAD', None, 1, 2.])
return CourseLocator(org, course, run)
if data is None: return {}
self.assertFalse(is_valid) self.assertEqual(len(errors), 3) self.assertFalse(test_model)
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, NO_MOCK, NO_MOCK_REASON, patch ) from salttesting.helpers import ensure_in_syspath
this_img = scale_to_unit_interval( this_x.reshape(img_shape))
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
providers_config = cloud_providers_config(providers_config_path)
value = dateutil.parser.parse(value)
book = qs.get(other_rating=4) self.assertEqual(book['other_rating'], 4)
if not value.strip(): raise ValidationError("This field may not be blank.")
if not isinstance(cmp_result, numbers.Integral): log.error('The version comparison function did not return an ' 'integer/long.') return False
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS + PayAndVerifyView.VERIFICATION_STEPS, PayAndVerifyView.FACE_PHOTO_STEP )
ret = self.run_state( 'file.prepend', name=name, text='cheese' ) self.assertSaltTrueReturn(ret) self.assertTrue(os.path.isfile(name))
self.assertFalse(self.course.visible_to_staff_only) orig_block_structure = get_course_blocks(self.user, self.course_usage_key) self.assertFalse( VisibilityTransformer.get_visible_to_staff_only(orig_block_structure, self.course_usage_key) )
self.app_configs = self.stored_app_configs.pop() self.clear_cache()
self.assertFalse(zendesk_mock_class.mock_calls) self.assertFalse(datadog_mock.mock_calls)
self.assertFalse(module_has_submodule(egg_module, 'no_such_module')) with self.assertRaises(ImportError): import_module('egg_module.sub1.sub2.no_such_module')
is_verified = cache_values.get(enrollment_cache_key) if is_verified is None: is_verified = CourseEnrollment.is_enrolled_as_verified(user, course_key) cache.set(enrollment_cache_key, is_verified)
date_index = bdate_range('1/1/2000', periods=len(self.bseries)) s5 = SparseSeries(self.bseries, index=date_index) tm.assertIsInstance(s5, SparseSeries)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
is_truncated = n > max_seq_items
if coerce: if not self._can_hold_na: if inplace: return [self] else: return [self.copy()]
VS_batch = VS.make_theano_batch() new_SVS_batch = VS.format_as(VS_batch, VS_sparse) new_VS_batch = VS.undo_format_as(new_SVS_batch, VS_sparse) assert new_VS_batch is VS_batch assert new_SVS_batch is not VS_batch
estimators = [DecisionTreeClassifier(max_depth=2), DecisionTreeRegressor(max_depth=2)] sets = [datasets.load_iris(), datasets.load_boston()]
try: raise TypicalMemoryError("test") except TypicalMemoryError as e: pass
clf.sparsify() assert_true(sp.issparse(clf.coef_)) pred = clf.predict(X) assert_array_equal(pred, Y)
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
sparse_results = sparse_classifier.staged_predict_proba(X_test_sparse) dense_results = dense_classifier.staged_predict_proba(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
os.remove(saved_path)
log = logging.getLogger(__name__)
if level is not None:
microsite_template = microsite.get_template(uri) return ( microsite_template if microsite_template else super(DynamicTemplateLookup, self).get_template(uri) )
self.assertFalse(user_can_skip_entrance_exam(self.anonymous_user, self.course))
self.addCleanup(patcher.stop) self.addCleanup(self._mock_paver_needs.stop)
from __future__ import absolute_import import os import time import signal import multiprocessing
html = module.render(STUDENT_VIEW).content
self.mgr_locs = placement
mock_get.return_value.content = json.dumps(NOTES_API_EMPTY_RESPONSE) self.assertItemsEqual( NOTES_VIEW_EMPTY_RESPONSE, helpers.get_notes(self.request, self.course) )
with ensure_clean_store(self.path) as store: store.append('df', df) store.append('df', df)
module.runtime = inner_system inner_system.xmodule_instance = module
result = self.panel.add(self.panel.filter(['ItemA']))
with self.assertRaises(forms.ValidationError): f.clean('21.12.2010')
self.county_helper()
arr = randn(50) arr[:10] = np.NaN arr[-10:] = np.NaN
is_redeemed = RegistrationCodeRedemption.objects.filter( registration_code=reg_code ).exists() self.assertFalse(is_redeemed)
from salt.states import chef
try: if not _available(name, ret): return ret except CommandExecutionError as exc: ret['result'] = False ret['comment'] = exc.strerror return ret
in_block = False
result = df.unstack(2)
values = self.values if reversed: values, other = other, values
response = external_auth.views.redirect_with_get('root', request.GET)
return self.q(css='#upload_error').text[0]
return self.q(css=self._bounded_selector('.add-admin-role')).text[0]
self.update_masquerade(role='staff') self.verify_show_answer_present(True)
self.assertTrue(Article.objects.filter(headline=old_headline)) self.assertFalse(Article.objects.filter(headline=new_headline))
if not response.streaming and len(response.content) < 200: return response
if source is None: source = name
global _TEST_MODE, _TEST_RESULT _TEST_MODE = v _TEST_RESULT = []
import napalm
C = 1. fit_intercept = True tol = 1.0e-14
from salt.states import win_servermanager
self.assertEquals( value, request.session.get(LANGUAGE_SESSION_KEY, UNSET) )
self._count(X, Y)
self.assertNotEqual(old_tab.is_hidden, new_is_hidden_setting)
raise NotImplementedError('Awaiting Implementation')
if all(term.isscalar for term in terms): return _result_type_many(*(term.value for term in terms)).type, None
from __future__ import absolute_import
'CUSTOM_COURSES_EDX': False,
def test_write_lists_dict(self): _skip_if_no_xlrd()
sls[ks_opts['keyboard']['xlayouts']] = {'keyboard': ['system']}
with self.assertRaises(StudentInputError): problem = self.build_problem(answer='(1 5)')
tok = '"REGEX"'
del subobj gc.collect()
response = self.client.get(reverse('admin:admin_views_section_change', args=('abc',))) self.assertEqual(response.status_code, 404)
self.assertTrue(is_dtype_equal(np.dtype("M8[ns]"), "datetime64[ns]"))
os._exit(999)
params = { 'photo_id_image': self.IMAGE_DATA } response = self._submit_photos(expected_status_code=400, **params) self.assertEqual(response.content, "Missing required parameter face_image")
if takeable is True: return _maybe_box_datetimelike(self._values[label]) return self.index.get_value(self._values, label)
self.assertEqual( self.run_function('xattr.read', [TEST_FILE, 'patrick']), 'ERROR: Attribute not found: patrick')
disable_animations(self) self.find_css('.action-primary').first.click() self.wait_for_ajax()
a = Timestamp('3/12/2012') b = Timestamp('3/12/2012', tz='utc')
if self.status in ORDER_STATUS_MAP.values(): return
pass
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
try: indexer = self.index.indexer_at_time(time, asof=asof) return self.take(indexer, convert=False) except AttributeError: raise TypeError('Index must be DatetimeIndex')
import copy import logging import os
self._iter_mode = resolve_iterator_class('sequential') self._iter_topo = False self._iter_targets = False self._iter_data_specs = (self.X_space, 'features')
_dec._decorated_function = getattr(func, '_decorated_function', func)
if not hasattr(draft_node.module, 'xml_attributes'): draft_node.module.xml_attributes = {}
super(SymbolicResponse, self).setup_response()
if isinstance(obj, CourseDescriptor): return _has_access_course(user, action, obj)
test_modes = ['seqwr', 'seqrewr', 'seqrd', 'rndrd', 'rndwr', 'rndrw']
expected_X_norm = (np.sqrt(X.shape[0]) * np.mean((X - expected_X_mean) ** 2, axis=0) ** .5)
break
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] h1_state = layer_to_state[h1] h2_state = layer_to_state[h2]
self.children.extend(args) return self
output.append('\'{0}\': {1!s}'.format(key, value))
super(TestTrackerInstantiation, self).setUp() self.get_backend = tracker._instantiate_backend_from_name
compressed_pickled_data = zlib.compress(pickled_data, 1) tagger.measure('compressed_size', len(compressed_pickled_data))
request = self.rf.get('/') view = InstanceView.as_view() self.assertNotEqual(view(request), view(request))
if self._is_grade_request():
pass
if code.ndim == 1: code = code[np.newaxis, :] return code
credit_api.update_credit_request_status(uuid, self.PROVIDER_ID, status)
return db_field.formfield(**kwargs)
diag_mask = (connectivity.row != connectivity.col) connectivity.row = connectivity.row[diag_mask] connectivity.col = connectivity.col[diag_mask] connectivity.data = connectivity.data[diag_mask] del diag_mask
callable = callable
this_algorithm = deepcopy(algorithm) this_algorithm._set_monitoring_dataset(datasets)
result = store.select('df', 'index>datetime.datetime(2013,1,5)') assert_frame_equal(result, expected)
return self.opts['timeout']
from salt.modules.inspectlib.dbhandle import DBHandle from salt.modules.inspectlib.exceptions import (InspectorSnapshotException) import salt.utils from salt.utils import fsutils from salt.utils import reinit_crypto
oob_error = 1 - clf.oob_score_ error_rate[label].append((i, oob_error))
from __future__ import unicode_literals
if self._holder is None: return
import integration import salt.utils
self._process_map = {}
self._necessary_X_, self._necessary_y_ = X, y
self.assertTrue(timezone.is_aware(dt)) self.assertEqual(now.tzname(), dt.tzname())
self.assertNotIn(malicious_code, resp.content)
return (network, name)
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 3)
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
self.clear_user_answers(user) SurveyAnswer.save_answers(self, user, answers, course_key)
Site.objects.clear_cache()
self.assertEqual(content.content_type, 'application/pdf')
pkg_params = __salt__['pkg_resource.parse_targets'](name, pkgs, **kwargs)[0]
if env_key in matches or fnmatch.filter(self.avail[env_key], inc_sls): resolved_envs = [env_key] else: resolved_envs = []
super(MongoModuleStore, self)._drop_database(database, collections, connections)
COUNTRIES_OVERRIDE = { "TW": "Taiwan", 'XK': _('Kosovo'), }
theano.config.warn.sum_div_dimshuffle_bug = False
mask = self.series > self.series.median() assert_series_equal(self.series.ix[mask], self.series[mask])
self.set_team_configuration(None) self.verify_teams_present(False)
assert element.value.strip() == expected
with self.assertRaisesMessage(ValueError, "'inline_formsets.Child' has no field named 'test'."): inlineformset_factory(Parent, Child, fk_name='test')
if sp.issparse(X): return inertia, _k_means._mini_batch_update_csr( X, x_squared_norms, centers, counts, nearest_center, old_center_buffer, compute_squared_diff)
fd_, adminfile = salt.utils.mkstemp(prefix="salt-", close_fd=False)
win_firewall.__salt__ = {}
if self.formatter is not None: return [self.formatter(x) for x in self.values]
exclude.extend(self.form._meta.exclude)
return {}
log = logging.getLogger(__name__)
self.assert_correct_json_response(json_response)
lhs = pd.eval(value, local_dict=self.env, engine=self.engine, parser=self.parser) v = lhs[result]
self.session['y'] = 1 self.session.save()
inheriting_settings = inherited_settings_map[block_key].copy() block_fields = block_data.fields for field_name in inheritance.InheritanceMixin.fields: if field_name in block_fields: inheriting_settings[field_name] = block_fields[field_name]
df = tm.makeDataFrame()
pldict = PermLookupDict(MockUser(), 'mockapp') with self.assertRaises(TypeError): self.EQLimiterObject() in pldict
exclude_trees = []
course = CourseFactory.create() create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
log.shutdown_multiprocessing_logging_listener()
('started', 'started'),
self.update_structure(parent_usage_key.course_key, new_structure)
output = inp output['pepa_templates'] = [] immutable = {}
return self.label_binarizer_.y_type_.startswith('multilabel')
self.check_result(r, self.lst)
def f(): df.loc['bar'] *= 2
JINJA = jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'virt') ) )
element = self.find_css('#grading_type')[0] return self.get_selected_option_text(element)
self._enabled = True
try: import zmq
setattr(hasher, attr, new_value) encoded = make_password('letmein', hasher='argon2') attr_value = hasher.safe_summary(encoded)[summary_key] self.assertEqual(attr_value, new_value)
pred = lambda i: not _int64_overflow_possible(shape[:i]) nlev = next(filter(pred, range(len(shape), 0, -1)))
from . import signals
source_keys = [source_container.children[0]] new_blocks = self.store.copy_from_template(source_keys, dest_key=course.location, user_id=self.user_id) self.assertEqual(len(new_blocks), 1)
self.assertEqual( Book.objects.annotate(num_authors=Count('authors')).count(), 6 )
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
if self.beta0 is not None: self.beta0 = np.atleast_2d(self.beta0) if self.beta0.shape[1] != 1: self.beta0 = self.beta0.T
myqueue: boto_sqs.present: - region: us-east-1 - profile: mysqsprofile
def get_extra_restriction(self, where_class, alias, related_alias): return None
UID_FIELD = "email"
donation = Donation.add_to_order(self.cart, self.COST) self._assert_donation( donation, donation_type="general", unit_cost=self.COST, line_desc="Donation for edX" )
try:
course_id = CourseKeyField(max_length=255, db_index=True, unique=True)
with self.assertRaises(forms.ValidationError): f.clean('13:30:05 21.12.2010')
random_state = np.random.RandomState(0) X = np.c_[X, random_state.randn(n_samples, 200 * n_features)]
self.assertEqual(result_dict['value'], "pong")
hashed_url = self.url(unquote(target_name), force=True)
qs = Item.objects.datetimes('created', 'month') pickle.loads(pickle.dumps(qs))
wf = wf_cls(window_shape=(3, 3), randomize=[ddata], flip=flip)
self.sender_receivers_cache[sender] = receivers
smaller_major = self.panel.major_axis[::5] smaller = self.panel.reindex(major=smaller_major)
raise self.error(msg)
df = orig.copy() df.drop_duplicates('A', inplace=True) expected = orig[:2] result = df tm.assert_frame_equal(result, expected)
self.assertEqual(unicode(course.location.course_key), unicode(course.children[0].course_key))
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file) self.addCleanup(remove_file, self.TEST_INDEX_FILENAME)
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.25, random_state=None)
resource['id'] = self.resource_id_second self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
for field in opts.fields: if field.remote_field and field.remote_field.model != self.parent_model: opts = field.remote_field.model._meta break
related_url = reverse( 'admin:%s_%s_changelist' % ( rel_to._meta.app_label, rel_to._meta.model_name, ), current_app=self.admin_site.name, )
ns_td = Timedelta(1, 'ns') self.assertNotEqual(hash(ns_td), hash(ns_td.to_pytimedelta()))
'notification_prefs',
if is_categorical_dtype(items): return items.argsort(ascending=ascending)
upload_csv_to_report_store(rows, 'proctored_exam_results_report', course_id, start_date)
tm.assert_series_equal(result.to_dense(), expected)
self.distribution.running_salt_sdist = True self.distribution.salt_version_hardcoded_path = os.path.join( base_dir, 'salt', '_version.py' ) self.run_command('write_salt_version')
input_dict = {'1_2_1': 'Michigan'} correct_map = problem.grade_answers(input_dict) self.assertEquals(correct_map.get_hint('1_2_1'), "")
if return_type not in BoxPlot._valid_return_types: raise ValueError("return_type must be {None, 'axes', 'dict', 'both'}")
from __future__ import unicode_literals
MIMEText.__init__(self, _text, _subtype)
optional_fields = params.get('fields', '').split(',') return DEFAULT_FIELDS + [field for field in optional_fields if field in OPTIONAL_FIELDS]
from __future__ import absolute_import import os import sys import types import logging import traceback import multiprocessing import subprocess import json
n_samples = 80 n_features = 5 repeat = 10
with self.assertNumQueries(1): all_deadlines = VerificationDeadline.deadlines_for_courses(course_keys) self.assertEqual(all_deadlines, {})
df = DataFrame(np.random.randn(50, 100)) self._check_roundtrip(df, tm.assert_frame_equal)
from __future__ import unicode_literals
test1 = value 1
from __future__ import absolute_import from __future__ import print_function
else: ret = _load_result(deleted, ret)
if postgis: self.assertTrue(srs.wkt.startswith(sd['srtext'])) six.assertRegex(self, srs.proj4text, sd['proj4_re'])
can_introspect_max_length = True
from salt.exceptions import CommandExecutionError from salt.exceptions import SaltInvocationError import logging
from salttesting.unit import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
for key, value in pkg_nfo.items(): if key == 'source_rpm': t_nfo['source'] = value else: t_nfo[key] = value
lm1 = LayerMapping(ICity1, city_shp, icity_mapping) lm1.save()
n_samples = 500
response = self.session.get(url, headers=self.headers)
self.course_outline_page.visit() self.course_outline_page.wait_for_page()
h = hashlib.md5() h.update(str(seed)) return h.hexdigest()
supports_column_check_constraints = True
self.ordered = values.ordered self.typ = self.get_atom_data(block, kind=codes.dtype.name) self.set_data(_block_shape(codes))
try: complex(settings[setting]) value = settings[setting] except ValueError: value = "'{0}'".format(settings[setting])
if support_sample_weight: if sample_weight is None: curr_sample_weight = np.ones((n_samples,)) else: curr_sample_weight = sample_weight.copy()
if hint_list: hintgroup_element = etree.SubElement(response_element, "hintgroup")
resp = self.client.get(self.list_url_master_course, {}, HTTP_AUTHORIZATION=self.auth)
d_clf = ElasticNet(alpha=alpha, l1_ratio=0.8, fit_intercept=fit_intercept, max_iter=max_iter, tol=1e-7, positive=positive, warm_start=True) d_clf.fit(X_train.toarray(), y_train)
method = interpolate.BPoly.from_derivatives m = method(xi, yi.reshape(-1, 1), orders=order, extrapolate=extrapolate)
def allow_migrate(self, db, app_label, **hints): return True
from __future__ import absolute_import import os import time import logging
fake_data_api.add_course(self.COURSE_ID, course_modes=['professional']) api.add_enrollment(self.USERNAME, self.COURSE_ID, mode='verified')
response_element = etree.Element("stringresponse")
if self._nw_lags is None: F = self._r2_raw / (self._r2_raw - self._r2_adj_raw)
node = mock.Mock(due=None, extended_due=1) self.assertEqual(self.call_fut(node), None)
idx = RangeIndex(5)
'ENABLE_FOOTER_MOBILE_APP_LINKS': False,
resp = self.client.put( '/shoppingcart/payment_fake', data="failure", content_type='text/plain' ) self.assertEqual(resp.status_code, 200)
from __future__ import absolute_import import logging
my_X = X.copy() km = KMeans(copy_x=False, n_clusters=n_clusters, random_state=42) km.fit(my_X) _check_fitted_model(km)
ext_user = User.objects.get(email=self.ext_user.email) self.assertFalse(auth.user_has_role(ext_user, CourseInstructorRole(self.course.id)))
dtype = self._selected_obj.dtype result = self._selected_obj.values.copy()
PR_REMOTE_NAME = os.environ.get("PR_REMOTE_NAME", "upstream")
left = concat([ts1, ts2], join='outer', axis=1) right = concat([ts2, ts1], join='outer', axis=1)
warnings.filterwarnings( 'ignore', '^Module backports was already imported from (.*), but (.*) is being added to sys.path$', UserWarning )
from scipy.stats import t return 2 * t.sf(np.fabs(self._t_stat_raw), self._df_resid_raw)
url(r'^api/enrollment/v1/', include('enrollment.urls')),
from __future__ import absolute_import import grp import pwd
sorted_dists_exact = np.sort(distances_exact[0]) sorted_dists_approx = np.sort(distances_approx[0])
expected_url = reverse( "about_course", args=[self.course.id.to_deprecated_string()] )
first_octet, second_octet, third_octet, fourth_octet = octets
return globals()[function](minion_id, pillar, **kwargs)
for block in [component, child, sibling]: check_node(block.location, None, after_create, self.user_id, None, after_create, self.user_id)
return u'%b %d, %Y'
raise SaltInvocationError(kwarg + ' cannot be None')
return self._cython_table.get(arg)
self._init_state()
prompt = len(channels.values()) > 1
self.seed = state.get('seed', seed) assert self.seed is not None, "Seed must be provided for LoncapaProblem."
session = self.client.session session['attempting_upgrade'] = True session.save()
if 'port' in _options: _options['port'] = int(_options['port']) return _options
where = self.parse_back_compat(where, op, value)
X = X_orig.copy() result1 = (X[block1] + Z).reindex(columns=subs)
url = TEST_SERVER_HOST if path: url += path return url
if not self.hyperparameter_length_scale.fixed: length_scale_gradient = \ dists * K / (self.length_scale ** 2 * base) length_scale_gradient = length_scale_gradient[:, :, np.newaxis]
grains = {} grains['cpu_flags'] = []
kwargs_param = param continue
return (np.where([True, True, False, False, True])[0], np.where([False, False, True, True])[0])
total_amount = models.FloatField()
vmconfig['changed']['remove_{0}'.format(instance)].append( current_cfg[vmconfig_type['instance'][instance]] )
self.assert_can_access(self.beta_user, self.alpha_module.discussion_id, thread_id, True)
return False
raise NotImplementedError(str(self.__class__) + " does not implement " "_get_required_mlp_output_space")
return self._values.ravel(order=order)
self.assertContains( response, '<tr><td colspan="4"><ul class="errorlist nonfield">' '<li>The two titles must be the same</li></ul></td></tr>' )
module = CapaFactory.create(max_attempts="1", attempts="2") self.assertTrue(module.closed())
call_command('force_publish', unicode(self.course.id), '--commit')
import logging import json
config.add_extension( '_isotonic', sources=['_isotonic.c'], include_dirs=[numpy.get_include()], libraries=libraries, )
with self.assertRaises(ValueError): df2 = df.copy() df2['foo'] = 1 to_datetime(df2)
self.assertContains(self.response, company_markup)
self._values.put(*args, **kwargs)
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
return wrap_message(result)
return self._possibly_eval(res, eval_in_python + maybe_eval_in_python)
graders = { 'points': self.grade_via_points, 'false': self.grade_without_partial_credit }
self.assert_enrollment_status()
from __future__ import absolute_import import textwrap
if isinstance(obj, DataFrame): axis_number = 1 - axis_number takers = op(values, filt) return obj.ix._getitem_axis(takers, axis=axis_number)
return self._decision_function(X)
import logging
self.assertEqual(result, allow_access)
self.current_view = self.MAPPING[tab_name](self.browser) self.current_view.visit()
#raise Exception("No backend was set, but @figure was used!") import matplotlib matplotlib.use('agg')
auth.add_users(request.user, role, user) role_added = True
estimator.partial_fit(X, y, np.array((0, 1))) return estimator
def _reject(self, request, reason): return None
from __future__ import absolute_import import logging import os import re
return True
ensemble = BaggingClassifier(base_estimator=DecisionTreeClassifier(), random_state=rng).fit(X_train, y_train)
elif self.is_datetime_lhs and self.is_datetime_rhs:
enrollments = self._create_enrollments(solo_course_id, shared_course_id) meter = utils.ProgramProgressMeter(self.user, enrollments)
self.video.wait_for( lambda: (text in self.video.closed_captions_text), u'Closed captions contain "{}" text'.format(text), timeout=5 )
try: course_key = CourseKey.from_string(args[0]) except InvalidKeyError: try: course_key = SlashSeparatedCourseKey.from_deprecated_string(args[0]) except InvalidKeyError: raise CommandError(unicode(GitExportError.BAD_COURSE))
total_amount = Invoice.get_invoice_total_amount_for_course(self.course_key) self.assertEqual(total_amount, 123.45)
self.support = UserFactory( username=self.SUPPORT_USERNAME, email=self.SUPPORT_EMAIL, password=self.SUPPORT_PASSWORD, ) SupportStaffRole().add_users(self.support)
for frac in np.linspace(0, 0.5, 6): est = ForestEstimator(min_weight_fraction_leaf=frac, n_estimators=1, random_state=0) if "RandomForest" in name: est.bootstrap = False
clf = TreeClassifier(class_weight=[{-1: 0.5, 1: 1.}], random_state=0) assert_raises(ValueError, clf.fit, X, _y)
import logging import os
from salt.modules import pw_group
ret['message'] = 'Secret key for {0} deleted\n'.format(fingerprint)
return datetime.strptime(datestr, "%d%b%y:%H:%M:%S")
- pattern: | CentOS \(2.6.32[^\n]+\n\s+root[^\n]+\n\)+
return cls(task_id, **options)
return
inject_globals['__env__'] = str(low['__env__'])
self.assertRaises(ValueError, df.to_sql, 'test_complex', self.conn)
VerificationStatus.add_verification_status( checkpoint=self.first_checkpoint, user=self.user, status='submitted', ) attempt = SoftwareSecurePhotoVerification.objects.filter(user=self.user)
self.assertEqual(self.course_info_page.num_updates, 1)
m1 = RegressionModelSplit(name='1') m1.save()
self.courseware_search_page.visit() staff_page = StaffPage(self.browser, self.course_id) self.assertEqual(staff_page.staff_view_mode, 'Staff') return staff_page
req_to_update = next(( req for req in reqs if req.namespace == req_namespace and req.name == req_name ), None)
self.assertEqual(event.dt, dt.replace(microsecond=0))
self.assertEquals(render.get_score_bucket(11, 10), 'incorrect') self.assertEquals(render.get_score_bucket(-1, 10), 'incorrect')
self.assertIn( ' Failed to error service', self.run_function('service.launchctl', ['error']))
tm._skip_if_no_scipy() import scipy.sparse
grains, pillars = self._get_cached_minion_data(*minion_ids)
rng = np.random.RandomState(0) X = np.c_[X, rng.randn(n_samples, 200 * n_features)]
kwargs = super(ModelFormMixin, self).get_form_kwargs() if hasattr(self, 'object'): kwargs.update({'instance': self.object}) return kwargs
x=dataset_resolver() logger.info(x.resolve_dataset("toaster-oven")) logger.info(x.resolve_dataset("fake-dataset"))
'backup_mode': str,
result = f.clean('1:30:05 PM 21/12/2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
import salt.ext.six as six
raise KeyError
self.lc_block.source_library_id = "" result = self.lc_block.validate()
return { 'add': self.has_add_permission(request), 'change': self.has_change_permission(request), 'delete': self.has_delete_permission(request), }
df = DataFrame({'key': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'value': lrange(9)})
with cls.store.bulk_operations(course.id, emit_signals=False):
key_fields = key_fields or cls.KEY_FIELDS return 'configuration/{}/key_values/{}'.format(cls.__name__, ','.join(key_fields))
X_plot = np.linspace(-6, 6, 1000)[:, None] X_src = np.zeros((1, 1))
est = RandomForestClassifier() transformer = SelectFromModel(estimator=est) transformer.fit(data, y) assert_true(transformer.estimator is est)
import integration
cmd = '{0}.{1}'.format(self.cmd_prefix, cmd)
s = Series(range(5), [-2, -1, 1, 2, 3])
assert_array_equal(X_transformed_sparse.toarray(), X_transformed_dense)
user = UserFactory.create(username="ma1", email="ma1@ma1.info", password="edx") self.assertFalse(EdxNotesTab.is_enabled(self.course, user=user))
__func_alias__ = { 'true_': 'true', 'false_': 'false' }
test_container_html(draft_container)
for app_config in self.app_configs.values(): all_models = self.all_models[app_config.label] app_config.import_models(all_models)
Ensure mysecgroup exists: boto_secgroup.present: - name: mysecgroup - description: My security group - profile: myprofile
from __future__ import unicode_literals
import salt.ext.six as six from salt.ext.six.moves import range
xblock.runtime.wrappers.append(partial( wrap_xblock, 'StudioRuntime', usage_id_serializer=unicode, request_token=request_token(request), ))
merge_cells = False
joined += ','
s = Series(['2014-01-01', '2014-02-02'], dtype='datetime64[ns]') expected = Timestamp('2014-02-02')
return TAG_PATTERN.sub(_sanitize_tag, source)
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'custom_tag_template', 'custom_tags' )
self.assertEqual(len(site_configuration_history), 1)
import salt.ext.six as six try: import hglib HAS_HG = True except ImportError: HAS_HG = False
try: import six except ImportError: pass
from __future__ import unicode_literals
import integration
problem = "<problem>" for problem_type in args: problem += "<{problem_type}></{problem_type}>".format(problem_type=problem_type) problem += "</problem>" return problem
_validate_opts(opts) return opts
When(integer=1, then=Value(timedelta(1), output_field=models.DurationField())), When(integer=2, then=Value(timedelta(2), output_field=models.DurationField())),
self._test_visible_to_students(False, 'private_unreleased', self.future)
if exc.errno != errno.EINTR: raise break
for k in self.file_mapping: if mod_name not in k: yield k
nsamples[0].set_value(x) for ii, psample in enumerate(psamples): if ii > 0: nsamples[ii].set_value(psample.get_value())
self.store.mappings = {} course_key = self.course_locations[self.MONGO_COURSEID].course_key with check_exact_number_of_calls(self.store.default_modulestore, 'has_course', 1):
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath
self.assertTrue(item.is_staff_only) if hasattr(item, 'children'): for child in item.children(): self._verify_descendants_are_staff_only(child)
self.certificates_section.wait_for_certificate_exceptions_section()
static_tab_loc = course_key.make_usage_key('static_tab', tab.url_slug) tab.locator = static_tab_loc
if isinstance(usage_key, BlockUsageLocator):
p2 = Poll(question="How?") self.assertEqual(repr(p2.choice_set.all()), '<QuerySet []>')
from __future__ import unicode_literals
self.client.logout() response = self.client.get(url)
return pprint.pformat((args, kwargs)).decode()
return priv
if self._tz is dates.UTC: self._tz._utcoffset = self._tz.utcoffset(None)
e = b + (Timestamp(end).value - b) // stride * stride + stride // 2 tz = start.tz
response = self.client.get(self.url) self.assertTrue(self.email_modal_link in response.content)
result = s.xs(0, level=0) expected = Series([1], index=[0]) assert_series_equal(result, expected)
self.create_random_units(False, conditional_loc)
for course_key, record in self._active_bulk_ops.records.iteritems(): if record.active: yield (course_key, record)
time.sleep(1)
raise NotImplementedError()
from __future__ import absolute_import from distutils.version import LooseVersion import glob import grp import os import pwd import sys import shutil import stat import tempfile import textwrap import filecmp import textwrap
return [part.strip() for part in self.q(css='.path').text[0].split('>')]
self._expanded_class_weight = compute_class_weight(self.class_weight, self.classes_, y) sample_weight = self._validate_sample_weight(sample_weight, n_samples)
result = idx / 1 expected = idx if PY3: expected = expected.astype('float64') tm.assert_index_equal(result, expected)
self.connection.settings_dict['NAME'] = primary_settings_dict['NAME']
if 'expires' in cookie: cookie['expires'] = salt.ext.six.moves.http_cookiejar.http2time(cookie['expires'])
return self.q(css=self._bounded_selector('.add-admin-role')).present
return next((template for template in templates if template.get('display_name') == display_name), None)
cls.team_commentable_id = "team_discussion_id" cls.team = CourseTeamFactory.create( name=u'The Only Team', course_id=cls.course.id, topic_id='topic_id', discussion_topic_id=cls.team_commentable_id )
import logging
return super(EligibleCertificateManager, self).get_queryset().exclude( status__in=(CertificateStatuses.audit_passing, CertificateStatuses.audit_notpassing) )
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
C = np.array([[0., -0.7], [3.5, .7]]) stretched_gaussian = np.dot(np.random.randn(n_samples, 2), C)
raise NotImplementedError
self.course_nav.go_to_vertical('Test Vertical-0')
if not isinstance(version, string_types) and version is not None: version = str(version)
'ENABLE_VIDEO_BUMPER': False,
if not self.conn.queue_exists(qname): return {} for queue in self.conn.list(): if queue.name == qname: return queue
if instance_guid and not consumer.instance_guid: consumer.instance_guid = instance_guid consumer.save() return consumer
def add_node_as_child(self, block, node, id_generator): child_block = self.process_xml(etree.tostring(node)) block.children.append(child_block.scope_ids.usage_id)
query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(None, query) self.assertEqual(result, attempt)
old_duration = self.parallel._smoothed_batch_duration if old_duration == 0: new_duration = this_batch_duration else: new_duration = 0.8 * old_duration + 0.2 * this_batch_duration self.parallel._smoothed_batch_duration = new_duration
r = HttpResponse() r.content = ['idan', 'alex', 'jacob'] self.assertEqual(r.content, b'idanalexjacob')
i = labels.searchsorted(start, side='left') j = labels.searchsorted(stop, side='right') return slice(i, j, step)
return self._distance_attribute('length', None, **kwargs)
return comdat['stderr']
if not encoding or 'ascii' in encoding.lower(): try: encoding = locale.getpreferredencoding() except Exception: pass
url = BASE_URL + "/howitworks" def is_browser_on_page(self): return self.q(css='body.view-howitworks').present
value_set = set(self.values) result.extend([x for x in other._values if x not in value_set])
saltstack_version.sha = out.strip() saltstack_version.noc = -1
self.loop_interval = six.MAXSIZE clean_proc_dir(opts)
return [i.cname for i in self.values_axes]
response = self.client.get('/raises400/') self.assertContains(response, '<div class="context" id="', status_code=400)
format = ugettext("LONG_DATE_FORMAT") if format == "LONG_DATE_FORMAT": format = DEFAULT_LONG_DATE_FORMAT
if self.multi_class == 'multinomial': scores = multi_scores coefs_paths = multi_coefs_paths
from __future__ import unicode_literals
clf = svm.OneClassSVM() clf.fit(X) pred = clf.predict(T)
self.set_config(True) super(CourseOverviewImageSetTestCase, self).setUp()
self.logout()
self.mixed_frame._data.ndim
locales = locale or all_locales locales = set(locales) - set(exclude)
available_version = salt.utils.alias_function(latest_version, 'available_version')
I_theory = (np.log(sigma_1) + np.log(sigma_2) - 0.5 * np.log(np.linalg.det(cov)))
from functools import partial from os import path
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
assignment = GradedAssignment( user=self.user, course_key=self.course.id, usage_key=desc.location, outcome_service=outcome_service, lis_result_sourcedid=result_id, version_number=0 ) assignment.save() return assignment
ret = self.run_function( 'mysql.db_remove', name=dbname, connection_user=self.user, connection_pass=self.password ) self.assertEqual(True, ret)
if self.warm_start and len(self.estimators_) > 0: random_state.randint(MAX_INT, size=len(self.estimators_))
if name in CROSS_DECOMPOSITION: for iter_ in estimator.n_iter_: assert_greater_equal(iter_, 1) else: assert_greater_equal(estimator.n_iter_, 1)
self.assertTrue(self._has_changes(locations['grandparent'])) self.assertTrue(self._has_changes(locations['parent']))
self.addCleanup(self.cleanup_scheme_extensions)
out = six.StringIO() call_command('collectstatic', interactive=False, verbosity=3, stdout=out, **kwargs) return force_text(out.getvalue())
return get_test_descriptor_system(*args, **kwargs)
self.send_delete(self.client) self.send_get(self.client, expected_status=404)
self.session['_auth_user_id'] = 42 self.session.save()
for block_key in block_structure.topological_traversal(): block_structure.set_transformer_block_field( block_key, cls, data_key, cls._create_block_value(block_key, data_key) )
clf = ForestClassifier(class_weight='the larch', random_state=0) assert_raises(ValueError, clf.fit, X, y) assert_raises(ValueError, clf.fit, X, _y)
event = self.create_segmentio_event() for field in fields: if field in event: del event[field] return event
from contextlib import contextmanager import sys import time import logging
with self.assertRaises(DeserializationError): management.call_command( 'loaddata', 'sequence_extra', verbosity=0, )
from salttesting import skipIf, TestCase from salttesting.mock import ( mock_open, NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
margin_keys = []
if max_cols == 0 and len(self.frame.columns) > w: max_cols = w if max_rows == 0 and len(self.frame) > h: max_rows = h
self.assertEqual( CohortPartitionScheme.get_group_for_user( self.course_key, self.student, partition or self.user_partition, use_cached=False ), group )
ticks = ax.get_xticks() labels = ax.get_xticklabels() for t, l in zip(ticks, labels): m, s = divmod(int(t), 60)
self.key = key return key
output = self.engine.render_to_string('filter-syntax19', {"var": "hello world"}) self.assertEqual(output, "hello ...")
raise RuntimeError( 'Please set {0}._default_logging_logfile_'.format( self.__class__.__name__ ) )
if not mime_type or mime_type not in mimetypes_list:
return " ".join([self.MODAL_SELECTOR, selector])
with tm.assert_produces_warning(FutureWarning): result = df.drop_duplicates('AAA', take_last=True) expected = df.ix[[6, 7]] tm.assert_frame_equal(result, expected)
mask = np.array( [x[1] in exp_level for x in self.index], dtype=bool) exp_values = self.index.values[mask] tm.assert_numpy_array_equal(join_index.values, exp_values)
from __future__ import absolute_import
data = np.array([False, False, True, True, False, False]) arr = SparseArray(data, fill_value=False, dtype=bool)
try: import zmq HAS_ZMQ = True except ImportError: HAS_ZMQ = False
return self.q(css='.dropdown-menu li a').text
X = np.dot(h, W) + noise
yield
if 'numeric_only' in signature(f).args: self.assertRaisesRegexp(NotImplementedError, name, f, numeric_only=True)
self.assertContains(response, 'Third query list: 2') self.assertContains(response, 'Fourth query list: 3')
self.assertTrue(check_password('letmein', encoded, setter, 'bcrypt')) self.assertFalse(state['upgraded'])
draft_course_structure = self._lookup_course(draft_course_key).structure new_structure = self.version_structure(draft_course_key, draft_course_structure, user_id)
__func_alias__ = { 'set_': 'set' }
OrderedObjectAdmin.ordering = ['bool'] check_results_order()
context['client'] = dict(segment_context) context['agent'] = segment_context.get('userAgent', '')
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
assert_raises(ValueError, lshf.kneighbors, X[0])
clf = GradientBoostingClassifier(n_estimators=10, random_state=1)
func_code, source_file, first_line = get_func_code(self.func) func_dir = self._get_func_dir() func_code_file = os.path.join(func_dir, 'func_code.py')
return self.is_bound and not self.errors
joined = df.join(df2, on=['key']) expected = df.join(df2, on='key')
if salt.utils.test_mode(test=test, **kwargs): opts['test'] = True else: opts['test'] = __opts__.get('test', None)
if pkginfo[version_num].get('use_scheduler', False):
module = None
from __future__ import absolute_import import datetime import os import re import fnmatch import collections import copy import time
self.purchased_callback() self.status = 'purchased' self.fulfilled_time = datetime.now(pytz.utc) self.save()
self.assertEqual(result['success'], 'correct')
from __future__ import absolute_import
set_credit_requirements(course.id, requirements)
for fld_name in fld_names: self.assertEqual(source.field_values[fld_name], layer.get_fields(fld_name))
self.course.html_textbooks = [] self.assertNotIn( {'type': 'html_textbooks'}, list(xmodule_tabs.CourseTabList.iterate_displayable(self.course, inline_collections=False)), )
CountryAccessRule.objects.all().delete()
locale_paths_mo = os.path.join(LOCALE_PATH, 'nl', 'LC_MESSAGES', 'django.mo') self.assertFileFound(locale_paths_mo)
result = __salt__['github.add_user']( name, profile=profile, **kwargs )
pkg_params = {name: version_num}
class BoundaryForm(ModelForm): class Meta: model = BoundaryModel fields = '__all__'
if result['retcode'] != 0 and result['stderr']: raise CommandExecutionError(result['stderr'])
cart = Order.get_cart_for_user(request.user) try: cart_items = cart.find_item_by_course_id(course_registration.course_id)
with self.assertRaises(NotImplementedError): self.client.ajax_post( self.url, data={'invalid_request': None}, )
solution_element = rendered_html.find("div") self.assertEqual(solution_element.text, 'Input Template Render')
i18n_service = self.runtime.service(descriptor, 'i18n') self.assertIsNotNone(i18n_service) self.assertIsInstance(i18n_service, ModuleI18nService) return i18n_service
if not salt_api_acl_tool(username, cherrypy.request): raise cherrypy.HTTPError(401)
if save: self.instance.save()
self.check_modal_shows_correct_contents(['Course Display Name']) self.advanced_settings.refresh_and_wait_for_load()
def test_default_expiry(self): self.assertEqual(self.session.get_expiry_age(), settings.SESSION_COOKIE_AGE)
__salt__['saltutil.refresh_modules']()
qs = Experiment.objects.filter(end__lt=F('start') + datetime.timedelta(hours=1)) qs2 = qs.all() list(qs) list(qs2)
assert all(called)
text = text.rstrip('\r\n') self.tokens = [(token_type, text) + token[2:]] self.check_logical()
unpickled = self.round_trip_pickle(self.tzframe) assert_frame_equal(self.tzframe, unpickled)
x_scaled = assert_no_warnings(scale, x) assert_array_almost_equal(scale(x), np.zeros(8))
escaped_string_for_js = js_escaped_string(None) self.assertEquals(u"", escaped_string_for_js)
('LEFTPADDING', (0, 1), (0, 1), 5 * mm),
'microsite_configuration',
newrelic.agent.add_custom_parameter('course_id', unicode(self.course_key)) newrelic.agent.add_custom_parameter('org', unicode(self.course_key.org))
return HttpResponseBadRequest(u'Could not parse request course key.')
mode_display_name = models.CharField(max_length=255)
cookies.append(cookie)
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, course_key): assertProblemNameEquals(problem_original_name) assertNumProblems(problem_new_name, 0)
url = reverse('create_mode', args=[unicode(self.course.id)]) self.client.get(url, parameters)
class Proxy1(models.Model): class Meta: db_table = "unmanaged_models_proxy1"
exc_info_on_loglevel=logging.DEBUG
self.store.convert_to_draft(self.problem.location, self.user.id)
if line_stripped.startswith('#'): output.extend([line]) continue
exp_df = pd.DataFrame({"cats": cats2, "values": values2}, index=idx2)
return True
return stdout
if original.is_boolean(): result = original.drop_duplicates() expected = Index([False, True], name='a') tm.assert_index_equal(result, expected) continue
with self.assertRaises(AssertionError): self.kvs.get(self.other_key_factory(self.existing_field_name))
b = BrokenUnicodeMethod.objects.create(name="Jerry") self.assertEqual(repr(b), "<BrokenUnicodeMethod: [Bad Unicode data]>")
if iface_type not in ['slave']: return __salt__['cmd.run']('ifdown {0}'.format(iface)) return None
assert False
from salt._compat import subprocess
self.set_config(enabled=False)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
rs = mi_labels.iloc[2, 2] xp = mi_labels.ix['j'].ix[:, 'j'].ix[0, 0] self.assertEqual(rs, xp)
self.assertIn(str('Child Subject'), parent_s)
sorted_series = random_order.sort_index(ascending=False) assert_series_equal(sorted_series, self.ts.reindex(self.ts.index[::-1]))
recons_data = DataFrame(test_data).to_dict("i")
self.assertEqual(food_no_managers_state.managers, [])
action = models.CharField(max_length=100, db_index=True)
with patch('os.path.exists', return_value=False): self.assertRaises(SaltClientError, lambda: self.client.pub('*', 'test.ping'))
__func_alias__ = { 'time_': 'time' }
for idx in [['D', 'F'], ['A', 'C', 'B']]: verify_first_level(df, 'jim', idx, check_index_type=False)
import xml.etree.cElementTree as ElementTree
ret['msg'] = _urlopen(url6, timeout=timeout).read().splitlines()
self.refresh_course()
clone = self._clone() clone.query.set_empty() return clone
assertion, args = assertion_tuple[0], assertion_tuple[1:] getattr(self, assertion)(*args)
if node.location.to_deprecated_string() == url: return node for child in node.get_children(): found = find(child, url) if found: return found return None
rng = np.random.RandomState(0) noise = noise_scale * rng.randn(*X.shape) X_iso2 = iso.transform(X + noise)
ds_driver = capi.get_ds_driver(self._ptr) return Driver(ds_driver)
self.assertRaises(ValueError, store.put, 'b', df, format='fixed', complib='blosc')
self.test_send_to_all()
return self.lcp.get_score()
df = DataFrame(columns=list('ABC')) store.put('df2', df) assert_frame_equal(store.select('df2'), df)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.contentstore.delete(asset_key)
ind -= total
fault = OrderedDict() for field in header: fault[field] = entry[header.index(field)]
with self.assertNumQueries(0): embargo_api.check_course_access(unrestricted_course.id, user=self.user, ip_address='0.0.0.0')
atexit.register(self.cleanup)
"redirect_url": redirect_url,
auto_created = True concrete = False editable = False is_relation = True
best = sorted(grid_scores, key=lambda x: x.mean_validation_score, reverse=True)[0] self.best_params_ = best.parameters self.best_score_ = best.mean_validation_score
if not assume_unique: ar1, rev_idx = np.unique(ar1, return_inverse=True) ar2 = np.unique(ar2)
resp = self.client.get(self.url_unlocked, HTTP_RANGE=header_value) self.assertEqual(resp.status_code, 200) self.assertNotIn('Content-Range', resp)
if hasattr(self, 'opts'): self.refresh_file_mapping() self.initial_load = False
return self.filter_function(name, **flags)
available_version = salt.utils.alias_function(latest_version, 'available_version')
self.check_populated_course(course_id)
models.signals.m2m_changed.connect( self.m2m_changed_signal_receiver, Person.fans.through ) models.signals.m2m_changed.connect( self.m2m_changed_signal_receiver, Person.friends.through )
certificate.click_delete_certificate_button() self.certificates_page.click_confirmation_prompt_primary_button()
return set()
with self.apps.bulk_update(): for rel_app_label, rel_model_name in related_models: self.apps.unregister_model(rel_app_label, rel_model_name)
inc = np.r_[True, lab[1:] != lab[:-1]]
from __future__ import absolute_import
binary = salt.utils.which('at') if not binary: return '\'at.at\' is not available.'
rng = date_range('2/13/2010', '5/6/2010', tz=self.tzstr('US/Eastern'))
return (name, description)
raise NotImplementedError( "subclasses of BaseDatabaseWrapper may require an is_usable() method")
ts = Timestamp('2001-01-05 11:56', tz=maybe_get_tz('dateutil/UTC')) self.assertEqual(ts, ts.tz_convert(dateutil.tz.tzutc()))
return self.pk_with_subclass, set([self._tax_deduction_msg()])
url(r'^non_existing_url/', partial(defaults.page_not_found, exception=None)), url(r'^server_error/', defaults.server_error),
from salt.modules import pam
if course is None: log.warn(u"Could not find course with ID %s.", course_id) raise Http404
db_name = "foo'3" self._db_creation_loop(db_name=db_name, returning_name=db_name, test_conn=True, character_set='utf8', connection_user=self.user, connection_pass=self.password )
__virtualname__ = 'mount'
log = logging.getLogger(__name__)
return ' '.join(scopes)
kwargs['max_length'] = kwargs.get('max_length', 254) super(EmailField, self).__init__(*args, **kwargs)
service = super(DescriptorSystem, self).service(block=block, service_name=service_name) if callable(service): return service(block) return service
self.assertNotIn(self.module_key, self.loader)
hglib.init(rp_) new_remote = True
TASK_INSTANCES_PARALLEL = 0 TASK_INSTANCES_QUEUE = 1 TASK_INSTANCES_IGNORE_NEW = 2 TASK_INSTANCES_STOP_EXISTING = 3
result = _get_xblock_parent(self.vert1) self.assertEqual(result.location, self.seq1.location)
cats = list('cabe')
URLCONF_MODULES = ['myapp.url', 'another_app.urls']
u = User.objects.get(email='staffmember@example.com') self.assertTrue(u.check_password("anewpassword"))
start_index = end_triple_quote_match.start()
p = np.zeros((y.shape[0], k), dtype=np.float64) for i in range(k): p[:, i] = y == i
self.assertEqual(tab.name, expected_name)
self.wait_for_element_visibility('.create-user-button', "Add team member button is available") self.click_add_button() self.set_new_user_email(email) self.click_submit_new_user_form() self.wait_for_page()
if survey.utils.must_answer_survey(course, request.user): return redirect(reverse('course_survey', args=[unicode(course.id)]))
outline_page = self.course_outline_page.visit() outline_page.q(css='.outline-item.outline-subsection.is-collapsed .ui-toggle-expansion').click() verify_ordering(self, outline_page, expected_ordering)
self.assertIn('wrapper-xblock-message', html) self.assertNotRegexpMatches(html, r'wrapper-xblock[^-]+')
self.assertEqual(iptables.build_rule(**{'if': 'not eth0'}), '! -i eth0')
if hasattr(cls, 'server_thread'): cls.server_thread.terminate() cls.server_thread.join()
chunk = stream.read(max_header_size)
def argpartition(a, kth, axis=-1, kind='introselect', order=None): return np.argsort(a, axis=axis, order=order)
y1 = ir.predict([min(x) - 10, max(x) + 10]) assert_equal(sum(np.isnan(y1)), 2)
return CertificateStatuses.is_passing_status(cert_status)
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=rank, tail_strength=0.0, random_state=0) assert_equal(X.shape, (n_samples, n_features))
BULK_EMAIL_JOB_SIZE_THRESHOLD = 100
xml_centric_courselike_key = self.get_key() adapt_references(courselike, xml_centric_courselike_key, export_fs) courselike.add_xml_to_node(root)
a = dt b = ((dt + self) - self) return a == b
if new['code'] == 200:
if not self.has_partial_credit: return self.grade_without_partial_credit(student_answers=student_answers)
with self.assertRaises(SearchIndexingError): self.reindex_library(store)
e = rwindow.Expanding(Series([2, 4, 6]), window=2)
admin_email_handler = [ h for h in logger.handlers if h.__class__.__name__ == "AdminEmailHandler" ][0] return admin_email_handler
use_for_related_fields = True
log = logging.getLogger(__name__)
proba = sum(all_proba) / self.n_estimators
queue = deque([block]) while queue: item = queue.popleft() yield item queue.extend(item.get_children())
N_per_side = 5 Npts = N_per_side ** 2 n_neighbors = Npts - 1
DARK_LANGUAGE_KEY = 'dark-lang'
self.fit_, self.partial_fit_ = True, False return self._fit(X)
from __future__ import absolute_import from random import randint from re import findall import pprint import logging import time import os.path import subprocess
state_run = self.run_function('state.sls', mods='requisites.listen_simple')
def remove_flags_docstring(app, what, name, obj, options, lines): if what == "attribute" and name.endswith(".flags"): del lines[:]
metric_tag_fields = [ 'course_id', 'group_id', 'pinned', 'closed', 'anonymous', 'anonymous_to_peers', 'endorsed', 'read' ]
Article.objects.create(headline='Article_ with underscore', pub_date=datetime(2005, 11, 20))
return _coerce_scalar_to_timedelta_type(arg, unit=unit, box=box, errors=errors)
if i == 9: return True else: return False
raise ValueError("Cannot use a custom kernel function. " "Precompute the kernel matrix instead.")
if cached_md5 == file_md5: return
if not xblock.has_children: return False for child in xblock.get_children(): if is_visible_to_specific_content_groups(child): return True return False
ndim = _read_int32(f) if debug: logger.debug('header ndim {0}'.format(ndim))
super(TestSplitTestVert, self).setUp()
metadata_translations = { 'slug': 'url_name', 'name': 'display_name', }
super(MongoModuleStore, self).create_course( org, course, run, user_id, runtime=xblock.runtime, **kwargs )
np.add(A, S, tmp) I = np.argmax(tmp, axis=1)
log = logging.getLogger(__name__)
with self.settings(OPENID_SSO_SERVER_URL=abs_provider_url):
USERNAME_MIN_LENGTH = 2 USERNAME_MAX_LENGTH = 30
self.assertEqual( Book.objects.filter(id__in=[]).count(), 0 )
if 'id' not in __opts__ or not __opts__['id']: __opts__['id'] = 'saltsh_mid'
info = prlctl('snapshot-list', name, runas=runas)
assert key.user_id == self.user.id
from __future__ import absolute_import
def _mean_shift_single_seed(my_mean, X, nbrs, max_iter): bandwidth = nbrs.get_params()['radius']
from __future__ import unicode_literals
result = store.select('p4d', ['labels=l1']) expected = p4d.reindex(labels=['l1']) assert_panel4d_equal(result, expected)
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
profile_page.privacy = privacy
if block.date is None: return datetime.max.replace(tzinfo=pytz.UTC) return block.date
keys = list(compat.iterkeys(arg)) result = compat.OrderedDict()
nulls_order_largest = False
(self.filter_specs, self.has_filters, remaining_lookup_params, filters_use_distinct) = self.get_filters(request)
X, y = make_hastie_10_2(n_samples=20, random_state=1) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=43)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
client = get_file_client.return_value client.cache_file.return_value = self.top_file.name
pass
self._assertOptionsValues("%s > option:checked" % selector, values)
self._compare(o.head(len(o) + 1), o) self._compare(o.tail(len(o) + 1), o)
return self.storage_space.np_format_as(design_mat, self.topo_space)
Y = np.clip(y_pred, eps, 1 - eps)
return
LMS_BASE_URL = os.environ.get('lms_url', 'http://localhost:8003')
plt.subplot(1, 2, i + 1)
gs.fit(X, y)
sh(cmd( "touch", 'lms/urls.py', 'cms/urls.py', ))
actual_enabled = certs_api.cert_generation_enabled(self.course.id) self.assertEqual(is_enabled, actual_enabled)
if csv_type is not None: try: redemption_set = registration_code.registrationcoderedemption_set redeemed_by = redemption_set.get(registration_code=registration_code).redeemed_by course_registration_dict['redeemed_by'] = redeemed_by.email except ObjectDoesNotExist: pass
mask_missing_values = _get_mask(X.data, missing_values) mask_valids = np.logical_not(mask_missing_values)
status = 'failed' reason = { 'current_date': now, 'deadline': deadline }
class SplitDateTimeForm(Form): when = SplitDateTimeField(initial=datetime.datetime.now)
models.Post.objects.create(id=10, name='1st post', text='hello world')
jid_dir, jid_file = self._make_tmp_jid_dirs()
for p, y, expected in cases: assert_almost_equal(loss_function.dloss(p, y), expected)
ret = self.run_state( 'file.append', name=name, text='cheese' ) self.assertSaltTrueReturn(ret) self.assertTrue(os.path.isfile(name))
stream_stdout=None, stream_stderr=None, ):
self.check_assertion_structure(assertion, response['results'][0])
response = self.client.post(self.url, data) self.assertHttpBadRequest(response)
self.student_id = "99" self.student_name = "testcert" self.student_email = "cert@example.com"
predict = pipe.predict(X) assert_equal(predict.shape, (n_samples,))
timeout_in_seconds = 60 * 60 * 24 self._cache.set( self._encode_root_cache_key(block_structure.root_block_usage_key), zp_data_to_cache, timeout=timeout_in_seconds, )
response = middleware.process_response(request, response)
self.check_event_response_by_key( 'add_resource', self.test_recommendations[self.resource_id], 'id', self.resource_id )
if publish == 'make_public': modulestore().publish(xblock.location, user.id)
return (url_name is not None and url_name.startswith(tag) and re.search('[0-9a-fA-F]{12}$', url_name))
rets = {} for ret in ssh.run_iter(mine=True): rets.update(ret)
from __future__ import absolute_import import os import time import subprocess
still_in_grace = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="1", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertTrue(still_in_grace.answer_available())
with self.assertRaises(ValueError): with transaction.atomic(using='default'): marty.book_set.add(dive)
from __future__ import absolute_import
check_xblock_names(active_groups + inactive_groups, container.xblocks[1:]) if verify_missing_groups_not_present: self.verify_add_missing_groups_button_not_present(container)
import re _name_re = re.compile(r"[a-zA-Z_][a-zA-Z0-9_]*$")
matplotlib.use(mplbackend)
self.selenium.find_element_by_xpath('//input[@value="Save"]').click() self.wait_page_loaded()
logging.warning("Did not find key commentable_id in content.") passes_condition = False
try: import dogstats_wrapper as dog_stats_api except ImportError: dog_stats_api = None
return sum(self.stack_calls(stack) for stack in self._stacks)
__func_alias__ = { 'list_': 'list', }
trans_tar_sum = salt.utils.get_hash(trans_tar, __opts__['hash_type'])
self.f = tempfile.NamedTemporaryFile(delete=False) self.f.close()
return self.runtime.get_edited_on(self)
df = pd.DataFrame(vals, columns=cols) a, b = pd.concat([df, df]), df.drop_duplicates(subset=cols[:-1])
assert_raises_regexp(ValueError, ".*loss='l3' is not supported.*", svm.LinearSVC(loss="l3").fit, X, y)
__proxyenabled__ = ['cisconso']
major_axis = major_axis.copy() major_axis.name = self.index.names[0]
raise NotImplementedError("%s does not implement batch_size" % type(self))
master_doc = 'index'
self.assertTrue(element_has_text( page=course_outline_page, css_selector='span.section-title', text='Entrance Exam' ))
return datetime.utcfromtimestamp(ts).replace(tzinfo=timezone.utc)
activation_key = create_account(self.USERNAME, self.OLD_PASSWORD, self.OLD_EMAIL) activate_account(activation_key)
ip_address = get_ip(request) if ip_address is not None: return ip_address else: return ''
self.assertFalse(user(email).is_active)
return False
_ = lambda text: text
self.frame.to_latex()
X_non_outliers = -axis0_safe_slice(X, ~outliers_mask, n_non_outliers) grad[:n_features] = ( 2. / sigma * safe_sparse_dot(weighted_non_outliers, X_non_outliers))
assert_almost_equal(ref_i.coef_, clf_i.coef_, decimal=3) assert_almost_equal(ref_w.coef_, clf_w.coef_, decimal=3) assert_almost_equal(ref_i.intercept_, clf_i.intercept_, decimal=3)
treedic = {} treedic['1'] = _get_final_tree(s1) treedic['2'] = _get_final_tree(s2)
courses_list = list(get_course_enrollments(self.student, None, [])) self.assertEqual(len(courses_list), 0)
from salt.states import ssh_known_hosts
if kwargs.get(push, False): ret['Push'] = __salt__['cp.push'](path)
from __future__ import absolute_import import os import sys from random import randint import grp
mock_get.return_value.content = "Error" self.assertRaises(EdxNotesParseError, helpers.get_notes, self.request, self.course)
if u('table') not in pt: try: return globals()[_STORER_MAP[pt]](self, group, **kwargs) except: error('_STORER_MAP')
self.assertAlmostEqual( calc.evaluator(variables, {}, '3*x-y'),
return self._compiled_cache[2:]
index = self.index[2:100:4] expected = Index(np.array([4, 12]), name='foo') self.assert_index_equal(index, expected)
TableInfo = namedtuple('TableInfo', ['name', 'type'])
self.user_partition.get_scheme(self.non_random_scheme.name) self.user_partition.get_scheme(self.random_scheme.name)
response = self.send_get(client, query_parameters='view=shared') verify_fields_visible_to_all_users(response)
self.assertTrue(access.has_ccx_coach_role(self.coach, ccx_locator))
staff_user = UserFactory(username='test_staff_user', email='test_staff_user@openedx.org', password='test') CourseStaffRole(self.master_course_key).add_users(staff_user)
Y = np.array([e.predict_proba(X)[:, 1] for e in self.estimators_]).T
if longtable is None: longtable = get_option("display.latex.longtable") if escape is None: escape = get_option("display.latex.escape")
_mixin_prio_ = 100
self.go_to_tab_and_assert_problem(2, self.problem2_name)
return int(self.broadcast_address) - int(self.network_address) + 1
table = _normalize(table, normalize=normalize, margins=False)
yield dec
if response.get('X-Frame-Options') is not None: return response
phase_data = self.run_data.setdefault(test_phase, {}) amount_data = phase_data.setdefault(amount_md, {}) __ = amount_data.setdefault(modulestores, time_taken)
self.assertTrue( self.run_function('shadow.set_password', [TEST_USER, 'Pa$$W0rd']))
test_context.push()
PER_REMOTE_OVERRIDES = ('ssl_verify',)
response_element.set("answer", str(answer))
signature = hmac.new( signing_key, string_to_sign.encode('utf-8'), hashlib.sha256).hexdigest()
from __future__ import absolute_import
import salt.utils from tests import integration
if wt_detached: tags_found = _git_tag_points_at(cwd, wt_head, user) if tags_found: wt_ptr['tags'] = tags_found
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=100, max_depth=1) est.fit(X, y)
course = self.store.get_course(course.id) self.assertEqual(len(course.children), 1) self.assertNotIn(dangling_pointer, course.children)
ieee1 &= 0xffefffff
self.assertIn(escape(point.json), widget.render('p', point.json)) self.assertEqual(widget.deserialize_called, 1)
other_session = self.backend() other_session['foo'] = 'bar' other_session.set_expiry(-3600) other_session.save()
self.assertFalse(self.index.is_numeric())
parsed_html = lxml.html.fromstring(response.content) return parsed_html.find_class('course-status')[0].find_class('status-release-value')[0].text_content()
metrics = {'ais': estimate_likelihood} datasets = {'mnist': MNIST}
del params["email"] assert_email_error("A properly formatted e-mail is required")
X2 = np.ones(17) kf = KFold(3) check_cv_coverage(kf, X2, y=None, labels=None, expected_n_iter=3)
self.assertFalse(self._has_changes(parent.location)) self.assertFalse(self._has_changes(child.location))
s = s_orig.copy() s2 = s s += 1.5 assert_series_equal(s, s2) assert_series_equal(s_orig + 1.5, s)
from __future__ import absolute_import import logging import copy import re
REQUIRE_BASE_URL = "./"
ret = {'name': name, 'result': False, 'comment': '', 'changes': {},
if not request.user.is_superuser and not ApiKeyHeaderPermission().has_permission(request, self): return Response(status=status.HTTP_403_FORBIDDEN)
xx = np.dot(x.values.T, x.values) xt = x.sum(level=0).values
try: ch, escaped = next(input_iter) except StopIteration: ch = None if ch == '?': ch = None return int(values[0]), ch
for opt in ssl_option: key = next(six.iterkeys(opt))
trainer = yaml_parse.load(test_yaml_layer1 % {'layer0_filename': layer0_filename, 'layer1_filename': layer1_filename}) trainer.main_loop()
self.assertIsNotNone(ver_block)
__virtualname__ = 'user'
if isinstance(key, LibraryLocator): key = unicode(key) return LIBRARY_REST_URL + key
init = getattr(cls.__init__, 'deprecated_original', cls.__init__) if init is object.__init__: return []
super(IndexSequenceSpace, self)._validate_impl(is_numeric, batch)
return concat(objs, axis=axis, verify_integrity=False).consolidate()
import salt.utils from salt.utils.pycrypto import gen_hash import integration
response = self._change_password() self.assertEqual(response.status_code, 200)
self.course_nav.q(css='select option[value="{}"]'.format('blue')).first.click()
dtype = np.float64
dest_modulestore = self._get_modulestore_for_courselike(dest_course_id) if source_modulestore == dest_modulestore: return source_modulestore.clone_course(source_course_id, dest_course_id, user_id, fields, **kwargs)
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
return self.child(title)
salt '*' vsphere.vsan_disable my.esxi.host root bad-password
from __future__ import print_function
from __future__ import unicode_literals
geos_project = GEOSFuncFactory( 'GEOSProject', argtypes=[GEOM_PTR, GEOM_PTR], restype=c_double, errcheck=check_minus_one ) geos_interpolate = Topology('GEOSInterpolate', argtypes=[GEOM_PTR, c_double])
ith_cluster_silhouette_values = \ sample_silhouette_values[cluster_labels == i]
return cls.objects.filter( course__course_key=course_key, course__enabled=True, username=username, deadline__gt=datetime.datetime.now(pytz.UTC), ).exists()
def dec(func): return self.filter(name, func, **flags) return dec
if not com.is_list_like(header): offset = 1 + header else: offset = 1 + max(header)
return os.getcwd()
user = self.opts.get('user', 'root') salt.utils.verify.check_path_traversal(self.opts['pki_dir'], user)
self.assertContains(response, 'course-container', 3) self._assert_responses(response, program_count)
if f_ordered: new_values = new_values.T
if d_estate in self.road_stack.value.nameRemotes: self.road_stack.value.message(msg, self.road_stack.value.nameRemotes[d_estate].uid) return
from salt.modules import pip from salt.exceptions import CommandExecutionError
self.assertFalse(self.video.is_menu_present('download_transcript'))
from __future__ import absolute_import import os
from __future__ import absolute_import import os import re import pprint import logging import msgpack from ast import literal_eval
osarch = sorted(archinfo, key=archinfo.get, reverse=True)
ddata = DummyDataset(axes=('c', 0, 1, 'b')) topo = ddata.get_topological_view()
destroy(vm_['name'])
self.assertEqual(template.render(context), '')
raise NotImplementedError
new = Point(5, 23) nullcity.point = new
ans = commentable_id in course_cohort_settings.cohorted_discussions
regex_re = com.is_re_compilable(regex)
aggregated = grouped.aggregate(np.mean) self.assertEqual(len(aggregated), 5) self.assertEqual(len(aggregated.columns), 4)
user_groups = {} for partition, groups in partition_groups: user_groups[partition.id] = partition.scheme.get_group_for_user( course_key, user, partition, )
return Response({'handouts_html': None})
@ignore_warnings(category=DeprecationWarning) def test_aic(): n_samples, n_dim, n_components = 50, 3, 2 X = rng.randn(n_samples, n_dim)
self.assertValueQuerysetEqual( ExtraInfo.objects.values('note_id'), [{'note_id': 1}, {'note_id': 2}] )
self.assertRaises(Exception, store.select_as_multiple, None, where=['A>0', 'B>0'], selector='df1')
return json.loads(response.content)
if user_profile.requires_parental_consent() and user_profile.has_profile_image: user_profile.profile_image_uploaded_at = None
max_squared_sum = get_max_squared_sum(X) step_size = get_auto_step_size(max_squared_sum, alpha, "log", fit_intercept)
mixed = Series(['a', NA, 'b', True, datetime.today(), 'ee', None, 1, 2. ])
import glob import os import re import itertools import fnmatch
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, max_attempts=0, done=True, correct=False) self.assertTrue(module.should_show_reset_button())
self.set_call_count += 1 self.map[key] = val self.timeout_from_last_call = timeout
problem = new_loncapa_problem(xml_str)
import salt.ext.six as six
return self.fillna(method='bfill', axis=axis, inplace=inplace, limit=limit, downcast=downcast)
self.attempt_login(403, ns="http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0")
out = self._str_indent(out,indent) return '\n'.join(out)
default = 'DEFAULT'
threshold = min(step, np.sum(support_) - n_features_to_select)
(self.left_join_keys, self.right_join_keys, self.join_names) = self._get_merge_keys()
created = models.DateTimeField(db_index=True) state = models.TextField(null=True, blank=True) grade = models.FloatField(null=True, blank=True) max_grade = models.FloatField(null=True, blank=True)
from pandas.util.testing import makeCustomDataframe as mkdf
self._add_prerequisite_course() self.init_course_access() self._verify_unfulfilled_milestone_response()
return self.course_overview
self.assertEqual(response.status_code, 200)
self.assertEqual(list(chris.edited.values_list('title', flat=True)), ['Dive into Python'])
series = self.frame.xs('A', axis=1) series[:] = 5 self.assertTrue((expected == 5).all())
root = etree.Element("problem")
import salt.log.setup
with open(os.path.join(TEST_DATA, 'geometries.json')) as f: geometries = json.load(f) return TestGeomSet(**strconvert(geometries))
__test__ = True pass
if return_distance: dist, neigh_ind = result else: neigh_ind = result
if style_dict.get('borders'): xl_format.set_border()
if not permissions.can_access_self_blocks(requesting_user, course_key): raise PermissionDenied( "Course blocks for '{requesting_username}' cannot be accessed." .format(requesting_username=requesting_user.username) ) return requesting_user
shortcuts = self.selenium.find_elements_by_css_selector('.field-birthdate .datetimeshortcuts')
return ''
for pool_size in [1, 2, 5]: do_test(pool_size)
target_source = self.add_mask_source(self.get_target_space(), 'targets') return target_source
update_course_in_cache.apply_async([unicode(course_key)], countdown=0)
incxml = etree.XML(ifp.read())
load(filename, mmap_mode=self._mmap_mode).max()
responseparam_element = etree.SubElement(response_element, "responseparam") responseparam_element.set("type", "tolerance") responseparam_element.set("default", str(tolerance))
pass
self.assertTrue(np.isnan(self.ts[::2].corr(self.ts[1::2])))
__virtualname__ = 'virt'
return Series(self._df_resid_raw, index=self._result_index)
class ArticleForm(forms.ModelForm): class Meta: model = Article fields = '__all__'
sample_weight = np.ones(y.shape) sample_weight[y == 1] *= 100
if instructor_task.task_state not in READY_STATES: result = AsyncResult(task_id) _update_instructor_task(instructor_task, result)
self.assertTrue(certificate_generation_history.exists())
self.process_requirements()
with self.assertRaises(ValueError): c(span=0.5)
lookup_tag = customrender.registry.get_class_for_tag
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
try: set_defaults() except Exception as e: logger.exception(e)
checkpoint.add_verification_attempt(self.attempt)
ret = get_editable_fields( Comment(user_id=context["cc_requester"]["id"], type="comment"), context ) ret |= NON_UPDATABLE_COMMENT_FIELDS return ret
max_rows = 1
salt '*' vsphere.set_syslog_config my.esxi.host root bad-password \ loghost ssl://localhost:5432,tcp://10.1.0.1:1514
try: kwargs['command'] = salt.utils.shlex_split(kwargs['command']) except AttributeError: pass
ml_cost = (self.free_energy_given_v(pos_v).mean() - self.free_energy_given_v(neg_v).mean())
providers_config_path = overrides['providers_config']
offset = QuarterEnd(n=-1, startingMonth=1) self.assertEqual(datetime(2010, 2, 1) + offset, datetime(2010, 1, 31))
except: match = (arg_val_dict[key] is compat_args[key])
result = __salt__['splunk.update_user']( email, profile, **kwargs )
mixed = Series(['a', NA, 'b', True, datetime.today(), 'foo', None, 1, 2.])
class ExplicitlyProvidedPK(models.Model): name = models.IntegerField(primary_key=True)
mdadm.__salt__ = {} mdadm.__opts__ = {}
continue
from __future__ import absolute_import
self.assertEqual([], os.listdir(TMP_JID_DIR))
err = Exception mock_index_dictionary.return_value = err
res_df = df.iloc[2:4, :] tm.assert_frame_equal(res_df, exp_df) self.assertTrue(com.is_categorical_dtype(res_df["cats"]))
with option_context('display.unicode.east_asian_width', True):
rho, _ = spearmanr(x, y) increasing_bool = rho >= 0
output = self.engine.render_to_string('legacyi18n07', {'number': 1}) self.assertEqual(output, 'singular')
if ndim == 1: values = values[0]
output = self.engine.render_to_string('inheritance02') self.assertEqual(output, '1234')
if regex.groups == 0: raise ValueError("pattern contains no capture groups")
high_reg_model = ElasticNet(alpha=final_alpha * 10).fit(X, y) assert_greater(low_reg_model.n_iter_, high_reg_model.n_iter_)
new_connection.set_autocommit(False) self.assertEqual(new_connection.connection.isolation_level, serializable)
assert (len(x.base) > 0) return Decimal(str(x.mean()))
package.where=dataset_data_path;
from __future__ import unicode_literals
__remove_null_logging_handler()
self.assertContains(response, "\n1 recommendation\n")
self._create_video()
log.debug(u"Referrer hostname is `None`, so it is not on the whitelist.")
self.q(css=self.search_bar_selector + ' [type="submit"]').click() self.wait_for_element_visibility('.search-info', 'Search results are shown')
summary, line = _extend_line(summary, line, tail[-1], display_width - 2, space2) summary += line summary += '],'
bob = User.objects.using('default').get(username='bob')
new = copy_exception(exc, backend) six.reraise(exc.__class__, new, sys.exc_info()[2])
cv = check_cv(self.cv, y, classifier=True) folds = list(cv.split(X, y))
self.iteration = sharedX(theano._asarray(0, dtype='int32'), name='iter')
pass
gs = DataReader("GS", "yahoo")
([[], []], 0 ),
account_settings.switch_account_settings_tabs('accounts-tab') account_settings.wait_for_link_title_for_link_field(field_id, "Unlink This Account")
return wkb_w(3 if self.hasz else 2).write(self)
parser = PDFParser(pdf_buffer) document = PDFDocument(parser, password)
from __future__ import unicode_literals
ranks = {'leaves': []} colors = {'bounds': None}
assert_frame_equal(result_sort, df.groupby(col, sort=False).first())
if not configured_probes: return { 'add': expected_probes }
access_key_id, secret_access_key, token = aws.creds(provider)
self.assertTrue('success' in result and result['success'])
if defaults: if option in defaults: log.info('Using default for %s %s', virtualname, option) yield option, defaults[option] continue
negative_chains.show_negative_chains('dbm.pkl')
conn = s3.connection.S3Connection( settings.AWS_ACCESS_KEY_ID, settings.AWS_SECRET_ACCESS_KEY ) return conn.get_bucket(settings.VIDEO_UPLOAD_PIPELINE["BUCKET"])
if kwarg: kwarg['__kwarg__'] = True arglist.append(kwarg)
from __future__ import absolute_import
"public_fields": [ 'username', 'profile_image', 'account_privacy', ],
result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0') self.assertTrue(result)
'error': _("Problem is closed."),
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:00")
if return_type is None: for r in self._flatten_visible(returned): self.assertIsInstance(r, Axes) return
link_index = None for index in range(len(all_links)): if course_id in all_links[index]: link_index = index break
super(Conv2DSpace, self)._validate_impl(is_numeric, batch)
try: res[field.attname] = field except AttributeError: pass
return self.field.label_tag( contents=mark_safe(contents), attrs=attrs, label_suffix='' if self.is_checkbox else None, )
'/etc/ssl/certs/ca-certificates.crt', '/etc/pki/tls/certs/ca-bundle.crt', '/etc/pki/tls/certs/ca-bundle.trust.crt', '/etc/ssl/certs/ca-bundle.crt', '/var/lib/ca-certificates/ca-bundle.pem', '/etc/ssl/cert.pem',
self.assertTrue(retry.called) (__, kwargs) = retry.call_args exc = kwargs['exc'] self.assertIsInstance(exc, SMTPDataError)
self.register_page.click_third_party_dummy_provider()
r1 = idx1.get_indexer(idx2._tuple_index) rexp1 = idx1.get_indexer(idx2) assert_almost_equal(r1, rexp1)
s = pd.SparseSeries([1, np.nan, 2, 0, np.nan]) tm.assert_sp_series_equal(s[...], s)
self.youtube_configuration['time_to_response'] = 2.0 self.metadata = self.metadata_for_mode('youtube_html5')
course_key = ccx_key.to_course_locator() return _has_access_course_key(user, action, course_key)
credit_course = self.add_credit_course() CreditEligibility.objects.create( course=credit_course, username="staff", deadline=datetime.datetime.now(pytz.UTC) - datetime.timedelta(days=1) )
module = CapaFactory.create(attempts=0, done=True)
if is_entrance_exams_enabled(): graders = [grader for grader in graders if grader.get('type') != u'Entrance Exam'] return graders
from salt.modules import artifactory
return [XBlock.tags, XBlock.name]
self.distribution.metadata.version = versions["version"] return _sdist.run(self)
DEFAULT_TARGET_DELIM = ':'
transport = None if needs_daemon: transport = self.options.transport TestDaemon.transplant_configs(transport=transport)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, mock_open, patch, NO_MOCK, NO_MOCK_REASON )
diabetes = datasets.load_diabetes()
f = lambda x: x.sort_index(inplace=True) _check_f(data.copy(), f)
self.post_create_membership( 200, self.build_membership_data(user, self.solar_team), user=user )
self.t_ = None
additional_data = { u'video_bumper': { u'value': { "transcripts": {}, "video_id": "video_001" } } } self.course_fixture.add_advanced_settings(additional_data)
return cls.api_access_status(user) == cls.APPROVED
self.assertFalse(res_json['success'])
indices = indices[::-1] maybe_slice = lib.maybe_indices_to_slice(indices, len(target)) self.assertTrue(isinstance(maybe_slice, slice)) self.assert_numpy_array_equal(target[indices], target[maybe_slice])
from __future__ import absolute_import
import salt.utils
return result.dtype.type(result.item())
OverrideFieldData.provider_classes = None
result = df.reorder_levels(['L0', 'L1', 'L2']) assert_frame_equal(df, result)
from __future__ import absolute_import import logging
if wildcard: return '*' else: return unicode(badge_class.course_id)
mid = int(np.floor(kernel_shape/ 2.)) centered_X = X - convout[:,:,mid:-mid,mid:-mid]
parents_map = [[], [0], [0], [1], [1], [2], [2, 4]]
return self.__to_language
self.assertEqual(ProfileCollection.objects.all().count(), 1) self.assertEqual(Profile.objects.all().count(), 3)
self.assertTrue(self.profile.requires_parental_consent()) self.assertTrue(self.profile.requires_parental_consent(default_requires_consent=True)) self.assertFalse(self.profile.requires_parental_consent(default_requires_consent=False))
class Scene(models.Model): scene = models.CharField(max_length=255) setting = models.CharField(max_length=255)
super(Syndic, self).destroy() if hasattr(self, 'local'): del self.local
perf_test = True
from salt.states import module
piece = piece.copy() try: piece[all_key] = margin[key] except TypeError:
return first_line.split(':')[2][0:10]
from xmodule.modulestore.mongo.draft import DraftModuleStore as DraftMongoModuleStore
if valid_size < 1.0: valid_size /= 1.0 - np.true_divide(self.n_test, self.n) self.valid_size = valid_size
if not old_is_active: new_enrollment.update_enrollment(is_active=False, skip_refund=True)
from pandas.core.sparse import SparseSeries return SparseSeries(self, kind=kind, fill_value=fill_value).__finalize__(self)
io = StringIO()
for directory in dirs: filepath = path(directory) / filename if filesystem.exists(filepath): return filepath raise ResourceNotFoundError(u"Could not find {0}".format(filename))
plaintext_msg = course_email_template.render_plaintext(course_email.text_message, email_context) html_msg = course_email_template.render_htmltext(course_email.html_message, email_context)
try: entry = cls._get_record_for_user(user) entry.delete() except ObjectDoesNotExist: return
raise AssertionError('%d columns passed, passed data had %s ' 'columns' % (len(columns), len(content)))
return capi.get_ds_xsize(self._ptr)
import logging log = logging.getLogger(__name__)
FilterActs = None WeightActs = None
kwargs['explanation_text'] = None return super(CodeResponseXMLFactory, self).build_xml(**kwargs)
__virtualname__ = 'sysctl'
config.cancel()
if isinstance(ret, collections.Iterator): for i in ret: yield i else: yield ret
if self.fieldsets: return self.fieldsets return [(None, {'fields': self.get_fields(request, obj)})]
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
"migrations_project", "migrations_task", "migrations_project_tasks", "migrations_task_projects",
import socket import random import time import codecs import uuid import logging import json
self.assertTrue(CourseEnrollment.is_enrolled(self.user, destination_course_key))
mixed_stores.remove(store) mixed_stores.insert(0, store) return
pygments_style = 'trac'
#'pointsize': '10pt',
key = signature.get_shared_secret_key("asu") self.assertIs(key, None)
for name in names: ret[name] = ''
self.cf.deprecate_option('foo')
dummy_v = T.tensor4() dummy_v.name = 'dummy_v'
id = models.IntegerField(primary_key=True)
if method in [None, 'asfreq']: return None
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) course_block = modulestore().get_item(lc_block.children[0])
param_grid = ParameterGrid(self.param_distributions) grid_size = len(param_grid)
if not compat.PY3: l.append(('unicode', u('\\u03c3')))
self.certificates_page.visit() self.assertEqual(len(self.certificates_page.certificates), 0)
dummy_mat[codes == -1] = 0
import salt.ext.six as six
self.assertEquals(5, self.response.content.count('grade_A'))
f = open(json_file_path) lines = f.readlines() f.close() content = ''.join(lines) return yaml.load(content)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
block_structure.request_xblock_fields('hide_from_toc')
layers = [model.visible_layer] + model.hidden_layers
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 0)
fcopy = self.frame.copy() fcopy['A'] = 1 del fcopy['C']
ret = self.run_function('virtualenv.create', [venv_dir]) self.assertEqual(ret['retcode'], 0)
if os.path.isfile(logfile): os.unlink(logfile)
new_index._start = new_index._min_fitting_element(int_low) return new_index
userKeys += ['id_rsa.pub', 'id_dsa.pub', 'id_ecdsa.pub', 'id_ed25519.pub']
return self.event[u'current_tab'] == self.event[u'tab_count']
self.assertOLXIsDraftOnly(block_list_to_revert) self.publish(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert) self.revert_to_published(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert)
import salt.pillar
self._mp_context = backend backend = "multiprocessing"
course_id = serializers.CharField(source='id', read_only=True)
assert_series_equal(result, expected)
assert_array_equal(X_2.astype(bool), univariate_filter.inverse_transform(X_r.astype(bool)))
return self.queryset.filter()
if valid_commands: if cmd not in valid_commands: target_room.message('Using {0} is not allowed.'.format(cmd)) return
if isnull(arr).any() or not np.allclose(arr, trans(arr).astype(dtype)): return result
rng = date_range('1/1/2000', periods=20)
block_wrappers.append(partial(replace_course_urls, course_id))
sale_dict = dict((feature, getattr(invoice, feature)) for feature in sale_features)
django_settings.MIDDLEWARE_CLASSES += _MIDDLEWARE_CLASSES
return self.create_public_client(self.user, self.client_id)
reverse_indexer = np.empty(len(sorter), dtype=np.int64) reverse_indexer.put(sorter, np.arange(len(sorter)))
U, S, V = randomized_svd(X, n_components=n_components, n_iter=self.iterated_power, flip_sign=True, random_state=random_state)
if closest_subcluster.child_ is not None: split_child = closest_subcluster.child_.insert_cf_subcluster( subcluster)
return None
new_indexer = np.arange(len(self.take(indexer))) new_indexer[~check] = -1
engine = import_module(settings.SESSION_ENGINE) session = engine.SessionStore() session[LANGUAGE_SESSION_KEY] = 'pl' session.save() self.client.cookies[settings.SESSION_COOKIE_NAME] = session.session_key
try: groupSID, domainName, objectType = win32security.LookupAccountName(None, pgroup) except pywinerror: err += 'Group does not exist\n'
else: ret = _load_result(existing, ret)
self._func_path = '.'.join([func.__module__, func.__name__])
return 18446744073709551615
import elementtree.cElementTree as ElementTree
data[:, 2] /= data[:, 5]
yield check_estimators_unfitted if 'class_weight' in Classifier().get_params().keys(): yield check_class_weight_classifiers
def get_xml_editable_fields(self, field_data): runtime = get_test_descriptor_system() return runtime.construct_xblock_from_class( XmlDescriptor, scope_ids=Mock(), field_data=field_data, ).editable_metadata_fields
tmp = __salt__['config.option'](attributes_from_pillar, {}) if attributes: attributes = dictupdate.update(tmp, attributes) else: attributes = tmp
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
df = self.read_csv(StringIO(self.data1), nrows=3.0) tm.assert_frame_equal(df, expected)
import json
apps.lazy_model_operation(test_func, ('apps', 'lazyb'))
__context__ = {'ports.install_error': 'salt'}
assert_equals('never', seq.rerandomize)
files[name].append(pid) files[name] = sorted(set(files[name]))
assets, count = content_store.get_all_content_for_course(self.course.id) self.assertEqual(count, 1) display_name = assets[0]['displayname'] self.assertEqual(display_name, invalid_displayname)
Z, (pi, W_sr, L, b, a) = \ self._posterior_mode(K, return_temporaries=True)
from __future__ import print_function from __future__ import absolute_import from os.path import splitext, abspath from sys import modules
HAS_LIBS = False try: import vboxapi
from salt.states import jboss7 from salt.exceptions import CommandExecutionError
assert_array_equal(children_unstructured, children_structured)
self.assertFalse(check_password({}, 'test@example.com', 'incorrect'))
message = self.q(css='BODY').text[0] match = re.search('Payment page', message) return True if match else False
if style_kwargs: first_row = startrow + cell.row + 1 last_row = startrow + cell.mergestart + 1 first_col = startcol + cell.col + 1 last_col = startcol + cell.mergeend + 1
s = self.ts.copy() result = getattr(s, op)(s) self.assertEqual(result.name, self.ts.name)
return self.oauth2_adapter.create_confidential_client( name='Test Confidential Client', user=user, client_id=client_id, redirect_uri=DUMMY_REDIRECT_URL, )
self.assertFalse(os.path.exists('./templates/template_with_error.tpl.py'))
clone = self._clone() clone._db = alias return clone
if field.source is None: field.bind(self.field_name, self)
self._assert_certs_in_queue(mock_queue, 2)
import salt.utils.cloud import salt.config as config
return render_message_to_string( subject_template, message_template, self.get_email_params_ccx() )
def __init__(self): self.eq_calls = 0 def __eq__(self, other): if self.eq_calls > 0: return True self.eq_calls += 1 return False
probas_pred = probas_pred[:, 1]
self.data = data
import integration import salt.utils
rng = np.random.RandomState(42)
lr_tracker = LearningRateTracker() algorithm = SGD(learning_rate, cost, batch_size=batch_size, monitoring_batches=3, monitoring_dataset=monitoring_dataset, termination_criterion=termination_criterion, update_callbacks=[annealed_rate, lr_tracker], set_batch_size=False)
nv.validate_resampler_func('var', args, kwargs) return self._downsample('var', ddof=ddof)
CLIENT_NAME = "edx-notes" DEFAULT_PAGE = 1 DEFAULT_PAGE_SIZE = 25
__virtualname__ = 'sysrc'
track_function = _get_track_function_for_task(student_module.student, xmodule_instance_args) track_function('problem_delete_state', {}) return UPDATE_STATUS_SUCCEEDED
return "params_and_context - Expected result (context value: %s): %s" % (context['value'], arg)
try: if self.is_copy().shape == self.shape: self.is_copy = None return except: pass
df = DataFrame({'foo': []}) rs = df.shift(-1)
re.compile(r'^Advanced Settings \|'): [ "jquery", "js/base", "js/models/course", "js/models/settings/advanced", "js/views/settings/advanced", "codemirror"],
trainer = yaml_parse.load(convert_to_one_hot_yaml % {'filename': filename}) trainer.main_loop()
certificate["version"] = CERTIFICATE_SCHEMA_VERSION if certificate.get("signatories") is None: certificate["signatories"] = [] certificate["editing"] = False return certificate
FIRST_TIME_VERIFY_MSG = 'first-time-verify' VERIFY_NOW_MSG = 'verify-now' VERIFY_LATER_MSG = 'verify-later' UPGRADE_MSG = 'upgrade' PAYMENT_CONFIRMATION_MSG = 'payment-confirmation'
with self.assertRaisesMessage(management.CommandError, YAML_IMPORT_ERROR_MESSAGE): management.call_command('dumpdata', format='yaml')
self.assertIsNone(auth.authenticate(password=password, username=username))
self._export_import_course_round_trip( self.store, contentstore, source_course_key, self.export_dir )
with tm.assertRaises(Exception): func(idx)
return next((tab for tab in tab_list if tab.type == tab_type), None)
results = {} for k, v in kwargs.items(): results[k] = com._apply_if_callable(v, data)
return remote_id
return self.user
try: import boto import boto.ec2 logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
with warnings.catch_warnings(record=True) as warns: warnings.simplefilter('always', RemovedInDjango20Warning)
task_folder.DeleteFolder(name, 0)
self.assert_not_enrolled()
used_all_attempts = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="1", due=self.tomorrow_str) self.assertFalse(used_all_attempts.answer_available())
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertIs(inner_qs._result_cache, None)
return json.dumps({ k: v.encode('utf-8') if isinstance(v, basestring) else v for k, v in post_dict.items() })
timeout = None
from datetime import datetime, timedelta, tzinfo, date import nose
executor.loader.build_graph()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
course_locator = self._map_revision_to_branch(course_locator, revision=revision) return super(DraftVersioningModuleStore, self).get_items(course_locator, **kwargs)
self.assertFalse('Invalid' in response.content)
trigger = task_definition.Triggers.Create(trigger_types[trigger_type])
module.system.user_is_staff = False
s2 = s.copy() s2[1] = 5 expected = s.append(Series([5], index=[1])) assert_series_equal(s2, expected)
trust_root = TrustRoot.parse(openid_request.trust_root) if not trust_root: log.error('invalid trust_root') return False
val = self.verify_ogr_field(feat[ogr_name], model_field)
create_account(self.USERNAME, self.USERNAME, self.EMAIL)
tsframe[:0].to_csv(path) recons = DataFrame.from_csv(path) exp = tsframe[:0] exp.index = []
return self(kind='kde', **kwds)
t2 = TfidfTransformer(norm='l1', use_idf=False) tf = t2.fit(counts_train).transform(counts_train).toarray() assert_equal(t2.idf_, None)
my_etcd_config: etcd.host: 127.0.0.1 etcd.port: 4001
self.assertEqual(my_doodad.num_calls, 0)
return { 'success': True, 'contents': prefix + hint_text, 'hint_index': hint_index }
import salt.ext.six as six
res = df.fillna(value={"cats": 3, "vals": "b"}) tm.assert_frame_equal(res, df_exp_fill)
from __future__ import unicode_literals
import salt.ext.six as six
import logging import json import salt.ext.six as six
xblock_info.update(_get_gating_info(course, xblock))
self.start = time.time() self.connected = True
model.fit(X, y) n_iter_cold_start = model.n_iter_ assert_equal(n_iter_cold_start, n_iter_reference)
return '<mstyle' in self.expr
import salt.utils
log = logging.getLogger(__file__)
self.check_children()
shifted_gaussian = np.random.randn(n_samples, 2) + np.array([20, 20])
assert len(key) <= 250 self.cache[key] = value
disallowed_aggregates = ()
handler.release() return instance
self.check_group('checkboxtextgroup', 'choice', 'checkbox')
try: import boto import boto.ec2 HAS_BOTO = True except ImportError: HAS_BOTO = False
self.assertFileNotFound('test/.hidden') self.assertFileNotFound('test/backup~') self.assertFileNotFound('test/CVS')
self.assertRaises(KeyError, lambda: df.loc['d'])
if rolename == FORUM_ROLE_ADMINISTRATOR and not has_instructor_access: return HttpResponseBadRequest("Operation requires instructor access.")
receiver = receiver() if receiver is not None: non_weak_receivers.append(receiver)
self._create_course_modes(course_modes) enrollment = data.create_course_enrollment( self.user.username, unicode(self.course.id), enrollment_mode, True )
if not settings.FEATURES.get('MILESTONES_APP', False): return False return bool( get_course_milestones_fulfillment_paths(course_id, {"id": user_id}) )
certs_enabled = CertificateGenerationConfiguration.current().enabled if certs_enabled and access['admin']: sections.append(_section_certificates(course))
from pandas.sparse.array import SparseArray from pandas.sparse.list import SparseList from pandas.sparse.series import SparseSeries, SparseTimeSeries from pandas.sparse.frame import SparseDataFrame from pandas.sparse.panel import SparsePanel
return self.delete_student_state_button.is_present()
if len(new_retains) < fake_retain[retainable]: new_retains.add(fake_file_list[0]) retained_files |= new_retains
import cherrypy import salt.ext.six as six from salt.ext.six.moves import StringIO
@property def buffered(self): return self.__buffered
RegistrationFactory(user=self.user)
cherrypy.session.release_lock()
self.assertIn("tamaño = models.IntegerField()", output)
X, y = util_shuffle(X, y, random_state=generator)
return self._df_raw - 1
acond = anorm * sqrt(ddnorm) res1 = phibar**2 res2 = res2 + psi**2 rnorm = sqrt(res1 + res2) arnorm = alfa * abs(tau)
self.verified_course_mode = CourseMode( course_id=self.verified_course_key, mode_slug=CourseMode.HONOR, mode_display_name="honor cert", min_price=self.cost ) self.verified_course_mode.save()
adapters = _parse_interfaces() adapters[iface] = data
self.wait_for( lambda: self._is_element_visible(".MathJax_SVG"), description="MathJax Preview is rendered" )
response = self.client.get('/render_template_multiple_times/') self.assertTemplateUsed(response, 'base.html', count=2)
self.install_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
from salt.exceptions import SaltInvocationError, CommandExecutionError
ext = self.splitext(guessed_filename)[1] content_type = info.get('content-type') if not ext and content_type: ext = mimetypes.guess_extension(content_type) if ext: guessed_filename += ext
self.run_cloud('-f remove_key {0} id={1}'.format(PROVIDER_NAME, finger_print)) raise
_save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=task_definition.Principal.UserID, password=password, logon_type=task_definition.Principal.LogonType)
ret['changes'] = {'new': '', 'old': name}
for label in np.unique(labels): assert_equal(len(np.unique(folds[labels == label])), 1)
FEATURES['ENABLE_CSMH_EXTENDED'] = True INSTALLED_APPS += ('coursewarehistoryextended',)
uname = _get_unicode_name(name) if not len(uname): raise ValueError("Empty table or column name specified")
return transformer.transform(X) * transformer_weights[name]
assert_raises(TypeError, csc_median_axis_0, sp.csr_matrix(X))
from salt.states import influxdb_database
val_course_data = self.get_cached_val_data_for_course(video_profile_names, self.location.course_key) val_video_data = val_course_data.get(self.edx_video_id, {})
x = index._mpl_repr()
vmhost = vm_['host'] newnode['vmid'] = newid
import multiprocessing import os
self.unit_page = None
compiler = 'SQLAggregateCompiler' def add_subquery(self, query, using): self.subquery, self.sub_params = query.get_compiler(using).as_sql( with_col_aliases=True, subquery=True, )
def __grant_normalize(grant): if grant == 'ALL': grant = 'ALL PRIVILEGES'
store = self._get_modulestore_for_courselike(course_key) return store.get_orphans(course_key, **kwargs)
ignore_cidr: 192.168.50.0/24
year_of_birth = self.year_of_birth year = datetime.now(UTC).year if year_of_birth is not None: return self._calculate_age(year, year_of_birth)
fields = list(queryset._fields) + [f for f in annotation_names if f not in queryset._fields]
obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')
add_module_names = False
return middleware.RequestCache.get_current_request()
world.wait(1) continue
if compat.PY3: self._file.write(to_write.encode(self._encoding or self._default_encoding)) else: self._file.write(to_write)
statuses = api.get_credit_requests_for_user(self.USER_INFO["username"]) self.assertEqual(statuses[0]["status"], expected_status)
nobs = self._nobs factors = (nobs - 1) / (nobs - self._df_raw) return 1 - (1 - self._r2_raw) * factors
if depth == 0: self.load_item.side_effect = lambda x: LeafModuleFactory(descriptor_cls=HtmlDescriptor) else: self.load_item.side_effect = lambda x: ContainerModuleFactory( descriptor_cls=VerticalBlock, depth=depth - 1 )
idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]
series = Series(tm.makeIntIndex(20).astype(float), index=tm.makeIntIndex(20))
expected = DataFrame([[False, False], [True, False], [False, False]]) result = df == b assert_frame_equal(result, expected)
self.wait_for( lambda: "added to this cohort" in self.get_cohort_confirmation_messages(wait_for_messages=True)[0], "Student(s) added confirmation message." )
testit(tm.makeCategoricalIndex, check_index_type=False, check_categorical=False)
CREDIT_PROVIDER_TIMESTAMP_EXPIRATION = 15 * 60
GEOIP_PATH = REPO_ROOT / "common/static/data/geoip/GeoIP.dat" GEOIPV6_PATH = REPO_ROOT / "common/static/data/geoip/GeoIPv6.dat"
from __future__ import absolute_import
__opts__['test'] = orig_test return ret
self.factory(penalty='foobar', l1_ratio=0.85)
if self.isalive() and _ACTIVE is not None: _ACTIVE.append(self)
super(CourseKeyVerificationTestCase, self).setUp() self.course = CourseFactory.create(org='edX', number='test_course_key', display_name='Test Course')
transformers = {}
expected_msg = u'Error: test error \u03a9' self.assertEqual(result['success'], expected_msg)
import salt.ext.six as six
FEATURES['ENABLE_TEAMS'] = True
from __future__ import absolute_import import logging
from __future__ import absolute_import import os
self.dashboard_page = DashboardPage(self.browser)
try: app_name = cls.name except AttributeError: raise ImproperlyConfigured( "'%s' must supply a name attribute." % entry)
self.assertIsNone(item.getElementsByTagName( 'guid')[0].attributes.get('isPermaLink'))
self.config.pop('log_datefmt_logfile', None)
score[i] += n_ranked_above / rank[label]
def __init__(self, name): self.name = name
return None
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
except ValueError: pass
for X, y in datasets: X = StandardScaler().fit_transform(X) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.4)
mock_uses_shib.return_value = True
v = s[g == 1].iloc[0] self.assertEqual(expected.iloc[0], v) self.assertEqual(expected2.iloc[0], v)
language_preference = get_user_preference(self.real_user, LANGUAGE_KEY) if not language_preference: language_preference = settings.LANGUAGE_CODE return language_preference
Answer = None Post = None Question = None
pass
result = f.clean('13:30') self.assertEqual(result, time(13, 30, 0))
if is_bool_dtype(result): return result attrs = self._get_attributes_dict() attrs = self._maybe_update_attributes(attrs) return Index(result, **attrs)
try: assert_is_none(world.browser.get_alert()) except NoAlertPresentException: pass
if err == 'usage:': break ret[csnap] = res['stderr']
from openedx.core.lib.block_structure.factory import BlockStructureFactory from xmodule.modulestore.tests.django_utils import ModuleStoreTestCase from xmodule.modulestore.tests.factories import SampleCourseFactory
assert_array_equal(X.A, v.transform(iter(D) if iterable else D).A)
UUIDUser.objects.create_user( email=self.user_email, username='foo', password='foo', ) return super(UUIDUserPasswordResetTest, self)._test_confirm_start()
self.wait_for_ajax() self.wait_for_element_absence(btn_selector, 'Wait for the XBlock to finish reloading')
import salt.utils
self.video.click_player_button('transcript_button')
return force_text(capi.get_ds_description(self._ptr))
url( r'^account/', include('student_account.urls') ),
#html_use_opensearch = ''
with self.assertRaises(OSError): self.storage.save('error/test.file', ContentFile('not saved'))
try: fh_ = salt.utils.atomicfile.atomic_open(path, 'w') for line in new_file: fh_.write(line) finally: fh_.close()
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
from __future__ import unicode_literals
middleware = ( 'auth_tests.test_remote_user.CustomHeaderMiddleware' ) header = 'HTTP_AUTHUSER'
user: MYLOGIN apikey: JVkbSJDGHSDKUKSDJfhsdklfjgsjdkflhjlsdfffhgdgjkenrtuinv driver: softlayer_hw
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
params = self._signed_callback_params(self.order.id, self.COST, self.COST, signature="invalid!") result = process_postpay_callback(params)
result = f.clean('13.30.05') self.assertEqual(result, time(13, 30, 5))
import salt.utils
self.update_structure(dest_course_key, new_structure)
pass
with translation.override('de'): output = self.engine.render_to_string('i18n09') self.assertEqual(output, 'Page not found')
'dark_lang.middleware.DarkLangMiddleware',
for idx, asset in enumerate(orig): self.assertEquals(assets[idx].asset_id.asset_type, asset[0]) self.assertEquals(assets[idx].asset_id.path, asset[1])
import nose from pandas import compat import pandas.formats.printing as printing import pandas.formats.format as fmt import pandas.util.testing as tm import pandas.core.config as cf
return getattr(settings, 'SOCIAL_AUTH_SAML_SP_PUBLIC_CERT', '')
import uuid SECRET_KEY = uuid.uuid4().hex
self.random_start = int(self.random_start)
self.axes[0] = self.items[~is_deleted] self.blocks = tuple(b for blkno, b in enumerate(self.blocks) if not is_blk_deleted[blkno]) self._shape = None self._rebuild_blknos_and_blklocs()
return None
req_factory_method = getattr(self.request_factory, method.lower()) request = req_factory_method('/dummy-url') request.user = self.user
exceptions = [] do_thread() self.assertIsInstance(exceptions[0], DatabaseError)
if os.path.isfile('dbm.pkl'): os.remove('dbm.pkl') control.pop_load_data()
neigh_ind = np.empty(n_samples, dtype='object') neigh_ind[:] = neigh_ind_list
import integration import salt.utils import salt.utils.find
reparse_data = _get_reparse_data(path)
course_organization = get_course_organizations(course_key) if course_organization: org_id = course_organization[0]['id']
result = jboss7.bindings_exist(name='bindings', jboss_config={}, bindings={'env': 'DEV2'})
current_year = datetime.datetime.now().year self.set_year_of_birth(current_year - 10) self.assertFalse(self.profile.requires_parental_consent())
rng = self.mlp.rng if self.irange is None: raise ValueError("Recurrent layer requires an irange value in " "order to initialize its weight matrices")
'master_sign_pubkey': bool,
self.row_uncovered[:] = True self.col_uncovered[:] = True
if not os.path.isdir(path): os.makedirs(path)
assert_not_in(attribute, seq.xml_attributes)
def compare(slobj): result = ts2[slobj].copy() result = result.sort_index() expected = ts[slobj] assert_series_equal(result, expected)
THRESHOLDED_METRICS_WITH_AVERAGING = [ "roc_auc_score", "average_precision_score", ]
X, y = _boston_subset()
self._check_params(n_samples)
self.assertIn('no-field', e.args[0])
return six.iteritems(self._actions)
return self.values
pass
results = self.func(self.start, self.stop, where) self.close() return results
assert_raises(ValueError, partial_dependence, GradientBoostingClassifier(), [0], X=X)
return not self.crosses_boundary()
return microsite.get_value(val_name, default=default, **kwargs)
testing.assert_array_equal(F.transform(X), np.around(X, decimals=1))
os.chdir(os.path.dirname(os.path.abspath(__file__)))
signal.signal(signal.SIGINT, self._handle_signals)
def test_invalid_sample_without_replacement_algorithm(): assert_raises(ValueError, sample_without_replacement, 5, 4, "unknown")
self.course_id = course_id self.load_error_modules = load_error_modules self.modulestore = xmlstore
if dtype is None and is_object_dtype(values): values = _possibly_infer_to_datetimelike(values)
context = {}
timestr = datetime.strftime(time, dateformat) return {'key': key, 'time': timestr}
return value and value[0].upper() + value[1:]
raise SaltCloudSystemExit( 'The request_instance action must be called with -a or --action.' )
def get_context_data(self, **kwargs): if 'view' not in kwargs: kwargs['view'] = self return kwargs
from __future__ import absolute_import import os
rng4 = date_range('7/1/2000', '7/31/2000', freq='D', tz=tz, name='idx') expected4 = DatetimeIndex([], tz=tz, name='idx')
import_course_from_xml(self.store, self.user.id, root_dir, create_if_not_present=True)
sub = salt.utils.cloud.simple_types_filter(cur) sub.update({'tag': name}) ret.append(sub)
@savefig test_hist.png width=4in In [151]: hist(np.random.randn(10000), 100);
assert self.n_unique_specs == 1
return {k: dic.get(k) for k in keys}
self.assertTrue(ax1._shared_x_axes.joined(ax1, ax2)) self.assertTrue(ax2._shared_x_axes.joined(ax1, ax2))
return no_edit_link
PennsylvaniaCity.objects.create(name='Mansfield', county='Tioga', point='POINT(-77.071445 41.823881)')
html_title = 'Vbench performance benchmarks for pandas'
length = int(self.headers.getheader('content-length')) data_string = self.rfile.read(length) post_dict = json.loads(data_string)
self.assertTrue( self._check_equality(source_usage_key, usage_key, parent_usage_key, check_asides=check_asides), "Duplicated item differs from original" )
y = column_or_1d(y, warn=True) _check_numpy_unicode_bug(y) self.classes_, y = np.unique(y, return_inverse=True) return y
user_id = context.get('user_id') course_title = context.get('course_title')
attempt = SoftwareSecurePhotoVerification.objects.get(user=self.user) self.assertEqual(attempt.status, "submitted")
continue
response_element = rendered_html.find("span") self.assertEqual(response_element.tag, "span")
self.assertOptimizesTo( [migrations.DeleteModel("Foo")], [migrations.DeleteModel("Foo")], exact=1, )
Z = Z.reshape(xx.shape) plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired)
self.assertIn('<div class="courses no-course-discovery"', response.content)
'ENABLE_MAX_FAILED_LOGIN_ATTEMPTS': False,
stdout, stderr, _ = single.cmd_block()
import json from functools import partial import factory from factory.django import DjangoModelFactory
last_request = httpretty.last_request() return json.loads(last_request.body)
import salt.config import salt.loader from salt.modules import boto_elasticsearch_domain
from __future__ import absolute_import
csrf_token = context.get('csrf_token') if csrf_token is not None: new_context['csrf_token'] = csrf_token return t.render(new_context)
loading_css = "#loading-indicator" courses_css = '.courses-listing' return self.q(css=courses_css).visible \ and self.q(css=loading_css).present \ and not self.q(css=loading_css).visible
empty_child_container = self._create_item(self.vertical.location, 'split_test', 'Split Test') self.validate_preview_html(empty_child_container, self.reorderable_child_view, can_add=False)
if isinstance(header, (list, tuple, np.ndarray)): have_mi_columns = True header = list(header) + [header[-1] + 1] else: have_mi_columns = False header = [header]
return any(role.has_permission(permission) for role in user.roles.filter(course_id=course_id))
self.course.discussion_topics = {} self.course.save() self.discussion_num = 0 self.instructor = InstructorFactory(course_key=self.course.id)
try: user.email_user( subject, message, theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL) )
store = HDFStore(path_or_buf, **kwargs) auto_close = True
garbage_prepend_json = '{0}{1}'.format(LORUM_IPSUM, test_sample_json) ret = utils.find_json(garbage_prepend_json) self.assertDictEqual(ret, expected_ret)
return self.form.errors.get(self.name, self.form.error_class())
REQUIRE_EXCLUDE = ("build.txt",)
CourseEnrollment.unenroll(self.user, course_id or self.course.id)
event_unmasked = copy.deepcopy(event_info) self.unmask_event(event_unmasked) self.runtime.publish(self, title, event_unmasked)
call_command( "migrate_to_split", str(self.course.id), str(self.user.id), )
available_apps = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'view_tests', ]
import salt.ext.six as six
return self.q(css=self._bounded_selector('.flag-role .value')).text[0]
__opts__ = {}
pass
metadata_translations = dict(RawDescriptor.metadata_translations) metadata_translations['attempts'] = 'max_attempts'
raise NotImplementedError('isnull is not defined for MultiIndex')
i2 = RangeIndex(0, 10) self.assertEqual(i.nbytes, i2.nbytes)
from .aws import * import os from django.core.exceptions import ImproperlyConfigured
from salt.states import ssh_auth
self.assertEqual(bookmark, bookmark2) self.assertEqual(bookmark.xblock_cache, bookmark2.xblock_cache) self.assert_bookmark_model_is_valid(bookmark2, bookmark_data)
if other is None: return return True
resource_value = resource_object['service_key'] if '@' in resource_value: resource_value = resource_value[0:resource_value.find('@')]
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
default_attrs = {'cols': '40', 'rows': '10'} if attrs: default_attrs.update(attrs) super(Textarea, self).__init__(default_attrs)
return "django_date_trunc('%s', %s)" % (lookup_type.lower(), field_name)
with Timer() as iteration_over_groups_time_1: courses_list, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
salt_log_setup.setup_multiprocessing_logging_listener( self.master_opts )
self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_REVERIFY)
ps_new_cache = self._create_service(username, {}) self.assertEqual( second_group.id, ps_new_cache.get_user_group_id_for_partition(user_partition_id) )
RequestCache.clear_request_cache()
return course_metadata_utils.course_start_date_is_default( self.start, self.advertised_start )
return _click_edit(self, '.edit-button', '.xblock-studio_view')
zpool.__salt__ = {}
self.run_collectstatic()
self.problem_type_lookup = {} for problem_type in self.problem_types: block = self.make_block("problem", self.library, data=self._get_capa_problem_type_xml(*problem_type)) self.problem_type_lookup[block.location] = problem_type
_CreateTransaction = ctypes.windll.ktmw32.CreateTransaction _CommitTransaction = ctypes.windll.ktmw32.CommitTransaction _MoveFileTransacted = ctypes.windll.kernel32.MoveFileTransactedW _CloseHandle = ctypes.windll.kernel32.CloseHandle CAN_RENAME_OPEN_FILE = True
elif value["version"] >= 2: if "scheme" not in value: raise TypeError("UserPartition dict {0} missing value key 'scheme'".format(value))
current_subs = data.get('current_subs') if current_subs is not None: for sub in current_subs: remove_subs_from_store(sub, item)
if self.estimators_ is None or len(self.estimators_) == 0: raise NotFittedError("Estimator not fitted, call `fit`" " before making predictions`.")
return u"{url}?auth_entry={auth_entry}&{param_str}".format( url=reverse("social:begin", kwargs={"backend": backend_name}), auth_entry=auth_entry, param_str=self._finish_auth_url_param(login_params), )
if user: self.q(css='input[id^=sd_fu_]').first.fill(user) self.q(css='section.staff-modal a.staff-debug-rescore').click()
import tornado.stack_context
ilo.__salt__ = {}
'html5_sources': ['http://www.example.com/source.mp4'], 'data': ''
formset = media_inline.get_formset(request) self.assertEqual(formset.max_num, DEFAULT_MAX_NUM) self.assertEqual(formset.can_order, False)
return
for key, val in six.iteritems(params): params[key] = str(val)
return False
user_preference = kwargs["instance"] user_preference._old_value = get_changed_fields_dict(user_preference, sender).get("value", None)
if not self.env_is_exposed(tgt_env): return None try: commit = self.repo.revparse_single(tgt_ref) except (KeyError, TypeError): pass else: return commit.tree return None
if not queryset._prefetch_related_lookups: queryset = queryset.iterator() for obj in queryset: yield self.choice(obj)
super(XBlockAcidBase, self).setUp()
mixed = Series(['hello', np.NaN], index=[0, 1]) self.assertEqual(mixed.dtype, np.object_) self.assertIs(mixed[1], np.NaN)
from __future__ import absolute_import, print_function import json import logging import time
response = self._load_dashboard() self.assertContains(response, "credit-error-msg")
return super(StudioValidation, self).empty and not self.summary
array = np.array(array, dtype=dtype, order=order, copy=copy)
pass
if isinstance(obj, gt.ABCSeries): from pandas import Series result = Series(result, index=obj.index, name=obj.name, copy=False)
return JsonError(status=404)
self.assertEqual(Item.objects.get(q1), item) self.assertEqual(Item.objects.get(q2), item)
if STATE_CONF: tmplctx = STATE_CONF.copy() if tmplctx: prefix = sls + '::'
@property def _constructor(self): return Rolling
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
self.assertFalse(self._in_atomic_block)
chaos_user = UserFactory() locked_toc = self._return_table_of_contents() for toc_section in self.expected_locked_toc: self.assertIn(toc_section, locked_toc)
train_sizes_abs = _translate_train_sizes(train_sizes, n_max_training_samples) n_unique_ticks = train_sizes_abs.shape[0] if verbose > 0: print("[learning_curve] Training set sizes: " + str(train_sizes_abs))
if getattr(self.distribution, 'salt_syspaths_hardcoded_path', None) is None: print('This command is not meant to be called on it\'s own') exit(1)
from django.db import models from django.utils.encoding import python_2_unicode_compatible
checks = [check for check in checks if not hasattr(check, 'tags') or Tags.database not in check.tags]
if dtypes is None: dtypes = 'infer'
if not _latest_version == _version: _refresh_db = True
import integration
attempts_left_open = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="0", due=self.tomorrow_str) self.assertFalse(attempts_left_open.answer_available())
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21')
result = sparse.loc[[1, 3, 4, 5]] exp = orig.loc[[1, 3, 4, 5]].to_sparse() tm.assert_sp_series_equal(result, exp)
self.assertEqual(res_json['message'], u'Please select certificate statuses from the list only.')
seed_milestone_relationship_types() course_milestones = milestones_api.get_course_milestones(course_key=course_key, relationship="fulfills")
args = [name, '--id', snap_name]
self.assertNotIn("wsgiref.util", sys.modules) wsgiref_util = LazyModule("wsgiref.util") self.assertEqual(wsgiref_util.guess_scheme({}), "http")
from __future__ import absolute_import
if Minv is not None: raise ValueError("Minv should not be specified when sigma is")
users_state_after_post = self._post_words(['word1', 'word2'])
header_callback('HTTP/1.0 {0} MESSAGE'.format(result.status_code)) streaming_callback(result.content) return { 'handle': result, }
self.assertContains(response, "Email is not enabled for this course.", status_code=403)
self.assertFalse(com.is_number(np.bool_(False))) self.assertTrue(com.is_number(np.timedelta64(1, 'D')))
if self.client.exists(self.create_path): self.is_acquired = True else: self.is_acquired = False
from __future__ import absolute_import
if op == 'shift': gb._set_selection_from_grouper()
minimum = 1 maximum = times for i in range(times): self.assertIn(generate_int_id(minimum, maximum), range(minimum, maximum + 1))
from salt.ext.six import string_types
reload_the_page(step)
class Title(models.Model): pass
from __future__ import absolute_import import logging import re import pprint import time
for missing in SUBMISSION_SET_KWARGS: kwargs = SUBMISSION_SET_KWARGS.copy() del kwargs[missing] submissions_score_set_handler(None, **kwargs) self.signal_mock.assert_not_called()
return [self._extract_axis(self, data, axis=i, **kwargs) for i, a in enumerate(axes)]
from __future__ import absolute_import
val1 = self.ts.asof(str(self.ts.index[7])) self.assertEqual(val1, self.ts[4])
grid_search = GridSearchCV(km, param_grid=dict(n_clusters=[2, 3, 4])) grid_search.fit(X) assert_equal(grid_search.best_params_["n_clusters"], 4)
kwargs_with_axis = kwargs.copy() if 'axis' not in kwargs_with_axis or \ kwargs_with_axis['axis'] is None: kwargs_with_axis['axis'] = self.axis
n_samples = int(X.shape[0]) rs = check_random_state(self.random_state)
import salt.ext.six as six
world.auto_capture_screenshots = False
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../../')
from salt.netapi.rest_tornado import saltnado from unit.netapi.rest_tornado.test_handlers import SaltnadoTestCase
from __future__ import absolute_import, print_function
self.client.logout() response = self.client.get(self.url) self.assertEqual(response.status_code, 302)
self.assertEqual(pivoted.index.name, 'index') self.assertEqual(pivoted.columns.name, 'columns')
return self.q(css='.team-edit-fields').present
num_examples = 40 theano_rng = MRG_RandomStreams(2012+11+1)
self.assertEqual(302, response.status_code) self.assertEqual('/login', response.get('Location'))
return struct.calcsize('P') * 8 == 32
if onlyrepo: os.remove(repofile) return 'File {0} containing repo {1} has been removed'.format( repofile, repo)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from pandas import Series return Series(self._data.get_dtype_counts())
if other.ndim <= self.ndim:
export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_export')
students_already_have_certs = User.objects.filter( ~Q(generatedcertificate__status=CertificateStatuses.unavailable), generatedcertificate__course_id=course_id)
if self.transcript_language == 'en':
'lms.djangoapps.verify_student',
with self.assertRaises(ImproperlyConfigured): engines.all() with self.assertRaises(ImproperlyConfigured): engines.all()
salt '*' vsphere.service_stop my.esxi.host root bad-password 'ssh'
for byte_range_string in byte_ranges_string.split(','): byte_range_string = byte_range_string.strip()
from __future__ import print_function import nose
use_distinct = use_distinct or lookup_needs_distinct(self.lookup_opts, field_path)
jid_dir, jid_file = self._make_tmp_jid_dirs()
project = u'pandas' copyright = u'2008-2011, the pandas development team'
return 0
self.publish(location.version_agnostic(), user_id, blacklist=EXCLUDE_ALL, **kwargs)
self._handle.create_table(self.group, **options)
return "{}/assertions".format(self._badge_url(slug))
return self.page.q(css=self.get_selector(css=selector))
return self.list_display
self._indexables = [GenericIndexCol(name='index', axis=0)]
allowed_params = ('page', 'page_size', 'text')
return ( MAX_COMMENT_DEPTH is not None and ( MAX_COMMENT_DEPTH < 0 or (parent and parent["depth"] >= MAX_COMMENT_DEPTH) ) )
clause, joins = query._add_q(self, reuse, allow_joins=allow_joins, split_subq=False) query.promote_joins(joins) return clause
pass
] DATETIME_INPUT_FORMATS = [
time_lapse = time.time() - self.start_time full_msg = "%s: %.2fs, %.1f min" % (msg, time_lapse, time_lapse / 60)
if __pub_jid and python_shell is None: return True elif __opts__.get('cmd_safe', True) is False and python_shell is None: return True
self.degree = degree self.lw = lw self.colour = colour Layer.__init__(self)
if salt.utils.is_windows(): fp_.close() try: os.unlink(fn_) continue except OSError: continue
from django.contrib.auth.views import redirect_to_login return redirect_to_login( request.get_full_path(), reverse('admin:login', current_app=self.name) )
#html_static_path = add_base(['_static'])
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
'EDITABLE_SHORT_DESCRIPTION': True,
df = DataFrame(np.random.randn(30, 4), columns=list('abcd'))
venv_dir = os.path.join( integration.TMP, 'pip-installed-specific-env' )
response = self.client.get(reverse('django-admindocs-tags')) self.assertContains(response, '<title>Template tags</title>', html=True)
self.assertTrue(np.isnan(s2[0])) self.assertTrue(np.isnan(s[0]))
result = df.reorder_levels([0, 1, 2]) assert_frame_equal(df, result)
__virtualname__ = 'service'
return False
def get_queryset(self, request): return super(CoverLetterAdmin, self).get_queryset(request).defer('date_written')
return V[:n_components, :].T, s[:n_components], U[:, :n_components].T
actual_response = json.loads(response.content) self.assertEqual(actual_response, TEST_PAYMENT_DATA)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key)) self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
import salt.utils import integration
self.assertIn( 'Invalid String Value for Enabled', self.run_function('system.set_remote_login', ['spongebob']))
self.series.ix[d1] = 4 self.series.ix[d2] = 6 self.assertEqual(self.series[d1], 4) self.assertEqual(self.series[d2], 6)
df2 = DataFrame({0: [np.nan, 2], 1: [np.nan, 3], 2: [np.nan, 4]}, dtype=object)
return view(request, course, ccx)
OLD_STYLE_RENDERERS = {}
item = self.store.get_item(item_location) html = item.visibility_view().body_html() for string in substrings: self.assertIn(string, html)
action_state.delete()
TAGS = {
__set_labels = deprecate("setting labels directly", partial(set_labels, inplace=True, verify_integrity=True), alt_name="set_labels") labels = property(fget=_get_labels, fset=__set_labels)
self.directive = None
available_apps = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'view_tests', ]
class_name = class_name.encode('utf-8')
new_user_partition = UserPartition(
from __future__ import unicode_literals
assert_true(X_scaled is not X)
prior = DiagonalGaussianPrior() vae = DummyVAE() prior.set_vae(vae) prior.initialize_parameters(nhid=5) prior.sample_from_p_z(10)
if queue: _wait(kwargs.get('__pub_jid')) else: conflict = running(concurrent) if conflict: __context__['retcode'] = 1 return conflict
import salt.exceptions import salt.utils
return Index(values, name=arg.name)
all_parents = [] published_parents = 0 for parent in parents: if parent['_id']['revision'] is None: published_parents += 1 all_parents.append(parent)
key = "another-key" value = "another-value" cache = caches[DEFAULT_CACHE_ALIAS] cache.set(key, value) cache_key = cache.make_key(key) self.assertIsNone(cache._expire_info[cache_key])
cmd.append(path)
self.assertTrue(api.is_user_eligible_for_credit("bob", self.course_key))
self.verify_end_date("edX/test_about_blob_end_date/2012_Fall", "Learning never ends")
params = [db_str % {'db_name': db['NAME']}]
import logging
if lookup_name is None: lookup_name = lookup.lookup_name del cls.class_lookups[lookup_name]
cert_type=server type_ext=True
return self._geomgen(capi.geom_convex_hull)
TEST_DATA_SPLIT_MODULESTORE = functools.partial( mixed_store_config, mkdtemp_clean(), {}, store_order=[StoreConstructors.split, StoreConstructors.draft] )
ret['result'] = __salt__['file.search'](name, unanchor_regex, multiline=True)
from __future__ import absolute_import import logging
for c in colors.ColorConverter.colors: result = plotting._get_standard_colors(num_colors=1, color=c) self.assertEqual(result, [c])
self.assertIn('Cannot Find Certificate', response.content)
pass
if (valid_repr.shape[1] > valid_repr.shape[0]): valid_repr = numpy.dot(valid_repr, valid_repr.T) test_repr = numpy.dot(test_repr, test_repr.T)
futures = [] for x in range(0, 3): future = tornado.concurrent.Future() future.add_done_callback(self.stop) futures.append(future)
task_key = hashlib.md5(task_key_stub).hexdigest()
xblock.group_access = value self.store.update_item(xblock, self.user.id)
ret = self.run_function( 'git.merge', [self.repo], rev=self.branches[1] ) self.assertTrue('Fast-forward' in ret.splitlines())
categories = self._validate_categories(categories) codes = _get_codes_for_values(values, categories)
logging.root.removeHandler(__MP_LOGGING_QUEUE_HANDLER) __MP_LOGGING_QUEUE_HANDLER = None __MP_LOGGING_CONFIGURED = False
target_shim_file = '.{0}'.format(binascii.hexlify(os.urandom(6))) self.shell.send(shim_tmp_file.name, target_shim_file)
try: response_data = api.baskets.post({ 'products': [{'sku': default_enrollment_mode.sku}], 'checkout': True, })
data_train = fetch_20newsgroups(data_home=data_home, subset='train', categories=None, shuffle=True, random_state=12, remove=remove)
m3 = Model3.objects.get(model2=1000) m3.model2
MEDIA_URL = ''
return np.mean( [estimator.log_marginal_likelihood( theta[n_dims * i:n_dims * (i + 1)]) for i, estimator in enumerate(estimators)])
'debug': False
L1_units = theano.tensor.abs_(model.encode(X)).sum(axis=1).mean()
df.ix[2:5, 'bar'] = np.array([2.33j, 1.23 + 0.1j, 2.2, 1.0])
Uhat, s, V = linalg.svd(B, full_matrices=False) del B U = np.dot(Q, Uhat)
for vdev in vdevs: if os.path.isfile(vdev): ret[vdev] = 'existed' else: dlist.append(vdev)
import logging log = logging.getLogger(__name__)
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
raise NotImplementedError(str(self.__class__) + " does not implement " "sample_from_p_z.")
knn_mo = neighbors.KNeighborsClassifier(weights=weights, algorithm=algorithm) knn_mo.fit(X_train, y_train) y_pred_mo = knn_mo.predict(X_test)
if self.n_components == 0: return np.diag(1. / self.noise_variance_) if self.n_components == n_features: return linalg.inv(self.get_covariance())
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../') import integration
TEST_COURSE = (COURSE_NAME, )
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
self.save() orderitems = OrderItem.objects.filter(order=self).select_subclasses() site_name = microsite.get_value('SITE_NAME', settings.SITE_NAME)
y = np.array(g(X) > 0, dtype=int)
rval = transform(raw_batch)
AUTH_ENTRY_LOGIN = 'login' AUTH_ENTRY_REGISTER = 'register' AUTH_ENTRY_ACCOUNT_SETTINGS = 'account_settings'
if enabled(name): stop(name, runas=runas) start(name, runas=runas)
past_due_date = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(past_due_date.answer_available())
return self._wrapped is not empty
#latex_appendices = []
ret = { 'data': None, 'dest': None, }
else: django.setup()
import os import stat import itertools
sparse_grouped = self.sparse.groupby('A') dense_grouped = self.dense.groupby('A')
attempt.mark_ready() assert_equals(attempt.status, "ready")
import salt.loader import salt.utils import salt.utils.minion from salt.ext.six.moves import map
self._update_staff_locks(True, False, False) self._verify_staff_lock_source(self.vertical, self.chapter)
how = {'right': 'left', 'left': 'right'}.get(how, how)
return True
CPLErrorHandler = CFUNCTYPE(None, c_int, c_int, c_char_p)
return c_cfg.get(attr_name, cfg(default_cfg_key))
try: import redis HAS_REDIS = True except ImportError: HAS_REDIS = False
CsrfViewMiddleware().process_view(req, token_view, (), {}) resp = token_view(req)
from __future__ import absolute_import import logging import os import re
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
if raw['data']['return'] == {}: continue
if not is_configured("python"): raise SkipTest
from __future__ import absolute_import
self.assert_index_equal(Index(['b', 'c', 'e', 'd']), result.insert(-1, 'e'))
time.sleep(5)
self.assertTrue(config.id)
from __future__ import absolute_import import logging
cmd = 'emerge-webrsync -q' if salt.utils.which('emerge-delta-webrsync'): cmd = 'emerge-delta-webrsync -q' return __salt__['cmd.retcode'](cmd, python_shell=False) == 0
self.needs_rollback, needs_rollback = False, self.needs_rollback try: self.cursor().execute('SET foreign_key_checks=1') finally: self.needs_rollback = needs_rollback
with tm.assertRaises(ValueError): o.sample(n=3.2)
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.add_milestone(milestone_data)
self.create_credentials_config() self.create_programs_config()
if child.location.category == 'problem': c_problem += 1 stack_data = []
rendered = "0+untagged.%%d.g%%s" %% (pieces["distance"], pieces["short"]) if pieces["dirty"]: rendered += ".dirty"
elif inferred_type == 'floating': dtype = 'int64' if issubclass(result.dtype.type, np.number):
return method(self.noc_info, other.noc_info)
if not _run_all(cmd, 'error', 'Error creating bcache partitions on {0}: {{0}}'.format(dev)): return False dev = '{0}2'.format(dev)
#html_file_suffix = ''
return self.connection._nodb_connection
override_field_for_ccx( ccx_course_object, master_course_object, 'max_student_enrollments_allowed', valid_input['max_students_allowed'] )
else: self.generic_visit(node)
assert_frame_equal(p.ix[:, :, 'C'], p.minor_xs('C'))
'monitoring',
dist_matrix[dist_matrix != 0] = 1
]
self.factory().fit(X, Y, coef_init=np.zeros((3,)))
return
for k, v in cleansed.items(): cleansed[k] = CLEANSED_SUBSTITUTE return cleansed
pass
c1 = Counter(name="two", value=2) with self.assertRaises(ValueError): with transaction.atomic(): c1.save(force_update=True) c1.save(force_insert=True)
if self.kind == 'timestamp': return super(PeriodIndexResampler, self)._downsample(how, **kwargs)
'ALLOW_COURSE_STAFF_GRADE_DOWNLOADS': False,
app = get_internal_wsgi_application() from .wsgi import application self.assertIs(app, application)
import salt.utils
response_properties = ["codeparam", "responseparam", "answer", "openendedparam"]
import os import copy import json import logging
self.course_info['number'] = "335535897951379478207964576572017930000"
instance = self.run_cloud('-p gce-test {0}'.format(self.INSTANCE_NAME)) ret_str = '{0}:'.format(self.INSTANCE_NAME)
self.assert_field_type(load_video_event, 'time', datetime.datetime) del load_video_event['time']
Y = np.concatenate(((1 - Y), Y), axis=1)
if gem_bin is None: if __salt__['rvm.is_installed'](runas=runas): return __salt__['rvm.do'](ruby, cmdline, runas=runas)
import integration
classes = np.unique(y)
self.child_module = self._get_module(course.id, child_descriptor, child_descriptor.location)
if six.PY3: py_integer_types = (int, np.integer) py_number_types = (int, float, complex, np.number) else:
for key, value in settings.items(): _format_cache[(key, lang)] = value try: yield finally: reset_format_cache()
res_val = df.loc["j", "cats"] self.assertEqual(res_val, exp_val)
import salt.utils.http
self.q(css='a.action-export').click()
]
result = a & Series([1], ['z']) expected = Series([False, False, False], list('bca')) assert_series_equal(result, expected)
shutil.rmtree(TMP_DIR)
pass
self.cohort_management_page.select_cohort_some_inline_discussion()
import salt.utils.cloud as suc
assert_almost_equal(np.abs(np.dot(d1[:2], [1, 0])), 1.0)
from __future__ import unicode_literals
if not take_split_path and self.obj._data.blocks: blk, = self.obj._data.blocks
return
return not isinstance(obj, six.string_types) and isinstance(obj, Sequence)
if hasattr(errors, 'error_dict'): error_dict = errors.error_dict else: error_dict = {NON_FIELD_ERRORS: errors}
from salttesting.helpers import ensure_in_syspath
self.assertEqual(len(w), 1)
__opts__.get( 'log_level', 'error' )
cmd = '/bin/pkg uninstall -v {0}'.format(pkg2rm) out = __salt__['cmd.run_all'](cmd, output_loglevel='trace')
code_prolog = CODE_PROLOG % random_seed
from __future__ import absolute_import, print_function import errno import logging import os import shutil import tempfile import time import re import traceback import functools
try: import dateutil.parser as dateutil_parser _WHEN_SUPPORTED = True _RANGE_SUPPORTED = True except ImportError: _WHEN_SUPPORTED = False _RANGE_SUPPORTED = False
name = _sdecode(name) if snap_name: snap_name = _sdecode(snap_name)
self.assertSaltTrueReturn(ret)
self.selenium.find_element_by_link_text('Add another Profile').click() self.selenium.find_element_by_link_text('Add another Profile').click()
print "Couldn't uninstall unwanted Python packages!" return
lars = Lars(fit_intercept=False, verbose=verbose, normalize=False, precompute=gram, n_nonzero_coefs=int(regularization), fit_path=False) lars.fit(dictionary.T, X.T, Xy=cov) new_code = lars.coef_
super(BaggingRegressor, self)._validate_estimator( default=DecisionTreeRegressor())
pushed = data.setdefault('Layers', {}).setdefault( 'Pushed', []) pushed.append(item['id'])
'dynamath': dynamath,
for op in ['skew', 'kurt', 'sem', 'prod']: self.assertRaises(TypeError, getattr(td, op))
return sum([self.counters[key] for key in self.messages if key.startswith(prefix)])
response = self.client.get('/reset/zzzzzzzzzzzzz/1-1/') self.assertContains(response, "Hello, .")
field_data[attr] = deserialize_field(cls.fields[attr], value)
rng = np.random.RandomState(0) x = rng.randint(10, size=(10, 5)) weights = np.ones(x.shape)
return DataFrame(self._t_stat_raw, columns=self.beta.columns, index=self._result_index)
if override_indexes is None: override_indexes = [ [rename_mapping.get(n, n) for n in index] for index in model._meta.index_together ]
self.assertEqual(json.loads(resp.content).get('status'), 'Transcripts are supported only for "video" modules.')
if '_when' not in data: data['_when'] = when
self.assertTrue(self.video.select_language('zh'))
merge(df, df2, how='outer')
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
return "<p>{raw_body}</p>".format(raw_body=raw_body)
if dE < tol * errors[-1]: if verbose == 1: print("") elif verbose: print("--- Convergence reached after %d iterations" % ii) break
return cls.__new__(cls, **d)
self.assertEquals(2, len(response_results)) self.assertEquals(True, response_max_exceeded)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'proxmox', vm_['profile'], vm_=vm_) is False: return False
with self.assertRaises(OGRIndexError): layer.__getitem__(-1) with self.assertRaises(OGRIndexError): layer.__getitem__(50000)
if 'children' in qualifiers: settings['children'] = qualifiers.pop('children')
from __future__ import absolute_import import yaml import re import tempfile import os
expected = DataFrame({'EXPIRY': [datetime(2005, 3, 1, 0, 0), None]})
return settings.STATIC_URL + relative_url
cmap = CorrectMap() for answer_id in answer_ids: cmap.update(CorrectMap(answer_id=answer_id, queuestate=None)) self.problem.correct_map.update(cmap)
session_status = request.session.setdefault("import_status", {}) courselike_string = unicode(courselike_key) + filename _save_request_status(request, courselike_string, 0)
self.assertContains(response, '<th scope="col"', count=5)
import time import logging
import logging
row, col = df.shape return row + df.columns.nlevels, col + df.index.nlevels
return format_html('{}: <a href="{}">{}</a>', capfirst(opts.verbose_name), admin_url, obj)
self.run_on_commit = []
a = DataFrame(randn(20, 2), index=[chr(x + 65) for x in range(20)]) a.ix[-1] = a.ix[-2]
labels = [x.reshape(n_shuffle, -1).ravel(order='F') for x in labels] names = self.names return MultiIndex(levels=levels, labels=labels, names=names)
if name[0] >= '0' and name[0] <= '9': name = '_' + name
pass
return self._tfidf.transform(X, copy=False)
res = df.loc[lambda x: ['A', 'C']] tm.assert_frame_equal(res, df.loc[['A', 'C']])
def _get_restype(self): return self.cfunc.restype
output = self.engine.render_to_string('i18n11', {'bool': True}) self.assertEqual(output, 'ja')
from __future__ import absolute_import import difflib import os import yaml
xpath = "//div[@class='block']/p/b" self.assert_has_text(xml, xpath, 'HTML')
comment, passed, retries = _download(quidditch, retries) if not passed: return (comment, str(passed))
if not self.q(css="input.no_special_exam").present: return False
import salt.utils.compat from salt.utils.odict import OrderedDict import yaml import salt.ext.six as six
url = BASE_URL + "/signup" def is_browser_on_page(self): return self.q(css='body.view-signup').present
check_estimators_unfitted("estimator", CorrectNotFittedErrorClassifier)
import integration
self.assertEqual(self.func(None), [base.W007])
self.client.login(username=self.user.username, password='test')
self.NOTE_ID_DOES_NOT_EXIST = 99999
return self._get_xblocks(".is-active ")
response = data['submission']
io_loop = io_loop or tornado.ioloop.IOLoop.current() if io_loop not in AsyncAuth.instance_map: AsyncAuth.instance_map[io_loop] = weakref.WeakValueDictionary() loop_instance_map = AsyncAuth.instance_map[io_loop]
return self._data.dtype
class CourseModeFactory(DjangoModelFactory): class Meta(object): model = CourseMode
if attrs: self.params.update(attrs) self.params['editable'] = self.params['modifiable'] else: self.params['editable'] = True
icrv_location = self.icrv.location self.store.delete_item( self.icrv.location, ModuleStoreEnum.UserID.test, revision=ModuleStoreEnum.RevisionOption.published_only ) self._update_partitions()
from salt.exceptions import SaltInvocationError, CommandExecutionError
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
return data[:index], data[index:]
return T.switch(x < 0., 0., x)
with self.assertRaises(ImportError): get_storage_class('django.core.files.storage.NonExistingStorage')
self.check_permissions(clone_request(self.request, 'POST'))
if dtypes is None: return self
sqrt_alpha = np.sqrt(alpha)
from salt.utils.filebuffer import BufferedReader, InvalidFileMode
fire('{0}/{1}'.format(tag, _m['type']), _m)
from docutils.parsers.rst import directives from docutils import nodes
)
with translation.override('pl'): result = management.call_command('leave_locale_alone_false', stdout=StringIO()) self.assertIsNone(result)
from __future__ import unicode_literals
return ( "Staff" if user_id in self.context["staff_user_ids"] else "Community TA" if user_id in self.context["ta_user_ids"] else None )
cmd = '{0} {1}'.format(cmd, properties)
import salt.utils from salt.ext.six import string_types from salt.exceptions import SaltInvocationError, CommandExecutionError import salt.ext.six as six
self.check_emails_sent(1, task_history_request, True)
mlp.fit(X, y)
X_sliced = X_sparse[np.arange(X_sparse.shape[0])] y_sliced = y_sparse[np.arange(y_sparse.shape[0])]
RequestContext(HttpRequest()).new().new()
gid_from_name = False if grains['os_family'] == 'MacOS' else True
fancy = False
self.instance = opts.model() object_data = {}
self.assertTrue(allowance_section.is_allowance_record_visible)
providers = OAuth2ProviderConfig.objects.all() pcount = len(providers)
introspect.__salt__ = {}
location = Location("HarvardX", "ER22x", "2013_Spring", "conditional", "condone")
last_ind = tps.searchsorted(tps[-1]) sl = slice(last_ind, None, -1) return np.r_[precision[sl], 1], np.r_[recall[sl], 0], thresholds[sl]
key = self.lti_consumer.consumer_key self.assertTrue(SignatureValidator(self.lti_consumer).check_client_key(key))
sparse = self.dense1.to_sparse() sparse2 = self.dense2.to_sparse(fill_value=0)
result = jboss7.bindings_exist(name='bindings', jboss_config={}, bindings={'env': 'DEV'}, profile=None)
tm._skip_if_no_pytz() from pytz import timezone as timezone
from __future__ import absolute_import
__virtualname__ = 'reclass'
result = self.df.loc[['c', 'a']] expected = self.df.iloc[[4, 0, 1, 5]] assert_frame_equal(result, expected, check_index_type=True)
vect = CountVectorizer(analyzer='char', max_df=1.0, binary=True, dtype=np.float32) X_sparse = vect.fit_transform(test_data) assert_equal(X_sparse.dtype, np.float32)
if len(self.credit_type) > 1: raise LoncapaProblemError('Only one type of partial credit is allowed for Checkbox problems.')
self.store.revert_to_published(vertical.location, self.user_id) self.assertFalse(self._has_changes(vertical.location))
import salt.utils.args from salt.utils.odict import OrderedDict
query = Query(self.model) query.add_filter(filter_expr) query.clear_ordering(True) trimmed_prefix, contains_louter = query.trim_start(names_with_path)
url_path = ""
try: self.get_loc(key) return True except LookupError: return False
source_blocks.extend(self._problem_type_filter(library, dest_block.capa_type))
fast_model.fit(X_train, y_train, sample_weight=weights)
ret['comment'] += '\n\nChanges made: ' + comments
password = generate_unique_password(generated_passwords) errors = create_and_enroll_user( email, username, name, country, password, course_id, course_mode, request.user, email_params ) row_errors.extend(errors)
response_element = etree.Element("javascriptresponse")
assert_true(modulestore.has_course(locator, ignore_case))
MODULESTORE = convert_module_store_setting_if_needed(MODULESTORE)
return self.q(css='.page-content-secondary .team-language :last-child').text[0]
if self.protocol is not None: protocol = self.protocol if protocol is None: protocol = 'http'
if not name: return 'Required parameter "name" not passed'
response = self.client.get(reverse("support:certificates")) self.assertContains(response, "userFilter: ''")
return name + '_valid'
return not self.q(css=self._bounded_selector('.wrapper-xblock article')).present
date = master_date.strftime('%Y-%m-%d %H:%M')
dataset = obj
return self._data.codes == -1
if subcommand in no_settings_commands: settings.configure()
if not is_platform_little_endian(): raise nose.SkipTest("known failure of test on non-little endian")
try: import paramiko HAS_PARAMIKO = True except ImportError: HAS_PARAMIKO = False
clf_quantile = GradientBoostingRegressor(n_estimators=100, loss='quantile', max_depth=4, alpha=0.5, random_state=7)
default_timezone = timezone.get_default_timezone() value = timezone.make_naive(value, default_timezone)
if username is None: username = requesting_user.username try: existing_user = User.objects.get(username=username) except ObjectDoesNotExist: raise UserNotFound() _check_authorized(requesting_user, username, allow_staff) return existing_user
db=None, collection=None, host=None, port=None, tz_aware=True, user=None, password=None, ** kwargs
module = ''
pass
fragment.add_javascript_url(self.runtime.local_resource_url(self, 'public/js/library_content_edit.js')) fragment.initialize_js('LibraryContentAuthorView') return fragment
fields = dict(self.CREDENTIALS_DEFAULTS, **kwargs) CredentialsApiConfig(**fields).save() return CredentialsApiConfig.current()
('gis_tests', os.path.join(RUNTESTS_DIR, 'gis_tests')),
self.assertAlmostEqual(ax_min, min_edge - 0.25) self.assertAlmostEqual(ax_max, max_edge + 0.25)
from salt.states import group
with ensure_clean_path(self.path) as path:
class ThreadLocalIO(threading.local): wkt_r = None wkt_w = None wkb_r = None wkb_w = None ewkb_w = None
#~ asList = False
from __future__ import unicode_literals
ret = self.run_run_plus(fun='fileserver.file_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
if not self.q(css="input.timed_exam").present: return False
boston = load_boston() X, y = boston['data'], boston['target']
self.assertTrue(is_categorical_dtype(s.dtype)) self.assertTrue(is_categorical_dtype(s)) self.assertFalse(is_categorical_dtype(np.dtype('float64')))
CourseEnrollment.enroll(self.honor_user, self.course_key, "honor")
version_guid = course_key.as_object_id(version_guid) return self.db_connection.get_structure(version_guid, course_key)
self.assertEqual(self.func(None), [csrf.W003])
assert_series_equal(s[l_slc], s.iloc[i_slc]) assert_series_equal(s.ix[l_slc], s.iloc[i_slc])
from salt.modules import redismod from datetime import datetime
env = os.environ del env['PYTHONPATH']
exact_dists, exact_idx = nnbrs.radius_neighbors(query, radius=1) approx_dists, approx_idx = lsfh.radius_neighbors(query, radius=1)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
'state_auto_order': bool,
problem = self.build_problem(rectangle="(10,10)-(20,20)")
if world.is_css_present('div#login_error'): assert_false(world.css_visible('div#login_error'))
df = self.process_axes(df, columns=columns)
validator = kwarg validation_arg = ()
nona = self.series.dropna() assert_almost_equal(f(nona), alternate(nona.values)) assert_almost_equal(f(self.series), alternate(nona.values))
if not summary: summary.append(line) continue
with self.assertRaises(connection.features.closed_cursor_error_class): cursor.execute("SELECT 1" + connection.features.bare_select_suffix)
self.usecols = _validate_usecols_arg(self._reader.usecols)
required_boto3_version = '1.2.1'
timeout = -1
return txt.replace('\\', '\\\\').replace(':', '\\:')
self.q(css=self._bounded_selector(self.ADD_BUTTON_SELECTOR)).click()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
expected['float_miss'] = expected['float_miss'].astype(np.float32)
for i, k in enumerate(tup):
set_option("display.float_format", EngFormatter(accuracy, use_eng_prefix)) set_option("display.column_space", max(12, accuracy + 9))
check_is_fitted(self, ["classes_", "n_classes_"]) X = check_array(X) return self.base_estimator_.predict(X)
updates[mean_square_grad] = new_mean_squared_grad updates[mean_square_dx] = new_mean_square_dx updates[param] = param + delta_x_t
result = starmap(get_result_simple, zip(F, df_resid))
if connection.commit_on_success_block_level == 0: if connection.features.autocommits_when_autocommit_is_off: connection.autocommit = True else: connection.set_autocommit(True)
self.verify_lists_expected_cohorts([])
with check_mongo_calls(4, 2):
return self._require_oauth_field("access_token")
details = api.get_course_enrollment_details(self.COURSE_ID)
self.signal_handler.send("course_published", course_key=course_key.for_branch(None))
assert_equal(lfw_people.images.shape, (10, 62, 47)) assert_equal(lfw_people.data.shape, (10, 2914))
for key in ret: ret[key] = sorted(ret[key]) if save_cache: salt.fileserver.write_file_list_cache( __opts__, ret, list_cache, w_lock ) return ret.get(form, [])
'BOOTSTRAP_SCRIPT_VERSION', 'v2014.06.21'
self.low_mark, self.high_mark = 0, None
urlpatterns += url(r'^template/(?P<template>.+)$', 'openedx.core.djangoapps.debug.views.show_reference_template'),
self.assertEquals( preview.latex_preview('2*3/4/5'), r'\frac{2\cdot 3}{4\cdot 5}' )
labels = algos.take_nd(reverse_indexer, labels, allow_fill=False) np.putmask(labels, mask, -1)
salt '*' vsphere.vmotion_disable my.esxi.host root bad-password
if branch == ModuleStoreEnum.BranchName.published: revision = ModuleStoreEnum.RevisionOption.published_only store.delete_item(itemloc, user_id, revision=revision)
shallow_copy.names = [name + "c" for name in shallow_copy.names] self.check_level_names(self.index, new_names)
uid_patch = patch('onelogin.saml2.utils.OneLogin_Saml2_Utils.generate_unique_id', return_value='TESTID') uid_patch.start() self.addCleanup(uid_patch.stop)
show_min_grade_warning = False if course_module.minimum_grade_credit > 0 else True settings_context.update( { 'is_credit_course': True, 'credit_requirements': paired_requirements, 'show_min_grade_warning': show_min_grade_warning, } )
meta = {} if user_info.profile.meta: meta = json.loads(user_info.profile.meta)
type_in_codemirror(self, 0, content)
gd = grid_dimension[0] grid_indices[gd] = add_mod(grid_indices[gd], step, len(grid_to_short_label[gd]))
self.assertFalse(version)
for memmap in (self.X, self.y): memmap.flush() memmap.setflags(write=False)
return np.object_
grid_search_no_score = GridSearchCV(clf_no_score, {'C': Cs}) assert_raise_message(TypeError, "no scoring", grid_search_no_score.fit, [[1]])
rng = np.random.RandomState(0) n_topics, X = _build_sparse_mtx() lda = LatentDirichletAllocation(n_topics=n_topics, evaluate_every=1, learning_method='batch', random_state=rng) lda.fit(X)
django_settings.SOCIAL_AUTH_RAISE_EXCEPTIONS = False
assertRaisesRegexp(IndexError, '^Too many levels', self.index.reorder_levels, [2, 1, 0])
self.assertEqual(Permission.objects.filter( content_type=permission_content_type, ).count(), 4)
return tensor.dot(inputs[1], self.wyf)
k_dims = self.k1.n_dims for i, kernel in enumerate(self.kernels): kernel.theta = theta[i * k_dims:(i + 1) * k_dims]
try: return x.isin(y) except AttributeError: if com.is_list_like(x): try: return y.isin(x) except AttributeError: pass return x in y
return self._base * min(1, self._anneal_start / self._count)
self.assertIsNone(df._repr_latex_())
VS = VectorSpace(dim=27) VS_sparse = VectorSpace(dim=27, sparse=True)
else: ret = _load_result(existing, ret)
return self.q(css=self.type_filter_element).present
latex_documents = [('index', 'user_guide.tex', u('scikit-learn user guide'), u('scikit-learn developers'), 'manual'), ]
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.user.username) self.assertEqual(request['parameters']['user_mailing_address'], '')
return is_active and enrollment_mode in CourseMode.UPSELL_TO_VERIFIED_MODES
data = [[['foo', 'bar', 'baz']]] self.assertRaises(ValueError, Panel, data, dtype=float)
d = datetime(2013, 12, 31) result = Timestamp(d).week
k = centers.shape[0] squared_diff = 0.0 for center_idx in range(k): center_mask = nearest_center == center_idx count = center_mask.sum()
if self.display_coursenumber: return self.display_coursenumber return self.number
result = concat([df, df2, df3], axis=1, copy=True) for b in result._data.blocks: self.assertIsNone(b.values.base)
df = DataFrame(index=[0, 1]) df[0] = nan wasCol = {}
assert_equal(l[train].size + l[test].size, l.size)
drag_handle_html = '<span data-tooltip="Drag to reorder" class="drag-handle action"></span>' self.assertIn(drag_handle_html, html)
ndar = ndar.copy() ndar -= ndar.min() ndar *= 1.0 / (ndar.max() + eps) return ndar
full_url = "http://{site_name}".format(site_name=settings.SITE_NAME) parsed_url = urlparse(full_url)
OUTPUT_FIELD_NAMES = [ "email", "full_name", "course_id", "is_opted_in_for_email", "preference_set_datetime" ]
from __future__ import absolute_import import os import re import time import logging
ORA2_FILE_PREFIX = None
if settings.configured: settings.USE_I18N = True else: settings.configure(USE_I18N=True)
self.drop_table('test_frame1')
XQUEUE_INTERFACE['url'] = 'http://localhost:8040'
if placement is None: placement = self.mgr_locs if ndim is None: ndim = self.ndim return make_block(values, placement=placement, ndim=ndim, **kwargs)
result = list(df.grade.values) expected = np.array(df.grade.values).tolist() tm.assert_almost_equal(result, expected)
_list = self.run_function('beacons.list', return_yaml=False) self.assertIn('ps', _list)
d = self.tsframe.index[10] indexer = self.tsframe.index > d indexer_obj = indexer.astype(object)
return
exceptions = set()
('INNERGRID', (1, 1), (-2, -1), 0.50, '#cccccc'),
self.click_button('create_video', require_notification=True) self.wait_for_video_component_render()
required_boto3_version = '1.2.1'
import salt.utils
MINIMAL_MACHINE_ATTRIBUTES = [ "id", "image", "size", "state", "private_ips", "public_ips", ]
self.check_val('0', False)
Form = modelform_factory(Person, fields="__all__") self.assertNotEqual(Form.base_fields['name'].widget.__class__, forms.Textarea)
from salt.exceptions import SaltInvocationError import salt.utils.http
from __future__ import absolute_import import logging
if len(block) > 1: dtype = _interleaved_dtype(block) block = [b.astype(dtype) for b in block] block = _consolidate(block)
dataset_sources="sources.lst" dataset_web="http://www.stevenpigeon.org/secret" dataset_conf_path="" dataset_data_path="" root_conf_path=None root_data_path=None user_conf_path=None user_data_path=None super_powers=False
import salt.utils from salt.exceptions import SaltCloudSystemExit
if existing_col is not None: eci = existing_col.validate_col(itemsize) if eci > itemsize: itemsize = eci
CourseEnrollment.enroll(self.user, self.course_key, 'verified') ret_val = CourseEnrollment.unenroll(self.user, self.course_key) self.assertFalse(ret_val)
return [True]
return numpy.array(img.getdata()) / 255.
FormSet = inlineformset_factory(AutoPKParent, UUIDPKChildOfAutoPKParent, fields='__all__') formset = FormSet() self.assertIsNone(formset.forms[0].fields['parent'].initial)
data = 'a b c\n4 apple bat 5.7\n8 orange cow 10'
try: from Cheetah.Template import Template HAS_LIBS = True except ImportError: HAS_LIBS = False
self.youtube_configuration['time_to_response'] = 0.4 self.metadata = self.metadata_for_mode('youtube_html5')
for app in app_list: app['models'].sort(key=lambda x: x['name'])
css_include = compressed_css('style-main-v1', raw=True) self.assertIn(u'lms-main-v1.css?raw', css_include)
if block_type == 'course': block_id = self.DEFAULT_ROOT_COURSE_BLOCK_ID elif block_type == 'library': block_id = self.DEFAULT_ROOT_LIBRARY_BLOCK_ID new_usage_key = course_key.make_usage_key(block_type, block_id)
return self.backend_name == social_auth.provider
self.minions = []
from django.conf import settings
self.mixed_frame.std(1) self.mixed_frame.var(1) self.mixed_frame.mean(1) self.mixed_frame.skew(1)
offset = CBMonthEnd() offset2 = CBMonthEnd() offset2.normalize = True self.assertEqual(offset, offset2)
credentials = storage.get() if credentials is None or credentials.invalid: credentials = tools.run(flow, storage)
return v
from xmodule.modulestore.mongo.draft import DraftModuleStore
use_cache = credential_configuration.is_cache_enabled and not user.is_staff cache_key = credential_configuration.CACHE_KEY + '.' + user.username if use_cache else None
self.video.wait_for_position('0:05') self.video.click_player_button('do_not_show_again')
from salt.states import win_path
self.s_rng = make_theano_rng(seed, which_method="uniform")
from __future__ import absolute_import import logging import os import shutil import tempfile from contextlib import contextmanager
continue
self.len_indices_pos[curr_len] += curr_batch_size self.len_curr_counts[curr_len] -= curr_batch_size self.total_curr_counts -= curr_batch_size return curr_indices
from salt.modules import mac_sysctl from salt.exceptions import CommandExecutionError
wrapped_func = wrapped_func.__func__
rendered = "0.post.dev%d" % pieces["distance"]
return self._groupby(self.values, _values_from_object(to_groupby))
pass
spaces = map(lambda c: get_space(c[0]), self.costs)
self.save_course() self.url_nonexist = self.get_details_url("1=20")
OAUTH2_PROVIDER_APPLICATION_MODEL = 'oauth2_provider.Application'
return user
Model = self._get_model_from_node(node, "model")
time_left = max_time - time.time() vb_wait_for_session_state(session, timeout=time_left) log.info("Started machine %s", name)
from salt.modules import debian_service
X = np.array([[1, 2, 0], [0, 0, 0]], dtype=np.uint8)
P /= self.early_exaggeration opt_args['n_iter'] = self.n_iter opt_args['it'] = it + 1 params, error, it = _gradient_descent(obj_func, params, **opt_args)
scsi_spec.device.sharedBus = vim.vm.device.VirtualSCSIController.Sharing.noSharing
assert_class_equal(left, right, obj=obj) assertIsInstance(left, np.ndarray, '[ndarray] ') assertIsInstance(right, np.ndarray, '[ndarray] ')
form_desc.override_field_properties( "password", default="", field_type="hidden", required=False, label="", instructions="", restrictions={} )
w = clf.coef_[0] a = -w[0] / w[1] xx = np.linspace(-5, 5) yy = a * xx - (clf.intercept_[0]) / w[1]
self.create_programs_config(enabled=False) actual = utils.get_programs(self.user) self.assertEqual(actual, [])
profile_privacy = UserPreference.get_value(user, ACCOUNT_VISIBILITY_PREF_KEY) return profile_privacy if profile_privacy else configuration.get('default_visibility')
assert_sp_frame_equal(frame, right[item], exact_indices=exact_indices)
self.assert_grade(problem, answer, "correct") self.assert_grade(problem, answer.lower(), "correct")
with tm.assertRaises(ValueError): bad_weights = [-0.1] * 10 o.sample(n=3, weights=bad_weights)
mock_no_data = MagicMock(return_value='') with patch.object(parallels, 'prlctl', mock_no_data): self.assertRaises(SaltInvocationError, parallels.snapshot_id_to_name, name, snap_id)
for o in self._objs:
return filename
if not isinstance(choices[0], (list, tuple)): choices = [choices]
sh("pip uninstall --disable-pip-version-check -y {}".format(package_name)) uninstalled = True
return 'shoppingcart/receipt.html'
self.assertFalse(self._has_changes(published_xblock.location))
return CourseUserGroup.objects.filter(course_id=course_key, group_type=CourseUserGroup.COHORT, name=name).exists()
order_by.append(( OrderBy(self.query.annotations[col], descending=descending), False)) continue
X = iris.data d = X.shape[1]
serialized_course_team['pk'] = self.course_team.pk serialized_course_team.pop('membership', None)
overview = CourseOverview.get_from_id(course.id)
self.create_programs_config() self.mock_programs_api(data={'results': []})
return ', '.join([', '.join(IMAGE_TYPES[ft].extensions) for ft in IMAGE_TYPES.keys()])
import salt.netapi import salt.utils import salt.utils.event from salt.utils.event import tagify import salt.client import salt.runner import salt.auth from salt.exceptions import EauthAuthenticationError
ContentType.objects.clear_cache()
residual_threshold = np.median(np.abs(y - np.median(y)))
self.assertEqual(self.series[self.series.idxmax()], self.series.max()) self.assertTrue(isnull(self.series.idxmax(skipna=False)))
table = handler.table new_self = self.copy() new_self.set_table(table) new_self.get_attr() new_self.read_metadata(handler) return new_self
df = DataFrame(dict(time=[Timestamp('20130101 9:01'), Timestamp('20130101 9:02')], value=[1.0, 2.0]))
folds = np.zeros(n_samples) for i, (_, test) in enumerate(lkf.split(X, y, labels)): folds[test] = i
log = logging.getLogger(__name__)
output = tensor.dot(patch_stack, kerns.flatten(2).T).reshape((B, OR, OC, K))
except Exception: log.critical('Unexpected error while polling minion events', exc_info=True) return None
X_trans = pipeline.fit_transform(X, y) X_trans2 = transft.fit(X, y).transform(X) assert_array_almost_equal(X_trans, X_trans2)
rendered = "0.post%d" % pieces["distance"] if pieces["dirty"]: rendered += ".dev0"
self.assertFalse(hasattr(s3_copy.selfref, 'touched')) self.assertEqual(s3_copy.selfref, s2)
answers = ["Second", "Third", "Fourth"] problem = self.build_problem(answer="sample_answer", case_sensitive=False, additional_answers=answers)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from __future__ import absolute_import
multi_db = True
role_class(*args) role_class(*args)
pass
try: import wmi import salt.utils.winapi except ImportError: pass
class GDALException(Exception): pass
result = ts_local.resample('D').mean()
from salt.states import apache_module
start, end = get_current(date), get_next(date)
c.value = 4 with self.assertRaises(ValueError): c.save(force_insert=True, force_update=True)
import logging import os
old_mixed_setting = self.ALREADY_UPDATED_MIXED_CONFIG new_mixed_setting, new_default_store_setting = self.assertMigrated(old_mixed_setting) self.assertTrue(self.is_split_configured(new_mixed_setting)) self.assertEquals(old_mixed_setting, new_mixed_setting)
return User.objects.filter( courseenrollment__course_id=course_id, courseenrollment__is_active=True )
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'
tabs = [] expected_tabs = [u'LTI | Test Section | {0} Courseware | edX'.format(TEST_COURSE_NAME), u'TEST TITLE']
import json try: import syslog HAS_SYSLOG = True except ImportError: HAS_SYSLOG = False
import salt.utils import salt.utils.decorators as decorators
selector = '{} .acid-parent-block {} .pass'.format(self.context_selector, test_selector) return bool(self.q(css=selector).execute(try_interval=0.1, timeout=3))
NOTIFICATION_EMAIL_CSS = "templates/credit_notifications/credit_notification.css" NOTIFICATION_EMAIL_EDX_LOGO = "templates/credit_notifications/edx-logo-header.png"
self.n_classes = 1
si = _get_si()
from distutils.core import Command
'sock_dir': str,
if library_key_string: return _display_library(library_key_string, request)
query = "SELECT * FROM raw_query_reviewer" reviewers = Reviewer.objects.all() self.assertSuccessfulRawQuery(Reviewer, query, reviewers)
raise SaltCloudConfigError( 'Either an instance (or list of names) or a provider must be ' 'specified, but not both.' )
response = requests.post(self.url, data={"test_param": 2}) self.assertEqual(response.status_code, 200)
ts[datetime(2000, 1, 6)] = 0 self.assertEqual(ts[datetime(2000, 1, 6)], 0)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
obj_au_settings = obj_au.Settings
return None
if not has_studio_write_access(request.user, source_course_key): raise PermissionDenied()
test_model = CourseMetadata.fetch(self.fullcourse) self.assertIn('edxnotes', test_model)
if ((not com.is_categorical_dtype(result)) and isinstance(result, np.ndarray)): result = _block_shape(result, ndim=self.ndim)
from __future__ import absolute_import import logging
h = {'Host': '127.0.0.1'}
potential_clashes = (r for r in rel_opts.related_objects if r.field is not self) for clash_field in potential_clashes:
from __future__ import absolute_import import tempfile
user = kwargs['instance'] user._changed_fields = get_changed_fields_dict(user, sender)
res = df.iloc[[1, 3], lambda x: 0] tm.assert_series_equal(res, df.iloc[[1, 3], 0])
if ( tag == 'msubsup' and len(k) == 3 and gettag(k[2]) == 'mrow' and
fh_ = os.open(lock_fn, open_flags)
M = np.zeros((N, N), dtype=np.float64) for i in range(N): s_i = s_range[i]
old_tab = CourseTabList.get_tab_by_type(self.course.tabs, tab_type)
if Y is not None: H_hat[-1] = Y
import logging import os import plistlib import re
import salt.utils import salt.exceptions
store.save_asset_metadata_list(md_list, ModuleStoreEnum.UserID.test)
try: temp_file = _mkstemp_copy(path=path, preserve_inode=preserve_inode) except (OSError, IOError) as exc: raise CommandExecutionError("Exception: {0}".format(exc))
CourseEnrollment.enroll(self.user, self.course.id, mode="honor")
if cache in self.cache_options: self._cache = cache else: raise GeoIPException('Invalid GeoIP caching option: %s' % cache)
authentication_classes = []
context_fields_to_remove = set(CONTEXT_FIELDS_TO_INCLUDE) context_fields_to_remove.add('client_id') for field in context_fields_to_remove: if field in context: del context[field]
if not cached_pkg: log.error('Unable to cache {0}'.format(installer)) ret[pkg_name] = {'unable to cache': installer} continue
cond = (df > 0)[1:] _check_align(df, cond, _safe_add(df))
log = salt.log.setup.logging.getLogger(__name__)
_, suff_stats = self._e_step(X, cal_sstats=True, random_init=True, parallel=parallel)
refdf = pd.DataFrame([[1, 'foo'], [2, 'bar'], [3, 'baz']], columns=['a', 'b'])
for o in objs: if o not in self._objs: continue
import salt.ext.six as six
return ''
new_items = [] for item in dummies.columns: if not mapping: var = str(item) if isinstance(item, float): var = '%g' % item
has_score = False
return force_text(formats.localize(value, use_l10n=True))
tm._skip_if_no_pytz() import pytz
sys.exit(1)
set_use_numexpr(True)
language_url = request.get_full_path(force_append_slash=path_needs_slash).replace( script_prefix, '%s%s/' % (script_prefix, language), 1 ) return self.response_redirect_class(language_url)
match = re.search(r'(.*?/common)(?:$|/)', path(__file__)) COMMON_ROOT = match.group(1)
if d_estate in self.road_stack.value.nameRemotes: self.road_stack.value.message(msg, self.road_stack.value.nameRemotes[d_estate].uid) return
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 5)
self.colors = [np.asarray([1, 1, 0]), np.asarray([1, 0, 1]), np.asarray([0, 1, 0])]
self.set_config(True) CourseOverviewImageSet.create_for_course(overview) self.assertTrue(hasattr(overview, 'image_set'))
d_signal.disconnect(receiver_1_arg)
return ''
for attr in template_attrs: with self.assertRaises(AttributeError): getattr(unpickled_response, attr)
if course_mode_has_price and (access['finance_admin'] or access['sales_admin']): sections.append(_section_e_commerce(course, access, paid_modes[0], is_white_label, is_white_label))
assert_greater(clf.score(X_test, y_test), 0.99)
from __future__ import unicode_literals
test_deviance = np.zeros((params['n_estimators'],), dtype=np.float64)
if self.digest is not None: password = binascii.hexlify(self.digest(force_bytes(password)).digest()) else: password = force_bytes(password)
from multiprocessing.pool import Pool
first = pd.DataFrame([[datetime(2016, 1, 1)], [datetime(2016, 1, 2)]]) first[0] = first[0].dt.tz_localize('Europe/London')
from __future__ import absolute_import, print_function import yaml import logging
CACHE_TIMEOUT = 0
'USE_CUSTOM_THEME': False,
required_boto3_version = '1.2.1'
import salt.utils import salt.defaults.exitcodes from salt.utils.filebuffer import BufferedReader
t = hash_klass(len(uniques)) t.map_locations(com._ensure_object(uniques))
self.assertEqual(a_sorted.index.names, self.frame.index.names)
from __future__ import absolute_import import logging import os
if callable(fail_condition): fail_val = fail_condition else: fail_val = lambda: fail_condition
else: from . import __check_build from .base import clone
primary_key = models.AutoField(primary_key=True) parent = models.OneToOneField(Place, models.CASCADE, parent_link=True)
from __future__ import absolute_import
cache[cache.keys()[0]] = ("Hey there!", {})
(27, True, u"True"),
response = self._response().render() res = [x for x in response] self.assertEqual(res, [b'foo'])
precs_full = np.array([np.diag(1. / np.sqrt(x)) for x in covars_diag])
from __future__ import absolute_import
print "======== Roundtrip diff: ========="
losses[losses <= 0] = 0 return np.average(losses, weights=sample_weight)
import salt.ext.six as six try: import salt.utils.psutil_compat as psutil
if isinstance(value, six.text_type): return six.memoryview(b64decode(force_bytes(value))) return value
sp = SpectralClustering(n_clusters=2, affinity='<unknown>') assert_raises(ValueError, sp.fit, X)
weights = np.sum(y_true_binarize, axis=0, dtype=int)
staff = UserFactory.create(password="test") role = CourseStaffRole(self.course.id) role.add_users(staff) return staff
from __future__ import absolute_import
url = 'http://example.com/' self.assertEqual(url, resolve_url(url))
content_object = GenericForeignKey()
import logging import sys
Env.METRICS_DIR.makedirs_p()
context['document_title'] = _("{partner_short_name} {course_number} Certificate | {platform_name}").format( partner_short_name=context['organization_short_name'], course_number=context['course_number'], platform_name=platform_name )
self.verify_show_answer_present(True)
_wrapped = None
if not isinstance(self.course_id, CourseLocator): return response
HAS_LIBS = False try: import github import github.PaginatedList import github.NamedUser from github.GithubException import UnknownObjectException
resp = self.client.post(reverse('shoppingcart.views.remove_item', args=[]), {'id': reg_item.id})
return Image.fromarray(arr.reshape(os, os) * 255.)
state.__salt__ = {} state.__context__ = {} state.__opts__ = {} state.__pillar__ = {}
ret = __salt__['cmd.run_all'](cmd, runas=user, python_shell=False) if ret['retcode'] != 0: return ret
self._assert_about(TemplateView.as_view(template_name='generic_views/about.html')(self.rf.get('/about/')))
items = store.get_items(course_key)
HAS_RESOURCE = False
self.login(self.unenrolled_user) self.assertFalse(self.enroll(self.course)) self.assertTrue(self.enroll(self.test_course))
submission = student_answers[self.answer_id]
return force_str(super(BaseMemcachedCache, self).make_key(key, version))
self.assertIn( settings.MICROSITE_CONFIGURATION['test_microsite']["urls"]['PRIVACY'], data['company_privacy_url'] )
TRACK_MAX_EVENT = 50000
b.update({'a': 1}) self.assertEqual(a, b)
multioutput = None
pass
clear_cmd = '/usr/sbin/svcadm clear {0}'.format(name) __salt__['cmd.retcode'](clear_cmd, python_shell=False) return not __salt__['cmd.retcode'](cmd, python_shell=False)
if num_violations > violations_limit > -1: raise BuildFailure( "JSHint Failed. Too many violations ({count}).\nThe limit is {violations_limit}.".format( count=num_violations, violations_limit=violations_limit ) )
with tm.assertRaisesRegexp(TypeError, 'list of lists-like'): self.index.set_levels(levels[0])
values = lib.maybe_convert_objects(values, convert_timedelta=timedelta)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
num_concurrent_tasks = 5
store = self._get_modulestore_for_courselike(usage_key.course_key) return store.get_item(usage_key, depth, **kwargs)
if __name__ == '__main__': swarm = Swarm(parse()) try: swarm.start() finally: swarm.shutdown()
if len(bits) >= 3 and len(bits) <= 6:
df = self.panel['ItemA']
salt myminion git.submodule /path/to/repo/sub/repo init=True salt myminion git.submodule /path/to/repo/sub/repo update opts='--init'
new_children.append(new_block_key)
try: choc_path = _find_chocolatey(__context__, __salt__) except CommandExecutionError: choc_path = None if choc_path and not force: return 'Chocolatey found at {0}'.format(choc_path)
if module not in get_modules(): log.error('Module {0} not available'.format(module)) return False
vm_['instance_id'] = data.id
response = self._submit_photos(expected_status_code=400, face_image=self.IMAGE_DATA) self.assertEqual( response.content, "Photo ID image is required if the user does not have an initial verification attempt." )
self.assertEqual(seed, module.seed)
response = self.client.get(collector_url) self.assertContains(response, 'name="grommet_set-0-code"')
descriptor = modulestore().get_item(self.course.location) section_grader_type = CourseGradingModel.get_section_grader_type(self.course.location)
import xlsxwriter
y_true, y_pred, _ = make_prediction(binary=True)
try: import salt.utils.psutil_compat as psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
return "is-editing" in self.q(css=self.NAME_FIELD_WRAPPER_SELECTOR).first.attrs("class")[0]
result = ci.delete(10)
return course_metadata_utils.course_end_datetime_text( self.end, format_string, strftime_localized )
return self.runtime.get_subtree_edited_on(self)
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME))
log.error('Volume {0} must be stopped before deletion'.format(target)) return False
self.assertURLEqual( 'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format( change_user_url ), '{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(change_user_url) )
continue
items = store.get_items(course.id, settings={'group_access': {'$exists': True}}, include_orphans=False) return GroupConfiguration._get_content_groups_usage_info(course, items)
result = api.get_credit_providers(['fake_provider_id']) self.assertEqual(result, [])
import salt.modules.rvm import salt.states.rvm as rvm
import salt.ext.six as six
self.register_get_threads_response([], page=3, num_pages=3) with self.assertRaises(PageNotFoundError): get_thread_list(self.request, self.course.id, page=4, page_size=10)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
parent_msg.attach(content=child_s, mimetype='message/rfc822') parent_s = parent_msg.message().as_string()
DATE_INPUT_FORMATS = [
self._write("()")
result = Index(np.array(ci)) self.assertIsInstance(result, Index) self.assertNotIsInstance(result, CategoricalIndex)
clf = PassiveAggressiveClassifier().fit(X, y) assert_array_equal(clf.classes_, np.unique(y))
thread_author = getattr(self, thread_author) self._setup_mock(
result = grouped.apply(f) self.assert_index_equal(result.index, df.index)
if val == val: nobs[lab, 0] += 1 sumx[lab, 0] += val
def apply_next_model(model): next_function = partial(apply_next_model.func, model) self.lazy_model_operation(next_function, *more_models) apply_next_model.func = function
self.q(css='.action-remove-member').first.click()
result = self.frame.add(self.frame[:0]) assert_frame_equal(result, self.frame * np.nan)
invalid_get_dict = MultiDict({'input': 'test'}) with self.assertRaises(ValueError): result = CapaModule.make_dict_of_responses(invalid_get_dict)
with storebuilder.build() as (__, store): course = CourseFactory.create(modulestore=store)
json_fields = json.dumps(fields, cls=EdxJSONEncoder) rerun_course.delay(unicode(source_course_key), unicode(destination_course_key), request.user.id, json_fields)
try:
with ensure_clean_store(self.path) as store: df = tm.makeDataFrame()
try: file_name = data.name file_size = data.size except AttributeError: raise ValidationError(self.error_messages['invalid'], code='invalid')
assert choice_type in group_element_names group_element = etree.Element(group_element_names[choice_type])
if six.PY2: tb = tb.tb_next elif not tb.tb_next and exceptions: exc_value = exceptions.pop() tb = exc_value.__traceback__ else: tb = tb.tb_next
response = self.client.get('/login_protected_view_custom_redirect/') self.assertRedirects(response, '/accounts/login/?redirect_to=/login_protected_view_custom_redirect/')
response = self._submit_photos(self.course_key, self.reverification_location, self.IMAGE_DATA) self.assertEqual(response.status_code, 400)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
for enabled in cls._enabled_providers(): if enabled.is_active_for_pipeline(running_pipeline): return enabled
return self._xblock_map[usage_key]
return event['event_type'].startswith('edx.team.')
self.assertEqual(response.status_code, 302) self.assertEqual(response['Location'], path)
from salt.states import rabbitmq_vhost
coords = [(a, self._get_axis(a)) for a in self._AXIS_ORDERS] return xarray.DataArray(self, coords=coords, )
cost_weights = rng.normal(size=(num_filters, rows - filter_rows + 1, cols - filter_cols + 1, batch_size)) cost = (constant(cost_weights) * output).sum()
stamp = Timestamp('3/10/2012 22:00', tz=self.tzstr('US/Eastern'))
session = requests.Session() response = session.get(STUDIO_BASE_URL + "/auto_auth?staff=true")
from __future__ import absolute_import import os
self._session_cache = {} self.accessed = True self.modified = True
if token != '': new_headers['X-Amz-Security-Token'] = token
s = OrderedSet() self.assertFalse(s) s.add(1) self.assertTrue(s)
def get_last_modified(): if last_modified_func: dt = last_modified_func(request, *args, **kwargs) if dt: return timegm(dt.utctimetuple())
for url in urls: self.assert_request_status_code(404, url)
dir_suffix = "-py3"
if value_to_mask == "NaN" or np.isnan(value_to_mask): return np.isnan(X) else: return X == value_to_mask
FILE_UPLOAD_DIRECTORY_PERMISSIONS = None
from __future__ import print_function from __future__ import absolute_import import os import sys import logging from salt.ext.six.moves import input
extra_params = dict(x_left_lower_corner=-94.8, Nx=1212, y_left_lower_corner=-56.05, Ny=1592, grid_size=0.05) dtype = np.int16
inp = iter(inp) mlb = MultiLabelBinarizer(classes=[1, 3, 2]) assert_array_equal(mlb.fit(inp).transform(inp), indicator_mat)
log.debug( "SafeCookieData received empty user_id '%s' for session_id '%s'.", user_id, session_id, )
if not value.index.is_unique: raise e
if convert_timedeltas and values.dtype == np.object_:
if register_to: register_to._registry = before_import_registry
self.assertEqual(roundtrip_val, float(text[2:]))
if not settings.FEATURES.get('MILESTONES_APP', False): return [] from milestones import api as milestones_api return milestones_api.get_milestones(namespace)
args = ['base_command', 'testlabel', '-a', 'x', '--settings=alternate_settings'] self._test(args)
else: ret = _load_result(existing, ret)
import logging import json from lxml import etree
fields = fields.split(',')
import os import stat import string import logging
if index < 0: raise OGRIndexError('Negative indices are not allowed on OGR Layers.') return self._make_feature(index)
self.assertRaises(KeyError, target.join, source, on='E')
self.run_on_commit = [ (sids, func) for (sids, func) in self.run_on_commit if sid not in sids ]
for ax in axes[0:-1].ravel(): self._check_visible(ax.get_xticklabels(), visible=False)
with patch_edxnotes_api_settings("http://example.com"): self.assertEqual("http://example.com/some_path/", get_endpoint_function("/some_path"))
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
self.assertEqual(list(children), [my2]) self.assertEqual(list(parents), [my1])
if numeric_only is None: try: return ranker(self) except TypeError: numeric_only = True
with warnings.catch_warnings(): warnings.simplefilter('ignore')
site_configuration_history = SiteConfigurationHistory.objects.filter( site=site_configuration.site, ).all()
from __future__ import unicode_literals
self.key = key
return _git_run(command, cwd=cwd, runas=user, ignore_retcode=ignore_retcode, redirect_stderr=True)['stdout']
from salt.pillar import consul_pillar
from __future__ import absolute_import import logging
html_theme_path = ["_theme"]
if items_for_task: yield items_for_task num_items_queued += len(items_for_task)
self.session._session_key = '12345678' self.assertEqual(self.session.session_key, '12345678')
with tm.assert_produces_warning(None):
ids = set(ids) return self.db_connection.find_course_blocks_by_id(list(ids))
cleansed = CallableSettingWrapper(cleansed)
op = optparse.OptionParser() op.add_option("--n-times", dest="n_times", default=5, type=int, help="Benchmark results are average over n_times experiments")
if 'truncated' not in kwargs: kwargs['truncated'] = [] self.assert_event_emitted( USER_SETTINGS_CHANGED_EVENT_NAME, table=self.table, user_id=self.user.id, **kwargs )
if placement is None: placement = self.mgr_locs return make_block(values, placement=placement, klass=self.__class__, fastpath=fastpath, **kwargs)
disable_animations(page) page.q(css=css).filter(_is_visible).nth(source_index).click()
from pandas.indexes.api import * from pandas.indexes.multi import _sparsify
for signum in old_signals: signal.signal(signum, old_signals[signum])
microsite.set_by_domain(self.microsite.site.domain) self.assertEqual(microsite.get_dict('nested_dict'), self.microsite.values['nested_dict'])
if self.axis == 0: X = check_array(X, accept_sparse='csc', dtype=np.float64, force_all_finite=False)
return self._constructor(data=self._series, index=self.index, columns=self.columns)
self.client.post('/custom_requestauth_login/', { 'username': 'testclient', 'password': 'password', }, follow=True)
return self.default_modulestore.make_course_key(org, course, run)
if name not in nodes: return {} salt.utils.cloud.cache_node(nodes[name], __active_provider_name__, __opts__) return nodes[name]
output = self.engine.render_to_string('inheritance34', {'optional': 1}) self.assertEqual(output, '1two3')
cls.cache_regex = salt.utils.cache.CacheRegex(prepend='^')
h = alpha_i * np.ones(s_i) - np.dot(Vi.T, np.ones(n_neighbors))
return len(self._data)
self._aborting = True
return False
return self.q(css=self.auto_enroll_upload_button_selector).is_present()
first = last = addresses[0] for ip in addresses[1:]: if ip._ip == last._ip + 1: last = ip else: break return (first, last)
backends = self._reload_backends() self.assertEqual(len(backends), 1) tracker.send({}) self.assertEqual(backends.values()[0].count, 1)
return self.book.close()
annotation = annotation.resolve_expression(self, allow_joins=True, reuse=None, summarize=is_summary) self.append_annotation_mask([alias]) self.annotations[alias] = annotation
if not settings.configured: settings.configure()
ups[self.annealed] = annealed ups[self.iteration] = self.iteration + 1
user = request.user
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
if not predicate: raise ProfileDistribution.ValidationError()
from __future__ import division, absolute_import, print_function
item = self.draft_mongo.get_item(vert_location, 0) self.assertFalse(getattr(item, 'is_draft', False), "Item was published. Draft should not exist")
result = diffs.max() self.assertEqual(result[0], diffs.ix[2, 'A']) self.assertEqual(result[1], diffs.ix[2, 'B'])
if iface_type not in ['slave']: return __salt__['cmd.run']('ip link set {0} up'.format(iface)) return None
url += '?payment-order-num={order_num}'.format(order_num=order.id) return HttpResponseRedirect(url)
log.warning(u"Unknown unit in Range header: %s for content: %s", header_value, unicode(loc))
import logging from salt.serializers import json
syncing.remove(name) continue
z = SouthTexasZipcode.objects.get(name='77005')
args = [ 'lms', 'studio', '--settings={}'.format(asset_settings), '--skip-collect' ] call_task('pavelib.assets.update_assets', args=args)
from __future__ import absolute_import import os
_ = lambda text: text
import os import os.path import logging
NO_RECEIVERS = object()
cache.set('somekey', 'value')
model = InvoiceTransaction extra = 0 readonly_fields = ( 'created', 'modified', 'created_by', 'last_modified_by' )
uid = uinfo['uid']
size = tuple([X.shape[i] for i in xrange(X.ndim)]) if self.sync_channels: del size[X_space.axes.index('c')]
ret['comment'] = 'Event module not available. Schedule enable job failed.'
spca_lasso = SparsePCA(n_components=3, method='cd', random_state=0, alpha=alpha) spca_lasso.fit(Y) assert_array_almost_equal(spca_lasso.components_, spca_lars.components_)
return self.q(css='.discussion-module .new-post-btn').present
from __future__ import unicode_literals
CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] ).install()
from __future__ import absolute_import import collections
for resource, xblock_name in itertools.product(self.test_recommendations.values(), self.XBLOCK_NAMES): self.call_event('add_resource', resource, xblock_name)
__salt__['jboss7.read_simple_binding'].return_value = {'success': True, 'result': {'value': 'DEV2'}}
REQUIRE_DEBUG = False
self.components_ = X[self.core_sample_indices_].copy()
if self.data.minute == 0: return self.g() return '%s:%s' % (self.g(), self.i())
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
self.assertEquals(xmodule_tabs.CourseTabList.get_tab_by_type(self.course.tabs, tab.type), tab)
students = self._create_students(10)
import logging
with option_context('display.unicode.east_asian_width', True):
changed_modules = StudentModule.objects.filter(module_state_key__in=self.ee_modules) for changed_module in changed_modules: self.assertEqual( json.loads(changed_module.state)['attempts'], 0 )
trainer = yaml_parse.load(test_yaml_layer3 % {'layer0_filename': layer0_filename, 'layer1_filename': layer1_filename, 'layer2_filename': layer2_filename}) trainer.main_loop()
gc1 = GEOSGeometry(gc_wkt)
import salt.utils import salt.syspaths from salt.exceptions import SaltRenderError
account_settings.switch_account_settings_tabs('accounts-tab')
_maybe_remove(store, 'wp') store.put('wp2', wp) store.select('wp2')
return ( obj["anonymous"] or obj["anonymous_to_peers"] and not self.context["is_requester_privileged"] )
self.store.publish(problem.location, self.user.id)
enable_spectral_norm = False
if not isinstance(lowstate, list): raise cherrypy.HTTPError(400, 'Lowstates must be a list')
self.assertEqual(response.status_code, 200)
problem = self.store.get_item(problem.location)
super(TestEventPublishing, self).setUp() self.mock_user = UserFactory() self.mock_user.id = 1 self.request_factory = RequestFactory()
vectorizer = TfidfVectorizer(ngram_range=(1, 3), analyzer='char', use_idf=False)
if self.kl_integrator is None: self.kl_integrator = find_integrator_for(self.prior, self.posterior)
pnt = Point(0, 0) nullcity = City(name='NullCity', point=pnt) nullcity.save()
FOLDER_PERMISSIONS = stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR FILE_PERMISSIONS = stat.S_IRUSR | stat.S_IWUSR
self.assertRaises(AttributeError, getattr, store, 'd')
return "input_" + cls.answer_key(input_num)
options = repo_string.strip().split() branch_env = options[0] repo_location = options[1] root = ''
MAX_MEMORY = np.int(2e9)
from __future__ import unicode_literals
nv.validate_window_func('mean', args, kwargs) return self._apply('ewma', **kwargs)
trainer.main_loop(time_budget) return trainer
dense_classifier = IsolationForest( n_estimators=10, random_state=1, **params).fit(X_train) dense_results = dense_classifier.predict(X_test)
default_view = cache_page(3)(hello_world_view) default_with_prefix_view = cache_page(3, key_prefix='prefix1')(hello_world_view)
self.assertTrue(NaT + offset is NaT) self.assertTrue(offset + NaT is NaT)
return estimator.score(*args, **kwargs)
from __future__ import absolute_import import socket import logging
objects = UserProfile.objects course_key = CourseKey.from_string(course_id) students = objects.filter(user__courseenrollment__course_id=course_key, user__courseenrollment__is_active=True) return students
gs = GridSearchCV(clf, [{'parameter': [0, 1, 2]}], scoring='accuracy', refit=False, error_score='raise')
import math assert_series_equal(self.ts.apply(math.exp), np.exp(self.ts))
try: os.remove(trans_tar) except (OSError, IOError): pass
ax = Series(np.arange(12) + 1).plot(color='green') self._check_colors(ax.get_lines(), linecolors=['green'])
Vi = V[i, :, n_neighbors - s_i:] alpha_i = np.linalg.norm(Vi.sum(0)) / np.sqrt(s_i)
exclude_patterns = ['_build']
S = func(np.array([[1]], dtype='int'), metric='precomputed') assert_equal('f', S.dtype.kind)
import salt.utils.cloud import salt.utils.xmlutil from salt.exceptions import SaltCloudSystemExit from salt.utils import warn_until
columns = ['int_', 'long_', 'byte_'] expected = expected[columns] reordered = read_stata(self.dta15_117, convert_dates=True, columns=columns) tm.assert_frame_equal(expected, reordered)
pass
import logging import time from datetime import datetime
current = self.start while current < self.stop:
xblock = modulestore().get_item(location) xblock.start = start self.store.update_item(xblock, self.user.id)
return s
ransac_estimator0.fit(X, y) assert_warns(DeprecationWarning, ransac_estimator2.fit, X, y) assert_array_almost_equal(ransac_estimator0.predict(X), ransac_estimator2.predict(X))
else: return _(u"Donation for {platform_name}").format(platform_name=settings.PLATFORM_NAME)
pass_kwargs = {} faults = ['mode', 'makedirs'] for key in kwargs: if key not in faults: pass_kwargs[key] = kwargs[key]
apt_pkg.init_system()
image_length = 96 if which_norb == 'small' else 108
self.assertFalse(runtime.user_is_beta_tester) self.assertEqual(runtime.days_early_for_beta, 5)
state_ret['result'] = None
api_key: <supersecretapi_key> driver: vultr
choices.append((choice.get("name"), components))
import salt.config import salt.loader
response = api.add_enrollment(username, unicode(course_id), mode=mode, is_active=is_active)
grouper = itertools.groupby(tuples, lambda x: x[2].dtype)
pass
url(r'^lang_pref/session_language', 'lang_pref.views.update_session_language', name='session_language'),
self._bind_module(lc_block) chosen_child = get_child_of_lc_block(lc_block) chosen_child_defn_id = chosen_child.definition_locator.definition_id lc_block.save()
self.shell.process_input_line('bookmark ipy_savedir %s'%savefig_dir, store_history=False) self.shell.clear_cout()
post_params['signature'] = "invalid"
from __future__ import absolute_import import sys
self.q(css='input.calibration-feedback-button').first.click()
self.xblock.location = Location("org", "import", "run", "category", "stubxblock")
if run_if_idle is not None: task_definition.Settings.RunOnlyIfIdle = run_if_idle
cmd = 'find {0} -name *.pkg'.format(base_path) out = __salt__['cmd.run'](cmd, python_shell=True)
msg = '<html>' + msg + '</html>'
if salt.utils.is_windows():
expected = ts[:3]
return os.path.join(__opts__['cachedir'], 's3cache')
first_checkpoint.add_verification_attempt(SoftwareSecurePhotoVerification.objects.create(user=self.user)) self.assertEqual(first_checkpoint.photo_verification.count(), 1)
if not opts['job_cache'] or opts.get('ext_job_cache'): return
self.assertEqual(self.empty_series.index.dtype, np.object_) _check_all_orients(self.empty_series, check_index_type=False)
gisfield_may_be_null = not mysql
lock_content = cls.create_image(prefix, (32, 32), 'green', '{}_lock.png', locked=True)
helper(not_html_encoded, ensure_ascii=True) helper(not_html_encoded, ensure_ascii=False)
dummy2 = _("This is another translatable string.")
server.ping()
self.assertTrue('Activate Course Enrollment' in response.content)
e = model.objects.create(name='This Week in Django') Media.objects.create(content_object=e, url='http://example.com/podcast.mp3') return e
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON
X_centered = X - X.mean(axis=0) lw = LedoitWolf(assume_centered=True) lw.fit(X_centered) shrinkage_ = lw.shrinkage_
return False
odds = filter(lambda i: i not in skip_idxs, range(1, len(activations), 2))
try: import boto import boto.exception logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
if process_manager._process_map.keys(): process_manager.send_signal_to_processes(signal.SIGILL) process_manager.stop_restarting() process_manager.kill_children()
from __future__ import absolute_import
self.assertEqual( self.run_function('shadow.del_password', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
import yaml try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
data = np.array([1., np.nan, 3], dtype=np.float32) arr = SparseArray(data, dtype=np.float32)
res = linkage_tree(X, affinity=manhattan_distances) assert_array_equal(res[0], linkage_tree(X, affinity="manhattan")[0])
self.video.a11y_audit.config.set_scope( include=["div.video"] ) self.video.a11y_audit.check_for_accessibility_errors()
if self.empty_permitted and not self.has_changed(): return
problem = self.build_problem(sample_dict=sample_dict, num_samples=10, tolerance=0.01, answer="x+2*y")
response = self.client.post(reverse('commerce:checkout_receipt'), params={'basket_id': 1}, data=post_data) self.assertEqual(response.status_code, 200) return response
Book.objects.filter(pagecount__lt=250).delete()
return self.block.to_dense().view()
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False).visit()
yield dec
import os import re import logging from salt.ext.six.moves import zip import salt.ext.six as six
groups = [] for g in p.groups:
return 0 < self.major < 2014
js_url = urljoin(self.public_service_url, self.authoring_app_js_path) css_url = urljoin(self.public_service_url, self.authoring_app_css_path) return AuthoringAppConfig(js_url=js_url, css_url=css_url)
if settings.FEATURES.get('ENABLE_MKTG_EMAIL_OPT_IN'): _update_email_opt_in(request, course_id.org)
enabled_provider = provider.Registry.get(provider_id) if not enabled_provider: raise ValueError('Provider %s not enabled' % provider_id) return enabled_provider
inp = {} inp['default'] = 'default' inp['hostname'] = minion_id
import integration import salt.utils
base_estimator.fit(X_inlier_best, y_inlier_best)
self.course.tabs.append(CourseTab.load("notes")) self.course.advanced_modules = ["notes"]
self.assertEqual(jid_file, None)
return {'Authorization': 'Token {}'.format(settings.BADGR_API_TOKEN)}
from __future__ import unicode_literals
import os try: import spwd HAS_SPWD = True except ImportError: HAS_SPWD = False try: import pwd except ImportError:
if exc.winerror == 1332: return '' else: raise
from contextlib import contextmanager import logging import sqlite3
if not hasattr(view_converter, 'topo_space'): raise NotImplementedError("Not able to get a topo_space " "from this converter: %s" % view_converter)
import integration import salt.utils
children = self.q(css=self.CHILD_SELECTOR) return [self.CHILD_CLASS(self.browser, child.get_attribute("id")) for child in children]
from __future__ import absolute_import
'state_output': str,
import salt.client.ssh.client
self._check_grade_response(callback_url, expected_header, json.dumps(response_content))
if not hasattr(self, 'center'): self.center = False if not hasattr(self, 'gcn'): self.gcn = False
if not has_studio_write_access(request.user, usage_key.course_key): raise PermissionDenied()
for collection in vmconfig_type['collection']: if collection in vmconfig_type['create_only']: continue
import integration from salt.modules import djangomod as django
webresponse = server.encodeResponse(response) http_response = HttpResponse(webresponse.body) http_response.status_code = webresponse.code
try: import MySQLdb HAS_MYSQL = True except ImportError: HAS_MYSQL = False
pass
logging.exception(u"Failed to generate thumbnail for {0}. Exception: {1}".format(content.location, str(e)))
self._setup_mode_and_enrollment(self.FUTURE, "verified")
dirty = git_describe.endswith("-dirty") pieces["dirty"] = dirty if dirty: git_describe = git_describe[:git_describe.rindex("-dirty")]
from shoppingcart.processors.CyberSource2 import processor_hash
return "visibility"
data = fetch_olivetti_faces() X = data.images.reshape((len(data.images), -1)) y = data.target
if addresses: if addresses[0] == 'None': addresses[0] = None elif addresses is None: addresses = [None]
result = df.assign(C=[4, 2.5, 2]) assert_frame_equal(result, expected) assert_frame_equal(df, original)
return ResponseXMLFactory.choicegroup_input_xml(**kwargs)
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE[course_mode])
from __future__ import absolute_import from salt.ext.six.moves import range
n = len(X4) rng = np.random.RandomState(13) idx = np.arange(n) rng.shuffle(idx)
self.assertQuerysetEqual(Article.objects.filter(id__iexact=str(self.a1.id)), ['<Article: Article 1>'])
newFrame = self.frame.reindex(columns=[]) self.assertTrue(newFrame.empty)
mock_key.side_effect = mock_key_instances + [Mock()]
self.assertTrue(pipeline.running(request))
'debug': False
Z = Z.reshape(xx.shape) plt.figure(1, figsize=(4, 3)) plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired)
for email in ('bad_email', 'bad_email@', '@bad_email'): self.assertEqual(self.do_email_validation(email), 'Valid e-mail address required.')
if nic and isinstance(nic, (six.string_types, dict)): nicp = get_network_profile(nic) else: nicp = {} if DEFAULT_NIC not in nicp: nicp[DEFAULT_NIC] = {}
assert_equal(train.intersection(test), set())
self.assertQuerysetEqual( self.d.friends.all(), [ "Chuck", ], attrgetter("name") )
if not isinstance(query, six.string_types): raise TypeError('GeoIP query must be a string, not type %s' % type(query).__name__)
from __future__ import unicode_literals
values = values.view()
cipher = aes_cipher_from_key(key) padded_data = pad(data) return cipher.encrypt(padded_data)
if assignment_type: self.set_assignment_type(assignment_type)
from __future__ import absolute_import
df.loc[(0, 0), 'z'] = 2 result = df.loc[(0, 0), 'z'] self.assertEqual(result, 2)
if createhome: __salt__['file.mkdir'](home, user=uid, group=gid)
generated_password = ['first'] password = generate_unique_password(generated_password, 12) self.assertNotEquals(password, 'first')
names = names + _get_consensus_names(indexes)
with check_mongo_calls(max_find.pop(0), max_send): with self.assertRaises(ItemNotFoundError): self.store.get_item(self.fake_location)
return False
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
requires_literal_defaults = False
exam_attempts_section.remove_student_attempt() self.assertFalse(exam_attempts_section.is_student_attempt_visible)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self._assert_course_verification_status(VERIFY_STATUS_APPROVED)
allow_quiet_fail = acceptable_ora_err is not None and len(acceptable_ora_err) > 0 self._execute_statements(cursor, statements, parameters, verbosity, allow_quiet_fail=allow_quiet_fail) return True
self.assertIn( 'spongebob', self.run_function('softwareupdate.list_ignored')) self.assertIn( 'squidward', self.run_function('softwareupdate.list_ignored'))
while listening_to_events:
result = np.timedelta64(0, 'ns') expected = to_timedelta(0, box=False) self.assertEqual(result, expected)
archive.__salt__ = {} archive.__opts__ = {"cachedir": "/tmp", "test": False} archive.__env__ = 'test'
if self.q(css=".submission-success").visible: return self.q(css=".submission-success h4").text
X = check_array(X, accept_sparse=['csr', 'csc', 'coo'], ensure_min_features=2, estimator=self) return AgglomerativeClustering.fit(self, X.T, **params)
for course_key, store_name in self.mappings.iteritems(): if store_name == key: self.mappings[course_key] = store self.modulestores.append(store)
user = User.objects.create_user('johndoe', 'john@example.com', 'pass') x = SimpleLazyObject(lambda: user)
eligibility = CreditEligibility.objects.get(username=self.USERNAME) eligibility.deadline = datetime.datetime.now(pytz.UTC) + datetime.timedelta(days=29) eligibility.save()
if not organizations: raise Exception( 'Configuration error. Microsite {key} does not have any ORGs mapped to it!'.format( key=microsite_object.key ) )
_change_access(course, user, level, 'revoke', send_email)
result = 1**df
def __init__(self, value): self.value = value
if position is not None: try: position = int(position) except (ValueError, TypeError): log.exception('Non-integer %r passed as position.', position) position = None
if self._errors is None: self.full_clean() return self._errors
self.visbiasY = sharedX( numpy.zeros(nvisy), name='vbY', borrow=True )
class SparseTimeSeries(SparseSeries): def __init__(self, *args, **kwargs): warnings.warn("SparseTimeSeries is deprecated. Please use " "SparseSeries", FutureWarning, stacklevel=2)
if expected is not actual: raise AssertionError("values not identical, expected %r, actual %r" % (expected, actual))
self.mappings[lib_key] = store
self.split_mongo.create_course( self.split_course_key.org, self.split_course_key.course, self.split_course_key.run, self.user_id, fields=fields, root_block_id='runid' )
result = Categorical(['foo', 'bar', 'baz']) self.assertTrue(result.codes.dtype == 'int8')
import salt.defaults.exitcodes import salt.utils import salt.log.setup import salt.defaults.exitcodes from salt.log.mixins import NewStyleClassMixIn
class PortItem(IntegerItem):
if cert_mode == CourseMode.CREDIT_MODE: cert_mode = CourseMode.VERIFIED
setattr(cls, self.name, ManyToManyDescriptor(self.remote_field, reverse=False))
self.assertEqual(len(response.redirect_chain), 1) self.assertIn(302, response.redirect_chain[0]) self.assertEqual(len(outbox), outbox_count) if send_email:
_view_name = None client_class = PatchedClient
remotes = __salt__['git.remotes'](target, user=user, redact_auth=False)
continue
self.assertFalse(router.allow_migrate_model('default', User)) self.assertTrue(router.allow_migrate_model('default', Book))
XBLOCK_SETTINGS = { "VideoDescriptor": { "licensing_enabled": True } }
n = 23149 X_test = X[:n, :] y_test = y[:n] X = X[n:, :] y = y[n:]
content = content or SRT_content srt_file = tempfile.NamedTemporaryFile(suffix=".srt") srt_file.content_type = 'application/x-subrip; charset=utf-8' srt_file.write(content) srt_file.seek(0) return srt_file
Author.objects.filter(alias__isnull=True).update( alias=Lower(Substr('name', 1, 5)), )
y_pred[:, k] += (learning_rate * tree.value[:, 0, 0].take(terminal_regions, axis=0))
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
result = s.iloc[slice(1, 3)] expected = s.ix[2:4] assert_series_equal(result, expected)
self.browser.refresh() profile_page.wait_for_page() self.verify_profile_page_is_private(profile_page)
return UserPartition( partition_id, name, description, groups, MockUserPartitionScheme(scheme) ).to_json()
self.assertEqual(response.status_code, 302)
if getattr(cls, 'multi_db', False): return [ alias for alias in connections if include_mirrors or not connections[alias].settings_dict['TEST']['MIRROR'] ] else: return [DEFAULT_DB_ALIAS]
df2['y'] = ['g', 'h', 'i']
sh("i18n_tool transifex pull")
def _parse_commit_log(this,repo_path,base_commit=None): from vbench.git import _convert_timezones from pandas import Series from dateutil import parser as dparser
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
logging.root.addHandler(LOGGING_NULL_HANDLER)
absolute_path = self.download(template)
default_username = get_default_username() try:
self.assertEqual(self.account_settings_page.title_for_field(field_id), title) self.assertEqual(self.account_settings_page.value_for_readonly_field(field_id), value)
if password_validators is None: password_validators = get_default_password_validators() for validator in password_validators: password_changed = getattr(validator, 'password_changed', lambda *a: None) password_changed(password, user)
return 'is-disabled' not in self.q(css=css).attrs('class')[0]
self.go_to_sequential_position(1) execute_video_steps(tab1_video_names)
self.assertIn('("slug" varchar_pattern_ops)', index_sql[4])
response = client.get('/')
self.assertEqual( utils.get_discussion_category_map(self.course, requesting_user or self.user), expected )
with self.assertRaises(ItemNotFoundError): store.find_asset_metadata(new_asset_loc) with self.assertRaises(ItemNotFoundError): store.get_all_asset_metadata(fake_course_id, 'asset')
bool_dict = [True, "True", "true", "T", "t", "1"] return value in bool_dict
_save = self.run_function('beacons.save') self.assertTrue(_save['result'])
frame.ix[:, 'B':'C'] = 4. assert_frame_equal(frame, expected)
f.save_m2m() self.assertQuerysetEqual(new_art.categories.order_by('name'), ["Entertainment", "It's a test"])
get_db_prep_lookup_value_is_iterable = True
pass
return mark_safe("%d%s" % (value, suffixes[value % 10]))
s = Series([0, 1])
return self.modulestores[0]
for item in good_out: self.assertIn(item, ret_output)
method = missing.clean_fill_method(method) new_data = self._data.interpolate(method=method, axis=axis, limit=limit, inplace=inplace, coerce=True, downcast=downcast)
help = "Create a course in one of {}".format([ModuleStoreEnum.Type.mongo, ModuleStoreEnum.Type.split]) args = "modulestore user org course run"
filtered = expected.filter(regex='^[0-9]+$') assert_frame_equal(filtered, expected)
self.login(email, password)
return s
if raw: self.set_raw_content(content) else: self.set_content(content) self.cancel()
raise
self.assertRaises(ValueError, Progress, 0, 0) self.assertRaises(ValueError, Progress, 2, 0) self.assertRaises(ValueError, Progress, 1, -2)
try: import boto import boto.sqs logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
au_rule.delete() self._assert_history([])
return self.client.get(reverse("dashboard"))
mapper = _KeyMapper(comp_ids, ngroups, self.labels, self.levels) return [mapper.get_key(i) for i in range(ngroups)]
course = store.get_course(course_key) self.enroll(course, True)
remove(item, force)
return len(self.xblock_components)
response = self.client.get(reverse('admin:admin_views_subscriber_changelist')) self.assertContains(response, '0 of 2 selected')
CourseModeFactory.create( course_id=self.course.id, mode_slug='professional', mode_display_name='professional', )
from __future__ import absolute_import
courses_list, __ = _accessible_courses_list(self.request)
INSTALLED_APPS += ('lettuce.django',) LETTUCE_APPS = ('courseware', 'instructor')
else: data = dict(zip(range(len(self.objs)), self.objs)) cons = _concat._get_series_result_type(data)
return ensure_csrf_cookie(func)(*args, **kwargs)
import os import logging
pass
mount_translate_options = { 'tcp': 'proto=tcp', 'udp': 'proto=udp', }
NAME_MIN_LENGTH = 2 NAME_MAX_LENGTH = 255
event_info['correct_map'] = correct_map.get_dict() event_info['success'] = success event_info['attempts'] = self.attempts self.track_function_unmask('problem_rescore', event_info)
from __future__ import absolute_import
self.assertQuerysetEqual( Note.objects.filter(pk__in=(x for x in ())), [] )
indices = np.argsort(n_samples_per_label)[::-1] n_samples_per_label = n_samples_per_label[indices]
assert_raises(ValueError, chi2_kernel, csr_matrix(X), csr_matrix(Y)) assert_raises(ValueError, additive_chi2_kernel, csr_matrix(X), csr_matrix(Y))
self.band = None self.assertTrue(os.path.isfile(pam_file))
if address_predefined: os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS'] = old_address else: del os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS']
self.register_page.visit()
pass
return _get_next_prev(self, date, is_previous=False, period='week')
import pprint
errstring = "Error: too few arguments" with self.assertRaisesRegexp(CommandError, errstring): call_command('export_olx')
raise ItemNotFoundError(course_locator)
executable_name = None
if cyg_arch == 'x86_64': return 'cygwin64' elif cyg_arch == 'x86': return 'cygwin' raise SaltInvocationError( 'Invalid architecture {arch}'.format(arch=cyg_arch))
if check_db and default_username: try: auth_app.User._default_manager.get(username=default_username) except auth_app.User.DoesNotExist: pass else: return '' return default_username
geo_field = self._geo_field(field_name) if not geo_field: raise TypeError('%s output only available on GeometryFields.' % func)
import salt.loader import salt.utils.event from salt.utils.event import tagify from salt.exceptions import SaltInvocationError
output = self.engine.render_to_string('basic-syntax03', {"first": 1, "second": 2}) self.assertEqual(output, '1 --- 2')
raise NotImplementedError('Subclasses must implement this method.')
return options, args
return 'DEFAULT'
from salt.modules import cassandra
code = input(prompt)
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.django_book])
if len(i8) and self.is_monotonic: if i8[-1] != tslib.iNaT: return self._box_func(i8[-1])
return self.max_num
while f1 != f2: f1=f2 (f2,ext)=os.path.splitext(f1)
import logging import re import os import bz2
assert_panel4d_equal(panel4d.ix[:, :, dates, cols], panel4d.reindex(major=dates, minor=cols))
parent = models.ForeignKey(ParentWithDependentChildren, models.CASCADE) family_name = models.CharField(max_length=255)
if response.context and len(response.context) == 1: response.context = response.context[0]
incron.__grains__ = {} incron.__salt__ = {} incron.__context__ = {} incron.__opts__ = {}
self.assertEqual(google_provider.id, google_state.provider.id) self.assertEqual(self.user, google_state.user) self.assertEqual(user_social_auth_google.id, google_state.association_id)
return self.storage_space.np_format_as(batch, space)
course_outline_url = reverse_course_url('course_handler', updated_course.id) response = self.client.get_html(course_outline_url)
self.assertEqual( dict(self.cd), {'foo': 'global'}, )
return a
def curry(_curried_func, *args, **kwargs): def _curried(*moreargs, **morekwargs): return _curried_func(*(args + moreargs), **dict(kwargs, **morekwargs)) return _curried
objects.extend(Tag.objects.all())
self.check_val('False', False)
for app_config in apps.get_app_configs(): try: import_module('.management', app_config.name) except ImportError: pass
six.reraise(ValidationError, ValidationError( self.error_messages['invalid_image'], code='invalid_image', ), sys.exc_info()[2])
expected = inspect.getargspec(load_ndarray_dataset)[0][1:] data = load_ndarray_dataset(conf['dataset'], **subdict(conf, expected))
self.testing_cost = 20 self.testing_course_mode = CourseMode( course_id=self.testing_course.id, mode_slug=CourseMode.HONOR, mode_display_name="testing honor cert", min_price=self.testing_cost ) self.testing_course_mode.save()
request_uuid = self._create_credit_request_and_get_uuid() response = self._credit_provider_callback(request_uuid, 'invalid') self.assertEqual(response.status_code, 400)
return None
a = Article.objects.create( headline="Look at me!", pub_date=datetime.datetime.now() ) self.assertIs(a.get_status_display(), None)
next_page = False continue
latest_version_config = cls.objects.filter(platform=platform, enabled=True).first() if latest_version_config: return latest_version_config.version
new_mtime_map = salt.fileserver.generate_mtime_map(__opts__['file_roots'])
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
self.cart.start_purchase() self.cart.purchase()
__grains__ = {} if 'pepa_grains' in __opts__: __grains__ = __opts__['pepa_grains'] if args.grains: __grains__.update(yaml.load(args.grains))
self.cols = cols
from pandas.tseries.plotting import tsplot import matplotlib.pyplot as plt
return unicode(CCXLocator.from_course_locator(obj.course.id, obj.id))
libraries = get_installed_libraries() libraries.update(custom_libraries) return libraries
if start[1] != indent[depth]: yield (start, "E124 closing bracket does not match " "visual indentation")
result = self.frame.ix[2] expected = self.frame.xs(self.frame.index[2]) assert_series_equal(result, expected)
url = _YAHOO_COMPONENTS_URL + 's={0}&f={1}&e=.csv&h={2}'
registration = world.RegistrationFactory(user=user) registration.register(user) registration.activate() CourseEnrollment.enroll(user, course_key)
tm.assert_frame_equal(grouped.grouper.groupings[0].obj, df) self.assertEqual(grouped.ngroups, 2)
if len(names) == 1: return ret[names[0]] return ret
try: instance.handle_ajax(dispatch, data) instance.save() except: log.exception("error processing ajax call") raise
source_copy = source.copy() source_copy['A'] = 0 self.assertRaises(ValueError, target.join, source_copy, on='A')
def test_real_user(useless): useless_user = Mock(email='fake@fake.com', id=useless) return useless_user
self.workd = _aligned_zeros(3 * n, self.tp) self.workl = _aligned_zeros(3 * self.ncv * (self.ncv + 2), self.tp)
incorrect = y_predict != y
expected = df.stack(level=level, dropna=True) if isinstance(expected, Series): assert_series_equal(result, expected) else: assert_frame_equal(result, expected)
import os
relative_url = url[len(self.base_url[2]):] return url2pathname(relative_url)
import salt.utils
if not fnmatch.fnmatch(repo['url'], six.text_type(remote)): continue
truncated = ts.truncate() assert_frame_equal(truncated, ts)
if getattr(libvirt, 'VIR_CONNECT_BASELINE_CPU_MIGRATABLE', False): flags += libvirt.VIR_CONNECT_BASELINE_CPU_MIGRATABLE else: raise ValueError
results.append({ 'identifier': identifier, 'error': error, 'userDoesNotExist': user_does_not_exist })
return
with self.assertRaises(FieldError): Book.objects.all().aggregate(num_authors=Count('foo'))
return FAKE_MICROSITE.get(name, default)
manage.py ... enroll_user_in_course -e test@example.com -c edX/Open_DemoX/edx_demo_course
from openedx.core.djangoapps.programs.models import ProgramsApiConfig
aliases.extend( join for join in self.alias_map.keys() if self.alias_map[join].parent_alias == alias and join not in aliases )
factory = RequestFactory() request = factory.get('ccx_coach_dashboard') request.user = MagicMock() return request
pass
win_network.__salt__ = {} win_network.__opts__ = {}
self.assertNotEqual(prg1, prg2) self.assertEqual(prg1, prg3)
if not salt.utils.is_proxy(): self.io_loop.spawn_callback(salt.engines.start_engines, self.opts, self.process_manager)
keep_default_na = result.pop('keep_default_na')
from __future__ import absolute_import import logging import os import os.path
from __future__ import absolute_import import atexit import logging import time
section_css = '.course-navigation .chapter:nth-of-type({0})'.format(sec_index + 1) self.q(css=section_css).first.click()
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
pass
fp = BytesIO() g = generator.BytesGenerator(fp, mangle_from_=False) g.flatten(self, unixfrom=unixfrom, linesep=linesep) return fp.getvalue()
enrollment.deactivate() self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
assert_in(InheritanceMixin, root.xblock_mixins)
'hash_type': str,
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
test_labels_set = set() for label in test_labels: bits = label.split('.')[:1] test_labels_set.add('.'.join(bits))
s_database = quote_identifier(dbc, for_grants=(table is '*'))
import salt.loader import salt.utils from salt.utils import print_cli import salt.ext.six as six
def downward_state(self, state): return state def downward_message(self, state): return state
hyper_parameters = expand(flatten(state.hyper_parameters), dict_type=ydict)
df.iloc[:1] df['col'] df.dtypes str(df)
EMAIL_HOST = 'localhost'
return { 'username': data['username'].lower(), 'password': 'this_is_not_a_secret', }
bools = Series([True, False, True])
SECRET_KEY = "very_secret_bok_choy_key"
train_composite = Train(dataset_composite, mlp_composite, SGD(0.0001, batch_size=20)) train_composite.algorithm.termination_criterion = EpochCounter(1) train_composite.main_loop()
self.tags[name] = compile_function return compile_function
return min(self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max)
return self.descriptor.runtime.modulestore.get_course(self.course_id)
service = _get_service(name) label = service['plist']['Label']
self._assertOLXBase(block_list, draft=False, published=True)
log = logging.getLogger() log = logging.getLogger(__name__) info = log.info
from salt.exceptions import CommandExecutionError from salt.modules import mac_xattr as xattr import salt.utils.mac_utils
exceptions = set()
anon_user = Client() resp = anon_user.get(self.view_url) self.assertEquals(resp.status_code, 302)
y_true, _, probas_pred = make_prediction(binary=True) expected_auc = _auc(y_true, probas_pred)
pass
non_displayed_tabs = set(old_tab_list) - set(new_tab_list) new_tab_list.extend(non_displayed_tabs)
return render_to_response('api_admin/catalogs/search.html')
class CommonAncestor(models.Model): pass
create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
formset = self.NormalFormset(self.data) self.assertTrue(formset.is_valid()) self.assertEqual(len(formset.save()), 4)
self.assertIsNotNone(re.search(r' geom = models.PolygonField\(([^\)])*\)', model_def))
super(DBCacheTests, self).setUp() self.create_table()
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
def _get_errcheck(self): return self.cfunc.errcheck
result = idx.delete(5)
for subs_id in youtube_subs.values(): self.clear_sub_content(subs_id)
names = [prefix + str(i) for i in range(nlevels)]
index_axes_map = dict() for i, a in enumerate(obj.axes):
df.plot.box(color=dict(boxes='red', xxxx='blue'))
import salt.utils
MAX_ASSET_UPLOAD_FILE_SIZE_URL = ""
s = self.convert()
has_changes = None if (is_xblock_unit or course_outline) and not is_library_block: has_changes = modulestore().has_changes(xblock)
return self.best_estimator_.predict_proba(X)
self.assertEqual(meter.progress, list(progresses))
'unique_for_date': _("%(field_label)s must be unique for " "%(date_field_label)s %(lookup_type)s."),
for (user, token) in self.tokens.items(): UserPreference.objects.create(user=user, key=NOTIFICATION_PREF_KEY, value=token)
self.assertEqual(certificate_exception['user_email'], self.user.email) self.assertEqual(certificate_exception['user_name'], self.user.username)
- cn=admin,dc=example,dc=com: - delete_others: True - replace: cn: - admin description: - LDAP administrator objectClass: - simpleSecurityObject - organizationalRole userPassword: - {{pillar.ldap_admin_password}}
if third_party_auth.is_enabled() and pipeline.running(request): running_pipeline = pipeline.get(request) redirect_url = pipeline.get_complete_url(running_pipeline['backend'])
return parameter in signature(estimator.fit).parameters
CsrfViewMiddleware().process_view(req, token_view, (), {}) resp = token_view(req)
df = pd.DataFrame({0: [1, 2, 3]}) df.style._translate()
builtin = _get_builtin_permissions(opts) custom = list(opts.permissions) return builtin + custom
current_cohort = get_cohort(user, course_key) verified_cohort = get_cohort_by_name(course_key, verified_cohort_name)
return event['event_type'] == self.CHANGE_INITIATED_EVENT_NAME
self.generate_deleted_models() self.generate_created_models() self.generate_deleted_proxies() self.generate_created_proxies() self.generate_altered_options() self.generate_altered_managers()
klass = DatetimeIndex._simple_new kwargs = {'tz': tz} concat = _concat._concat_compat
def get_indexers_list():
return []
return all(conn.features.supports_transactions for conn in connections.all())
UserCourseTagFactory( user=self.student_user, course_id=self.course.id, key='xblock.partition_service.partition_{0}'.format(self.partition.id), value=str(user_partition_group) )
def get_result(other):
Created Certificate for "www.example.com": /etc/pki/my_little/certs/www.example.com.crt"
n_neighbors = 5
if query_interval is not None: command.QUERY_INTERVAL = query_interval
for kernel in kernels: gpc = GaussianProcessClassifier(kernel=kernel).fit(X, y) assert_almost_equal(gpc.log_marginal_likelihood(gpc.kernel_.theta), gpc.log_marginal_likelihood(), 7)
AUDIT_LOG.info("Redemption of a invalid RegistrationCode %s", registration_code) limiter.tick_bad_request_counter(request) raise Http404()
self._interval = 1000.
break
result = self.frame.reindex() assert_frame_equal(result, self.frame) self.assertFalse(result is self.frame)
option1=main1
time.sleep(0.1)
match = re.match(r'^(\d+)\.(\d+)(?:\.(\d+))?', ver)
i = np.random.permutation(len(left)) left = left.iloc[i].copy() left.index = np.arange(len(left))
band_data_hex = binascii.hexlify(band.data(as_memoryview=True)).upper()
try: year_str = self.cleaned_data["year_of_birth"] return int(year_str) if year_str is not None else None except ValueError: return None
self.assertQuerysetEqual( self.cia.members.all(), [] )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON)
import yaml import json
self.update_enrollment(mode=mode)
deadline = self.date return deadline is not None and deadline <= datetime.now(pytz.UTC)
wrapper.__module__ = getattr(user_function, '__module__') wrapper.__doc__ = getattr(user_function, '__doc__') wrapper.__name__ = getattr(user_function, '__name__') return wrapper
def f(): df = orig.copy() df.ix["j", :] = ["c", 2]
xdata, y_values = lines[0].get_data(orig=False)
self.assertEquals( preview.latex_preview('(2+3^2)'), r'\left(2+3^{2}\right)' )
cache.clear()
if not getattr(cls, self.attname, None): setattr(cls, self.attname, DeferredAttribute(self.attname, cls))
raise NotImplementedError
self.submission = "a=1" + self.unique_id[0:5]
from pandas import Series return Series(self._to_embed(), index=self, name=self.name)
alt_class = BadgeClassFactory.create( slug=badge_class.slug, issuing_component=badge_class.issuing_component, course_id=CourseFactory.create().location.course_key ) BadgeAssertionFactory.create(user=self.user, badge_class=alt_class)
assert_equal(sum(all_folds), 300)
resp = self.client.post(reverse('shoppingcart.views.use_code'), {'code': 'coupon1'}) self.assertEqual(resp.status_code, 200)
w = rng.randn(num_features)
vectorizer = vec_factory(max_df=0.6, max_features=4) vectorizer.fit(ALL_FOOD_DOCS) assert_equal(set(vectorizer.vocabulary_), expected_vocabulary) assert_equal(vectorizer.stop_words_, expected_stop_words)
select = None
certs_in_queue = [call_args[0] for (call_args, __) in mock_queue.call_args_list] self.assertEqual(len(certs_in_queue), expected_num) for cert in certs_in_queue: self.assertTrue(isinstance(cert, ExampleCertificate))
@override_settings(TIME_ZONE='US/Eastern') class DateTimePickerAltTimezoneSeleniumTests(DateTimePickerShortcutsSeleniumTests): pass
suitable_disks = [] query = vsan_system.QueryDisksForVsan() for item in query: if item.state == 'eligible': suitable_disks.append(item)
self.assertEqual( StudentModule.objects.filter( student=self.module_to_reset.student, course_id=self.course.id, module_state_key=self.module_to_reset.module_state_key, ).count(), 1 )
from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON, )
self.assertEqual(form.initial['password'], form['password'].value())
clf = MyEstimator(empty=np.nan) clf2 = clone(clf)
self.secure()
library = self.store.get_library(library_key) self.assertEqual(library.location.library_key, library_key)
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.djangonaut_book])
return (found_create_model_migration or found_add_field_migration), after_state
def __init__(cls, name, bases, dict): type.__init__(cls, name, bases, dict) cls.libv = LibVersion()
shutil.copyfile(path_in, path_test)
log.warning( 'Minion id {0} is not who it says it is!'.format( load['id'] ) ) return {}
assert_array_almost_equal(theil_sen.coef_, lstq.coef_, 9)
self.factory(penalty='foobar', l1_ratio=0.85)
return self.find_css(css).first.text[0]
mask = img.astype(bool)
import salt.config opts = salt.config.client_config(c_path)
redirect_response = self._redirect_if_necessary( message, already_verified, already_paid, is_enrolled, course_key, user_is_trying_to_pay, request.user, relevant_course_mode.sku ) if redirect_response is not None: return redirect_response
return self.day_format
raise NotImplementedError()
import logging
df = pd.DataFrame(np.random.randn(10, 4)) df.ix[:8] = np.nan
result = func(arr, min_periods=15) self.assertTrue(np.isnan(result[13])) self.assertFalse(np.isnan(result[14]))
required_boto3_version = '1.2.1'
urlpatterns += patterns( 'contentstore.views',
self.assertInCourseListing(source_course_key) self.assertInCourseListing(destination_course_key)
content = self.get_courseware_page().content self.assertTrue(self.sequential_display_name in content, "Subsection should be visible") self.assertEqual(staff_debug_expected, 'Staff Debug Info' in content)
return self.q(css='.action-edit-members').present
if coupon_redemption.exists(): coupon_codes = [redemption.coupon.code for redemption in coupon_redemption] order_item_dict.update({'coupon_code': ", ".join(coupon_codes)})
the_html2 = problem.get_html() self.assertEquals(the_html, the_html2)
if isinstance(ax, MultiIndex): level = ax._get_level_number(level) ax = Index(ax.get_level_values( level), name=ax.names[level])
obj = Node(connector=self.connector, negated=self.negated) obj.__class__ = self.__class__ obj.children = copy.deepcopy(self.children, memodict) return obj
if frame: try: func_name = frame.f_globals['__func_alias__'][func.__name__] except (AttributeError, KeyError): func_name = func.__name__
parser.add_argument( '--commit', action='store_true', dest='commit', default=False, help='Really commit the changes, otherwise, just dry run', )
from __future__ import absolute_import import os import json import logging import logging.handlers import datetime
K = rbf_kernel(np.atleast_2d(x), np.atleast_2d(y), **kwds) return K
return r['class'](obj)[0]
for chan_i in xrange(chans): channel = topo_X[..., chan_i] start_idx = foveate_channel(channel, rings, output, start_idx)
return hash(self.__class__) ^ hash(self.varname)
train_with_monitoring_datasets( train_dataset=dataset3, monitoring_datasets=no_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
raise ValueError( 'ignore_lst must be a list of parameters to ignore ' '%s (type %s) was given' % (ignore_lst, type(ignore_lst)))
values = [u('foo'), u('foofoo'), NA, u('foooofooofommmfoo')]
JSON_SCHEMA_DRAFT_4 = 'http://json-schema.org/draft-04/schema#'
import yaml
assert_raises(ValueError, gs.fit, X, y)
cputime_percent = (1.0e-7 * cputime / host_cpus) / vcpus
obj_au_settings = obj_au.Settings
bulk_ops_record.nest()
log.error('Received message without share: {0}'.format(msg)) return
termination_criterion = EpochCounter(5)
self.assertRaises(ValueError, self.df.groupby, level=1)
self.assertEqual(2, Interstate.objects.count())
if return_type is None: result = axes
if not qs.ordered: qs = qs.order_by(self.model._meta.pk.name)
'EMBARGO': False,
if encoding is None: if PY3: encoding = _default_encoding return encoding
try: course_assets = self._find_course_assets(course_key) self.asset_collection.remove(course_assets.doc_id) except ItemNotFoundError: pass
proc.start()
has_active_or_pending = SoftwareSecurePhotoVerification.user_has_valid_or_pending( user, queryset=verifications )
self.is_proctored_enabled = value
import salt.ext.six as six from salt.ext.six.moves import map, range, reload_module
from __future__ import absolute_import import os import logging
df = DataFrame({'x': [1, 2, 3]})
creation_counter = 0 auto_creation_counter = -1
CourseRerunState.objects.succeeded(course_key=self.course_key) self.expected_rerun_state.update({ 'state': CourseRerunUIStateManager.State.SUCCEEDED, }) rerun = self.verify_rerun_state()
history = HistoricalRecords()
if os.path.isfile(CONFIG): os.remove(CONFIG)
site_configuration = SiteConfigurationFactory.create( site=self.site, )
pillar_value = 'i am the pillar value\n'
SORT_REVISION_FAVOR_PUBLISHED = ('_id.revision', pymongo.ASCENDING)
different = (mbk_means_labels == 4) ax = fig.add_subplot(1, 3, 3)
import salt.utils.http
with remove_ccx(location) as (location, restore): return restore( self._modulestore.delete_item(location, user_id, **kwargs) )
filtered_visible_ids = None
hipchat.__salt__ = {}
try: cls.connect() except cls.driver.err.OperationalError: raise nose.SkipTest( "{0} - can't connect to MySQL server".format(cls))
self._set_opt_in_pref(self.user, self.TEST_ORG, True) self._set_opt_in_pref(self.user, "org_alias", False)
course_image_url = TextField() social_sharing_url = TextField(null=True) end_of_course_survey_url = TextField(null=True)
if len(ic): col_names = [r[0] if len(r[0]) and 'Unnamed' not in r[0] else None for r in header] else: col_names = [None] * len(header)
delete_index, = np.where(unlabeled_indices == image_index) delete_indices = np.concatenate((delete_indices, delete_index))
with store.branch_setting(ModuleStoreEnum.Branch.published_only, course.id): store.get_item(course.location)
self.assertFalse(linode._validate_name('foo-'))
self.set_many({kvs_key: value})
return (self.get_input_space(), self.get_input_source())
self._update_head(dest_course_key, index_entry, dest_course_key.branch, new_structure['_id'])
return [ tt.lower() for tt in map(_ustr,t) ]
result = Series(s.values).astype('datetime64[ns, US/Eastern]') assert_series_equal(result, s)
return BACKEND.get_dict(dict_name, default, **kwargs)
X_1d = X_1row.ravel() max_abs = np.abs(X_1d).max() assert_array_almost_equal(X_1d / max_abs, maxabs_scale(X_1d, copy=True))
if existing['code'] == 200:
lp = self.panel.filter(['ItemA', 'ItemB']).to_frame() with tm.assertRaises(ValueError): self.panel['ItemE'] = lp
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.assertQuerysetEqual( self.bob.groups.all(), [ 'CIA', 'Republican' ], attrgetter("name") )
types = [i.data_type_ for i in sparse_classifier.estimators_]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
return False
redeem_url = reverse('register_code_redemption', args=[context['reg_code_info_list'][0]['code']])
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010 13:30:05')
X = sparse.csr_matrix(X)
inline_xml = kwargs.pop('inline_xml')
from __future__ import absolute_import
query = self._course_key_to_son(location.course_key) query['definition.children'] = unicode(location)
url(r'^api/profile_images/', include('openedx.core.djangoapps.profile_images.urls')),
response = self.client.post(self.visibility_url) self.assertEqual(response.status_code, 404)
SINGLE_EMAIL_FAILURE_ERRORS = (
element_css = self.BOTTOM_ADD_SECTION_BUTTON if click_child_icon: element_css += " .fa-plus" click_css(self, element_css)
self.assertIn( 'Update not available', self.run_function('softwareupdate.download', ['spongebob']))
IS_WIN = win_firewall.__virtual__()
import yaml import jinja2 import jinja2.exceptions from xml.dom import minidom import salt.ext.six as six
if win32api.GetUserName() == 'SYSTEM': return runas_system(cmd, username, password)
self.assertLess(translation_count, len(trans_real._translations))
sys.stdout.write('Generating master config...') self.mkconf() print('done')
if isinstance(ds_input, six.string_types) and json_regex.match(ds_input): ds_input = json.loads(ds_input)
cursor.execute('SET SQL_AUTO_IS_NULL = 0')
return "{}/container/{}".format(BASE_URL, self.locator)
expected = Series([Timestamp('2012/01/01', tz='UTC')]) expected2 = Series([Timestamp('1999/01/01', tz='UTC')])
if 'COMMAND' in chunks[1]:
log = logging.getLogger(__name__)
if allow_empty: if is_previous: result = get_current(start - datetime.timedelta(days=1)) else: result = end
try: shutil.rmtree(lock_file) except OSError as exc: _add_error(failed, exc)
offset = CBMonthBegin() offset2 = CBMonthBegin() offset2.normalize = True self.assertEqual(offset, offset2)
self.assertRaises(TypeError, lambda: ci.insert(0, 'd'))
class MyModel5(ConcreteParentWithManager): class Meta: manager_inheritance_from_future = True self.assertIs(MyModel5.default, MyModel5._default_manager) self.assertIsNone(getattr(MyModel5, 'objects', None))
if refresh: refresh_db()
with open(filename) as f: results = f.read() os.remove(filename) return results
return make_immutable_fields_list( "many_to_many", (f for f in self._get_fields(reverse=False) if f.is_relation and f.many_to_many) )
request = RequestFactory().get('/')
result[mask] = 0.0
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
idx1 = pd.period_range('2011-01-01', '2011-01-31', freq='D', name='idx')
self.assertEquals(self.conn.get_definitions.call_count, 0)
CONTENT_RE = re.compile(r"(?P<start>\d{1,11})-(?P<stop>\d{1,11})/(?P<end>\d{1,11})")
GraphLassoCV(alphas=[0.8, 0.5], tol=1e-1, n_jobs=1).fit(X)
self.youtube_configuration.update({ 'time_to_response': 2.0, 'youtube_api_blocked': True, })
for name, line, exp_z in interstate_data: line_3d = GEOSGeometry(line, srid=4269) line_2d = LineString([l[:2] for l in line_3d.coords], srid=4269)
if not _exists: _exists = name in ls_(cache=False, path=path) return _exists
if user_partition.active: for group_id in group_ids: try: user_partition.get_group(group_id) except NoSuchUserPartitionGroupError: has_invalid_groups = True
if not self.dispatch_one_batch(self._original_iterator): self._iterating = False self._original_iterator = None
return self._spatial_attribute('num_geom', {}, **kwargs)
self.assertIn(orphan, self.store.get_orphans(course.id))
return { 'gender': {'user__profile__gender': value}, 'level_of_education': {'user__profile__level_of_education': value}, }[feature]
self.q(css='.create-team .action-primary').first.click() self.wait_for_ajax()
from __future__ import absolute_import
self.assertTrue(form.is_valid()) self.assertEqual(form.cleaned_data['dt'], datetime.datetime(2011, 10, 30, 2, 30, 0))
return self.prior.get_params()
def parse_raster(self, value): return from_pgraster(value)
self.assertIn( "<script type=\"text/javascript\">function(){}</script>", etree.tostring(rendered_html) )
self.assert_social_auth_exists_for_user(request.user, strategy) self.assert_account_settings_context_looks_correct(account_settings_context(request), request.user, linked=True)
return getattr(self.queryables.get(self.lhs), 'metadata', None)
course_key = CourseKeyField() class Meta(object): model = CreditCourse exclude = ('id',)
response = self.client.get('/syndication/atom/') feed = minidom.parseString(response.content).firstChild updated = feed.getElementsByTagName('updated')[0].firstChild.wholeText
result = f.clean('21.12.2010 13:30') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
from __future__ import absolute_import import multiprocessing import ctypes import logging import os import hashlib import shutil import binascii
import_course_from_xml( self.store, self.user.id, root_dir, ['test_export'], static_content_store=content_store, target_id=course_id, )
log = logging.getLogger(__name__)
path = []
def award(self, badge_class, user, evidence_url=None): return BadgeAssertionFactory(badge_class=badge_class, user=user)
from __future__ import unicode_literals
operations = [ migrations.AlterField( model_name='logentry', name='action_time', field=models.DateTimeField( verbose_name='action time', default=timezone.now, editable=False, ), ), ]
LmsAutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id).visit()
if 'SYN' in flags and len(flags) == 1: return 10 elif 'FIN' in flags: return 12
assert images.type.broadcastable == acts.type.broadcastable assert images.type.broadcastable == denoms.type.broadcastable assert images.type.broadcastable == dout.type.broadcastable
asset_md = store.get_all_asset_metadata(course.id, 'asset') self.assertEquals(asset_md, [])
response_dict = self._get_page_data(response) self.assertEqual(response_dict['message_key'], expected_message)
resp = self.client.get('/') self.assertEquals(resp['X-Frame-Options'], 'ALLOW')
course_enrollments = list(get_course_enrollments(user, course_org_filter, org_filter_out_set))
f = models.ForeignKey(Target, models.CASCADE)
name = models.CharField(max_length=30, unique=True) def __str__(self): return self.name
self.conn.put_method.side_effect = ClientError(error_content, 'put_method')
notes = [] for component in self.components: notes.extend(component.notes) return notes
__virtualname__ = 'apt'
source_store = self.store._get_modulestore_by_type(source_modulestore) dest_store = self.store._get_modulestore_by_type(destination_modulestore) self.assertCoursesEqual(source_store, source_course_key, dest_store, dest_course_id)
df2 = DataFrame(np.ones(5), MultiIndex.from_arrays([l0, l1]))
import integration import salt.ext.six as six from salt.modules import mysql as mysqlmod
from __future__ import absolute_import import os import sys import getpass import platform import yaml import signal import shutil import tempfile import logging
import salt.utils import salt.config as config from salt.exceptions import ( SaltCloudConfigError, SaltCloudNotFound, SaltCloudExecutionFailure, SaltCloudExecutionTimeout, SaltCloudSystemExit )
with self.assertRaises(ImproperlyConfigured): self.backend()
secret = secret or self.JWT_SECRET_KEY token = jwt.encode(payload, secret) return token
SSL_AUTH_EMAIL_DOMAIN = "MIT.EDU" SSL_AUTH_DN_FORMAT_STRING = "/C=US/ST=Massachusetts/O=Massachusetts Institute of Technology/OU=Client CA v1/CN={0}/emailAddress={1}"
self.user_partition.scheme.current_group = groups[0] group1 = self.partition_service.get_group(self.user_partition) self.assertEqual(group1, groups[0])
expected = None
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
self.visit(node)
klass._setup_axes(axes=orders, info_axis=info_axis, stat_axis=stat_axis, aliases=aliases, slicers=slices)
ls = salt.utils.alias_function(list_tab, 'ls')
return self.ROOT + value
problem = new_loncapa_problem(xml_str)
'edxval',
course_module = modulestore().get_course(course_id)
cummin = self.tsframe.cummin(axis=1) expected = self.tsframe.apply(Series.cummin, axis=1) tm.assert_frame_equal(cummin, expected)
with default_signals(signal.SIGINT, signal.SIGTERM):
from __future__ import absolute_import
PASSWORD_MIN_LENGTH = 2 PASSWORD_MAX_LENGTH = 75
nodes = modulestore().get_items(reusable_location, qualifiers={'category': 'chapter'}) new_course_loc = modulestore().delete_item(nodes[0].location, self.user_id)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if self._has_same_tz(value): return _to_m8(value) raise ValueError('Passed item and index have different timezone')
account_settings = AccountSettingsPage(self.browser).visit() account_settings.switch_account_settings_tabs('accounts-tab')
pass
SplitMongoKVSid = namedtuple('SplitMongoKVSid', 'id, def_id') new_contract('BlockUsageLocator', BlockUsageLocator)
self.__init__()
for layer, state in safe_izip(dbm.hidden_layers, H_hat): upward_state = layer.upward_state(state) layer.get_output_space().validate(upward_state)
pass
'ipc_mode': str,
self.assertEqual(response.status_code, 405)
if cache: __salt__['file.remove'](tfile)
axes = df.hist(column='height', ax=axes)
repo_dir = self.git_repo_dir if not os.path.isdir(repo_dir): os.mkdir(repo_dir) self.addCleanup(shutil.rmtree, repo_dir)
from __future__ import unicode_literals
arr = np.arange(20, dtype=float) index = np.arange(20) arr[:2] = nan arr[5:10] = nan arr[-3:] = nan
james.delete()
xblock.group_access = {partition_id: group_ids} self.store.update_item(xblock, self.user.id)
self.assert_register_response_in_pipeline_looks_correct( student_views.register_user(strategy.request), pipeline.get(request)['kwargs'])
from __future__ import unicode_literals
count = 100 if not isinstance(trim_output, bool): count = trim_output
mock_val_api.ValVideoNotFoundError = _MockValVideoNotFoundError mock_val_api.export_to_xml = Mock(side_effect=mock_val_api.ValVideoNotFoundError) self.descriptor.edx_video_id = 'test_edx_video_id'
return self.provider_id
all_leaves = est.tree_.children_left == TREE_LEAF assert_array_almost_equal(np.dot(node_indicator, all_leaves), np.ones(shape=n_samples))
self.intIndex.name = 'foobar' casted = self.intIndex.astype('i8') self.assertEqual(casted.name, 'foobar')
pygit2ver = distutils.version.LooseVersion(pygit2.__version__) pygit2_minver = distutils.version.LooseVersion(PYGIT2_MINVER)
profile = vm_.get( 'lxc_profile', vm_.get('container_profile', None))
csgraph_from_dense = None
if self.is_active and self.is_superuser: return True
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
import re import socket
return None
return (user, password)
resp = self.client.get(self.url + '?_accept=application/x-tgz') self._verify_export_succeeded(resp)
dis = cosine_distances(X)
self.xblock.location = Location("org", "import", "run", "category", "stubxblock")
return
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
field_overrides = current_provider.get_register_form_data( running_pipeline.get('kwargs') )
self.q( css='#paging-header-select option[value={sort_order}]'.format(sort_order=sort_order) ).click() self.wait_for_ajax()
if isinstance(result, com.ABCSeries) and self._selection is not None: result.name = self._selection return result
import warnings
n_clusters_1 = len(set(labels)) - int(-1 in labels) assert_equal(n_clusters_1, n_clusters)
DATE_INPUT_FORMATS = [
if status is not None: days_until_deadline = None
from_fields=['company', 'customer_id'], to_fields=['company', 'customer_id'],
rng = np.random.RandomState(0) n, p = 50, 3
'-oStrictHostKeyChecking=no', '-oUserKnownHostsFile=/dev/null', '-oControlPath=none'
@property def area(self): "Returns the area of the Geometry." return capi.geos_area(self.ptr, byref(c_double()))
self.assertEqual(200, response.status_code)
__virtualname__ = 'junos'
return etree.Element("optionresponse")
}
if perm != 'global': return ACCESS_DENIED return ( ACCESS_GRANTED if GlobalStaff().has_user(user) or SupportStaffRole().has_user(user) else ACCESS_DENIED )
self._verify_non_staff_cannot_access(cohort_discussion_topics, "GET", [unicode(self.course.id)])
self.settings_detail.refresh_page() self.settings_detail.wait_for_prerequisite_course_options() dropdown_status = is_option_value_selected( browser_query=self.settings_detail.pre_requisite_course_options, value=pre_requisite_course_id ) self.assertTrue(dropdown_status)
check_is_fitted(self, 'n_components_') return np.dot(W, self.components_)
self.assertTrue(payload.get('success'))
with self.assertRaises(ImproperlyConfigured): self.client.get('/syndication/articles/')
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
iris = datasets.load_iris() X = iris.data y = iris.target
self.cohort_management_page.save_discussion_topics(key)
__virtualname__ = 'nictagadm'
if which == 'LM':
return self._geom_attribute('force_rhr', **kwargs)
delete = self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) delete_str = ''.join(delete)
return [ self._cohort_name(opt.text) for opt in self._get_cohort_options().filter(lambda el: el.get_attribute('value') != "") ]
time.sleep(10)
other_args = {'anion': 'hydroxide', 'cation': 'ammonium'} _validate_ret(parallels._normalize_args(other_args))
check_arguments_for_rescoring(usage_key)
self.assertEqual(self.func(None), [base.W006])
self.assertEqual(book.editor._state.db, 'other')
if not self.in_atomic_block: raise TransactionManagementError( "The rollback flag doesn't work outside of an 'atomic' block.") self.needs_rollback = rollback
msg = "0 feature(s) (shape=(1, 0)) while a minimum of 1 is required." assert_raise_message(ValueError, msg, check_array, [[]])
self.assertGreater(len(sections), 0, "No sections found")
class ShortCategory(forms.ModelForm): name = forms.CharField(max_length=5) slug = forms.CharField(max_length=5) url = forms.CharField(max_length=3)
self.estimators_ = []
migrate_cohort_settings(course)
idx = DatetimeIndex(['2016-05-16', 'NaT', NaT, np.NaN])
from __future__ import absolute_import
log = logging.getLogger(__name__)
'ext_pillar': list,
self.assertRaises(ValueError, df2.stack, level=['animal', 0])
class UserPreferenceFactory(DjangoModelFactory): class Meta(object): model = UserPreference
precor = [None] * len(self.activations) for idx, val in evens_copy + odds_copy: assert precor[idx] is None precor[idx] = val assert None not in precor
import salt.utils import salt.utils.timed_subprocess import salt.grains.extra from salt.exceptions import CommandExecutionError, SaltInvocationError,\ TimedProcTimeoutError
self.assertListEqual(got, ['café', 'café', 'caf\ufffd', 'café'])
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
if encoding is not None and len(data): data = Series(data.ravel()).str.encode( encoding).values.reshape(data.shape)
version.append(x)
union_idx = idx1.union(idx2) expected = idx2 self.assertEqual(union_idx.ndim, 1) self.assert_index_equal(union_idx, expected)
try: expiry = kwargs['expiry'] except KeyError: expiry = self.get('_session_expiry')
COURSE_CATALOG_VISIBILITY_PERMISSION = 'see_exists'
LOGGING_STORE_HANDLER = None break
self.register_page.visit() self.assertScreenshot('#register .login-providers', 'register-providers-{}'.format(self.browser.name))
return etree.Element( 'video_asset', attrib={'export_edx_video_id': edx_video_id} )
CommitOnSuccessManager.ENABLED = True OuterAtomic.ALLOW_NESTED = False OuterAtomic.atomic_for_testcase_calls -= 1 return wrapped_func(*args, **kwargs)
if not ((user.id and CourseEnrollment.is_enrolled(user, course.id)) or has_access(user, 'staff', course)): raise UserNotEnrolled(course.id)
course_locator = self._map_revision_to_branch(course_locator) return super(DraftVersioningModuleStore, self).get_course_history_info(course_locator)
problem = new_loncapa_problem(xml_str)
self.assertEqual(self.cf.get_option(option_name), original_value)
__virtualname__ = 'svn'
pass
idx = pd.Index(pd.Categorical(['a', 'b']))
return pairs, conf_list
pass
from salt.states import lvs_service
from salt.states import lvs_server
BULK_EMAIL_ROUTING_KEY = HIGH_PRIORITY_QUEUE
launchctl.__salt__ = {}
import salt.utils
if inline_collections: for item in tab.items(course): yield item elif len(list(tab.items(course))) > 0: yield tab
cache_key = self._cache_key_for_kvs_key(kvs_key) return ( cache_key in self._cache and kvs_key.field_name in self._cache[cache_key] )
try: select = Select(query.first.results[0]) return (True, select.first_selected_option.text) except StaleElementReferenceException: return (False, None)
import salt.states.gem as gem gem.__salt__ = {} gem.__opts__ = {'test': False}
assert_allclose(f(x_mlp).flatten(), g(x).flatten(), rtol=1e-5, atol=5e-5)
pass
categoricals = [x for x in to_concat if com.is_categorical_dtype(x.dtype)]
if auto_created: self.creation_counter = Field.auto_creation_counter Field.auto_creation_counter -= 1 else: self.creation_counter = Field.creation_counter Field.creation_counter += 1
nagios.__salt__ = {}
first = pd.DataFrame([[datetime(2016, 1, 1)]]) first[0] = first[0].dt.tz_localize('UTC')
clf = self.factory(alpha=0.01, eta0=0.01, n_iter=5, shuffle=False, learning_rate=lr) clf.fit(X, Y)
with warnings.catch_warnings(record=True) as warns: warnings.simplefilter('always', RemovedInDjango20Warning) MyModel._base_manager self.assertEqual(len(warns), 0)
from __future__ import absolute_import
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
gsu = model.get_sampling_updates updates, layer_to_chains = gsu(layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps, return_layer_to_updated=True)
self.add_dropdown_to_section(vertical_1.location, 'H2P1_GROUP1', 1).location.html_id()
self.frame.index = old_index
FOOTER_BROWSER_CACHE_MAX_AGE = 5 * 60
raise AbstractMethodError(self)
result = Timestamp(result) self.assertEqual(result.value, expected) self.assertEqual(tslib.pydt_to_i8(result), expected)
klass = DataCol name = None
return xblock._edit_info.get('published_date')
for example in NON_ARRAY_LIKE_EXAMPLES: assert_raises(ValueError, unique_labels, example)
raise NotImplementedError()
def test_explicit_ForeignKey(self): Package.objects.create() screening = Screening.objects.create(movie=self.movie) Package.objects.create(screening=screening)
raise Exception('dateutil 2.0 incompatible with Python 2.x, you must ' 'install version 1.5 or 2.1+!')
) DIRECT_MS_SETUPS_SHORT = ( 'mongo', #'split', ) MODULESTORE_SETUPS = DIRECT_MODULESTORE_SETUPS + MIXED_MODULESTORE_SETUPS MODULESTORE_SHORTNAMES = DIRECT_MS_SETUPS_SHORT + MIXED_MS_SETUPS_SHORT SHORT_NAME_MAP = dict(zip(MODULESTORE_SETUPS, MODULESTORE_SHORTNAMES))
from __future__ import unicode_literals
data_to_sign = self._compute_digest(user_id) self.signature = signing.dumps(data_to_sign, salt=self.key_salt)
class WidePanel(Panel): def __init__(self, *args, **kwargs): warnings.warn("WidePanel is deprecated. Please use Panel", FutureWarning, stacklevel=2)
return "datetime64[{unit}, {tz}]".format(unit=self.unit, tz=self.tz)
from unit.modules.boto_iot_test import BotoIoTTestCaseMixin
for k, v in self.headers.items(): if '_' in k: del self.headers[k]
self.prev_floatX = config.floatX config.floatX = 'float64'
log.exception( "Unexpected exception while attempting to initiate refund for user [%s], course [%s]", course_enrollment.user.id, course_enrollment.course_id, )
s = Series(range(5)) with self.assertRaisesRegexp(AttributeError, 'only use .str accessor'): s.str.repeat(2)
self._verify_exam_data(sequence, expected_active)
self.observers.append(observer)
if hasattr(self, 'input_source'): return self.input_source else: return 'features'
genesis.__grains__ = {} genesis.__salt__ = {} genesis.__context__ = {} genesis.__opts__ = {}
css_click('#{}'.format(elem_id))
time.sleep(1) return info(name).get('home') == home
self._folds = stacked_blocks
cache_key = cls.CACHE_KEY.format(course_key=course_key) cache.delete(cache_key) log.info("Invalidated country access list for course %s", course_key)
(validate_integer, '42', None), (validate_integer, '-42', None), (validate_integer, -42, None),
X = check_array(X) n_samples, n_features = X.shape
all_models_but_abstractperson = (m for m in self.all_models if m is not AbstractPerson) for m in all_models_but_abstractperson: self.assertIn('_relation_tree', m._meta.__dict__)
if published_parents > 1: non_orphan_parents = self._get_non_orphan_parents(location, all_parents, revision) return cache_and_return(non_orphan_parents[0].replace(run=location.course_key.run))
self.profile.year_of_birth = year_of_birth self.profile.save()
self.measures.append((name, size))
del poly
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
return self._maybe_mask_results(_algos.arrmap_object( self.asobject.values, lambda x: x.date()))
html()
self.client = Client() assert_true(self.client.login(username=uname, password=password))
self.assertTrue(linode._validate_name('foo_bar'))
if self.is_datetime64tz_lhs: lvalues = lvalues.tz_localize(None) if self.is_datetime64tz_rhs: rvalues = rvalues.tz_localize(None)
from salt.exceptions import SaltInvocationError import salt.utils.pushover
keyarr = _asarray_tuplesafe(key)
self.choice = None
if not hasattr(new_class, attr_name): new_class.add_to_class(attr_name, field)
module = import_module('%s.management.commands.%s' % (app_name, name)) return module.Command()
qbuffer.extend([[None, s] for s in args])
key1 = tm.rands_array(10, 10000) key1 = np.tile(key1, 2) key2 = key1[::-1]
content = template.render({'processors': 'no'}, request) self.assertEqual(content, 'no')
if os_family == 'suse': PATTERNS = 'pkg.list_installed_patterns' elif os_family == 'redhat': PATTERNS = 'pkg.group_list' else: PATTERNS = None
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
ret_list.append('%s: %s,' % (key, val))
self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 1)
dates = [] with self.assertNumQueries(0): article_datetimes_iterator = Article.objects.datetimes('pub_date', 'day', order='DESC').iterator()
CourseModeFactory.create( course_id=self.course.id, mode_slug=CourseMode.VERIFIED, mode_display_name=CourseMode.VERIFIED, expiration_datetime='1970-01-01 05:00:00' )
ROLE = "course_creator_group" def __init__(self, *args, **kwargs): super(CourseCreatorRole, self).__init__(self.ROLE, *args, **kwargs)
handler404 = 'static_template_view.views.render_404' handler500 = 'static_template_view.views.render_500'
for fmt in self.fmtlist: self._write(_pad_bytes(fmt, 49))
result = df.fillna({'a': 0, 'b': 5, 'd': 7})
six.reraise(DeserializationError, DeserializationError(e), sys.exc_info()[2])
assert_event_matches(expected, actual, tolerate=EventMatchTolerates.strict())
for prop in vmconfig['state']: if prop in vmconfig_type['instance'] or \ prop in vmconfig_type['collection'] or \ prop in vmconfig_type['create_only']: continue
task = host_ref.parent.Destroy_Task()
class Meta(ConfigurationModel.Meta): app_label = "util"
if existing['code'] == 200:
TASK_ACTION_EXEC = 0 TASK_ACTION_COM_HANDLER = 5 TASK_ACTION_SEND_EMAIL = 6 TASK_ACTION_SHOW_MESSAGE = 7
self.assertContains(response, 'programData') self.assertContains(response, self.data['name'])
self.assertEqual(CourseEnrollment.objects.count(), 1) enrollment = CourseEnrollment.objects.get(course_id=course_key) self.assertEqual(enrollment.user.username, "test")
nftables.__salt__ = {} nftables.__opts__ = {}
return self.values.searchsorted(key, side=side, sorter=sorter)
self.wrapper = wrapper
import logging
def __init__(self, user=None, course_id=None): super(TestCcxObject, self).__init__(user, course_id) self.coach = user
db_table = "Fixtures_regress_plant"
PARENTAL_CONSENT_AGE_LIMIT = 13
lresult = last.value + (offset.nanos - loffset)
def __init__(self): pass
resp = self.client.ajax_post( first_update_url, payload, HTTP_X_HTTP_METHOD_OVERRIDE="PUT", REQUEST_METHOD="POST" )
if isinstance(self.index, RangeIndex): return
return render_to_response('discussion/index.html', context)
for i in range(self.n_layers_ - 1): n_fan_in, n_fan_out = layer_units[i], layer_units[i + 1]
from salt.modules import chef
jid_dir, jid_file = self._make_tmp_jid_dirs(create_files=False)
ret = [] for process in response['Processes']: cur_proc = {} for idx, val in enumerate(process): cur_proc[columns[idx]] = val ret.append(cur_proc) return ret
if connector == '^': return 'django_power(%s)' % ','.join(sub_expressions) return super(DatabaseOperations, self).combine_expression(connector, sub_expressions)
if record == channel_0.length: bad_channel.append(channel) continue
expected = DataFrame(comb, columns=names[::-1]) result = DataFrame(mrecs, columns=names[::-1]) assert_fr_equal(result, expected)
import re import logging
store.put('p2', p_empty) assert_panel_equal(store.select('p2'), p_empty)
try: import memcache HAS_MEMCACHE = True except ImportError: HAS_MEMCACHE = False
attrs['freq'] = 'infer'
rng = np.random.RandomState([2012, 10, 9]) batch_size = 5 rows = 10 cols = 9 channels = 3 filter_rows = 4 filter_cols = filter_rows + 1 num_filters = 6
return bool(getattr(content, "locked", False))
self._build_data_specs()
rm_known_host(user, hostname, config=config)
msg = "Manager isn't available; AbstractBase2 is abstract" with self.assertRaisesMessage(AttributeError, msg): AbstractBase2.restricted.all()
click_css(self, 'a.action-discard', 0, require_notification=False) confirm_prompt(self) self.wait_for_ajax()
return getattr(estimator, "_estimator_type", None) == "classifier"
class TestW3CGeo2(TestGeoRSS2): feed_type = feeds.W3CGeoFeed
lm = LayerMapping(CountyFeat, co_shp, cofeat_mapping, transform=False) lm.save(silent=True, strict=True)
if '.' in high[name]: comps = high[name].split('.') high[name] = { comps[0]: [comps[1]] } continue
answer_given = submission[0]
book = Book.objects.using('other').select_related('editor').get(title="Dive into Python")
exhaust(stream)
original_values_map = self.get_settings_fields_of_each_type() self.set_wrong_inputs_to_fields() self.advanced_settings.wait_for_modal_load()
assert_equal(train.intersection(test), set())
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
hist = s.value_counts(ascending=True) expected = Series([1, 2, 3, 4], index=list('cdab')) tm.assert_series_equal(hist, expected)
remote_refs.append( line.split()[-1].replace(b'refs/heads/', b'refs/remotes/origin/') )
axis = uniques
return self.state != 'buffering'
self.course_nav.q(css='input[id^=input_][id$=_2_1]').fill('A*x^2 + sqrt(y)')
from __future__ import absolute_import import os import stat import logging
path = os.path.normpath(path)
self.assertEqual(xblock_info['is_proctored_exam'], True) self.assertEqual(xblock_info['is_time_limited'], True) self.assertEqual(xblock_info['default_time_limit_minutes'], 100)
if y.ndim == 1: y = y.reshape((-1, 1))
self._set_deadlines(course.id, upgrade_deadline=deadline, verification_deadline=deadline)
self.assertRaises(TypeError, Index, 0)
diff = df.memory_usage(deep=True).sum() - sys.getsizeof(df) self.assertTrue(abs(diff) < 100)
reg_software.update({d_name: d_vers})
try: import hglib except ImportError: hglib = None
self.save()
config = CourseOverviewImageConfig.current() if not config.enabled: return
rng = pd.date_range('2012-06-12', periods=4, freq='h')
salt_path = os.path.abspath(os.path.join(__file__, os.path.pardir)) return {'saltpath': os.path.dirname(salt_path)}
if not GlobalStatusMessage.current().enabled: return None
import logging
self.assertIn('You must wait', result['success'])
for k in margin_keys: if isinstance(k, compat.string_types): row_margin[k] = grand_margin[k] else: row_margin[k] = grand_margin[k[0]]
return tasks.environment.messages
cleaned_files = [] with contextlib.closing(zipfile.ZipFile(zip_file, "r")) as zfile: files = zfile.namelist()
try: return getattr(self.table.cols, self.cname).is_indexed except: False
response = super(Client, self).put(path, data=data, content_type=content_type, secure=secure, **extra) if follow: response = self._handle_redirects(response, **extra) return response
from salttesting import TestCase, skipIf from salttesting.helpers import ( ensure_in_syspath, requires_network, skip_if_binaries_missing ) ensure_in_syspath('../..')
return render_to_string(template_name, dictionary, context, namespace="lms." + namespace)
return not self.is_private
exclude = self._get_validation_exclusions() try: self.instance.validate_unique(exclude=exclude) except ValidationError as e: self._update_errors(e)
self.cleanup() if self.running: self.running = False self.timer_stop.set() self.timer.join()
import salt.minion import salt.utils import salt.utils.network import integration from salt import config as sconfig from salt.exceptions import SaltCloudConfigError
y = zca_dataset.mapback(zca_dataset.X) assert_allclose(x[start:stop], y)
from __future__ import absolute_import import datetime import os import time import pickle import logging
video_html = get_preview_fragment(request, self.video, context).content self.assertNotRegexpMatches(video_html, "<select")
remaining_labels = self.sorted_labels[:-1] level_sizes = [len(x) for x in new_levels]
args = args and list(args) or []
select_element = page.q(css=selector) self.assertTrue(select_element.is_present()) return [option.text for option in Select(select_element[0]).options]
all_links = self.q(css='a.enter-course').map(lambda el: el.get_attribute('href')).results
#epub_scheme = ''
for raw in jinfo_iter: if raw is None: break
group_keys = keys group_levels = self.grouper.levels group_names = self.grouper.names
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.5, random_state=0)
return super(Least, self).as_sql(compiler, connection, function='MIN')
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
assert_array_almost_equal(clf.scores_[2], clf1.scores_[2]) assert_array_almost_equal(clf.intercept_[2:], clf1.intercept_) assert_array_almost_equal(clf.coef_[2][np.newaxis, :], clf1.coef_)
self.assertEqual(source.geom, g.geom_name) self.assertEqual(source.gtype, g.geom_type)
pkg_404_comms = []
filter_rows_broadcastable = False filter_cols_broadcastable = False output_channels_broadcastable = hid_grads.type.broadcastable[0]
connectivity = kneighbors_graph(X, n_neighbors=10, include_self=False) connectivity = 0.5 * (connectivity + connectivity.T)
import salt.utils
expected = Series([2, 0], index=Float64Index([5.0, 0.0]))
n_i = used_node[i] n_j = used_node[j] used_node[k] = n_i + n_j used_node[i] = used_node[j] = False
self.xmodule.verify_oauth_body_sign(self.get_signed_grade_mock_request())
self._mock_paver_needs = patch.object(pavelib.js_test.test_js, 'needs').start() self._mock_paver_needs.return_value = 0
for i in xrange(int(numpy.sqrt(N)),0, -1): if 0 == N % i: return (i, N/i)
with self.assertRaisesMessage(ValueError, self.error % (self.wrong_type, ObjectA._meta.object_name)): ObjectB.objects.get(objecta=self.wrong_type)
from __future__ import absolute_import import socket import os.path
return str(self.__cast())
wait_lock(w_lock, list_cache, 15 * 60)
from salt.modules import npm from salt.exceptions import CommandExecutionError import json
try: return X.iloc[indices] except ValueError: warnings.warn("Copying input dataframe for slicing.", DataConversionWarning) return X.copy().iloc[indices]
pairs = [('1988-Q2', '1988Q2'), ('2Q-1988', '2Q1988'), ]
math_interpreter = ParseAugmenter(math_expr, case_sensitive) math_interpreter.parse_algebra()
self.assertRaises(TypeError, rng.__lt__, rng[3].value)
progress = {'message': TEST_FAILURE_MESSAGE, 'exception': TEST_FAILURE_EXCEPTION, } return self._create_entry(task_state=FAILURE, task_output=progress)
if keys is None: keys = store.keys() self.assertEqual(set(keys), set(tstore.keys()))
_config_filename_ = 'master'
return self.q(css='#tabpanel-browse ' + CARD_TITLE_CSS).map(lambda e: e.text).results
import yaml from jinja2 import Environment, DictLoader, exceptions try:
blocks_before = len(self._data.blocks) result = f() if len(self._data.blocks) != blocks_before: self._clear_item_cache() return result
try: import win32gui import win32con HAS_WIN32 = True except ImportError: HAS_WIN32 = False
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book, self.djangonaut_book])
return to
from __future__ import absolute_import import time import pprint import logging
pass
self._send_handler_response("POST")
y = 0.5 * X.ravel()
if values: return f.values[i]
#self.debug(msg)
course_name = re.sub(r"[^\w.-]", '_', course_id.course)
self._studio_publish_content(0)
if not isinstance(self.remote_field.model, ModelBase): return []
if isinstance(sheetname, list): sheets = sheetname ret_dict = True elif sheetname is None: sheets = self.sheet_names ret_dict = True else: sheets = [sheetname]
if config.__flatten__ is True: serialized_config = config.serialize() cls.after_items_update.append(serialized_config) skip_order = True else: properties[item_name] = config.serialize()
def get_queryset(self, request): return super(TelegramAdmin, self).get_queryset(request).only('title')
if cal_sstats: norm_phi = np.dot(exp_doc_topic_d, exp_topic_word_d) + EPS suff_stats[:, ids] += np.outer(exp_doc_topic_d, cnts / norm_phi)
with patch('capa.capa_problem.LoncapaProblem.rescore_existing_answers') as mock_rescore: mock_rescore.side_effect = exception_class(u'test error \u03a9') result = module.rescore_problem()
invalid_fields = []
ret = {} ret['result'] = False ret['comment'] = 'Event module not available. Beacon add failed.' return ret
self.assertQuerysetEqual( Annotation.objects.filter(notes__in=Note.objects.filter(note="n1")), ['<Annotation: a1>'] )
self.session.delete()
xrange = range
return JsonResponse(data)
_config_filename_ = 'master'
if self.request.COOKIES.get(settings.SESSION_COOKIE_NAME): self.client.response.cookies[settings.SESSION_COOKIE_NAME] = self.request.COOKIES[ settings.SESSION_COOKIE_NAME ]
old_field_name = None counters = [0] * len(handlers)
self.assert_function_values( 'sqrt',
self.assertTrue(repr(qs[0].note), '<Note: n2>') self.assertEqual(repr(qs[0].creator.extra.note), '<Note: n1>')
self.add_dropdown_to_section(vertical_1.location, 'H2P1_GROUP1', 1).location.html_id()
sh("mongo {host}:{port} {repo_root}/scripts/delete-mongo-test-dbs.js".format( host=MONGO_HOST, port=MONGO_PORT_NUM, repo_root=Env.REPO_ROOT, ))
M = M.T
from __future__ import unicode_literals
self.wait_for_element_visibility('#password-reset-email', 'Email field is shown') self.q(css="#password-reset-email").fill(email)
assert_equal(n_splits[i], cv.get_n_splits(X, y, labels))
update_session_auth_hash(request, form.user) return HttpResponseRedirect(post_change_redirect)
with tm.assertRaisesRegexp(ValueError, 'Length of names'): self.index.set_names(names[0], level=[0, 1])
kwargs['python_shell'] = False ret = __salt__['cmd.run_all'](cmd, **kwargs)
seq_it = iter(seq) seq_it_next = iter(seq) next(seq_it_next)
self.assertEqual(new_version.test_content_field, 'Explicitly set') self.assertEqual(new_version.test_settings_field, 'Explicitly set')
elif isinstance(get_mixed_stores(module_store_setting), dict): warnings.warn( "Using a dict for the Stores option in the MixedModuleStore is deprecated. Please use a list instead.", DeprecationWarning )
msg = u"Skipping {}, already enrolled in destination course {}" print msg.format(user.username, unicode(dest_key))
self._navigate_to_course_unit_page() self.assertTrue(self.video.is_controls_visible())
if discussion_id is not None: default_query_params['commentable_id'] = discussion_id if get_team(discussion_id) is not None: default_query_params['context'] = ThreadContext.STANDALONE
return 'f_table_name'
self.alter_db_table(model, temp_model._meta.db_table, model._meta.db_table)
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
cherrypy.config.update({'environment': "test_suite"})
salt '*' win_update.list_updates fields="['Title', 'Description']"
import matplotlib.pyplot as plt
self.io_loop.spawn_callback( self._handle_connection, client_socket, address)
setattr(self.attrs, self.kind_attr, self.kind)
repo_name: my_repo
result = timeout_middleware.process_request(request) self.assertIsNotNone(result) self.assertEqual(result.content, b'Hello World 1')
'SHIB_DISABLE_TOS': False,
for tab_list in [[], self.tabs_with_discussion, self.tabs_without_discussion]: self.check_discussion( tab_list=tab_list, expected_discussion_link=not None, expected_can_display_value=False, )
if len(changed) > 0: for prop in changed: update_cfg[prop] = state_cfg[prop]
latex += render_frac(numerator, denominator) + r"\cdot "
if kwargs.get('server', False): task_action.Server = kwargs.get('server') else: return 'Required parameter "server" not found'
import codecs from fractions import Fraction import unittest
try: this_tar_file.extractall(dest_path) except Exception as e: raise IOError("[tar] error while extracting '%s'" %tar_filename) else: pass
indices = indices[::-1] maybe_slice = lib.maybe_indices_to_slice(indices, len(target)) self.assertTrue(isinstance(maybe_slice, slice)) self.assert_numpy_array_equal(target[indices], target[maybe_slice])
from salt.modules import vsphere from salt.exceptions import CommandExecutionError
with warnings.catch_warnings(record=True) as w: warnings.simplefilter("always") parsed = read_stata( fname, convert_categoricals=convert_categoricals, convert_dates=convert_dates)
self._assert_no_redirect(self.course_with_bogus_survey)
table_type = u('appendable_ndim') ndim = 4 obj_type = Panel4D
X = x[:, np.newaxis] X_plot = x_plot[:, np.newaxis]
if self.model_admin.show_full_result_count: full_result_count = self.root_queryset.count() else: full_result_count = None can_show_all = result_count <= self.list_max_show_all multi_page = result_count > self.list_per_page
if isinstance(ascending, list): if not len(level) == len(ascending): raise ValueError("level must have same length as ascending")
output = self.engine.render_to_string('inheritance01') self.assertEqual(output, '1&3_')
if isinstance(data, six.string_types): self.ds = DataSource(data, encoding=encoding) else: self.ds = data self.layer = self.ds[layer]
if use_org_level_role: OrgLibraryUserRole(self.lib_key.org).add_users(self.non_staff_user) else: LibraryUserRole(self.lib_key).add_users(self.non_staff_user)
#latex_show_pagerefs = False
from __future__ import absolute_import import sys import os.path
with self.conn2.cursor() as cursor2: cursor2.execute("DELETE from delete_regress_book WHERE id = 1") self.conn2.commit()
self.assertFalse(request.is_secure()) return SENTINEL
key_columns.append(tuple(s.strip('"') for s in m.groups()))
import salt.fileclient import salt.utils.url
params = self.correct_inputs.get(answer_name, {'answer': 0})
import salt.utils
with tm.assertRaises(NotImplementedError): pd.read_excel(os.path.join(self.dirpath, 'test1' + self.ext), parse_dates=True)
epoch_num = 1
self.assertTrue(exam_attempts_section.is_student_attempt_visible)
return _render_report_form(start_date, end_date, start_letter, end_letter, report_type, date_fmt_error=True)
if validator: validator(defval)
with self.assertRaises(BadHeaderError): send_mail('Subject\nMultiline', 'Content', 'from@example.com', ['to@example.com'])
from __future__ import unicode_literals
course.cohort_config = {'cohorted': True} self.assertTrue(course.is_cohorted)
pass
GEOIP_PATH = REPO_ROOT / "common/static/data/geoip/GeoIP.dat" GEOIPV6_PATH = REPO_ROOT / "common/static/data/geoip/GeoIPv6.dat"
for field in self.model._meta.fields: if isinstance(field, GeometryField): return field return False
n_samples = len(y) n_classes = float(len(np.unique(y)))
course_key = CourseKey.from_string(self._course_key) return unicode(course_key.make_usage_key('course_info', 'handouts'))
s = pd.Series([1, 2, 3]) w = s.where(s > 1, 'X')
from salt.ext import six
if isinstance(ret, dict) and 'newname' in ret: salt.utils.cloud.remove_key( self.opts['pki_dir'], ret['newname'] ) continue
if best_doublecolon_end == len(hextets): hextets += [''] hextets[best_doublecolon_start:best_doublecolon_end] = [''] if best_doublecolon_start == 0: hextets = [''] + hextets
from safe_lxml import defuse_xml_libs defuse_xml_libs()
self.assertEqual(len(ctx.dicts), 4)
hard_dependencies = ("numpy", "pytz", "dateutil") missing_dependencies = []
cwd_prefix = ''
path = path[len(self.storage.prefix):]
needed_holds = [] current_timestamp = gmtime() for hold in snapshots.keys(): if schedule[hold] == 0: continue
'rejected_retry': bool,
self.assertEquals(response.status_code, 302) cache.clear()
@setup({'widthratio08': '{% widthratio %}'}) def test_widthratio08(self): with self.assertRaises(TemplateSyntaxError): self.engine.get_template('widthratio08')
result = read_json(json, date_unit=unit) assert_frame_equal(result, df)
a.join(d) d.join(a)
values = Series([u('a_b_c'), u('c_d_e'), np.nan, u('f_g_h')])
dest_info.edit_info.previous_version = dest_info.edit_info.update_version dest_info.edit_info.update_version = old_dest_structure_version dest_info.edit_info.edited_by = user_id dest_info.edit_info.edited_on = datetime.datetime.now(UTC)
REQUIRE_STANDALONE_MODULES = {}
if add: auth.add_users(caller, CourseCreatorRole(), user) else: auth.remove_users(caller, CourseCreatorRole(), user)
self.assertEqual(VerificationDeadline.deadline_for_course(self.course.id), verification_deadline)
self.assertEquals( block_structure_result, i in expected_accessible_blocks, "block_structure return value {0} not equal to expected value for block {1} for user {2}".format( block_structure_result, i, user.username ) )
axis = list(set([t.non_index_axes[0][0] for t in tbls]))[0]
return self.asset_md.setdefault(item, default)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.q(css=".settings-tab-button[data-tab='access']").first.click() self.wait_for_element_visibility('#is_prereq', 'Gating settings fields are present.')
cherrypy.server.unsubscribe()
if not prepared: value = self.get_prep_value(value) return connection.ops.adapt_timefield_value(value)
return self.query.has_filters()
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
contribute_to_related_class = ManyToManyField.__dict__['contribute_to_related_class'] _get_m2m_attr = ManyToManyField.__dict__['_get_m2m_attr'] _get_m2m_reverse_attr = ManyToManyField.__dict__['_get_m2m_reverse_attr'] _get_m2m_db_table = ManyToManyField.__dict__['_get_m2m_db_table']
'student_id': self.student_id, 'module_state_key': self.module_state_key, 'state': str(self.state)[:20],
return dict( super(GradingPolicySerializer, self).to_representation( defaultdict(lambda: None, obj) ) )
MAX_ATTEMPTS = 30 for i in range(MAX_ATTEMPTS): if not exists(table_name, region, key, keyid, profile): return True else:
__opts__.get( 'log_level', 'error' )
grid = np.random.rand(10, 2, 1) assert_raises(ValueError, partial_dependence, clf, [0], grid=grid)
self.q(css=self._bounded_selector(".toggle-cohort-management-discussions")).first.click() self.wait_for_element_visibility("#cohort-management-discussion-topics", "Waiting for discussions to appear")
oid = tree[self.root].oid tree = self.repo[oid]
from salt.pillar import sqlcipher
for containers in six.itervalues(docker_hosts): host = containers.pop('host') host_ips = []
'edxmako', 'pipeline', 'static_replace', 'require',
if axis_num == 0: return self.columns elif axis_num == 1: return self.index else: raise ValueError('Axis must be 0 or 1 (got %r)' % axis_num)
for key, val in six.iteritems(func_globals['__opts__']): self.assertEqual(self.opts[key], val)
self.run_function('cmd.run', ['truncate -s 0 {0}'.format(f)])
ndim = set([b.ndim for b in blocks])
assert_allclose(np.cov(preprocessed_X.transpose(), bias=1), identity, rtol=1e-4, atol=1e-4)
self.assert_request_status_code(302, reverse('logout'))
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
if 'mirrorlist' in repo_opts: todelete.append('baseurl') elif 'baseurl' in repo_opts: todelete.append('mirrorlist')
self._credit_provider_callback(request_uuid, 'approved') self._assert_request_status(request_uuid, "approved")
_update_course_context(request, context, course, platform_name)
COURSE_TAB_NAMESPACE = 'openedx.course_tab'
if value is not None and not self.field.remote_field.multiple: setattr(value, self.field.remote_field.get_cache_name(), instance)
yield self.auth.authenticate()
return self.mapbias + tensor.dot( self._factorsX(inputs) * self._factorsY(inputs), self.whf_in.T)
alias = get_svc_alias() if name in alias: log.error('This service is aliased, enable its alias instead') return False
import nose
post_migrate.send(sender=self.app_config, app_config=self.app_config, verbosity=0) self.assertTrue(Site.objects.exists())
from __future__ import absolute_import import logging import json
option1 = main1
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
self.assertRaises(TypeError, lambda: np.log(s))
if not os.path.exists(os.path.dirname(file_path)): os.makedirs(os.path.dirname(file_path))
raise NotImplementedError
if not (self.kind is None or self.kind == 'period'): obj = obj.to_timestamp(how=self.convention) return obj
import yaml
if gateway is not None: if not salt.utils.validate.net.ipv4_addr(gateway): errors.append('Gateway IP {0} is invalid.'.format(gateway))
chapter = self.store.get_item(self.chapter_loc) self.assertIn(self.seq_loc, chapter.children)
mock_create_subtask_fcn_args = mock_create_subtask_fcn.call_args_list self.assertEqual(len(mock_create_subtask_fcn_args[0][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[1][0][0]), 3) self.assertEqual(len(mock_create_subtask_fcn_args[2][0][0]), 2)
return { key: value for key, value in self.cleaned_data.items() if key in self.extended_profile_fields and value is not None }
resp = ProxyBug.objects.get(version__icontains='beta') self.assertEqual(repr(resp), '<ProxyBug: ProxyBug:fix this>')
df = DataFrame(np.random.randn(4, 3)) df2 = DataFrame(np.random.randn(4, 4))
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
STATIC_URL = '/static/' + EDX_PLATFORM_REVISION + "/" STATIC_ROOT = ENV_ROOT / "staticfiles" / EDX_PLATFORM_REVISION
transform = AdditiveChi2Sampler(sample_steps=sample_steps) assert_equal(transform.sample_interval, None)
skf = StratifiedKFold(n_folds=4) train_index, test_index = next(iter(skf.split(iris.data, iris.target)))
daemontools.__grains__ = {} daemontools.__salt__ = {} daemontools.__context__ = {} daemontools.__opts__ = {}
self.assertEqual(len(names), len(set(names)))
if log.level <= logging.DEBUG: log.debug('Event data that caused an exception: {0}'.format( self.event_queue))
if curr_problem in prob_grade_distrib: prob_grade_distrib[curr_problem]['grade_distrib'].append((row['grade'], row['count_grade']))
self.mods = set(sys.modules)
P = noise + X_dense P = theano.tensor.switch(P > 0, 1, 0) P = tensor.cast(P, theano.config.floatX)
import pprint import logging import time import hashlib
'status',
self.assertQuerysetEqual( Order.objects.exclude(Q(items__status=1)).distinct(), ['<Order: 3>'])
ic = self.index_col if ic is None: ic = []
DarkLangConfig( released_languages=('es, en'), changed_by=self.user, enabled=True ).save()
pan = web.get_data_yahoo('XOM', '2013-01-01', '2013-12-31', interval='v') self.assertEqual(len(pan), 4)
response_content = {'test_response': 'test_content'} self.server.config['This is only a test.'] = response_content
htmlhelp_basename = 'pandas'
assert self.xmodule_instance is not None return self.handler_url(self.xmodule_instance, 'xmodule_handler', '', '').rstrip('/?')
from __future__ import unicode_literals
try:
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
assert_raises(ValueError, plot_partial_dependence, clf, X, [100])
if response_msg: tree.append(self._render_response_msg_html(response_msg))
n_samples = len(digits.images) X = digits.images.reshape((n_samples, -1)) y = digits.target
time.sleep(self.server.config.get('time_to_response', self.DEFAULT_DELAY_SEC))
post_data['password'] = 'new password' form = UserChangeForm(instance=user, data=post_data)
logentry.content_type = None logentry.save()
grouped['B'].first() grouped['B'].last() grouped['B'].nth(0)
self.assertTrue(transaction.get_rollback()) transaction.set_rollback(False) self.assertEqual(Reporter.objects.count(), 3) transaction.set_rollback(True)
data = { 'username': username, 'course_key': unicode(course_id) } return self.client.post(self.path, json.dumps(data), content_type=JSON)
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book])
continue
if sparsify not in [True, 1]: sentinel = sparsify result_levels = _sparsify(result_levels, start=int(names), sentinel=sentinel)
if name in self.intervals: del self.intervals[name]
self.cohort_management_page.select_discussion_topic(self.inline_key)
if settings.ROOT_URLCONF == 'lms.urls': url_pattern = '/info' else: url_pattern = '/course/{}'.format(unicode(course_key))
self.cohort_management_page.select_cohort_some_inline_discussion() self.assertFalse(self.cohort_management_page.is_save_button_disabled(self.inline_key)) self.assertFalse(self.cohort_management_page.inline_discussion_topics_disabled())
from salt.states import alternatives
grading_policy.update(course_policy)
GET_ITERATOR_CHUNK_SIZE = 100
_check_all_orients(self.categorical, sort='sort', raise_ok=ValueError)
pass
return self.q(css=self.BOTTOM_ADD_SECTION_BUTTON).first
current_bindings = list_bindings(site)
assert_raise_message(NotFittedError, "This GaussianMixture instance is not fitted " "yet. Call 'fit' with appropriate arguments " "before using this method.", g.predict, X)
self.selenium.get(self.live_server_url + reverse('admin:admin_widgets_member_add'))
grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)
expr = Forward()
results.append(benchmark(LinearSVC(loss='l2', penalty=penalty, dual=False, tol=1e-3)))
learn_cache_key(request, response, key_prefix=key_prefix) self.assertEqual( get_cache_key(request, key_prefix=key_prefix), 'views.decorators.cache.cache_page.localprefix.GET.' '58a0a05c8a5620f813686ff969c26853.d41d8cd98f00b204e9800998ecf8427e' )
mpoly = MultiPolygon(poly.clone(), poly) self.assertEqual(8.0, mpoly.length)
from __future__ import unicode_literals
def func(): raise ValueError("Unexpected message")
tg = TimeGrouper(**kwds) return tg._get_resampler(obj, kind=kind)
result1 = s[5.0] result2 = s.loc[5.0] result3 = s.ix[5.0] self.assertEqual(result1, result2) self.assertEqual(result1, result3)
yield check_estimators_pickle
'minion_restart_command': list,
for section in self.chapter.get_children(): section.visible_to_staff_only = True self.store.update_item(section, ModuleStoreEnum.UserID.test)
beginning_of_unix_time = datetime(1970, 1, 1)
num_pad_bytes = ord(input_str[-1]) if num_pad_bytes < 1 or num_pad_bytes > AES.block_size or num_pad_bytes >= len(input_str): raise UsernameDecryptionException("padding") return input_str[:-num_pad_bytes]
with warnings.catch_warnings(record=True): transformer = Transformer() set_random_state(transformer) set_testing_parameters(transformer)
with self.assertRaises(ValueError): microsite.get_backend('microsite_configuration.microsite.invalid_method', BaseMicrositeBackend)
df = math.rank(self._x_trans.values) if self._time_effects: df += self._total_times return df
return True
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
is_copy = axis != 0 or result._is_view result._set_is_copy(self, copy=is_copy) return result
if self._mode == 'r' and 'Unable to open/create file' in str(e): raise IOError(str(e)) raise
self.login_page.login(email="nobody@nowhere.com", password="password")
from __future__ import absolute_import import os import logging
if errors: return errors return high_data
def __call__(self, signal, sender, **kwargs): self._database = kwargs['using']
post_data['name'] = 'Another name'
CreditProvider.objects.create( provider_id="ASU", enable_integration=True, provider_url="https://credit.example.com/request" )
url = "%s?leader__name=Palin&leader__age=27" % reverse('admin:admin_views_inquisition_changelist') response = self.client.get(url) self.assertEqual(response.status_code, 200)
from __future__ import absolute_import import os import warnings from salt.utils.verify import verify_log
super(StudioPagePerformanceTest, self).setUp() AutoAuthPage(self.browser, staff=True).visit()
self.assertTrue(self._search_for_content(self.SEARCH_STRING))
if BC_DEBUG: print("2to3 cache miss (will process) %s,%s" % (f,h)) to_process[h] = f
from __future__ import unicode_literals
rnd = np.random.RandomState(0) X = rnd.uniform(size=(10, 4))
import salt.config import salt.loader
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return "{store}[{collection}] already has {element_id} ({exception})".format( store=self.store, collection=self.collection, element_id=self.element_id, exception=Exception.__str__(self, *args, **kwargs), )
self.assertFalse(os.path.exists(path_test + '.bak'))
block.edit() block.reset_field_val("Display Name") block.save_settings() self.assertEqual(block.name, name_default)
self.assertOLXIsDraftAndPublished(block_list_to_revert) self.revert_to_published(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert)
if not keepdb: self._destroy_test_db(test_database_name, verbosity)
defaults = { 'form_class': forms.EmailField, } defaults.update(kwargs) return super(EmailField, self).formfield(**defaults)
sorted_idx = np.argsort(predictions, axis=1)
if has_mi_columns: columns = obj.columns
if self.lr_schedule == 'invscaling': self.learning_rate = (float(self.learning_rate_init) / (time_step + 1) ** self.power_t)
cart.purchase() cart.purchase() self.assertEquals(len(mail.outbox), 1)
with translation.override('de'): output = self.engine.render_to_string('i18n23') self.assertEqual(output, 'nicht gefunden')
if self.data: field_data = self._parse_video_xml(etree.fromstring(self.data)) self._field_data.set_many(self, field_data) del self.data
response.render() self.assertEqual(response.content, b'First template\n') self.assertEqual(post, ['post1', 'post2'])
raise NotImplementedError()
response = self.ajax_request('No', {})
children = [unicode(child) for child in children] return children.index(usage_key)
return self.feature_names_
for desc in xblock_descriptions: loc = self.create_xblock(parent_loc, desc) self._create_xblock_children(loc, desc.children)
children = self.q(css='.note-group') return [EdxNotesChapterGroup(self.browser, child.get_attribute("id")) for child in children]
Restaurant.objects.bulk_create([ Restaurant(name='foo') for i in range(0, 2) ]) self.assertEqual(Restaurant.objects.count(), 2)
return _merge_statuses([boot_ret, buildout_ret])
if tmpdir is not None: shutil.rmtree(tmpdir)
for url_name, url_path in header_urls.iteritems(): header_urls[url_name] = request.build_absolute_uri(url_path)
if correctness == 'incorrect': second_addend += random.randint(1, 10)
import os import time import logging
response = salt.utils.vmware.esxcli(host, username, password, cmd, protocol=protocol, port=port) ret.update({host: response})
if isinstance(obj, datetime.datetime): if is_naive(obj): self.timezone = get_default_timezone() else: self.timezone = obj.tzinfo
self.key = key self.value = value self.time = time self.min_compress_len = min_compress_len return True
return '<Raster object at %s>' % hex(addressof(self._ptr))
from salt.states import xmpp
return default
man = salt.utils.which('man') if not man: return False
all_assets[asset_idx] = md.to_storable()
virtualenv_mod.__salt__ = {} virtualenv_mod.__opts__ = {} virtualenv_mod.__env__ = {}
return ret
return self.std(ddof=ddof) / np.sqrt(self.count())
grouped = df.groupby(grouper, group_keys=False) f = lambda df: df['close'] / df['open']
self.assertNotContains(response, 'value="test_value"') self.assertContains(response, 'value="overridden_value"')
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
spmatrix = spmatrix.copy()
self.assertTrue(cohorts.is_course_cohorted(self.course.id))
my-minion: arg: - 30 fun: test.sleep jid: 20160503150049487736 pid: 9601 ret: tgt: my-minion tgt_type: glob user: root
value = self.to_python(value) self.validate(value) self.run_validators(value) return value
colors = cycle(['navy', 'turquoise', 'darkorange', 'cornflowerblue', 'teal']) lw = 2
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
if sys.version_info[1] <= 6: @contextmanager def ZipFile(*args, **kwargs): with closing(zipfile.ZipFile(*args, **kwargs)) as zf: yield zf else: ZipFile = zipfile.ZipFile
return dict(result=True, data=tmplsrc)
return self._isnan.any()
'tools.salt_token.on': True, 'tools.salt_auth.on': False,
response = self._regenerate(course_key=self.CERT_COURSE_KEY) self.assertEqual(response.status_code, 400)
raise ValueError('Timeout cannot be a float')
if not _contents_of_verticals: _contents_of_verticals = [[{'display_name': 'Video', 'metadata': self.metadata}]]
if CourseMode.is_white_label(course_id): course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG else: course_mode = None
xs = self.panel.major_xs(self.panel.major_axis[0]) result = func(xs, axis='major')
class DataForm(Form): data = CharField(max_length=10)
import salt.utils import salt.utils.itertools from salt.exceptions import CommandExecutionError, MinionError
return all(hasattr(loader, 'get_contents') for loader in self.loaders)
keep_looping = True continue
index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList) self.assertEqual(len(index_sql), 1)
optioninput_element.set('correct', str(correct_option))
AutoAuthPage( self.browser, username="testprogress", email="progress@example.com", password="testuser", course_id=self.course_id ).visit()
result = SimpleLazyObject(self._setupfunc) memo[id(self)] = result return result
for many_to_many in opts.many_to_many: if many_to_many.m2m_target_field_name() == to_field: return True
return '{}:{}'.format(self.idp_slug, remote_id)
info = super(UserList, self).__reduce_ex__(*args, **kwargs) return info[:3] + (None, None)
os.unlink(self._clear_filename) self.run_collectstatic(clear=True)
if server_tmp is None: continue
if isinstance(address, int): self.network_address = IPv6Address(address) self._prefixlen = self._max_prefixlen self.netmask = IPv6Address(self._ALL_ONES) return
state = self._migrate_all_backwards(plan, full_plan, fake=fake)
__virtualname__ = 'memcache'
xapi_uri = 'httpu:///var/run/xend/xen-api.sock'
self.assertEqual(repr(idx), expected)
varnish.__salt__ = {}
tm._skip_if_no_dateutil() from pandas.tslib import maybe_get_tz tz = lambda x: maybe_get_tz('dateutil/' + x)
with self.assertNumQueries(len(kv_dict)): self.kvs.set_many(kv_dict) for key in kv_dict: self.assertEquals(self.kvs.get(key), kv_dict[key])
@patch('xmodule.html_module.HtmlDescriptor.definition_to_xml') def test_export_import_round_trip(self, def_to_xml): def_to_xml.return_value = lxml.etree.Element('html')
return 'Looks like jail {0} has not been created'.format(name)
self.reset_RNG()
override_field_for_ccx(ccx, course, 'max_student_enrollments_allowed', settings.CCX_MAX_STUDENTS_ALLOWED)
self.setup_cohorts(self.course)
n += 1
actual_url = staticfiles_storage.url(path_overrides[module])
@python_2_unicode_compatible class Thing(models.Model): when = models.CharField(max_length=1, primary_key=True)
OAUTH_OIDC_ISSUER = 'https://www.example.com/oauth2'
plt.matshow(ranking, cmap=plt.cm.Blues) plt.colorbar() plt.title("Ranking of pixels with RFE") plt.show()
from __future__ import print_function, with_statement
src_x, src_y = src_dimensions target_x, target_y = target image_x, image_y = image.size
if usage_info.has_staff_access: return
if initial_forms > self.max_num >= 0: total_forms = initial_forms elif total_forms > self.max_num >= 0: total_forms = self.max_num
self.assertEqual(sanitize_separators(123), 123)
response = self._add_edx4edx() self.assertRegexpMatches(response.content, table_re)
for k in xrange(n_samples, n_nodes): while True: edge = heappop(inertia) if used_node[edge.a] and used_node[edge.b]: break i = edge.a j = edge.b
ESTIMATE_PRECISION_ERROR_MESSAGE = ("The algorithm has diverged because of " "too few samples per components. Try to " "decrease the number of components, " "or increase reg_covar.")
primary_course = CourseFactory.create(org=primary, emit_signals=True) alternate_course = CourseFactory.create(org=alternate, emit_signals=True)
SALT_BUILD_FAIL = 101
return { "result": "inclusion_only_unlimited_args_from_template - Expected result: %s" % ( ', '.join(six.text_type(arg) for arg in args) ) }
result = s[omask] expected = s[mask] assert_series_equal(result, expected)
self.assertRaises(TypeError, lambda: df4[df4.index < 2]) self.assertRaises(TypeError, lambda: df4[df4.index > 1])
return
break
def dumps(self, obj): return pickle.dumps(obj, pickle.HIGHEST_PROTOCOL) def loads(self, data): return pickle.loads(data)
self.start_lineno = min(self.start_lineno, start[0]) self.end_lineno = max(self.end_lineno, end[0])
cls.mapping[transformer.match_key] = transformer return transformer
raise NotImplementedError( str(type(self)) + " does not implement fprop.")
if name in list_tasks(location): return True else: return False
rng = check_random_state(2) X = 0.3 * rng.randn(120, 2) X_train = np.r_[X + 2, X - 2] X_train = X[:100]
resource = None for field in identifier_fields: if field in data: resource = get_resource(resource_name, data[field], identifier_fields, profile, subdomain, api_key) if resource is not None: break
from __future__ import absolute_import
team.add_user(self.student)
import salt.ext.six as six
return pytz.timezone(self.settings_dict['TIME_ZONE'])
merge_cells = False
import salt.ext.six as six
from __future__ import absolute_import import copy import errno import glob import logging import os import re import shlex
note = self.filter_by_id(self.notes, note_id) if note: note[0].update(note_info) return note else: return None
if 'where' in kwargs: kwargs['where'] = _ensure_term(kwargs['where'], scope_level=1)
self.assertChildNodes(feed2, ['title', 'link', 'id', 'updated', 'entry', 'georss:box'])
assert_raises(ValueError, _fast_dot, A, A)
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.todo', 'numpydoc', 'sphinx.ext.autosummary'] #, 'ext']
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
calibrated_clf.fit(X_train, y_train) probs_without_sw = calibrated_clf.predict_proba(X_test)
obj = self._clone() obj._for_write = True obj.query.select_for_update = True obj.query.select_for_update_nowait = nowait return obj
break
X_pca = pca.transform(X) assert_array_almost_equal(pca.explained_variance_, np.var(X_pca, axis=0))
s_orig = Series([1, 2, 3])
if api_response.data is not None and api_response.data != '': content = json.dumps(api_response.data)
import Tkinter as Tk
time.sleep((2 ** (RoleRetries - retry)) + (random.randint(0, 1000) / 1000)) continue
if lookup.startswith('password'): return False return super(UserAdmin, self).lookup_allowed(lookup, value)
X = X_2d[:100, :] n = X.shape[0]
self.wait_for('body')
user = serializers.PrimaryKeyRelatedField(queryset=User.objects.all()) class Meta(object): model = UserPreference depth = 1
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if content.thumbnail_location is not None: try: thumbnail_content = trash.find(content.thumbnail_location) store.save(thumbnail_content) except Exception:
G_iso = neighbors.kneighbors_graph(clf.embedding_, n_neighbors, mode='distance').toarray()
self.wait_for_ajax() if self.team: if not self.url.endswith(self.url_path): return False return self.q(css='.team-profile').present
pass
modulestore().get_item(usage_key)
unenroll_email( course_id=ccx_key, student_email=instructor.email, email_students=send_email, email_params=email_params, )
errstring = "Invalid location string" with self.assertRaisesRegexp(CommandError, errstring): self.command.handle("foo", "bar")
_default_logging_level_ = 'warning' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _loglevel_config_setting_name_ = 'cli_salt_run_log_file'
clf = MyEstimator(empty=np.array([])) clf2 = clone(clf) assert_array_equal(clf.empty, clf2.empty)
__virtualname__ = 'varnish'
self.coach = coach = AdminFactory.create(password="test") self.client.login(username=coach.username, password="test")
content = get_cached_content(location) if content is None: try: content = AssetManager.find(location, as_stream=True) except (ItemNotFoundError, NotFoundError): raise
__salt__['pkg.install']('ifenslave-2.6')
self._push_count(start_pos)
self.assertTrue(pkg_targets)
sortorder = None
self.assertEqual(expected_block.fields, actual_block.fields) for field in expected_block.fields.values(): self.assertFieldEqual(field, expected_block, actual_block)
import salt.config import salt.loader from salt.modules import boto_apigateway
'con_cache': bool, 'rotate_aes_key': bool,
pass
return 4.0 / (max_squared_sum + int(fit_intercept) + 4.0 * alpha_scaled)
list1.sort() list2.sort() return list1 == list2
s = Series(timedelta_range('1 day 1 s', periods=5, freq='h'))
self._assert_request_status(request_uuid, "pending")
result = first.difference([]) self.assertTrue(tm.equalContents(result, first)) self.assertEqual(result.name, first.name)
from __future__ import absolute_import
class ContactForm(Form): subject = CharField() message = CharField(widget=Textarea(attrs={'rows': 80, 'cols': 20}))
data = self._replace_nans(data)
__opts__ = salt.config.client_config( os.environ.get('SALT_MINION_CONFIG', '/etc/salt/minion'))
self.local = salt.client.get_local_client( self.opts['_minion_conf_file'], io_loop=self.io_loop)
label_spread = label_propagation.LabelSpreading(kernel='knn', alpha=1.0) label_spread.fit(X, labels)
S = cosine_similarity(X, Y) S *= -1 S += 1 return S
return double_output(f, [c_void_p, POINTER(c_int)], errcheck=True)
return self.q(css='#course-pace-toggle-tip').results[0].text
if num_format_str is None and style_dict is None: return None
user_requested_access(request.user) return JsonResponse({"Status": "OK"})
elif trigger_types[trigger_type] == TASK_TRIGGER_IDLE: trigger.Id = 'OnIdle_ID1'
from __future__ import unicode_literals
comparator(retrieved, obj)
return False, False
import salt.ext.six as six
self._codes[self._codes >= len(new_categories)] = -1
options = self.parse_options_string(options_string) self.reset_task_messages() call_task("pavelib.js_test.test_js_dev", options=options) self.verify_messages(options=options, dev_mode=True)
alt_methods = { 'barycentric': interpolate.barycentric_interpolate, 'krogh': interpolate.krogh_interpolate, 'from_derivatives': _from_derivatives, 'piecewise_polynomial': _from_derivatives, }
hadoop.__salt__ = {}
response = self.client.get(self.notes_url, {"text": "test"}) self.assertEqual(response.status_code, 404)
resp = self.client.get('/') self.assertEqual(resp.status_code, 200) self.assertContains(resp, 'footer-openedx')
if inplace and self._is_cached: raise ValueError("This Series is a view of some other array, to " "sort in-place you must create a copy")
self.assertEqual(params['access_key'], '0123456789012345678901') self.assertEqual(params['profile_id'], 'edx')
from salttesting import TestCase from salttesting.mock import patch, MagicMock from salttesting.helpers import ensure_in_syspath
return {'username': username, 'team_id': team}
self.cd['foo'] = 'global'
UNICODE_CHAR_CODES = (range(30) + [127] + [129, 500, 2 ** 8 - 1, 2 ** 8 + 1, 2 ** 16 - 1])
np.random.seed(0) n_samples = 2000 time = np.linspace(0, 8, n_samples)
DATE_FORMAT = 'N j, Y'
self.assertEqual(certificate_statuses.count(CertificateStatuses.generating), 8) self.assertEqual(certificate_statuses.count(CertificateStatuses.unavailable), 2)
for video in videos: video["status"] = StatusDisplayStrings.get(video["status"])
opts = next(six.itervalues(pillar)) prepend_reclass_source_path(opts) break
from pandas.tslib import maybe_get_tz gettz = lambda x: maybe_get_tz('dateutil/' + x)
self.assertIsInstance(ret, list)
V = np.zeros((N, n_neighbors, n_neighbors)) nev = min(d_in, n_neighbors) evals = np.zeros([N, nev])
grade_distrib = get_problem_set_grade_distrib(course_id, problem_set)
ret['comment'] = 'Event module not available. Beacon disable job failed.'
with self.assertRaises(ValueError): (DataFrame(np.ones((10, 10))) .rolling(window=3, center=True, axis=2).mean())
elif field in self._errors.keys(): exclude.append(f.name)
import logging
return prlctl('snapshot-delete', args, runas=runas)
self._set_group_access({0: [3]})
self.assertRaises( FileserverConfigError, role_class, *args )
try: CourseUserGroup.objects.get(id=group_id) kwargs['group_id'] = group_id except CourseUserGroup.DoesNotExist: pass
sindex = get_data(searchindex_url) filenames, objects = parse_sphinx_searchindex(sindex)
from django.core.wsgi import get_wsgi_application
self.assertEquals(self.middleware.process_request(self.request), None)
n_candidates = 0 candidate_set = set() min_candidates = self.n_candidates * self.n_estimators while (max_depth > self.min_hash_match and (n_candidates < min_candidates or len(candidate_set) < n_neighbors)):
def _get_axes(N, K, index=index, columns=columns):
team_list = self.get_teams_list(user=user, expected_status=200, data=course_one_data) self.assertEqual(team_list['count'], 0)
self.X_topo_space = view_converter.topo_space
self.assertQuerysetEqual(School.objects.all(), ["<School: School object>"])
self.assertEqual(q, q1)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
msg = _('All ok!')
from __future__ import absolute_import import copy import logging import os import subprocess from distutils.version import LooseVersion
course = self.get_item_from_modulestore(self.usage_key) self.assertNotIn(chapter1_usage_key, course.children) self.assertIn(chapter2_usage_key, course.children)
from __future__ import absolute_import
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'verified')
self.assertEqual(processor_hash('test'), 'GqNJWF7X7L07nEhqMAZ+OVyks1Y=') self.assertEqual(processor_hash('edx '), '/KowheysqM2PFYuxVKg0P8Flfk4=')
'-1.00E-06'
if not lib.isscalar(indexer): if len(indexer) == 1: loc = indexer.item() else: raise ValueError("cannot label index with a null key")
log = logging.getLogger(__name__)
try: course_key = CourseKey.from_string(course_id) user = User.objects.get(id=user_id) course = modulestore().get_course(course_key)
raise NotImplementedError
delete_indices = np.array([])
exception_classes = [StudentInputError, LoncapaProblemError, ResponseError] for exception_class in exception_classes:
response = self.client.get(reverse('admin:app_list', args=('admin_views',))) self.assertContains(response, '<body class=" dashboard app-admin_views')
cdn_response_video_url = settings.CDN_VIDEO_URLS["CN"] + self.original_video_file self.assertEqual( rewrite_video_url(settings.CDN_VIDEO_URLS["CN"], self.original_video_url), cdn_response_video_url )
import_array() import_ufunc()
return [('start', self._start), ('stop', self._stop), ('step', self._step)]
import salt.config as config from salt.exceptions import ( SaltCloudConfigError, SaltCloudExecutionFailure, SaltCloudExecutionTimeout, SaltCloudNotFound, SaltCloudSystemExit ) from salt.utils import is_true
import salt.config import salt.loader
LOGGING_NULL_HANDLER = None break
to_concat = [x.asobject.values for x in to_concat]
return "EXTRACT(%s FROM %s)" % (lookup_type.upper(), field_name)
return "/".join([BASE_URL, self.url_path, unicode(self.locator)])
from salt.ext import six
if made_bigger: com._possibly_cast_item(result, args[0], likely_dtype)
if not self.infer_axes(): return None
self.is_released = is_released self.publish_state = publish_state self.is_locked = is_locked
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError
idx2 = TimedeltaIndex(idx, name='something else') self.assertEqual(idx2.name, 'something else')
if existing['code'] == 200:
template_attrs = ('template_name', 'context_data', '_post_render_callbacks') for attr in template_attrs: self.assertFalse(hasattr(unpickled_response, attr))
from __future__ import absolute_import import socket
expected = left_f(s_nat, Timestamp('20010109')) result = right_f(Timestamp('20010109'), s_nat) tm.assert_series_equal(result, expected)
return original_arg
train_with_monitoring_datasets( train_dataset=dataset1, monitoring_datasets=even_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
c(window=2) c(window=2, min_periods=1) c(window=2, min_periods=1, center=True) c(window=2, min_periods=1, center=False)
return [reverse(name, kwargs={'course_id': course.id.to_deprecated_string()}) for name in names]
def __init__(self, callback): self.callback = callback def filter(self, record): if self.callback(record): return 1 return 0
settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] = [ path for path in settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] if path != settings.MICROSITE_ROOT_DIR ]
npy_filename_root = os.path.join(preprocess('${PYLEARN2_DATA_PATH}'), 'icml07data', 'npy', npy_filename)
return Bunch(data=pairs.reshape(len(pairs), -1), pairs=pairs, target=target, target_names=target_names, DESCR="'%s' segment of the LFW pairs dataset" % subset)
import salt.utils
dependencies = []
PeriodIndex(date_range('1985', periods=1000).to_pydatetime(), freq='D')
return
else: c = Categorical(key, ordered=True)
def wrap_f_init(*args): data = f_init(*args) length = len(data) / 2 return data[:length], data[length:] return wrap_f_init
ZENDESK_USER = AUTH_TOKENS.get("ZENDESK_USER") ZENDESK_API_KEY = AUTH_TOKENS.get("ZENDESK_API_KEY")
result['_id'] = str(result['_id'])
__virtualname__ = 'service'
def f(): df = orig.copy() df.loc["j", "cats"] = "c"
return [Attribute('params', None), Attribute('problem_state', None), Attribute('display_class', None), Attribute('display_file', None), ]
self.def_ms = modulestore() self.msg = u'' self.datatable = [] super(SysadminDashboardView, self).__init__(**kwargs)
if self.date is not None: return datetime.now(pytz.UTC) <= self.date return False
'STORE_BILLING_INFO': False,
DarkLangConfig( released_languages=('es-419, en'), changed_by=self.user, enabled=True ).save()
Z = np.ones((data.Ny, data.Nx), dtype=np.float64)
valid_feats = ds[0][:2] for feat in valid_feats: istate = Interstate.objects.get(name=feat['Name'].value)
world.edit_component() type_in_codemirror(0, text) world.save_component()
else: rows -= len(self.buf)
if insecure: kwargs['insecure'] = True
connected_minions = None return_count = 0
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
current_state = __salt__['tuned.active']()
pred = km.predict(X) assert_array_equal(pred, km.labels_)
from salt.modules import tls import integration
output = self.engine.render_to_string('filter-syntax12', {"var": True}) self.assertEqual(output, 'yup yes')
{% from 'lib.sls' import port with context %} port {{ port }} bind {{ bind }}
num_fields_updated = max(0, len(state) - num_new_fields_set) self._ddog_histogram(evt_time, 'set_many.fields_updated', num_fields_updated)
with self.assertNumQueries(18): self.client.get(self.teams_url)
if not callable(getattr(estimator, method)): raise AttributeError('{} not implemented in estimator' .format(method))
if len(bins) < len(labels): labels = labels[:len(bins)]
Y = np.vstack((y_diabetes, y_diabetes)).T
self._upload_file('image.jpg')
v0 = random_state.uniform(-1, 1, A.shape[0]) _, u = eigsh(A, ncv=self.n_svd_vecs, v0=v0)
self.sock.bind(('localhost', port)) self.sock.listen(5) netutil.add_accept_handler( self.sock, self.handle_connection, io_loop=self.io_loop, )
arr = np.array([1, '2', 3, '4'], dtype=object) with tm.assertRaisesRegexp(TypeError, 'casting'): Int64Index(arr)
self.update_masquerade(role='student', user_name=self.student_user.username) self.assertEqual(self.get_progress_detail(), u'2/2')
with self._lock: if self.ready: return
user = User.objects.get(email=self.notenrolled_student.email) self.assertTrue(CourseEnrollment.is_enrolled(user, self.course.id))
w = rwindow.Window(Series([2, 4, 6]), window=[0, 2])
'states_dirs': list,
if form_value: user.follow(cc_content) else: user.unfollow(cc_content)
self._consolidate_inplace() return all([block.is_numeric for block in self.blocks])
if isinstance(msg, str): if msg == 'minions': reply = serial.dumps(self.minions) creq_in.send(reply)
from __future__ import division, absolute_import, print_function
if not is_list_like(clear): clear = [clear] for m in clear: try: m.__warningregistry__.clear() except: pass
values = values.copy() if copy else values return values
__, nonstaff_user = self.create_non_staff_authed_user_client() auth.add_users(self.user, CourseStaffRole(self.course.id), nonstaff_user)
yield check_sample_weight_multiclass, cls
([], '', CourseMode.DEFAULT_MODE_SLUG),
self.assertTrue(context['reg_code_info_list'][0]['is_redeemed']) self.assertFalse(context['reg_code_info_list'][1]['is_redeemed'])
MICROSITE_BACKEND = ENV_TOKENS.get("MICROSITE_BACKEND", MICROSITE_BACKEND) MICROSITE_TEMPLATE_BACKEND = ENV_TOKENS.get("MICROSITE_TEMPLATE_BACKEND", MICROSITE_TEMPLATE_BACKEND) MICROSITE_DATABASE_TEMPLATE_CACHE_TTL = ENV_TOKENS.get( "MICROSITE_DATABASE_TEMPLATE_CACHE_TTL", MICROSITE_DATABASE_TEMPLATE_CACHE_TTL )
#html_favicon = None
warnings.simplefilter('ignore', category=RemovedInDjango20Warning) return mark_for_escaping(value)
super(TestGetCourseChapters, self).setUp() self.course_key = self.course.location.course_key
self.assertIn(SESSION_KEY, self.client.session)
def setup(app): setup.app = app
cmd = 'state.pkg {0}/salt_state.tgz test={1} pkg_sum={2} hash_type={3}'.format( __opts__['thin_dir'], test, trans_tar_sum, __opts__['hash_type'])
self.series[5:15] = np.NaN
return self.q(css=self._bounded_selector(".check-cohort-inline-discussions:checked"))
sh("i18n_tool generate")
if ret['result'] is not False: msg = _format_terse(tcolor, comps, ret, colors, tabular) hstrs.append(msg) continue
query_features = _task_input.get('features') student_data = get_proctored_exam_results(course_id, query_features) header, rows = format_dictlist(student_data, query_features)
#epub_tocdup = True
result = ts[datetime(1990, 1, 1, 4)] expected = ts[4] self.assertEqual(result, expected)
pca = PCA(n_components=2)
if self.has_answerpool(): return
ind2 = self.index.set_levels(new_levels[0], level=0) assert_matching(ind2.levels, [new_levels[0], levels[1]]) assert_matching(self.index.levels, levels)
resp = self.client.get_json(url) course_detail_json = json.loads(resp.content) self.assertEqual(pre_requisite_course_keys, course_detail_json['pre_requisite_courses'])
first_addend = random.randint(-100, 100) second_addend = 10 - first_addend
GRAINS_CACHE = {} DETAILS = {}
return location.name
values = _prep_ndarray(values, copy=copy)
import copy import os import re import logging from salt.ext import six try:
names = F.readline().decode('ascii').strip().split(',')
response_dict = self._get_page_data(response) self.assertEqual(response_dict['course_mode_slug'], expected_mode)
super(SplitMongoKVS, self).__init__(copy.deepcopy(initial_values))
__func_alias__ = { 'list_': 'list' }
post_save.connect(invalidate_country_rule_cache, sender=CountryAccessRule) post_save.connect(invalidate_country_rule_cache, sender=RestrictedCourse) post_delete.connect(invalidate_country_rule_cache, sender=CountryAccessRule) post_delete.connect(invalidate_country_rule_cache, sender=RestrictedCourse)
if refresh: refresh_db(**kwargs)
with warnings.catch_warnings(record=True) as w: warnings.simplefilter("always")
slices = dict((k, v.xs(key)) for k, v in self.iteritems()) return DataFrame(slices, index=self.minor_axis, columns=self.items)
import salt.ext.six as six
if 'origin' in ds_input: self.origin.x, self.origin.y = ds_input['origin']
IP = InteractiveShell.instance(config=config, profile_dir=profile)
xt = xt[selector] count = count[selector]
result = df.loc[:, (slice(None), ['foo'])] expected = df.iloc[:, [1, 3]] assert_frame_equal(result, expected)
with self.store.bulk_operations(key): course = self.store.get_course(key) return course
import salt.utils from salt.modules.cron import ( _needs_change, _cron_matched )
header = [field for field in output[0].lower().split(" ") if field] del output[0]
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
ts_from_string = Timestamp('now') ts_from_method = Timestamp.now() ts_datetime = datetime.datetime.now()
import logging import salt.utils
email_image = email_payload_first[1]
raised = False try: fmt = OneHotFormatter(max_labels=-10) except ValueError: raised = True assert raised
features = map(lambda l: l[:-1], content) targets = map(lambda l: l[-1], content) del content
import salt.utils.boto3 import salt.utils.compat import salt.utils
if len(typs) == 1:
_cookie_allows_colon_in_names = six.PY3
pca = PCA(n_components=2, whiten=True, svd_solver=solver) pca.fit(X) ll2 = pca.score(X) assert_true(ll1 > ll2)
y = np.dot(X, w) y = np.sign(y)
HAS_FCNTL = False
assert_true(np.all(K > 0)) assert_true(np.all(K - np.diag(np.diag(K)) < 1))
actual = grouped_df.pid.transform(len) assert_series_equal(actual, expected)
test_course = CourseFactory.create(default_store=modulestore_type, emit_signals=True) self.client.login(username="jack", password="test")
columns = [] for dtype, b in compat.iteritems(df.blocks): columns.extend(b.columns)
self.assertEqual(parent.graceperiod, new_block.graceperiod) self.assertEqual(parent.start, new_block.start) self.assertEqual(course.start, new_block.start)
import lzma return lzma
if self.status in ['correct', 'incorrect', 'partially-correct']: return False else: return True
snapshot = json.loads(record.snapshot) self.assertEqual(snapshot['enroll_msg'], enroll_msg) self.assertEqual(snapshot['access_msg'], access_msg)
output = engine.render_to_string('index.html') self.assertEqual(output, 'base')
return "Expected result"
resp = self.client.post( '/shoppingcart/payment_fake', dict(post_params) )
p = subprocess.Popen([c] + args, cwd=cwd, stdout=subprocess.PIPE, stderr=(subprocess.PIPE if hide_stderr else None)) break
if 'connection_default_file' in kwargs: get_opts = False else: get_opts = True
if isinstance(start, RangeIndex): if name is None: name = start.name return cls._simple_new(name=name, **dict(start._get_data_as_items()))
return self.block.values
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON
pass
NOTICEFUNC = CFUNCTYPE(None, c_char_p, c_char_p)
self.verify_success_on_file_content( 'username,cohort\nfoo_username,bar_cohort', mock_store_upload, mock_cohort_task )
return []
self.fail('An exception should be thrown')
return pytz.timezone(tz)
if button == 'pause': self.wait_for(lambda: self.state != 'buffering', 'Player is Ready for Pause')
mock_get.return_value = Mock(status_code=200, text=response_success, content=response_success) transcript_name = transcripts_utils.youtube_video_transcript_name(youtube_text_api) self.assertIsNone(transcript_name)
return self.inferred_type
raise NotImplementedError()
n_samples, h, w = lfw_people.images.shape
return self.q(css='.sidebar').present
DATETIME_FORMAT = 'N j, Y, P'
cwd_prefix = '%s%s' % (os.curdir, os.sep)
panel = Panel(items=lrange(3), major_axis=lrange(3), minor_axis=lrange(3), dtype='O') self.assertEqual(panel.values.dtype, np.object_)
LOCATION='test cache table'
return super(NullBackend, self).set_config_by_domain(domain)
self.assertEqual(response.status_code, 200)
SEARCH_ENGINE = None ELASTIC_FIELD_MAPPINGS = { "start_date": { "type": "date" } }
action_name = ugettext_noop('rescored') update_fcn = partial(rescore_problem_module_state, xmodule_instance_args)
pass
return ['name', 'locale']
import os
c = GSNCost( [ (0, 1.0, reconstruction_cost),
if huber_warm.n_iter_ is not None: assert_equal(1, huber_warm.n_iter_)
init_worker = _init_worker run_subsuite = _run_subsuite
y = zca_dataset.adjust_for_viewer(x.T).T z = x/np.abs(x).max(axis=0) assert_allclose(z, y)
self.mean_square_grads[param.name] = mean_square_grad
indexes = [a.cvalues for a in self.index_axes] nindexes = len(indexes) bindexes = [] for i, idx in enumerate(indexes):
res = grainsmod.filter_by(dict2, grain='xxx', default='xxx', base='default') self.assertEqual(res, dict2['default'])
ret.update({esxi_host: _format_syslog_config(response)})
with mock_create_basket(exception=exceptions.SlumberBaseException): response = self._post_to_view() self.assertValidEcommerceInternalRequestErrorResponse(response) self.assertUserNotEnrolled()
from __future__ import unicode_literals
from __future__ import absolute_import import os import json import logging import base64 import pprint import inspect import yaml import datetime from Crypto.Hash import SHA256 from Crypto.PublicKey import RSA from Crypto.Signature import PKCS1_v1_5
return bits
return '%s/%s' % (random.randint(100, 999), filename)
try: import apt.cache import apt.debfile from aptsources import sourceslist HAS_APT = True except ImportError: HAS_APT = False
response = self._response().render() self.assertEqual(response.content, b'foo')
self.check_group('radiotextgroup', 'choice', 'radio')
msg = 'Only length-1 decimal markers supported' with tm.assertRaisesRegexp(ValueError, msg): self.read_csv(StringIO(data), decimal='')
assert len(image.shape) == 3 assert len(shape) == 2 shrunk = fit_inside(image, shape) letterboxed = letterbox(shrunk, shape) return letterboxed
return self.q( css=self._bounded_selector("#cohort-management-group-add-students") ).results[0].get_attribute("value")
p_shared = sharedX(zv[:, :, 0:rows:pool_rows, 0:cols:pool_cols]) h_shared = sharedX(zv) z_shared = sharedX(zv)
output = self.engine.render_to_string('regroup02', {}) self.assertEqual(output, '')
self.eof_index = len(string)
if self.get_compound_hints(new_cmap, student_answers): return
exc_info_on_loglevel=logging.DEBUG
if cmp_result < -1: cmp_result = -1 elif cmp_result > 1: cmp_result = 1
return True
resp = self._login(self.email, self.pw) data = parse_json(resp) self.assertFalse(data['success'])
self.d.stalkers.add(self.a)
comment += ('\n' + config_comment)
from __future__ import absolute_import
for fname, dirpath in get_all_files(directory): if fname == filename: return dirpath return None
return date.replace(year=date.year + 1, month=1, day=1)
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file) self.addCleanup(remove_file, self.TEST_INDEX_FILENAME)
import os import re import glob import hashlib import tempfile import logging
return self
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM")
assert remaining + nfalse == len(mask)
if 'pub_sig' in payload and self.opts['verify_master_pubkey_sign']: return True elif 'pub_sig' not in payload and not self.opts['verify_master_pubkey_sign']: return True
scores = cross_val_score(pipeline, X[:, np.newaxis], y, scoring="mean_squared_error", cv=10)
clf.classes_ = unique_labels(classes) return True
return False
import salt.modules.cmdmod
if ApiAccessRequest.api_access_status(request.user) is not None: return redirect(reverse('api_admin:api-status')) return super(ApiRequestView, self).get(request)
'master_shuffle': bool,
clf = SGDClassifier(loss="hinge", alpha=0.01, n_iter=200, fit_intercept=True) clf.fit(X, Y)
self.odd_course = CourseFactory.create( org='test.org_1-2', number='test-2.3_course', display_name='dotted.course.name-2', )
self.assertIsNone(course_outline_initial_state('no-such-locator', course_structure))
rets = {} for ret in ssh.run_iter(): rets.update(ret)
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
import salt.utils
params = { param_name: request.POST[param_name] for param_name in [ "face_image", "photo_id_image", "course_key", "checkpoint", "full_name" ] if param_name in request.POST }
cov = ShrunkCovariance(shrinkage=0.5, store_precision=False) cov.fit(X) assert(cov.precision_ is None)
return (port, name, admin_state_up)
config = sconfig.minion_config('/etc/salt/minion') self.assertEqual(config['log_file'], env_fpath) os.environ.clear() os.environ.update(original_environ)
from salt.modules import dig
self.assertRaises(ValueError, self.read_csv, StringIO(data), header=[0, 1, 2, 3], index_col=[0, 1], usecols=['foo', 'bar'], tupleize_cols=False)
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
with self.assertNumQueries(1): VerificationDeadline.deadlines_for_courses(course_keys)
source = "/foo/bar/fubar.pkg" package_id = "com.foo.fubar.pkg"
if xblock_name is None: xblock_name = TestCrowdsourceHinter.XBLOCK_NAMES[0] resp = self.call_event(handler, resource, xblock_name) self.assertEqual(resp[resp_key], resp_val) self.assert_request_status_code(200, self.course_url)
try: task_folder.RegisterTask(name, xml_text, TASK_CREATE, user_name, password, logon_type)
return False
if self.match_check(ind, fun): return True
self.wait_for_field(field_id) query = self.q(css='.u-field-{} .u-field-message-help'.format(field_id)) return query.text[0] if query.present else None
with patch('student.models.cc.User.save'): uname = 'student' email = 'student@edx.org' password = 'test'
l = [] for mask in xrange(16): l.append(mlp.masked_fprop(inp, mask)) outsum = reduce(lambda x, y: x + y, l)
ItemFactory.create( parent_location=self.course.location, category="discussion", discussion_id=topic_id, discussion_category=category, discussion_target=subcategory, **kwargs )
raise NotImplementedError()
serialized = configparser.serialize(data).strip() assert serialized == "[foo]\nbar = baz", serialized
if 'pinned' not in thread: thread['pinned'] = False
block_info.setdefault('paths', []) block_info['paths'].append(current_path) for child_block_info in block_info['children']: add_path_info(child_block_info, current_path + [block_info])
cov = pca.get_covariance() precision = pca.get_precision() assert_array_almost_equal(np.dot(cov, precision), np.eye(X.shape[1]), 12)
try: microsite = Microsite.objects.get(key='default') except Microsite.DoesNotExist: pass
self.assertIsInstance(b.baked_timestamp, datetime.datetime) self.assertIsInstance(b.baked_date, datetime.date) self.assertNotIsInstance(b.baked_date, datetime.datetime)
use = zipped[1:]
from __future__ import absolute_import
self.assertEqual(df.iloc[1][1], 'Harry Carney')
exam_review_policy = get_review_policy_by_exam_id(exam['id']) self.assertEqual(exam_review_policy['review_policy'], sequence.exam_review_rules)
return numpy.arcsin(1. / val)
return self.runtime.get_subtree_edited_by(self)
nan_colname = DataFrame(Series(1.0, index=[0]), columns=[nan]) nan_colname_sparse = nan_colname.to_sparse() self.assertTrue(np.isnan(nan_colname_sparse.columns[0]))
textvalue = 'correct string' if correct else 'incorrect string' self.problem_page.fill_answer(textvalue)
salt.log.setup.set_multiprocessing_logging_queue(self.log_queue)
updates[sum_square_grad] = new_sum_squared_grad updates[param] = param + delta_x_t
non_int_round_dict = {'col1': 1, 'col2': 'foo'} with self.assertRaises(TypeError): df.round(non_int_round_dict)
students = self._create_students(10)
return " "
if cls.has_professional_mode(modes_dict): return False
major_axis = SparsePanelAxis('_major_axis', 'index')
return ret
refetched = self.client.get_json(first_update_url) self.assertHTMLEqual( content, json.loads(refetched.content)['content'], "get w/ provided id" )
solver = 'svd'
r = self.frame.rolling(window=5)[1, 3] tm.assert_index_equal(r._selected_obj.columns, self.frame.columns[[1, 3]])
cfg = __salt__.get('config.option', __opts__)
from __future__ import unicode_literals
new_names = [name + "a" for name in self.index.names] self.index.names = new_names self.check_level_names(self.index, new_names)
self.assertContains(self.response, "<td>baz, rox, *some_args, **some_kwargs</td>")
from __future__ import absolute_import
def __call__(self, func): @wraps(func, assigned=available_attrs(func)) def inner(*args, **kwargs): with self: return func(*args, **kwargs) return inner
self.get_selector('#certificate-invalidation-user').fill(student)
b = np.zeros((self.dim * 4,))
reg_codes = cls.objects.filter(course_enrollment=course_enrollment).order_by('-redeemed_at') if reg_codes: return reg_codes[0]
if self.subcmd == 'apply': self.subcmd_args = [args[0]] del args[0]
certs_api.set_cert_generation_enabled(self.course.id, True)
self.assertEqual(a.value, a.value)
'autoload_dynamic_modules': bool,
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
response = self.client.get('/permission_protected_view_exception/') self.assertEqual(response.status_code, 403)
with self.assertRaises(CommandError): call_command('changepassword', username='joe', stdout=self.stdout, stderr=self.stderr)
self.assertEqual(i, 100) self.assertEqual(s, 1)
_role_present(ret, IdentityPoolId, AuthenticatedRole, UnauthenticatedRole, conn_params)
return False
return params
rng = date_range('1/1/2000', freq='B', periods=20) ts = Series(np.random.randn(len(rng)), index=rng)
LANGUAGE_CODE = 'en-us'
fields = (f for f in fields if '__' not in f)
self.browser.switch_to_window(browser_window_handles[-1])
from salt.ext.six.moves import range import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
dbm = make_random_basic_binary_dbm( rng = rng, pool_size_1 = pool_size_1,
if key not in self: root = self.__root last = root[0] last[1] = root[0] = self.__map[key] = [last, root, key] dict_setitem(self, key, value)
save_course_update_items(location, course_updates, course_update_items, user) if "status" in course_update_dict: del course_update_dict["status"] return course_update_dict
BLANK_CHOICE_DASH = [("", "")]
@python_2_unicode_compatible class C02(models.Model): mm_a = models.ManyToManyField(A02, through="Intermediate") f_a = models.CharField(max_length=10, db_index=True) f_b = models.IntegerField()
lines = contents.read().splitlines() try: lines.remove('') except ValueError: pass return lines
if end_slice == -1: end_slice -= len(self) if start_slice == -1: start_slice -= len(self)
course, course_data_path = self.import_courselike( runtime, courselike_key, dest_id, source_course, ) return source_course, course, course_data_path
distances[:] = mindist
tm._skip_if_no_pytz()
return self.q(css="div.problem div.problem-hint").text[0]
import salt.utils
url(r'^\$', include([ url(r'^bar/$', lambda x: x, name='bar'), ])),
sys.path.insert(1, dirname(dirname(abspath(__file__))))
if settings.ROOT_URLCONF != 'lms.urls': raise unittest.SkipTest('Test only valid in lms')
- cn=foo,ou=users,dc=example,dc=com: - delete_others: True
X_scaled_back = scaler.inverse_transform(X_scaled) assert_array_almost_equal(X_scaled_back, X)
flds = layer.fields for f in flds: self.assertIn(f, source.fields)
self.q(css=".contribution-option > input").first.click()
def create_pandas_abc_type(name, attr, comp): @classmethod def _check(cls, inst): return getattr(inst, attr, '_typ') in comp
all_asset_md = [] for __ in xrange(amount): all_asset_md.append(generate_random_asset_md()) return all_asset_md
role, __ = Role.objects.get_or_create(course_id=course_id, name=FORUM_ROLE_STUDENT) user.roles.add(role)
self.assertTrue('success' in result and result['success'])
time_last_reset = user.date_joined
if any(app == migration.app_label for app, name in migration.dependencies): return False, project_state
published_only = 'rev-opt-published-only'
app = cherrypy.tree.apps.get(app_path) if not app: raise AssertionError("No application mounted at '{0}'".format(app_path))
module = CapaFactory.create(rerandomize=RANDOMIZATION.NEVER, done=True) self.assertTrue(module.should_show_check_button())
name_is_eq = (other.get('name') is None or self.name == other['name'])
warnings.extend(get_warning_for_invalid_pattern(pattern))
from __future__ import absolute_import import copy import logging import pprint import time import yaml
details['driver'] = provider
np.array([[], []]),
paths = ['grading_policy.json'] if policy_dir: paths = [policy_dir + '/grading_policy.json'] + paths
easy_weight_list = [0] * 10 easy_weight_list[5] = 1
block = self.make_block(values=nv[np.newaxis], placement=[ref_loc], fastpath=True)
fd_, adminfile = salt.utils.mkstemp(prefix="salt-", close_fd=False)
ridge.fit(X, y, sample_weights_OK) ridge.fit(X, y, sample_weights_OK_1) ridge.fit(X, y, sample_weights_OK_2)
log = logging.getLogger(__name__)
validate_kwargs('group', kwargs, {})
import salt.utils.thin
click_css(self, '.wrapper-mast nav.nav-actions .button-new')
from __future__ import absolute_import, print_function import json import logging
try: connection.commit() except DatabaseError: try: connection.rollback() except Error: connection.close() raise
manage_directory(dirname) vdir.add(dirname)
import os import tempfile import hashlib import logging
if not version: version = __salt__['pkg.version'](name)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertEqual(len(mail.outbox), 1)
form = SongForm(data, empty_permitted=True) self.assertTrue(form.is_valid()) self.assertEqual(form.errors, {}) self.assertEqual(form.cleaned_data, {})
co_mapping = { 'name': 'Name', 'state': {'name': 'State'},
from django.core import mail return mail.outbox
import salt.utils from salt.exceptions import ( CommandExecutionError, CommandNotFoundError, SaltInvocationError )
return self._nzoom - 1
instructor = AdminFactory.create() self.client.login(username=instructor.username, password="test")
Y = np.array([0, 0, 0, 1])
output = self.engine.render_to_string('filter-syntax09', {'var': 'Foo'}) self.assertEqual(output, 'f')
return OverrideFieldData.wrap(TESTUSER, self.course, DictFieldData({ 'foo': 'bar', 'bees': 'knees', }))
return self.q(css=self._bounded_selector('.member-count')).map(lambda e: e.text).results
from __future__ import absolute_import
from __future__ import absolute_import import os.path import glob
record = 0 clean = intersect while len(clean) > 0: bad_channel = [] for channel in clean: channel_0 = channels_0[channel] channel_1 = channels_1[channel]
request = RequestFactory().get('/url') request.user = self.user account_settings = get_account_settings(request) self.assertEqual(account_settings['name'], full_name)
from __future__ import unicode_literals
return []
pass
return (name, kwargs)
self.course_nav.q(css='button.check.Check').click() self.course_nav.wait_for_ajax()
s = Series(range(10)) with tm.assertRaises(ValueError): s.sample(n=3, weights='weight_column')
return ''
yaml_key_val_pair = '- key1: val1' ret = utils.repack_dictlist(yaml_key_val_pair) self.assertDictEqual(ret, {'key1': 'val1'})
profile_image_names = get_profile_image_names(username) create_profile_images(uploaded_file, profile_image_names)
idx.nbytes idx.values.nbytes
self.assertTrue(allowance_section.is_add_allowance_button_visible)
exclude = ('dashboard_tracking_code',)
self.assertFalse( CourseEnrollment.objects.filter(course_id=self.course.id, user=student).exists() )
target_user = self.get_user(email) target_user.click_delete() self.wait_for_page()
if 0 not in classes[j]: classes[j] = np.insert(classes[j], 0, 0) class_prob_j = np.insert(class_prob_j, 0, 0.0)
from __future__ import unicode_literals
index = 0 params = kernel.get_params() for hyperparameter in kernel.hyperparameters: if hyperparameter.bounds is "fixed": continue size = hyperparameter.n_elements
if not self._verify_auth(): self.redirect('/login') return
values = Series([u('fooBAD__barBAD'), NA, u('foo')])
pass
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
try: os.remove(trans_tar) except (OSError, IOError): pass
log = logging.getLogger(__name__)
self.update_structure(course_key, new_structure)
multi_db = True
mathml_start = '<math xmlns="http://www.w3.org/1998/Math/MathML"><mstyle displaystyle="true">' mathml_end = '</mstyle></math>'
template_name_suffix = "_archive_day"
from cStringIO import StringIO as cStringIO from StringIO import StringIO BytesIO = StringIO import cPickle import httplib
if isinstance(self.obj, com.ABCSeries): return self._deprecated()[key]
return sequence.xmodule_runtime.render( sequence, STUDENT_VIEW, { 'requested_child': requested_child, 'next_url': next_url, 'prev_url': prev_url, }, ).content
removed_tab = tab_ids.pop(num_orig_tabs / 2) self.assertTrue(len(tab_ids) == num_orig_tabs - 1)
ret['master'] = ip_port[0]
with remove_ccx(xblock) as (xblock, restore): return restore(self._modulestore.update_item( xblock, user_id, allow_not_found=allow_not_found, **kwargs ))
train_obj.main_loop() state.results = jobman.tools.resolve(state.extract_results)(train_obj) return channel.COMPLETE
elif existing['code'] == 404: ret['comment'] = 'A Profile with this name was not found.' else: ret = _load_result(existing, ret)
self.run_prereqs(X, d) a(*X) actual_ne += self._flat_data_specs[0].np_batch_size(X)
from __future__ import absolute_import
_PKG_TARGETS_EPOCH = { 'RedHat': {'7': 'comps-extras'}, }
import pickle
for addr in salt.utils.network.ip_addrs(): addr = ipaddress.ip_address(addr) if addr.is_loopback: continue possible_ids.append(str(addr))
cls.settings_override = override_settings(**TEST_SETTINGS) cls.settings_override.enable() super(LiveServerBase, cls).setUpClass()
os.remove(self.conf)
meta_features = [] for feature in features: if 'meta.' in feature: meta_key = feature.split('.')[1] meta_features.append((feature, meta_key))
return SPF(sections[1][9:], 'SPF', nameserver)
return self._string
if zoom is None: zoom = 4 self.zoom = zoom if center is None: center = (0, 0) self.center = center
self.validate_xblock_info_consistency(xblock_info, has_child_info=has_child_info)
max_width = 0
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
parent_xblock.save()
exp = Series(rankdata(filled), index=filled.index, name='ts') exp[mask] = np.nan
if len(self) == 0: return None mask = isnull(self._values) i = mask.argmin() if mask[i]: return None else: return self.index[i]
final_attrs['value'] = force_text(value)
if not isinstance(key, (list, np.ndarray, Series, Index)): key = list(key)
return convolution_indices.evaluate(inshp, kshp, offset, nkern, mode=mode, ws=False)
dot_product = -2 * np.dot(self.linear_sum_, self.centroid_) return sqrt( ((self.squared_sum_ + dot_product) / self.n_samples_) + self.sq_norm_)
rng = np.random.RandomState(0) n_samples = 100 n_features = 80 n_components = 30 rank = 50
pass
return opts
def check_envelope(result, func, cargs, offset=-1): "Checks a function that returns an OGR Envelope by reference." env = ptr_byref(cargs, offset) return env
__virtualname__ = 'random'
c=self.cols, tabsize=self.tabsize, m=self.mode, payload=self.payload, ln=self.linenumbers)
users = self.get_json(USER_LIST_URI)["results"] for user in users: if user["id"] == target_user.id: return user["url"] self.fail()
raise NotImplementedError()
resp = self.client.get(course_wiki_page, follow=True) target_url, __ = resp.redirect_chain[-1] self.assertTrue(reverse('signin_user') in target_url)
result = f.clean('12-21-2010') self.assertEqual(result, date(2010, 12, 21))
xml.tail = self.tail return xml
from salt.modules import data
try: verification_status = cls.objects.filter(checkpoint__photo_verification=photo_verification).latest() return verification_status.checkpoint.checkpoint_location except cls.DoesNotExist: return ""
value = Value(value, output_field=self.lhs.output_field)
'contentstore', 'contentserver', 'course_creators', 'external_auth',
tm.assert_almost_equal(tuple(x), x_rec)
project = u'edX' copyright = u'2013, EdX Doc Team'
MAX_IDEAL_BATCH_DURATION = 2
targets = [x for x in pkg_params if x in old] if not targets: return {}
key, val = str(''), chunk
return section_titles.index(title.lower()) + 1
if role is not None: role().add_users(user)
n_samples, n_features = X.shape _, n_targets = y.shape
DATE_INPUT_FORMATS = [
self.add_credit_course()
from __future__ import unicode_literals
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, Mock, MagicMock, patch )
break
gating_api.add_prerequisite(self.course.id, self.seq1.location)
else: merged = closest_subcluster.merge_subcluster( subcluster, self.threshold) if merged: self.init_centroids_[closest_index] = \ closest_subcluster.centroid_ self.init_sq_norm_[closest_index] = \ closest_subcluster.sq_norm_ return False
return datetime.fromtimestamp(os.path.getctime(self.path(name)))
configuration_id = content.pop("id") group_ids = [group.pop("id") for group in content["groups"]] return (configuration_id, group_ids)
from __future__ import absolute_import import atexit import os import readline import sys from code import InteractiveConsole
r = self.a.reporter self.assertEqual(r.id, self.r.id)
return self.extra
from __future__ import absolute_import import logging
from __future__ import unicode_literals
microsite.clear() domain = request.META.get('HTTP_HOST', None) microsite.set_by_domain(domain) return None
import re import logging from salt.ext.six import string_types
self.wait_for_ajax()
self.assertEqual( get_object_or_404(Article.by_a_sir, title="Run away!"), article )
finger += '{0}:'.format(pre[ind])
class SomeChildModelForm(forms.ModelForm):
result = {} metadata = cls.fetch_all(descriptor) for key, value in metadata.iteritems(): if key in cls.filtered_list(): continue result[key] = value return result
responseparam_element = etree.SubElement(response_element, 'responseparam') responseparam_element.set('partial_answers', partial_answers)
return set()
import sys
vm_['instance_id_list'] = [] for instance in data: vm_['instance_id_list'].append(instance['instanceId'])
import salt.utils.mac_utils from salt.exceptions import CommandExecutionError
from pylearn2.utils.rng import make_np_rng
for i, val in minibatch: if val is not None: activations[i] = val
dashboard_tracking_code = models.TextField(default="", blank=True)
@property def _constructor(self): return PeriodIndexResampler
return self._get_structures_for_branch_and_locator(branch, self._create_course_locator, **kwargs)
self.certificates_section.wait_for_certificate_exceptions_section() self.certificates_section.click_add_exception_button()
storage_class = FileSystemStorage
blocks = [] for i, rl in enumerate(self.mgr_locs):
self.q(css=self.editor_mode_css).click() self.browser.execute_script("tinyMCE.activeEditor.setContent('%s')" % content)
sampling_algorithm["custom-tracking-selection"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="tracking_selection", random_state=random_state)
expected = np_array_datetime64_compat( ['2015-01-03T00:00:00.000000000+0000', '2015-01-01T00:00:00.000000000+0000'], dtype='M8[ns]')
resource = {"id": self.non_existing_resource_id, 'event': test_case['event']} self.check_event_response_by_http_status('handle_vote', resource, 400)
if not np.iterable(bins): if lib.isscalar(bins) and bins < 1: raise ValueError("`bins` should be a positive integer.")
self.assertEqual(list(dive.reviews.all().values_list('source', flat=True)), ['Python Weekly'])
indexer = np.zeros_like(labels) _algos.group_shift_indexer(indexer, labels, ngroups, periods)
read_excel(xlsx, 'Sheet1', index_col=0)
return self.__nonzero__()
asset_key = StaticContent.get_asset_key_from_path(course_key, relative_path)
ring.srid = 4322 self.assertEqual('WGS 72', ring.srs.name) self.assertEqual(4322, ring.srid)
try:
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
df = tm.makeTimeDataFrame() g = df.groupby(pd.TimeGrouper('M')) g.transform(lambda x: x - 1)
if len(set(ret).intersection(minions)) >= len(minions): return ret
return student_complex == instructor_complex
myrole: boto_iam_role.present: - profile: myiamprofile
prep_for_iexact_query = prep_for_like_query
('subjectbody', SubjectBodyExtractor()),
if not all(user_groups.get(partition.id) in groups for partition, groups in partition_groups): return ACCESS_DENIED
version = 'dev' release = 'dev'
if setup_option or query_yes_no(self.CONFIRMATION_PROMPT, default="no"): course_keys = [course.id for course in modulestore().get_courses()] else: return
return self.db_type(connection)
return has_access(user, action, xmodule.descriptor, course_key)
from __future__ import unicode_literals
enable_sigusr1_handler()
from __future__ import absolute_import
return value
self.url = reverse('course_modes_choose', args=[unicode(self.course.id)])
return [provider for provider in cls.enabled() if provider.accepts_logins]
log.info("Send-email task %s for email %s: returning status %s", current_task_id, email_id, new_subtask_status) return new_subtask_status.to_dict()
y = np.arange(10) % 3
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
clf = svm.SVC() clf.fit(X_sp, Y) assert_array_equal(clf.predict([X[2]]), [1.])
axes = self.output_axes assert len(axes) == 4
assert_array_equal(out, sw_out)
pass
time.sleep(0.5)
'ENABLE_SOFTWARE_SECURE_FAKE': False,
matched = match.group(0) if matched == ';;': return ';' elif matched == ';_': return '/' else: return matched
if len(names) == 1: return ret[names[0]] return ret
macro_measure = metric(y_true, y_pred, average="macro") assert_almost_equal(macro_measure, np.mean(label_measure))
chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)' return get_random_string(50, chars)
survey = self._create_test_survey() self.assertEquals(len(survey.get_answers()), 0)
this_scores = cross_val_score(clf, X, y, n_jobs=1) score_means.append(this_scores.mean()) score_stds.append(this_scores.std())
win_path.__salt__ = {} win_path.__opts__ = {}
self.assert_enrollment_status(username='fake-user', expected_status=status.HTTP_404_NOT_FOUND, as_server=False) self.assert_enrollment_status(username='fake-user', expected_status=status.HTTP_406_NOT_ACCEPTABLE, as_server=True)
self.assertEqual(len(f.choices), 2)
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
if value is not None:
'PREVENT_CONCURRENT_LOGINS': True,
for td in tds[:6] + tds[-6:]: self.assertEqual(td.get_attribute('class'), 'nonday')
from dateutil.relativedelta import relativedelta, weekday from dateutil.easter import easter import pandas.tslib as tslib from pandas.tslib import Timestamp, OutOfBoundsDatetime, Timedelta
argv = self.opts['argv']
import integration
PaymentFakeView.PAYMENT_STATUS_RESPONSE = "success"
from salt.ext.six import string_types
values = ss._data.internal_values()._valid_sp_values
response = self._generate()
import salt.ext.six as six
from salttesting.helpers import ensure_in_syspath
problem_not_specified = self.build_problem(answer="Second") problems = [problem_specified, problem_not_specified]
store_outcome_parameters(params, request.user, lti_consumer)
site_title = ugettext_lazy('Django site admin')
if dtype.kind == 'm': mask = isnull(arr) result = arr.astype(dtype).astype(np.float64) result[mask] = np.nan return result
scores = cross_val_score(EstimatorWithFit(), [[1], [2], [3]], [1, 0, 1], scoring=DummyScorer()) assert_array_equal(scores, 1)
d1 = df.copy().drop(1, axis=0) expected = df.copy() expected.loc[1, :] = np.nan
clf = neighbors.KNeighborsClassifier(n_neighbors, weights=weights) clf.fit(X, y)
_check_align(self.ts[:0], self.ts[:0], how=kind) _check_align(self.ts[:0], self.ts[:0], how=kind, fill=-1)
'cmd_safe': bool,
self.assertNotEqual(discussion_item.discussion_id, '$$GUID$$')
from __future__ import absolute_import
self_paced_course, self_paced_section = self.setup_course(**course_options) beta_tester = BetaTesterFactory(course_key=self_paced_course.id)
idx = idx[0:40].union(idx[45:99]) df2 = DataFrame(np.random.randn(len(idx), 3), index=idx) _check_plot_works(df2.plot)
self._navigate_to_courseware_video() self.video.wait_for_video_player_render()
ranks0 = self.frame.rank(na_option='bottom') ranks1 = self.frame.rank(1, na_option='bottom')
view_converter = dense_design_matrix.DefaultViewConverter((image_size, image_size, 1), axes)
from __future__ import unicode_literals
return self._typ._AXIS_ORDERS
self.assertFalse(result['success']) self.assertIn(u"did not accept your payment", result['error_html']) self.assert_dump_recorded(result['order'])
self.assertEquals(3, len(response.content.splitlines()))
staff = AdminFactory(password=self.password) self.client.logout() self.client.login(username=staff.username, password=self.password) self.assert_valid_get_response(self.eligibility)
resp_params = PaymentFakeView.response_post_params(post_params)
import os import re import stat import tempfile
parents = list( self.collection.find(query, {'_id': True}, sort=[SORT_REVISION_FAVOR_DRAFT]) ) if len(parents) == 0: return cache_and_return(None)
assert (not com.is_timedelta64_ns_dtype(tdi.astype('timedelta64'))) assert (not com.is_timedelta64_ns_dtype(tdi.astype('timedelta64[h]')))
MAX_SCREEN_LIST_LENGTH = 250
apps.apps_ready = False try: with self.assertRaisesMessage(AppRegistryNotReady, "Apps aren't loaded yet"): apps.get_containing_app_config('foo') finally: apps.apps_ready = True
assert key.user_id == self.user.id
pass
for job in data.keys(): if 'enabled' not in data[job]: data[job]['enabled'] = True
data = {} for c, s in compat.iteritems(self.frame): data[c] = s.to_dict()
del new_connection.timezone_name
return self.to_dense(fill=fill)
return SurveyAnswer.objects.filter(form=form, user=user).exists()
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
m = custom_site._registry[Child] request = self._mocked_authenticated_request('/child/', user_noparents) response = m.changelist_view(request) self.assertNotContains(response, 'Parent object')
DAG_CHILDREN_MAP = [[1, 2], [3], [3, 4], [5, 6], [], [], []]
if usage_id_filter is None and usage_key_filter is not None: usage_id_filter = usage_key_filter
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
if request.user.is_staff: return True user = get_object_or_404(User, username__iexact=url_username) if field_name in visible_fields(user.profile, user): return True raise Http404()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, mock_open)
RM_SUBDIRS_RETRY_TIME = 0.1
mock_file.name = name return mock_file
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
pass
context = { 'reorderable_items': set(), 'read_only': True } problem_html = get_preview_fragment(request, self.problem, context).content
actual = grouped_ser.filter(lambda x: len(x) > 1) expected = ser.take(expected_indexes) assert_series_equal(actual, expected)
survey.save_user_answers(self.student, self.student_answers_update, self.course_id)
X_blobs, y_blobs = make_blobs(n_samples=100, centers=10, random_state=0) X_blobs = sparse.csr_matrix(X_blobs)
try:
self.precision = precision return self
self.mc_setup_response()
resp = self.client.get(billing_url) self.assertEqual(resp.status_code, 404)
super(ContainsFormatVisitor, self).__init__(file_contents, results) self.contains_format_call = False
root.set('org', self.courselike_key.org) root.set('library', self.courselike_key.library)
for (field_name, field_value) in six.iteritems(d["fields"]):
self.wait_for( lambda: "Add a New Cohort" in self.q(css=self._bounded_selector(".form-title")).text, "Create cohort form is visible" )
self.assertContains(response, '<h3 id="built_in-autoescape">autoescape</h3>', html=True) self.assertContains(response, '<li><a href="#built_in-autoescape">autoescape</a></li>', html=True)
dirty = git_describe.endswith("-dirty") pieces["dirty"] = dirty if dirty: git_describe = git_describe[:git_describe.rindex("-dirty")]
filename_extension = 'xml'
return [(None, ("NULL", [], False))]
SSL_AUTH_EMAIL_DOMAIN = ENV_TOKENS.get("SSL_AUTH_EMAIL_DOMAIN", "MIT.EDU") SSL_AUTH_DN_FORMAT_STRING = ENV_TOKENS.get("SSL_AUTH_DN_FORMAT_STRING", "/C=US/ST=Massachusetts/O=Massachusetts Institute of Technology/OU=Client CA v1/CN={0}/emailAddress={1}")
elif (name in CROSS_DECOMPOSITION or name in ['LinearSVC', 'LogisticRegression']): continue
if a not in kwargs: try: kwargs[a] = args.pop(0) except IndexError: if require_all: raise TypeError("not enough/duplicate arguments " "specified!")
status_code = 400 default_detail = "The course key provided was invalid."
res = op(self.values, other)
self.assertEqual('override', settings.TEST) with self.assertRaises(AttributeError): getattr(settings, 'TEST2')
self.assertFalse(result['success']) self.assertIn(u"inconsistent data", result['error_html'])
return EventHandler.modified_code
existing_program_ids = get_awarded_certificate_programs(student)
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
response = middleware.process_response(request, response)
self._create_cert(self.courses[0].id, self.user, CertificateStatuses.error) self._create_cert(self.courses[1].id, self.user, other_status)
import salt.utils
>> a=makeCustomDataframe(5,3,c_idx_names=False,r_idx_names=False, r_idx_type="dt",c_idx_type="u")
import logging
if not self.loadauth.time_auth(extra): log.warning( 'Authentication failure of type "eauth" occurred.' ) return ''
super(BaseTeamsPage, self).__init__(browser, course_id) self.topic = topic
self.find_css('.action-primary').first.click() self.page.wait_for_ajax()
catalog_visibility = TextField(null=True) short_description = TextField(null=True) course_video_url = TextField(null=True) effort = TextField(null=True) self_paced = BooleanField(default=False)
ret['comment'] = ('User {0} is not present, so it cannot be removed' ).format(name) return ret
return
compare_to = [var.resolve(context, True) for var in self._varlist]
with self.assertRaises(AttributeError): getattr(self.profile, '_changed_fields')
return import_string(settings.DEFAULT_EXCEPTION_REPORTER_FILTER)()
self.best_cost = self.coeff * np.inf self.best_model = None
s = Series(np.random.randn(10)) result = np.ones_like(s) expected = Series(1, index=range(10), dtype='float64')
for code in [129, 500, 2 ** 8 - 1, 2 ** 16 - 1]:
pass
add_openid_simple_registration(request, response, data) add_openid_attribute_exchange(request, response, data)
ar1 = np.asarray(ar1).ravel() ar2 = np.asarray(ar2).ravel()
enrollment.activate() self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
second_attempt = SoftwareSecurePhotoVerification.objects.create(user=user)
>>> forward_data = aapl.get_forward_data(8, call=True, put=True)
COUCHBASE_CONN = None DESIGN_NAME = 'couchbase_returner' VERIFIED_VIEWS = False
df.loc['a', :] = df.ix[0]
self._ptr = ds_input
with tm.assertRaises(ValueError): weights_with_inf = [0.1] * 10 weights_with_inf[0] = np.inf o.sample(n=3, weights=weights_with_inf)
def get_post_parameters(self, request): return request.POST def get_traceback_frame_variables(self, request, tb_frame): return tb_frame.f_locals.items()
self.assertNotIn(self.module_key + '2', self.loader)
self._set_level_of_education(level_enum) self.assertEqual(self.profile.level_of_education_display, display_level)
atomic = True
get_affinity_group = show_affinity_group
min_indices = d_chunk.argmin(axis=1) min_values = d_chunk[np.arange(chunk_x.stop - chunk_x.start), min_indices]
self.assertTrue(mock_send.called) __, kwargs = mock_send.call_args_list[0]
initialize_permissions(new_course.id, user) return new_course
swagger = _Swagger(api_name, stage_name, lambda_funcname_format, swagger_file, common_args)
continue
file_handle.write(asbytes(length.ljust(_MAX_LEN))) file_handle.write(zlib.compress(asbytes(data), compress))
uniform_batch_size = False
data = 'a,b,c\n4,5,6\nskipme' result = self.read_csv(StringIO(data), skiprows=[2]) tm.assert_frame_equal(result, expected)
if not mod_path: raise
return self._distance_attribute('perimeter', None, **kwargs)
from salt.modules import sysmod
raise GDALException('Invalid data source file "%s"' % ds_input)
log = logging.getLogger(__name__)
self.assertEqual(len(RestrictedModel.plain_manager.all()), 0)
self.course_info_page.visit() self.tab_nav.go_to_tab('Wiki') self.assertTrue(self.tab_nav.is_on_tab('Wiki'))
ret = self.run_run_plus(fun='fileserver.symlink_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], dict)
message = self.q(css=self._bounded_selector(".input-group-other .copy-error")) if not message: return None return message.results[0].text
result = f.clean('2010-12-21 13:30:05') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
self.assertIn( "Certificate has been successfully invalidated for {user}.".format(user=self.student_name), self.certificates_section.certificate_invalidation_message.text )
p1 = panel.ix[:2, :, :2] p2 = panel.ix[:, :, 2:] p1['ItemC'] = 'baz'
queue = [course] while len(queue) > 0: node = queue.pop() queue.extend(node.get_children()) return True
'cherrypy', 'cherrypy.lib', 'cherrypy.process', 'cherrypy.wsgiserver', 'cherrypy.wsgiserver.ssl_builtin',
for name in datasets: datasets[name] = datasets[name].T
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.reset_tracker()
actual_field = None for field in form_desc["fields"]: if field["name"] == expected_field["name"]: actual_field = field break
import salt.ext.six as six
self.assertRaises(ValueError, period_range, '2007-1-1', periods=500, freq='X')
proj_grad_W = squared_norm(gradW * np.logical_or(gradW < 0, W > 0)) proj_grad_H = squared_norm(gradH * np.logical_or(gradH < 0, H > 0))
for visible in self.VISIBLE_CONTENT[user_tag]: self.assertIn(visible, content)
if valid_function is False: if invalid_functions.get(fun) is None: invalid_functions.update({fun: []}) invalid_functions[fun].append(vm_name) continue
chapter = path[1].name if n > 1 else None section = path[2].name if n > 2 else None vertical = path[3].name if n > 3 else None position = None
class PriceFormWithoutQuantity(forms.ModelForm): class Meta: model = Price exclude = ('quantity',)
self.login(self.email, self.pw)
old_inertia_csr, incremental_diff_csr = _mini_batch_step( X_mb_csr, x_mb_squared_norms_csr, new_centers_csr, counts_csr, buffer_csr, 1, None, random_reassign=False) assert_greater(old_inertia_csr, 0.0)
if not settings.FEATURES.get('EMBARGO'): raise MiddlewareNotUsed()
underlying_updates = modulestore().get_item(updates_usage_key) underlying_content = underlying_updates.items[0]['content'] if new_format else underlying_updates.data self.assertIn("\"/static/", underlying_content)
templates_path = ['templates']
munin.__salt__ = {}
lti_user = create_lti_user(lti_user_id, lti_consumer)
X, y = make_blobs(random_state=1) for Model in [DPGMM, VBGMM]: dpgmm = Model(n_components=10, random_state=1, alpha=20, n_iter=50, verbose=2)
test_course_data = self.assert_created_course() course_id = _get_course_id(self.store, test_course_data) delete_course_and_groups(course_id, self.user.id) self.assert_created_course()
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
_translations = {} _active = local()
assert_frame_equal(result_sort, df.groupby(col, sort=False).first())
for result in resultset: location = as_published(Location._from_deprecated_son(result['_id'], course_id.run))
if isinstance(self, ClassifierMixin): if self.n_outputs_ == 1: return self.classes_.take(np.argmax(proba, axis=1), axis=0)
return self._residues
'verify_env': bool,
for block_type in ['course', 'html', 'video']: self.assertNotIn(block_type, block_counts_for_course) self.assertNotIn(block_type, block_counts_for_chapter_x)
return self.default
self.assertEqual(info['blocks'], [])
if hasattr(zmq, 'RECONNECT_IVL_MAX'): self.socket.setsockopt( zmq.RECONNECT_IVL_MAX, 5000 )
process_info = CreateProcessWithLogonW(username=username, domain=domain, password=password, logonflags=LOGON_WITH_PROFILE, commandline=cmd, startupinfo=startup_info, currentdirectory=cwd)
ping = Grouping(group_axis, gpr, obj=obj, name=name, level=level, sort=sort, in_axis=in_axis) \ if not isinstance(gpr, Grouping) else gpr
class SystemInfo(models.Model): system_name = models.CharField(max_length=32)
else: log.error(traceback.format_exc()) _ = self.capa_system.i18n.ugettext raise ResponseError( _("CustomResponse: check function returned an invalid dictionary!") )
class_=class_, selector=selector
if not isinstance(new_c_data, list): log.error('ConCache Worker returned unusable result') del new_c_data continue
lw = LedoitWolf(block_size=25).fit(X) assert_almost_equal(lw.covariance_, cov)
lang = node['language'] highlight_args['force'] = True
return dict( sorted( dict_obj.items(), key=lambda x: x[1], reverse=True )[:amount] )
modulestore().update_item(course, ModuleStoreEnum.UserID.test)
cast = (self.size().fillna(0) > 0).any()
@override_settings(LOGGING_CONFIG='logging_tests.tests.dictConfig', LOGGING=OLD_LOGGING) def test_configure_initializes_logging(self): from django import setup setup() self.assertTrue(dictConfig.called)
from __future__ import absolute_import import salt.utils
return self.deserialize_messages(self.request.session.get(self.session_key)), True
atom = _tables().Int64Col() return IndexCol(np.asarray(values, dtype=np.int64), 'integer', atom, index_name=index_name)
arr = np.arange(4)
return {'ok': False, 'msg': msg}
possible_params = selector._get_param_names() possible_params.remove('score_func') selector.set_params(**{possible_params[0]: self.param})
return blocks
import salt.utils
subs = ''
from __future__ import unicode_literals
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
minion_id = kwargs['opts']['id'] if re_pattern: minion_id = re.sub(re_pattern, re_replace, minion_id)
import salt.utils
'id': str,
print "checking initialization..." eobjs = before_ideal.create_user(self.course_key) before = EmailEnrollmentState(self.course_key, eobjs.email) self.assertEqual(before, before_ideal)
log.warning("find_asset_metadata request of XML modulestore - not implemented.") return None
dbm = make_random_basic_binary_dbm( rng = rng, pool_size_1 = pool_size_1, )
__opts__['test'] = orig_test return ret
raise CommandExecutionError( 'Error {0}: {1}'.format(exc.response.status_code, exc.explanation) )
if not (self.data or self.files): return len(self.get_queryset()) return super(BaseModelFormSet, self).initial_form_count()
self._breadth_first(convert_item, [location])
from __future__ import absolute_import
print(grid_search.grid_scores_)
print("Estimated betas") print(np.round(pls1.coef_, 1))
executor.loader.build_graph()
redirect_url = get_redirect_url(params["course_key"], params["checkpoint"]) return JsonResponse({"url": redirect_url})
expect = kwargs.get('expect', '') options = kwargs.get('options', [])
return modulestore().update_item(block, ModuleStoreEnum.UserID.test)
return self._active_count > 0
self.join(other2, main)
self.assertNotIn(self.module_key, self.loader)
remove_user_from_cohort(second_cohort, self.student.username) self.assert_student_in_group(None)
with self.assertRaisesMessage(AssertionError, "Negative indexing is not supported."): Article.objects.all()[0:-5]
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
return _check_range_and_return('lumination_change', label, -19, 19)
minor_axis = SparsePanelAxis('_minor_axis', 'columns')
return ( self.__class__.__name__, self._constructor_args[0], self._constructor_args[1], )
self.assertIn('broadcast_address', self.ipv4_network._cache) self.assertIn('hostmask', self.ipv4_network._cache)
if microsite_org: return courses
return np.sqrt(np.diag(self._var_beta_raw))
return self.q(css='{} input[name=rescore-entrance-exam]'.format(self.EE_CONTAINER))
instance = model(pk=pk, **data)
return (isinstance(obj, slice) and obj.start == 0 and obj.stop == l and obj.step is None)
X = np.random.RandomState(21).randn(10, 3) y = np.random.RandomState(12).randn(10)
tflat = _flatten(t.asList()) rep << And( [ Literal(tt) for tt in tflat ] )
energy = dbm.energy(V = v_state, hidden = [y_state]) unnormalized_prob = T.exp(-energy) assert unnormalized_prob.ndim == 1 unnormalized_prob = unnormalized_prob[0] unnormalized_prob = function([], unnormalized_prob)
import salt.ext.six as six
#show_authors = False
self.client.login(username=self.coach.username, password="test")
return "(%s)" if len(self.value) != 1 else "(%s,)"
return mark_safe(_urlize(value, nofollow=True, autoescape=autoescape))
(['honor', 'verified', 'audit'], ['1', '2', '3']),
try: store = self._verify_modulestore_support(usage_key.course_key, 'get_block_original_usage') return store.get_block_original_usage(usage_key) except NotImplementedError: return None, None
self._check_is_symbolic(batch) self._validate(is_numeric=False, batch=batch)
from salt.modules import win_ip from salt.exceptions import CommandExecutionError, SaltInvocationError
with self.assertRaises(ValueError): d.save()
X = [[3, 2], [1, 6]] y = [1, 0]
return [self.create_student('robot%d' % i) for i in xrange(num_students)]
return page_title_breadcrumbs(*crumbs)
log.exception(u"Error while #{}ing student") log.exception(exc) results.append({ 'identifier': identifier, 'error': True, })
OrderItemSubclassPK = namedtuple('OrderItemSubclassPK', ['cls', 'pk'])
include_expired = not is_active if is_active is not None else False
pass
if not children_only: ret, perms = __salt__['file.check_perms'](name, ret, user, group, dir_mode, follow_symlinks)
block_type = 'html' for idx in xrange(0, 16): block_id = _make_block_id(block_type, idx) self.all_units.append((block_type, block_id))
super(DashboardPage, self).__init__(browser)
for mode in (CourseMode.DEFAULT_MODE_SLUG, 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
from __future__ import unicode_literals
from __future__ import absolute_import
init_bound = np.sqrt(2. / (fan_in + fan_out))
test_score -= test_score[0] test_best_iter = x[np.argmin(test_score)]
ssh_key_changed = True
n_samples_train, n_samples_test, n_features = 75, 150, 500 np.random.seed(0) coef = np.random.randn(n_features)
acts = self._hidden_input(inputs) hiddens = self.act_enc(acts) act_grad = tensor.grad(hiddens.sum(), acts) return act_grad
import yaml from yaml.nodes import MappingNode from yaml.constructor import ConstructorError from yaml.scanner import ScannerError import salt.ext.six as six
elif trigger_types[trigger_type] == TASK_TRIGGER_LOGON: trigger.Id = 'OnLogon_ID1'
if not _initial_defencoding: _initial_defencoding = sys.getdefaultencoding()
if sparse: decay = .01
cmd = ['launchctl', sub_cmd] cmd.extend(args)
from __future__ import absolute_import
self.video.click_player_button('play') self.video.wait_for_position('0:03') self.video.click_player_button('pause')
result = f.clean('12.21.2010') self.assertEqual(result, date(2010, 12, 21))
if parents.issubset(to_delete): next_tier.add(child_block_key)
service = super(ModuleSystem, self).service(block=block, service_name=service_name) if callable(service): return service(block) return service
generate_certificates_for_students( request, params["course_key"], student_set="specific_student", specific_student_id=params["user"].id ) return HttpResponse(200)
with self.assertNumQueries(2): qs = Comment.objects.prefetch_related('content_object') [c.content_object for c in qs]
return self.q(css="#is_prereq").visible
return values
clf = GradientBoostingClassifier(loss=loss, n_estimators=10, random_state=1, presort=presort)
elif not entrance_exam_enabled and course_entrance_exam_present: delete_entrance_exam(request, course_key)
if len(children) < self.max_leases: self.client.create(self.create_path, self.data, ephemeral=self.ephemeral_lease)
import salt.ext.six as six
assert_warns(RuntimeWarning, mb_k_means.fit, X)
test = isinstance(test_list, tuple) and (not test_list[0]) self.assertTrue(test)
opts = parse_bokchoy_opts(options) opts['test_dir'] = 'performance' run_bokchoy(**opts)
self.assertIn('Search for a course', response.content)
new_block = self.store.get_item(new_block.location)
return
del self.lc_block._xmodule._selected_set initial_blocks_assigned = self.lc_block.get_child_descriptors() self.assertEqual(len(initial_blocks_assigned), 2)
datacenter_id = 2
if prev_state[0] is not None: try: next(nvlist(args, ['require']))[2].insert(0, dict([prev_state]))
if 'enabled' not in new_item: new_item['enabled'] = True
func.__doc__ = doc
repr(self.rng)
self.assertNotIn('Add ', response.rendered_content)
self.assertEqual(len(self.video.q(css='video')), 1)
return sorted(cls._enabled_providers(), key=lambda provider: provider.name)
assert isinstance(model.hidden_layers[-1], Softmax) layer_to_clamp[model.hidden_layers[-1]] = True layer_to_pos_samples[model.hidden_layers[-1]] = Y hid = model.hidden_layers[:-1]
response = super(Client, self).patch(path, data=data, content_type=content_type, secure=secure, **extra) if follow: response = self._handle_redirects(response, **extra) return response
self._reconnect()
nonContigFrame = self.frame.reindex(self.ts1.index[::2])
lookup_name = 'same_as'
pass
with self.assertRaisesRegexp(Exception, "Error in xml"): self.check_group('checkboxtextgroup', 'invalid', 'checkbox')
response_str = json.dumps( {'return_code': 0 if success else 1, 'content': message} )
from __future__ import unicode_literals
my_stdout = my_stdout.replace( my_globals['__doc__'], '')
publish.__opts__ = {}
elif isinstance(self.grouper, Grouper):
if 0 != len(new_file): if not new_file[-1].endswith('\n'): new_file[-1] += '\n' new_file.append(not_found_content + '\n')
from __future__ import absolute_import, print_function
from __future__ import absolute_import
return Unpacker(packed, object_hook=object_hook, list_hook=list_hook, use_list=use_list, encoding=encoding, unicode_errors=unicode_errors, object_pairs_hook=object_pairs_hook, max_buffer_size=max_buffer_size, ext_hook=ext_hook)
pillar_roots = [pillar_dir] pillar_roots.extend([x for x in all_dirs if x != pillar_dir]) opts['pillar_roots'] = {env: pillar_roots}
pass
repo['repo'].close() continue
entry_needs_saving = True log.warning("background task (%s) revoked.", task_id) task_output = InstructorTask.create_output_for_revoked()
data = np.random.randint(0, 11, size=10) result = np.argmin(Series(data)) self.assertEqual(result, np.argmin(data))
global tmpdir tmpdir = tempfile.mkdtemp() os.makedirs(os.path.join(tmpdir, 'mldata'))
quartz = Mineral(name="Quartz", hardness=7) with self.assertRaises(IntegrityError): TaggedItem.objects.create(tag="shiny", content_object=quartz)
return self.q(css=self._bounded_selector(self.VALIDATION_SELECTOR)).present
elif any(requirement['status'] in non_eligible_statuses for requirement in requirement_statuses): eligibility_status = "not_eligible"
from __future__ import print_function from __future__ import absolute_import
sh("NO_EDXAPP_SUDO=1 EDX_PLATFORM_SETTINGS_OVERRIDE={settings} /edx/bin/edxapp-migrate-{system} --traceback --pythonpath=. {fake}".format( settings=settings, system=system, fake=fake))
signature = _compute_signature(parameters, access_key_secret) parameters['Signature'] = signature
extract_state_confs(data)
del self.lc_block._xmodule._selected_set
assert isnull(fill_value)
from sqlalchemy.schema import MetaData meta = MetaData(self.pd_sql, schema=schema)
self.kernel.theta = theta
if verbose: for img_id in ret: ret[img_id]['Info'] = inspect_image(img_id)
result = df.loc['2016'] expected = df tm.assert_frame_equal(result, expected)
self.db_connection.ensure_indexes()
from util.testing import patch_testcase, patch_sessions patch_testcase() patch_sessions()
for key, val in six.iteritems(repo_conf): setattr(self, key, val)
if modes_dict is None: modes_dict = cls.modes_for_course_dict(course_id) if cls.HONOR in modes_dict: return cls.HONOR elif cls.AUDIT in modes_dict: return cls.AUDIT
n_samples = 100 n_features = 300
book = Book.objects.annotate(no_value=Value(None, output_field=IntegerField())).first() self.assertIsNone(book.no_value)
SupportedFieldType( 'merged_visible_to_staff_only', VisibilityTransformer, requested_field_name='visible_to_staff_only', )
MODULESTORE = TEST_DATA_SPLIT_MODULESTORE __test__ = True url_name = 'course'
self.check_emails_sent(50, task_history_request)
for boolkey in ('running', 'writeback_running', 'congested'): if boolkey in result: result[boolkey] = bool(result[boolkey])
repos = {} basedirs = _normalize_basedir(basedir) repos = list_repos(basedirs)
if app: if dmg: cmd = 'ls -d *.app' out = __salt__['cmd.run'](cmd, cwd=mount_point, python_shell=True)
templates["inclusion.html"] = "{{ result }}"
from_friend_country = models.ForeignKey(Country, models.CASCADE, related_name="from_friend_country") from_friend_id = models.IntegerField() to_friend_country_id = models.IntegerField() to_friend_id = models.IntegerField()
'pillar_cache_backend': str,
HAS_AUGEAS = False try: from augeas import Augeas as _Augeas HAS_AUGEAS = True except ImportError: pass
task_folder = task_service.GetFolder(location)
with self.assert_logged(r'SafeCookieData signature error .*|test_session_id|.*: ' + sig_error_string): yield
tm.assert_frame_equal(left, right, check_dtype=False) tm.assert_series_equal(ts, right['3rd'])
return models.Client.objects.get(**filters)
X_dense = check_array([[1, 2], [3, 4]]) assert_true(isinstance(X_dense, np.ndarray)) assert_raises(ValueError, check_array, X_ndim.tolist())
df = default_frame err1 = (df + 1).values[0:2, :] self.assertRaises(ValueError, df.where, cond, err1)
from __future__ import absolute_import
with self.assert_signature_error_logged('Signature .* does not match'): yield
subnet = yaml_data['minion'][0]
segment = quote(segment, safe=RFC3986_SUBDELIMS + RFC3986_GENDELIMS + str('~')) return force_text(segment)
self.payment_and_verification_flow.webcam_capture() self.payment_and_verification_flow.next_verification_step(self.immediate_verification_page)
return len(self.q(css='.xblock-header').filter( lambda el: 'xblock-header-video' in el.get_attribute('class')).results)
return etree.Element("schematic")
del good
self.assertFalse(SignatureValidator(self.lti_consumer).check_nonce(nonce))
try: import tornado.testing import tornado.concurrent from tornado.testing import AsyncTestCase HAS_TORNADO = True except ImportError: HAS_TORNADO = False
'openedx.core.djangoapps.site_configuration',
self.assertIn('Welcome to edX.', self.video.captions_text)
response = self._submit_photos(self.course_key, self.reverification_location, self.IMAGE_DATA) self.assertEquals(response.status_code, 400)
def __init__(self, *args, **kwargs): kwargs['file_permissions_mode'] = 0o640 kwargs['directory_permissions_mode'] = 0o740 super(CustomStaticFilesStorage, self).__init__(*args, **kwargs)
forms = list(formset) self.assertEqual(forms, formset.forms) self.assertEqual(len(formset), len(forms))
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
else: ret = _load_result(existing, ret)
[adapt_references(child, destination_course_key, export_fs) for child in subtree.get_children()]
html_last_updated_fmt = '%b %d, %Y'
if mode in ['r', 'r+']: def f():
self._known_consolidated = False
dynamath = [student_answers.get(k + '_dynamath', None) for k in idset]
super(CoursePage, self).__init__(browser) self.course_info = { 'course_org': course_org, 'course_num': course_num, 'course_run': course_run }
return
return self._get_field('seconds')
Series._metadata = _metadata Series.__finalize__ = _finalize
BODY_SELECTOR = "#structure-panel" TAB_SELECTOR = ".tab#view-course-structure" CHILD_SELECTOR = ".note-group" CHILD_CLASS = EdxNotesChapterGroup
return True
self.assertQuerysetEqual(Reporter.objects.all(), [])
grouped = values.groupby(labels)
rng = date_range('2000-01-01', periods=10000, freq='min') ts = Series(1, index=rng)
return self.get_transformer_data(transformer, TRANSFORMER_VERSION_KEY, 0)
if not self.has_partial_credit: return self.grade_without_partial_credit(student_answer=student_answer)
if self.merge and conflicts: return self.handle_merge(loader, conflicts)
origin = bool(re.search('/', name))
try: return Feature(capi.get_feature(self.ptr, feat_id), self) except GDALException: pass
after_created = attempt.created_at + timedelta(seconds=1) self.assertTrue(attempt.active_at_datetime(after_created))
if ((max_columns and nb_columns > max_columns) or ((not ignore_width) and width and nb_columns > (width // 2))): return False
if not _check_equality(treedic['1 cleaned_mm_list'], treedic['2 cleaned_mm_list']): return False
def f(): df = orig.copy() df.iat[2, 0] = "c"
return graders[self.credit_type[0]]( student_answers=student_answers )
self.assertEqual(response.cookies, {}) self.assertEqual(response['Vary'], 'Cookie')
about_path = reverse('about_course', kwargs={'course_id': unicode(course_key)}) return u'{}{}'.format(site_prefix(), about_path)
self.assertTrue(storage.exists(file_name)) with storage.open(file_name, 'r') as f: self.assertEqual(expected_content, f.read())
if len(err_rows) > 1: upload_csv_to_report_store(err_rows, 'grade_report_err', course_id, start_date)
continue
tm.reset_testing_mode()
idx = DatetimeIndex(['2016-05-16', 'NaT', NaT, np.NaN])
self.user.is_active = False self.user.save()
overview = CourseOverview.get_from_id(self.course_default.id) with self.assertRaises(ValueError): access.has_access(self.user, '_non_existent_action', overview)
return host, ''
confirmation_message = self.cohort_management_page.get_cohort_discussions_message(key=key) self.assertEqual("Your changes have been saved.", confirmation_message)
obj = super(BaseManager, cls).__new__(cls) obj._constructor_args = (args, kwargs) return obj
get_version = { 'Linux': linux_diskstats, 'FreeBSD': freebsd_diskstats, }
offset1 = BDay() offset2 = BDay() self.assertFalse(offset1 != offset2)
del locale if not encoding: encoding = sys.getdefaultencoding() or 'ascii'
self.assertIn(" - Create model SillyModel", out.getvalue())
all_alphas = np.unique(all_alphas) stride = int(max(1, int(len(all_alphas) / float(self.max_n_alphas)))) all_alphas = all_alphas[::stride]
return self._data.get(key, default)
level = ''
return full_version[:3]
return source, display_name
return self.bias.get_value()
try: import win32security import win32service import win32serviceutil import pywintypes HAS_WIN32_MODS = True except ImportError: HAS_WIN32_MODS = False
from __future__ import absolute_import, print_function import glob import os import re import sys import json import time import shutil import optparse import subprocess import random
from __future__ import unicode_literals
self.assert_grade(problem, 'choice_3', 'incorrect')
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1)
return urlparse(self.runtime.handler_url(self.block, handler_name, suffix=suffix)).path
self.navigate_to_video()
#keep_warnings = False
import salt.fileserver import salt.utils import salt.syspaths
self.assertRaises(KeyError, store.remove, 'a_nonexistent_store')
add_instructor(new_lib.location.library_key, request.user, request.user)
self.case_sensitive = True
item2 = PaidCourseRegistration.objects.get(id=item2.id) self.assertIsNotNone(item2.course_enrollment) self.assertEqual(item2.course_enrollment.course_id, self.testing_course.id)
return None
pass
self.assertEqual(response.status_code, 400)
'MAX_NOTE_LIMIT': 1000,
self.login() response = self.client.get(self.do_redirect_url) self.assertRedirects(response, '/custom/', fetch_redirect_response=False)
mode = CourseMode.objects.get(course_id=course_key, mode_slug=mode_slug) mode.expiration_datetime = upgrade_deadline mode.save()
if isinstance(self.path, compat.string_types):
self.assertFalse(self.has_notes_tab(self.course, self.user))
hash_val = ",".join([ "{0}={1}".format(key, post_params[key]) for key in signed_fields ]) public_sig = processor_hash(hash_val)
assert_raises(ValueError, compute_sample_weight, [{1: 2, 2: 1}], y_)
latex_documents = [ ('index', 'pylearn2.tex', 'Pylearn2 Documentation', 'LISA lab, University of Montreal', 'manual'), ]
SYMMETRIC_METRICS = [ "accuracy_score", "unnormalized_accuracy_score", "hamming_loss", "jaccard_similarity_score", "unnormalized_jaccard_similarity_score", "zero_one_loss", "unnormalized_zero_one_loss",
self.skipTest('Unable to get the SHELL environment variable')
request.session['ExternalAuthMap'] = eamap
assert_raises(ValueError, _fast_dot, A, A[0, :][None, :])
cummax = self.tsframe.cummax(axis=1) expected = self.tsframe.apply(Series.cummax, axis=1) tm.assert_frame_equal(cummax, expected)
response = self._search("foo")
block_wrappers.append(partial( replace_static_urls, getattr(descriptor, 'data_dir', None), course_id=course_id, static_asset_path=static_asset_path or descriptor.static_asset_path ))
self.assertRaises(Exception, self.btseries.__getitem__, self.btseries.index[-1] + BDay())
for freq in ['Y', 'M', 'foobar']: self.assertRaises(ValueError, lambda: t1.round(freq))
self._make_eligible()
self.assertEqual(self.series[self.series.idxmin()], self.series.min()) self.assertTrue(isnull(self.series.idxmin(skipna=False)))
management.call_command( 'loaddata', 'm2mtoself.json', verbosity=0, )
expected = DataFrame(columns=['a', 'b', 'c'])
actions = filter(None, actions)
return self.field_decorator(field_value)
with self.assertNumQueries(2): lst1 = self.traverse_qs( House.objects.prefetch_related('occupants'), [['occupants']] )
raise
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return
#html_last_updated_fmt = '%b %d, %Y'
try: if k in merged: merged[k] = key except: pass
self.assertEqual( type(timestamp_instance - datetime_instance), Timedelta) self.assertEqual( type(timestamp_instance + timedelta_instance), Timestamp) self.assertEqual( type(timestamp_instance - timedelta_instance), Timestamp)
from salt.modules import varnish
result3 = func(self.panel, 0) self.assert_numpy_array_equal(result3.values, func(self.panel.values, 0))
if "setuptools" in sys.modules: from setuptools.command.sdist import sdist as _sdist else: from distutils.command.sdist import sdist as _sdist
_valid_mask_octets = frozenset((255, 254, 252, 248, 240, 224, 192, 128, 0))
salt '*' vsphere.ntp_configure my.esxi.host root bad-password '[192.174.1.100, 192.174.1.200]'
COURSE_SLUG = "100" COURSE_NAME = "test_course"
import collections
self.find_css('.group-configuration-description-input').first.fill(value)
result = ols(y=y, x=x, cluster='entity', window_type='expanding', window=10)
tgt_func = { 'range': target_range, 'glob': target_range, }
import salt.exceptions import salt.loader import salt.minion import salt.utils.args import salt.utils.event from salt.client import mixins from salt.output import display_output from salt.utils.lazy import verify_fun
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath
hw_section = next(section for section in sections_list if section.get('url_name') == hw_url_name) return [s.earned for s in hw_section['scores']]
assert_false(X_sparse_unsorted.has_sorted_indices) assert_false(X_test_unsorted.has_sorted_indices)
cookie = self.client.cookies[settings.EDXMKTG_USER_INFO_COOKIE_NAME] user_info = json.loads(cookie.value)
resp = self.client.put(self._url()) self.assertEqual(resp.status_code, 405)
from __future__ import absolute_import import os.path
dashboard_page = DashboardPage(self.browser) self._make_har_file(dashboard_page)
self.assertEqual(unfiltered.index.names, ('major', 'minor'))
return self.find_css('.actions .delete').present
return self.children()
panel.loc['a2'] = df2 tm.assert_frame_equal(panel.loc['a1'], df1) tm.assert_frame_equal(panel.loc['a2'], df2)
def get_base_dir(self): return settings.MEDIA_ROOT def get_base_url(self): return settings.MEDIA_URL
safe_cookie_data = SafeCookieData.create( cookies[settings.SESSION_COOKIE_NAME].value, user_id, )
rval, xdummy = z_hs.owner.op.grad((dummy_v, sqfilt), (x,))
index = self.index[-1:-5:-2] expected = Index(np.array([18, 14]), name='foo') self.assert_index_equal(index, expected)
self.assertEqual(len(courses), 2)
task_definition = task_folder.GetTask(name).Definition
from sys import executable module_path = executable
if not order: raise ValueError("order needs to be specified and greater than 0") terp = interpolate.UnivariateSpline(x, y, k=order, **kwargs) new_y = terp(new_x)
assert str(doc).count('plot::') == 1, str(doc)
dtype = _get_dtype(arr_or_dtype) return dtype.kind in ('S', 'U')
repo = kwargs.get('repo', '') if not fromrepo and repo: fromrepo = repo
if not allow_dups: self.axes[axis]._can_reindex(indexer)
try:
import salt.minion
lazy_settings.APPEND_SLASH self.assertEqual(repr(lazy_settings), expected)
iris = datasets.load_iris()
from pandas.io.pickle import to_pickle return to_pickle(self, path)
self.wait_for_element_visibility( self._bounded_selector(self.VIEWER_SELECTOR), "Note Viewer is visible." )
return []
try: import salt.utils.etcd_util HAS_LIBS = True except ImportError: HAS_LIBS = False
url(r'^api/certificates/', include('lms.djangoapps.certificates.apis.urls', namespace='certificates_api')),
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'verified')
self.win_installer = self.update_session.CreateUpdateInstaller() self.win_installer.Updates = self.install_collection
try: html = lxml.html.fragment_fromstring(fragment.content) except lxml.etree.ParserError: assert_student_view_invalid_html(block, fragment.content) else: assert_student_view_valid_html(block, html)
del post_data[post_key] expected_pattern = r"<title>(\s+)Receipt"
from __future__ import absolute_import
return mock_url_prefix + handler_name
if len(panels) == 0: return None elif len(panels) == 1: return panels[0] elif len(panels) == 2 and panels[0] == panels[1]: return panels[0]
world.visit('/') course_link_css = 'a.course-link' world.css_click(course_link_css) course_title_css = 'span.course-title' assert_true(world.is_css_present(course_title_css))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
pass
return super(PersonAdmin, self).get_queryset(request).order_by('age')
resource_map = API_SETTINGS.get('RESOURCE_MAP', {}) resource_name = kwargs.pop('resource') resource_method = request.method resource = resource_map.get(resource_name)
import pprint
return 'MDSYS.SDO_GEOMETRY'
user = User() user.save() DarkLangConfig( released_languages=languages, changed_by=user, enabled=True ).save()
if issubclass(subarr.dtype.type, compat.string_types): subarr = np.array(data, dtype=object, copy=copy)
import numpy as np from numpy.random import randint
self.assertRaises(TypeError, Progress, 2j, 3)
education_level_label = _(u"Highest level of education completed")
if 'database' not in kwargs: return False
import salt.minion import salt.fileclient import salt.utils import salt.utils.url import salt.crypt import salt.transport from salt.exceptions import CommandExecutionError
data = 'a b c\n1 2 3' msg = 'does not support'
iris = datasets.load_iris() rng = check_random_state(42) perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
response = self.client.get(complete_url) self.assertEqual(response.status_code, 302) self.assertEqual(response['Location'], 'http://example.none/misc/final-destination')
self.assertNotIn(self.seq_loc, chapter.children)
first = first.normalize() last = last.normalize()
child_to_group = { xblock.group_id_to_child.get(unicode(group.id), None): group.id for group in partition_for_this_block.groups }
past_due_date_correct = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="0", due=self.yesterday_str, correct=True) self.assertTrue(past_due_date_correct.answer_available())
#html_use_smartypants = True
return self.to_python(initial) != self.to_python(data)
manager = getattr(self.model, kwargs.pop('manager')) manager_class = create_reverse_many_to_one_manager(manager.__class__, rel) return manager_class(self.instance)
self.assertEqual(certificate_exception['user_email'], self.user.email) self.assertEqual(certificate_exception['user_name'], self.user.username)
self.assertEqual(len(outbox), 1)
return self._unstack_y(self._y_predict_raw)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
DATE_INPUT_FORMATS = [
import salt.utils import salt.utils.args from salt.exceptions import CommandNotFoundError, CommandExecutionError from salt.version import SaltStackVersion, __saltstack_version__ from salt.log import LOG_LEVELS
for key in desired_keys: if key not in item: item[key] = None
nanops.nanmin)
xx, yy = np.meshgrid(np.linspace(-4, 5, 500), np.linspace(-4, 5, 500))
import salt.utils.systemd
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
import logging import hmac import base64 import subprocess
date_checks = []
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
courses_list = list(get_course_enrollments(self.student, None, [])) self.assertEqual(len(courses_list), 1) self.assertEqual(courses_list[0].course_id, course_location)
selected_sort = self.sort_page.get_selected_sort_preference() self.assertEqual(selected_sort, "activity")
repr(df)
elif existing['code'] == 404:
terms_of_service_and_honor_code = branding_api.get_tos_and_honor_code_url() if terms_of_service_and_honor_code != branding_api.EMPTY_URL: data.update({'company_tos_url': terms_of_service_and_honor_code})
self._done = True return chunk
actions = self.get_actions(request) if actions: list_display = ['action_checkbox'] + list(list_display)
self.validate_version()
return self._engine.is_monotonic_increasing
adj = _get_adjustment()
data_types_reverse = DatabaseIntrospection.data_types_reverse.copy() data_types_reverse[cx_Oracle.OBJECT] = 'GeometryField'
test_command = 'sysbench --test=cpu --cpu-max-prime={0} run' result = None ret_val = {}
from sklearn import datasets datasets.mldata.urlopen = urlopen
if clear is True: cmd.append('--clear') if system_site_packages is True: cmd.append('--system-site-packages')
response = self.client.get(url) self.assertContains(response, 'Have debug')
return self.browser.execute_script("return $('{}').is(':focus')".format(selector))
return self.q(css='#course-index-tabs .programs-tab a').present
asset = self.get_sample_asset(name, asset_type) response = self.client.post(self.url, {"name": name, "file": asset}) return response
assert_almost_equal((RBF(2.0) + 1.0)(X), (1.0 + RBF(2.0))(X))
#from IPython.utils.io import Tee
items = source_hash.split('=', 1)
combos = [{x[0]: x[1]} for x in zip(combo_keys, combo_values)]
elif trigger_types[trigger_type] == TASK_TRIGGER_DAILY: trigger.Id = 'Daily_ID1' trigger.DaysInterval = kwargs.get('days_interval', 1)
import logging
auth.reset_default_token_store()
source_suffix = '.rst'
result = s.ewm(com=com, adjust=adjust).mean() tm.assert_series_equal(result, expected)
message = self.textbook_page.get_element_text('.wrapper-content .no-textbook-content') self.assertIn("You haven't added any textbooks", message)
for (name, TreeEstimator), dtype in product(ALL_TREES.items(), [np.float64, np.float32]): est = TreeEstimator(random_state=0)
sa_4326 = 'POINT (-98.493183 29.424170)'
from third_party_auth.tasks import SAML_XML_NS XMLDSIG_XML_NS = 'http://www.w3.org/2000/09/xmldsig#'
valid_repr = transform_valid(valid_set) test_repr = transform_test(test_set)
with tm.assert_produces_warning( expected_warning=IncompatibilityWarning): self.assertRaises( Exception, store.select, 'wp1', Term('minor_axis=B'))
from salt.modules import postgres import salt.ext.six as six
pass
with self.assertRaises(NoReverseMatch): reverse('arg_view', args=['somename'])
import yaml from jinja2 import Environment, FileSystemLoader try:
self.q(css='a[data-section=send_email]').first.click() email_section = BulkEmailPage(self.browser) email_section.wait_for_page() return email_section
profile_str = 'ec2-config' providers = self.run_cloud('--list-providers')
return
etcd.host: 127.0.0.1 etcd.port: 4001
self.panel['foo'] = lp2['ItemA'] assert_series_equal(self.panel['foo'].reindex(lp2.index), lp2['ItemA'], check_names=False)
response = self._get_reverify_page() self.assertContains(response, "reverify-blocked")
module.system.user_is_staff = False
already_fixed = {}
res = self.client.get('/dates/books/%s/' % urlbit) self.assertEqual(res.status_code, 404)
import matplotlib.pyplot as plt
sigmas = sigma * rng.rand(n_features) + sigma / 2. X_hetero = X + rng.randn(n_samples, n_features) * sigmas
return line.endswith('\r' if isinstance(line, six.text_type) else b'\r')
self.cache.clear() self.addCleanup(self.cache.clear)
import logging import os.path
return str((template_name, sorted(context.iteritems())))
self.request.social_strategy.clean_partial_pipeline() raise OAuthValidationError( { "error": "invalid_grant", "error_description": "access_token is not valid", } )
from salt.exceptions import SaltInvocationError import salt.utils
self.instructor = AdminFactory.create() self.client.login(username=self.instructor.username, password="test")
self.assertEqual(len(formset.forms), 3) self.assertFalse(formset.is_valid())
all_assets, __ = content_store.get_all_content_for_course(course.id) self.assertGreater(len(all_assets), 0)
self.assertEqual(self.field.to_representation(value), value)
request = self.request_factory.get('/', {'books_contributed__isnull': 'True'}) changelist = self.get_changelist(request, User, modeladmin)
result = f.clean('13.30') self.assertEqual(result, time(13, 30, 0))
_response = _request("GET", options['url'] + options['db'] + "/_design/salt/_view/minions?group=true")
) self.assertIsInstance(response, HttpResponseNotModified)
new_blocks = [] for i, names, array in tuples: array = _maybe_to_sparse(array) block = make_block(array, klass=SparseBlock, fastpath=True, placement=[i]) new_blocks.append(block) return new_blocks
DOCMODULES = ['sklearn', 'matplotlib', 'numpy', 'scipy']
raise GEOSException('Geometry resulting from slice deletion was invalid.')
os.makedirs(name)
for url in user_info["header_urls"].values(): self.assertIn("http://testserver/", url)
if not model_opts.managed: continue
self.assertEqual( ImportTestCase.date.to_json(ImportTestCase.date.from_json(course_due)), child.xblock_kvs.inherited_settings['due'] )
return sys.modules[name] is not None
delete_item(category='sequential', name='test_sequence')
self._validate_layer_names(layers) total = 0 for layer in self.layers: if layer.layer_name in layers: total += layer.get_input_space().get_total_dimension() return total
return set_logged_in_cookies(request, response, user)
result = df.iloc[[0, 1, 3]] expected = df.ix[[0, 2, 6]] assert_frame_equal(result, expected)
return Index(new_data, name=self.name)
lvs.__salt__ = {}
rng = np.random.RandomState() mean = rng.uniform(1e-6, 1. - 1e-6, (rows, cols, channels))
with ensure_clean_store(self.path) as store:
if getattr(self.distribution, 'salt_ssh_packaging_file', None) is None: print('This command is not meant to be called on it\'s own') exit(1)
import jinja2 import jinja2.exceptions import salt.ext.six as six
echo "Working hard..."
return xblock._edited_by
result = False
file = instance.__dict__[self.field.name]
self.assertEqual(Section.objects.latest('id').article_set.count(), 2)
new_data = kde.sample(44, random_state=0) new_data = pca.inverse_transform(new_data)
self.assertAnnotations(results, ())
return u"//{}/{}/{}".format(settings.CMS_BASE, page, unicode(course.id))
seed = rng.randint(1, np.iinfo(np.int32).max)
page_kwarg = self.kwargs.get(self.paginator.page_query_param) page_query_param = self.request.query_params.get(self.paginator.page_query_param) return page_kwarg or page_query_param or 1
with check_mongo_calls(chapter_queries_1): self.client.get(outline_url, HTTP_ACCEPT='application/json')
msg = "0 sample(s) (shape=(0,)) while a minimum of 1 is required." assert_raise_message(ValueError, msg, check_array, [], ensure_2d=False)
self.submit_answer('Correct', 'Incorrect') self.assertEqual(self.get_progress_detail(), u'1/2')
a = Series([], name='x') df = DataFrame(a) self.assertEqual(df.columns[0], 'x')
finish_time = time() self._ddog_histogram(evt_time, 'delete_many.response_time', (finish_time - evt_time) * 1000)
if revision == ModuleStoreEnum.RevisionOption.published_only: query['_id.revision'] = MongoRevisionKey.published
assert sls_obj.__str__() == '{foo: bar, baz: qux}' assert sls_obj.__repr__() == '{foo: bar, baz: qux}'
setattr(self._modulestore, name, value)
self.assertContains(resp, 'visible_course')
response = self.client.get('/remote_user/', **{self.header: 'newuser'}) self.assertEqual(User.objects.count(), num_users + 1)
if isinstance(values, (ABCSeries, ABCCategoricalIndex)): values = values._values
cummax_xs = self.tsframe.cummax(axis=1) self.assertEqual(np.shape(cummax_xs), np.shape(self.tsframe))
deploy_d_from_conf_file = os.path.join( os.path.dirname(config['conf_file']), 'cloud.deploy.d' )
return False
X = check_array(X) n_eval, _ = X.shape n_samples, n_features = self.X.shape n_samples_y, n_targets = self.y.shape
course.self_paced = True self.store.update_item(course, self.user.id) self.assertTrue(course.self_paced)
assert_series_equal(actual, expected)
xblock = self.store.create_item( self.user_id, test_course.id, 'vertical', block_id='test_vertical' )
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
count = len(obj.get_deferred_fields()) self.assertEqual(count, num)
mlb = MultiLabelBinarizer() assert_array_equal(mlb.fit(inp).transform(inp), indicator_mat) assert_array_equal(mlb.inverse_transform(indicator_mat), inp)
Player.objects.create(name='\u2660') Player.objects.get(name__regex='\u2660')
if storage.exists(path): matched_path = storage.path(path) if matched_path: return matched_path
from __future__ import unicode_literals
window = len(self._index)
parameter_name = None
lookup_name = 'testyear' call_order = []
return response.set_cookie_wrapped_func( key, value, max_age=max_age, expires=expires, path=path, domain=domain, secure=secure, httponly=httponly )
task_definition = task_folder.GetTask(name).Definition
self.chapter = self.store.get_item(self.chapter.location)
d_Z = np.empty(theta.shape[0])
else: return res
for extension in self.cv_extensions: extension.on_save(self.trainers)
salt.utils.cloud.accept_key( self.opts['pki_dir'], vm_['pub_key'], key_id )
from __future__ import absolute_import
with tm.assertRaisesRegexp(TypeError, 'Cannot compare types .+'): ser.replace([1, 2], [np.nan, 0])
with pd.option_context('chained_assignment', 'raise'):
return X
st = os.statvfs(path) total = st.f_blocks * st.f_frsize used = (st.f_blocks - st.f_bfree) * st.f_frsize return total, used
actual_collection = get_edx_api_data(program_config, self.user, 'programs', cache_key=cache_key) self.assertEqual(actual_collection, expected_collection)
random_state = check_random_state(0)
n_samples_curr_lab = np.sum(mask) - 1 if n_samples_curr_lab != 0: intra_clust_dists[mask] = np.sum( current_distances[:, mask], axis=1) / n_samples_curr_lab
try: import pwd except ImportError: if not sys.platform.lower().startswith('win'): raise
import yaml import salt.ext.six as six
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
ONLOAD_BEACON_SAMPLE_RATE = 0.0
self.map = {} self.set_call_count = 0 self.timeout_from_last_call = 0
@ignore_warnings(category=DeprecationWarning) def test_verbose_first_level(): X = rng.randn(30, 5) X[:10] += 2 g = mixture.GMM(n_components=2, n_init=2, verbose=1)
if not use_winrm:
kml_url = url.getElementsByTagName('loc')[0].childNodes[0].data.split('http://example.com')[1]
yield self.auth.authenticate()
return parse(out)
course = CourseFactory.create() create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
pass
url = url + '?' + query_parameters if query_parameters else url response = client.get(url) self.assertEqual(expected_status, response.status_code) return response
model_dependencies = [] models = set() for app_config, model_list in app_list: if model_list is None: model_list = app_config.get_models()
import os import sys import logging
raxes = [self._extract_axis(self, data, axis=i) if a is None else a for i, a in enumerate(axes)] raxes_sm = self._extract_axes_for_slice(self, raxes)
CourseEnrollment.unenroll_by_email("jack@fake.edx.org", course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_no_events_were_emitted()
ctypes_array = GDAL_TO_CTYPES[self.datatype()] * (shape[0] * shape[1])
listener_state = 'cmd_|-listener_test_listening_resolution_one_|-echo "Successful listen resolution"_|-mod_watch' self.assertIn(listener_state, state_run)
return []
'text/plain': json.loads
save_course_update_items(location, course_updates, course_update_items, user) return _get_visible_update(course_update_items)
if not os.path.exists(local_name):
train_score = Perceptron().fit(X, y).score(X, y) assert_less(train_score, 0.8)
assert max(pd.max(), hd.max()) < .17
values = Series([u('a_b_c'), u('c_d_e'), NA, u('f_g_h')])
self._initialize_handlers()
for idx, text in enumerate(text_options): if text == POLL_ANSWER: self.q(css=text_selector).nth(idx).click()
save_submission(conf, valid_repr, test_repr)
from salt.modules import genesis
try: marty.book_set.add(dive) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
self.assertQuerysetEqual( Article.objects.exclude(publications=self.p2), ['<Article: Django lets you build Web apps easily>'] )
inputs = inputs[1:] neg_inputs = neg_inputs[1:]
import numpy as np import matplotlib.pyplot as plt from sklearn import neighbors
resp = self.create_xblock(parent_usage_key=self.usage_key, category='chapter') self.chapter_usage_key = self.response_usage_key(resp)
return (lhs_mask & rhs_mask).nonzero()[0]
self.assertDeserializeEqual(False, 'false') self.assertDeserializeEqual(True, 'true') self.assertDeserializeEqual(-2.78, '-2.78')
from .tasks import update_library_index
url(r'^programs/id_token/$', ProgramsIdTokenView.as_view(), name='programs_id_token'), url(r'^program/', ProgramAuthoringView.as_view(), name='programs'),
if not all_exists: all_exists = (j > 0) break images.append(img)
from __future__ import absolute_import import getpass import os import sys import stat import shutil import resource import tempfile import socket
m.opts['grains'] = grains
server_thread = threading.Thread(target=self.server.serve_forever) server_thread.daemon = True server_thread.start()
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError, MinionError
CourseModeFactory.create( course_id=self.course_key, mode_display_name="Verified Expired", mode_slug="verified_expired", expiration_datetime=past )
pro = Book.objects.using('default').create(title="Pro Django", published=datetime.date(2008, 12, 16))
BACKEND.clear()
parsed_referer = urlparse(referer) if parsed_referer.netloc in ['', domain] and parsed_referer.path == uri: return True
import jinja2 import jinja2.exceptions
if source and not (not follow_symlinks and os.path.islink(real_name)): name_sum = get_hash(real_name, source_sum['hash_type']) else: name_sum = None
X = super(TfidfVectorizer, self).fit_transform(raw_documents) self._tfidf.fit(X) return self
world.browser.execute_script("jQuery.fx.off = true;")
subobj.main_loop(time_budget=time_budget)
get_connection(using).savepoint_commit(sid)
index_col = list(index_col)
self.content_store.find(location)
return dec(func)
url = reverse('dashboard')
result = f.clean('21-12-2010') self.assertEqual(result, date(2010, 12, 21))
self._track_reverification_events('edx.bi.reverify.started', user.id, course_id, checkpoint.checkpoint_name)
return
from salt.states import iptables
s3.query( key=key, keyid=keyid, kms_keyid=keyid, bucket=bucket_name, service_url=service_url, verify_ssl=verify_ssl, location=location, path=_quote(path), local_file=cached_file_path )
return fetch_lfw_people(download_if_missing=download_if_missing, **kwargs)
import salt.utils
n_samples = 100 n_features = 500 rank = 5 k = 10
response = RedirectView.as_view(url='/bar/')(self.rf.request(PATH_INFO='/foo/')) self.assertEqual(response.status_code, 302)
DEFAULT_GROUPS = []
assert_series_equal(s10_2, r10) assert_series_equal(s10_2, r10_2) assert_series_equal(s10_2, rl)
return self.q(css=self._bounded_selector('.cohort-management-group-setup .setup-value')).first.text[0]
__virtualname__ = 'varstack'
if api != 2: log.error('Foreman API v2 is supported only, please specify' 'version 2 in your Salt master config') raise Exception
self.fake_payment_page.submit_payment()
return sum(i.line_cost for i in self.orderitem_set.filter(status=self.status))
mode = 'create' user_attr = __salt__['postgres.role_get']( name, return_password=not refresh_password, **db_args) if user_attr is not None: mode = 'update'
data = process_sls_data(sls_templ, tmplctx)
result = self.frame.apply(lambda x: x * 2, raw=True) expected = self.frame * 2 assert_frame_equal(result, expected)
safe_exec("rnums = [random.randint(0, 999) for _ in xrange(100)]", g) self.assertNotEqual(g['rnums'], rnums)
class ReferencedByGenRel(models.Model): content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE) object_id = models.PositiveIntegerField() content_object = GenericForeignKey('content_type', 'object_id')
if not pkginfo: log.error('Unable to locate package {0}'.format(name)) ret[target] = 'Unable to locate package {0}'.format(target) continue
unrestricted_course = CourseFactory.create() with self.assertNumQueries(1): embargo_api.check_course_access(unrestricted_course.id, user=self.user, ip_address='0.0.0.0')
from salt.utils import mac_utils from salt.exceptions import SaltInvocationError, CommandExecutionError
page.browser.execute_script("jQuery.fx.off = false;")
for name, value in tb_frame.f_locals.items(): if name in sensitive_variables: value = CLEANSED_SUBSTITUTE else: value = self.cleanse_special_types(request, value) cleansed[name] = value
return self._get_course_info(request, course)
from pandas.core.sparse import SparseDataFrame return SparseDataFrame(self._series, index=self.index, columns=self.columns, default_kind=kind, default_fill_value=fill_value)
eps = 0.8 min_samples = 10
deploy_res = __salt__['tomcat.deploy_war'](war, name, 'yes', url, __env__, timeout, temp_war_location=temp_war_location)
request = self.get_request() self.assertEqual(get_level(request), constants.INFO)
microsite.set_by_domain('unknown') self.assertEqual(microsite.get_value('university'), 'default_university')
cls.stack = []
if self.kind == 'timestamp': return super(PeriodIndexResampler, self)._upsample(method, limit=limit)
if not settings.FEATURES.get('EMBARGO'): return True
email = user.email if user.is_authenticated() else request.POST.get('email')
source_suffix = '.rst'
t = Engine().from_string(CSRF_FAILURE_TEMPLATE)
for prev, block in zip(self.blocks[:-1], self.blocks[1:]): if not block.is_comment: self.index[block.start_lineno] = prev
return get_course_cohort_settings(course_key).is_cohorted
if len(data) and (data.dtype == 'float' or data.dtype == 'object'):
#html_sidebars = {}
line1 = self._get_row() if line1 != _correct_line1: raise ValueError("Header record is not an XPORT file.")
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
_args.append(arg)
with self.assertRaisesRegexp(CommandError, ".* requires one or more arguments.*"): call_command('reindex_course')
from pylearn2.utils import serial from pylearn2.datasets import cifar10 from pylearn2.datasets import preprocessing
return self.q(css='.user-list .user-item').map( lambda el: UserWrapper(self.browser, el.get_attribute('data-email')) ).results
cohort_management_section.wait_for_ajax() cohort_management_section.wait_for_page() return cohort_management_section
expected = DataFrame(columns=['foo'], index=pd.Index( [], dtype='int64'))
for i in cfg.versionfile_source.split('/'): root = os.path.dirname(root)
monitoring_dataset = DenseDesignMatrix(X=X)
with tm.assertRaisesRegexp(ValueError, length_error): self.index.copy().set_levels([['a'], ['b']])
for dtype in ['f8', 'f4']: A = A.astype(dtype) B = B.astype(dtype)
tm.assert_almost_equal(tuple(x), x_rec)
saltenv = env
raise NotImplementedError('subclasses of Storage must provide a size() method')
return self.q(css=self.xblock_component_selector)
if 'total_rows' not in _response: log.error('Didn\'t get valid response from requesting all docs: {0}' .format(_response)) return {}
self.assertEqual(CourseEnrollment.objects.count(), 1) enrollment = CourseEnrollment.objects.get(course_id=course_key) self.assertEqual(enrollment.user.username, "test")
self.get_courseware_page() self.assertEqual(self.get_progress_detail(), u'2/2')
if not prepared: value = self.get_prep_value(value) return value
self._disallow_censor_updates()
with self.assertRaisesMessage(AttributeError, 'ImmutableList object is immutable.'): d.sort()
import salt import salt.auth import salt.utils.event
PAYMENT_STATUS_RESPONSE = "success"
return list(self.values)
return {ModuleStoreEnum.Type.split: self.db_connection.heartbeat()}
return all([not xblock.is_placeholder() for xblock in self.xblocks])
resp = ProxyImprovement.objects.select_related().get( reporter__name__icontains='butor' ) self.assertEqual( repr(resp), '<ProxyImprovement: ProxyImprovement:improve that>' )
salt '*' win_wua.list_update KB3030298
from __future__ import absolute_import import os import re import logging import glob
self.video.edx_video_id = self.TEST_EDX_VIDEO_ID self.setup_val_video(associate_course_in_val=False) result = self.get_result(allow_cache_miss) if allow_cache_miss: self.verify_result_with_val_profile(result) else: self.verify_result_with_fallback_and_youtube(result)
'nodegroups': dict,
return self.q(css=selector)[0].text
'ENABLE_MKTG_EMAIL_OPT_IN': False,
with self.assertNumQueries(3): embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
pass
self.assertRaises(ValueError, self.read_csv, StringIO(self.ts_data), index_col=True)
return format_html("Hello {0}!", context['name'])
return (subnet, name)
return CourseUserGroup.objects.get( course_id=course_key, group_type=CourseUserGroup.COHORT, name=name )
forest = ExtraTreesClassifier(n_estimators=250, random_state=0)
for op in ['__add__', '__mul__', '__truediv__', '__div__', '__sub__']:
elif self.ndim == ndim + 1: if axes is None: return self._constructor_sliced(result) return self._constructor_sliced( result, **self._extract_axes_for_slice(self, axes))
ret['comment'] = ( 'User {0}@{1} is not present, so it cannot be removed' ).format(name, host) return ret
if callable(self.limit_choices_to): return self.limit_choices_to() return self.limit_choices_to
if not fragment.js_init_fn: fragment.initialize_js('XBlockToXModuleShim') fragment.json_init_args = {'xmodule-type': block.js_module_name}
resp = ProxyBug.objects.select_related().get(version__icontains='beta') self.assertEqual(repr(resp), '<ProxyBug: ProxyBug:fix this>')
estimator_error = np.mean( np.average(incorrect, weights=sample_weight, axis=0))
return self.q(css='.wrapper-notification-error.is-shown')
df = orig.copy() df.set_value("j", "cats", "b") tm.assert_frame_equal(df, exp_single_cats_value)
(y,x) = (oy,ox) if mode=='full' else (oy,ox) - topleft
import salt.utils from salt import syspaths from salt._compat import ElementTree as ET import salt.utils.http as http import salt.utils.aws as aws import salt.loader from salt.template import compile_template
email_placeholder = _(u"username@domain.com")
self.assertFalse(library_container.has_validation_error) self.assertFalse(library_container.has_validation_warning)
'template',
'reactor': list,
if status == "satisfied" and not eligible_before_update: is_eligible, eligibility_record_created = CreditEligibility.update_eligibility(reqs, username, course_key) if eligibility_record_created and is_eligible: try: send_credit_notifications(username, course_key)
self.fit_transform(X) return self
with np.errstate(divide='ignore'): retval = 1. / dist return retval ** 2
if guid is None: return "No GUID Specified"
return self.system.render_template('module-error.html', { 'staff_access': True, 'data': self.contents, 'error': self.error_msg, })
from __future__ import absolute_import import logging import socket import pprint
pre = __salt__['git.config_get']( cwd=repo, key=name, user=user, ignore_retcode=True, **{'all': True, 'global': global_} )
key_path = None
if __name__ == '__main__':
custom_colors = ['#F00', '#00F', '#FF0', '#000', '#FFF'] _check_plot_works(df.plot, color=custom_colors, subplots=True, filterwarnings='ignore')
for key, val in six.iteritems(kwargs): ret['kwargs'][key] = str(type(val))
self.class_log_prior_ = (np.log(self.class_count_) - np.log(self.class_count_.sum()))
from __future__ import absolute_import
ECOMMERCE_PUBLIC_URL_ROOT = None ECOMMERCE_API_URL = None ECOMMERCE_API_SIGNING_KEY = None ECOMMERCE_API_TIMEOUT = 5 ECOMMERCE_SERVICE_WORKER_USERNAME = 'ecommerce_worker'
locator = xblock.location parent_location = modulestore().get_parent_location(locator) if parent_location is None: return None return modulestore().get_item(parent_location)
result = ExampleCertificateSet.latest_status(self.COURSE_KEY) self.assertIs(result, None)
return { "id": update["id"], "date": update["date"], "content": update["content"], }
self._wait_for( lambda: self.position == position, 'Position is {position}'.format(position=position) )
if not isinstance(obj.list_per_page, int): return must_be('an integer', option='list_per_page', obj=obj, id='admin.E118') else: return []
mgr = BlockManager([block], [items] + levels) obj = self.obj_type(mgr)
assert_equal(rp.n_components, 'auto') assert_equal(rp.n_components_, 110)
self.certificates_section.add_certificate_exception(self.user_name, '')
from __future__ import unicode_literals
self.courseware_page.go_to_sequential_position(position) self.problem_page.wait_for_element_presence( self.problem_page.CSS_PROBLEM_HEADER, 'wait for problem header' ) self.assertEqual(self.problem_page.problem_name, problem_name)
STATUS = Choices('created', 'ready', 'submitted', 'must_retry', 'approved', 'denied') user = models.ForeignKey(User, db_index=True)
warnings.filterwarnings('ignore', category=PerformanceWarning) store.put('df', df) warnings.filterwarnings('always', category=PerformanceWarning)
return obj["id"] in self.context["cc_requester"]["subscribed_thread_ids"]
from tokenize import open as open_py_source
ecode = win32process.GetExitCodeProcess(self._handle) if ecode == win32con.STILL_ACTIVE: raise self.exitstatus = ecode
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
try: course_key = CourseKey.from_string(course_id) except InvalidKeyError: raise Http404
css = '.action-close' return self.find_css(css).first.click()
with check_mongo_calls_range(max_finds=max_mongo_calls, min_finds=min_mongo_calls): _course_overview_2 = CourseOverview.get_from_id(course.id)
if dataset in ["digits", "boston"]: n_samples = X.shape[0] // 5 X = X[:n_samples] X_sparse = X_sparse[:n_samples] y = y[:n_samples]
self.assert_no_matching_events_were_emitted({'event_type': self.USER_SETTINGS_CHANGED_EVENT_NAME})
self.lc_block.source_library_id = unicode(self.library.location.library_key) result = self.lc_block.validate()
'ALLOW_AUTOMATED_SIGNUPS': False,
self.assertContains(response, 'course-container', 1) self.assertIn('Pursue a Certificate of Achievement to highlight', response.content)
self.assertEqual(set(self.run_manage(args1)), set(self.run_manage(args2)))
HOST = '1.2.3.4' USER = 'root' PASSWORD = 'SuperSecret!' ERROR = 'Some Testing Error Message'
bob.save() self.assertEqual(bob._state.db, 'default')
with self.assertRaises(ImproperlyConfigured): self.client.post('/edit/author/%d/delete/naive/' % a.pk)
robust_cov = MinCovDet().fit(X)
service = ReverificationService() status = service.get_status(self.user.id, unicode(self.course_id), self.final_checkpoint_location) self.assertEqual(status, service.NON_VERIFIED_TRACK)
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
names = extra_names + field_names + annotation_names
nv.validate_reshape(args, kwargs) return self
exc_info_on_loglevel=logging.DEBUG
response = self.assert_request_status_code(400, url, method="POST", data=data) self.assertIn("This invoice is already active.", response.content)
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'linode'
idx = pd.PeriodIndex([], name='xxx', freq='H')
with remove_ccx(course_id) as (course_id, restore): return restore(self._modulestore.get_modulestore_type(course_id))
from salt.ext.six import string_types
if (new_result == result).all(): return new_result
from __future__ import absolute_import import os from time import sleep import textwrap
try: state['kwds'].pop('calendar') except: pass
utils.get_programs(self.user)
tm.assert_index_equal(right.union(left), the_union)
world.click_course_content() outline_css = 'li.nav-course-courseware-outline a' world.css_click(outline_css)
self.setup_groups_partitions(num_user_partitions=3)
if isinstance(data, SingleBlockManager):
log.error( 'Failed to read the virtual function for ' '{0}: {1}'.format( self.tag, module_name ), exc_info=True ) return (False, module_name, error_reason)
XMODULE_FIELDS_WITH_USAGE_KEYS = ['location', 'parent']
sls_file = '{0}\\init.sls'.format(os.sep.join(repo)) if not os.path.exists(sls_file):
return cache_and_return(Location._from_deprecated_son(parents[0]['_id'], location.course_key.run))
self.navigate_to_video()
if len(name.split()) > 1: cmd_kwargs.update({'args': name.split(' ', 1)[1]})
return escape(force_text(item))
'minion_id_caching': bool,
def close(self): for closable in self._closable_objects: try: closable.close() except Exception: pass self.closed = True signals.request_finished.send(sender=self._handler_class)
self.client.login(username=self.non_staff_usr, password='test') resp = self.client.get(self.url_locked) self.assertEqual(resp.status_code, 403)
block_values = np.empty(shape, dtype=object) block_values.fill(np.nan)
asset_filename = subs_filename(subs_id, lang) if not filename else filename return Transcript.get_asset(location, asset_filename)
from __future__ import unicode_literals
def f(): Categorical.from_codes([1, 2], [1, 2])
serializer_context = { 'request': request, 'block_structure': blocks, 'requested_fields': requested_fields or [], }
mirrored_aliases[alias] = test_settings['MIRROR']
self.user = UserFactory.create()
kernel = self.kernel return kernel == "precomputed" or callable(kernel)
all_courses = modulestore().get_courses() orgs_lowercase = [org.lower() for org in org_aliases] return [ course.id for course in all_courses if course.id.org.lower() in orgs_lowercase ]
metrics_report = (Env.METRICS_DIR / "safecommit") _write_metric(violations_count_str, metrics_report) sh("cat {metrics_report}".format(metrics_report=metrics_report), ignore_error=True)
self.assert_enrollment_activation(False, CourseMode.VERIFIED)
self.course_outline.visit() subsection = self.course_outline.section_at(section_index).subsection_at(0) subsection.expand_subsection() subsection.add_unit()
from __future__ import absolute_import import os import logging
with descriptor.runtime.export_fs.open('course/{url_name}.xml'.format(url_name=url_name)) as f: course_xml = etree.fromstring(f.read())
panel4dc = self.panel4d.copy() p = panel4dc.iloc[0]
self.check_emails_sent(50, task_history_request, True)
UserProfileFactory(user=self.user)
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
lyr = get_layer() self.assertEqual(source.nfeat, len(lyr)) self.assertEqual(source.gtype, lyr.geom_type.num)
self.p1.undergroundbar bar.place.name = 'foo' bar.place = None bar.save() self.p1.delete()
try: self.minion = salt.minion.SMinion(opts) except SaltClientError as exc: raise SystemExit(str(exc))
Child.objects.create(parent=parent, name='Daniel') Child.objects.create(parent=parent, name='Daniel')
import salt.modules.cmdmod
'master_use_pubkey_signature': bool,
from __future__ import unicode_literals
monitoring_dataset = DenseDesignMatrix(X=X)
update_course_structure.apply_async([unicode(course_key)], countdown=0)
if 'port' not in mod_opts: logger.error("Not loading '%s'. 'port' not specified in config", __name__)
if not _check_cygwin_installed(cyg_arch): LOG.debug('Cygwin ({0}) not installed,\ could not update'.format(cyg_arch)) return False
if hasattr(self.base_field, 'from_db_value'): self.from_db_value = self._from_db_value super(ArrayField, self).__init__(**kwargs)
points = ax.get_position().get_points() x_set.add(points[0][0]) y_set.add(points[0][1])
value = default
from __future__ import unicode_literals
import salt.utils import salt.utils.aws import salt.utils.xmlutil as xml from salt._compat import ElementTree as ET
self.assertEqual(CourseMode.can_auto_enroll(self.course_key), can_auto_enroll)
sum_sqr_XX = conv2d(T.sqr(X), filters=filters, border_mode='full')
DEFAULT_FROM_EMAIL = 'webmaster@localhost'
def ready(self): super(AdminConfig, self).ready() self.module.autodiscover()
from __future__ import unicode_literals
can_introspect_decimal_field = True
etcd_mod.__opts__ = {} etcd_mod.__utils__ = {}
return self.q(css='div.batch-enrollment').present
self.set_header('Access-Control-Expose-Headers', 'X-Auth-Token')
'auth_tries': int,
reload(sklearn.qda) return sklearn.qda
def db_for_write(self, model, **hints): return 'writer'
exc_info_on_loglevel=logging.DEBUG
if is_setter:
import os import logging
continue
return self.q(css="div.problem span.message").text[0]
assert_equal(lshf._fit_X.shape[0], n_samples + n_samples_partial_fit) assert_equal(len(lshf.original_indices_[0]), n_samples + n_samples_partial_fit) assert_equal(len(lshf.trees_[1]), n_samples + n_samples_partial_fit)
self.assertEqual(len(site_configuration_history), 2)
return - 2 * self.score(X).sum() + 2 * self._n_parameters()
for state in READY_STATES: running_tasks = running_tasks.exclude(task_state=state) return len(running_tasks) > 0
r = HttpResponse() r.content = ['1', '2', 3, '\u079e'] self.assertEqual(r.content, b'123\xde\x9e')
reduced_likelihood_function_value = - np.inf par = {}
try: if not fnmatch.fnmatch(repo.url, remote): continue except TypeError: if not fnmatch.fnmatch(repo.url, six.text_type(remote)): continue
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
self.assertIn(draft_video.location, public_vertical.children)
self.train_set.adjust_for_viewer(self.train_set.X)
config_spec = vim.vm.ConfigSpec()
log = logging.getLogger(__name__)
if not self.theme_location: return False
cat_unorderd = cat.set_ordered(False) self.assertFalse((cat > cat).any())
return value
from salt.states import boto_dynamodb
from datetime import timedelta
from __future__ import absolute_import import os import yaml import signal import shutil
x_squared_norms = row_norms(X, squared=True)
with ensure_clean_store(self.path) as store:
empty_series = pd.Series([], name='five') empty_frame = pd.DataFrame([empty_series]) empty_panel = pd.Panel({'six': empty_frame})
smf.__salt__ = {}
import logging import time import salt.ext.six as six
from __future__ import absolute_import import os import time import subprocess
d = d[:nreturned] z = z[:, :nreturned]
key.set_contents_from_string( data, headers={ "Content-Encoding": content_encoding, "Content-Length": len(data), "Content-Type": content_type, } )
self.assertEqual(new_mixed_setting["default"]["ENGINE"], "xmodule.modulestore.mixed.MixedModuleStore")
user = UserFactory.create(is_staff=True) self.assert_user_has_object_permission(user, True)
return 'MATCH (%s) AGAINST (%%s IN BOOLEAN MODE)' % field_name
from __future__ import absolute_import import re
ret = { 'name': name, 'changes': {}, 'result': False, 'comment': '', }
FEATURES['ENABLE_COURSE_DISCOVERY'] = True
import salt.ext.six as six
pythoncom.CoInitialize()
y = 0.5 * X.ravel() \ + np.random.randn(n_samples, 1).ravel()
import json
courses_list_by_staff, __ = get_courses_accessible_to_user(self.request) self.assertEqual(len(courses_list_by_staff), TOTAL_COURSES_COUNT)
return descriptor_global_local_resource_url(block, uri)
_check_align(self.ts[:-5], self.ts[:0], how=kind) _check_align(self.ts[:-5], self.ts[:0], how=kind, fill=-1)
try: os.remove(trans_tar) except (OSError, IOError): pass
def f(): Series([timedelta(days=1), 'foo'], dtype='m8[ns]')
defaults = {'max_length': self.max_length} defaults.update(kwargs) return super(CharField, self).formfield(**defaults)
mock_logger.exception.assert_called_once_with(expected_log_msg)
self.wait_for_ajax() return self._is_element_visible(".response_{} .response-body".format(comment_id))
votes = np.zeros((n_samples, n_classes))
ele.value = grace_period
for item in global_vars: for name in names: self.assertIn(name, list(item.keys()))
return ( CourseKey.from_string(course_key_or_id) if isinstance(course_key_or_id, basestring) else course_key_or_id )
draft_video = self.store.get_item(course_id.make_usage_key('video', self.DRAFT_VIDEO)) self.assertTrue(getattr(draft_video, 'is_draft', False))
execfile
'always_verify_signature': bool,
signal_handler = getattr(self, "signal_handler", None) if signal_handler and bulk_ops_record.has_publish_item: signal_handler.send("pre_publish", course_key=course_id)
X, y = make_circles(n_samples=400, factor=.3, noise=.05, random_state=0)
'ioflo_verbose': int,
model.threshold = 1.0 assert_greater(X_transform.shape[1], model.transform(data).shape[1])
reserved = _("All rights reserved") context['copyright_text'] = u'&copy; {year} {platform_name}. {reserved}.'.format( year=settings.COPYRIGHT_YEAR, platform_name=platform_name, reserved=reserved )
return True
if HAS_ZMQ: zmq.eventloop.ioloop.install() self.io_loop = LOOP_CLASS() for req_channel in self.req_channels:
level = getattr(syslog, _options['level']) facility = getattr(syslog, _options['facility'])
from __future__ import absolute_import import time
bdt = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1), algorithm="SAMME", n_estimators=200)
Donation.add_to_order(self.cart, self.COST) self.cart.start_purchase() self.cart.purchase()
django_args.append('--help')
try: return int(value) + int(arg) except (ValueError, TypeError): try: return value + arg except Exception: return ''
redirect_url = embargo_api.redirect_if_blocked( course_id, user=user, ip_address=get_ip(request), url=request.path ) if redirect_url: return HttpResponse(redirect_url)
win_ntp.__salt__ = {}
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.django_book])
default = self.defaults.get(option.dest) value = getattr(self.options, option.dest, default)
estimator = MockImprovingEstimator(1) assert_raises(ValueError, learning_curve, estimator, X, y, exploit_incremental_learning=True)
raise NotImplementedError
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
BULK_EMAIL_ROUTING_KEY_SMALL_JOBS = LOW_PRIORITY_QUEUE
if required_courses: pre_requisite_courses[course_key] = {'courses': required_courses}
raised = False try: fmt = OneHotFormatter(max_labels=10, dtype='invalid') except TypeError: raised = True assert raised
self.course.user_partitions.append(self.random_user_partition) self.assertIsNone(get_cohorted_user_partition(self.course))
Options.FORWARD_PROPERTIES = {'fields', 'many_to_many', 'concrete_fields', 'local_concrete_fields', '_forward_fields_map'}
Y = Y.astype(np.float64) if sample_weight is not None: sample_weight = np.atleast_2d(sample_weight) Y *= check_array(sample_weight).T
if sys.platform.startswith('win'): return max(0, t - .1) else: return t
return (field_object.usage_id.map_into_course(self.course_id), field_object.field_name)
reader = read_sas(self.file01, format="xport", iterator=True) data = reader.read(10) tm.assert_frame_equal(data, data_csv.iloc[0:10, :])
self.assertTrue(self.store.has_item(course.id.make_usage_key('html', 'multi_parent_html')))
'master_failback_interval': int,
result = d['a'] | d['b'] expected = Series([False, True]) assert_series_equal(result, expected)
X_dense[3, :] = 0.0
self.assert_requirement_status(0.70, self.EXPIRED_DUE_DATE, 'failed')
cohort = CohortFactory(course_id=self.course.id, users=[]) response_dict = self.request_remove_user_from_cohort(None, cohort) self.verify_removed_user_from_cohort( None, response_dict, cohort, expected_error_msg='No username specified' )
if self.object and self.template_name_field: name = getattr(self.object, self.template_name_field, None) if name: names.insert(0, name)
try: return PaidCourseRegistrationAnnotation.objects.get(course_id=self.course_id).annotation except PaidCourseRegistrationAnnotation.DoesNotExist: return u""
if num_steps != 1: for i in xrange(num_steps): layer_to_state = self.sample(layer_to_state, theano_rng, layer_to_clamp, num_steps=1) return layer_to_state
from __future__ import absolute_import import libcloud.security import platform import os
import pickle
data = JUNK_FOOD_DOCS + NOTJUNK_FOOD_DOCS
raise
continue
import dson import logging
return urljoin(self.internal_service_url, '/api/v1/')
pass
log.removeHandler(handler)
if not include_first: results = results[1:]
import salt.ext.six as six try: import zmq except ImportError: pass
if not relpath.startswith('../'): ret.add(os.path.join(repo['mountpoint'], relpath))
self.check_caches("smstc_cache_test_key")
import salt.payload import salt.transport import salt.utils.args from salt.exceptions import SaltReqTimeoutError
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
brc = Birch(n_clusters=None, branching_factor=1, threshold=0.01) assert_raises(ValueError, brc.fit, X)
SOCIAL_AUTH_PIPELINE_TIMEOUT = ENV_TOKENS.get('SOCIAL_AUTH_PIPELINE_TIMEOUT', 600)
_config_filename_ = 'spm' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'spm')
return np.sqrt(self._resid_stats['sse'] / self._df_resid_raw)
from zlib import compress, decompress value = 'value_to_be_compressed' compressed_value = compress(value.encode())
context[self.var_name] = obj return self.expression.resolve(context, True)
cid = cid if cid > 0 else self._id return reverse_course_url( 'certificates.certificates_detail_handler', self.course.id, kwargs={'certificate_id': cid}, )
'event_return': str,
response = self.client.get('/') self.assertContains( response, "<h2>Congratulations on your first Django-powered page.</h2>" )
message = models.CharField(max_length=MAX_MESSAGE_LENGTH)
assert_is_none(SoftwareSecurePhotoVerification.active_for_user(user))
raise _NotFittedError(msg % {'name': type(estimator).__name__})
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
self.assertEqual(jid_file, None)
salt.log.setup.setup_multiprocessing_logging()
('ALIGN', (1, 0), (1, -1), 'LEFT'),
req_kwargs['prefetch'] = False
import salt.utils import salt.utils.mac_utils from salt.exceptions import SaltInvocationError from salt.ext.six.moves import range
s = (y == 2) + (y == 4) X = X[s, :] y = y[s] y = (y != 2).astype(int)
if not set_permissions(username, permissions, uid): log.warning('unable to set user permissions') delete_user(username, uid) return False
self.assertEqual(self.process_response()["x-content-type-options"], "nosniff")
df = df_orig.copy()
with patch('lms.djangoapps.verify_student.models.requests.post', new=mock_software_secure_post_unavailable): attempt = self.create_and_submit() assert_equals(attempt.status, "must_retry")
self.navigate_to_video()
self.panel['strings'] = 'foo' result = self.panel.xs('D', axis=2) self.assertIsNotNone(result.is_copy)
permutation = rng.permutation(n_samples) ind_test = permutation[:n_test] ind_train = permutation[n_test:(n_test + n_train)] yield ind_train, ind_test
if chunk.get('fun') != low.get('fun'): continue
bf = models.ForeignKey(BooleanModel, models.CASCADE) nbf = models.ForeignKey(NullBooleanModel, models.CASCADE)
number = 3 dummy3 = ungettext("%(number)s Foo", "%(number)s Foos", number) % {'number': number}
result = df.replace({1: 'a', 4: 'b'}) assert_frame_equal(expected, result)
raise tornado.gen.Return(event['data']['return'])
CREDIT_TASK_DEFAULT_RETRY_DELAY = 30
serializer = None
output = _cmd('at', '-c', str(jobid))
if correct: self.problem_page.click_choice("choice_2") else: self.problem_page.click_choice("choice_1")
self.__init__()
average_times_exact = [] average_times_approx = [] std_times_approx = [] accuracies = [] std_accuracies = [] average_speedups = [] std_speedups = []
def __init__(self, name): self.name = name def __repr__(self): return 'M<%s>' % self.name
if not version: self.version = getattr(settings, 'GOOGLE_MAPS_API_VERSION', '2.x') else: self.version = version
try: v = tslib.array_to_datetime(v, errors='raise') except ValueError:
if 'ordered' in state: state['_ordered'] = state.pop('ordered') else: state['_ordered'] = False
self._fit_transform(X) return self
EmptyPromise(lambda: self.is_captions_visible() == captions_new_state, "Transcripts are {state}".format(state=state)).fulfill()
config = sconfig.cloud_config('/etc/salt/cloud') self.assertEqual(config['log_file'], env_fpath) os.environ.clear() os.environ.update(original_environ)
return modules_to_update.filter(state__contains='"done": true')
self.assert_payload_contains_ids(load_video_event)
self.delete_team(self.wind_team.team_id, 204, user='staff')
setattr(_MovedItems, move.name, move)
executor.loader.build_graph()
from pandas import __version__ from distutils.version import StrictVersion try: StrictVersion(__version__) raise_warnings = 'release' except ValueError: raise_warnings = 'develop'
expected_grades = [self._format_user_grade(header_row, **user_grade) for user_grade in user_grades] self.verify_rows_in_csv(expected_grades)
for index, cert in enumerate(certificates_list): if certificate_id is not None: if int(cert['id']) == int(certificate_id): match_cert = cert
del params["password"] assert_password_error("A valid password is required")
import salt.utils.openstack.nova as suon
if is_jail(name): return 'Looks like there was an issue deleteing jail \ {0}'.format(name)
item_meta['ETag'] = item_meta['ETag'].strip('"')
self.assertRaises(ValueError, DatetimeIndex, ['2000-01-01', '2000-01-02', '2000-01-04'], freq='D')
return self.dtype
from __future__ import absolute_import import re import logging
ident = re.sub(r' \[.+B\]$', '', ident) ret[ident] = True
url(r'^api/course_structure/', include('course_structure_api.urls', namespace='course_structure_api')),
def handle(self, *args, **options): return json.dumps(eventtracker.get_tracker().resolve_context())
fake_data_api.reset() cached_details = api.get_course_enrollment_details(self.COURSE_ID)
request = Request.blank('') response = self.item_descriptor.studio_transcript(request=request, dispatch='translation/uk') self.assertEqual(response.status, '400 Bad Request')
return True
base, ext = posixpath.splitext(the_path) if base.lower().endswith('.tar'): ext = base[-4:] + ext base = base[:-4] return base, ext
regression = IsotonicRegression() n_samples = 50 x = np.linspace(-3, 3, n_samples) y = x + rng.uniform(size=n_samples)
from __future__ import unicode_literals
index = counter[chosen] minibatch = self.dataset[chosen][ index * self.batch_size:(index + 1) * self.batch_size ] counter[chosen] = (counter[chosen] + 1) % self.limit[chosen] yield minibatch
ret = salt.utils.cloud.bootstrap(vm_, __opts__) ret.update(data.__dict__)
self._assert_output(output)
return tslib.ints_to_pydatetime(self.asi8, self.tz)
self.session._session_key = '1234567' self.assertIsNone(self.session.session_key)
salt '*' vsphere.get_vsan_enabled my.esxi.host root bad-password
self.assertFalse(ax1._shared_x_axes.joined(ax1, ax2)) self.assertFalse(ax2._shared_x_axes.joined(ax1, ax2))
_write_file_network(network, _RH_NETWORK_FILE)
from __future__ import absolute_import, print_function
self.assertIn(npath(filename), autoreload.gen_filenames()) self.assertIn(npath(filename), autoreload.gen_filenames())
print("Feature ranking:")
return _get_fake_course_info(course_id)
np.random.seed(0) n_samples, n_features = 100, 100
with open(filename) as f: results = f.read() os.remove(filename) return results
assert_bad({})
n_samples, n_features = X.shape n_targets = y.shape[1]
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
self.client.login(username=self.user.username, password='test')
return self.module.__func_alias__.get(self.objpath[0], self.objpath[0])
return self._get_sampling_pos(model, X, Y), OrderedDict()
from __future__ import unicode_literals
local_master = True
from __future__ import absolute_import
with self.assertRaises(ImportError): engines.all() with self.assertRaises(ImportError): engines.all()
certs_api.set_cert_generation_enabled(self.course.id, False) self._assert_enable_certs_button_is_disabled()
kde = grid.best_estimator_
return _("All learners")
visitor = AllNodeVisitor(python_code, results) visitor.visit(root_node)
if xblock.location in blocks_visited: return
header = cgi.parse_header(self.request.headers['Content-Type']) value, parameters = header return ct_in_map[value](data)
obj = LTIProviderConfig(**kwargs) obj.save() return obj
f = StumpJokeWithCustomFieldForm() self.assertEqual(f.fields['custom'].queryset, 42)
self.connection.cursor().execute("SELECT 1")
self._require_pytz() return "django_datetime_extract('%s', %s, %%s)" % ( lookup_type.lower(), field_name), [tzname]
self.assertNotContains(response, '<h2>Inner2s</h2>') self.assertNotContains(response, 'Add another Inner2') self.assertNotContains(response, 'id="id_inner2_set-TOTAL_FORMS"')
num_post_keys += 1 if (settings.DATA_UPLOAD_MAX_NUMBER_FIELDS is not None and settings.DATA_UPLOAD_MAX_NUMBER_FIELDS < num_post_keys): raise TooManyFieldsSent( 'The number of GET/POST parameters exceeded ' 'settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.' )
with super(UpdateCommentUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
return CourseEmailTemplate._render(self.plain_template, plaintext, context)
import salt.utils
return self._expiration_datetime
n, p = 10, 5 rng = np.random.RandomState(0)
weight = X[rows][:, cols].sum() cut = (X[row_complement][:, cols].sum() + X[rows][:, col_complement].sum()) return cut / weight
fire('{0}/{1}'.format(tag, _m['type']), _m)
self.assertEqual(mgr.as_matrix().dtype, np.float64)
for ref in self.get_env_refs(refs_post): self.repo[ref] = refs_post[ref] for ref in refs_pre: if ref not in refs_post: del self.repo[ref] return True
signals.got_request_exception.send(sender=self.handler.__class__, request=request) response = self.handler.handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())
if os.system('sphinx-build -b latex -d build/doctrees ' 'source build/latex'): raise SystemExit("Building LaTeX failed.")
import re import logging import shlex import yaml
self.download_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
break
if scheduled_actions: tmp = dictupdate.update(tmp, scheduled_actions) return tmp
ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3, color=c) ax.plot([1], [1], [1], color=c, label=label)
options.mode = 'run' test_js(options)
chapter = self._find_url_name(toc, chapter_url_name) if chapter: return self._find_url_name(chapter['sections'], sequential_url_name) return None
obj.is_active = False obj.save()
self.assertRaises(TypeError, lambda: tdi + Int64Index([1, 2, 3]))
test_success = win_mod_reg.delete_key_recursive('HKEY_LOCAL_MACHINE', subkey) self.assertTrue(test_success)
self.tag_map = defaultdict(list)
self.weighted_setup() self.submit_question_answer('FinalQuestion', {'2_1': 'Correct', '2_2': 'Correct'}) self.check_grade_percent(0.75)
with patch('django.http.HttpResponse.set_cookie') as mock_delete_cookie: self.assert_response(set_request_user=set_request_user, set_session_cookie=set_session_cookie) self.assertEquals(mock_delete_cookie.called, expect_delete_called)
module.system.DEBUG = False
from __future__ import absolute_import
self._verify_components_visible(['discussion']) self._verify_student_view_visible(['discussion'])
clf = DecisionTreeClassifier(max_depth=3) clf.fit(X, y_degraded)
admin.site.register(CourseEventBadgesConfiguration, ConfigurationModelAdmin)
self.assertEqual(module.attempts, 1)
n_samples = 200
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
vals = json.loads(value) value = [self.base_field.to_python(val) for val in vals]
D = pairwise_distances(X) core3, label3 = dbscan(D, sample_weight=sample_weight, metric='precomputed') assert_array_equal(core1, core3) assert_array_equal(label1, label3)
if create_after_overview: self.assertFalse(hasattr(course_overview, 'image_set')) self.set_config(enabled=True) course_overview = CourseOverview.get_from_id(course.id)
test_course = self.store.get_course(test_course.id.version_agnostic()) self.assertIn(test_chapter.location, test_course.children)
opts = self.opts codename = get_permission_codename('add', opts) return request.user.has_perm("%s.%s" % (opts.app_label, codename))
return MilestoneError() if get_pre_requisite_courses_not_completed(user, course_id) else ACCESS_GRANTED
if not isinstance(r, numbers.Number) or \ r < 0 or \ math.isnan(r) or \ math.isinf(r): return False
from __future__ import absolute_import
w = clf.coef_[0] a = -w[0] / w[1] xx = np.linspace(-5, 5) yy = a * xx - (clf.intercept_[0]) / w[1]
BP = namedtuple("Boxplot", ['ax', 'lines'])
if len(names) == 1: return ret[names[0]] return ret
CreditProvider.objects.create(provider_id=other_provider_id, enable_integration=True)
super(TestFooter, self).setUp() cache.clear()
if count < 4: return np.nan if denom == 0: return 0
batch_size = self.batch_size
X = np.ones((5, 10))
if isinstance(config_data, dict): append_dict_profile_to_interface_list(config_data)
valid_block_keys = set([(c.block_type, c.block_id) for c in children]) invalid_block_keys = (selected - valid_block_keys) if invalid_block_keys: selected -= invalid_block_keys
about_descriptor = XBlock.load_class('about') overview_template = about_descriptor.get_template('overview.yaml') self.expected_data['overview'] = overview_template.get('data')
self.assertEqual(list(r), [b'hello', b'world'])
if settings.configured and settings.DEBUG: assert callable(receiver), "Signal receivers must be callable."
TRACKING_IGNORE_URL_PATTERNS = [r'^/event', r'^/login', r'^/heartbeat']
GITHUB_REPO_ROOT = ENV_ROOT / "data"
log.error('Wrong VM type. Valid options are: qemu, openvz (proxmox3) or lxc (proxmox4)') raise SaltCloudExecutionFailure
xx = np.linspace(-1, 5, 10) yy = np.linspace(-1, 5, 10)
is_collection = False
rng = np.random.RandomState(42) X = rng.randint(20, size=(4, 5))
from .models import SAMLProviderConfig return SAMLProviderConfig.current(idp_name).get_config()
from __future__ import absolute_import import logging
tm.assert_almost_equal(sparse_result.default_fill_value, frame.default_fill_value) tm.assert_almost_equal(sparse_result['A'].fill_value, frame['A'].fill_value)
return self.q(css='.advance-modules-remove-text').text[0]
with mock_create_refund(status=403): refund_seat(self.course_enrollment, UserFactory()) self.assertTrue(mock_log_warning.called)
expected = self.read_csv(self.csv1, index_col=0, parse_dates=True)
return self._concat_objects( keys, values, not_indexed_same=True, )
self.connect_pub()
self.advanced_settings.visit() self.advanced_settings.set_values({"Advanced Module List": json.dumps(block_types)})
self.check_val('false', False)
salt '*' win_update.list_updates categories="['Critical Updates']" verbose=True
left = self.rng[:5] right = self.rng[10:]
return _client().cache_local_file(path)
self.assertContains(response, should_contain)
if isinstance(data, mrecords.MaskedRecords): mgr = _masked_rec_array_to_mgr(data, index, columns, dtype, copy)
LogoutPage(self.browser).visit() self._auto_auth(self.USERNAME, self.EMAIL, False)
from salt.modules import supervisord
n_min = plots.shape[1] n_min -= int(np.ceil(plots.shape[1] * self.share)) plots = plots[:, n_min:]
if database: return client.add_database_user(name, passwd) return client.add_cluster_admin(name, passwd)
return
self.opts['beacons'][name]['enabled'] = enabled_value
overrides = copy.deepcopy(FORMFIELD_FOR_DBFIELD_DEFAULTS) for k, v in self.formfield_overrides.items(): overrides.setdefault(k, {}).update(v) self.formfield_overrides = overrides
try: fans = my_sympify(str(ans), matrix=do_matrix, do_qubit=do_qubit) except Exception, err: fans = None
def f(): df.loc(axis=-1)[:, :, ['C1', 'C3']]
values = self.values.asobject is_dates_only = _is_dates_only(values) formatter = (self.formatter or _get_format_datetime64(is_dates_only, date_format=self.date_format)) fmt_values = [formatter(x) for x in values] return fmt_values
raise ThreadNotFoundError("Thread not found.")
return True
if not srs: raise SRSException('Could not create spatial reference from: %s' % srs_input) else: self.ptr = srs
user_enroll = get_enrollment(self.username, self.course_id) self.assertTrue(user_enroll['is_active'])
try: from twilio.rest import TwilioRestClient HAS_TWILIO = True except ImportError: HAS_TWILIO = False
self.assertEqual(cached_structure, not_cached_structure)
'edxmako.shortcuts.microsite_footer_context_processor',
self._deferred_print = [] return super(StandardReport, self).init_file( filename, lines, expected, line_offset)
axis = np.linspace(emp_percentiles[0, col], emp_percentiles[1, col], num=grid_resolution, endpoint=True)
'pillarenv': str,
self.converged_ = False
if not CreditEligibility.is_user_eligible_for_credit(course_key, username): raise UserNotEligibleException(course_key, username)
raise NotImplementedError('subclasses of BaseDatabaseOperations may require a datetime_extract_sql() method')
if self._build_requests_plus_30_for_minus_30(): if self._user_requested_plus_30_skip(): self.event[u'requested_skip_interval'] = -30
self.assertFalse(enrollment['is_active'])
self.children_for_user = { user: [ ItemFactory(category=child_type, parent=self.parent).scope_ids.usage_id for child_type in BLOCK_TYPES ] for user in self.users.itervalues() }
if _ensure_decoded(self.kind) == u('string'): self.data = _unconvert_string_array( self.data, nan_rep=nan_rep, encoding=encoding)
self.assertOLXIsDraftOnly(block_list_to_unpublish) with self.assertRaises(ItemNotFoundError): self.unpublish(block_list_to_unpublish)
values = Series(['fooBAD__barBAD', NA, 'foo'])
y = np.array([3, 3, -1, -1, 2])
dtype, _ = com._maybe_promote(n.dtype)
libraries = [LibraryFactory.create() for _ in range(3)] lib_dict = dict([(lib.location.library_key, lib) for lib in libraries])
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
APP_UPGRADE_CACHE_TIMEOUT = ENV_TOKENS.get('APP_UPGRADE_CACHE_TIMEOUT', APP_UPGRADE_CACHE_TIMEOUT)
parse_result = reversed( [k for k in parse_result
__import__(name) return sys.modules[name]
self._closed_captions_visibility(False)
pass
self.user.is_staff = True self.user.save() self.client.login(username=self.user.username, password='foo')
ts = self.ts[::2] bool_ts = Series(np.zeros(len(ts), dtype=bool), index=ts.index)
modulestore().update_item(self.problem_in_course, self.user.id) self.problem_in_course = modulestore().get_item(self.problem_in_course.location)
res = self.index[1] expected = 2 self.assertEqual(res, expected)
pred = Y_proba > .5 assert_array_equal(pred, Y_pred)
self._course_overview = None
course_page = CoursewarePage(self.browser, self.course_id) self.browser.get(course_page.url + '?tpa_hint=oa2-dummy')
self.ccx = CcxFactory(course_id=self.split_course.id, coach=self.coach) last_week = datetime.datetime.now(UTC()) - datetime.timedelta(days=7)
{% from 'lib.sls' import pythonpkg with context %}
self.request.user = staff_user unlocked_toc = self._return_table_of_contents() for toc_section in self.expected_unlocked_toc: self.assertIn(toc_section, unlocked_toc)
query = self.q(css=self._bounded_selector("#cohort-select option")) return len(query) > 0, query
smart_unicode = smart_text force_unicode = force_text
import_library_from_xml( self.store, 'test_user', self.export_dir, ['exported_source_library'], static_content_store=contentstore(), target_id=source_library2_key, load_error_modules=False, raise_on_failure=True, create_if_not_present=True, )
with six.assertRaisesRegex(self, ImportError, "No module named '?storage'?"): get_storage_class('storage.NonExistingStorage')
pass
from __future__ import absolute_import from inspect import ArgSpec
qs = Book.objects.annotate(num_authors=Count('authors')) pickle.dumps(qs)
scaler_batch = MaxAbsScaler().fit(X)
self.assertEqual(last_sat + offset_sat, next_sat)
return copy.copy(self._wrapped)
from __future__ import absolute_import
return router
return SelfRef.objects.get(selfref=self).pk
model_exists_response = __salt__['boto_apigateway.api_model_exists'](restApiId=self.restApiId, modelName=model, **self._common_aws_args)
log.trace('{0} already removed, skipping'.format(mod_key)) continue
arr, index = _test_data1() arr[np.isnan(arr)] = 0 return arr, index
from salt.modules import djangomod
num_choices = len(self.descriptor.get_children())
full_path = path(__file__).abspath().dirname() / "data" / rel_path with open(full_path) as data_file: return data_file.read()
self.rows = shape[0] self.cols = shape[1]
indices, indptr, spmat_shape, sptype, outshp, kmap = \ convolution_indices.sparse_eval(imgshp, kshp, nkern, step, mode)
return self._getitem_array(key)
from salt.states import incron
self.enter_search_term(text) self.search()
super(LocaleMiddleware, self).__init__(get_response)
return ModuleStoreEnum.Type.split
for microsite in settings.MICROSITE_CONFIGURATION.itervalues(): org_filter = microsite.get('course_org_filter') if org_filter: org_filter_set.add(org_filter)
_ = self.runtime.service(self, "i18n").ugettext check = _('Check') final_check = _('Final Check')
return force_text(unquote(force_str(quoted_url)))
self.user = UserFactory.build(username='test', email='test@edx.org') self.user.set_password('test_password') self.user.save()
return self.page.q(css=self.prefix + selector)
data = io.read() self.book = xlrd.open_workbook(file_contents=data)
EX_GENERIC = 1
p.mugshot.delete(save=False) self.assertEqual(p.mugshot, None) self.check_dimensions(p, None, None)
if upgrade_deadline is not None and verification_deadline < upgrade_deadline: raise serializers.ValidationError( 'Verification deadline must be after the course mode upgrade deadlines.')
qs = RasterModel.objects.filter(**combo)
if hasattr(cls, method_name): continue meth = cls.__promise__(method_name) setattr(cls, method_name, meth)
missing = index - len(self) + 1 if missing > 0: self.extend([None] * missing) list.__setitem__(self, index, value)
if request.method == 'GET': return _get_entrance_exam(request, course_key)
return self.q(css=self._bounded_selector('.user-username')).text[0]
if left.nlevels > 1: for level in range(left.nlevels): llevel = _get_ilevel_values(left, level) rlevel = _get_ilevel_values(right, level)
image_url = microsite.get_value('logo_image_url') if image_url: return '{static_url}{image_url}'.format( static_url=settings.STATIC_URL, image_url=image_url )
if val < 61: raise ValueError("Value is outside of acceptable range: %s " % val)
import salt.ext.six as six from salt.exceptions import SaltClientError
with mock_create_refund(status=500): self.send_signal() self.assertTrue(mock_log_exception.called)
mlp_model = MLP( layers=[mlp_nonlinearity(dim=output_channels, layer_name='mlp', irange=1.0)], batch_size=batch_size, nvis=nvis )
self.fit(X) return self.labels_
AccessTestData(expected_access=True), AccessTestData(xblock_access={1: None}, expected_access=True), AccessTestData(xblock_access={1: []}, expected_access=True),
assert_frame_equal(df.add(row, axis=None), df + row)
return PrefixNode.handle_token(parser, token, "MEDIA_URL")
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
__virtualname__ = 'pkgutil'
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
try: return request.user.username except AttributeError: return ''
assert (niter > 1) == (len(dbm.hidden_layers) > 1)
from __future__ import absolute_import
files = [k for k in s3_meta if 'Key' in k]
if np.fabs(result) > _int64_max: raise ValueError("overflow in timedelta operation")
p = linear_response * (linear_response > 0.) + self.left_slope *\ linear_response * (linear_response < 0.) return p
from __future__ import unicode_literals
return self.system.render_template('lti.html', self.get_context())
processed = request.build_absolute_uri(prefix + rest) return quote + processed + quote
for (country, rule_type) in country_rules: self.assertIn( { 'country': country, 'rule_type': rule_type }, snapshot['country_rules'] )
from salt.modules import pyenv
cls.deltas = [] cls.delays = [] cls.days_long = []
io_loop.run_sync(ipc_subscriber.connect)
def _check_set(df, cond, check_dtypes=True): dfi = df.copy() econd = cond.reindex_like(df).fillna(True) expected = dfi.mask(~econd)
return SimpleLazyObject(self._setupfunc)
draft_branch = ModuleStoreEnum.BranchName.library published_branch = ModuleStoreEnum.BranchName.library
grains['virtual_subtype'] = 'Xen HVM DomU'
proxied_model = opts.concrete_model
mock_progress.return_value = True module = CapaFactory.create() module.weight = 0 progress = module.get_progress() self.assertIsNone(progress) self.assertFalse(mock_progress.called)
if hasher == 'sha256': h = hashlib.sha256(password) elif hasher == 'md5': h = hashlib.md5(password) else: return NotImplemented
css = self._bounded_selector(self.assignment_type_buttons_css) self.q(css=css).filter(lambda el: el.get_attribute('value') == assignment_type).first.click()
before_activation = model.reconstruct_without_dec_acti(X, P)
a = Article(None, 'Fourth article', pub_date=datetime(2005, 7, 31)) a.save() self.assertEqual(a.headline, 'Fourth article')
if key is None: continue
if len(running) >= self.opts.get('ssh_max_procs', 25) or len(self.targets) >= len(running): time.sleep(0.1)
geos_prepare = GEOSFuncFactory('GEOSPrepare', argtypes=[GEOM_PTR], restype=PREPGEOM_PTR) prepared_destroy = GEOSFuncFactory('GEOSPreparedGeom_destroy', argtypes=[PREPGEOM_PTR])
self.q(css=".register-button").click()
if "full_name" in params: response = self._update_full_name(request.user, params["full_name"]) if response is not None: return response
self.assertTrue(issubclass(df.DateCol.dtype.type, np.datetime64), "DateCol loaded with incorrect type")
return cursor.fetchone()[0]
context['accomplishment_banner_opening'] = _("{fullname}, you earned a certificate!").format( fullname=user_fullname )
try: import ntsecuritycon import psutil import pywintypes import win32api import win32net import win32security HAS_WIN32 = True except ImportError: HAS_WIN32 = False
object_domain = RequestSite(request).domain
with self.assertRaises(GitImportErrorRemoteBranchMissing): git_import.add_repo(self.TEST_REPO, repo_dir / 'edx4edx_lite', 'asdfasdfasdf')
import salt.utils import hashlib import datetime import socket import salt.utils.network import salt.utils.validate.net
lookup_name = 'bbcontains'
import salt.daemons.flo self.master = salt.daemons.flo.IofloMaster(self.config)
except (AttributeError, ValueError): return None
if dependencies[0] != "jquery": dependencies.insert(0, "jquery")
dict(safe_zip(range(-19, 20), range(-19, 20))),
for dtype in ['M8[ns]', 'm8[ns]']: self.assertRaises(TypeError, lambda: i.astype(dtype))
item = OrderItem(user=self.user, order=Order.get_cart_for_user(self.user)) with self.assertRaises(NotImplementedError): item.purchased_callback()
self.conn.connect()
import logging import time import json from salt.exceptions import (CommandExecutionError, MinionError)
if ':' not in template: return False scheme = template.split(':', 1)[0].lower() return scheme in self.url_schemes
index = Int64Index([-5, 0, 1, 2]) expected = Index([-5, 0, 1, 2], dtype=np.int64) tm.assert_index_equal(index, expected)
result = store.a tm.assert_series_equal(result, s) result = getattr(store, 'a') tm.assert_series_equal(result, s)
socket.setdefaulttimeout(10)
try: slc = self.get_loc(label) except KeyError as err: try: return self._searchsorted_monotonic(label, side) except ValueError: raise err
return block_structure.get_transformer_block_field( block_key, cls, cls.BLOCK_DEPTH, )
yield
self.assertEqual( self.run_function('shadow.get_login_failed_last', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
do_test(1)
dive.delete(using='other')
unfiltered = self.panel.to_frame(filter_observations=False) assert_panel_equal(unfiltered.to_panel(), self.panel)
canonical_request = '\n'.join(( method, uri, querystring, canonical_headers, signed_headers, payload_hash ))
self.assertEqual(list(storage), example_messages)
expected_p, expected_h = h1.mf_update( state_below = v.upward_state(v_state), state_above = h2.downward_state(h2_state), layer_above = h2)
if func_kw is None: func_kw = [] kwds = {} for k in func_kw: value = kwargs.pop(k, None) if value is not None: kwds[k] = value
unique_together = (('user', 'name',), )
return self.q(css=".error").present
c = c.set_categories([4, 3, 2, 1])
encoding = {'encoding': 'latin-1'} if six.PY3 else {}
SITE_ID = 1 SITE_NAME = "localhost:8001" HTTPS = 'on' ROOT_URLCONF = 'cms.urls'
spelling_lang = 'en_US'
exp = Series([], dtype='float64', index=Index([], dtype='object')) assert_series_equal(result, exp)
new_connection.cursor() self.assertFalse(new_connection.get_autocommit())
n = len(self) indexer = None
self.assert_pickles( Event.objects.select_related('group').order_by('title').values_list('title', 'group__name') )
self.assertEquals(2, len(response_results)) self.assertEquals(True, response_max_exceeded)
return SurveyAnswer.get_answers(self, user, limit_num_users=limit_num_users)
self.assert_redirect_to_register_looks_correct(actions.do_complete(request.backend, social_views._do_login))
self.setup_course() self.setup_user(admin=False, enroll=False, login=True) self.verify_response()
CourseMode.objects.create( course_id=self.verified_course_key, mode_slug="verified", mode_display_name="verified cert", min_price=self.cost )
from django.db.models.manager import Manager manager = Manager.from_queryset(cls)() manager._built_with_as_manager = True return manager
class _WKTReader(IOBase): _constructor = wkt_reader_create _destructor = wkt_reader_destroy ptr_type = WKT_READ_PTR
if abs(r - round(r)) > 0.01: return False r = int(round(r))
unit.view_published_version() self.assertEqual(len(self.browser.window_handles), 2) self.courseware.wait_for_page()
if not hasattr(self, 'non_redundant'): self.non_redundant = False if not hasattr(self, 'mask_weights'): self.mask_weights = None
out_size = get_encoded_size(img_h, img_w, rings) output = numpy.zeros((batch_size, out_size * chans))
EMAIL_HOST_USER = '' EMAIL_HOST_PASSWORD = '' EMAIL_USE_TLS = False EMAIL_USE_SSL = False EMAIL_SSL_CERTFILE = None EMAIL_SSL_KEYFILE = None EMAIL_TIMEOUT = None
from salt.ext.six.moves.urllib.parse import urljoin as _urljoin import salt.ext.six.moves.http_client
return False, project_state
r = s.copy().astype('O') r['a'] = '1' result = r._convert(numeric=True) assert_series_equal(result, s)
if course_mode == 'verified': self.assertIn('xseries-base-btn', response.content) else: self.assertIn('xseries-border-btn', response.content)
return self.backend.award(self, user, evidence_url=evidence_url)
result = to_timedelta(2, unit=unit) expected = Timedelta(np.timedelta64(2, transform(unit)).astype( 'timedelta64[ns]')) self.assertEqual(result, expected)
try: return super(MultiValueDict, self).__getitem__(key) except KeyError: if default is None: return [] return default
if pkgs is None: version_num = kwargs.get('version') variant_spec = kwargs.get('variant') spec = None
from __future__ import absolute_import
from salt.modules import alternatives
reader = read_sas(self.file01, format="xport", chunksize=10) data = reader.get_chunk() tm.assert_frame_equal(data, data_csv.iloc[0:10, :])
parent = block.get_parent() while parent: yield parent parent = parent.get_parent()
X, y = make_blobs(n_samples=80, centers=5, random_state=0) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
mock_call = mock_track_function.mock_calls[-1] event = mock_call[1][2]
from __future__ import unicode_literals
if 'salt' in kws: kws['salt'] = AliasedLoader(kws['salt'])
if compress: render = render_to_kmz else: render = render_to_kml return render('gis/kml/placemarks.kml', {'places': placemarks})
charlie = User(pk=51, username='charlie', email='charlie@example.com') charlie.set_unusable_password()
return self.best_estimator_.predict(X)
if instance in vmconfig['state'] and vmconfig['state'][instance] is not None: for state_cfg in vmconfig['state'][instance]: add_instance = True
should_display = models.BooleanField(default=False)
while True: if mode == "B": if X_pinv is None: X_pinv = linalg.pinv2(X, **pinv2_args) x_weights = np.dot(X_pinv, y_score)
sequence.default_time_limit_minutes += sequence.default_time_limit_minutes self.store.update_item(sequence, self.user.id)
self.assertNotEqual(author.last_name, None)
test_data = state_run['cmd_|-test_one_changing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
tile_w, tile_h = self.get_width_height(self.tile(center, z).extent)
flow = self._create_flow(secrets) return auth.authenticate(flow, self.token_store)
df = DataFrame([['a'], ['b']], index=[1, 2], columns=['value'])
return self.child_at(index)
self.assertEqual(resp.status_code, 200)
for n in range(col.nlevels - 1): arrays.append(col.get_level_values(n))
Plaything.objects.create(name="p1") self.assertQuerysetEqual( Plaything.objects.all(), ['<Plaything: p1>'] )
ax = df.plot.bar(linewidth=2) for r in ax.patches: self.assertEqual(r.get_linewidth(), 2)
df2.ix[mask, cols] = dft.ix[mask, cols] assert_frame_equal(df2, expected)
try: groupSID, domainName, objectType = win32security.LookupAccountName(None, group) except pywinerror: err += 'Group does not exist\n'
import salt.client import salt.runner import salt.wheel
region[np.logical_and(firstring, righthalf)] = 2 region[np.logical_and(secondring, np.logical_not(righthalf))] = 2
import scipy.sparse as sp import numpy as np
STATES_WITH_STATUS = [state for state in READY_STATES] + [PROGRESS]
_sparse_kernels = ["linear", "poly", "rbf", "sigmoid", "precomputed"]
language = request.GET.get('language', translation.get_language())
launch_mcd_on_dataset(1000, 5, 450, 0.1, 0.1, 540)
return BACKEND.get_value_for_org(org, val_name, default)
#epub_pre_files = []
generator = np.random.RandomState(0) mat = generator.rand(100, 100) scaled = _log_normalize(mat) + 1 _do_bistochastic_test(scaled)
self.assertEqual(A.value.__doc__, "Here is the docstring...")
true_importances = np.zeros(n_features)
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
msg = None for i, m in enumerate(smtp_messages): if m[:4] == 'data': msg = smtp_messages[i + 1] break
current_commit_id = get_commit_id(def_ms.courses[reload_dir]) log.debug('commit_id="%s"', commit_id) log.debug('current_commit_id="%s"', current_commit_id)
STUDENT_FILEUPLOAD_MAX_SIZE = ENV_TOKENS.get("STUDENT_FILEUPLOAD_MAX_SIZE", STUDENT_FILEUPLOAD_MAX_SIZE)
name = '{0}-{1}'.format(name, version)
locs = locs.astype(int)
for blob in result: file_name = os.path.join(base_dir, blob)
#if not getattr(func, "_is_xblock_handler", False):
with patch.dict(local_cache.__opts__, {'keep_jobs': 0.00000001}): local_cache.clean_old_jobs()
if 'open_in_browser_url' in self.context: self['page'] = self.context.pop('open_in_browser_url').rpartition('/')[0]
cat = models.ForeignKey(Category, models.CASCADE) self.assertEqual('id', cat.remote_field.get_related_field().name)
assert_raises(ValueError, classifier.decision_function, X.T) assert_raises(ValueError, classifier.decision_function, X.T)
blocks = [] if by_item and not self._is_single_block:
NOT_SYMMETRIC_METRICS = [ "explained_variance_score", "r2_score", "confusion_matrix",
try: return getattr(self, descriptor.cache_name) except AttributeError: pass
from salt.states import makeconf
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(iris.data, iris.target)
self.assertTrue(self.client.login( username=self.TEST_USERNAME, password=self.TEST_PASSWORD) )
for i in range(X.shape[0]): x = X[i] out[i, i] = metric(x, x, **kwds)
log.exception("Couldn't load textbook ({0}, {1})".format(title, book_url)) continue
url( r'^v1/blocks/{}'.format(settings.USAGE_KEY_PATTERN), BlocksView.as_view(), name="blocks_in_block_tree" ),
self.assertQuerysetEqual(author.book_set.order_by('title'), [ '<Book: Les Fleurs du Mal>', '<Book: Les Paradis Artificiels>', ])
self.start_time = datetime.now(UTC) - timedelta(seconds=1)
self.assertFalse(res_json['success'])
course_key = CourseKeyField(max_length=255, db_index=True, null=True)
self._each_parens(r'\left(x^y\right)', 'x^y', '(', tall=True)
import sphinx from docutils.parsers.rst import directives from docutils import nodes from sphinx.util.compat import Directive
import logging
students = User.objects.filter(courseenrollment__course_id=course_key) if len(students) == 0: self.stdout.write("No students enrolled in %s" % course_key.to_deprecated_string()) return
records = LoginFailures.objects.filter(user=user).order_by('-lockout_until') for extra_record in records[1:]: extra_record.delete() return records.get()
if hasattr(self, 'dbm'): return self.dbm return None
self.factory(learning_rate="<unknown>")
if chunksize is None: chunksize = 100000
self._labels = self.grouper.codes
return hasattr(self, method)
problem = self.build_problem(sample_dict=sample_dict, num_samples=10, tolerance=0.01, answer="$calculated_ans", script=script)
return lambda *args, **kwargs: f(g(*args, **kwargs))
import ioflo.app.run from ioflo.base.consoling import getConsole
funcs = ['add', 'mean', 'prod', 'min', 'max', 'var'] for f in funcs: g._cython_agg_general(f)
return 'localtime'
try: if block_data.asides: aside_fields = {block_key.type: {}} for aside in block_data.asides: aside_fields[block_key.type].update(aside['fields']) except AttributeError: pass
k = np.array([], bool)
mode_result = 6
IndexErrorArticle.objects.create( headline="Article 1", pub_date=datetime(2005, 7, 26), expire_date=datetime(2005, 9, 1) ) check()
return None, None
assert np.all(dist < 5 * bandwidth)
filename = '_' + fragment_name contents[filename] = fragment
from __future__ import absolute_import from __future__ import print_function
uid = kwargs.pop('uid', -1) gid = kwargs.pop('gid', -1)
index = self.index[::-1] expected = Index(self.index.values[::-1], name='foo') self.assert_index_equal(index, expected)
if any(relative_path.lower().endswith(excluded_ext.lower()) for excluded_ext in excluded_exts): serve_from_cdn = False
if lookup_type in ('iexact', 'icontains', 'istartswith', 'iendswith'): lookup = 'UPPER(%s)' % lookup
for idx in range(new_parent_cursor, len(new_parent.children)): if new_parent.children[idx].block_id == old_child_loc.block_id: new_parent_cursor = idx + 1
def __init__(self): self.modules = {'A': MockContext()}
resp_params['signed_field_names'] = ",".join(signed_fields)
filtered_answers = {} for answer_key in answers.keys(): if answer_key in allowed_field_names: filtered_answers[answer_key] = escape(answers[answer_key])
return self.get_values()
from __future__ import absolute_import import os import re import logging from subprocess import Popen, PIPE
expected_p, expected_h = h1.mf_update( state_below = v.upward_state(v_state), state_above = h2.downward_state(h2_state), layer_above = h2)
self.assertTrue( self.run_function('pkgutil.is_installed', ['com.apple.pkg.BaseSystemResources']))
CREDIT_PROVIDER_SECRET_KEYS = {}
import integration from salt import client from salt.exceptions import EauthAuthenticationError, SaltInvocationError, SaltClientError
role = CourseCcxCoachRole(self.course.id) role.add_users(self.coach)
self.selenium.switch_to.window(main_window) self.wait_for_value('#id_main_band', '42')
self.verify_success_on_file_content( 'email,cohort\nfoo_email,bar_cohort', mock_store_upload, mock_cohort_task )
warnings.simplefilter('ignore', category=RemovedInDjango20Warning) obj = mark_for_escaping(new_obj) escape_isnt_last_filter = False
axis = list(set(range(value.ndim)) - set(_AXES_MAP[type(value)]))[0]
return _check_range_and_return('vertical shift', label, -5, 5)
Site.objects.all().delete()
from __future__ import unicode_literals
else: local = salt.client.LocalClient() ret = local.cmd('{0}'.format(target), cmd, args, kwargs)
from __future__ import absolute_import import re import logging
pass
course = CourseFactory.create(default_store=modulestore_type, emit_signals=True)
LIBRARY_LABEL = "Library" COUNT_LABEL = "Count" SCORED_LABEL = "Scored" PROBLEM_TYPE_LABEL = "Problem Type"
self.assertEqual(self.p1.restaurant, self.r1) self.assertEqual(self.p1.bar, self.b1)
if enrollment_mode is not None: CourseEnrollmentFactory( is_active=is_active, mode=enrollment_mode, course_id=self.course.id, user=self.user )
sample_weight, estimator_weight, estimator_error = self._boost( iboost, X, y, sample_weight)
if isinstance(res, Series): if res.index.is_(obj.index): group.T.values[:] = res else: group.values[:] = res
from __future__ import absolute_import import time import errno import threading
return self.q(css='body.view-course-create-rerun').present
limit_choices_to = self.remote_field.limit_choices_to defaults.update({ 'limit_choices_to': limit_choices_to, })
actions = [] action_form = helpers.ActionForm actions_on_top = True actions_on_bottom = False actions_selection_counter = True checks_class = ModelAdminChecks
return None
with mock_registered_transformers(self.registered_transformers): self.transformers += self.registered_transformers
self.assertTrue('AAPL' in df.index) self.assertTrue('GOOG' in df.index) self.assertTrue('AMZN' in df.index)
walk_l = list(_depth_limited_walk(name, max_depth)) walk_d = {} for i in walk_l: walk_d[i[0]] = (i[1], i[2])
return left_ax, None, right_indexer
'openedx.core.djangoapps.safe_sessions.middleware.SafeSessionMiddleware',
self.auto_enroll_section.upload_correct_csv_file() self.assertTrue(self.auto_enroll_section.is_notification_displayed(section_type=self.auto_enroll_section.NOTIFICATION_SUCCESS))
interface = interface.split('\\') interface = ''.join(interface)
problem_location = task_input.get('problem_location') student_data = list_problem_responses(course_id, problem_location) features = ['username', 'state'] header, rows = format_dictlist(student_data, features)
if name is not None:
from __future__ import absolute_import import os import shutil import tempfile import uuid
with self.assertRaises(IOError): CourseOverview.load_from_module_store(self.store.make_course_key('Non', 'Existent', 'Course'))
'tools.salt_token.on': True, 'tools.salt_auth.on': True,
update_locale = salt.utils.which('update-locale') if update_locale is None: raise CommandExecutionError( 'Cannot set locale: "update-locale" was not found.')
CourseEnrollmentFactory(user=self.student, course_id=self.course_id)
qs = RasterRelatedModel.objects.filter(rastermodel__rast__dwithin=(rast, 40)) self.assertEqual(qs.count(), 1)
OPTS = {'cachedir': '/tmp/gitfs-test-cache'}
self._validate_vocabulary() max_df = self.max_df min_df = self.min_df max_features = self.max_features
X = self.estimators_[0]._validate_X_predict(X, check_input=True) n_samples = X.shape[0]
__virtualname__ = 'reclass'
certificates[0]['is_active'] = False self.store.update_item(self.course, self.user.id)
return tuple(itertools.chain([int(a[0]) for a in self.non_index_axes], [int(a.axis) for a in self.index_axes]))
xnorml = xnorm dl2s = [x for x in xs] xs = [x + tau * d for x, d in zip(xs, ds)]
with translation.override('de'): output = self.engine.render_to_string('i18n14') self.assertEqual(output, 'foo Passwort Passwort')
df = DataFrame({'foo': np.inf * np.empty(10)}) repr(df)
if source != '': source_path = __salt__['cp.get_url']( source, None, saltenv=__env__)
from __future__ import absolute_import
return getattr(request, 'need_to_delete_cookie', False)
for probe_name in remove_probes_keys_set: remove_probes[probe_name] = configured_probes.pop(probe_name)
if not cuda.cuda_available: convnet_available.compile_error = True _logger.debug('cuda unavailable') return False
Xnan = np.array(X, dtype=np.float64) Xnan[0, 1] = np.nan LogisticRegression(random_state=0).fit(Xnan, Y1)
if not settings.FEATURES.get('ENABLE_EXPORT_GIT'): filtered_list.append('giturl')
response = http.HttpResponse() response['Allow'] = ', '.join(self._allowed_methods()) response['Content-Length'] = '0' return response
import salt.utils.jid
flo = numpy.floor sub = numpy.subtract mul = numpy.multiply div = numpy.divide mod = numpy.mod
vim-enhanced: pkg.removed: - version: 7.4.160-1.el7 - ignore_epoch: True
return
update_linode(node_id, update_args={'Label': name}) log.debug('Set name for {0} - was linode{1}.'.format(name, node_id))
'syndic_jid_forward_cache_hwm': int,
page.wait_for_element_visibility('.new-component-html', 'HTML component menu is visible')
student = UserFactory.create() CourseEnrollmentFactory.create( user=student, course_id=SlashSeparatedCourseKey.from_deprecated_string(self.course_name) ) self.client.login(username=student.username, password="test")
self.tz = _get_tz(block.values.tz) self.update_info(info)
self._publish_events(block_structure, block_key, previous_count, max_count, block_keys) all_selected_children.update(usage_info.course_key.make_usage_key(s[0], s[1]) for s in selected)
self.assertEqual(4326, GEOSGeometry(hexewkb_2d).srid)
x = X.mean(axis=0) d = clf.decision_function([x])
for msg in all_messages: self.assertNotContains(response, msg)
lkey, rkey, count = fkeys(lkey, rkey)
for ax in axes: df.plot(x="a", y="b", title="title", ax=ax)
f = TypedChoiceField(choices=[(1, "+1"), (-1, "-1")], coerce=bool) self.assertTrue(f.clean('-1'))
from __future__ import absolute_import
email_placeholder = _(u"username@domain.com")
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
super(TestCourseVerificationStatus, self).setUp()
index = self.get_course_index(course_key)
return "SAVEPOINT %s" % self.quote_name(sid)
query = "SELECT * FROM raw_query_book" books = Book.objects.all() self.assertSuccessfulRawQuery(Book, query, books)
return [('127.0.0.1:11211 (1)', {})]
result = df.iloc[slice(4, 8)] expected = df.ix[8:14] assert_frame_equal(result, expected)
for name, df2 in grp: new_vals = np.arange(df2.shape[0]) df.ix[name, 'new_col'] = new_vals
self.assert_redirect_to_login_looks_correct(actions.do_complete(request.backend, social_views._do_login))
return bool(self._dict or not self.loaded)
user = UserFactory.create() status = SoftwareSecurePhotoVerification.user_status(user) self.assertEquals(status, ('none', ''))
DEBUG_PROPAGATE_EXCEPTIONS = False
url = "i4x://MITx/999/chapter/notfound" with self.assertRaises(tools.DashboardError): tools.find_unit(self.course, url)
self.verify_pdf_certificate()
f.image = image f.content_type = Image.MIME.get(image.format)
from __future__ import absolute_import import logging
donation = Donation.objects.get(pk=donation.id) self.assertEqual(donation.status, "purchased")
import salt.ext.six as six import salt.utils from salt.modules import network from salt.exceptions import CommandExecutionError if six.PY2: import salt.ext.ipaddress
assert_almost_equal(result._y.values.flat, [1, 4, 5], check_dtype=False)
self.socket.close()
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
cov = ShrunkCovariance() cov.fit(X) assert_array_almost_equal( shrunk_covariance(empirical_covariance(X)), cov.covariance_, 4)
self.d.friends.add(self.a, self.c)
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) scores = cval.cross_val_score(clf, X.tolist(), y.tolist())
import salt.client import salt.output import salt.exceptions from salt.utils import print_cli
def __repr__(self): return _build_repr(self)
stable_x = (x.T - x.max(axis=1)).T numer = np.exp(stable_x) return (numer.T / numer.sum(axis=1)).T
client = get_file_client(__opts__)
from .celery import APP as CELERY_APP
return response
if load['tgt_type'] == 'list': int_payload['topic_lst'] = load['tgt'] pub_sock.send(int_payload)
self.testing_course.enrollment_start = self.tomorrow self.testing_course.enrollment_end = self.nextday self.testing_course = self.update_course(self.testing_course, self.user.id)
self.wait_for_element_visibility('div.problem section.inputtype div .status', 'wait for status icon')
#latex_use_parts = False
for student in students[:4]: CertificateWhitelistFactory.create( user=student, course_id=self.course.id, whitelist=True )
signal_handler.reset_mock() unit = self.store.create_child(self.user_id, subsection.location, 'vertical') signal_handler.send.assert_not_called()
raise NotImplementedError()
p_shared = sharedX(zv[:, 0:rows:pool_rows, 0:cols:pool_cols, :]) h_shared = sharedX(zv) z_shared = sharedX(zv)
df = self.tsframe.fillna(0).astype(np.int32) df.cumprod(0) df.cumprod(1)
self.testLoginRequired(view_url='/login_required_login_url/', login_url='/somewhere/')
PIPELINE_JS_COMPRESSOR = None
port: 8000 ssl_crt: /etc/pki/api/certs/server.crt ssl_key: /etc/pki/api/certs/server.key debug: False disable_ssl: False websockets: True
request = self.request_factory.get('/', {'books_authored__isnull': 'True'}) changelist = self.get_changelist(request, User, modeladmin)
'course_structure_api',
if getattr(sys, 'frozen', False): application_path = os.path.dirname(sys.executable) elif __file__: application_path = os.path.dirname(__file__)
#default_role = None
handle_course_cert_awarded(**self.signal_kwargs) self.assertEqual(mock_is_certification_enabled.call_count, 1) self.assertEqual(mock_task.call_count, 0)
import salt.utils import salt.utils.decorators as decorators import salt.ext.six as six
self.assertContains(response, "\n1 pluggable search person\n") self.assertContains(response, "Bob")
return 0
vb_start_vm(BOOTABLE_BASE_BOX_NAME) ip_addresses = vb_wait_for_network_address(20, machine_name=BOOTABLE_BASE_BOX_NAME) network_count = len(ip_addresses) self.assertGreater(network_count, 0)
self.assert_grade( two_choice_two_input, self._make_answer_dict([(True, ["Platypus"])]), "correct" )
#pylint: disable=E0602
self.deferred_loading = (set(), True)
perms = models.Permission.objects.filter(codename__in=('add_customuser', 'change_customuser')) self.user.user_permissions.add(*perms)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
self._assert_can_reverify()
result = p.iloc[[0, 2]] expected = p.loc[['A', 'C']] assert_panel_equal(result, expected)
return 'http'
#html_show_sphinx = True
return self.values
if len(index) == l: return True elif lplane_indexer == l: return True
fig, axes = self.plt.subplots(1, 1) df = DataFrame(np.random.rand(10, 1), index=list(string.ascii_letters[:10]))
mylocalrepo: git.config_set: - name: user.email - value: foo@bar.net - repo: /path/to/repo
pickled_estimator = pickle.dumps(estimator) unpickled_estimator = pickle.loads(pickled_estimator)
raise SkipTest
self.assertFalse(self.cohort_management_page.is_category_selected())
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
resp = self.client.put(self.exam_url) self.assertEqual(resp.status_code, 405)
sysctl = salt.utils.which('sysctl') arch = salt.utils.which('arch') cmds = {}
with self.assertRaises(Error): Reporter.objects.create(first_name="Cuthbert", last_name="Calculus")
self.staff = StaffFactory.create(course_key=self.course.id)
estimator.set_params(n_components=1)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return Float64Index(data, copy=copy, dtype=dtype, name=name)
return submit_delete_problem_state_for_all_students(self.create_task_request(instructor), location)
with Archive(path) as archive: archive.extract(to_path)
tm.assertRaisesRegexp(ValueError, 'axis', df.to_timestamp, axis=2)
if takeable: loc = key else: loc = self.axes[axis].get_loc(key)
c_float_p = ctypes.POINTER(ctypes.c_float)
if self.keys is None and self.level is None:
rval = -(self.beta * T.dot(state, self.ising_bias()))
blocks_stack.extend(children)
self.assertContains(response, should_contain)
for block_hierarchy in course_hierarchy: self.build_xblock(block_hierarchy, block_map, parent=None)
activation_key = create_account(self.USERNAME, self.PASSWORD, self.EMAIL) user = User.objects.get(username=self.USERNAME)
input_space = VectorSpace(1) class DummyDBM(object): def __init__(self): self.rng = rng layer.set_dbm(DummyDBM()) layer.set_input_space(input_space)
for service, bitmask in sorted_types: if current_bitmask > 0: remaining_bitmask = current_bitmask - bitmask
log = logging.getLogger(__name__)
test_many_zeroes = expectedFailure(test_many_zeroes)
if not self.infer_axes(): return False
continue
return datetime.utcnow().replace(tzinfo=utc)
d = TreeEstimator(random_state=0, max_depth=max_depth).fit(X, y) s = TreeEstimator(random_state=0, max_depth=max_depth).fit(X_sparse, y)
self.assertTrue(timezone.is_naive(dt))
assert isinstance(sls_data, dict) assert isinstance(yml_data, dict) assert sls_data == yml_data
isotonic = CalibratedClassifierCV(est, cv=2, method='isotonic')
split_modulestore = modulestore()._get_modulestore_by_type(ModuleStoreEnum.Type.split) active_version_collection = split_modulestore.db_connection.course_index structure_collection = split_modulestore.db_connection.structures
s = Series(list('abc'), dtype='category') s2 = Series(list('abd'), dtype='category')
#add_module_names = True
class MyModel4(AbstractParent, ConcreteParentWithManager): pass self.assertIs(MyModel4.default, MyModel4._default_manager) self.assertIsNone(getattr(MyModel4, 'objects', None))
where = "index <= '%s'" % end_dt result = store.select('df', where=where) tm.assert_frame_equal(expected, result)
cs = GEOSCoordSeq(capi.create_cs(ncoords, ndim), z=bool(ndim == 3))
mixed = Series(['aBAD_BAD', NA, 'BAD_b_BAD', True, datetime.today(), 'foo', None, 1, 2.])
loaderCls = MockLoader
@property def real(self): return self.values.real
return False
raise AttributeError('I am here to confuse django.urls.get_callable')
HAS_LIBS = False try: import dns.query import dns.update import dns.tsigkeyring HAS_LIBS = True except ImportError: HAS_LIBS = False
return Fragment(self.get_html())
if sample_weight is None: break
coefs2 = ridge_regression( X * np.sqrt(sample_weight)[:, np.newaxis], y * np.sqrt(sample_weight), alpha=alpha, solver=solver) assert_array_almost_equal(coefs, coefs2)
with self.assertRaises(xmodule.exceptions.NotFoundError): get_request_dict = {CapaFactory.input_key(): '3.14'} module.check_problem(get_request_dict)
pred = grid_search.fit(train_data, target_train).predict(test_data) assert_array_equal(pred, target_test)
METRICS_WITHOUT_SAMPLE_WEIGHT = [ "cohen_kappa_score",
ret['error'] = 'This package does not seem to exist' return ret
with ensure_clean_store(self.path) as store:
return sorted(__salt__)
name = models.CharField(max_length=50)
draft_preferred = 'draft-preferred' published_only = 'published-only'
course = CourseFactory.create(default_store=modulestore_type, run="TestRun", **course_kwargs) self.check_course_overview_against_course(course)
reindexed = self.ts.reindex(list(self.ts.index)) assert_series_equal(self.ts, reindexed)
from __future__ import absolute_import import logging import os import stat
return self.check_outbox(u"Vous avez été")
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1, 2, 3]}, refit=True) grid_search.fit(X, y)
raise
d4 = {'A': None, 'B': None}
self.other_sequential_1.children = []
self._initialize_mixed(contentstore=contentstore, mappings={})
raise SkipTest
from __future__ import unicode_literals
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
if is_css_present(css_selector): return retry_on_exception(lambda: css_find(css_selector, wait_time=timeout)[index].text) else: return ""
stack = [descriptor] while len(stack) > 0: next_descriptor = stack.pop() stack.extend(get_dynamic_descriptor_children(next_descriptor, user_id, module_creator)) yield next_descriptor
return (router, subnet)
resp = self.client.post( reverse('submit_answers', args=['NonExisting']), self.student_answers ) self.assertEquals(resp.status_code, 404)
response = getattr(self.client, method)(self.path) self.assertEqual(response.status_code, 405)
with self.assertRaisesMessage(ValueError, self.error % (self.ob, ObjectA._meta.object_name)): ObjectB.objects.filter(objecta__in=[self.poa, self.ob])
from defusedxml import defuse_stdlib defuse_stdlib() import lxml import lxml.etree from . import etree as safe_etree lxml.etree = safe_etree
self.install_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
memberships = list(CourseTeamMembership.get_memberships(team_id=team_id))
self.bins = bins self.colour = colour Layer.__init__(self)
msg = 'Raster fields require backends with raster support.' with self.assertRaisesMessage(ImproperlyConfigured, msg): self.set_up_test_model(True)
'parent_url', module.xml_attributes.get('parent_sequential_url')
result = store.select_column('df3', 'string', start=2) tm.assert_almost_equal(result.values, df3['string'].values[2:])
shutil.rmtree(t_path)
return cls._do_reindex(modulestore, course_key)
return sqrt(squared_norm(x))
self.distribution.salt_installing_m2crypto_windows = True self.run_command('install-m2crypto-windows') self.distribution.salt_installing_m2crypto_windows = None
dist_X, ind_X = getattr(nbrs_X, method)(None) dist_D, ind_D = getattr(nbrs_D, method)(None) assert_array_almost_equal(dist_X, dist_D) assert_array_almost_equal(ind_X, ind_D)
admin.site.register(User, UserAdmin)
self.send_future_map[message_id] = future
action()
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'openstack', vm_['profile'], vm_=vm_) is False: return False
try: self.url = reverse('login_post') except NoReverseMatch: self.url = reverse('login')
try: return CourseKey.from_string(arg) except InvalidKeyError: return SlashSeparatedCourseKey.from_deprecated_string(arg)
super(BadImplementationAbstractEnrollmentReportProvider, self).get_enrollment_info(user, course_id)
self.set_user_module_score(user, None, None)
self.fake_payment_page.submit_payment()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
group = group.rename(columns=lambda x: x.replace(suffix, ''))
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
from __future__ import absolute_import import time
return header.lower() in self._headers
if __opts__['test']: ret['result'] = None ret['comment'] = 'Service {0} is set to start'.format(name) return ret
response = getattr(self.client, method)(self.url) self.assertEqual(405, response.status_code)
result = idx.delete(len(idx))
max_cookie_size = 2048 not_finished = '__messagesnotfinished__'
num_drafts = self._get_draft_counts(self.course) self.assertEqual(num_drafts, 0)
self.IP = IP self.user_ns = self.IP.user_ns self.user_global_ns = self.IP.user_global_ns
BACKEND.set_config_by_domain(domain)
est.fit(X, y) t = np.asarray(T) assert_raises(ValueError, est.predict, t[:, 1:])
if refresh: refresh_db()
return do_timezone(value, timezone.get_current_timezone())
latest_version_url = '{artifactory_url}/api/search/latestVersion?g={group_url}&a={artifact_id}&repos={repository}'.format( artifactory_url=artifactory_url, repository=repository, group_url=group_url, artifact_id=artifact_id) log.debug('latest_version_url=%s', latest_version_url) return latest_version_url
upload_finish_time = datetime.utcnow().replace(microsecond=0, second=0)
super(NoneToEmptyManager, self).__init__()
klist = list(kwargs.keys()) klist.sort() qbuffer.extend([[k, kwargs[k]] for k in klist])
dr = date_range(datetime(2011, 3, 13, 3, 30), periods=3, freq=datetools.Hour(), tz=tz)
data = Series(766897346 * np.ones(10)) for ddof in range(3): result = data.std(ddof=ddof) self.assertEqual(result, 0.0)
response = self.client.post(reverse('admin:admin_widgets_event_add'), {"main_band": test_str})
url_full = tornado.httputil.url_concat(url, params)
query = self.q(css=CREATE_TEAM_LINK_CSS) if query.present: query.first.click() self.wait_for_ajax()
if wkt: return Geometry(wkt, geo_field.srid) else: return None
est = DummyRegressor(strategy="constant", constant=constants) est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
self.assertNotIn('created', ArticleForm().fields)
self.close()
),
md5 = hashlib.md5() for data in resource: md5.update(repr(data)) return md5.hexdigest()
collection = self._create_collection(len(init_geoms), iter(init_geoms)) super(GeometryCollection, self).__init__(collection, **kwargs)
wp = Panel(vals) self.assertIs(wp.values, vals)
self.distinct_fields = field_names self.distinct = True
return urljoin(self.public_service_url, '/api/v{}/'.format(self.api_version_number))
X_no_array = NotAnArray(X_dense) result = check_array(X_no_array) assert_true(isinstance(result, np.ndarray))
if isinstance(decision_tree, _tree.Tree): recurse(decision_tree, 0, criterion="impurity") else: recurse(decision_tree.tree_, 0, criterion=decision_tree.criterion)
json_output = json.dumps(returned_result) if len(json_output) > 1023: raise ValueError("Length of task output is too long: {0}".format(json_output)) return json_output
return tenant_id
self.assertHTMLEqual( self.widget.render('mydate', None), self.widget.render('mydate', ''), )
clf = AdaBoostRegressor(random_state=0) clf.fit(X, y_regr) assert_array_equal(clf.predict(T), y_t_regr)
cls._initialize_stacker(ax, stacking_id, len(values))
return self.q(css=self._bounded_selector('span.message-text a')).first.text[0]
for database_operation in self.database_operations: to_state = from_state.clone() database_operation.state_forwards(app_label, to_state) database_operation.database_forwards(app_label, schema_editor, from_state, to_state) from_state = to_state
self.choose_new_seed()
S = np.dot(X, X.T) af = AffinityPropagation(affinity="precomputed") af.fit(S) assert_raises(ValueError, af.predict, X)
xblock_group_access = get_field_on_block(xblock, 'group_access', default_value={})
if isinstance(block, XModuleDescriptor):
for __ in range(int(num_responses)): response_element = self.create_response_element(**kwargs)
return False
result = check_url_config(None) self.assertEqual(len(result), 1) warning = result[0] self.assertEqual(warning.id, 'urls.W001')
embargo_redirect = embargo_api.redirect_if_blocked( course.id, user=request.user, ip_address=get_ip(request), url=request.path ) if embargo_redirect is not None: return redirect(embargo_redirect)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key))
from salt.modules import parallels from salt.exceptions import SaltInvocationError
from salt.modules import match
from __future__ import absolute_import import logging
for entry in toc: if entry['url_name'] == url_name: return entry return None
func.argtypes = argtypes func.restype = c_void_p func.errcheck = check_srs return func
wholesalers = list(Wholesaler.objects.all().select_related()) self.assertEqual(wholesalers, [])
url = reverse('activate', kwargs={'key': activation_key}) self.assert_request_status_code(200, url) self.assertTrue(User.objects.get(email=email).is_active)
inheritable = InheritanceMixin.fields.keys() if name in inheritable: for ancestor in _lineage(block): if self.get_override(ancestor, name) is not NOTSET: return False
texinfo_documents = [( master_doc, "django", "", "", "Django", "Documentation of the Django framework", "Web development", False )]
self.reset_password_page.fill_password_reset_form(self.user_info['email'])
return result
def test_no_handler_exception(self): with self.assertRaises(ImproperlyConfigured): self.client.get('/test/me/')
t_start = datetime.now() clf.transform(X) delta = (datetime.now() - t_start) time_to_transform = compute_time(t_start, delta)
for new_name, colspec in compat.iteritems(parse_spec): if new_name in data_dict: raise ValueError('Date column %s already in dict' % new_name)
self.assertEqual( reverification_service.get_status(self.user.id, unicode(self.course_id), self.final_checkpoint_location), 'skipped' )
def func(key, *args): return key
output = self.engine.render_to_string('inheritance12') self.assertEqual(output, '1235')
raise TypeError("PermLookupDict is not iterable.")
return 1
return cls.PROFILE_COUNTRY_CACHE_KEY.format(user_id=user_id)
salt '*' win_update.install_updates categories="['Critical Updates']"
return self.status == CertificateStatuses.downloadable
self.q(css=".xblock-student_view .timed-exam .start-timed-exam").first.click() self.wait_for_element_presence(".proctored_exam_status .exam-timer", "Timer bar")
self.q(css='a.nav-item').filter(text=topic)[0].click()
self._assert_request_status(request_uuid, 'pending')
from salt.utils.odict import OrderedDict
del ring1 del ring2 ring1 = poly[0] ring2 = poly[1]
'tcp_keepalive_cnt': float,
self.lc_block.get_child_descriptors() event_data = self._assert_event_was_published("assigned")
apps = Apps() verbose_name = 'úñí©óðé µóðéø' verbose_name_plural = 'úñí©óðé µóðéøß'
self.rm_lib() self.loader.clear() self.assertNotIn(self.module_key, self.loader)
import logging
] DATETIME_INPUT_FORMATS = [
elif isinstance(err, dict): pass
with salt.utils.fopen(path_test, 'r') as fp_test_: self.assertTrue(fp_test_.read().startswith('en_US.UTF-8'))
agent_version = 1
organizations = microsite_object.get_organizations()
config = XDomainProxyConfiguration.current() config.enabled = is_enabled if whitelist: config.whitelist = "\n".join(whitelist) config.save() cache.clear()
for floats in [[1.1], np.array([1.1])]: with self.assertRaises(TypeError): pd.PeriodIndex._simple_new(floats, freq='M')
self.assertEqual(len(File.objects.all()), 0) self.assertEqual(len(Image.objects.all()), 0)
return False
self._set_opt_in_pref(self.user, "other_org", False)
hashed_name = self.hashed_name(name, original_file)
from __future__ import unicode_literals
return self.input_space
__virtualname__ = 'fluent'
for key in todelete: if key in six.iterkeys(filerepos[repo].copy()): del filerepos[repo][key]
ssh_interface = _get_ssh_interface(vm_)
'an hour from now', '%(count)s hours from now', count
self.batch_size = batch_size if (isinstance(dataset[0], theano.Variable)): self.dataset = [set.get_value(borrow=True) for set in dataset] else: self.dataset = dataset
import salt.auth import salt.wheel
assert_almost_equal(clf.coef_, clf_weighted.coef_, decimal=2)
g() elapsed = (time.time() - start) / niter gc.enable()
from unit.modules.boto_cloudtrail_test import BotoCloudTrailTestCaseMixin
spmat = spmat.ensure_sorted_indices()
return lib.infer_dtype(self)
if former_encoding is not None and former_encoding != "utf-8":
def __init__(self): self.data = {}
vsan_config = vim.vsan.host.ConfigInfo() vsan_config.enabled = False
for l in [slice(-6, 6), slice(-6.0, 6.0)]:
qs = RasterModel.objects.filter(rast__dwithin=(stx_pnt, 500)) self.assertEqual(qs.count(), 1)
domain = domain.split(':')[0] microsites = cls.objects.filter(site__domain__iexact=domain)
if 'X-Edx-Api-Key' in self.headers: response = self.server._response_str logger.debug("Comment Service: sending response %s", json.dumps(response))
self.youtube_configuration.update({ 'time_to_response': 2.0, 'youtube_api_blocked': True, })
try: self.assertIn(ret_str, instance) except AssertionError: self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) raise
y = np.zeros((10, 10)) y[:5, :5] = 1 y[5:, 5:] = 1
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
return "Hello {0}!".format(context['name'])
import logging
from __future__ import absolute_import import os import shutil import textwrap
if listen and not self.event.connect_pub(timeout=timeout): raise SaltReqTimeoutError() payload = yield channel.send(payload_kwargs, timeout=timeout)
out, err = DETAILS['server'].sendline(cmd)
from __future__ import absolute_import import logging import os import pprint import time
from django.contrib.auth import models as auth_app
self.assertTrue(subsection.release_date) self.assertFalse(subsection.due_date) self.assertFalse(subsection.policy)
ret['comment'] = 'Event module not available. Schedule enable job failed.'
return LoncapaProblem(xml, id='1', seed=seed, capa_system=capa_system or test_capa_system(), capa_module=mock_capa_module())
('paying', 'paying'),
from __future__ import unicode_literals
self.options = options if isinstance(stream_or_string, six.string_types): self.stream = six.StringIO(stream_or_string) else: self.stream = stream_or_string
if self._handle is None: return False return bool(self._handle.isopen)
method = '.' + method if how is not None else ''
with no_stdout_stderr(): TheilSenRegressor(verbose=True, random_state=0).fit(X, y) TheilSenRegressor(verbose=True, max_subpopulation=10, random_state=0).fit(X, y)
try: records = _fixed_getframes(etb, context, tb_offset) except: raise print('\nUnfortunately, your original traceback can not be ' 'constructed.\n') return ''
return func(X, Y, **kwds)
import salt.ext.six as six
'master_tops': dict,
self.request.backend = social_utils.load_backend(self.request.social_strategy, self.BACKEND, redirect_uri)
rs = mi_labels.loc['i'] xp = mi_labels.ix['i'] assert_frame_equal(rs, xp)
typ, axes = _align_core(terms) return typ, axes
qbuffer = []
from __future__ import absolute_import import os import textwrap
attempt = SoftwareSecurePhotoVerification(user=user) attempt.status = 'approved' attempt.save()
queryset = self.model.objects.current_set()
import nose import numpy as np
import os
train_algo = SGD( learning_rate = 0.1, cost = MeanSquaredReconstructionError(), batch_size = 10, monitoring_batches = 10, monitoring_dataset = trainset, termination_criterion = EpochCounter(max_epochs=MAX_EPOCHS_UNSUPERVISED), update_callbacks = None )
return json.loads(self._cohorted_discussions)
values = Series([u('a'), u('b'), NA, u('c'), NA, u('eeeeee')])
import logging log = logging.getLogger(__file__)
with self.assertRaises(forms.ValidationError): f.clean('13:30:05')
from __future__ import unicode_literals
assignments = outcomes.get_assignments_for_problem( problem_descriptor, user_id, course_key ) for assignment in assignments: assignment.version_number += 1 assignment.save() return assignments
rendered_html = etree.XML(problem.get_html())
linkedin = 'LinkedIn' facebook = 'Facebook' twitter = 'Twitter'
'file_roots': dict,
SHORT_DATETIME_FORMAT = 'm/d/Y P'
rpm.__salt__ = {}
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition triggers = task_definition.Triggers
ogr_db = get_ogr_db_string() if not ogr_db: self.skipTest("Unable to setup an OGR connection to your database")
result = DataFrame.from_records(documents, index=['order_id', 'quantity']) self.assertEqual(result.index.names, ('order_id', 'quantity'))
return self._is_element_visible("#comment_{} .response-body".format(comment_id))
for student in students[:]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
if not isinstance(idx, RangeIndex): result = idx * idx tm.assert_index_equal(result, idx ** 2)
self.assertEqual( self.run_function('xattr.read', [TEST_FILE, 'spongebob']), 'squarepants')
ret_dense = test_func(DENSE_FILTER) ret_sparse = test_func(SPARSE_FILTER) if ret_dense is not None and ret_sparse is not None: assert_array_almost_equal(ret_dense, ret_sparse, decimal=3)
url(r'^get_students_opened_subsection$', 'class_dashboard.dashboard_data.get_students_opened_subsection', name="get_students_opened_subsection"),
def get(self, request, *args, **kwargs): context = self.get_context_data(**kwargs) return self.render_to_response(context)
module = CapaFactory.create(rerandomize=rerandomize, attempts=0)
ascending = 1 descending = 2
self.course.tabs = self.all_valid_tab_list
if not self.thread_context.handle: self.thread_context.handle = GEOSContextHandle() return self.cfunc(self.thread_context.handle.ptr, *args)
try: resolve(path, urlconf) return True except Resolver404: return False
key_user = key_user.replace('\\', '_')
return bool(_OVERRIDES_DISABLED.disabled)
import salt.ext.six as six import json
metadata_translations = dict(RawDescriptor.metadata_translations) metadata_translations['id'] = 'discussion_id' metadata_translations['for'] = 'discussion_target'
response = self._get_page( 'verify_student_verify_now', course.id, expected_status_code=302 ) self._assert_redirects_to_dashboard(response)
pass
Editor = apps.get_model('migrations', 'Editor') Editor.objects.create(name='Test Editor') raise RuntimeError('Abort migration')
log = logging.getLogger(__file__)
response = self.client.get(self.url) if is_visible: self.assertContains(response, "Student-Generated Certificates") else: self.assertNotContains(response, "Student-Generated Certificates")
if 'SETUP_DIRNAME' in globals():
for item in ret: self.assertSaltTrueReturn(item)
course = CourseFactory.create(start=datetime(2013, 9, 16, 7, 17, 28)) course = modulestore().get_course(course.id) return course
link_map = settings.MKTG_URL_LINK_MAP enable_mktg_site = microsite.get_value( 'ENABLE_MKTG_SITE', settings.FEATURES.get('ENABLE_MKTG_SITE', False) )
self.assertTrue(self.reset_password_page.is_form_visible())
self.create_cohorted_discussions()
recipient_list.append(finance_email)
cohort_name = 'I AM A RANDOM COHORT' data = {'name': cohort_name, 'assignment_type': CourseCohort.RANDOM} response_dict = self.put_handler(self.course, data=data)
with self.assertRaisesRegexp(CommandError, regex): call_command('git_add_course', *args, stderr=StringIO.StringIO())
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.remove_content_references(content_id)
from salt.states import win_dism as dism
world.mongo_client.fsync()
'tcp_master_workers': int,
command.handle(output_path, *org_list, courses=only_courses)
self.assertTrue(module_has_submodule(test_module, 'good_module')) mod = import_module('utils_tests.test_module.good_module') self.assertEqual(mod.content, 'Good Module')
extval = kwargs.get(extname) or kwargs.get(extlongname) or \ csrexts.get(extname) or csrexts.get(extlongname)
attrs['minlength'] = str(self.min_length)
extend(state('.goal').stateconf.require_in(stateconf='yyy::start'))
response = func(*args, **kwargs) remove_headers_from_response(response, *headers) return response
for p_name, p_value in six.iteritems(self.pack): setattr(mod, p_name, p_value)
locator_cls = CCXBlockUsageLocator if isinstance(course_key, CCXLocator) else BlockUsageLocator return locator_cls(course_key, 'course', 'course')
rast = GDALRaster(json.loads(JSON_RASTER)) stx_pnt = GEOSGeometry('POINT (-95.370401017314293 29.704867409475465)', 4326) stx_pnt.transform(3086)
self.functions, self.returners, self.function_errors, self.executors = self._load_modules()
raise NotImplementedError()
return bool(obj["pinned"])
import logging
all_make_index_funcs = [makeIntIndex, makeFloatIndex, makeStringIndex, makeUnicodeIndex, makeDateIndex, makePeriodIndex, makeTimedeltaIndex, makeBoolIndex, makeCategoricalIndex] for make_index_func in all_make_index_funcs: yield make_index_func(k=k)
from salt.modules import deb_apache deb_apache.__grains__ = {} deb_apache.__salt__ = {} deb_apache.__context__ = {}
from salt.cloud.clouds import vmware from salt.exceptions import SaltCloudSystemExit
self._forward_pass(activations, with_output_activation=False) y_pred = activations[-1]
return { "result": "inclusion_params_and_context - Expected result (context value: %s): %s" % (context['value'], arg) }
XBlockDisableConfig.objects.create( disabled_create_blocks='annotatable', enabled=True ) self.assertEqual(XBlockDisableConfig.disabled_create_block_types(), ['annotatable', 'poll', 'survey'])
USER_SETTINGS_CHANGED_EVENT_NAME = u'edx.user.settings.changed'
'auth_timeout': int,
create_single_mgr('sparse_na', N),
return HAS_SQLITE3
from pandas.core.sparse import SparsePanel frames = dict(self.iteritems()) return SparsePanel(frames, items=self.items, major_axis=self.major_axis, minor_axis=self.minor_axis, default_kind=kind, default_fill_value=fill_value)
__func_alias__ = { 'set_': 'set' }
try: result = o.combine_first(o2) self.check_metadata(o, result) except (AttributeError): pass
self._discussion_page = InlineDiscussionPage(self.browser, self.discussion_id)
import logging
mean = X.mean(axis=1) if subtract_mean:
check_idx(Float64Index([1.0, 2.0, 3.0, 4.0]))
self._test_file_time_getter_tz_handling_on(getter) self._test_file_time_getter_tz_handling_off(getter)
if paginated_results.page != page: raise PageNotFoundError("Page not found (No results on this page).")
return self._todo
click_css(self, '.view-live-button', require_notification=False) self.browser.switch_to_window(self.browser.window_handles[-1])
self.assertQuerysetEqual( tony.friends.all(), ['Chris'], attrgetter("name") )
os.remove(filename)
self.assertEqual(course_id, str(course.id))
casted = pd.DataFrame(other, index=self.index, columns=self.columns) return self._combine_frame(casted, na_op, fill_value, level)
y_true, y_pred, _ = make_prediction(binary=True)
X = np.cast['float32'](X) X = X.reshape(-1, 2 * 96 * 96)
from __future__ import unicode_literals
dbc = quote_identifier(dbc, for_grants=(table is '*'))
joined = df_list[0].join(df_list[1:], how='outer') _check_diff_index(df_list, joined, df.index)
six.reraise(DeserializationError, DeserializationError(e), sys.exc_info()[2])
if value is None and hasattr(self, '_level'): del self._level else: self._level = int(value)
self.shell = EmbeddedSphinxShell(exec_lines, self.state)
assert_raises(ValueError, ForestEstimator(min_samples_leaf=-1).fit, X, y) assert_raises(ValueError, ForestEstimator(min_samples_leaf=0).fit, X, y)
from __future__ import absolute_import
self.assertEqual(cert.status, ExampleCertificate.STATUS_STARTED)
'loop_interval': float,
@ignore_warnings def test_explained_variance(): rng = np.random.RandomState(0) n_samples = 100 n_features = 80
continue
for sub_grid in self.param_grid: if not sub_grid: if ind == 0: return {} else: ind -= 1 continue
captured = input()
p = self.PersonModel.objects.get(name="Joan") self.assertEqual(p.mugshot.closed, True)
return self._resampler_for_grouping(self, groupby=groupby, **kwargs)
import salt.ext.six as six
from pandas.core.window import ExpandingGroupby return ExpandingGroupby(self, *args, **kwargs)
warning_msg = _("The problem's state was corrupted by an invalid submission. The submission consisted of:") warning += warning_msg + '<ul>'
if (best_candidate is None) or (new_pot < best_pot): best_candidate = candidate_ids[trial] best_pot = new_pot best_dist_sq = new_dist_sq
from __future__ import absolute_import import os
self.import_asset_metadata(data_path, dest_id)
if check_course: return RandomBadgeClassFactory.create(course_id=self.course.location.course_key, **kwargs) return RandomBadgeClassFactory.create(**kwargs)
series_rep = Series.__unicode__(self) rep = '%s\n%s' % (series_rep, repr(self.sp_index)) return rep
from salt.states import win_certutil as certutil
data = ['foo', 'bar', 'baz'] self.assertRaises(TypeError, Int64Index, data)
exc_info_on_loglevel=logging.DEBUG
if not self.obj.columns.is_unique and engine == 'python': raise NotImplementedError("columns.is_unique == False not " "supported with engine='python'")
_pre_compute = self._pre_compute_svd _errors = self._errors_svd _values = self._values_svd
msg = "Singleton array array(42) cannot be considered a valid collection." assert_raise_message(TypeError, msg, check_array, 42, ensure_2d=False)
clf1 = LogisticRegressionCV(cv=precomputed_folds) target_copy = target.copy() target_copy[target_copy == 0] = 1 clf1.fit(train, target_copy)
sum_comb_c = sum(comb2(n_c) for n_c in contingency.sum(axis=1)) sum_comb_k = sum(comb2(n_k) for n_k in contingency.sum(axis=0))
import datetime as dt from pandas import NaT
return ikepolicy
options.ignore = tuple(DEFAULT_IGNORE.split(','))
assert_almost_equal(np.abs(Yt[0][0]), 1., 1)
course = store.get_course(course.id, depth=1)
__virtualname__ = 'mysql'
self.loader = LazyLoader([self.module_dir], self.opts, tag='module')
os.remove(hashdir) os.makedirs(hashdir)
s.cmd.run('echo at render time', cwd='/') s.file.managed('target.txt', source='salt://source.txt')
overall_msg = correctmap.get_overall_message() self.assertEqual(overall_msg, "Overall message")
try: json.loads(self.configuration) except ValueError: raise ValidationError('Must be valid JSON string.')
'CMS_SEGMENT_KEY': None,
salt '*' win_wua.list_update 'Microsoft Camera Codec Pack'
arguments = [] for name in argument_names: arguments.append(getattr(self, name)) return check(*arguments)
self.notes_page.search("note") self.assertFalse(self.notes_page.is_error_visible) self.assertIn(u"Search Results", self.notes_page.tabs)
BITAND = '&' BITOR = '|'
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
from __future__ import absolute_import import os
attempt = SoftwareSecurePhotoVerification(user=self.user, photo_id_key="dummy_photo_id_key") attempt.mark_ready() attempt.save() attempt.submit()
if __opts__['test']: ret['result'] = None return ret
return self._engine_type(lambda: self.values, len(self))
sparse = self.dense1.to_sparse(fill_value=0) sparse3 = self.dense3.to_sparse(fill_value=0)
cv = check_cv(self.cv)
page.wait_for_component_menu() click_css(page, 'button>span.large-discussion-icon', menu_index)
instance.file.delete() instance.delete()
continue
self.repo = pygit2.init_repository(self.cachedir) new = True
idx[key] = None setattr(self, key, None)
def __init__(self): super(_RequestCache, self).__init__() self.data = {} self.request = None
xpath = "//div[@class='%s inline']" % div_class self.assert_has_xpath(xml, xpath, self.context)
count += 1
system.__salt__ = {}
plus_empty = self.frame + self.empty self.assertTrue(np.isnan(plus_empty.values).all())
doc_topic_distr /= doc_topic_distr.sum(axis=1)[:, np.newaxis] return doc_topic_distr
self.Xt[:self.n_eigen,:] = self.Ut
self.assertHTMLEqual( str(ErrorList(ValidationError(VeryBadError()).messages)), '<ul class="errorlist"><li>A very bad error.</li></ul>' )
dive = Book.objects.using( 'other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
mytopic: boto_sns.present: - region: us-east-1 - profile: mysnsprofile
return self.book.save(self.path)
GIT_REPO_EXPORT_DIR = ENV_TOKENS.get('GIT_REPO_EXPORT_DIR', '/edx/var/edxapp/export_course_repos')
AuthorBooksFormSet = inlineformset_factory(Author, Book, can_delete=False, extra=2, fields="__all__") Author.objects.create(name='Charles Baudelaire')
MKTG_URL_LINK_MAP.update(ENV_TOKENS.get('MKTG_URL_LINK_MAP', {}))
if sniff_sep: line = f.readline() while self.pos in self.skiprows: self.pos += 1 line = f.readline()
@xframe_options_deny def a_view(request): return HttpResponse() r = a_view(HttpRequest()) self.assertEqual(r['X-Frame-Options'], 'DENY')
@property def _constructor(self): return TimedeltaIndexResampler
digits = datasets.load_digits() perm = rng.permutation(digits.target.size) digits.data = digits.data[perm] digits.target = digits.target[perm]
x = np.dot(x, np.arange(x.shape[1] ** 2).reshape(x.shape[1], x.shape[1]))
return {'ok': False, 'msg': msg}
coupon = Coupon(code=code, description='testing code', course_id=course_key, percentage_discount=self.percentage_discount, created_by=self.user, is_active=is_active) coupon.save()
class PreparedPredicate(GEOSFuncFactory): argtypes = [PREPGEOM_PTR, GEOM_PTR] restype = c_char errcheck = staticmethod(check_predicate)
from StringIO import StringIO
from __future__ import absolute_import
s = self.model.objects.get(session_key=self.session.session_key) self.assertEqual(s.account_id, 42)
read_from_file(os.path.join(dataset_conf_path,"installed.lst"))
return True
GRAINS_CACHE = {} DETAILS = {}
pass
if not organizations_enabled(): return [] from organizations import api as organizations_api return organizations_api.get_organization(organization_id)
__all__ = [ CodeResponse, NumericalResponse, FormulaResponse, CustomResponse, SchematicResponse, ExternalResponse, ImageResponse, OptionResponse, SymbolicResponse, StringResponse, ChoiceResponse, MultipleChoiceResponse, TrueFalseResponse, JavascriptResponse, AnnotationResponse, ChoiceTextResponse, ]
r1sq = rnorm**2 - dampsq * xxnorm r1norm = sqrt(abs(r1sq)) if r1sq < 0: r1norm = -r1norm r2norm = rnorm
return self.q(css='li.prerequisites > .tip').visible
self._blklocs = np.append(self._blklocs, 0) self._blknos = np.append(self._blknos, len(self.blocks))
if not data: data = json.dumps({})
with self.assertRaises(InvalidKeyError): call_command('reindex_library', invalid_key)
try: return self.matches[state] except IndexError: return None
from __future__ import unicode_literals
X = np.zeros((n_samples, n_features)) y = np.zeros(n_samples, dtype=np.int)
assert not world.is_css_present('iframe', wait_time=0)
response = self._response() self.assertFalse(response.is_rendered) with self.assertRaises(ContentNotRenderedError): response.content self.assertFalse(response.is_rendered)
result = embargo_api.check_course_access(self.course.id, ip_address='0.0.0.0') self.assertFalse(result)
return self._get_groups(self.experiment_groups_css)
results[kind] = weakref.proxy(df.plot(kind=kind, **args))
return MatchFirst( [ parseElementClass(sym) for sym in symbols ] )
response = self._get_page( 'verify_student_upgrade_and_verify', course.id, expected_status_code=302 ) self._assert_redirects_to_verify_start(response, course.id)
request.csrf_cookie_needs_reset = True
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
non_staff_client, _ = self.create_non_staff_authed_user_client() response = non_staff_client.get(index_url, {}, HTTP_ACCEPT='application/json') self.assertEqual(response.status_code, 403)
locs = product(*(row_locs, col_locs)) for i, j in locs: formatter = _maybe_wrap_formatter(formatter) self._display_funcs[(i, j)] = formatter
return []
from __future__ import absolute_import import re import logging
rng = check_random_state(13) X = rng.rand(100, 2) sample_weight = np.ones(100) reg_y = rng.rand(100)
np.random.seed(1234) p = tm.makePanel()
from __future__ import absolute_import import copy as pycopy import difflib import os import yaml
b = np.zeros((self.dim * 3,))
HAS_GLANCE = False try: from glanceclient import client from glanceclient import exc HAS_GLANCE = True except ImportError: pass
raise InvalidCreditRequirements
self.check_groups(group_permissions.keys()) for group_name, permission_codenames in group_permissions.items(): self.check_permissions(group_name, permission_codenames)
config.toggle() self.assertFalse(config.details_warning_icon_is_present) self.assertFalse(config.details_message_is_present)
i = labels.searchsorted(loc, side='left') j = labels.searchsorted(loc, side='right') return slice(i, j)
parser = TextFileReader(filepath_or_buffer, **kwds)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
data = data[y].copy() data.index.name = y
if name in list_folders(location): return True else: return False
try: HAS_JUNOS = True import jnpr.junos import jnpr.junos.utils import jnpr.junos.utils.config import jnpr.junos.utils.sw except ImportError: HAS_JUNOS = False
cumsum = self.tsframe.cumsum() expected = self.tsframe.apply(Series.cumsum) tm.assert_frame_equal(cumsum, expected)
self.client = Client()
ival_W = Period(freq='W', year=2007, month=1, day=1)
import stat import os import logging
from __future__ import absolute_import
old = list_pkgs()
config_course_cohorts_legacy(self.course, [], cohorted=True, auto_cohort_groups=["AutoGroup"])
self.store.publish(locations['child'], self.user_id)
return key.field_name in self._fields
module = CapaFactory.create(attempts=1, done=True)
blocks = df.as_blocks() for dtype, _df in blocks.items(): if column in _df: _df.ix[:, column] = _df[column] + 1
saltenv = env
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
from salt.utils.args import KWARG_REGEX
from sklearn.linear_model import Lasso
X[:, j] = np.hstack((v, z, p))
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
from salt.exceptions import CommandExecutionError
self.name = name self.kind_attr = kind_attr or "%s_kind" % name if self.cname is None: self.cname = name return self
result = api.baskets.post({ 'products': [{'sku': course_mode.sku}], 'checkout': True, 'payment_processor_name': processor })
assertIsInstance(left, Series, '[Series] ') assertIsInstance(right, Series, '[Series] ')
for mode_slug in course_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode_slug, mode_display_name=mode_slug, )
result = block._try_coerce_and_cast_result(result)
raise NotImplementedError
if event_index is not None: ref = static._resid_raw[-1]
expected = Series( data=['A', 'B', 'C'], index=pd.to_timedelta([0, 10, 20], unit='s') )
algorithm = GDAL_RESAMPLE_ALGORITHMS[resampling]
msg = "No module {loc} for student {student}--access denied?".format( loc=usage_key, student=student ) TASK_LOG.debug(msg) raise UpdateProblemModuleStateError(msg)
library2_key = self._create_library(library="lib2") self._login_as_non_staff_user()
class FrameworkForm(Form): name = CharField() language = ChoiceField()
self.enrollment.update_enrollment(mode=CourseMode.VERIFIED)
tsne = TSNE(early_exaggeration=0.99) assert_raises_regexp(ValueError, "early_exaggeration .*", tsne.fit_transform, np.array([[0.0]]))
result = df.drop_duplicates(('AA', 'AB')) expected = df[:2] tm.assert_frame_equal(result, expected)
response = self.client.post(self.url, self.params) self.assertEqual(response.status_code, 400)
element = etree.fromstring(xml_str) state = {'value': 'H2OYeah', } self.the_input = lookup_tag('chemicalequationinput')(test_capa_system(), element, state)
return False
return 'configuration/{}/current/{}'.format(cls.__name__, entity_id)
import salt.utils from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS from salt.exceptions import ( CommandExecutionError )
from salt.utils import format_call from salt.exceptions import SaltInvocationError
r = HttpResponse(12345) self.assertEqual(r.content, b'12345')
self.payment_and_verification_flow.immediate_verification()
result = df.iloc[[1, 2, 4, 6]] expected = df.reindex(df.index[[1, 2, 4, 6]]) assert_frame_equal(result, expected)
component_css = 'button[data-category=html]' if boilerplate: component_css += '[data-boilerplate={}]'.format(boilerplate) else: component_css += ':not([data-boilerplate])'
return self.client.post(url, post_args)
try: ret = self.run_function( 'state.template_str', ['\n'.join(template)] )
self.assertEqual(new_version.location, target_location)
for param in self.params: value = param.get_value(borrow=True) if not isfinite(value): raise RuntimeError("NaN in " + param.name)
order = [1, 2, 0, 3] for df in [self.mixed_float, self.mixed_int]:
self.verbose_mod = 1 self.start_time = time() self.begin_at_stage = begin_at_stage
with self.assertRaises(TemplateSyntaxError): self.engine.get_template('basic-syntax23')
return 'some html content'
self.client.logout()
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
components = rng.binomial(1, 0.5, (n_components, n_features)) * 2 - 1 return 1 / np.sqrt(n_components) * components
elif revision == ModuleStoreEnum.RevisionOption.draft_only: return get_draft()
cert = OpenSSL.crypto.X509() cert.set_version(2)
if hasattr(self, 'scale_'): del self.scale_ del self.min_ del self.n_samples_seen_ del self.data_min_ del self.data_max_ del self.data_range_
import salt.utils
time.sleep(1) return info(new_name).get('RecordName') == new_name
index = tm.makeUnicodeIndex if compat.PY3: check('table', index) check('fixed', index) else:
result = df.loc[(slice(None), [1]), :] expected = df.iloc[[0, 3]] assert_frame_equal(result, expected)
return self.as_string()
if not isinstance(data, (list, tuple)): data = list(data)
for _, record in self._active_records: if branch and branch not in record.index.get('versions', {}): continue
else:
if not language: return _active.value = translation(language)
check_ortho(T, "x scores are not orthogonal") check_ortho(U, "y scores are not orthogonal")
geom_clone = GEOSFuncFactory('GEOSGeom_clone', argtypes=[GEOM_PTR], restype=GEOM_PTR)
if isinstance(self, ABCSeries): if axis: raise ValueError('cannot align series to a series other than ' 'axis 0')
self.addCleanup(self.cleanup_modulestore) super(ModuleStoreNoSettings, self).setUp()
container_ref = None if datacenter: datacenter_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.Datacenter, datacenter) container_ref = datacenter_ref if datacenter_ref else None
if hasattr(middleware, 'process_response'): def callback(response): return middleware.process_response(request, response) response.add_post_render_callback(callback)
rem_vers = kwargs.pop('remove_version', True) rem_branch = kwargs.pop('remove_branch', True)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
module_path, _, name = path.rpartition('.') return getattr(import_module(module_path), name)
lon = (px[0] - npix) / self._degpp[zoom]
if len(self.costs) > 1: output = self._get_samples_from_model(model, data)
from __future__ import unicode_literals
split_test = self._assert_children(2) group_id_to_child = split_test.group_id_to_child.copy() self.assertEqual(2, len(group_id_to_child))
instances = weakref.WeakValueDictionary()
states_dir = os.path.abspath(self.options.states_dir) self.config['states_dirs'] = [states_dir]
self.assertTrue(mock_connections.close_all.called)
return parse(out)
self.assertEqual(cl.result_count, 1)
n_samples, self.n_features_ = X.shape
idx = PeriodIndex([2000, 2007, 2007, 2009, 2009], freq='A-JUN') ts = Series(np.random.randn(len(idx)), index=idx)
pw_user.__grains__ = {} pw_user.__salt__ = {} pw_user.__context__ = {}
if name in list_tasks(location):
res_rev = cat_rev > cat_rev_base exp_rev = Series([True, False, False]) tm.assert_series_equal(res_rev, exp_rev)
user = User.objects.get(email=self.notenrolled_student.email) self.assertTrue(CourseEnrollment.is_enrolled(user, self.course.id))
from __future__ import absolute_import import logging import json import os
return self.q(css='.components-list li>a').text
X = csr_matrix(Xdigits[:4])
if compat.PY3: f() else: with tm.assert_produces_warning(expected_warning=w): f()
self._assert_user_name(self.user.profile.name)
@override_settings(TEMPLATES=None) @functools.wraps(func) def inner(self): libraries = getattr(self, 'libraries', {})
log = logging.getLogger(__name__)
raised = False try: fmt.theano_expr(theano.tensor.itensor3()) except ValueError: raised = True assert raised
tm.assert_series_equal(temp, pd.Series([True, True, True, False])) self.assertEqual(temp.dtype, np.bool)
import logging
return self.data_specs
#('object', 'OBJECT', 'object_'),
if name is 'SpectralClustering': return set_random_state(alg) with warnings.catch_warnings(record=True): pred2 = alg.fit_predict(X) assert_array_equal(pred, pred2)
(['professional'], 'professional'), (['no-id-professional'], 'no-id-professional')
input_dict = {'1_2_1': '-999', '1_2_2': '2', '1_2_3': '3'} correct_map = problem.grade_answers(input_dict)
from salt.modules import rdp
return timedelta(microseconds=self.refund_window_microseconds)
model = BetterWriter fields = '__all__'
return [True]
srcpath = srcpath + '/'
result = [] non_capturing_groups = [] consume_next = True pattern_iter = next_char(iter(pattern)) num_args = 0
import integration from salt.config import cloud_providers_config
from salt.states import boto_route53
count_empty_content_vals = count_empty_vals(content[0]) indexnamerow = None if self.has_index_names and count_empty_content_vals == len(columns): indexnamerow = content[0] content = content[1:]
self.alias_refcount[alias] += 1
vertical = self.store.create_child( self.user_id, sequential.location, 'vertical', block_id='moon_unit' )
import salt.utils import salt.modules.nxos
return self.icon_for_field(field_id, FIELD_ICONS[field_id])
start = datetime(2010, 1, 1) end = datetime(2013, 1, 27)
def f(): result[2] = 0. self.assertRaises(com.SettingWithCopyError, f) exp_col = df[2].copy() exp_col[4:8] = 0. assert_series_equal(df[2], exp_col)
trainer = yaml_parse.load(topo_view_yaml % {'filename': filename}) trainer.main_loop()
return self.theta.shape[0]
PER_STUDENT_ANONYMIZED_DESCRIPTORS = set( class_ for (name, class_) in XModuleDescriptor.load_classes() if not issubclass(class_, PER_COURSE_ANONYMIZED_DESCRIPTORS) )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
p1 = p4d.ix[:, :2, :, :2] p2 = p4d.ix[:, :, :, 2:] p1['L5'] = 'baz'
if i + 1 == n_i: step_slice = slice(beg, None) else: step_slice = slice(beg, end)
return bool(self.get_configuration())
s = Series(np.arange(5))
grid_search = GridSearchCV(km, param_grid=dict(n_clusters=[2, 3, 4])) grid_search.fit(X) assert_equal(grid_search.best_params_["n_clusters"], 4)
def f(): self._data = self._data.consolidate() self._protect_consolidate(f)
self._subcluster_norms = row_norms( self.subcluster_centers_, squared=True)
self.assertEqual(certificate.get_text('.action-primary'), "Create") certificate.click_create_certificate_button() self.assertIn(course_title_override, certificate.course_title) return certificate
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if isinstance(e, SuspiciousOperation): logger = logging.getLogger('django.security.%s' % e.__class__.__name__) logger.warning(force_text(e)) return {}
country, __ = Country.objects.get_or_create(country='IR')
bmark.name = bmark_name return bmark
if not len(os.path.dirname(path)): path = create_tempfile(path)
available_version = salt.utils.alias_function(latest_version, 'available_version')
assert world.is_css_not_present(modal_css, wait_time=10)
_encoding = None _upload_handlers = []
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
temp_poll_answers = self.poll_answers temp_poll_answers[self.poll_answer] -= 1 self.poll_answers = temp_poll_answers
self.assertFalse(views.is_course_passed(self.course, None, self.student, self.request))
assert_equal(X_checked.format, accept_sparse[0])
with self.assertRaises(ValueError): Series(np.ones(10)).rolling(window=3, center=True, axis=1).mean()
cohort_name = 'I AM A RANDOM COHORT' data = {'name': cohort_name, 'assignment_type': CourseCohort.RANDOM} response_dict = self.put_handler(self.course, data=data)
return super(Greatest, self).as_sql(compiler, connection, function='MAX')
else: new_subcluster1, new_subcluster2 = _split_node( closest_subcluster.child_, threshold, branching_factor) self.update_split_subclusters( closest_subcluster, new_subcluster1, new_subcluster2)
remap_dict[fullname_with_subpath] = asset_key
try: self.clean() except ValidationError as e: errors = e.update_error_dict(errors)
from __future__ import unicode_literals
assert_raises( AssertionError, monitor.update_channels, 0 )
assert_false("the" in vocabulary)
if lcd.kind == 'u': return np.dtype('int%s' % (lcd.itemsize * 8 * 2)) return lcd
X = self._validate_X_predict(X)
return self.matching_events_were_emitted( start_time=start_time, event_filter=event_filter, number_of_matches=number_of_matches )
from salt.states import win_system
return (display_width or terminal_width, display_height or terminal_height)
FEATURES['ENABLE_TEAMS'] = True
self.wait_for_element_visibility( '#settings-language-value', 'Language selector element is available' ) return self.q(css='#settings-language-value')
my_application.clients:
elif isinstance(key, slice): pass
if not any( (salt.utils.compare_versions(ver1=x, oper='>=', ver2=candidate, cmp_func=version_cmp) for x in installed) ): ret[name] = candidate
self.assertEqual(search_results_page.header_name, 'Team Search') self.assertEqual( search_results_page.header_description, 'Showing results for "{search_query}"'.format(search_query=search_query) )
'js/vendor/requirejs/require.js', 'js/RequireJS-namespace-undefine.js', 'js/vendor/URI.min.js', 'common/js/vendor/backbone.js', 'edx-pattern-library/js/modernizr-custom.js',
cs_getx = CsOperation('GEOSCoordSeq_getX', get=True) cs_gety = CsOperation('GEOSCoordSeq_getY', get=True) cs_getz = CsOperation('GEOSCoordSeq_getZ', get=True)
from __future__ import absolute_import
ser.replace([np.nan], -1, inplace=True)
result = df.loc['2016-01-01'] expected = df.iloc[0:6] tm.assert_frame_equal(result, expected)
if not view_func.__module__.startswith('wiki.'): return
module.get_score = lambda: {'score': 1, 'total': 1}
ApiAccessConfig(enabled=False).save() response = self.client.get(self.url) self.assertEqual(response.status_code, 404)
if 'packages' not in excludes: data['packages'] = __salt__['pkg.list_pkgs']()
output = self.engine.render_to_string('filter-syntax15', {"var": None}) self.assertEqual(output, r'foo\bar')
if refresh: refresh_db()
result = eval("m{op}df".format(op=op_str)) assert_frame_equal(result, expected)
sql.to_sql(self.test_frame1, 'test_frame', self.conn)
remove = salt.utils.alias_function(destroy, 'remove')
a_start, a_end = np.byte_bounds(a) m_start = np.byte_bounds(m)[0] offset = a_start - m_start
self.assertEqual(self.func(None), [])
emp_cov = EmpiricalCovariance().fit(X)
self.assertEquals(preview.latex_preview('sqrt(3)'), r'\sqrt{3}')
self.assertFalse(check_for_language('tr-TR.UTF-8')) self.assertFalse(check_for_language('tr-TR.UTF8')) self.assertFalse(check_for_language('de-DE.utf-8'))
from salt.modules import groupadd
try: modulestore().get_course(course_key) except ItemNotFoundError: logging.error("Could not find course: %s", course_key) return HttpResponseBadRequest()
world.wait_for_ajax_complete()
rt = RandomTreesEmbedding(max_depth=3, n_estimators=n_estimator, random_state=0)
ret['result'] = __salt__['reg.set_value'](hive=hive, key=key, vname=vname, vdata=vdata, vtype=vtype, use_32bit_registry=use_32bit_registry)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'parallels', vm_['profile'], vm_=vm_) is False: return False
self.q(css=selector).first.click() return self
call_command(self.cmd, addrport="beef:7654") self.assertServerSettings('beef', '7654')
button_classes = self.q(css=MY_TEAMS_BUTTON_CSS).attrs('class') if len(button_classes) == 0: return False return 'is-active' in button_classes[0]
self.assertTrue(linode._validate_name('abc'))
element = self.q(css=selector).results[0] return element.size
images = np.zeros((3,) + face.shape) images[0] = face images[1] = face + 1 images[2] = face + 2 return images
actual = json.loads(response.content)['detail'] self.assertEqual(actual, expected_msg)
course_outline_page = CourseOutlinePage( self.browser, self.course_info['org'], self.course_info['number'], self.course_info['run'] ) course_outline_page.visit()
for line in output.splitlines(): job_tag = ''
self._prepare_pandas(data)
func.__doc__ = doc
if wua_download_list.Count == 0: log.debug('No updates to download') ret['Success'] = False ret['Message'] = 'No updates to download' return ret
resp = self.client.get(reverse_usage_url('xblock_handler', usage_key)) self.assertEqual(resp.status_code, 200)
if data_gen_f is None: data_gen_f = lambda r, c: "R%dC%d" % (r, c)
pass
if content is None: with open(path, 'rb') as f: content = f.read() mimetype = DEFAULT_ATTACHMENT_MIME_TYPE
if set(formatted_addresses) == set(current_addresses): _LOG.debug('%s already contains the provided addresses.', setting) return True
self.book = Workbook() if self.book.worksheets: self.book.remove_sheet(self.book.worksheets[0])
protocol = (pickle.DEFAULT_PROTOCOL if PY3_OR_LATER else pickle.HIGHEST_PROTOCOL) Pickler.__init__(self, self.stream, protocol=protocol) self._hash = hashlib.new(hash_name)
for perm in perm_list: if not self.has_perm(perm, obj): return False return True
with self.assertRaisesMessage(FieldError, 'Infinite loop caused by ordering.'):
if self.width_field: setattr(instance, self.width_field, width) if self.height_field: setattr(instance, self.height_field, height)
with self.assertRaisesRegexp(CommandError, "^No courses found for orgs:"): self._run_command("other_org")
y_weights = np.dot(Y.T, x_score) / np.dot(x_score.T, x_score)
from __future__ import absolute_import import logging from salt.ext.six import string_types
self.assertTrue(self.lc_block.has_dynamic_children())
from __future__ import absolute_import import os import pwd import glob import shutil
urlconf_module, app_name, namespace = view return RegexURLResolver(regex, urlconf_module, kwargs, app_name=app_name, namespace=namespace)
pass
mode_slug = models.CharField(max_length=100, verbose_name=_("Mode"))
if show_col_names: col_header = ['%s' % x for x in self._get_column_name_list()] else: col_header = [''] * columns.nlevels
if ((filename_match(filename, filepatterns) and not self.excluded(filename, root))): runner(os.path.join(root, filename))
if isinstance(address, int): self._check_int_address(address) self._ip = address return
credit_state = self.service.get_credit_state(self.user.id, self.course.id) self.assertNotIn('course_name', credit_state)
return Fragment(self.get_html())
COURSE_EMAIL_MESSAGE_BODY_TAG = '{{message_body}}'
'service_status',
with self.disable_implicit_wait(): self.wait_until( lambda driver: len(driver.find_elements_by_css_selector(options_selector)) == 0 )
view_html = None
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
self._assert_cannot_reverify()
from salt.states import mount import os
from __future__ import absolute_import
china = load_sample_image("china.jpg")
configuration = self.get_configuration() return val_name in configuration
CMS_BASE = 'localhost:8001'
task_type = 'proctored_exam_results_report' task_class = proctored_exam_results_csv task_input = {'features': features} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
course = self._create_course("verified") response = self._get_page(payment_flow, course.id) self._assert_contribution_amount(response, "")
self.key = key self.time = time return True
y_pred = self._fit_stage(i, X, y, y_pred, sample_weight, sample_mask, random_state, X_idx_sorted, X_csc, X_csr)
score = module.max_score() block_structure.set_transformer_block_field(module.location, cls, 'max_score', score)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
doc_topics, sstats_list = zip(*results) doc_topic_distr = np.vstack(doc_topics)
for _ in xrange(0, max_iters): last_d = doc_topic_d
with self.assertRaises(SomeOtherException): self.engine.render_to_string('filter-syntax24', {"var": SomeClass()})
resp = self.client.get(reverse('dashboard')) self.assertNotContains(resp, 'Robot_Super_Course') self.assertContains(resp, 'Robot_Course_Outside_Microsite')
elem = self.get_setting_element(label) select = Select(elem) select.select_by_value(value)
randomize_module = RandomizeModule( randomize_descriptor, self.system, scope_ids=ScopeIds(None, None, self.course.id, self.course.id) )
with storebuilder.build() as (__, store): course1 = CourseFactory.create(modulestore=store) course2 = CourseFactory.create(modulestore=store)
if node.attr == 'format': self.contains_format_call = True else: self.generic_visit(node)
url(r'^{}/problem_grade_distribution/(?P<section>\d+)$'.format(settings.COURSE_ID_PATTERN), 'class_dashboard.views.section_problem_grade_distrib', name="section_problem_grade_distrib"),
self.assertRaises(ValueError, lambda: frequencies.infer_freq( Series(['foo', 'bar'])))
for i, this_layer in list(enumerate(self.dbm.hidden_layers))[1::2]:
raise NotImplementedError('subclasses of Storage must provide an exists() method')
from salt.cloud import libcloudfuncs libcloudfuncs.check_libcloud_version()
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
self.assertDeserializeEqual(-2.78, '-2.78')
from __future__ import absolute_import import os import shutil import socket import subprocess import tempfile
if created: manual_cohorts = CourseUserGroup.objects.filter( course_id=course.id, group_type=CourseUserGroup.COHORT ).exclude(name__in=course.auto_cohort_groups) for cohort in manual_cohorts: CourseCohort.create(course_user_group=cohort)
self.assertEqual(iptables.build_rule(**{'if': '!eth0'}), '! -i eth0')
raise AbstractMethodError(self)
from __future__ import absolute_import
class_counts = np.bincount(y)[2:] assert_almost_equal(np.dot(cw, class_counts), y.shape[0]) assert_true(cw[0] < cw[1] < cw[2])
import xlrd
pass
self.theta0 = np.atleast_2d(self.theta0) lth = self.theta0.size
os.umask(current_umask)
from salt.log.setup import LOG_LEVELS from salt.log.mixins import NewStyleClassMixIn import salt.utils.network
'cache_toolbox.middleware.CacheBackedAuthenticationMiddleware', 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
"article_set-TOTAL_FORMS": "3", "article_set-INITIAL_FORMS": "0", "article_set-MAX_NUM_FORMS": "0",
@ddt.data(*flatten(CONTAINER_XMODULES))
self.client.get('/fr/simple/') self.assertNotIn(LANGUAGE_SESSION_KEY, self.client.session)
azimuth_degrees = numpy.arange(0, 341, 20)
EXAMPLE_FULL_NAME = u'John Doë'
return Response(get_thread(request, thread_id))
self.course.advanced_modules = ["notes"] self.assertFalse(self.has_notes_tab(self.course, self.user))
response.remove_headers = headers
monitoring_dataset = DenseDesignMatrix(X=X)
def boolean_check(v): return not (v is False or v is None or v == '')
REQUIRE_EXCLUDE = ("build.txt",)
#texinfo_show_urls = 'footnote'
ip_header = packet[eth_length:20+eth_length]
if len(matches) == 1: self.package_name = matches[0] return self.releases
content = '<garbage tag No closing brace to force <span>error</span>' payload = {'content': content, 'date': 'January 11, 2013'}
return etree.Element("javascriptinput")
continue
return self.get_text('.certificate-description')
if data and data not in self.COUNTRY_CODES: raise serializers.ValidationError( u"{code} is not a valid country code".format(code=data) ) return data
return self.storable
output = self.engine.render_to_string('i18n03', {'anton': b'\xc3\x85'}) self.assertEqual(output, 'Å')
raise ValueError(msg.format(func.__name__))
s = pd.Series(pd.Categorical([1, 2, 3, 4])) self.assertRaises(TypeError, lambda: np.sum(s))
test_deviance[i] = clf.loss_(y_test, y_pred)
default="images_course_image.jpg"
from distutils.version import LooseVersion from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, skip_if_binaries_missing ) ensure_in_syspath('../..')
self.data, data = None, self.data return data
__virtualname__ = 'network'
self._job_queue = queue.Queue(queue_size)
if isinstance(o, PeriodIndex):
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
self.real_apps = real_apps or []
return ipsec_site_connection
self.assertEqual(ser[index[1]], 1)
super(ThirdPartyAuthApiPermissionTest, self).setUp() client = self.configure_oauth_client() self.configure_api_permission(client, PROVIDER_ID_TESTSHIB)
salt '*' vsphere.vsan_add_disks my.esxi.host root bad-password
self.assertEqual(len(res_json['certificates']), 2)
gp.fit(X, y)
connection.in_atomic_block = False
decoded_messages = json.loads(encoded_messages, cls=MessageDecoder) self.assertEqual(messages, decoded_messages)
result = df.ix[1:2] expected = df.iloc[0:2] assert_frame_equal(result, expected)
def __init__(self, expression, **extra): output_field = extra.pop('output_field', DecimalField()) super(IntervalToSeconds, self).__init__(expression, output_field=output_field, **extra)
from __future__ import absolute_import, print_function
action_name = ugettext_noop('deleted') update_fcn = partial(delete_problem_module_state, xmodule_instance_args) visit_fcn = partial(perform_module_state_update, update_fcn, None) return run_main_task(entry_id, visit_fcn, action_name)
yield parse_boundary_stream(sub_stream, 1024)
with open(file_full_path, 'r') as input_file: file_contents = input_file.read() return file_contents.decode(encoding='utf-8')
h_rows, h_cols = self.h_space.shape num_h = float(h_rows * h_cols) rval[self.transformer._filters] = 1. /num_h rval[self.b] = 1. / num_h
self.assertRaises(KeyError, lambda: s.loc[['D']])
from __future__ import absolute_import, print_function from mock import call import re
self.assertEqual(test, expected)
if not is_request_in_microsite(): return return TEMPLATES_BACKEND.get_template(uri)
for saltenv in SALTENVS: saltenv_root = os.path.join(FS_ROOT, saltenv) _new_dir(saltenv_root)
del settings.SITE_ID create_default_site(self.app_config, verbosity=0) self.assertEqual(Site.objects.get().pk, 1)
user_preference = kwargs["instance"] emit_setting_changed_event( user_preference.user, sender._meta.db_table, user_preference.key, user_preference._old_value, user_preference.value ) user_preference._old_value = None
log.error('Minion process encountered exception: {0}'.format(exc)) os._exit(salt.defaults.exitcodes.EX_GENERIC)
self.update_enrollement("enroll", "newuser@hotmail.com") self.check_outbox("You have been")
raise Exception
FEATURES['ENABLE_S3_GRADE_DOWNLOADS'] = True FEATURES['ALLOW_COURSE_STAFF_GRADE_DOWNLOADS'] = True
from salt.exceptions import SaltInvocationError import salt.utils.boto import salt.utils.boto3
section_titles = [t.split('\n')[0] for t in section_titles]
pass
return None
import salt.utils from salt.exceptions import CommandExecutionError, SaltRenderError from salt.ext.six import string_types
site_configuration = SiteConfigurationFactory.create( site=self.site, )
if not settings.FEATURES['ADVANCED_SECURITY']: return False min_diff_pw = settings.ADVANCED_SECURITY_CONFIG.get( 'MIN_DIFFERENT_STUDENT_PASSWORDS_BEFORE_REUSE', 0 ) return min_diff_pw > 0
class TablespacesTests(TestCase):
password_hash='*EEF6F854748ACF841226BB1C2422BEC70AE7F1FF', new_password_hash=user2_pwd_hash, connection_user=self.user, connection_pass=self.password, connection_charset='utf8', saltenv={"LC_ALL": "en_US.utf8"}
block = self.get_a_block() self.assertEqual(block.inherited, "the default") self.assertEqual(block.not_inherited, "nothing")
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
for mode in all_modes[course_key]: if mode.min_price > 0 and not CourseMode.is_credit_mode(mode): return mode
Donation.add_to_order(cart, 10.0, None) cart.purchase(first='FirstNameTesting123', street1='StreetTesting123') self.orderid_courseless_donation = cart.id
__iadd__ = disable __isub__ = disable __imul__ = disable __itruediv__ = disable __ifloordiv__ = disable __ipow__ = disable
pickle.dumps(x, 0) pickle.dumps(x, 1) pickle.dumps(x, 2)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 2)
raise NotImplementedError('This method must be set by a subclass.')
from __future__ import unicode_literals
conditional_page = ConditionalPage(self.browser) conditional_page.fill_in_poll() self.courseware_page.visit() self.assertTrue(conditional_page.is_content_visible())
self.get_select_option(to_box, str(self.jason.id)).click() self.get_select_option(to_box, str(self.john.id)).click()
pass
return reverse_course_url('course_rerun_handler', course_key)
try: cert = GeneratedCertificate.eligible_certificates.get( user__username=username, course_id=course_key ) except GeneratedCertificate.DoesNotExist: return None return format_certificate_for_user(username, cert)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
from __future__ import absolute_import
opts = self.model._meta return opts.get_field(self.geom_field)
self.course.teams_configuration['topics'] = [] self.assert_serializer_output([], num_teams_per_topic=0, num_queries=0)
('defunct-cart', 'defunct-cart'),
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.notes_page.go_to_page(2) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
params_wrong_type_amt = params.copy() params_wrong_type_amt['ccAuthReply_amount'] = 'ab' with self.assertRaises(CCProcessorDataException): payment_accepted(params_wrong_type_amt)
after_jump = [] after_jump_arguments = (
watch = salt.utils.alias_function(wait, 'watch')
store = self._get_modulestore_for_courselike(location.course_key) return store.get_parent_location(location, **kwargs)
rng = np.random.RandomState(0) rand_data = RandomData(rng, scale=5) n_samples = rand_data.n_samples n_features = rand_data.n_features n_components = rand_data.n_components
p_shared = sharedX(zv[:, 0:rows:pool_rows, 0:cols:pool_cols, :]) h_shared = sharedX(zv) z_shared = sharedX(zv)
rng = np.random.RandomState(0) X = rng.rand(10, 2)
self._run_command()
pattern = klass(re) pattern.md = md pattern.ext = self md.inlinePatterns.add(name, pattern, "<reference")
self = layer
log.info('deleting redemption entry (%s) from the database.', code_redemption.id) code_redemption.delete()
try: from salt.netapi.rest_tornado import saltnado from salt.netapi.rest_tornado import saltnado_websockets HAS_TORNADO = True except ImportError: HAS_TORNADO = False import salt.auth
Created Private Key: "/etc/pki/my_little/certs//DBReplica_No.1.key." Created CSR for "DBReplica_No.1": "/etc/pki/my_little/certs/DBReplica_No.1.csr."
data = {} if email: data['email'] = email return self.client.post(path=reverse('password_change_request'), data=data)
warn_until( 'Carbon', 'It\'s time to start raising `SaltInvocationError` instead of ' 'returning warnings', _dont_call_warnings=True )
from __future__ import absolute_import import os import shutil import tempfile
clear_pw = True password = ''.join(random.SystemRandom().choice( string.ascii_uppercase + string.digits) for x in range(15))
from collections import namedtuple from copy import deepcopy import ddt import itertools from nose.plugins.attrib import attr from unittest import TestCase
from salttesting import skipIf from tests.unit import ModuleTestCase, hasDependency from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath from salt.modules import servicenow
exc_info_on_loglevel=logging.DEBUG
from __future__ import unicode_literals
if acl_name == '': _search_name = __current_perms[name].get('comment').get(_acl_type) else: _search_name = acl_name
if self.on is None and self.left_on is None and self.right_on is None:
return getattr(settings, "MICROSITE_CONFIGURATION", False)
import salt.utils.reactor
self.assertTrue( makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1) .year_has_extra_week(datetime(2011, 4, 2)))
cls.objects.filter(id__in=requirement_ids).update(active=False)
stamp = time.strftime('%a_%b_%d_%H-%M-%S_%Y')
try: indent = min(len(s) - len(s.lstrip()) for s in docstring if s.strip()) except ValueError: indent = 0
self.assertIn(multi_parent_html.location, orphan_vertical.children) self.assertIn(multi_parent_html.location, vertical1.children)
for dist in au_dists: if isinstance(dist, D) and not oracle: type_error = True else: type_error = False
_called_from_command_line = False can_import_settings = True
mb_k_means = MiniBatchKMeans(init="random", n_clusters=n_clusters, random_state=42, n_init=10).fit(X_csr) _check_fitted_model(mb_k_means)
return SlashSeparatedCourseKey(org, course, url_name)
if os_grain['kernel'] not in 'Darwin': self.skipTest( 'Test not applicable to \'{kernel}\' kernel'.format( **os_grain ) )
@setup({'url-fail01': '{% url %}'}) def test_url_fail01(self): with self.assertRaises(TemplateSyntaxError): self.engine.get_template('url-fail01')
axes = plotting._flatten(axes) axes = [ax for ax in axes if ax.get_visible()] return axes
assertIsInstance(left, Index, '[index] ') assertIsInstance(right, Index, '[index] ')
from salttesting.case import TestCase from salttesting.helpers import ensure_in_syspath, TestsLoggingHandler
self.distribution.salt_download_windows_dlls = True self.run_command('download-windows-dlls') self.distribution.salt_download_windows_dlls = None
salt.utils.compat.pack_dunder(__name__)
for mode_slug, min_price in modes_and_prices: self.create_mode(mode_slug, mode_slug.capitalize(), min_price=min_price)
return _map(f, arr, na_mask=True, na_value=na_result, dtype=dtype)
ret['comment'] = ret['comment'] + ' and will be started' ret['result'] = None return ret
if not sparse.issparse(X): iter_func = iter else: iter_func = _iterate_sparse_X
n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
context.update(configuration.get(user_certificate.mode, {}))
add_enrollment(user.username, unicode(course_key), mode)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath
inactive_children = [child for child in children if child not in active_children]
func_globals = func.__globals__ injected_func_globals = [] overridden_func_globals = {} for override in overrides: if override in func_globals: overridden_func_globals[override] = func_globals[override] else: injected_func_globals.append(override)
result = get_email_params(self.course, False)
student_module.save(force_update=True)
elif trigger_types[trigger_type] == TASK_TRIGGER_BOOT: trigger.Id = 'OnBoot_ID1'
if requested_sort == 'date_added': requested_sort = 'uploadDate' elif requested_sort == 'display_name': requested_sort = 'displayname' sort = [(requested_sort, sort_direction)]
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
fragment = Fragment(content) fragment.add_css('body {background-color:red;}') fragment.add_javascript('alert("Hi!");') return fragment
return sql
return u"{}?{}".format(reverse('finish_auth'), urllib.urlencode(params))
'openedx.core.djangoapps.credit',
CountryAccessRule.objects.get_or_create( restricted_course=restricted_course, country=country, rule_type='blacklist' )
try: FLAGS(flags) except gflags.FlagsError as e: print('%s\nUsage: %s ARGS\n%s' % (e, str(flags), FLAGS)) sys.exit(1)
times = pd.date_range("2013-10-26 23:00", "2013-10-27 01:00", tz="Europe/London", freq="H", ambiguous='infer')
el.find_element_by_css_selector('#upgrade-to-verified').click()
self.settings_detail.visit() self.assertTrue(self.settings_detail.is_browser_on_page())
email_enabled = models.BooleanField(default=False)
wide_sums = self.panel.to_panel().sum('major') assert_frame_equal(sums, wide_sums)
assert_false(world.css_has_class('.CodeMirror', 'is-inactive')) assert_true(world.is_css_not_present('.tiny-mce')) type_in_codemirror(0, text)
for iteration_idx in range(n_iter): minibatch_indices = random_state.randint( 0, n_samples, self.batch_size)
if isinstance(other, Field): return self.creation_counter == other.creation_counter return NotImplemented
if not isinstance(key, slice): return key
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
self._check_align(empty, empty, axis=ax, fill_axis=fax, how=kind, method=meth) self._check_align(empty, empty, axis=ax, fill_axis=fax, how=kind, method=meth, limit=1)
return 1
data = data.copy()
ttype = 'zeromq'
if path_cached: path_hash = hash_file(path) path_cached_hash = hash_file(path_cached)
try: default_group = grp.getgrgid(pwd.getpwnam(user).pw_gid).gr_name ugroups.remove(default_group) except KeyError: pass
return self._convert_django_user_to_xblock_user(self._django_user)
return "{base}/register?course_id={course_id}&enrollment_action={action}".format( base=BASE_URL, course_id=self._course_id, action="enroll", )
l = [1, 2, 3]
for sec_index, sec_title in enumerate(section_titles):
Restaurant.objects.bulk_create([ Restaurant() for i in range(0, 501) ])
add_message(request, constants.INFO, message, extra_tags=extra_tags, fail_silently=fail_silently)
>>> aapl = Options('aapl', 'yahoo')
from __future__ import absolute_import
pass
with self.assertRaises(KeyError): data.get('block', 'foo')
log.error('PhotoVerification: Error parsing this error message: %s', self.error_msg) return _("There was an error verifying your ID photos.")
course = modulestore().get_course(course_id, depth=4)
for status in statuses: if reverifications[status]: reverifications[status].sort(key=lambda x: x.date) return reverifications
if not all_packages: logger.warning("[up] '{0}' is not installed, " "cannot upgrade.".format(this_package)) pass
kernel_svm = svm.SVC(gamma=.2) linear_svm = svm.LinearSVC()
demand_hints = self.lcp.tree.xpath("//problem/demandhint/hint") demand_hint_possible = len(demand_hints) > 0
raise AccessListFallback
def _accept(self, request): request.csrf_processing_done = True return None
request.session = {} gradeset = grade(student, request, course, keep_raw_scores) yield student, gradeset, ""
visibility_editor = self.edit_component_visibility(component) self.verify_selected_labels(visibility_editor, expected_labels) visibility_editor.save()
Xs.append(np.array([[1, 0.0003817754041], [2, 0.0003817753750]], dtype=np.float32))
return
cat = Series(Categorical(list("abc")))
return self._is_element_visible(".edit-comment-body[data-id='{}']".format(comment_id))
is_valid, errors, updated_data = CourseMetadata.validate_and_update_from_json( course_module, request.json, user=request.user, )
def f(): r.F = 'bah'
mako_middleware_process_request(request)
mixed_appended = self.mixed_frame[:5].append(self.frame[5:]) mixed_appended2 = self.frame[:5].append(self.mixed_frame[5:])
score = MagicMock() score.possible = possible score.earned = earned return score
self.__messages.pop(0)
urlpatterns += (url(r'^%s$' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),)
ridge = Ridge(alpha=penalties[:-1]) assert_raises(ValueError, ridge.fit, X, y)
self.lc_block.max_count = 1 self.lc_block.capa_type = 'multiplechoiceresponse' self.lc_block.refresh_children() self.assertTrue(self.lc_block.validate())
self.connected = False msg = ('No master could be reached or all masters ' 'denied the minions connection attempt.') log.error(msg)
assert_almost_equal(s[:k], sap, decimal=3)
max_primes = [500, 1000, 2500, 5000]
self.assertEqual( list(iter_format_modules('de', 'i18n.other.locale')), [test_mod, default_mod])
from courseware.module_render import get_module_for_descriptor field_data_cache = FieldDataCache([descriptor], course.id, request.user) return get_module_for_descriptor( request.user, request, descriptor, field_data_cache, course.id, course=course )
self.selection = Selection(self, where=where, **kwargs) values = self.selection.select()
return '/api/badges/v1/assertions/user/{}/'.format(self.user.username)
warnings.warn("iget_value(i, j) is deprecated. Please use .iat[i, j]", FutureWarning, stacklevel=2) return self.iat[i, j]
return social_models.DjangoStorage.user.user_model().objects.get(username=username)
del team['date_created'] del team['discussion_topic_id']
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
RestrictedCourse.objects.create(course_key=self.course.id)
user_list[0].course_groups.add(*cohort_list) user_list[0].course_groups.clear() assert_events("removed", user_list[:1], cohort_list) mock_tracker.reset_mock()
return self.make_call(reverse('topics_list'), expected_status, 'get', data, **kwargs)
ptr = result if not ptr: s = None else: s = string_at(result)
X = arg1 + 0 * arg2 Y = arg2 + 0 * arg1
from __future__ import absolute_import
top_level_export_dir = 'exported_source_course_with_asides' export_course_to_xml( self.store, contentstore, dest_course_key, self.export_dir, top_level_export_dir, )
datasetCache = cache.datasetCache filename = datasetCache.cache_file(filename)
cherrypy._cpreqbody.process_urlencoded(entity) cherrypy.serving.request.unserialized_data = entity.params cherrypy.serving.request.raw_body = ''
httpretty.register_uri( httpretty.POST, "{}/baskets/".format(TEST_API_URL), body=json.dumps({'payment_data': expected_payment_data}), content_type="application/json", )
return self.kernel.bounds
self.assertEqual(expected_team['name'], team_card_name) self.assertEqual(expected_team['description'], team_card_description)
resp = self._get_footer(params={'language': language}) self.assertEqual(resp.status_code, 200) json_data = json.loads(resp.content)
return ScalarBlock(values)
import salt.ext.six as six
zero = sympy.Symbol('dotzero') identity = sympy.Symbol('dotidentity')
self.assert_valid_get_response(self.eligibility)
expiration_datetime_is_explicit = models.BooleanField(default=False)
STANDALONE = 'standalone' COURSE = 'course'
self.assertEqual(user_info["username"], self.user.username) self.assertEqual(user_info["email"], self.user.email)
E = np.empty(0) assert_raises(ValueError, _fast_dot, E, E)
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
for class_path in settings.AUTHENTICATION_BACKENDS: auth_class = module_member(class_path) if issubclass(auth_class, base_class): yield auth_class
import salt.ext.six as six
salt '*' vsphere.get_coredump_network_config my.esxi.host root bad-password
'dark_lang',
for df in [default_frame, self.mixed_frame, self.mixed_float, self.mixed_int]: cond = df > 0 _check_get(df, cond)
try: os.remove(trans_tar) except (OSError, IOError): pass
import logging
if len(rtnv) == 0: rtnv.append([])
if len(c1) == 2: tset = (5, 23) else: tset = (5, 23, 8) cs[i] = tset
_, setting = self._get_setting_entry(field_name) setting.find_element_by_class_name('setting-clear').click()
('defunct-paying', 'defunct-paying'),
__virtualname__ = 'quiet'
minor_labels = np.repeat(np.arange(len(frame.columns)), lengths)
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
return
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
new_patch = patch(function_name, new=mock) new_patch.start() self.addCleanup(new_patch.stop) return mock
if t in dtype_dict: return dtype_dict[t] return np.typeDict.get(t, t)
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
course_mode = CourseMode( course_id=course.id, mode_slug=CourseMode.DEFAULT_MODE_SLUG, mode_display_name=CourseMode.DEFAULT_MODE_SLUG, min_price=10, ) course_mode.save()
rows=None, cols=None,
with self.assertNumQueries(1): ContentType.objects.get_for_model(ContentType)
import logging from uuid import uuid4 try: import couchdb HAS_COUCH = True except ImportError: HAS_COUCH = False
OverrideFieldData.provider_classes = None
with self.assertRaises(TypeError): City.objects.annotate(kml=functions.AsKML('name'))
for key, value in kwargs.items(): if key in old: if value == 'max': value = old['{0}_max'.format(key)]
module.location = Mock(module.location) module.location.to_deprecated_string.return_value = 'i4x://edX/capa_test/problem/meh'
CourseFinanceAdminRole(self.course.id).remove_users(self.instructor)
self.mock_programs_api() self.mock_credentials_api(self.student, data={"results": []}, reset_url=False)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
clf = self.factory() clf.fit(X2, Y2)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
log = logging.getLogger(__name__)
self.groups = [] for group_num in range(1, num_groups + 1): self.groups.append(Group(group_num, 'Group ' + unicode(group_num)))
expected = bdate_range('20150101', periods=10) expected.freq = None
expected = expected.astype('M8[ns]').astype('int64') self.assertEqual(result.value, expected)
VerificationDeadline.objects.all().delete()
@python_2_unicode_compatible class Category(models.Model): name = models.CharField(max_length=20)
while self.dispatch_one_batch(iterator): self._iterating = True else: self._iterating = False
with self.assertRaises(ImproperlyConfigured): self.site.register(Location)
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
create_unknown_user = True
assert_page_correct( page=1, page_size=4, expected_start=0, expected_stop=4, expected_next=2, expected_prev=None )
return
if not isnull(self.fill_value): shifted = self.to_dense().shift(periods, freq=freq, axis=axis) return shifted.to_sparse(fill_value=self.fill_value, kind=self.kind)
result.index = frame.index result.index.name = frame.index.name
ret['comment'] = 'Event module not available. Schedule enable job failed.'
def __init__(self, convert_charrefs=False, **kwargs): _html_parser.HTMLParser.__init__(self, convert_charrefs=convert_charrefs, **kwargs)
result = Series([datetime(2, 1, 1)]) self.assertEqual(result[0], datetime(2, 1, 1, 0, 0))
result = s.resample('2D').asfreq() assert_series_equal(result, expected)
if pointval: choice_element.set("point_value", str(pointval))
qs, search_use_distinct = self.model_admin.get_search_results(request, qs, self.query)
task_folder = task_service.GetFolder(location)
request = self.request_factory.get('/', {'publication-decade': 'the 80s'}) changelist = self.get_changelist(request, Book, modeladmin)
self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p()
raise NotImplementedError("Not used")
if deep is None or deep is True: assert_series_equal(s, expected) assert_series_equal(s2, expected2) else: assert_series_equal(s, expected2) assert_series_equal(s2, expected2)
p = Place() r = Restaurant(place=p) self.assertTrue(r.place is p)
self.assertNotIn("enrollment_action", self.captured_request.POST) self.assertNotIn("course_id", self.captured_request.POST)
result = expr._can_use_numexpr(operator.add, '+', self.mixed, self.frame, 'evaluate') self.assertFalse(result)
self.create_squares(args, 'pyformat', multiple=True)
g = geo_input
self.create_thread_helper(mock_request, extra_response_data={'context': ThreadContext.STANDALONE})
output = self.engine.render_to_string('i18n01') self.assertEqual(output, 'xxxyyyxxx')
'-oStrictHostKeyChecking=no', '-oUserKnownHostsFile=/dev/null', '-oControlPath=none'
response2 = self.client.get('/template/cached/bar/') self.assertEqual(response2.status_code, 200)
with translation.override('de'): output = self.engine.render_to_string('i18n10', {'bool': True}) self.assertEqual(output, 'Ja')
('subject', Pipeline([ ('selector', ItemSelector(key='subject')), ('tfidf', TfidfVectorizer(min_df=50)), ])),
contains_aggregate = False
url = '%s:%s' % (protocol, url)
module = CapaFactory.create(force_save_button="true", rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertTrue(module.should_show_save_button())
res_col = df.ix[:, "cats"] tm.assert_series_equal(res_col, exp_col) self.assertTrue(com.is_categorical_dtype(res_col))
lib_page = LibraryEditPage(self.browser, LibraryLocator(org, number)) lib_page.wait_for_page()
if not inplace and first_expr: target = env.target.copy() else: target = env.target
set(self.old_model_keys).intersection(self.new_unmanaged_keys)
out_file.write('%d -> %d ;\n' % (parent, node_id))
for g in grouped.grouper.groupings[0]: pass
import salt.utils from unit.modules.zcbuildout_test import Base, KNOWN_VIRTUALENV_BINARY_NAMES from salt.modules import zcbuildout as modbuildout from salt.states import zcbuildout as buildout from salt.modules import cmdmod as cmd
return cls.current().enabled
return self.backend_name == pipeline['backend'] and self.idp_slug == pipeline['kwargs']['response']['idp_name']
response = super(Client, self).get(path, data=data, secure=secure, **extra) if follow: response = self._handle_redirects(response, **extra) return response
if __name__ == '__main__': from integration import run_tests run_tests(PillarModuleTestCase, needs_daemon=False)
with mock.patch.dict('django.conf.settings.FEATURES', {'ENABLE_MKTG_SITE': True}): result = get_email_params(self.course, True)
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.guitar_book, self.django_book, self.djangonaut_book])
from salt.states import ipmi
vars().update(ENV_TOKENS)
self.assertEqual(headers, {'Authorization': 'Token 12345'})
for manager in opts.managers: originating_model = manager._originating_model if (cls is originating_model or cls._meta.proxy or originating_model._meta.abstract):
verify_name(self.seq_usage_key, self.chapter_usage_key, "customized name", display_name="customized name")
self.assertEqual(len(email_info), 0)
self.scope = DeepChainMap(_DEFAULT_GLOBALS.copy()) self.target = target
self._assert_credit_status("pending")
loss[np.logical_or(n_positives == 0, n_positives == n_labels)] = 0.
p = Place.objects.get(name="Demon Dogs") self.assertIs(type(p), Place)
def geometry_columns(self): from django.contrib.gis.db.backends.oracle.models import OracleGeometryColumns return OracleGeometryColumns
wrapper_frag = Fragment(content=new_content) wrapper_frag.add_frag_resources(fragment) return wrapper_frag
import salt.utils.jid
dive = Book.objects.using('other').get(title='Dive into Python') self.assertEqual(dive._state.db, 'other')
self.store.publish(locations['child_sibling'], self.user_id)
if not prepared: value = self.get_prep_value(value) return connection.ops.adapt_datetimefield_value(value)
self.assertContains(response, "<h2>Built-in filters</h2>", count=2, html=True)
if course.discussion_link: return CourseTab.load( 'external_discussion', name=_('External Discussion'), link=course.discussion_link )
return self.q(css='.wrapper-create-course #new-course-org')
if urlconf_name: _urlconfs.value = urlconf_name else: if hasattr(_urlconfs, "value"): del _urlconfs.value
from __future__ import unicode_literals
for i in ['_right_indicator', '_left_indicator', '_merge']: df_badcolumn = DataFrame({'col1': [1, 2], i: [2, 2]})
with self.assertRaises(ImproperlyConfigured): AppConfig('label', Stub(__path__=['a', 'b']))
return [('127.0.0.1:11211 (1)', {})]
'captionDataDir': getattr(self, 'data_dir', None),
self.certificates_section.wait_for_certificate_invalidations_section()
self.module_refresh() return
return f.ix[i]
return True
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self._create_course_unit_with_handout('asset.html', save_settings=False) self.video.clear_handout() self.save_unit_settings() self.assertFalse(self.video.is_handout_button_visible)
return StackedBlocks(layers)
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
regex_match = language_code_prefix_re.match(path) if not regex_match: return None lang_code = regex_match.group(1) try: return get_supported_language_variant(lang_code, strict=strict) except LookupError: return None
return "%s(%s)" % (self.__class__, self)
VERIFY_STUDENT = AUTH_TOKENS.get("VERIFY_STUDENT", VERIFY_STUDENT)
return
microsite.clear() with patch('django.conf.settings.MICROSITE_CONFIGURATION', False): self.assertEqual( microsite.get_all_orgs(), set() )
response = render_to_response(path, context) response.mako_context = context response.mako_template = path return response
return self._upsample('asfreq')
theta0, thetaL, thetaU = self.theta0, self.thetaL, self.thetaU corr = self.corr verbose = self.verbose
pass
out = [] for res in self.__toklist: if isinstance(res,ParseResults): out.append( res.asList() ) else: out.append( res ) return out
TASK_LOG = logging.getLogger('edx.celery.task')
if _samefile(old_file_name, new_file_name): return
from __future__ import absolute_import
log.debug(' Response content: {0}'.format(response))
pass
preserve_names = not hasattr(target, 'name')
per_remote_only = {} for param in PER_REMOTE_ONLY: if param in per_remote_conf: per_remote_only[param] = per_remote_conf.pop(param)
import salt.utils from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS
tab.is_hidden = request.json['is_hidden'] modulestore().update_item(course_item, request.user.id)
correct = 0 for key in correct_map: correct += correct_map.get_npoints(key)
return form.save(commit=commit)
changed_module = StudentModule.objects.get(pk=self.module_to_reset.pk) self.assertEqual( json.loads(changed_module.state)['attempts'], 0 )
self.video.wait_for_state(state)
self.assertTrue(stat1.st_size < stat2.st_size)
self.assertEqual(test, expected)
state = self.sample_fn(bp1, state)
import integration import salt.utils
if isinstance(bricks, str): bricks = [bricks]
if method not in ['sum', 'prod']: return False try: import bottleneck as bn return bn.__version__ >= LooseVersion('1.0') except ImportError: return False
([
schema_attr = __salt__['postgres.schema_get'](dbname, name, **db_args)
temp_storage.save('tests/example.txt', ContentFile('some content'))
TOTAL_FORM_COUNT = 'TOTAL_FORMS' INITIAL_FORM_COUNT = 'INITIAL_FORMS' MIN_NUM_FORM_COUNT = 'MIN_NUM_FORMS' MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS' ORDERING_FIELD_NAME = 'ORDER' DELETION_FIELD_NAME = 'DELETE'
for ky in oy+N.arange(kshp[0]): for kx in ox+N.arange(kshp[1]):
course_mode_info = self._enrollment_with_complete_course(enrollment_mode) self.assertFalse(course_mode_info['show_upsell']) self.assertIsNone(course_mode_info['days_for_upsell'])
if take_split_path:
def f(): df.ix[4, 'c'] = [0, 1, 2, 3]
if signal.getsignal(signal.SIGINT) is signal.SIG_DFL: signal.signal(signal.SIGINT, self._handle_signals)
for i in xrange(k): dists[:, i] = numpy.square((X - mu[i, :])).sum(axis=1)
other_session = self.backend() other_session['foo'] = 'bar' other_session.set_expiry(-3600) other_session.save()
salt '*' win_wua.list_updates categories=['Security Updates'] severities=['Critical']
ItemFactory.create( parent_location=self.course.location, category="discussion", discussion_id="Topic_A", discussion_category="Chapter", discussion_target="Discussion", start=now )
import MySQLdb.converters return MySQLdb.escape(value, MySQLdb.converters.conversions)
with self.assertRaises(CommandError): call_command("makemigrations", empty=True)
x = Series(['A', 'A', np.nan, 'B', 3.14, np.inf]) labels, uniques = algos.factorize(x)
internal_use_only = False progress_class = ProgressBar
url = reverse("progress", kwargs={"course_id": unicode(self.course.id)}) return self.client.get(url)
DIRECT_ONLY_CATEGORIES = ['course', 'chapter', 'sequential', 'about', 'static_tab', 'course_info']
versions = get_course_versions(unicode(self.course.id)) new_draft_version = versions['draft-branch'] new_published_version = versions['published-branch']
idx = pd.PeriodIndex( ['2011-01-01 09:00', pd.NaT, '2011-01-01 11:00'], freq='H')
f = getattr(_algos, fname, None) if f is not None and is_numeric: return f
add_user_to_cohort(test_cohort, self.student.username) self.assert_student_in_group(None)
for alpha in (-0.5, 1.5): with self.assertRaises(ValueError): c(alpha=alpha)
if bool(actual_data) != bool(data): ret.update({item: {'old': actual_data, 'new': data}})
ridge_gcv.fit(filter_(X_diabetes), y_diabetes) alpha_ = ridge_gcv.alpha_ ret.append(alpha_)
super(DonationTest, self).setUp() self.user = UserFactory.create() self.cart = Order.get_cart_for_user(self.user)
key = self.q(css=KEY_CSS).nth(i).text[0] if key == expected_key: return i
if sorted(map1) != sorted(map2): #log.debug('diff_mtime_map: the maps are different') return True
ret['comment'] = 'Event module not available. Beacon add failed.'
if not change_password(username, password, uid): log.warning('unable to set user password') delete_user(username, uid) return False
input_dict = {'1_2_1': '0'} correct_map = problem.grade_answers(input_dict)
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM")
_ = lambda text: text
type = ''
return etree.Element("choiceresponse")
import salt.utils
exif_dict = piexif.load(exif) exif_dict['0th'][piexif.ImageIFD.Orientation] = orientation return piexif.dump(exif_dict)
score += _loglikelihood(doc_topic_prior, doc_topic_distr, dirichlet_doc_topic, self.n_topics)
kwargs['sort'] = True
def run_reqserver(self, **kwargs): secrets = kwargs.pop('secrets', None) if secrets is not None: SMaster.secrets = secrets
from __future__ import absolute_import
data = data.encode('utf-8')
assert_true(np.min(X.data) > 0) assert_true(np.max(X.data) < 1)
import salt.ext.six as six import salt.utils import salt.client from salt.utils.openstack import nova try: import novaclient.exceptions except ImportError as exc: pass
config_course_cohorts( course, is_cohorted=True, auto_cohorts=["AutoGroup"] )
CourseEnrollmentFactory.create( user=self.user, course_id=course_key, mode=mode )
with self.assert_produces_warning(PerformanceWarning): tm.assert_frame_equal(df.ix[key], df.iloc[2:])
result = ts - ts expected = Timedelta('0 days') _check(result, expected)
response = self._get_page(payment_flow, course.id) self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS, PayAndVerifyView.MAKE_PAYMENT_STEP ) self._assert_requirements_displayed(response, [])
self.track_selection_page.enroll('verified')
prior = DiagonalGaussianPrior() vae = DummyVAE() prior.set_vae(vae) prior.initialize_parameters(nhid=5) z = T.tensor3('z') prior.log_p_z(z)
if 'admin_source' not in kwargs: os.unlink(adminfile)
import tornado import tornado.tcpserver import tornado.gen import tornado.concurrent import tornado.tcpclient import tornado.netutil
return user_profile.requires_parental_consent()
self.xmodule_runtime = xmodule_runtime
with open(filename, "w") as metric_file: metric_file.write(str(metric))
import salt.utils import salt.utils.network import salt.utils.validate.net from salt.exceptions import ( CommandExecutionError, SaltInvocationError ) from salt.ext.six.moves import range
import logging
with remove_ccx(location) as (location, restore): return restore( self._modulestore.unpublish(location, user_id, **kwargs) )
user = User.objects.select_related('profile').get(username=username)
'lang_pref.middleware.LanguagePreferenceMiddleware',
assert_less(distances_ratio.max(), 1 + eps) assert_less(1 - eps, distances_ratio.min())
return { 'Content-type': 'application/json', 'Accept': 'application/json', 'X-CSRFToken': self.session_cookies.get('csrftoken', '') }
self.client.logout() ModuleStoreTestCase.tearDown(self)
self.user.is_active = user_is_active
poly = fromstr(self.geometries.polygons[1].wkt) ring1 = poly[0] ring2 = poly[1]
fstats_post = os.stat(path_test)
try: from pyVim.connect import GetSi, SmartConnect, Disconnect from pyVmomi import vim, vmodl HAS_PYVMOMI = True except ImportError: HAS_PYVMOMI = False
raw_image_url = self.course_image_url
register_hstore_handler(schema_editor.connection)
original_pk = request.user.pk request.user.pk = 1 super(CustomUserAdmin, self).log_change(request, object, message) request.user.pk = original_pk
certs_api.set_cert_generation_enabled(self.course.id, True) self._assert_enable_certs_button(False)
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): sparse_result = ols(y=y.to_sparse(), x=x.to_sparse()) _compare_ols_results(result, sparse_result)
auth_minion: myminion config_profile: my_openstack_profile
X, y = datasets.make_hastie_10_2(n_samples=12000, random_state=1)
with tm.assertRaises(UndefinedVariableError): df.query('sin > 5', engine=engine, parser=parser)
from __future__ import absolute_import
ret['changes']['summary'] = _summary(result['stdout']) ret['result'] = True if not __opts__['test'] else None
QUEUING = 'QUEUING' PROGRESS = 'PROGRESS'
if sample_weight.sum() <= 0: raise ValueError( "Attempting to fit with a non-positive " "weighted number of samples.")
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if self.ndim == 1: new_mgr_locs = [0] else: if new_mgr_locs is None: new_mgr_locs = self.mgr_locs
self.assertQuerysetEqual( self.jane.groups.all(), [] )
return self.q(css='.wrapper-release .title').first.text[0]
P = noise + X_dense P = theano.tensor.switch(P > 0, 1, 0) P = tensor.cast(P, theano.config.floatX)
S = func([[1]], metric='precomputed') assert_true(isinstance(S, np.ndarray))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
X_3d = X[:, :, np.newaxis] clf = MockClassifier(allow_nd=True) scores = cval.cross_val_score(clf, X_3d, y)
assert_raises_regexp(TypeError, 'estimator', check_consistent_length, [1, 2], RandomForestRegressor())
fcopy = self.frame.copy() fcopy['AA'] = 1
all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))
time_fit = collections.defaultdict(list) time_transform = collections.defaultdict(list)
fake_no_match_file_list = generate_fake_files(format='no_match_%Y%m%dT%H%M%S.tar.bz2', every=relativedelta(days=1))
with warnings.catch_warnings(): warnings.filterwarnings("ignore", message=".*(empty slice|0 for slice).*", category=RuntimeWarning)
self.samples = np.sin(np.linspace(0, 1, 200)) self.actual_skew = -0.1875895205961754
raise NotImplementedError( 'The SimpleListFilter.lookups() method must be overridden to ' 'return a list of tuples (value, verbose value)')
left = self.rng[:5] right = self.rng[10:]
import collections
if process_manager._process_map.keys(): process_manager.send_signal_to_processes(signal.SIGILL) process_manager.stop_restarting() process_manager.kill_children()
return self.features.uses_savepoints and not self.get_autocommit()
return []
result = list(lzip(*result)[0])
try: fh_ = salt.utils.atomicfile.atomic_open(path, 'w') for line in new_file: fh_.write(line) finally: fh_.close()
super(BinomialDeviance, self).__init__(1)
if not self.is_float: if not self.is_integer: return self data = data.astype(np.float64)
return self.q(css=self._bounded_selector('.check-discussion-category:checked')).is_present()
self.scope = scope self.token_store = auth.make_token_store(token_file_name) self.redirect_url = redirect
Group(name=settings.PAYMENT_REPORT_GENERATOR_GROUP).save() self.assertFalse(_can_download_report(self.user))
from __future__ import absolute_import import os import sys import shutil import tempfile import stat
sdb.__opts__ = {}
ret['result'] = None ret['comment'] = "No changes"
return (self.network_address.is_multicast and self.broadcast_address.is_multicast)
pass
@doctest In [2]: x.upper() Out[2]: 'HELLO WORLD'
if '.' in ip_str.split(':')[-1]: fill_to = 7 else: fill_to = 8
if "language_proficiencies" in update: old_language_proficiencies = legacy_profile_serializer.data["language_proficiencies"]
result = self.read_csv(StringIO(data), names=['a', 'b'], header=None, usecols=[0, 1])
clf = svm.LinearSVC(verbose=1) clf.fit(X, Y)
new_locator = course_key.make_usage_key(block_key.type, block_key.id) return self.get_item(new_locator, **kwargs)
pkg_info = _get_package_info(key, saltenv=saltenv) if not pkg_info: continue for pkg_ver in pkg_info.keys(): if pkg_info[pkg_ver]['full_name'] == pkg_name: val = pkg_ver
copy = (isinstance(new_values, np.ndarray) and new_values.base is None) result = self._constructor_sliced(new_values, index=self.columns, name=self.index[i], dtype=new_values.dtype)
us_rule.delete() self._assert_history([('AU', 'blacklist')])
msg_format = _("Progress: {action} {succeeded} of {attempted} so far")
tm._skip_if_windows()
self.assertEqual( self.selenium.find_element_by_css_selector('.field-supporting_bands p.help').text, 'Supporting Bands.' )
indexed_count = self.reindex_course(store) self.assertEqual(indexed_count, 7)
dtypes = ['i1', 'i2', 'i4', 'i8', 'u1', 'u2', 'u4', 'u8']
merge_message_flags += [ "-m", "Closes #%s from %s and squashes the following commits:" % (pr_num, pr_repo_desc)] for c in commits: merge_message_flags += ["-m", c]
module = inspect.getmodule(method) if module is not None: if not module.__name__.startswith('pylearn2'): return method_errors
return True
from __future__ import absolute_import import os import tempfile
if not pkginfo: log.error('Unable to locate package {0}'.format(pkg_name)) ret[pkg_name] = 'Unable to locate package {0}'.format(pkg_name) continue
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
assert result == any(subbatch_results), ("composite batch had a " "mixture of numeric and " "symbolic subbatches. This " "should never happen.") return result
if ':' not in ip_str: return False
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
return True
]
Author.objects.create(name='Charles Baudelaire') qs = Author.objects.all()
iris = load_iris() scaler = StandardScaler() km = KMeans(random_state=0)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
for parent in inspect.getmro(self.__class__): if 'class_lookups' not in parent.__dict__: continue if lookup_name in parent.class_lookups: return parent.class_lookups[lookup_name]
self.assertRaises(TypeError, store.append, 'df', np.arange(10))
a = '\xe0\xe1\xe2\xe3\xe4\xe5\xe7\xe8\xe9\xea\xeb' expected = 'aaaaaaceeee' assert_equal(strip_accents_ascii(a), expected)
df = self.df_mixed_floats.copy() df['value'] = lrange(len(df))
mock_get_cache.return_value = self.cache
return self
request = HttpRequest() request.session = self.client.session
cmd = [composer, action, '--no-interaction', '--no-ansi']
self._create_students(num_emails - 1)
grouping_tag = grouping_tags[test_conditions['input_type']] self.assert_no_xpath(xml, "//{0}[@class='choicetextgroup_incorrect']".format(grouping_tag), self.context)
sample_indices = _generate_sample_indices(random_state, n_samples) sample_counts = bincount(sample_indices, minlength=n_samples) unsampled_mask = sample_counts == 0 indices_range = np.arange(n_samples) unsampled_indices = indices_range[unsampled_mask] return unsampled_indices
assert_equal(var_x, cov_x_x)
version_line_index = 0 version_column_index = 1 line = lines[version_line_index].split()[version_column_index] return _format_return_data(0, stdout=line)
from nose import SkipTest package_check(exc_failed_import=SkipTest, exc_failed_check=SkipTest, *args, **kwargs)
if '/' == asset_key_string[0]: asset_key_string = asset_key_string[1:] asset_key = AssetKey.from_string(asset_key_string) try: delete_asset(course_key, asset_key) except AssetNotFoundException: pass
response['X-XRDS-Location'] = get_xrds_url('xrds', request) return response
ret['comment'] = 'Event module not available. Schedule save failed.'
user.profile.name = u'Jan ĄĘ'
context['show_partners'] = microsite.get_value('show_partners', True)
expected = g.resample('2s').sum()
self.root_path = root_path if not os.path.exists(root_path): os.makedirs(root_path)
return { 'initial': conditional_escape(value), 'initial_url': conditional_escape(value.url), }
if not item_index_dictionary and not item.has_children: return
self.assertRaises(IndexError, idx.__getitem__, empty_farr)
assert_equal(len(cv), wrapped_old_skf.get_n_splits())
from __future__ import absolute_import, print_function import logging
selector = self.get_element_selector(VIDEO_BUTTONS['quality']) return self.q(css=selector).visible
estimator.fit(X, y)
keyarr = key
class StrictAssignmentFieldSpecific(models.Model): title = models.CharField(max_length=30) _should_error = False
result = symmath_check(expected_str, expected_str, dynamath=[dynamath]) self.assertTrue('ok' in result and result['ok'])
return ['--local']
self.video.click_player_button('fullscreen')
data = salt.utils.alias_function(items, 'data')
fields = ["field1", "field2", "field3"] block_structure.request_xblock_fields(*fields)
input_msg = correctmap.get_msg('1_2_1') self.assertEqual(input_msg, "Test Message")
import salt.config import salt.payload import salt.state import salt.utils import salt.utils.jid import salt.utils.url from salt.exceptions import SaltInvocationError
if isinstance(value, bool): value = 'on' if value else 'off' elif ' ' in value: value = "'{0}'".format(value)
return microsite.get_template_path(relative_path, **kwargs)
from __future__ import absolute_import
still_in_grace = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="1", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertFalse(still_in_grace.answer_available())
offset1 = self._offset() offset2 = self._offset() self.assertFalse(offset1 != offset2)
middleware.process_request(request) request.session.flush()
clf = BernoulliNB(alpha=1.0) clf.fit(X, Y)
self.category = category self.display_name = display_name self.data = data self.metadata = metadata self.grader_type = grader_type self.publish = publish self.children = [] self.locator = None self.fields = kwargs
component.display_name = 'Changed Display Name'
index = world.get_setting_entry_index(DISPLAY_NAME) world.set_field_value(index, '3.4') verify_modified_display_name()
return self.q(css='body.view-export').present
self.assertContains(self.response, "<td>new_name</td>")
'messages': messages,
self.split_test_module.user_partition_id = 0
elif self.ndim == 3:
return tuple(len(self._get_axis(a)) for a in self._AXIS_ORDERS)
warnings.simplefilter('ignore', ConvergenceWarning)
patcher = patch('shoppingcart.models.analytics') self.mock_tracker = patcher.start() self.addCleanup(patcher.stop)
g = GaussianMixture(n_components=n_components, n_init=1, max_iter=2, reg_covar=0, random_state=random_state, warm_start=False) h = GaussianMixture(n_components=n_components, n_init=1, max_iter=1, reg_covar=0, random_state=random_state, warm_start=True)
from __future__ import absolute_import
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.' NUMBER_GROUPING = 3
self.assertEqual(hexewkb_2d, pnt_2d.hexewkb) self.assertEqual(hexewkb_3d, pnt_3d.hexewkb) self.assertEqual(True, GEOSGeometry(hexewkb_3d).hasz)
return '<math ' in self.expr
from salttesting.helpers import ensure_in_syspath
'ENABLE_DISCUSSION_HOME_PANEL': False,
self.sort() deleted_counter = Counter()
#unused_docs = []
dti = DatetimeIndex(start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq='D', name='index')
return textwrap.dedent("\n".join(lines)).split("\n")
import salt.utils.network from salt.modules.inspectlib.dbhandle import DBHandle from salt.modules.inspectlib.exceptions import (InspectorQueryException, SIException)
pass
module.save()
return ret
finish_time = time() self._ddog_histogram(evt_time, 'get_many.blks_out', block_count) self._ddog_histogram(evt_time, 'get_many.response_time', (finish_time - evt_time) * 1000)
if content_length > settings.FILE_UPLOAD_MAX_MEMORY_SIZE: self.activated = False else: self.activated = True
TIME_FORMAT = 'P'
super(TestVertSplitTestVert, self).setUp()
cmd = __salt__['cmd.run_all']('racadm {0} {1}'.format(command, modswitch))
self.assertEqual(book.authors.count(), 2)
__virtualname__ = 'django'
has_spatialrefsys_table = True
output = self.engine.render_to_string('filter-syntax16', {"var": None}) self.assertEqual(output, r'foo\now')
plt.subplot(2, 2, i + 1) Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
from __future__ import absolute_import
return self.assertCleanError(ipaddress.NetmaskValueError, details, *args)
__virtualname__ = 'service'
res = dfmix.copy() res.replace(r'\s*\.\s*', nan, regex=True, inplace=True) assert_frame_equal(dfmix, res.fillna('.'))
self.enrollment = CourseEnrollment.enroll(self.user, self.course_id, mode=CourseMode.VERIFIED)
self.q(css='.wrapper-create-course .new-course-save').first.click() self.wait_for_ajax()
str(self.empty)
Number.objects.filter(pk=self.n.pk).update( integer=F('integer') + 15, float=F('float') + 42.7 )
if terminal.stdout is not None: terminal.recv() if terminal.stderr is not None: terminal.recv_err() time.sleep(0.125)
return "simple_one_default - Expected result: %s, %s" % (one, two)
def upload_to(instance, filename): return folder + filename
self.assertRedirects(response, '/get_view/')
self.assertAlmostEqual(p.x, pnt.tuple[0], 9) self.assertAlmostEqual(p.y, pnt.tuple[1], 9)
return ACCESS_GRANTED if course.catalog_visibility == visibility_type else ACCESS_DENIED
with connection.schema_editor() as editor: operation.database_backwards("test_runsql", editor, new_state, project_state) self.assertTableNotExists("i_love_ponies")
from __future__ import absolute_import
connection.ensure_connection() self.assertEqual(connection.connection.encoding, "UTF-8") self.assertEqual(connection.connection.nencoding, "UTF-8")
clf = svm.NuSVC() clf.fit(X, Y)
log_msg = ( 'remove_credit_requirement_status was called with ' 'user_id={user_id}, course_key_or_id={course_key_or_id} ' 'req_namespace={req_namespace}, req_name={req_name}, '.format( user_id=user_id, course_key_or_id=course_key_or_id, req_namespace=req_namespace, req_name=req_name ) ) log.info(log_msg)
from __future__ import absolute_import
assert isinstance(model.hidden_layers[-1], dbm.Softmax)
self.assertTrue(filecmp.cmp(path_test, path_out))
if isinstance(mine_args, dict): self.args = [] self.kwargs = mine_args elif isinstance(mine_args, list): self.args = mine_args self.kwargs = {}
self.assertNotEqual(encoded, make_password(None), "Random password collision?")
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandNotFoundError
del_query._for_write = True
if ':' in key: namespace, key = key.split(':', 1) else: namespace, key = key, None
output = self.engine.render_to_string('filter-syntax18', {'var': UTF8Class()}) self.assertEqual(output, '\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111')
obj = slice(start, stop, step) f = lambda x: x[obj] return _na_map(f, arr)
return Series(self._resid_raw, index=self._x.index)
def assert_no_warnings(func, *args, **kw):
'lms.djangoapps.verify_student',
if draft_only: revision = MongoRevisionKey.draft else: revision = ModuleStoreEnum.RevisionOption.all
if instructor not in list_instructor_ccx: try: enroll_email( course_id=ccx_key, student_email=instructor.email, auto_enroll=True, email_students=send_email, email_params=email_params, )
self.mean_ = np.mean(X, axis=0) X -= self.mean_ if self.n_components is None: n_components = X.shape[1] else: n_components = self.n_components
fkeys = partial(_factorize_keys, sort=sort)
base = Timestamp('20140101 00:00:00')
indexer = memb.get_indexer(new_index, method=method, limit=limit) return self._wrap_result(_take_new_index( obj, indexer, new_index, axis=self.axis))
a = Series([True, False, True], list('bca')) b = Series([False, True, False, True], list('abcd'))
self.assertIn( ccx_course_key, [access.course_id for access in all_courses] )
pass
template_dir_name = "about" module_class = AboutModule
non_string_dtypes = dtype_set - _string_dtypes if non_string_dtypes != dtype_set: raise TypeError("string dtypes are not allowed, use 'object' instead")
ax = df.plot.barh(stacked=True, width=width) for r in ax.patches: self.assertEqual(r.get_height(), width)
__salt__['file.comment_line'](name, regex, char, False, backup)
with outer_atomic(read_committed=True):
def test_lle_init_parameters(): X = np.random.rand(5, 3)
return capi.geos_equals(self.ptr, other.ptr)
specimens = models.Manager()
assert max(pd.max(), hd.max()) < .17
data = self._prepare_categoricals(data)
return self.get_selected_option_text(self.LIBRARY_LABEL)
self.upgrade_page.proceed_to_payment()
- volumes: /usr/local/etc/ssl/certs/example.crt: bind: /etc/ssl/certs/com.example.internal.crt ro: True /var/run: bind: /var/run/host/ ro: False
rdp.__salt__ = {}
self.__restore_sysctl()
fields = field_dictionary if field_dictionary else self._get_default_search() return self.searcher.search(query_string=query_string, field_dictionary=fields, doc_type=self.DOCUMENT_TYPE)
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): model = ols(y=Y, x=X) model.summary
self.assertFalse(linode._validate_name('foo bar'))
self.assertEqual(last_thurs + offset_thur, next_thurs)
XBlockDisableConfig.objects.create( disabled_blocks='', enabled=True )
from __future__ import absolute_import
matching_coupons = Coupon.objects.filter(code=code, is_active=True) if matching_coupons: return save_registration_code( user, course_id, mode_slug, invoice=invoice, order=order, invoice_item=invoice_item )
self.assertEqual(response.status_code, 200)
self.notes = list()
distances = np.zeros(shape=(X.shape[0],), dtype=np.float64)
scores = cross_val_score(clf, X_sparse, multioutput_y) assert_array_equal(scores, clf.score(X_sparse, multioutput_y))
log = logging.getLogger(__name__)
return capi.geos_covers(self.ptr, other.ptr)
return 0
return self._get_xblocks()
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
except Exception as err: print("Error running process {}".format(err), file=sys.stderr)
xml_reports = []
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
try: import requests
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
return comdat['stderr']
import salt.utils.compat import salt.utils.odict as odict import salt.utils.boto
self.save(must_create=True)
apply_sdb(opts)
_check_fields( get_editable_fields(cc_content, context), data, "This field is not editable." )
def get_internal_type(self): return 'GMLField' def from_db_value(self, value, expression, connection, context): return value
self.q(css="a#add-allowance").click() self.wait_for_element_presence("div.modal div.modal-header", "Popup should be visible")
freq, data = _maybe_resample(data, ax, kwds)
dtype_map = {'INTEGER': np.dtype(float), 'FLOAT': np.dtype(float), 'TIMESTAMP': 'M8[ns]'}
USE_L10N = False
for value in settings.MICROSITE_CONFIGURATION.itervalues(): org_filter = value.get('course_org_filter', None) if org_filter == org: return value.get(val_name, default) return default
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.UNPUBLISHED_CHANGES, is_locked=False), self.LIVE_UNPUBLISHED_WARNING )
project = u('pandas') copyright = u('2008-2014, the pandas development team')
continue
start = DateTimeField(null=True) end = DateTimeField(null=True) advertised_start = TextField(null=True) announcement = DateTimeField(null=True)
instructor_courses = UserBasedRole(self.user, CourseInstructorRole.ROLE).courses_with_role() staff_courses = UserBasedRole(self.user, CourseStaffRole.ROLE).courses_with_role() all_courses = (instructor_courses | staff_courses)
STATICFILES_STORAGE = 'pipeline.storage.NonPackagingPipelineStorage'
PRIVATE_VISIBILITY = 'private'
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
compatibility_keys = ('device', 'name', 'fstype', 'opts', 'dump', 'pass')
if mp is not None: try: from multiprocessing.context import assert_spawning except ImportError: from multiprocessing.forking import assert_spawning else: assert_spawning = None
matcher = Matcher.return_value matcher.confirm_top.return_value = True
if packages is not None: args.append('--packages {pkgs}'.format(pkgs=packages)) if not _check_cygwin_installed(cyg_arch): _run_silent_cygwin(cyg_arch=cyg_arch)
tm.assert_equal(0, len(results))
self._test_view('about', 'text/html')
if root_name == COURSE_ROOT: if courselike_module.entrance_exam_enabled: remove_entrance_exam_milestone_reference(request, courselike_key) log.info( "entrance exam milestone content reference for course %s has been removed", courselike_module.id )
EmptyPromise( lambda: indicator == self.indicator_for_field(field_id), "Indicator \"{0}\" is visible.".format(self.indicator_for_field(field_id)) ).fulfill()
return self
self.assertEqual(response.status_code, 200) certificate_exception = json.loads(response.content)
tm.assert_frame_equal(parsed_114, expected, check_datetimelike_compat=True) tm.assert_frame_equal(parsed_115, expected, check_datetimelike_compat=True) tm.assert_frame_equal(parsed_117, expected, check_datetimelike_compat=True)
import salt.utils import salt.utils.jid import salt.returners
pass
return reverse_url(handler_name, 'usage_key_string', usage_key, kwargs)
name_label = _(u"Full name")
from salt.modules import bower from salt.exceptions import CommandExecutionError
self.login(email, password) self.enroll(self.course, verify=True)
return { 'input_type': self.html_input_type, 'choices': self.choices }
if value is None: if self.is_numeric: value = np.nan
resp = self.client.get(self.get_url(self.student.username)) self.assertEqual(resp.status_code, status.HTTP_401_UNAUTHORIZED)
start, end = end, start
if check: try: if (self.values[locs] == values).all(): return except: pass try: self.values[locs] = values except (ValueError):
from __future__ import unicode_literals
import errno import glob import logging import os import shutil import time import hashlib import bisect
if __opts__['test']: ret['result'] = None ret['changes'] = {'reg': {'Will remove': remove_change}} return ret
if redirect_url or path != request.get_full_path(): redirect_url += path return self.response_redirect_class(redirect_url)
result = f.clean('13.30') self.assertEqual(result, time(13, 30, 0))
return self.q(css=".proctored_exam_status .exam-timer").is_present()
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list_by_groups), 1)
import salt.ext.six as six import salt.utils
from salt.modules import drbd
valid_assocs = [a for a in associations if a.getExpiresIn() > 0] if valid_assocs: valid_assocs.sort(lambda a: a.getExpiresIn(), reverse=True) assoc = valid_assocs.sort[0]
frame = self.frame.copy() expected = self.frame.copy()
] _special_func_names = [f[0] for f in special_func_defs]
pass
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath ) ensure_in_syspath('../../')
client = self.login_client(api_client, user) new_value = "new value" self.send_put(client, new_value, expected_status=403 if user == "staff_user" else 404)
cls.rank1 = Ranking.objects.create(rank=2, author=cls.a2)
return False
self.alter_gis_model(migrations.RemoveField, 'Neighborhood', 'rast') self.assertColumnNotExists('gis_neighborhood', 'rast')
VALID_KEY_CHARS = string.ascii_lowercase + string.digits
common_prefix = None for path in paths: prefix, rest = self.split_leading_dir(path) if not prefix: return False elif common_prefix is None: common_prefix = prefix elif prefix != common_prefix: return False return True
self.assertTrue(version)
from yaml import Loader, SafeLoader
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
from __future__ import unicode_literals
#categories = None
super(LoggerBackend, self).__init__(**kwargs) self.event_logger = logging.getLogger(name)
import salt.utils import salt.utils.pagerduty from salt.ext.six import string_types
new_chapter = self.store.create_child(self.user_id, courses[0].location, 'chapter', 'new_chapter') asides = new_chapter.runtime.get_asides(new_chapter)
log = saltlog.SaltLoggingClass(__name__)
honeycomb = models.ForeignKey(Honeycomb, models.CASCADE)
if isinstance(block, XModuleDescriptor):
batch0 = slice(0, chunk_size) scaler_batch = MaxAbsScaler().fit(X[batch0]) scaler_incr = MaxAbsScaler().partial_fit(X[batch0])
self._session_key = self._get_session_key() self.modified = True
saltenv = env
def f(): c.codes = np.array([0, 1, 2, 0, 1], dtype='int8')
for n_samples, n_features in ((6, 5), ):
self.check_import(root_dir, content_store, course_id)
self.instructor = AdminFactory.create() self.client.login(username=self.instructor.username, password="test")
if isinstance(indexer, np.ndarray) and indexer.dtype.kind == 'i': indexer = indexer.astype(self._codes.dtype) return indexer
huge = 2 ** (n_bits - 1) - 1 clf = DecisionTreeClassifier(splitter='best', max_leaf_nodes=huge) assert_raises(MemoryError, clf.fit, X, y)
for name in SYMMETRIC_METRICS: metric = ALL_METRICS[name] assert_almost_equal(metric(y_true, y_pred), metric(y_pred, y_true), err_msg="%s is not symmetric" % name)
X = generator.multivariate_normal(mean, cov * np.identity(n_features), (n_samples,))
self._set_form_verification_deadline(form, None) form.save()
from markdown.util import etree
self.clients.setsockopt(zmq.IPV4ONLY, 0)
return False
return self.keys
max_row_range = 10000 num_files = 100
response = self._generate( course_key=self.EXISTED_COURSE_KEY_2, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 200)
available_version = salt.utils.alias_function(latest_version, 'available_version')
if l2_reg != 0.: HHt.flat[::n_components + 1] += l2_reg if l1_reg != 0.: XHt -= l1_reg
from __future__ import absolute_import import warnings
usage_key = self._map_revision_to_branch(usage_key, revision=revision) return super(DraftVersioningModuleStore, self).get_item(usage_key, depth=depth, **kwargs)
values = com._astype_nansafe(values.ravel(), dtype, copy=True) values = values.reshape(self.shape)
self.assertTrue(self.certificates_section.pending_tasks_section.visible)
self.assertEqual(str(user.username.encode('utf-8')), UsernameCipher().decrypt(str(pref.value)))
raw_video = cls.fetch_about_attribute(course_key, 'video') if raw_video: return cls.parse_video_tag(raw_video)
if not hasattr(self, '_level'): self._level = getattr(settings, 'MESSAGE_LEVEL', constants.INFO) return self._level
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug=CourseMode.HONOR) data = certs_api.get_certificate_footer_context()
GRAINS_CACHE = {} DETAILS = {}
self._reset() return self.partial_fit(X, y)
self.assertIs(model_a_old._meta.get_field('b').related_model, model_b_old) self.assertIs(model_b_old._meta.get_field('a_ptr').related_model, model_a_old)
didx = DatetimeIndex(start='2013/01/01', freq='D', periods=400) pidx = PeriodIndex(start='2013/01/01', freq='D', periods=400)
return copy.copy(self._wrapped)
if port_name.match(name): return True else: return False
start_flow_url = reverse('verify_student_start_flow', args=[unicode(self.course.id)]) self.assertRedirects(response, start_flow_url)
return self.q(css='{} input[name=reset-entrance-exam-attempts]'.format(self.EE_CONTAINER))
self.q(css='a.instructor-info-action').first.click() staff_debug_page = StaffDebugPage(self.browser) staff_debug_page.wait_for_page() return staff_debug_page
from __future__ import absolute_import
X_sparse_pruned = sparse.csr_matrix(X_dense)
self.session = self.backend()
self.store.unpublish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertFalse(self.store.has_published_version(item)) _check_asides(item)
super(AppConfigStub, self).__init__(label, None)
ccx = CcxFactory(course_id=self.course.id, coach=self.coach) override_field_for_ccx(ccx, self.course, 'max_student_enrollments_allowed', max_students_allowed) return ccx
return
try: return linalg.solve(a, b) except linalg.LinAlgError: return np.dot(linalg.pinv(a), b)
request.META = {'HTTP_HOST': 'example.com'} site = get_current_site(request) self.assertEqual(site, s1)
cost_value.name = 'objective'
try: self.assertIn(ret_str, instance) except AssertionError: self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) raise
raise NotImplementedError(("'put' is not yet implemented " "for Categorical"))
from __future__ import absolute_import
r = [] for attr, value in sorted(self.__dict__.items()): if attr.startswith("hyperparameter_"): r.append(value) return r
self.assertContains(response, "super-ugly")
self.definition = block_data.get('definition', None)
gkey = lambda x: x._consolidate_key grouper = itertools.groupby(sorted(blocks, key=gkey), gkey)
from salt.pillar import Pillar, git_pillar
course_overview = enrollment.course_overview if not course_overview: log.error( "User %s enrolled in broken or non-existent course %s", user.username, enrollment.course_id ) continue
response = self.client.get(self.url) self.assertEqual(response.status_code, 200)
c = self.factor.copy() c[0] = 'b' self.assertEqual(c[0], 'b') c[-1] = 'a' self.assertEqual(c[-1], 'a')
dtype, value = _infer_dtype_from_scalar(value) value = np.repeat(value, len(self.index)).astype(dtype) value = com._possibly_cast_to_datetime(value, dtype)
return topic_name_to_id(course, name)
class_process_view(self.rf.get('/'))
ret = None
for alias, conn in self.connections_override.items(): connections[alias] = conn
self.tsframe.index = old_index
attempt_3.mark_ready() assert_equals(attempt_3, SoftwareSecurePhotoVerification.active_for_user(user))
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
if freq is None: freq = ax_freq
merged_access[partition_id] = group_ids
self.assertFalse(self._has_changes(locations['grandparent'])) self.assertFalse(self._has_changes(locations['parent']))
return xblock.has_children
wrapper_width = 75 if is_transcript_visible else 100 initial = self.browser.get_window_size()
return submit_rescore_problem_for_student(self.create_task_request(instructor), InstructorTaskModuleTestCase.problem_location(problem_url_name), student)
raise NotImplementedError
def test_reader_converters(self):
return ( self.video_upload_pipeline is not None and 'course_video_upload_token' in self.video_upload_pipeline )
value = json.loads(value)
return {"course": unicode(normalized_structure_key), "org": normalized_structure_key.org}
nd_state, own_state = state ndarray.__setstate__(self, nd_state) fill_value, sp_index = own_state[:2] self.sp_index = sp_index self.fill_value = fill_value
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
return create_xblock_info( course_module, include_child_info=True, course_outline=True, include_children_predicate=lambda xblock: not xblock.category == 'vertical', user=request.user )
from __future__ import absolute_import import os import threading
if argname == 'mangle_dupe_cols' and not value: raise ValueError('Setting mangle_dupe_cols=False is ' 'not supported yet') else: options[argname] = value
test_data = state_run['cmd_|-test_changing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
if hasattr(targ, 'dtype') and targ.dtype == 'm8[ns]': targ, res = _coerce_tds(targ, res) tm.assert_almost_equal(targ, res, check_dtype=check_dtype) return
pass
cmd_kwargs = copy.deepcopy(cmd_kwargs) cmd_kwargs['use_vt'] = False
DATE_INPUT_FORMATS = [
self.q(css=BUTTON_SELECTORS[button_name]).nth(index).click() if require_notification: wait_for_notification(self) self.wait_for_ajax()
self.reset_password_page.visit()
self.unapply_operations("test_rmflmm", with_field_state, operations=operations) self.assertTableExists("test_rmflmm_pony_stables")
staff = UserFactory.create(username="staff", email="staff@e.com", password="test") role = CourseStaffRole(self.course_limited.id) role.add_users(staff)
from __future__ import absolute_import
self.blocks = []
return self.lines[0]
from salt.modules import mac_desktop from salt.exceptions import CommandExecutionError
if estimator_error <= 0: return sample_weight, 1., 0.
clf = self.factory(alpha=0.1, n_iter=1000, fit_intercept=False, class_weight={1: 0.001}) clf.fit(X, y)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
self.assertEqual(df.memory_usage().sum(), df.memory_usage(deep=True).sum())
import salt.utils
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
filtered = self.mixed_frame.filter(like='foo') self.assertIn('foo', filtered)
if item not in ['constraint']: cmd += [item_id] if isinstance(item_type, six.string_types): cmd += [item_type]
clf = AdaBoostClassifier(RandomForestClassifier()) clf.fit(X, y_regr)
if not user.is_active: response_payload = { 'unique_student_identifier': user.username, 'inactiveUser': True, } return JsonResponse(response_payload)
#html_additional_pages = {}
snapshot = super(CourseRegistrationCodeInvoiceItem, self).snapshot() snapshot['course_id'] = unicode(self.course_id) return snapshot
self.get_dummy_course(START)
from __future__ import absolute_import
X, y = iris.data, iris.target.astype(np.float64) n_samples, n_features = X.shape n_classes = len(np.unique(y))
self._check_parameters(X)
for line in fieldset: for field in line: count += 1
return self._df_raw - 1
pass
ret['changes'] = {'old': '', 'new': '{0}@{1}'.format(user, host)}
X, y = datasets.make_friedman2(n_samples=1200, random_state=random_state) X_train, y_train = X[:200], y[:200] X_test, y_test = X[200:], y[200:]
return self.q(css=".submission-error li").text
log.warn('Error in conditional module: \ required module {module} has no {module_attr}'.format(module=module, module_attr=attr_name)) return False
action_name = ugettext_noop('reset') update_fcn = partial(reset_attempts_module_state, xmodule_instance_args) visit_fcn = partial(perform_module_state_update, update_fcn, None) return run_main_task(entry_id, visit_fcn, action_name)
raise NotImplementedError('Not implemented for sparse dataset')
for y in clf.staged_predict(X_test): assert_equal(y.shape, y_pred.shape)
raise NotImplementedError
return euclidean_distances(X, self.cluster_centers_)
mock_request = Mock() mock_request.GET = mock_request.POST = {'task_id': task_id} response = instructor_task_status(mock_request) status = json.loads(response.content) return status
import logging
index = date_range('20130101', periods=3, tz='US/Eastern', name='foo') unpickled = self.round_trip_pickle(index) self.assert_index_equal(index, unpickled)
if check_pickle: pickle.dumps(function)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
DATE_INPUT_FORMATS = [
if float_format is None: float_format = self.float_format
for student in students[:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
import salt.utils
return (user, None)
from salt.modules import virtualenv_mod from salt.exceptions import CommandExecutionError
return ['--file', _git_config(cwd, user)]
#`clean_warning_registry()` is called internally by assert_warns class TestWarns(unittest.TestCase): def test_warn(self): def f(): warnings.warn("yo") return 3
self.assertFalse(linode._validate_name('_foo'))
return (security_group, remote_group_id, direction, protocol, port_range_min, port_range_max, ethertype)
with ensure_clean_store(self.path) as store:
youtube_id = videos.get('youtube', None) if youtube_id: transcripts_presence['is_youtube_mode'] = True
response = self._regenerate(username=self.STUDENT_USERNAME) self.assertEqual(response.status_code, 400)
from __future__ import unicode_literals
return OAuth2Client.objects.create(client_type=constants.CONFIDENTIAL)
models.CharField(name='cache_key', max_length=255, unique=True, primary_key=True), models.TextField(name='value'), models.DateTimeField(name='expires', db_index=True),
gnomedesktop.__grains__ = {} gnomedesktop.__salt__ = {} gnomedesktop.__context__ = {} gnomedesktop.__opts__ = {}
self.pdf.insert_page_break() self.draw_border() y_pos = self.draw_logos() return y_pos
labels = np.zeros_like(mean) labels[np.arange(labels.shape[0]), am] = 1.0
if __opts__['test']: ret['result'] = None ret['comment'] = 'Service {0} set to be disabled'.format(name) return ret
for line in f:
ticket_url = 'https://code.djangoproject.com/ticket/%s'
exclude_trees = ['_build', 'templates', 'includes']
X_train, y_train, sw_train = \ X[:n_samples], y[:n_samples], sample_weight[:n_samples] X_test, y_test = X[n_samples:], y[n_samples:]
pass
return self._reject(request, REASON_NO_CSRF_COOKIE)
super(CourseTeamMembership, self).delete(*args, **kwargs) self.team.reset_team_size()
del mpoly self.assertTrue(prep.covers(Point(5, 5)))
global custom_data_home custom_data_home = tempfile.mkdtemp() makedirs(join(custom_data_home, 'mldata')) globs['custom_data_home'] = custom_data_home return globs
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, patch)
_ret[minion] = _response['rows'][0]['value']
from salt.exceptions import CommandExecutionError import salt.utils
asides2 = published_xblock2.runtime.get_asides(published_xblock2) self.assertEquals(asides2[0].field11, 'aside1_default_value1') self.assertEquals(asides2[0].field12, 'aside1_default_value2')
return PROCESSOR_MODULE.get_purchase_endpoint()
digits = datasets.load_digits() X = np.asarray(digits.data, 'float32') X, Y = nudge_dataset(X, digits.target)
continue
self.org = org self.course_id = course_id self.run = run self.language = None
mi = mutual_info_classif(X, y, discrete_features=True) assert_array_equal(np.argsort(-mi), np.array([0, 2, 1]))
y = np.dot(X, w)
if (not partial and param.kind != _VAR_POSITIONAL and param.default is _empty): raise TypeError('{arg!r} parameter lacking default value'. \ format(arg=param_name))
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
for key, value in configs: self.setConfig(key, value)
saltenv = env
return modulestore().has_item(location, revision=ModuleStoreEnum.RevisionOption.published_only)
from __future__ import absolute_import
class MyModel2(models.Model): objects = MyManager()
return value.ljust(int(arg))
text = f.widget.format_value(result) self.assertEqual(text, "01:30:05 PM 21/12/2010")
mongo_course2_id = mongo_course1_id
from __future__ import absolute_import
for namespace, directories in namespace_dirs.items(): for directory in directories: add_lookup(namespace, directory)
TEST_DATABASE_PREFIX = 'test_'
response = self.client.post('/') self.assertContains(response, "Test template for CSRF failure", status_code=403)
urlconf = settings.ROOT_URLCONF if urlconf and urlconf in sys.modules: reload(sys.modules[urlconf]) reloaded = import_module(urlconf) reloaded_urls = reloaded.urlpatterns set_urlconf(tuple(reloaded_urls))
assert_raises(ValueError, precision_recall_fscore_support, y_true, y_pred, pos_label=2, average='macro')
out, err = DETAILS['server'].sendline(cmd)
overlimit_block_keys = set() while len(selected) > max_count: overlimit_block_keys.add(selected.pop())
self._future._future_with_timeout = None self.set_exception(tornado.ioloop.TimeoutError())
ext_auth_response = _external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response
for chunk in iter(lambda: ifile.read(chunk_size), b''): hash_obj.update(chunk) return hash_obj.hexdigest()
with self.assertRaises(ValueError): self.runtime.service(self.mock_block, 'user_tags').get_tag('fake_scope', self.key)
with self.assertRaises(TypeError): Polygon(0, [1, 2, 3]) with self.assertRaises(TypeError): Polygon('foo')
self.client.login(username=self.white_label_course_instructor.username, password='test')
ls = LineString(((150.902, -34.4245), (150.87, -34.5789)))
Simple.objects.create() with self.assertRaises(AttributeError): self.client.get(reverse('admin:admin_views_simple_changelist'))
pass
class BinConstructor(GEOSFuncFactory): "Generates a prototype for binary construction (HEX, WKB) GEOS routines." argtypes = [c_char_p, c_size_t] restype = GEOM_PTR errcheck = staticmethod(check_geom)
indexed_count = cls.index(modulestore, structure_key) if indexed_count: cls._track_index_request(cls.INDEX_EVENT['name'], cls.INDEX_EVENT['category'], indexed_count) return indexed_count
from salt.modules import iptables
if using is None: using = DEFAULT_DB_ALIAS return connections[using]
loader = MigrationLoader(None, ignore_no_migrations=True)
thresholds_option=thresholds_option
value = getattr(value, 'values', value).ravel()
if db != 'read_replica': DATABASES[db].update(get_db_overrides(db))
segment_properties = full_segment_event.get('properties', {})
for op_str in ops: op = getattr(get_ser, op_str, None) with tm.assertRaisesRegexp(TypeError, 'operate'): op(test_ser)
if pt is None: if value is None:
assert_raises_regex(ValueError, "n_init", KMeans(n_init=0).fit, X) assert_raises_regex(ValueError, "n_init", KMeans(n_init=-1).fit, X)
return urllib.unquote(urllib.unquote(response_str))
set_inventory_base_uri_default(__opts__, kwargs)
slug = hashlib.sha256(slug + unicode(badge_class.course_id)).hexdigest()
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
def identity_estimator(): pass identity_estimator.decision_function = lambda y_predict: y_predict identity_estimator.predict = lambda y_predict: y_predict
course.position = 2 course.save()
context_extras['sql_queries'] = lazy( lambda: list(itertools.chain(*[connections[x].queries for x in connections])), list )
content = service_instance.content.propertyCollector.RetrieveContents([filter_spec])
from __future__ import absolute_import import salt.wheel
self.video.wait_for_state('pause')
log = logging.getLogger(__name__)
from __future__ import unicode_literals
if ver < '0.8.2': from sqlalchemy import BigInteger from sqlalchemy.ext.compiler import compiles
call_command('import', self.content_dir, self.good_dir) store = modulestore() self.assertIsNotNone(store.get_course(self.base_course_key))
X1 *= np.sqrt(p)
self._check_sizes(space)
grader_payload = xqueue_body.get('grader_payload')
if self.schedule.loop_interval < self.loop_interval: self.loop_interval = self.schedule.loop_interval
>> a=makeCustomDataframe(5,3,r_idx_nlevels=2,r_ndupe_l=[2])
return sorted(modules_by_category[category], key=get_module_sort_key)
pass
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
import os import subprocess
b1 = Board.objects.create(name='') tag = Tag(label='VP', content_object=b1) tag.save()
X = check_array(X, accept_sparse='csr') return self
self.q(css='a.nav-item').filter(text='All Topics')[0].click()
self.options.log_level = self._default_logging_level_
from __future__ import absolute_import import os import platform
can_introspect_binary_field = True
problem_section = ItemFactory.create(parent_location=chapter.location, category='sequential', metadata={'graded': True, 'format': problem_section_format}, display_name=problem_section_name)
'log_level': str,
self.channel = salt.transport.Channel.factory(self.opts['master_uri'])
for attr, val in attr_dict.iteritems(): if attr in self.ATTRS_ALLOWED_TO_UPDATE: setattr(self, attr, val) else: self.fields[attr] = val
for n, f in l: df = tm.makeDataFrame() df[n] = f self.assertRaises( TypeError, store.append, 'df1_%s' % n, df)
return hasattr(self, '_has_shuffle')
if self.float_format is not None and self.formatter is None: if callable(self.float_format): self.formatter = self.float_format self.float_format = None
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
batch_inertia /= model.batch_size centers_squared_diff /= model.batch_size
diff = cat.memory_usage(deep=True) - sys.getsizeof(cat) self.assertTrue(abs(diff) < 100)
self.context['debug'] = self.capa_system.DEBUG
X = dataset.get_design_matrix() m = X.shape[0] assert X.shape[1] == self.nvis
self.assertEqual(response.status_code, 400)
pro = Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16))
assert key.user_id == self.user.id
X, y = make_classification(n_samples=500, n_features=25, n_clusters_per_class=1, n_informative=15, random_state=RANDOM_STATE)
self.assertEqual(len(changes), 0)
if slice_ is None: dtypes = [np.number] if include_bool: dtypes.append(bool) slice_ = IndexSlice[:, df.select_dtypes(include=dtypes).columns] return slice_
return self.eof_index
XBLOCK_FIELD_DATA_WRAPPERS = ()
self.assertEqual(list(bookmark.tags.all()), list(bookmark.tags.all().all()))
supports_1000_query_parameters = True
PUSH_REMOTE_NAME = os.environ.get("PUSH_REMOTE_NAME", "upstream")
values = np.asarray(values)
X = [[0., 1., +0.5], [0., 1., -0.1], [0., 1., +1.1]]
def get_default(self): return self.default
self._iterating = False
elif existing['code'] == 404:
alice = User.objects.using('other').get(username='alice')
from __future__ import absolute_import import re
saltenv = env
true_sum = pred_sum = tp_sum = np.zeros(len(labels))
self.xml.set('cfn', 'symmath_check')
config_course_cohorts(course, is_cohorted=True, discussion_topics=["General", "Feedback"])
if os.path.isdir(base_dir / url_name): self._load_extra_content(system, course_descriptor, category, base_dir / url_name, course_dir)
_NEUPD_WHICH = ['LM', 'SM', 'LR', 'SR', 'LI', 'SI']
raise
config = sconfig.minion_config(minion_config)
for field_name, field in cls.fields.items(): if field.scope == Scope.settings and xml_object.get(field_name) is not None: del xml_object.attrib[field_name]
self.wait_for( lambda: len(self.q(css='.team-card')) == expected_count, description="Expected number of teams is wrong" )
tm._skip_if_no_scipy()
assert_equal(_top_import_error, None)
cond = df > 0 check_dtypes = all([not issubclass(s.type, np.integer) for s in df.dtypes]) _check_align(df, cond, np.nan, check_dtypes=check_dtypes)
metadata['xml_attributes'][attr] = value
est = DeprecatedAttributeEstimator(a=1)
dt1 = Timestamp('20130101 09:00:00') dt2 = Timestamp('20130101 10:00:00')
for layer in ds: for feat in layer: self.assertEqual(source.nfld, len(list(feat))) self.assertEqual(source.gtype, feat.geom_type)
__dir__ = new_method_proxy(dir)
Xs = {'train': x[0:ntrain], 'test': data['data'][0:ntest]}
mb_data = MNIST(which_set='test').X[105:106, :]
return submit_rescore_problem_for_all_students(self.create_task_request(instructor), InstructorTaskModuleTestCase.problem_location(problem_url_name))
with self.assertRaises(ItemNotFoundError): self.publish((('html', 'html00'),))
from django.conf import settings from django.contrib.auth.models import User from django.db import models, migrations
def __and__(self, other): "Returns the intersection of this Geometry and the other." return self.intersection(other)
if definition_id is None: definition_id = LocalId()
cache_key = cls.MESSAGE_URL_CACHE_KEY.format( access_point=access_point, course_key=course_key ) url = cache.get(cache_key)
for c in Country.objects.num_geom(): self.assertEqual(2, c.num_geom)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) import os
if not record.exc_info_on_loglevel_instance and not exc_info_on_loglevel_formatted: return formatted_record
if engine != 'c': if com.is_integer(skiprows): skiprows = lrange(skiprows) skiprows = set() if skiprows is None else set(skiprows)
import yaml import logging
self.assertListEqual( self.get_item_from_modulestore(self.seq2_usage_key).children, [unit_1_key, unit_2_key] )
del dgamma1, dgamma2, sd
if prop != 'freq': compare(s, prop)
assert_true(np.all(np.less_equal(sorted_dists_exact, sorted_dists_approx)))
orig_view_name = None if hasattr(self, '_view_name'): orig_view_name = self._view_name self._view_name = None rt_repr = super(TestModuleSystem, self).__repr__() self._view_name = orig_view_name return rt_repr
X_orig = sparse_random_matrix(5, 5, density=0.75, random_state=0)
return False
self._check_ax_scales(axes, yaxis='log')
email_opt_in = request.POST.get('email_opt_in') if email_opt_in is not None: email_opt_in_boolean = email_opt_in == 'true' preferences_api.update_email_opt_in(request.user, org, email_opt_in_boolean)
response = self.client.get(self.url) self.assertRedirects(response, reverse('api_admin:api-request'))
return v
is_done = page.browser.execute_script("return $({!r}).data('initialized')".format(xblock_css)) return (is_done, is_done)
parameters = {'alpha': alphas} fit_params = {'sample_weight': sample_weight} gs = GridSearchCV(Ridge(), parameters, fit_params=fit_params, cv=cv) gs.fit(X, y)
if current.node in visited or not filter_func(current.node): stack.pop() continue
num_updated = self.a1.d_set.update(a_id=self.a2) self.assertEqual(num_updated, 20) self.assertEqual(self.a2.d_set.count(), 20)
self.inputs = {}
sequential = self.store.create_child( self.user_id, chapter.location, 'sequential', block_id='subsection_one' ) self.store.publish(sequential.location, self.user_id)
self.assertRedirects(response, '/get_view/', status_code=302)
url( r'^(?P<certificate_uuid>[0-9a-f]{32})$', views.render_cert_by_uuid, name='render_cert_by_uuid' ),
tol = 0.00001
def canonicalize(block): return (block.dtype.name, block.mgr_locs.as_array.tolist())
return self.n_iter
if os.name == 'nt': libc = CDLL('msvcrt') else: libc = CDLL(None) free = libc.free
for idxr, getitem in [(lambda x: x.ix, False), (lambda x: x.iloc, False), (lambda x: x, True)]:
import pandas import random
if privacy == self.PRIVACY_PUBLIC: self.assertEqual(profile_page.privacy, 'all_users') else: self.assertEqual(profile_page.privacy, 'private')
if isinstance(opts, string_types): opts = opts.split(',')
if value is None: return Response(status=status.HTTP_404_NOT_FOUND)
title = _("Powered by Open edX") return { "url": settings.FOOTER_OPENEDX_URL, "title": title, "image": settings.FOOTER_OPENEDX_LOGO_IMAGE, }
class FrameworkForm(Form): name = CharField() language = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')], widget=RadioSelect)
response = self.csrf_client.post( '/oauth2-test/', data={'access_token': self.access_token.token} ) self.assertEqual(response.status_code, status.HTTP_200_OK)
response = _query('linode', 'boot', args={'LinodeID': linode_id, 'ConfigID': config_id})['DATA'] boot_job_id = response['JobID']
exc_info_on_loglevel=logging.DEBUG
return True
if existing['code'] == 200:
import salt.utils
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
sitemap_url = reverse('django.contrib.sitemaps.views.index')
self.assertEqual(message.text, expected_message) self.assertEqual(message.type, expected_message_type)
for model, instances in self.data.items(): self.data[model] = sorted(instances, key=attrgetter("pk"))
self.cursor().execute('SET CONSTRAINTS ALL IMMEDIATE') self.cursor().execute('SET CONSTRAINTS ALL DEFERRED')
import matplotlib.pyplot as plt plt.figure()
grub_legacy.__salt__ = {}
from salt.states import debconfmod
from __future__ import unicode_literals
raise ValueError("No point was within bandwidth=%f of any seed." " Try a different seeding strategy \ or increase the bandwidth." % bandwidth)
'max_minions': int,
totals_data.append( ['', '{tax_label}: {tax_id}'.format(tax_label=self.tax_label, tax_id=self.tax_id)] )
process_option_funcs = [] for option_key in options.__dict__: process_option_func = getattr( self, 'process_{0}'.format(option_key), None ) if process_option_func is not None: process_option_funcs.append(process_option_func)
for sql in self.geometry_sql: self.execute(sql) self.geometry_sql = []
'debug_toolbar_mongo',
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, get_credit_requirement_status, )
x = Series(np.random.random(201), name='x') self.assertTrue(x.reshape(x.shape, ) is x)
task_entry = self._create_input_entry(course_id="bogus/course/id") with self.assertRaises(ItemNotFoundError): self._run_task_with_mock_celery(task_class, task_entry.id, task_entry.task_id)
def __init__(self, method, detail=None): if isinstance(detail, dict): self.detail = detail else: super(MethodNotAllowed, self).__init__(method, detail)
minibatch_size = 1000
class SearchableLocation(models.Model): keywords = models.CharField(max_length=256)
from salt.states import alias
X_new = assert_warns( DeprecationWarning, est.transform, X, threshold="mean") assert_less(0 < X_new.shape[1], X.shape[1])
expected_str = ' '.join([operand2, op, operand1]) self.assertTrue(expected_str in getattr(klass, 'r' + op_name).__doc__)
dselect_pkg_avail = _get_pkg_ds_avail()
order = [4, 1, 2, 0, 3] for df in [self.mixed_frame]:
signals.m2m_changed.send( sender=self.through, action='pre_add', instance=self.instance, reverse=self.reverse, model=self.model, pk_set=new_ids, using=db, )
self.lc_block.max_count = 50 self.lc_block.refresh_children() result = self.lc_block.validate()
is_increasing = assert_no_warnings(check_increasing, x, y) assert_false(is_increasing)
CouponRedemption.remove_code_redemption_from_item(item, user)
disable_animations(annotation_component_page)
from __future__ import absolute_import from __future__ import print_function import logging
from __future__ import absolute_import
if settings.FEATURES.get('EMBARGO'): urlpatterns += ( url(r'^embargo/', include('embargo.urls')), )
self.browser.refresh() self.wait_for_video_player_render()
from __future__ import absolute_import import logging
yield check_estimators_overwrite_params
indices = np.argsort(n_samples_per_label)[::-1] n_samples_per_label = n_samples_per_label[indices]
if not hasattr(a, 'dtype'): a = np.asarray(a) if not hasattr(b, 'dtype'): b = np.asarray(b)
if self.query.extra_order_by or self.query.order_by: return True elif self.query.default_ordering and self.query.get_meta().ordering: return True else: return False
from __future__ import absolute_import import datetime import hashlib import logging import re import os import socket
else: ret = _load_result(new_member, ret)
min_ts_us = np.datetime64(Timestamp.min).astype('M8[us]') max_ts_us = np.datetime64(Timestamp.max).astype('M8[us]')
stack = deque([_Node(start_node, get_children)])
self.check_anonymous_request_rejected('delete') self.assertFalse(mock_log.info.called)
result = expr._can_use_numexpr(operator.add, '+', self.frame2, self.frame2, 'evaluate') self.assertFalse(result)
dirty_flags = _porttree().dbapi.aux_get(cpv, ["IUSE"])[0].split() return list(set(dirty_flags))
selector = self.get_element_selector(CSS_CLASS_NAMES['video_spinner']) return self.q(css=selector).visible
assert_raises(ValueError, neighbors.NearestNeighbors, algorithm='blah')
self._add_entrance_exam() self._pass_entrance_exam() self.init_course_access() self.api_response()
try: verify_format_docstrings() except SkipTest as e: import traceback traceback.print_exc(e) raise AssertionError( "Some file raised SkipTest on import, and inadvertently" " canceled the documentation testing." )
ordered_key_fields = ['category', 'name', 'course', 'tag', 'org', 'revision']
from salttesting.unit import TestCase from salttesting.helpers import ensure_in_syspath
actual_explicitly_set_fields = block.get_explicitly_set_fields_by_scope(scope=scope) assertion = self.assertIn if should_be_set else self.assertNotIn for field in expected_explicitly_set_fields: assertion(field, actual_explicitly_set_fields)
log = logging.getLogger(__name__)
if matches is not None: subscription['endpoint'] = _endpoint.replace( matches.groupdict()['pass'], '****')
data.take(indexer, out=out)
s = Series(date_range('2000-01-01 09:00:00', periods=5, tz='US/Eastern'), name='foo') result = s - s.shift()
from salt.exceptions import CommandExecutionError import salt.utils
raise NotImplementedError("Specific Modulestores must implement get_definition_id")
created_enrollments.append(data.create_course_enrollment( self.user.username, unicode(course.id), 'honor', True ))
reg = svm.SVR(kernel='linear', C=0.1).fit(X, y)
df = orig.copy() df.iat[2, 0] = "b" tm.assert_frame_equal(df, exp_single_cats_value)
selector = self.prefix + ' .signatory-{}-view-{}'.format(self.mode, self.index) return ' '.join([selector, css])
if device_vg and len(bricks) > 1: raise SaltInvocationError('Block device backend volume does not ' + 'support multiple bricks')
from __future__ import absolute_import import uuid
try:
assert_raises(NotImplementedError, f, roll)
lhs_is_raster = lookup.lhs.field.geom_type == 'RASTER' rhs_is_raster = isinstance(rhs_val, GDALRaster)
setattr(cls, self.attname, SpatialProxy(Geometry, self))
yield check_pipeline_consistency
self.assertRedirects(resp, settings.LOGIN_REDIRECT_URL + '?next=/home/')
logger.debug('Websocket already connected, returning') return
if isinstance(opts, list): opts = ','.join(opts)
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
new_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, user_partition) self.assertIn(new_group.id, [3, 4])
from __future__ import absolute_import
return self.q(css='#my-bookmarks').present
source_course_key = CourseKeyField(max_length=255, db_index=True)
app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())
s = Series(list('abcdef'))
s = pd.Series(4, index=list('ABCD')) result = s[lambda x: 'A'] self.assertEqual(result, s.loc['A'])
assign_coach_role_to_ccx(ccx_locator, request.user, course.id)
self.login_user() reg_item = PaidCourseRegistration.add_to_order(self.cart, course_key, mode_slug=self.course_mode.mode_slug) return reg_item
self.assertNotIn(self.student_name, self.certificates_section.last_certificate_invalidation.text) self.assertNotIn(notes, self.certificates_section.last_certificate_invalidation.text)
from __future__ import absolute_import import datetime import logging import json import sys import email.mime.multipart
if not container_ref: container_ref = service_instance.content.rootFolder
ed, created = book.authors.get_or_create(name="Ed") self.assertFalse(created) self.assertEqual(book.authors.count(), 1)
course_key = CourseKey.from_string(course_id) course = modulestore().get_course(course_key)
self.assertEqual(res.dtype, np.dtype('object').type)
import salt.utils
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.get_course_milestones_fulfillment_paths( course_id, user_id )
'conf_file': str,
W = rng.uniform(-self.irange, self.irange, (input_dim, self.dim * 4))
return self._get_ax_layer(self.axes[0], primary=False)
return self.__dict__.get(attr)
tm._skip_if_no_scipy()
user = [user]
self.assertTrue(re.match(r"memory usage: [^+]+\+", res[-1]))
if (not hasattr(openid_request, 'return_to') or not openid_request.return_to): log.error('empty return_to') return False
item['location'] = item['_id'] del item['_id']
with patch('capa.responsetypes.LoncapaResponse.evaluate_answers') as mock_evaluate_answers: mock_evaluate_answers.return_value = CorrectMap(CapaFactory.answer_key(), 'incorrect') result = module.rescore_problem()
distance_to_candidates = euclidean_distances( X[candidate_ids], X, Y_norm_squared=x_squared_norms, squared=True)
return numpy.arccos(1. / val)
@override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True) def test_pointfield(self): class PointForm(forms.Form): p = forms.PointField()
return cls.populate(modulestore().get_course(course_key))
os.chmod(keyfile, stat.S_IRUSR | stat.S_IWUSR)
dr = bdate_range('1/1/2005', '1/1/2009', tz=pytz.utc) dr = bdate_range('1/1/2005', '1/1/2009', tz=tz)
if exists(zpool): ret[zpool] = 'storage pool already exists' return ret
try: os.makedirs(directory) except OSError as exc: if exc.errno == errno.EEXIST: pass else: raise
oob_best_iter = x[np.argmin(cumsum)]
grid_dimension = [0, ]
self._auto_auth(self.USERNAME, self.EMAIL, False)
ax = self.obj._get_axis(min(axis, self.ndim - 1)) return ax._convert_slice_indexer(key, kind=self.name)
result = df.loc[('2016-01-01', 'a'), :] expected = df.iloc[[0, 3]] tm.assert_frame_equal(result, expected)
return self.q(css='.new-course-button')
ret['comment'] = 'Event module not available. Beacons enable job failed.'
target_location = self.xblock.location.replace(revision='draft') _update_module_location(self.xblock, target_location)
#import salt.ext.six as six
'top_file': str,
with self.assertNumQueries(3): qs = TaggedItem.objects.prefetch_related('content_object') list(qs)
instance.set_grading_policy(policy)
self._from_sequence([float(a) for a in args])
df_float.ix[30:500,1:3] = np.nan
sim = np.array([[0, 5, 3, 4], [5, 0, 2, 2], [3, 2, 0, 1], [4, 2, 1, 0]])
log.debug("running salt-cloud with %s", arg_str) output = self.run_script('salt-cloud', arg_str, catch_stderr, timeout=timeout)
with self.assertNumQueries(0): with self.assertRaises(UndergroundBar.DoesNotExist): p.undergroundbar
labels = np.array([1, 1, 1, 2, 2]) assert_raises(ValueError, cval.LabelKFold, labels, n_folds=3)
def get(self, request, *args, **kwargs): self.object = self.get_object() context = self.get_context_data(object=self.object) return self.render_to_response(context)
received_objects = fetch_results.received_objects
_TYPE_MAP = {
np.testing.assert_allclose(f([[1]], [[0]]), [20, 20 / np.sqrt(2)])
self.verify_staff_debug_present(False)
TIMEINT = int(time.time())
win32api.SetFileAttributes(path, file_attributes)
for i, c in enumerate(SouthTexasCity.objects.perimeter(model_att='perim')): self.assertEqual(0, c.perim.m)
return ''
return response
self.assertEqual( res_json['message'], u"Student (username/email={user_name}) already in certificate exception list.".format(user_name=user) )
if y.dtype.kind == 'f' and np.any(y != y.astype(int)): return 'continuous' + suffix
self.assertTrue(_df[column].equals(df[column]))
dict_delitem(self, key) link_prev, link_next, key = self.__map.pop(key) link_prev[1] = link_next link_next[0] = link_prev
auth = _auth(url) if auth is False: ret['res'] = False ret['msg'] = 'missing username and password settings (grain/pillar)' return ret
self.client.logout() response = self.client.post(reverse('commerce:checkout_receipt')) self.assertEqual(response.status_code, 302)
if is_categorical_dtype(x): return op(x, y) elif is_categorical_dtype(y) and not isscalar(y): return op(y, x)
form = RestrictedCourseForm(data={'course_key': 'not/valid'}) self._assert_course_field_error(form)
for name, TreeEstimator in CLF_TREES.items(): est = TreeEstimator() assert_raises(NotFittedError, est.predict_proba, X)
from __future__ import unicode_literals
self.cmap = dict() self.items = self.cmap.items self.keys = self.cmap.keys self.overall_message = "" self.set(*args, **kwargs)
self.login() response = self.client.get(self.do_redirect_url) self.assertRedirects(response, '/accounts/profile/', fetch_redirect_response=False)
result = self.panel.reindex(items=['ItemA', 'ItemB']) assert_frame_equal(result['ItemB'], ref)
if _callable is not None: with manager: _callable(*args, **kwargs) else: return manager
idx = mapping if isinstance(flat, (tuple, list)): assert 0 <= idx < len(flat) return flat[idx] else: assert idx == 0 return flat
self.assertRaises(parser.CParserError, TextReader, StringIO(data), delimiter=',', header=5, as_recarray=True)
expected = ts[1:3]
self.assertEqual(module.attempts, 1)
script = "raise Exception('test')" problem = self.build_problem(answer=script)
window_height = window_width * ((num_rows * 1.8) / num_columns) figure, all_axes = pyplot.subplots(num_rows, num_columns, squeeze=False, figsize=(window_width, window_height))
any_ = saltnado.Any(futures) self.assertIs(any_.done(), False)
return self.__missing__(key)
self.assertFalse(hasattr(p2, 'messybachelorparty_set'))
with patch('xmodule.capa_module.CapaModule.closed') as mock_closed: mock_closed.return_value = True
iris = load_iris()
for index in [i for i, x in enumerate(found) if x]:
assert isinstance(sls_data, dict) assert isinstance(yml_data, dict) assert sls_data == yml_data
default_tolerance = '0.001%'
'enable_zip_modules': bool,
patch_extractor = sp_extract_patches(IR, IC, KR, KC, CH, RasterOrders.channel_row_col, RasterOrders.channel_row_col, subsample, border_mode, flip_patches=True).tocsc()
self.assertEqual(self.func(None), [base.W019])
obj, filename = self._write_array(obj, filename) self._filenames.append(filename) self._npy_counter += 1
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
from salt.modules import xapi
test_combined_expression = unittest.expectedFailure(test_combined_expression)
return False
merged_group_ids = _MergedGroupAccess._intersection(xblock_partition_access, merged_parent_group_ids)
raise NotImplementedError(str(self.__class__) + " does not implement " "log_p_z.")
from urllib2 import Request, build_opener
self.assertIn('DocTestCase', [t.__class__.__name__ for t in suite._tests[2:]])
p_up = dict(self.sgd_updates(self.params, gradients, learn_rates))
store = self._verify_modulestore_support(course_key, 'import_xblock') return store.import_xblock(user_id, course_key, block_type, block_id, fields, runtime, **kwargs)
ts_b36 = int_to_base36(timestamp)
wua_searcher = wua_session.CreateUpdateSearcher()
config = _load_config()
if not is_reverse_o2o(source): must_include[old_model].add(source) add_to_dict(must_include, cur_model, opts.pk)
with self.assertRaises(Article.DoesNotExist): Article.objects.latest()
tab_ids[0], tab_ids[1] = tab_ids[1], tab_ids[0]
PARTNER_SUPPORT_EMAIL = 'partner-support@example.com'
rho_0 = math.tanh(F - 1.96 * F_se) rho_1 = math.tanh(F + 1.96 * F_se)
remote_rev = all_remote_refs['refs/tags/' + rev + '^{}'] remote_rev_type = 'tag'
expected = pd.Series(['a'], index=['A']) result = expected.iloc[[-1]] assert_series_equal(result, expected)
'clean_dynamic_modules': bool,
retcode = __salt__['cmd.retcode']('pw groupmod {0} -m {1}'.format( name, username), python_shell=False)
data = np.copy(X.data[start: end]) nz = n_samples - data.size median[f_ind] = _get_median(data, nz)
default_store = os.environ.get('DEFAULT_STORE', 'draft') return CourseLocator(org, number, run, deprecated=(default_store == 'draft'))
p = Place.objects.get(name="Demon Dogs") r = Restaurant(place=p) self.assertIs(r.place, p)
import salt.utils.http
if self.display_organization: return self.display_organization return self.location.org
pass
X_trans = maxabs_scale(X) assert_array_almost_equal(X_trans, X_expected)
from salt.ext.six.moves import map, range, zip from salt.ext.six.moves.urllib.parse import urlencode, urlparse
query.get_compiler(using=db).as_sql()
ret['changes']['removed'] = removed_ids
selected_numtolerance_inputs = [ key for key in a_dict if key.partition("_numtolerance_input_")[0] + "bc" in selected_choices ]
import salt.utils
msg = EmailMessage(subject, None, from_address, [to_address]) msg.attach(notification_msg) msg.send()
ALL_ASSETS_XML_TAG = 'assets'
clf = self.factory().fit(X2, Y2, intercept_init=np.zeros((3,)))
sample_weight /= sample_weight_sum
values = values[slicer]
from __future__ import absolute_import
return values.reshape(1, len(values))
dr = date_range(datetime(2011, 3, 13, 1, 30), periods=3, freq=datetools.Hour()) self.assertRaises(pytz.NonExistentTimeError, dr.tz_localize, tz)
course_with_disabled_forums = CourseFactory.create() CourseEnrollmentFactory.create(user=user, course_id=course_with_disabled_forums.id) _remove_discussion_tab(course_with_disabled_forums, user.id) return course_with_disabled_forums
from urllib2 import urlopen PY2 = True
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
parent = self.get_a_block(usage_id="parent") parent.not_inherited = "Changed!" self.assertEqual(parent.not_inherited, "Changed!")
if not hasattr(self, 'inference_procedure') or \ self.inference_procedure is None: self.inference_procedure = WeightDoubling() self.inference_procedure.set_dbm(self)
test_locs([]) test_locs([0]) test_locs([1])
result = df.iloc[0:8, :].append(df.iloc[8:]) assert_frame_equal(result, df)
return self.enabled and self.xseries_ad_enabled
self._test_missing_current_task(generate_certificates)
from __future__ import absolute_import import logging import os
layer_to_chains[self.dbm.visible_layer] = inputs
warnings.warn("LongPanel is deprecated. Please use DataFrame", FutureWarning, stacklevel=2)
X_scaled_back = scaler.inverse_transform(X_scaled) assert_array_almost_equal(X_scaled_back, X)
data_test, targets_test = data[n_samples / 2:], digits.target[n_samples / 2:] #data_test = scaler.transform(data_test)
import salt.fileserver as fs import salt.modules import salt.utils import salt.utils.s3 as s3
self.assertEqual(max_scores_cache.num_cached_from_remote(), 1)
if root: self.result[root] = self.focus = {} else: self.focus = self.result
grp = Group(name=settings.PAYMENT_REPORT_GENERATOR_GROUP) grp.save() self.user.groups.add(grp) self.assertTrue(_can_download_report(self.user))
new_conf.append(new_line)
if name in all_virt and name not in pkgs: candidate = '1' else: candidate = ''
for user_partition in self.user_partitions: if user_partition.id == self.user_partition_id: return user_partition return None
milestones = milestones_api.get_milestones("{usage_key}{qualifier}".format( usage_key=prereq_content_key, qualifier=GATING_NAMESPACE_QUALIFIER )) for milestone in milestones: milestones_api.remove_milestone(milestone.get('id'))
qs = Parcel.objects.filter(center1=F('city__location__point')) self.assertEqual(1, len(qs)) self.assertEqual('P1', qs[0].name)
if self.is_transposed: obj = obj.transpose(*self.data_orientation) return obj
return self.make_call(reverse('team_membership_list'), expected_status, 'get', data, **kwargs)
from salt.ext.six.moves import builtins as __builtin__ __builtin__.__salt__ = {}
return unicode(data)
url = reverse('verify_student_verify_now', kwargs={'course_id': unicode(course_id)}) self.assertRedirects(response, url, status_code)
if (not hasattr(openid_request, 'trust_root') or not openid_request.trust_root): log.error('no trust_root') return False
result = func(p1, p2) self.assert_numpy_array_equal(result.values, func(p1.values, p2.values))
res_val = df.iat[2, 0] self.assertEqual(res_val, exp_val)
K.flat[::n_samples + 1] += alpha[0]
parse_dates=False, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False,
self.publish_unit_and_verify_groups_in_lms( courseware_page, [u'Group A', u'Group B', u'Group ID 2 (inactive)'], publish=False )
return self.get_selector('div.certificate-generation-status')
global SITE_CACHE SITE_CACHE = {}
node = Element(self.category) super(XmlDescriptor, self).add_xml_to_node(node) return etree.tostring(node)
_DFLT_IPC_MODE = 'tcp' _MASTER_TRIES = -1
if not self._write: raise GDALException('Raster needs to be opened in write mode to change values.') capi.flush_ds(self._ptr)
self.navigate_to_video()
response = self.client.get(self._get_url(self.course_key, "invalid_checkpoint")) self.assertEqual(response.status_code, 404)
FORCE_SCRIPT_NAME = None
value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs] fields = [None]
honor_mode = CourseMode.mode_for_course(course_key, CourseMode.HONOR) audit_mode = CourseMode.mode_for_course(course_key, CourseMode.AUDIT)
@property def foreign_related_fields(self): return tuple(lhs_field for lhs_field, rhs_field in self.field.related_fields) def get_attname(self): return self.name
if not feat: raise GDALException('Cannot create OGR Feature, invalid pointer given.') self.ptr = feat self._layer = layer
return None
'verified_track_content',
with open(os.path.abspath(path), 'w') as cur_file: cur_file.write(text)
self.assertFalse(self.creator_admin.has_delete_permission(self.request))
scores = cross_val_score(clf, X, y2) assert_array_equal(scores, clf.score(X, y2))
import matplotlib if str(matplotlib.__version__) >= LooseVersion('1.4'): raise nose.SkipTest("Matplotlib Regression in 1.4 and current dev.")
from __future__ import absolute_import from __future__ import unicode_literals import sys import time from salttesting import TestCase, skipIf from salttesting.helpers import destructiveTest from salt.modules import reg as win_mod_reg try:
if get_vm_status(vmid=vmobj['vmid'])['status'] != 'stopped': stop(name, vmobj['vmid'], 'action')
return BrandingApiConfig.current().enabled
permutation = np.asarray(permutation, dtype=np.intp) return _update_cdnmf_fast(W, HHt, XHt, permutation)
('RIGHTPADDING', (5, 0), (5, -1), 7 * mm),
return get_id_token(user, CLIENT_NAME)
try: import jsonschema import jsonschema.exceptions HAS_JSONSCHEMA = True except ImportError: HAS_JSONSCHEMA = False
agged = grouped.aggregate([np.mean, np.std]) agged = grouped.aggregate({'one': np.mean, 'two': np.std})
([TestTransformer1(), TestTransformer2()], []),
self.assertFalse(self.video.is_autoplay_enabled)
load = unpack loads = unpackb
objects = list((self.reverse() if self.ordered else self.order_by('-pk'))[:1]) if objects: return objects[0] return None
iface['up'] = (val != 'Media disconnected')
is_proxy = False try: if 'salt-proxy' in main.__file__: is_proxy = True except AttributeError: pass return is_proxy
edxval_api.import_from_xml( video_asset_elem, field_data['edx_video_id'], course_id=course_id )
from __future__ import division import warnings import numpy as np from scipy import linalg
import logging import random from salt.state import _gen_tag from salt.exceptions import SaltInvocationError
warnings.filterwarnings( 'ignore', 'With-statements now directly support multiple context managers', DeprecationWarning )
exp_buf = fromstr(bg.buffer_wkt) quadsegs = bg.quadsegs width = bg.width
predictions = cross_val_predict(clf, X_sparse, multioutput_y) assert_array_equal(predictions.shape, (150, 2))
if not isinstance(data, SingleBlockManager): data = SingleBlockManager(data, index, fastpath=True) if copy: data = data.copy() if index is None: index = data.index
completion_check(user)
result = idx.delete(len(idx))
review3 = Review(source="Python Daily") self.assertEqual(review3._state.db, None)
for norb in (SmallNORB('train', stop=1000), NORB(which_norb='small', which_set='train')): test_impl(norb)
root = _gluster_xml('volume status {0}'.format(name)) if not _gluster_ok(root): return None
containers = [__salt__['dockerng.inspect_container'](c)['Id'] for c in containers] networks = __salt__['dockerng.networks'](names=[name]) if networks:
harmonics = np.arange(0, coeffs.shape[0]) + 1 trig_args = np.outer(harmonics, t)
urls = get_xmodule_urls() return HttpResponse(json.dumps(urls), content_type="application/json")
ret['changes'] = {'new': '', 'old': name}
return nanops.nanmax(self.values)
youtube_str = '1.00:p2Q6BrNhdh8' youtube_str_hack = '1.0:p2Q6BrNhdh8' self.assertEqual( VideoDescriptor._parse_youtube(youtube_str), VideoDescriptor._parse_youtube(youtube_str_hack) )
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
if drop_first and len(levels) == 1: return get_empty_Frame(data, sparse)
self.assertEqual(len(mail.outbox), 1) self.assertEqual( mail.outbox[0].subject, 'You are eligible for credit from Hogwarts School of Witchcraft and Wizardry' )
DEFAULT_DELAY_SEC = 0.5
if isinstance(s, bytes): return six.text_type(s, encoding, 'replace') else: return s
inc = timedelta(hours=4) dates = Index([dt + inc for dt in self.dateIndex], name='something')
listener_state = 'cmd_|-listener_test_listening_change_state_|-echo "Listening State"_|-mod_watch' self.assertIn(listener_state, state_run)
from cassandra.cluster import Cluster from cassandra.cluster import NoHostAvailable from cassandra.connection import ConnectionException, ConnectionShutdown from cassandra.auth import PlainTextAuthProvider from cassandra.query import dict_factory HAS_DRIVER = True
test_model = CourseMetadata.fetch(self.fullcourse) self.assertNotIn('giturl', test_model)
suggested_prices = models.CommaSeparatedIntegerField(max_length=255, blank=True, default='')
#texinfo_domain_indices = True
TEST_RUNNER = 'openedx.core.djangolib.nose.NoseTestSuiteRunner'
self.set_filehandle_limits('unit')
if user is not None: for role in [CourseInstructorRole, CourseStaffRole]: role(course_id).add_users(user)
self.assertEqual(response.status_code, 204)
def f(): cat.rename_categories([1, 2, 3, 4])
self.assertEqual(actual, expected)
from salt.ext.six.moves import builtins as __builtin__ __builtin__.__salt__ = {}
'ENABLE_DASHBOARD_SEARCH': False,
assert isinstance(model.hidden_layers[-1], Softmax)
num_braces = 0
monitoring_dataset = DenseDesignMatrix(X=X)
mean_proba = np.zeros((X.shape[0], len(self.classes_))) for calibrated_classifier in self.calibrated_classifiers_: proba = calibrated_classifier.predict_proba(X) mean_proba += proba
continue
result.is_copy = ("modifications to a property of a datetimelike " "object are not supported and are discarded. " "Change values on the original.")
self.browser.refresh() self.wait_for_page()
try: os.remove(trans_tar) except (OSError, IOError): pass
request_kwargs = { 'name': vm_info['name'], 'clone_from': vm_info['clonefrom'] }
if response and not (200 <= response.status_code < 300): if_none_match = None if_match = None
if SALT_CRON_IDENTIFIER in comment_line: parts = comment_line.split(SALT_CRON_IDENTIFIER) comment_line = parts[0].rstrip() if len(parts[1]) > 1: identifier = parts[1][1:]
response_msg_div.set("class", "response_message")
from_chunks = pd.concat(read_stata(fname, chunksize=4)) tm.assert_frame_equal(parsed, from_chunks)
random.seed(data[self.column].iget(index)) return [random.random() for _ in range(3)]
PersonModel = Person
for row in db_query: curr_problem = course_id.make_usage_key_from_deprecated_string(row['module_state_key'])
for name in self.varlist: name = self._null_terminate(name, True) name = _pad_bytes(name[:32], 33) self._write(name)
return self.estimators_[index]
ret[pkg] = {'old': oldstate, 'new': state} return ret
data = query_instance(vm_)
i = range(A.shape[0]) j = range(A.shape[1]) ind = MultiIndex.from_product([i, j]) s = s.reindex_axis(ind)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
super(TabsPageTests, self).setUp()
'whitelist_modules': list,
CertificateGenerationConfiguration.objects.create(enabled=True)
var_x_plus_y = var(x + y) var_y = var(y) assert_equal(cov_x_y, 0.5 * (var_x_plus_y - var_x - var_y))
sh('git clean -fdX conf/locale')
r = requests.post(self.server_uri, data=json.dumps(data), headers=headers, verify=http_event_collector_SSL_verify)
now_patch = patch('onelogin.saml2.utils.OneLogin_Saml2_Utils.now', return_value=timestamp) now_patch.start() self.addCleanup(now_patch.stop)
self.assertTrue(self.cohort_management_page.is_category_selected())
self.assertEqual(formset.is_valid(), False) self.assertEqual(Poem.objects.count(), 1)
yield check_oob_score, name, csc_matrix(iris.data), iris.target
_test_vector_resize(tbl(), vect(), dtype, 0) _test_vector_resize(tbl(), vect(), dtype, 10)
payload = json.dumps({ 'children': None, 'data': handouts_html, 'id': self._handouts_loc, 'metadata': dict(), })
'MILESTONES_APP': False,
import logging import json
idx = self.panel.major_axis[0] - bday self.assertRaises(Exception, self.panel.major_xs, idx)
elif single_aligner and is_frame:
pass
self.q(css="#verify_later_button").click() DashboardPage(self.browser).wait_for_page()
role, created = Role.objects.get_or_create(name=name, course_id=course_key) if created is False: role.course_id = course_key role.save() return role
import json import logging
fd_ = []
if com.is_datetimelike(self.categories): return self.categories.take(self._codes, fill_value=np.nan) return np.array(self)
self.assertTrue(fstats_post.st_mtime, fstats_orig.st_mtime-age)
log.exception("Unable to generate html from LoncapaProblem") raise
if spot_config: sir_id = data[0]['spotInstanceRequestId']
axes = df.plot.bar(width=width, subplots=True) for ax in axes: for r in ax.patches: self.assertEqual(r.get_width(), width)
if not names: raise
response = self.client.get(changelist_url, {'notarealfield__whatever': '5'}) self.assertRedirects(response, '%s?e=1' % changelist_url)
dist_array = pairwise_distances(X).flatten() np.sort(dist_array) radius = dist_array[15]
if not has_course_author_access(user, course_key): raise PermissionDenied() return CoursewareSearchIndexer.do_course_reindex(modulestore(), course_key)
return _load_output(self._output_dir, _get_func_fullname(self.func), timestamp=self.timestamp, metadata=self.metadata, mmap_mode=self.mmap_mode, verbose=self.verbose)
elif result is _empty and isinstance(state_result, dict) and ret: ret = check_state_result(state_result, recurse=True)
self.login(self.email, self.pw)
out_shape = [(ishp + tsp) * tshp - tsp for ishp, tshp, tsp in zip(img_shape, tile_shape, tile_spacing)]
return capi.geos_crosses(self.ptr, other.ptr)
import salt.utils
if 'user_id' in kwargs: kwargs['user_id'] = str(kwargs['user_id']) return kwargs
opattern = re.compile(r'([\-]?\d*)\s*([A-Za-z]+([\-@][\dA-Za-z\-]+)?)')
opts = ''.join([opt for opt in opts if opt in 'AfIMq']) targets = pkg_params
LANGUAGE_COOKIE_NAME = 'django_language' LANGUAGE_COOKIE_AGE = None LANGUAGE_COOKIE_DOMAIN = None LANGUAGE_COOKIE_PATH = '/'
self.assertEqual(True, ipaddress.ip_address('100::').is_reserved) self.assertEqual(True, ipaddress.ip_network('4000::1/128').is_reserved)
global_admin = AdminFactory() for role in (CourseStaffRole, CourseInstructorRole): auth.add_users(global_admin, role(course.id), user)
courses = [] for modulestore in self.modulestores: courses.extend(modulestore.get_courses_for_wiki(wiki_slug, **kwargs)) return courses
try:
return {}
services = sorted(set(services))
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape)
tm.assert_almost_equal(np.array(s), np.array(s.values))
if callable_obj is None: return cm with cm: callable_obj(*args, **kwargs)
for axis, labels in self.non_index_axes: obj = _reindex_axis(obj, axis, labels, columns)
self.client = Client() cache.clear()
return {"result": "inclusion_two_params - Expected result: %s, %s" % (one, two)}
return parse(out)
self.assertEqual(self.func(None), [])
old_inertia, incremental_diff = _mini_batch_step( X_mb, x_mb_squared_norms, new_centers, counts, buffer, 1, None, random_reassign=False) assert_greater(old_inertia, 0.0)
input_problem_answer(step, problem_type, correctness)
if __grains__['os'] in ['MacOS', 'Darwin']: ret['changes'] = {'new': []}
DEBUG_ENGINE = Engine(debug=True)
s = Series(rng) s[1] = np.nan
clf = MultinomialNB() clf.fit(X_train, y_train, sw_train) prob_pos_clf = clf.predict_proba(X_test)[:, 1]
self.wait_for_ajax() return self._get_element_text(".response-count")
self.assertEqual(result['success'], 'correct')
self.make_course(pdf_textbooks=[HTML_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('html_book', book_index=0, chapter='xyzzy')
self._init_socket()
self._remake_table(model, override_uniques=new_unique_together)
PY2 = sys.version_info[0] == 2 PY3 = sys.version_info[0] == 3
empty = ParameterGrid({}) assert_equal(len(empty), 1) assert_equal(list(empty), [{}]) assert_grid_iter_equals_getitem(empty) assert_raises(IndexError, lambda: empty[1])
return {'country_code': self.country_code(query), 'country_name': self.country_name(query), }
return self.q(css='.page-content-secondary .team-members .team-member').present
self.assertFalse(utils.is_commentable_cohorted(course.id, team.discussion_topic_id)) self.assertTrue(utils.is_commentable_cohorted(course.id, "random"))
self.xblock_fields = {}
df1 = df.copy() df2 = df.copy()
self.fake_payment_page.submit_payment()
tm.assert_index_equal(df.set_index(df.index).index, mi)
self._check_allowed(init_geoms)
print("Computing t-SNE embedding") tsne = manifold.TSNE(n_components=2, init='pca', random_state=0) t0 = time() X_tsne = tsne.fit_transform(X)
from salt.states import saltmod
super(InheritingFieldData, self).__init__(**kwargs) self.inheritable_names = set(inheritable_names)
STATIC_URL = '/static/' STATIC_ROOT = ENV_ROOT / "staticfiles"
self.assertRaises(ValueError, ser.drop, [3, 4])
if pkg[0].find("/") > 0: origin = pkg[0] pkg = [k for k, v in old.iteritems() if v['origin'] == origin][0]
def is_in_obj(gpr): try: return id(gpr) == id(obj[gpr.name]) except Exception: return False
log.error( 'Failed to render template with error: {0}'.format( data['data'] ) ) return ''
cmd.insert(-1, '--force-yes')
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath
else: default_manager = models.Manager() default_manager.model = model default_manager.name = model._default_manager.name managers.append((force_text(default_manager.name), default_manager))
return "library_content"
win32security.SetNamedSecurityInfo( path, win32security.SE_FILE_OBJECT, win32security.OWNER_SECURITY_INFORMATION, userSID, None, None, None )
class MyForm(Form): def __init__(self, data=None, auto_id=False, field_list=[]): Form.__init__(self, data, auto_id=auto_id)
enrollment_record = CourseEnrollment.objects.get( user=user, course_id=course_id ) self.assertFalse(enrollment_record.is_active)
course_instructors = list_with_level(course, 'instructor') course_instructors_ids = [anonymous_id_for_user(user, course_key) for user in course_instructors] course_details = CourseDetails.fetch(course_key)
self.assertFalse(CourseInstructorRole(self.course.id).has_user(nonstaff_user)) self.assertTrue(CourseStaffRole(self.course.id).has_user(nonstaff_user))
import salt.utils import salt.crypt
super(ComboField, self).clean(value) for field in self.fields: value = field.clean(value) return value
with mock.patch( 'openedx.core.djangoapps.content.course_overviews.models.CourseOverview.objects.get' ) as mock_getter:
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) scores = cross_val_score(clf, X.tolist(), y2.tolist())
exc_info_on_loglevel=logging.DEBUG
retcode = __salt__['cmd.retcode']('pw groupmod {0} -d {1}'.format( name, username), python_shell=False)
if not is_list_like(n): n = np.array([n] * len(m))
self.reload_course() new_tab_ids = [tab.tab_id for tab in self.course.tabs] self.assertEqual(new_tab_ids, tab_ids + [removed_tab]) self.assertNotEqual(new_tab_ids, orig_tab_ids)
index = tm.makeStringIndex(20) floats = Series(tm.randn(20), index=index) strings = Series(tm.makeStringIndex(10), index=index[::2])
url = BASE_URL + "/auto_auth" query_str = urllib.urlencode(self._params) if query_str: url += "?" + query_str return url
if args: return item(*args)
ret = self.run_run_plus(fun='fileserver.symlink_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], dict)
self.cohort_management_page.select_cohort_some_inline_discussion()
clf = linear_model.LogisticRegression(C=1e5) clf.fit(X, y)
self.q(css="li.next").click() self.wait_for_ajax()
return value
frame.ix[:, 1:3] = 4. expected.values[:, 1:3] = 4. assert_frame_equal(frame, expected)
class ArticleForm(Form): title = CharField() pub_date = DateField()
from openpyxl.styles import Protection return Protection(**protection_dict)
if result is False: target_pkgs.append((prefix, state_pkg_name.replace(',', ';')))
stdout = json.loads(result['stdout']) return stdout != {}
ret_multip = {} for obj in output_multip: ret_multip.update(obj)
self.clear() self.get_collected()
_change_access(course, user, level, 'allow', send_email)
report_dir = (Env.REPORT_DIR / system).makedirs_p()
indices = indices[::-1] maybe_slice = lib.maybe_indices_to_slice(indices, len(target)) self.assertTrue(isinstance(maybe_slice, slice)) self.assert_numpy_array_equal(target[indices], target[maybe_slice])
pass
power = reduce(lambda a, b: b ** a, parse_result) return power
for key in keys: self.delete(key, version=version)
this_sample = this_layer.sample(state_below=state_below, state_above=state_above, layer_above=layer_above, theano_rng=theano_rng)
X = check_array(X, ensure_min_features=2, ensure_min_samples=2, estimator=self)
self.selenium.find_element_by_id('calendarlink0').click()
res2 = sql.read_sql("CALL get_testdb();", self.conn) tm.assert_frame_equal(df, res2)
self.save() response = perform_request( 'get', url, retrieve_params, metric_action='model.retrieve', metric_tags=self._metric_tags, )
type = 'courseware' title = ugettext_noop('Course') priority = 10 view_name = 'courseware' is_movable = False is_default = False
mb_k_means = MiniBatchKMeans(n_clusters=20, batch_size=201, random_state=42, init="random") mb_k_means.fit(zeroed_X) assert_greater(mb_k_means.cluster_centers_.any(axis=1).sum(), 10)
import time import salt.ext.six as six from salt.ext.six.moves import range
from __future__ import absolute_import
import integration import salt.utils
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
n_classes = 3 n_estimators = 30 plot_colors = "ryb" cmap = plt.cm.RdYlBu
self.accum.append(function(theano_args, givens=g, updates=u, mode=self.theano_function_mode, name=function_name))
zipped_content = list(lib.to_object_array( content, min_width=col_len).T) zip_len = len(zipped_content)
iris = datasets.load_iris()
self.assertEquals(3, self.response.content.count('grade_B'))
if not value: return '' try: if arg: return timesince(value, arg) return timesince(value) except (ValueError, TypeError): return ''
df = DataFrame(np.arange(9).reshape(3, 3).T) df.columns = list('AAA') expected = df.iloc[:, 2]
import salt.utils from salt.ext.six import string_types
course = self.set_up_course(due_date_display_format=None) text = self.get_text(course) self.assertIn(self.time_with_tz, text)
return uuid4().hex.decode('ascii')
url = '' try: url = reverse(view_name, args=args, kwargs=kwargs, current_app=current_app) except NoReverseMatch: if self.asvar is None: raise
world.css_click(".mce-i-none")
fn = getattr(model, '%s_data_specs' % self.method)
#default_role = None
parent = self.get_a_block(usage_id="parent") parent.inherited = "Changed!" self.assertEqual(parent.inherited, "Changed!")
_x = lambda s: s if return_password else ''
DATE_INPUT_FORMATS = [
return models.AccessToken.objects.get(token=token_string)
resp = self.client.get(reverse('dashboard')) self.assertEquals(resp.status_code, 200)
random_state = check_random_state(self.random_state) return gaussian_random_matrix(n_components, n_features, random_state=random_state)
return (self.small_width, self.small_height)
CourseEnrollment.enroll(user, course_key)
pipeline.items.append( preprocessing.ExtractPatches(patch_shape=(8, 8), num_patches=150000) )
preprocessor = CentralWindow(self._window_shape) for data in self._center: preprocessor.apply(data)
called = False
assert_almost_equal(np.std(y - np.dot(X, c)), 1.0, decimal=1)
self.problem_page.click_choice('choice_choice_1') self.problem_page.click_save() self.problem_page.wait_for_expected_status('div.capa_alert', 'saved')
response = other_view(request, '8') self.assertEqual(response.content, b'Hello World 7')
if serialized_block['type'] == 'video': self.assertIn('student_view_data', serialized_block)
def item_pubdate(self, item): return item.published
result.append(ch)
assert_equals(attempt_2, SoftwareSecurePhotoVerification.active_for_user(user))
__virtualname__ = 'ldap'
usernames = [x for x in usernames if x] initial = usernames[:]
child_descriptor = self.child_descriptor if child_descriptor is None: return None return self.system.get_module(child_descriptor)
from __future__ import absolute_import import re import salt.ext.six as six
cache.clear()
DEFAULT_COURSE_ABOUT_IMAGE_URL = ENV_TOKENS.get('DEFAULT_COURSE_ABOUT_IMAGE_URL', DEFAULT_COURSE_ABOUT_IMAGE_URL)
def f(value): if value in _unit_map: return _unit_map[value]
AutoAuthPage( self.browser, username="johndoe_saee", email=self.student_identifier, course_id=self.course_id, staff=False ).visit()
raise BuildFailure(file_not_found_message)
num_queries = 2
module.reset_problem({})
for fdpath in fd_: try: name = os.path.realpath(fdpath) os.stat(name) except OSError: continue
return ((isinstance(array, gt.ABCDatetimeIndex) and getattr(array, 'tz', None) is not None) or is_datetime64tz_dtype(array))
from salt.modules import postgres
raise NotImplementedError()
from salt.modules import rh_service
CourseModeFactory.create( course_id=self.course.id, mode_slug='professional', mode_display_name='Professional Education', )
__virtualname__ = 'pkg'
children = self.q(css='.note-section') return [EdxNotesSubsectionGroup(self.browser, child.get_attribute("id")) for child in children]
kwargs['version'] = 'auto'
dive = Book.objects.using('other').get(title='Dive into Python')
if notifier.check_events(1): notifier.read_events() notifier.process_events() queue = __context__['inotify.queue'] while queue: event = queue.popleft()
logging.root.setLevel(GARBAGE)
trainer = yaml_parse.load(test_yaml_layer2 % {'layer0_filename': layer0_filename, 'layer1_filename': layer1_filename, 'layer2_filename': layer2_filename}) trainer.main_loop()
'ret_port': int,
'WHAT_IS_VERIFIED_CERT': 'verified-certificate',
assert_array_equal(y, [1, 2, 3, 4, 1, 2])
return tab.is_enabled(course, user=user)
import jinja2
digits = load_digits() X, y = digits.data, digits.target
initial_value = self.to_python(initial) return super(HStoreField, self).has_changed(initial_value, data)
'event_return_whitelist': list,
return []
self.insert(len(self.items), item, value) return
hasher = FeatureHasher() hasher.set_params(n_features=np.inf) assert_raises(TypeError, hasher.fit)
req_status = api.get_credit_requirement_status(self.course_key, "bob", namespace="grade", name="grade") self.assertEqual(len(req_status), 0)
return field.description % field.__dict__
if isinstance(comps[1], string_types) and ' ' in comps[1]: comps[1] = re.sub(r'\s+', '\t', comps[1])
assert_array_equal(mb_k_means.predict(X_csr), mb_k_means.labels_)
sync_cohort_with_mode.apply_async(kwargs=args, countdown=300)
pass
derived = Series(self.ts) with tm.assert_produces_warning(FutureWarning): self.assertTrue(derived.is_time_series) self.assertTrue(derived.index.is_all_dates)
learning_rate = 1.
self._get_hasher().fit(X, y=y) return self
result = store.select('df', [Term('B>0')]) expected = df[df.B > 0] tm.assert_frame_equal(result, expected)
self.assert_created_course()
self.exceptions = [TransportableException]
FEATURES['COURSES_ARE_BROWSEABLE'] = True HOMEPAGE_COURSE_MAX = 9
from __future__ import absolute_import
d = Series(np.random.randn(5)) x = d.rolling(window=3).kurt() tm.assert_series_equal(all_nan, x)
self.assertEqual(len(DataFrame({})), 0)
if not __execute_cmd('config -g cfgUserAdmin -o \ cfgUserAdminEnable -i {0} 1'.format(uid)): delete_user(username, uid) return False
self.course_outline_page.visit() self.assertFalse(self.course_outline_page.deprecated_warning_visible)
id_list = [o.pk for o in self.q1.answer_set.all()] x = id_list.pop() id_list.insert(-1, x)
task_progress['traceback'] = traceback_string
CourseEnrollmentFactory( user=self.user_2, course_id=self.course.id, is_active=True, mode='audit' ) CertificateWhitelistFactory(course_id=self.course.id, user=self.user_2)
ENV_TOKENS = convert_tokens(ENV_TOKENS)
for line in self.get_statistics(prefix): print(line)
self.assert_correct_json_response(json_response)
nb_channel = int(get_scalar_constant_value(images.shape[0])) assert nb_channel % 16 == 0
self.should_fetch_course = kwargs.get('should_fetch_course') self.imports_dir = path('test_root/courses/')
nargs = len(args) if not nargs or nargs % 2 != 0: raise ValueError("Must provide an even number of non-keyword " "arguments")
sh('find {dir} -type f -delete'.format(dir=directory))
self.assertEqual(response.status_code, 200)
cls.settings_override.disable() super(LiveServerBase, cls).tearDownClass()
if 'rows' not in _response: log.error('Unable to get available minions: {0}'.format(_response)) return []
(offset_nem_thu_aug_4, datetime(2012, 8, 30), True), (offset_nem_thu_aug_4, datetime(2011, 9, 1), True),
def test_max_recursion_error(self): pass
if len(violation_list_for_line) == 4: num_violations_report += 1
result = _get_xblock_parent(self.vert1, 'unit') self.assertIsNone(result)
self._data.delete(key)
#latex_show_urls = False
with self.assertRaises(Article.DoesNotExist): Article.objects.earliest()
if has_center:
results[i][j] = results[j][i]
_, sap, _ = randomized_svd(X, k, n_iter=5, power_iteration_normalizer=normalizer)
smaller_major = self.panel4d.major_axis[::5] smaller = self.panel4d.reindex(major=smaller_major)
apache2.service.running()
url( r'^courses/{}/survey$'.format( settings.COURSE_ID_PATTERN, ), 'courseware.views.views.course_survey', name='course_survey', ),
self.assertNotIn("x-xss-protection", self.process_response())
course_display_name = self.advanced_settings.get('Course Display Name') self.advanced_settings.set('Course Display Name', 1) self.advanced_settings.wait_for_modal_load()
__virtualname__ = 'win_snmp'
from __future__ import unicode_literals
from __future__ import absolute_import import logging import salt.ext.six as six
return _delete_entrance_exam(request=request, course_key=course_key)
query = [[1., 0.]]
name = "I can have a name too!" self.assertEqual(ContentFile(b"content", name=name).name, name)
for l in [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)]:
from salt.modules import sdb
self.assertTrue(linode._validate_name('foo123bar'))
def __init__(self, estimator): raise RuntimeError("sklearn not available.")
error_msg = exc_info_to_str(sys.exc_info())
#'preamble': '',
try: migrations_module = import_module(migrations_package_name) except ImportError: pass else: try: return upath(module_dir(migrations_module)) except ValueError: pass
return False
X = np.array([
self.pos = pos if pos is not None and self.typ is not None: self.typ._v_pos = pos return self
for mode in configured_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
del settings.ROOT_URLCONF with self.assertRaises(AttributeError): self.client.get("/middleware_exceptions/view/")
except ProcessingError as err: log.warning("Module encountered an error while processing AJAX call", exc_info=True) return JsonResponse({'success': err.args[0]}, status=200)
(['honor', 'verified', 'audit']),
@wraps(func, assigned=available_attrs(func)) def inner_func(*args, **kwargs): response = func(*args, **kwargs) patch_vary_headers(response, ('Cookie',)) return response return inner_func
self.problem_page.a11y_audit.check_for_accessibility_errors()
return modulestore().get_item(child.location)
if get_parents and current_node != start_node: parents = get_parents(current_node)
self.assertEqual(result['order'].bill_to_ccnum, '####')
mof_s = mof_h = win32file._getmaxstdio()
import logging import time
self.validate_min_itemsize(min_itemsize)
CSRF_COOKIE_SECURE = ENV_TOKENS.get('CSRF_COOKIE_SECURE', False)
result = self.take(i, axis=axis) copy = True
csv_rows = [row for row in unicodecsv.DictReader(csv_file)]
if not HAS_REQUESTS: return False return __virtualname__
with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):
self.generated_certificate.invalidate()
kwds.setdefault('c', plt.rcParams['patch.facecolor'])
return self.cleaned_data.get("order_direction") or "desc"
with remove_ccx(usage_key) as (usage_key, restore): orig_key, version = self._modulestore.get_block_original_usage(usage_key) return restore(orig_key), version
MASQUERADE_SETTINGS_KEY = 'masquerade_settings'
with self.assertRaises(ValueError): for obj in qs: pass
TestScenario((self.demo_course,), "Empty"), TestScenario((self.html_course,), "Intro to <html>"),
result = set() for v in na_values: try: v = float(v) if not np.isnan(v): result.add(v) except: pass return result
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
cache_key = CourseEnrollment.cache_key_name( instance.user.id, unicode(instance.course_id) ) cache.delete(cache_key)
return False
__virtualname__ = 'pprint'
iris = datasets.load_iris() X = iris.data y = iris.target X, y = X[y != 2], y[y != 2] n_samples, n_features = X.shape
grad = numpy.gradient(a) grad_x, grad_y = grad
initial_element = etree.SubElement(codeparam_element, "initial_display") initial_element.text = str(initial_display)
parent_ids = [ valid_parent for valid_parent in all_parent_ids if self.has_path_to_root(valid_parent, course) ]
exc_info_on_loglevel=logging.DEBUG
self.unit_page.xblocks[1].open_basic_tab()
for svd_10, svd_20 in svds_10_v_20: assert_greater( svd_20.explained_variance_ratio_.sum(), svd_10.explained_variance_ratio_.sum(), )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from __future__ import absolute_import import os import logging import copy
_list = self.run_function('beacons.list', return_yaml=False) self.assertFalse(_list['enabled'])
children = xblock_info['child_info']['children'] self.assertTrue(len(children) > index) return children[index]
available_version = salt.utils.alias_function(latest_version, 'available_version')
encoder=CourseSettingsEncoder
curl -sSik https://localhost:8000 \\ -d client=runner \\ -d fun='jobs.lookup_jid' \\ -d jid='20150129182456704682' \\ -d outputter=highstate
if not ('test' in settings and settings['test']): _write_file_network(new_resolv, _DEB_RESOLV_FILE)
SUBSCRIBE_BATCH_SIZE = 1000
data = parse_qs(body) response = self.client.post(url, data)
task_type = 'grade_problems' task_class = calculate_problem_grade_report task_input = {} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
self.repo.checkout(checkout_ref) if branch: self.repo.reset(oid, pygit2.GIT_RESET_HARD)
if len(nontext) / len(data) > 0.30: return True return False
with ensure_clean_store(self.path) as store:
ret['Comment'] = "Failed with failure code: {0}".format(exc[5]) ret['Success'] = False
return 1
return json.loads(self.xmodule.handle_ajax(dispatch, data))
try: progress_outputter = salt.loader.outputters(opts)[out]
self.client.login(username=self.global_staff.username, password="test")
self.store.convert_to_draft(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item))
import integration import salt.utils from salt import fileclient from salt.ext import six from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('..')
function = Group(inner_varname + Suppress("(") + expr + Suppress(")"))("function") function.setParseAction(self.function_parse_action)
self.notes_page.go_to_page(3) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
DEFAULT_MIN_NUM = 0
module = CapaFactory.create(due=self.yesterday_str, done=True) self.assertFalse(module.should_show_reset_button())
se = SpectralEmbedding(n_components=1, affinity="<unknown>", random_state=np.random.RandomState(seed)) assert_raises(ValueError, se.fit, S)
from __future__ import unicode_literals
qs = RasterModel.objects.filter(rastprojected__bbcontains=rast) self.assertEqual(qs.count(), 1)
table_name_filter = options.get('table_name_filter')
self.assertIn(k, body_plain)
result = df.xs(('a', 4), level=['one', 'four'])
self._catalog = {}
import fnmatch import logging import os
import pprint import logging import time
pts = pts[pts['species'] == species_name] bunch['pts_%s' % label] = pts
return ACCESS_GRANTED if (can_load() or can_enroll()) else ACCESS_DENIED
self.courseware_page.visit() staff_page = StaffPage(self.browser, self.course_id) self.assertEqual(staff_page.staff_view_mode, 'Staff') return staff_page
if opts.use_hashing: feature_names = None else: feature_names = vectorizer.get_feature_names()
if lang == 'en': return u'subs_{0}.srt.sjson'.format(subs_id) else: return u'{0}_subs_{1}.srt.sjson'.format(lang, subs_id)
errorlog = make_error_tracker()
class BandAdmin(ModelAdmin): exclude = ('bio',)
request.need_to_delete_cookie = True
if tm.is_platform_32bit(): raise nose.SkipTest("32-bit platform buggy: {0} -> {1}".format (from_key, to_key))
with self.assertNumQueries(4): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
self.assertOLXIsDraftOnly(block_list_to_revert) with self.assertRaises(InvalidVersionError): self.revert_to_published(block_list_to_revert)
Y_neg = Y.copy() Y_neg[0, 0] = -1 assert_raises(ValueError, transform.transform, Y_neg)
for i, A in enumerate(Z.transpose(0, 2, 1)):
assert_raises(ValueError, precision_recall_fscore_support, [0, 1, 2], [1, 2, 0], average='mega')
return gettext_module.translation( domain=self.domain, localedir=localedir, languages=[self.__locale], codeset='utf-8', fallback=use_null_fallback)
with self.assertNumQueries(1): RestrictedCourse.is_restricted_course(course_id) RestrictedCourse.is_disabled_access_check(course_id)
from pandas.core.indexing import maybe_droplevels
_describe = __salt__['boto_iot.describe_policy'](policyName=policyName, region=region, key=key, keyid=keyid, profile=profile)['policy']
if dns_label.match(name): return True else: return False
if isinstance(data, dict) and not pillar_key: return data elif not pillar_key: return {'redis_pillar': data} else: return {pillar_key: data}
return
DECIMAL_SEPARATOR = ','
X = np.random.randn(10, 2) X[::2] = np.nan
self.delete_item(store, self.html_unit1.location) self.reindex_library(store) response = self.search() self.assertEqual(response["total"], 1)
return [parse_path_data(path) for path in self._paths] if self._paths else self._paths
response = self.client.get('/raises400/') self.assertContains(response, '<div class="context" id="', status_code=400)
from __future__ import print_function from __future__ import absolute_import
df = DataFrame(dict(A=np.random.rand(20), B=np.random.rand(20))) store.append('df', df)
if value is not UNSET: dct[key] = value
self.courseware.go_to_sequential_position(position) self.video.wait_for_video_player_render()
cache_key = (forward, reverse, include_parents, include_hidden, topmost_call)
#end class
grains['virtual_subtype'] = 'Xen PV DomU'
raise KeyError('Cannot assign to module key {0} in the ' 'FunctionWrapper'.format(cmd))
from safe_lxml import defuse_xml_libs defuse_xml_libs()
return list(set(enrolled_students) - set(students_already_have_certs))
X_dense[3, :] = 0.0
from __future__ import unicode_literals
nftables.__grains__ = {} nftables.__salt__ = {}
for qs in self.fast_deletes: count = qs._raw_delete(using=self.using) deleted_counter[qs.model._meta.label] += count
place2 = Place(name='Main St', address='111 Main St') place2.save_base(raw=True) park = ParkingLot(parent=place2, capacity=100) park.save_base(raw=True)
x = rands_array(nchars=4, size=n) return CategoricalIndex(np.random.choice(x, k), name=name)
alpha = float(alpha) random_state = check_random_state(random_state)
name = name[:-1] if p.count(b"'") == 2: has_encoding = True
return self.find_css('a.group-toggle.hide-groups').present
import os import stat
#pylint: disable=E0602
child_vertical_usage_key = self._create_vertical(parent_usage_key=root_usage_key) resp = self.create_xblock(parent_usage_key=child_vertical_usage_key, category='problem', boilerplate='multiplechoice.yaml') self.assertEqual(resp.status_code, 200)
self.p1.article_set.set([self.a1, self.a2])
resp = self.client.get(reverse('courseenrollments')) self.assertEqual(resp.status_code, status.HTTP_200_OK)
rng = date_range(START, END, freq=datetools.bmonthEnd)
for prop in properties_update: value = properties[prop] res = __salt__['zpool.set'](name, prop, value)
COMMENT, INPUT, OUTPUT = range(3)
return 'f_geometry_column'
self.edit_component(1) self.open_advanced_tab() self.video.set_field_value('YouTube ID', 'sampleid123') self.save_unit_settings()
enable_sig_handler('SIGINFO', _handle_sigusr1)
self.factory(l1_ratio=1.1)
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
microsite.set_by_domain(self.microsite.site.domain) self.assertTrue(microsite.is_request_in_microsite())
return ExtType(0, v.tostring())
return wrap_fragment(frag, static_replace.replace_static_urls( frag.content, data_dir, course_id, static_asset_path=static_asset_path ))
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
source_course_key = CourseKey.from_string(source_course_key_string) destination_course_key = CourseKey.from_string(destination_course_key_string) fields = deserialize_fields(fields) if fields else None
change_map = {} conjunction = (connector == AND)
self.find_css('a.detail-toggle').first.click()
for parent in parents: self._block_relations[parent].children.remove(usage_key)
self.normalize = bool(self.normalize)
from salt.states import slack
comment = cc.Comment.find(comment_id) result = _vote_or_unvote(request, course_id, comment, value) comment_voted.send(sender=None, user=request.user, post=comment) return result
milestones_helpers.remove_course_content_user_milestones( course_key=usage_key.course_key, content_key=usage_key, user=student, relationship='fulfills' )
widget.is_required = self.required
index_values = self.df.index if isinstance(self.df.index, PeriodIndex): index_values = self.df.index.to_timestamp()
if len(self.rhs) > 2 and not self.rhs[2] == 'spheroid': self.process_band_indices()
self.assertTrue(np.issubdtype(pan.values.dtype, np.floating))
try: auth_app.User._meta.get_field('username').run_validators(default_username) except exceptions.ValidationError: return ''
input_data = ifile.read() if not input_data.strip(): log.error('Template is nothing but whitespace: {0}'.format(template)) return ret
nbrs = NearestNeighbors(n_neighbors=1).fit(X) dist, ind = nbrs.kneighbors(X, return_distance=True)
import salt.ext.six as six
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
self.send_response(500, 'Bad Request: does not contain API key') self.send_header('Content-type', 'text/plain') self.end_headers() return False
if len(missing): cats = self.categories.get_indexer(target)
results = { 'nickname': user.username, 'email': user.email, 'fullname': user.profile.name, }
first_group = self.user_partition.groups[0] self.user_partition.scheme.current_group = first_group
import salt.ext.six as six import salt.utils from salt.exceptions import SaltInvocationError
GlobalStaff().add_users(self.user) self.client.login(username=self.user.username, password='foo')
min_price = models.IntegerField(default=0)
REGISTRATION_EMAIL_PATTERNS_ALLOWED = None
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
action_name = ugettext_noop('generating_enrollment_report') task_fn = partial(upload_enrollment_report, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
return GeoIP_record_by_name(self._city, c_char_p(enc_query))
incorrect_jid_length = 2012 self.assertEqual(utils.jid.jid_to_time(incorrect_jid_length), '')
check_names = True if not r_idx_names and r_idx_levels > 1: check_names = False
with self.assertRaises(TypeError): GEOSGeometry(NotAGeometry()) with self.assertRaises(TypeError): GEOSGeometry(None)
return self._end_apply_index(i, self.freqstr)
course_one_team = CourseTeamFactory.create(name="Course one team", course_id=self.course.id, topic_id=1)
def gettext_noop(s): return s
def __xor__(self, other): "Return the symmetric difference of this Geometry and the other." return self.sym_difference(other)
self.q(css='.form-create.create-user .user-email-input').fill(email)
root_block = block_structure.get_xblock(block_structure.root_block_usage_key) user_partitions = getattr(root_block, 'user_partitions', []) or [] block_structure.set_transformer_data(cls, 'user_partitions', user_partitions)
if self.is_open: raise PossibleDataLossError( "Re-opening the file [{0}] with mode [{1}] " "will delete the current file!" .format(self._path, self._mode) )
endorsement = obj.get("endorsement") return endorsement["time"] if endorsement else None
SENSITIVE_CREDENTIALS = re.compile('api|token|key|secret|password|signature', re.I) CLEANSED_SUBSTITUTE = '********************' for key in credentials: if SENSITIVE_CREDENTIALS.search(key): credentials[key] = CLEANSED_SUBSTITUTE return credentials
categories = categoricals[0] rawcats = categories.categories for x in categoricals[1:]: if not categories.is_dtype_equal(x): raise ValueError("incompatible categories in categorical concat")
add_user_to_cohort(second_cohort, self.student.username) self.assert_student_in_group(self.groups[1])
FEATURES['LICENSING'] = True
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
url(r'^admin/', admin.site.urls),
release = version
for poly in mpoly: self.assertEqual(sr.wkt, poly.srs.wkt) for ring in poly: self.assertEqual(sr.wkt, ring.srs.wkt)
chunksize = 1e4
distances.flat[::distances.shape[0] + 1] = 0.0
storage = self.storage_class(location='') self.assertEqual(storage.base_location, '') self.assertEqual(storage.location, upath(os.getcwd()))
ret['comment'] = ('File {0} is not present and is not set for ' 'creation').format(name) return ret
cached_requirements = __salt__['cp.cache_file']( requirements, saltenv )
self.track_selection_page.visit()
try: import elasticsearch logging.getLogger('elasticsearch').setLevel(logging.CRITICAL) HAS_ELASTICSEARCH = True except ImportError: HAS_ELASTICSEARCH = False
def get_context(self): context = super(TodaysDate, self).get_context() context['date'] = '' return context
assert_raises(ValueError, clf.fit, X, np.ones(len(X)))
rs2 = ser.replace([np.nan, 'foo', 'bar'], [-1, -2, -3]) tm.assert_series_equal(rs, rs2)
GRADES_UPDATED = Signal(providing_args=["username", "grade_summary", "course_key", "deadline"])
if not np.prod(self.shape): return self
round_list = [1, 2] with self.assertRaises(TypeError): df.round(round_list)
pass
log = logging.getLogger(__name__)
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
test_image = Image() test_image.save() foo_image = FooImage(my_image=test_image) foo_image.save()
self.assertEqual(len(partition.groups), 2) self.assertItemsEqual( [g.id for g in partition.groups], [ VerificationPartitionScheme.ALLOW, VerificationPartitionScheme.DENY, ] )
import json
p = OGRGeometry(OGRGeomType('Point')) capi.get_centroid(self.ptr, p.ptr) return p
env_path = os.environ.get(env_var, path) if not env_path or not os.path.isfile(env_path): env_path = path if path != default_path: env_path = path
assert_true(score_auc < 1.0) assert_true(score_accuracy < 1.0) assert_not_equal(score_auc, score_accuracy)
def __singleton_init__(self, opts, **kwargs): self.opts = dict(opts) self.ttype = 'zeromq'
friends = models.ManyToManyField('self', through="Relationship", symmetrical=True)
self.enable_saml(enabled=False) response = self.client.get(self.METADATA_URL) self.assertEqual(response.status_code, 404)
try: return parse_url(url).scheme in ['s3', 's3n', 's3a'] except: return False
if order_field.startswith('-') and pfx == "-": ordering.append(order_field[1:]) else: ordering.append(pfx + order_field)
self.assertIn( ("migrations", "0001_squashed_0002"), recorder.applied_migrations(), )
self._do_create_preference_test(True)
df = DataFrame({'A': range(5), 'B': range(0, 10, 2)}) r = df.rolling(window=3)
self.loop_interval = int(self.opts['loop_interval']) self.rotate = int(time.time())
from salt.modules import kmod
self.assertTrue( self.run_function('shadow.set_maxdays', [TEST_USER, 20])) self.assertEqual( self.run_function('shadow.get_maxdays', [TEST_USER]), 20)
expected_msg = 'Error: test error' self.assertEqual(expected_msg, result['success'])
items = self.store.get_items(self.course.id) self.assertEqual(len(items), 0)
return User.objects.none()
sentinel = com.sentinel_factory()
panel4d = Panel4D(vals) self.assertIs(panel4d.values, vals)
self.courseware.go_to_sequential_position(1) execute_video_steps(tab1_video_names)
if not isinstance(message, ValidationMessage): raise TypeError("Argument must of type ValidationMessage") self.summary = message
result[discussion_id] = UsageKey.from_string(result[discussion_id]).map_into_course(self.course_id)
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
return self.construct_scalar(node)
alpha_grid, scores_path = lasso_stability_path(X, y, random_state=42, eps=0.05)
return self._find_within('.discussion-thread#thread_{}'.format(thread_id)).present
return JsonResponse({"error": unicode(err)}, 400)
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
if not __opts__['test']: if archive: __salt__['vmadm.update'](vm=name, key='hostname', archive_on_delete=True)
self.table_attributes = attributes return self
self.assert_grade(problem, answer, "correct")
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.john])
if not cpy_error and 'port' in mod_opts: return __virtualname__
return [ CourseKey.from_string(course_overview['id']) for course_overview in CourseOverview.objects.values('id') ]
from salt.states import keyboard
_check_all_orients(self.empty_frame, check_index_type=False, check_column_type=False)
chgroups(name, ()) return _dscl(['/Users/{0}'.format(name)], ctype='delete')['retcode'] == 0
path = salt.utils.url.unescape(path)
self.assertQuerysetEqual( self.cia.members.all(), [] )
for student in students[5:7]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.unavailable, mode='honor', grade=default_grade )
result = f.clean('2010-12-21') self.assertEqual(result, date(2010, 12, 21))
private_vertical = get_and_verify_publish_state('vertical', self.PRIVATE_VERTICAL, False)
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM 21/12/2010")
try: if os.fork() > 0: reinit_crypto() sys.exit(0) else: reinit_crypto() except OSError as ex: sys.exit(1)
except Http404: return response except Exception: if settings.DEBUG: raise return response
result = s.loc[[]] expected = s.iloc[[]] assert_series_equal(result, expected)
ip_addresses = vb_get_network_addresses(machine_name=BOOTABLE_BASE_BOX_NAME)
from __future__ import unicode_literals
self.assertEqual(x, [])
with tm.assertRaisesRegexp(ValueError, msg): lib.maybe_convert_numeric( np.array(['foo_' + infinity], dtype=object), na_values, maybe_int)
b1.authors.set([a1]) self.assertEqual(data, []) b1.authors.set([]) self.assertEqual(data, [])
if not value.srid: try: value.srid = self.widget.map_srid except AttributeError: if self.srid: value.srid = self.srid return value
FEATURES['ENABLE_CONTENT_LIBRARIES'] = True
train = SVHN('splitted_train', path=local_path) check_dtype(train)
assert_panel_equal(p.ix[:, dates, cols], p.reindex(major=dates, minor=cols))
if allow_obj == 'convert': targfunc = partial(self._badobj_wrap, func=targfunc, allow_complex=allow_complex) self.check_fun(testfunc, targfunc, 'arr_obj', **kwargs)
km = KMeans(precompute_distances="wrong") assert_raises(ValueError, km.fit, X)
cls._validate_cookie_params(session_id, user_id) safe_cookie_data = SafeCookieData( cls.CURRENT_VERSION, session_id, key_salt=get_random_string(), signature=None, ) safe_cookie_data.sign(user_id) return safe_cookie_data
return tenant_id
self._assert_cert_status(phantom_course, self.user, CertificateStatuses.error)
EXPORTED_ASSET_DIR = 'assets'
self.assertFalse(hasattr(r, 'content'))
from __future__ import absolute_import import os import yaml import pipes import shutil
print not iseia(2200, (E48, E96, E192)) print iseia(5490e2, (E48, E96, E192)) print iseia(2200) print not iseia(5490e2)
__virtualname__ = 'psget'
from __future__ import absolute_import import collections import math
for axis in lrange(self._AXIS_LEN): v = axes.get(self._AXIS_NAMES[axis]) if v is None: continue f = _get_rename_function(v)
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
__virtualname__ = 'influxdb'
X = check_array(X, order='C', dtype='float64') assert_raises(ValueError, clf.fit, X, y, check_input=False)
del schedule[job]['_seconds']
log = logging.getLogger(__name__)
_skip_if_has_locale()
return self.q(css='.active .bookmark-icon').visible
exp_doc_topic = np.exp(_dirichlet_expectation_2d(doc_topic_distr))
if "pinned" not in thread: thread["pinned"] = False
est = TreeEstimator(max_features=10) assert_raises(ValueError, est.fit, X, y)
return wrap_fragment( frag, render_to_string( "edit_unit_link.html", {'frag_content': frag.content, 'edit_link': edit_link} ) )
self.visit_literal_block(node)
from salt.ext.six import string_types
X = np.c_[X, E]
return Scope(level + 1, global_dict=global_dict, local_dict=local_dict, resolvers=resolvers, target=target)
with cf.option_context('display.unicode.east_asian_width', True):
import contextlib import errno import logging import os import shutil import subprocess import time
return ax.right_ax
Site.objects.all().delete() with self.assertRaises(ImproperlyConfigured): Sitemap().get_urls()
return advertised_start is None and start == DEFAULT_START_DATE
self.assertQuerysetEqual( LoopX.objects.all().order_by('y__x__y__x__id'), [] )
from __future__ import absolute_import
sl = self.series[10:20] sl[:] = 0 self.assertTrue((self.series[10:20] == 0).all())
input_type = X.format if sp.issparse(X) else type(X) err = "Expected a CSR or CSC sparse matrix, got %s." % input_type raise TypeError(err)
config.floatX = self.prev_floatX
'PREVENT_CONCURRENT_LOGINS': False,
from salt.cloud.clouds import linode
inputs = SparseType('csr', dtype=theano.config.floatX)() return theano.function([inputs], self(inputs), name=name)
SERVER_EMAIL = 'root@localhost'
data = self._check_column_names(data)
print "video {0} url_name: {1}".format(i, video.url_name)
return hashlib.md5(settings.PROFILE_IMAGE_SECRET_KEY + username).hexdigest()
git_describe = describe_out
n_class = dual_coef.shape[0] + 1
self.assertEqual(len(mail.outbox), 0)
width = self.ext.config['dailymotion_width'][0] height = self.ext.config['dailymotion_height'][0] return flash_object(url, width, height)
kw['force'] = True build_status = built(name, **kw) result = build_status['result'] status = _ret_status(build_status, name, result=result, changes={name: result}) return status
'staff_access': True, 'ordered_grades': sorted(course.grade_cutoffs.items(), key=lambda i: i[1], reverse=True),
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=user_ids)), 0 )
from salttesting import skipIf from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch ensure_in_syspath('../../')
CourseEnrollment.unenroll(user, course_id) self.assert_no_events_were_emitted()
build.run(self) if getattr(self.distribution, 'running_salt_install', False):
def __hash__(self): return (hash(self.srcport) ^ hash(self.destport) ^ hash(self.protocol) ^ hash(self.destaddr))
import salt.utils
next_offset = None
self.assertEquals(preview.latex_preview('log10(3)'), r'\log_{10}(3)')
pythoncom.CoInitialize()
Category.objects.get(url='6th').delete() with self.assertRaises(ValidationError): f.clean([c6.id])
m = MultiIndex.from_arrays([[1, 2], [3, 4]]) self.assertRaises(NotImplementedError, Series, m)
from __future__ import unicode_literals
receipt_id = self.receipt_id if override_receipt_id is None else override_receipt_id
check_err(arg_byref(cargs), cpl=cpl) return result
from IPython import start_ipython start_ipython(argv=[])
config = old_to_new(config)
required_boto3_version = '1.2.1'
__pillar__ = {} if 'pepa_pillar' in __opts__: __pillar__ = __opts__['pepa_pillar'] if args.pillar: __pillar__.update(yaml.load(args.pillar))
break
verticals = self.store.get_items(course_id, qualifiers={'category': 'vertical'})
self.assert_has_text(xml, "//div[@class='capa_alert']", self.context['submitted_message'])
return HttpResponseRedirect(reverse('shoppingcart.views.show_receipt', args=[result['order'].id]))
keys = sorted(_registered_options.keys())
self.refresh_course() return problem
course.mobile_available = False with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred): self.store.update_item(course, ModuleStoreEnum.UserID.test)
hg.__salt__ = {}
__virtualname__ = 'pkg' log = logging.getLogger(__name__)
import salt.ext.six as six
if ttype == 'zeromq': import salt.transport.zeromq return salt.transport.zeromq.ZeroMQPubServerChannel(opts, **kwargs)
ts.resample('d').mean()
v = Timedelta(1, 'D') td = timedelta(days=1) self.assertEqual(hash(v), hash(td))
data = { "form-TOTAL_FORMS": "3", "form-INITIAL_FORMS": "3", "form-MAX_NUM_FORMS": "0",
assert_equal(grid_search_no_score.best_params_, grid_search.best_params_) assert_equal(grid_search.score(X, y), grid_search_no_score.score(X, y))
try: marty.book_set.set([pro, dive]) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
IS_WIN = win_timezone.__virtual__()
if not fnmatch.fnmatch(repo['url'], six.text_type(remote)): continue
pk_value = None if form.instance._state.adding else form.instance.pk
if self.child_fde in rlist: try: stderr = self._translate_newlines( salt.utils.to_str( os.read(self.child_fde, maxsize) ) )
is_i8 = com.needs_i8_conversion(self.dtype) if is_i8: matches = False else: matches = (new_other == np.array(other))
'reverification',
y = [v if v.size > 0 else np.array([np.nan]) for v in y]
st_mode = st.st_mode read_all = stat.S_IRUSR read_all |= stat.S_IRGRP read_all |= stat.S_IROTH
self.copy_from_server_to_local(remote_name, local_name) log.info(common_msg + "File %s has been locally cached to %s" % (remote_name, local_name))
EmptyPromise( lambda: self.current_form != login_form, "Finish toggling to the password reset form" ).fulfill()
user.last_login = timezone.now() user.save(update_fields=['last_login'])
from salt.modules import rabbitmq from salt.exceptions import CommandExecutionError
authentication_classes = (OAuth2Authentication, SessionAuthentication,) permission_classes = (IsAuthenticated,) serializer_class = CourseSerializer pagination_class = None def get_queryset(self): return list(Course.iterator())
pass
AUTH_BASE_URL = os.environ.get('test_url', 'http://localhost:8031')
srid = self.srid return 'SRID=%s;%s' % (srid, self.wkt) if srid else self.wkt
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
try:
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
if firewall and syslog_config == 'loghost': if esxi_hosts: if not isinstance(esxi_hosts, list): raise CommandExecutionError('\'esxi_hosts\' must be a list.')
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) predictions = cval.cross_val_predict(clf, X.tolist(), y.tolist())
params = [(param, request.GET[param]) for param in POST_AUTH_PARAMS if param in request.GET]
pkg_params = { name: { 'version': kwargs.get('version'), 'extra_install_flags': kwargs.get('extra_install_flags') } }
v_sample = tensor.matrix('ais_v_sample') beta = tensor.scalar('ais_beta')
self.a.idols.add(self.a)
def fit(self, X, y): return self
self.form_data.setlist('requested_fields', ['field1', 'field2'])
trees = ExtraTreesClassifier(max_depth=3, n_estimators=10, random_state=0) trees.fit(X, y)
resp = self.client.post('/password_reset_confirm/{0}-{1}/'.format(uidb36, token), { 'new_password1': 'bar', 'new_password2': 'bar' }, follow=True)
_default_logging_level_ = 'info' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'minion')
response = self.client.get('/?preview-lang=fa-ir') self.assert_tag_has_attr(response.content, "html", "lang", "fa-ir")
fut = duedate.get_extended_due_date return fut(node)
self._find_within(".discussion-show").first.click() EmptyPromise( self.is_discussion_expanded, "Discussion expanded" ).fulfill()
response = self.send_get(client) self.assertEqual("m", response.data["gender"])
rstfile = tempfile.NamedTemporaryFile(suffix='.tif')
return ret
self.update_info(info)
self.orig_names = self.names[:]
for mode, min_price in course_modes: CourseModeFactory.create(mode_slug=mode, course_id=self.course.id, min_price=min_price)
if not want.startswith('<?xml'): wrapper = '<root>%s</root>' want = wrapper % want got = wrapper % got
from __future__ import absolute_import import os import time import logging import traceback
diabetes_y_train = diabetes.target[:-20] diabetes_y_test = diabetes.target[-20:]
kernel_current = __salt__['cmd.run']('uname -a') for kernel in kernel_versions: if kernel in kernel_current: kernel_restart = False break
if hasattr(params, 'items'): return {k: v.force_bytes for k, v in params.items()} else: return [p.force_bytes for p in params]
UPSELL_TO_VERIFIED_MODES = [HONOR, AUDIT]
problem = new_loncapa_problem(xml_str)
if self.paginator.count == 0: return 0 return (self.paginator.per_page * (self.number - 1)) + 1
ieee2 = xport2
with self.assert_logged(r'SafeCookieData .* is not bound to user'): yield
extra_attrs = self.widget_attrs(widget) if extra_attrs: widget.attrs.update(extra_attrs)
indexer = [slice(None)] * self.ndim indexer[axis] = loc indexer = tuple(indexer)
return _write_styles('.xmodule_edit', output_root, _list_descriptors())
parser.add_argument( '--all', action='store_true', dest='all', default=False, help='Generate course overview for all courses.', )
while len(func_lines) > 0 and func_lines[-1] == '': func_lines = func_lines[:-1]
from __future__ import absolute_import
handout_links = self.course_info_page.handout_links self.assertEqual(len(handout_links), 1) self.assertIn('demoPDF.pdf', handout_links[0])
if sample_weight is None: sample_weight = np.ones(n_samples, dtype=np.float64, order='C')
remote_rev = all_remote_refs['refs/tags/' + rev] remote_rev_type = 'tag'
for name in ["", "a"]: params["name"] = name assert_name_error("Your legal name must be a minimum of two characters long")
with warnings.catch_warnings(record=True): import pandas.io.ga as ga
res = self.bseries[:-3] tm.assert_sp_series_equal(res, self.bseries.reindex(idx[:-3]))
regex = re.compile(r'^\w+$', re.U) self.assertSerializedEqual(regex)
out_file = os.path.join(salt.syspaths.CONFIG_DIR, new_name)
config.add_subpackage('tests')
queryset = changelist.get_queryset(request) self.assertEqual(queryset.count(), 1) self.assertEqual(queryset[0], self.bio_book)
all_unittests_suite = suites.TestSuite('All Tests', subsuites=[js_suite, python_suite]) all_unittests_suite.run()
resolved_url = resolve_url(reverse_lazy('logout')) self.assertIsInstance(resolved_url, six.text_type) self.assertEqual('/accounts/logout/', resolved_url)
call_command("migrate", "migrations", "zero", verbosity=0)
self.good_dir = self.create_course_xml(self.content_dir, self.base_course_key)
import integration
from __future__ import absolute_import import pyrax
if asset_idx is None: raise ItemNotFoundError(asset_key) all_asset_info.pop(asset_idx) return all_asset_info
__virtualname__ = 'user'
return self.index.is_all_dates
raise SaltCloudSystemExit( 'The following VM\'s were not found: {0}'.format( ', '.join(names) ) )
item = modulestore().get_item(usage_key)
return settings.FEATURES.get('ENABLE_PREREQUISITE_COURSES', False) \ and settings.FEATURES.get('MILESTONES_APP', False)
self.assertDictEqual(json.loads(response.content), data)
return os.path.join(__salt__['config.get']('cachedir'), 'file_backup')
log = logging.getLogger(__name__)
from __future__ import absolute_import import logging
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
component_css = 'button[data-category={}]'.format(name) page.wait_for_element_visibility(component_css, 'Advanced component {} is visible'.format(name))
'state_verbose': bool,
self.assertEqual(len(res['a'].collections), 1)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import datetime import itertools import nose
class SimpleTestCaseSubclass(SimpleTestCase): pass
return False
if isinstance(obj, gt.ABCSeries): from pandas import Series result = Series(result, index=obj.index, name=obj.name, copy=False)
'courseware.middleware.RedirectUnenrolledMiddleware',
'log_level_logfile': str,
payment_data = checkout_with_ecommerce_service( request.user, course_id, current_mode, request.POST.get('processor') )
self.assertFalse(result['success']) self.assertIn(u"payment was declined", result['error_html'])
frame = self.frame.copy() frame2 = self.frame.copy() expected = self.frame.copy()
msg = "Input has different freq=A-DEC from Period" with tm.assertRaisesRegexp(period.IncompatibleFrequency, msg): base <= Period('2011', freq='A')
np.clip(X, 0, np.finfo(X.dtype).max, out=X) return X
self.create_credentials_config() self.create_programs_config()
self.assertEqual(resolve_url('example.com'), 'example.com')
if opts.all_categories: categories = None else: categories = [ 'alt.atheism', 'talk.religion.misc', 'comp.graphics', 'sci.space', ]
data = "65248E10 11\n55555E55 22\n"
i = 2 f = 1.5
if not cleaned_data.get('all_blocks', None): raise ValidationError({'username': ['This field is required unless all_blocks is requested.']})
sixth = -(len(e))
return course_key
if (any(x is not None for x in index_labels) and self.header is not False):
raise ValueError('time-weighted interpolation only works ' 'on Series or DataFrames with a ' 'DatetimeIndex')
from salt.states import boto_sns
clf_sigmoid = CalibratedClassifierCV(clf, cv=2, method='sigmoid') clf_sigmoid.fit(X_train, y_train, sw_train) prob_pos_sigmoid = clf_sigmoid.predict_proba(X_test)[:, 1]
request_finished.connect(update_watch)
REGISTERED_ACCESS_ROLES = {}
last_element = t.nodes[-1] self._dispatch(last_element)
data = {} if headers and 'Accept' in headers: data['CONTENT_TYPE'] = headers['Accept'] response = self.client.get(url, data)
d = d.iloc[:min(max_rows, len(d))]
if not installer: log.error('No installer configured for version {0} of package ' '{1}'.format(version_num, pkg_name)) ret[pkg_name] = {'no installer': version_num} continue
nv.validate_transpose(args, kwargs) return SparseDataFrame( self.values.T, index=self.columns, columns=self.index, default_fill_value=self._default_fill_value, default_kind=self._default_kind).__finalize__(self)
with self.assertRaises(ValueError): len(AustraliaCity.objects.filter(point__distance_lte=('POINT(5 23)',)))
boot(kwargs={'linode_id': node_id, 'config_id': config_id, 'check_running': False})
if cherrypy.request.config.get('tools.sessions.on', False): cherrypy.session.release_lock()
if layer_to_clamp is None: layer_to_clamp = OrderedDict()
existing_files = self._pkgfiles_fun('check_existing', pkg_name, pkg_files, formula_def)
df = DataFrame({'a': tm.rands_array(100, size=10)}, index=tm.rands_array(100, size=10))
data_not_concrete_base = models.ForeignObject( Relation, on_delete=models.CASCADE, from_fields=['base_non_concrete_id'], to_fields=['id'], related_name='fo_base_rel', )
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
ROLE = 'library_user' def __init__(self, *args, **kwargs): super(LibraryUserRole, self).__init__(self.ROLE, *args, **kwargs)
df = DataFrame(index=[0, 1], columns=[0]) df.ix[1, 0] = TO(1) df.ix[1, 0] = np.nan result = DataFrame(index=[0, 1], columns=[0])
response = self.client.ajax_post(LIBRARY_REST_URL, data) self.assertEqual(response.status_code, 400)
def test_patch_unsupported_media_type(self): response = self.client.patch( self.url, json.dumps({}), content_type=self.unsupported_media_type ) self.assertEqual(response.status_code, 415)
v = self._codes.view() v.flags.writeable = False return v
from __future__ import absolute_import
self._helper_csv(self.writer, na_rep=self.na_rep, float_format=self.float_format, cols=self.cols, header=self.header, index=self.index, index_label=self.index_label, date_format=self.date_format)
with warnings.catch_warnings(record=True): regressor_1 = Regressor() regressor_2 = Regressor() set_testing_parameters(regressor_1) set_testing_parameters(regressor_2) set_random_state(regressor_1) set_random_state(regressor_2)
assert len(state) == 2 assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
from __future__ import absolute_import
name = models.CharField(max_length=50)
from __future__ import absolute_import import logging
course_page.wait_for_page()
url(r'^api/user/', include('openedx.core.djangoapps.user_api.urls')),
self.meta = 'category' self.set_metadata(block.values.categories)
warm_low_reg_model = deepcopy(high_reg_model) warm_low_reg_model.set_params(warm_start=True, alpha=final_alpha) warm_low_reg_model.fit(X, y) assert_greater(low_reg_model.n_iter_, warm_low_reg_model.n_iter_)
f2 = lambda x: np.zeros((2, 2)) self.assertRaises(Exception, _group_agg, values, bounds, f2)
self.assertEqual(resp.status_code, 200)
tz = d.pop('tz', None)
self.assertEqual(self.func(None), [sessions.W015])
if self.cleaned_data.get("verification_deadline"): return self.cleaned_data.get("verification_deadline").replace(tzinfo=UTC)
if drop_first: n_components = n_components + 1
y_pred = base_estimator.predict(X)
foreign_fields = getattr(field, 'foreign_related_fields', ()) if len(foreign_fields) == 1 and not foreign_fields[0].primary_key: return self.values(foreign_fields[0].name)
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): df.sort(axis=1)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
self.mock_programs_api() self.mock_credentials_api(self.user, reset_url=False) actual = get_programs_credentials(self.user) expected = self.expected_credentials_display_data()
assert x.ndim == 4 x_axes = self.input_axes assert len(x_axes) == 4
return list(self._get_selected_child_blocks())
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(X, y)
values, values_mask, other, other_mask = self._try_coerce_args( transf(values), other)
reg = 1E-3 * evals.sum(1)
warnings.filterwarnings( 'ignore', 'With-statements now directly support multiple context managers', DeprecationWarning )
raise PyDslError( 'An error occurred while running highstate: {0}'.format( '; '.join(result) ) )
clone.real_models = self.real_models return clone
self.object_name = cls.__name__ self.model_name = self.object_name.lower() self.verbose_name = camel_case_to_spaces(self.object_name)
sh( "diff-cover {xml_report_str} --compare-branch={compare_branch} " "--html-report {diff_html_path}".format( xml_report_str=xml_report_str, compare_branch=compare_branch, diff_html_path=diff_html_path, ) )
return gapi.build('analytics', 'v3', http=http)
from __future__ import absolute_import
response = self.client.get('/auth_processor_no_attr_access/') self.assertContains(response, "Session not accessed")
ForestClassifier = FOREST_CLASSIFIERS[name]
if set(lgrp['members']) ^ set(members): change['members'] = members
self.source_expressions.append(Value(0))
labels = spectral_clustering(graph, n_clusters=4, eigen_solver='arpack') label_im = -np.ones(mask.shape) label_im[mask] = labels
tag = course_tag_api.get_course_tag(self.user, self.course_id, self.test_key) self.assertIsNone(tag)
continue
if count: failure_string = "Too many pep8 violations. " + violations_count_str failure_string += "\n\nViolations:\n{violations_list}".format(violations_list=violations_list) raise BuildFailure(failure_string)
df.loc(axis=0)[:, :, ['C1', 'C3']] = -10
ret['comment'] = ('File {0} is not present and is not set for ' 'creation').format(name) return ret
self.send_response(200, json.dumps(content), {"Content-Type": "application/json"})
new_labels = [np.delete(lab, loc) for lab in self.labels] return MultiIndex(levels=self.levels, labels=new_labels, names=self.names, verify_integrity=False)
bd = BinomialDeviance(2)
if ((ascending and labels.is_monotonic_increasing) or (not ascending and labels.is_monotonic_decreasing)): if inplace: return else: return self.copy()
salt '*' vsphere.get_service_policy my.esxi.host root bad-password 'ssh'
return None
y_true = (y_true == pos_label)
for entry in output: entry = [item for item in entry.split(" ") if item] entry = entry[0:3] + [" ".join(entry[3:])]
X = csc_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
if (lib.isscalar(other) or (isinstance(other, np.ndarray) and other.ndim < 1)): if isnull(other): return changeit()
self.assertContains( response, "<article class=\"course {}\">".format(self.MODE_CLASSES[status]) )
sorted_deps = serializers.sort_dependencies( [('fixtures_regress', [Book, Person, Store])] ) self.assertEqual( sorted_deps, [Store, Person, Book] )
from salt.states import redismod
pth = os.path.join(self.dirpath, basename + self.ext) return read_excel(pth, *args, **kwds)
return '__file__' in globals()
self.assertTrue(filecmp.cmp(path_test, path_out))
return self.q(css=ERROR_ITEM_NAME_SELECTOR).text
return ''
self._cleanup_index_file() super(StudioLibraryContainerTest, self).tearDown()
_network_error_classes = (IOError, httplib.HTTPException)
self.check_apps_ready() return any(ac.name == app_name for ac in self.app_configs.values())
([], 'honor'),
clf = DecisionTreeRegressor(max_depth=3, min_samples_split=2, criterion="mse", random_state=2) clf.fit(X, y)
c = 0.03 X_c = (X + c)[:, np.newaxis, :] Y_c = (Y + c)[np.newaxis, :, :]
if id_ not in minion_timeouts: minion_timeouts[id_] = time.time() + timeout
return self
provider_ids = self.request.GET.get('provider_ids', None)
from sklearn.tree._tree import TREE_LEAF k = 4
repr(df)
return compiled_parent._render(context)
syndic.tune_in_no_block() log.info('Syndic successfully connected to {0}'.format(opts['master'])) break
from __future__ import absolute_import
Pickler.save(self, _ConsistentSet(set_items))
log = logging.getLogger(__name__)
env['PATH_INFO'] = path.decode(ISO_8859_1) if six.PY3 else path
requires_explicit_null_ordering_when_grouping = False
text = f.widget.format_value(result) self.assertEqual(text, "01:30:05 PM 21/12/2010")
return self.model_class()._base_manager.using(self._state.db).filter(**kwargs)
return smart_text(obj)
self.disable_cohorting(self.course_fixture) self.refresh_thread_page(self.thread_id) self.assertEquals(self.thread_page.get_group_visibility_label(), "This post is visible to everyone.")
return course_metadata_utils.course_start_date_is_default( self.start, self.advertised_start, )
self.estimators_ = [] self.estimator_weights_ = np.zeros(self.n_estimators, dtype=np.float64) self.estimator_errors_ = np.ones(self.n_estimators, dtype=np.float64)
response = self.client.get(choose_track_url) self.assertRedirects(response, reverse('dashboard'))
from __future__ import unicode_literals
return bool(self.changed_data)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
raise AssertionError("Concatenating join units along axis0")
self.assertIn('sleep_service: started', ret) self.assertIn('sleep_service2: started', ret)
if new_weight == 1.: self.new_weight.set_value(.01)
super(SplitMongoModuleStore, self)._drop_database(database, collections, connections)
self.hashed_files = _MappingCache(default_cache)
return md5(key + md5(key).hexdigest()).hexdigest()[:AES.block_size]
raise NotImplementedError()
self.check_html(self.widget, 'myfile', None, html='<input type="file" name="myfile" />')
import salt.transport.client
choices = [(short, full) for (short, full) in raw_choices] + [('no_data', 'No Data')]
if (v > 2**63 - 1).any(): object_items.append((i, k, v)) continue
v0 = random_state.uniform(-1,1, A.shape[0]) w, _ = eigsh(A, k=k, sigma=0.0, v0=v0)
s = getattr(series, '_values', None) if isinstance(s, Index) and lib.isscalar(key): try: return s[key] except (IndexError, ValueError):
self.reindex_button.click()
alternate_course = self.create_course(course='mobile', mobile_available=True)
obj.clear_ordering(True)
if com.is_numeric_v_string_like(arr, x): mask |= False else: mask |= arr == x
assert_raises(ValueError, ir.fit, x, y)
import integration import salt.utils
inner_img = inner_img.reshape(len(output), -1) end_idx = start_idx + inner_img.shape[1] output[:, start_idx: end_idx] = inner_img
return u"{} : {}".format(self.course_id.to_deprecated_string(), self.annotation)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertQuerysetEqual(Choice.objects.filter(choice__exact=None), [])
import matplotlib.pyplot as plt
if is_string_dtype(left) or is_string_dtype(right):
cs = GEOSCoordSeq(capi.create_cs(length, ndim), z=hasz) for i, c in enumerate(items): cs[i] = c
assert_panel4d_equal(panel4d.ix[:, items, :, :], panel4d.reindex(items=items))
has_previous_line = self.start_line > 1 if has_previous_line: line_to_check = string_lines.line_number_to_line(self.start_line - 1) self._mark_disabled(line_to_check, scope_start_string=True) if self.is_disabled: return
salt myminion git.submodule /path/to/repo/sub/repo add opts='https://mydomain.tld/repo.git'
def is_browser_on_page(self): wait_for_ajax_or_reload(self.browser) return self.q(css='body.view-settings').visible
block_data.edit_info.source_version = None
return self.client_address[0]
return StaticContent.compute_location(location.course_key, filename)
self._create_courses_and_enrollments( (self.TEST_ORG, True), ("org_alias", True) )
for i, col in enumerate(arg1.columns): results[i] = f(arg1.iloc[:, i], arg2.iloc[:, i]) return dataframe_from_int_dict(results, arg1)
return 'f_table_name'
from __future__ import unicode_literals
assert_array_almost_equal(grad_interp[:n_features], grad[:n_features]) assert_almost_equal(grad_interp[-1] + alpha * w[-1], grad[-1])
if summary and not summary_data: summary.append(line) summary_data = _parse_fmdump("\n".join(summary))[0] continue
self.assertEquals(preview.latex_preview('2^3^4'), '2^{3^{4}}')
ret.setdefault('context', {}).update(extra)
CourseInstructorRole(dest_course_id).add_users( *CourseInstructorRole(source_course_id).users_with_role() ) CourseStaffRole(dest_course_id).add_users( *CourseStaffRole(source_course_id).users_with_role() )
rindex = list(self.ts.index) random.shuffle(rindex)
from __future__ import absolute_import
options.mode = 'dev' test_js(options)
world.wait_for_ajax_complete()
no_exc_record = copy(record) no_exc_record.exc_info = None no_exc_record.exc_text = None
class TO(object):
if self.savepoint and not connection.needs_rollback: sid = connection.savepoint() connection.savepoint_ids.append(sid) else: connection.savepoint_ids.append(None)
self.settings_detail.visit() self.settings_detail.require_entrance_exam(required=False) self.settings_detail.save_changes()
expected = np.array([1., 10.])
pass
d = Series([1] * 5) x = d.rolling(window=5).skew() tm.assert_series_equal(all_nan, x)
FormSet = inlineformset_factory(UUIDPKParent, ChildWithEditablePK, fields='__all__') formset = FormSet() self.assertIsNone(formset.forms[0].fields['parent'].initial)
import integration
return self.q(css=".wrapper-register-choose").is_present()
context['ask_for_fullname'] = eamap.external_name.strip() == ''
request_lowstate = [{ "client": "local", "tgt": "*", "fun": "test.fib", "arg": "10" }]
rects = [x for x in ax.get_children() if isinstance(x, Rectangle)] self.assertAlmostEqual(rects[-1].get_height(), 1.0) tm.close()
return zip(*arrays)
warnings.filterwarnings(
dtype = 'uint8' ntrain = 50000
try: func(*stats_args) result = smin.value, smax.value, smean.value, sstd.value except GDALException: result = (None, None, None, None)
from __future__ import print_function
import pyrax import pyrax.exceptions
continue
assert V is orig_V assert drop_mask is orig_drop_mask
ret = [] for data in running(): ret.append(signal_job(data['jid'], salt_SIGKILL)) return ret
self.survey.save_user_answers(self.student, self.student_answers, None) self.assertFalse(must_answer_survey(self.course, self.student))
return {'content': 'test1', 'data_field': 'test2'}
dts = self.ts.index.to_series() q = dts.quantile(.2) self.assertEqual(q, Timestamp('2000-01-10 19:12:00'))
curl -sSk https://localhost:8000/login \\ -c ~/cookies.txt \\ -H 'Accept: application/x-yaml' \\ -d username=saltdev \\ -d password=saltdev \\ -d eauth=auto
for student in students[:3]: self.assertIn( GeneratedCertificate.certificate_for_student(student, self.course.id).status, CertificateStatuses.PASSED_STATUSES )
source_suffix = '.txt'
for system in ['lms', 'cms']: sh(django_cmd(system, DEFAULT_SETTINGS, 'compilejsi18n'))
assert_array_almost_equal(my_X, X)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
from __future__ import absolute_import import os import re
keys, values_lists = zip(*sorted(sub_grid.items())[::-1]) sizes = [len(v_list) for v_list in values_lists] total = np.product(sizes)
format_dateaxis(ax, ax.freq) return lines
EmptyPromise( lambda: self.outline_page.is_browser_on_page(), "loaded page {!r}".format(self.outline_page), timeout=30 ).fulfill()
self.assertNotIn( 'start', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) ) self.assertNotIn( 'graded', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) )
self.load_data()
warnings.warn("iget_value(i) is deprecated. Please use .iloc[i] or " ".iat[i]", FutureWarning, stacklevel=2) return self._ixs(i)
#epub_use_index = True
return (issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype)
self.set_state_from_lcp()
html, __ = self._get_container_preview(root_usage_key)
e = MaybeEvent.objects.create() self.assertEqual(e.dt, None)
msg = "Input has different freq=A-DEC from PeriodIndex" with tm.assertRaisesRegexp(period.IncompatibleFrequency, msg): base <= Period('2011', freq='A')
new_default_fill = func(self.default_fill_value, other.default_fill_value)
if self.op in ['==', '!=']:
space, source = data_specs if not isinstance(source, tuple): source = (source,)
if self._course_key is None: self._course_key = SlashSeparatedCourseKey.from_deprecated_string(self._results_fields["course"]) return self._course_key
university = microsite.get_value('university')
return u"//{}/{}/{}".format(settings.CMS_BASE, page, block.location)
se = SpectralEmbedding(n_components=1, affinity="precomputed", random_state=np.random.RandomState(seed), eigen_solver="<unknown>") assert_raises(ValueError, se.fit, S)
@property def wkt(self): "Returns the WKT representation of this Spatial Reference." return capi.to_wkt(self.ptr, byref(c_char_p()))
value = deepcopy(opts[name])
try: from salt._compat import ElementTree as ET HAS_ELEMENT_TREE = True except ImportError: HAS_ELEMENT_TREE = False
if isinstance(self.opts['peer_run'][match], list): perms.update(self.opts['peer_run'][match])
str_args = 'electrolytes --aqueous --anion hydroxide --cation=ammonium free radicals -- hydrogen' _validate_ret(parallels._normalize_args(str_args))
try: return CreditProvider.objects.get(active=True, provider_id=provider_id) except cls.DoesNotExist: return None
tps = np.r_[0, tps] fps = np.r_[0, fps] thresholds = np.r_[thresholds[0] + 1, thresholds]
ret = { 'name': name, 'changes': {}, 'result': False, 'comment': '', }
return self.q(css='.program-card').present
return self.group
os.rmdir(path)
from salt.modules import devmap import os.path
if a < b: return x >= a and x <= b else: return x <= a and x >= b
diff_threshold = int(getattr(options, 'percentage', -1)) percentage_string = u'' if diff_threshold > -1: percentage_string = u'--fail-under={0}'.format(diff_threshold)
FEATURES['ENABLE_EXPORT_GIT'] = True GIT_REPO_EXPORT_DIR = TEST_ROOT / "export_course_repos"
self.assertIsNone(check_password({}, 'unknown', ''))
if fastpath:
import logging
from StringIO import StringIO
coupon = Coupon(code=code, description='testing code', course_id=course_key, percentage_discount=self.percentage_discount, created_by=self.user, is_active=is_active) coupon.save()
result = sparse.loc[sparse % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
url_path = "course_info" def is_browser_on_page(self): return self.q(css='body.view-updates').present
else: self.log_error( "Multiple response patterns matched '{0}'".format(xqueue_body_json), ) return
import os
if which_set == 'test': content = content[1:] content = content[:-1]
if verbose: print(msg + " Stopping.") return True
for prop in 'acpi', 'cores', 'cpu', 'pool', 'storage', 'sata0', 'ostype', 'ide2', 'net0':
Publisher = apps.get_model('migrations', 'Publisher') Publisher.objects.create(name='Test Publisher') raise RuntimeError('Abort migration')
self.assertFalse(self._search_for_content(self.SEARCH_STRING))
return list(value)
os.kill(pid, signum)
composite_space = CompositeSpace(spaces) sources = tuple(sources) return (composite_space, sources)
self.send_response(200) self.send_header('Content-type', 'application/json') self.end_headers() self.wfile.write(response)
ts = Series(np.random.randn(10)) ts[2:-2] = nan sts = ts.to_sparse()
return xml_import_data.policy.get(policy_key(usage_id), {})
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
for key in self.colors: self.colors[key] = ''
if repo['uri'] not in repos: repos[repo['uri']] = [repo]
with transaction.atomic(using=using, savepoint=False): for i, j in enumerate(id_list): ordered_obj.objects.filter(pk=j, **filter_args).update(_order=i)
usage_key = self._map_revision_to_branch(usage_key, revision=revision) return super(DraftVersioningModuleStore, self).has_item(usage_key)
data = 'a,b,c\n4,5,6\n"\\' self.assertRaises(Exception, self.read_csv, StringIO(data), escapechar='\\')
take_2d_axis1_%(name)s_%(dest)s_memview(values, indexer, out, fill_value=fill_value) return
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'profitbricks', vm_['profile']) is False: return False
if len(idx) == 0: continue else: with tm.assertRaises(Exception): func(idx)
#latex_appendices = []
result = getattr(self.asi8, op)(other.asi8)
take_split_path = self.obj._is_mixed_type
selected.add(arg)
self._wait_for( lambda: self.state == state, 'State is {state}'.format(state=state) )
data = fetch_species_distributions() species_names = ['Bradypus Variegatus', 'Microryzomys Minutus']
course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE
cohort = CohortFactory(course_id=self.course.id, users=[]) self._verify_non_staff_cannot_access( add_users_to_cohort, "POST", [unicode(self.course.id), cohort.id] )
pass
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
return json.dumps({'type': self.__class__.__name__, 'coordinates': self.coords})
course = def_ms.get_course(SlashSeparatedCourseKey('MITx', 'edx4edx', 'edx4edx'))
try: os.symlink(svc_realpath, _service_path(name))
self.selector = prefix + ' .certificates-list-item-{}'.format(index) self.index = index super(CertificateSectionPage, self).__init__(container.browser, **container.course_info)
self.assertRaises(TypeError, self.read_csv, path, dtype={'A': 'timedelta64', 'B': 'float64'}, index_col=0)
course_image = u'在淡水測試.jpg' self.course = CourseFactory.create(course_image=course_image)
faces, target, target_names = load_func( data_folder_path, resize=resize, min_faces_per_person=min_faces_per_person, color=color, slice_=slice_)
self.assertEqual(response.status_code, 204)
continue
self.register_flag_response("comment", comment_id)
from salt.states import modjk_worker
self._update_inplace(result.reindex_like(self, copy=False)._data, verify_is_copy=False)
class MyRelModel2(models.Model): objects = MyManager()
MSE[MSE < 0.] = 0.
self.transformer_data = defaultdict(dict)
self.config.pop('log_datefmt_console', None)
grains['virtual'] = 'kvm'
return BASE_URL + "/u/" + self.username
return xblock._edit_info.get('edited_by')
if isinstance(names, compat.string_types) and nlevels == 1: names = [names]
frame.to_string()
except (TypeError, ValueError): exists = False
return self.apply(lambda x: x.ffill(limit=limit))
with tm.assert_produces_warning(FutureWarning): self.assertTrue(self.ts.is_time_series) self.assertTrue(self.ts.index.is_all_dates)
added = self.mixed_float + self.mixed_float2 _check_mixed_float(added, dtype=dict(C=None)) added = self.mixed_float2 + self.mixed_float _check_mixed_float(added, dtype=dict(C=None))
_mixin_prio_ = 0
result = Timestamp(result) self.assertEqual(result.value, expected_tz) self.assertEqual(tslib.pydt_to_i8(result), expected_tz)
get_version = { 'Linux': linux_netstats, 'FreeBSD': freebsd_netstats, }
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
'ENABLE_DISCUSSION_SERVICE': True, 'ENABLE_TEXTBOOK': True,
d = dict([(key, value.beta) for (key, value) in compat.iteritems(self.ols_results)]) return DataFrame(d)
translations_selector = '.metadata-video-translations .remove-setting' return self.q(css=translations_selector).attrs('data-lang')
child_blocks = self.q(css=self._bounded_selector("div[data-id]")) return frozenset(child.text for child in child_blocks)
if val == val and val != %(nan_val)s: nobs[lab, j] += 1 if val > maxx[lab, j]: maxx[lab, j] = val
try: from libcloud.compute.base import NodeState import libcloud.security libcloud.security.CA_CERTS_PATH.append('/etc/ssl/certs/YaST-CA.pem') HAS_LIBCLOUD = True except ImportError: HAS_LIBCLOUD = False
'e3b0b940318df9c14be59acb08e78af5', self._get_anonymous_id(SlashSeparatedCourseKey('MITx', '6.00x', '2012_Fall'), descriptor_class)
import logging import subprocess
import salt.ext.six as six
rexp1 = re.compile('(?m)^ [*|-] ' r'([^ ].*)[\r\n].*restart*')
if 'defaults' in opts and __grains__['os'] in ['MacOS', 'Darwin']: opts = None
iterator = kwds.get('iterator', False) chunksize = kwds.get('chunksize', None) nrows = _validate_nrows(kwds.pop('nrows', None))
query = "SELECT * FROM raw_query_author ORDER BY id ASC" third_author = Author.objects.raw(query)[2] self.assertEqual(third_author.first_name, 'Bob')
if sizeof(c_ulong) != sizeof(c_void_p): ULONG_PTR = c_int64 else: ULONG_PTR = c_ulong PVOID = c_void_p
ir = IsotonicRegression() copy.copy(ir)
fl = mlp_composite.layers[0]
hastie_X, hastie_y = datasets.make_hastie_10_2(n_samples=20, random_state=1) hastie_X = hastie_X.astype(np.float32)
values = com._asarray_tuplesafe(values) f = lambda htype, caster: _unique_generic(values, htype, caster) return _hashtable_algo(f, values.dtype)
from salt.modules import smtp
arrays, arr_columns = _reorder_arrays(new_arrays, arr_columns, columns) if columns is None: columns = arr_columns
self.assertTrue(hasattr(course_overview_after, 'image_set')) image_set = course_overview_after.image_set self.assertEqual(image_set.small_url, broken_small_url) self.assertEqual(image_set.large_url, broken_large_url)
result = arg(self)
return _vote_or_unvote(request, course_id, cc.Comment.find(comment_id), undo_vote=True)
payload = { "course_id": unicode(course_id or self.course.id) } if marketing_email_opt_in: payload["email_opt_in"] = True return self.client.post(self.url, payload)
assert_array_almost_equal( X_dense.astype(dtype), X2_dense, 4) assert_array_almost_equal( y_dense.astype(dtype), y2, 4)
result += bandheader + band_data_hex
add_component(self.lib_page, "html", "Text") self.assertEqual(len(self.lib_page.xblocks), 1) first_block_id = self.lib_page.xblocks[0].locator
__context__['systemd.journald'].seek_tail() __context__['systemd.journald'].get_previous() return __context__['systemd.journald']
if not is_prerequisite_courses_enabled(): return None from milestones import api as milestones_api milestones_api.remove_course_milestone( course_key, milestone, )
dow = dt.weekday() if dow == 5 or dow == 6: return dt + timedelta(2) elif dow == 0: return dt + timedelta(1) return dt
url(r'get_coupon_codes', 'instructor.views.api.get_coupon_codes', name="get_coupon_codes"),
with assertRaisesRegexp(CParserError, 'Passed header=\[0,1,2\] are too many ' 'rows for this multi_index of columns'): read_csv(path, tupleize_cols=False, header=lrange(3), index_col=0)
for param in self.params: value = param.get_value(borrow=True) if not isfinite(value): raise RuntimeError("NaN in " + param.name)
with self.assertRaises(ValueError): self.serialize_round_trip(TestModel1.thing)
s = Series([(1, 1), (1, 2)])
result = func( Series([1.]), Series([1.]), 50, min_periods=min_periods) tm.assert_series_equal(result, Series([np.NaN]))
else: ZMQIOLoop.current().add_timeout(time.time() + 0.5, self._stop)
self.assertAlmostEqual(c1[0] + xfac, c2[0], 5) self.assertAlmostEqual(c1[1] + yfac, c2[1], 5)
return { f.attname for f in self._meta.concrete_fields if f.attname not in self.__dict__ }
scaler_batch = MinMaxScaler().fit(X)
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True, False], credit_type='halves' )
n_population = 10
df = orig.copy() df.iloc[2, 0] = "b" tm.assert_frame_equal(df, exp_single_cats_value)
df[df[:-1] < 0] = 2 np.putmask(values[:-1], values[:-1] < 0, 2) assert_almost_equal(df.values, values)
expected = mock_mean(x) assert_equal(mean_x, expected.astype('float64'))
ret = 'present' if entry.match(line): lines.append(line) else: ret = 'change' lines.append(str(entry))
from salt.modules import pw_user from salt.exceptions import CommandExecutionError try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False
from django.template.utils import get_app_template_dirs from .filesystem import Loader as FilesystemLoader class Loader(FilesystemLoader): def get_dirs(self): return get_app_template_dirs('templates')
if self.template_name is None: raise ImproperlyConfigured( "TemplateResponseMixin requires either a definition of " "'template_name' or an implementation of 'get_template_names()'") else: return [self.template_name]
for col, typ in zip(data, self.typlist): if type(typ) is int: data[col] = data[col].apply( self._null_terminate, convert_dtype=True)
if fastpath: self.axes = [axis] if isinstance(block, list):
from salt.states import cloud import salt.utils.cloud
handouts_location = self.course.id.make_usage_key('course_info', 'handouts') course_handouts_url = reverse_usage_url('xblock_handler', handouts_location)
pass
if fit_intercept: ret[:n_features] += s[-1] * dd_intercept ret[-1] = dd_intercept.dot(s[:n_features]) ret[-1] += d.sum() * s[-1] return ret
from __future__ import unicode_literals
syslog.closelog()
if sys.version_info[0] == 3: MAX_SIZE = sys.maxsize string_types = (str,) else: MAX_SIZE = sys.maxint string_types = (basestring,) from itertools import imap as map
if pkg: pkg = _cmd_quote(pkg)
values = (c_double * 6)(*values) capi.set_ds_geotransform(self._ptr, byref(values)) self._flush()
help_texts = password_validators_help_texts(password_validators) help_items = [format_html('<li>{}</li>', help_text) for help_text in help_texts] return '<ul>%s</ul>' % ''.join(help_items) if help_items else ''
self.assertEqual(groups_for_user({}, 'unknown'), [])
call_command('seed_permissions_roles', unicode(cls.course_id))
self.client.defaults['SERVER_NAME'] = 'example.none' self.url_prefix = 'http://example.none'
try: self.assertIn(self.INSTANCE_NAME, delete_str) self.assertIn('True', delete_str) except AssertionError: raise
html_response.debug = {'url': url, 'section': section, 'block_urlname': block_urlname} return html_response
targeted_pkgs = list(targets.keys()) if pkgs else None
STOP_TIMEOUT = 10
config = microsite.values return config.get(val_name, default)
opts = LocalAuthorWithM2M._meta opts.local_many_to_many.remove(new_field) del new_apps.all_models['schema'][new_field.remote_field.through._meta.model_name] opts._expire_cache()
pass
self.event.fire_event(data, tagify('present', 'presence'), timeout=3) old_present.clear() old_present.update(present)
problem_location = re.sub(r'[:/]', '_', problem_location) csv_name = 'student_state_from_{}'.format(problem_location) upload_csv_to_report_store(rows, csv_name, course_id, start_date)
return aside_id.usage_key
pass
if _is_convertible_to_index(other): try: other = TimedeltaIndex(other) except (TypeError, ValueError): pass return Index.join(self, other, how=how, level=level, return_indexers=return_indexers)
X, y = make_classification(n_samples=20, n_features=10, shuffle=False, random_state=0)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salt.exceptions import CommandExecutionError
course = def_ms.courses.get(course_path, None)
matches = [] for match in results: name = match['name'] if name not in matches: matches.append(name)
return len([1 for count in self.alias_refcount.values() if count])
i = 200 while i > 0: module = CapaFactory.create(rerandomize=rerandomize) assert 0 <= module.seed < 1000 i -= 1
assert not any([key in rval for key in contrib]) assert all([key in params for key in contrib])
return {}
new_art = Article.objects.get(id=art_id_3) self.assertQuerysetEqual(new_art.categories.all(), [])
child_classes = set(child.get_icon_class() for child in self.get_children()) new_class = 'other' for higher_class in CLASS_PRIORITY: if higher_class in child_classes: new_class = higher_class return new_class
return files, symlinks
return self.test_passed('.local-resource-test')
ip_str = _explode_shorthand_ip_string(ip_str)
if isinstance(key[0], slice): return self._get_values(key) raise
script_name = get_script_name({'SCRIPT_URL': '/foobar/'}) self.assertEqual(script_name, '/foobar/')
return self.kernel.is_stationary()
dtype_max = dtype if is_integer_dtype(dtype) or is_bool_dtype(dtype): dtype_max = np.int64 elif is_float_dtype(dtype): dtype_max = np.float64
u2 = User.objects.create_user('testuser2', 'test2@example.com') self.assertFalse(u2.has_usable_password())
rendered = pieces["short"]
return get_url("PRIVACY")
import salt.ext.six as six
return dict([(x, i) for i, x in enumerate(arr)])
pass
return bool(self[perm_name])
skip_if_no_sklearn() mapping = {'dataset_iterator': 'DatasetValidationKFold'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
return nanops.nanargmin(self.values)
import salt.utils
student = User.objects.prefetch_related("groups").get(id=student.id)
to_rep_dict = {} value_dict = {}
return self._certificate_data
writer(expected, path)
statobj = inputtypes.Status('test') self.assertEqual(str(statobj), 'test') self.assertEqual(unicode(statobj), u'test')
return
left = self.rng[:5] right = self.rng[10:]
if len(update_fields) == 0: return
assert_array_equal(clf.predict([[0.2, -1.0]]), np.array([-1]))
from __future__ import absolute_import import copy
self.assertTrue(f.has_changed('', {'filename': 'resume.txt', 'content': 'My resume'}))
return self.list_display
return [ p for p in self.user_partitions if p.scheme == scheme ]
mongo_course = self.store.get_course(self.course_locations[self.MONGO_COURSEID].course_key) self.assertEqual(len(mongo_course.children), 1)
self.white_label_course_mode.min_price = 0 self.white_label_course_mode.suggested_prices = ''
frame = self.frame.copy()
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
pass
LogoutPage(self.browser).visit()
import os import sys import time import traceback import random
with check_mongo_calls(1): cached_structure = self._get_structure(self.new_course)
self._check_linkedin_visibility(True)
if self.whiten: W = W / tensor.sqrt(self.v[:self.component_cutoff])
__virtualname__ = 'sentry'
self.notes_page.wait_for_ajax()
delete_user_preference(request.user, DARK_LANGUAGE_KEY) user_pref = get_user_preference(request.user, LANGUAGE_KEY) if user_pref: request.session[LANGUAGE_SESSION_KEY] = user_pref
raids = __salt__['raid.list']() if raids.get(name): ret['comment'] = 'Raid {0} already present'.format(name) return ret
name = name[2:-2]
message = message.strip()
self.problem_section = ItemFactory.create(parent_location=chapter.location, category='sequential', metadata={'graded': True, 'format': 'Homework'}, display_name=TEST_SECTION_NAME)
default=None
'ext_job_cache': str,
import nose
import matplotlib.pyplot as plt import matplotlib.gridspec as gridspec
if not is_list_like(new) and isnull(new) and not self.is_object: new = self.fill_value
class User(models.Model): name = models.CharField(max_length=30) friends = models.ManyToManyField(auth.User)
handler.release() return instance
if name in list_tasks(location):
import logging from sys import stdout from os import makedirs from os.path import dirname, isdir from errno import EEXIST
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True], credit_type='halves' )
course_org_filter = microsite.get_value('course_org_filter') if course_org_filter: field_dictionary['org'] = course_org_filter
self.assertEqual(resp_obj.status_code, http_code) self.assertIn('error_code', resp_obj.data) self.assertEqual(resp_obj.data['error_code'], error_code_str)
if ltype: cmd = '{0} -t {1}'.format(cmd, ltype)
pgettext = real_pgettext
if not __execute_cmd('config -g cfgUserAdmin -o ' 'cfgUserAdminUserName -i {0} {1}' .format(uid, username), host=host, admin_username=admin_username, admin_password=admin_password): delete_user(username, uid) return False
assert_equal(X.format, X_checked.format)
__func_alias__ = {'list_': 'list'}
LETTUCE_SERVER_PORT = 8003 XQUEUE_PORT = 8040 YOUTUBE_PORT = 8031 LTI_PORT = 8765 VIDEO_SOURCE_PORT = 8777
response = self.process_response( secure=True, headers={"strict-transport-security": "max-age=7200"}) self.assertEqual(response["strict-transport-security"], "max-age=7200")
try: fileserver.init() except FileserverConfigError as exc: critical_errors.append('{0}'.format(exc))
mean_tpr = np.zeros_like(all_fpr) for i in range(n_classes): mean_tpr += interp(all_fpr, fpr[i], tpr[i])
with mock_create_basket(exception=exceptions.Timeout): response = self._post_to_view() self.assertValidEcommerceInternalRequestErrorResponse(response) self.assertUserNotEnrolled()
log.info("Send-email task %s for email %s: succeeded", current_task_id, email_id) update_subtask_status(entry_id, current_task_id, new_subtask_status)
test_invalid_token("AAAAAAAAAAAAAAAAAAAAANRGw8HDEmlcLVFawgY9wI8=", "padding")
return [list_like]
exc_type, exc_value, tb = sys.exc_info()
action_name = ugettext_noop('generated') task_fn = partial(upload_course_survey_report, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
self.problem_page.q( css='div.problem input.ctinput[type="text"]' ).nth(input_num).fill(value)
arr = a.astype('S').astype(object) self.assertTrue(lib.max_len_string_array(arr), 3)
return dec
try: return self.env.resolve(self.name, is_local=False) except UndefinedVariableError: return self.name
sh('xmodule_assets common/static/xmodule') print("\t\tFinished processing xmodule assets.")
self.advanced_settings.visit() self.assertTrue(self.advanced_settings.is_browser_on_page())
obj = self.lazy_wrap(42) six.assertRegex(self, repr(obj), '^<SimpleLazyObject:')
ChoiceFormset = formset_factory(Choice, extra=3) formset = ChoiceFormset()
read_only_fields = set(update.keys()).intersection( AccountUserSerializer.get_read_only_fields() + AccountLegacyProfileSerializer.get_read_only_fields() )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
n, p = 10, 5 rng = np.random.RandomState(0)
storage.staticfiles_storage.hashed_files.clear()
shared = str(shared).lower()
processors = (template.engine.template_context_processors + self._processors) updates = {} for processor in processors: updates.update(processor(self.request)) self.dicts[self._processors_index] = updates
truncate_h = self.truncate_h truncate_v = self.truncate_v
from_text = False from_wkb = False
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: mock_grade.side_effect = exception_class(u"ȧƈƈḗƞŧḗḓ ŧḗẋŧ ƒǿř ŧḗşŧīƞɠ")
restrict_formatting = any([l.is_floating for l in columns.levels]) need_leadsp = dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))
self.assertEqual( get_list_or_404(a1.article_set, title__icontains="Run"), [article] )
opts = m._meta if opts.proxy and m in related_fields_models: related_models.append(opts.concrete_model) return related_models
df['foo2'] = np.ones((4, 2)).tolist()
filter_out_source_path_option(kwargs)
import logging
class ArrayLike(object):
' 1.0M'
state_run = self.run_function('state.sls', mods='requisites.listen_in_simple')
rectangle_str = "(10,10)-(20,20);(100,100)-(200,200)"
if ret is None: lines.append(str(entry)) ret = 'new'
if not (isinstance(from_space, VectorSpace) and from_space.sparse): kwargs['batch_size'] = batch_size
self.import_children(source_courselike, courselike, courselike_key, dest_id)
if self.cancelled: raise CancelledError("Semaphore cancelled")
pipeline.items.append(preprocessing.ZCA())
df_float.ix[30:50, 1:3] = np.nan
bseries2 = SparseSeries(self.bseries.to_dense()) tm.assert_numpy_array_equal(self.bseries.sp_values, bseries2.sp_values)
conv_first_part = ConvElemwise(8, [2, 2], 'sf1', SigmoidConvNonlinearity(), .1) mlp_first_part = MLP(layers=[conv_first_part], input_space=Conv2DSpace(shape=[5, 5], num_channels=2))
pass
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, max_attempts=0, done=True, correct=True) self.assertTrue(module.should_show_reset_button())
A = np.abs(random_state.randn(30, 10)) NMF(n_components=15, random_state=0, tol=1e-2).fit(A)
arr = np.random.randn(N, N) lar = la.larry(arr) dma = pandas.DataFrame(arr, lrange(N), lrange(N))
self.assertEqual(len(long_name), 48) self.assertTrue(linode._validate_name(long_name))
__Location__ = 'do-not-get-from-metadata' return None
publications = models.ManyToManyField(Publication, name='publications') tags = models.ManyToManyField(Tag, related_name='tags')
pass
'ALLOW_HIDING_DISCUSSION_TAB': False,
self.courseware_page.visit() self.courseware_page.wait_for_page() self.assertTrue(element_has_text( page=self.courseware_page, css_selector=entrance_exam_link_selector, text='Entrance Exam' ))
return service
original_item = self.get_item_from_modulestore(source_usage_key) duplicated_item = self.get_item_from_modulestore(duplicate_usage_key)
with self.assertRaises(Exception): self.build_problem(math_display=True, expect="2*x+3*y", num_inputs=3)
for a in self.axes: if column == a.name:
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
sliced = idx.slice_locs(np.nan) self.assertTrue(isinstance(sliced, tuple)) self.assertEqual(sliced, (0, 3))
from __future__ import absolute_import from ctypes import CDLL, POINTER, Structure, CFUNCTYPE, cast, pointer, sizeof from ctypes import c_void_p, c_uint, c_char_p, c_char, c_int from ctypes.util import find_library
test_data = state_run['cmd_|-test_changes_expected_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
rv = set(dir(type(self))) rv = (rv - self._dir_deletions()) | self._dir_additions() return sorted(rv)
self.params_on_monitor = np.asarray(model.get_param_values())
from __future__ import absolute_import import logging
self.assertTrue( self.run_function( 'runtests_decorators.booldependsTrue' ) )
user = UserFactory.create(username="rusty", password="test") self.client.login(username="rusty", password="test")
wp = Panel.from_dict(d, intersect=True) self.assert_index_equal(wp.major_axis, itemb.index[5:])
result = df.assign(A=df.A + df.B) expected = df.copy() expected['A'] = [5, 7, 9] assert_frame_equal(result, expected)
required_boto3_version = '1.2.1'
from __future__ import absolute_import from collections import Callable
levels = self.index.levels new_levels = [[lev + 'a' for lev in level] for level in levels]
if layer_to_clamp is None: layer_to_clamp = OrderedDict()
orig_index = new_index = self[indexer] levels = [self._get_level_number(i) for i in levels] for i in sorted(levels, reverse=True): try: new_index = new_index.droplevel(i) except:
comps[1] = '.'.join(comps[1:len(comps)])
#pylint: disable=E0602
if name in self.opts['schedule']: del self.opts['schedule'][name] schedule = self.opts['schedule']
self.assertTrue( self.run_function( 'git.clone', [clone_parent_dir, self.repo], name=clone_name ) ) shutil.rmtree(clone_parent_dir)
user_country_from_profile = _get_user_country_from_profile(user)
return len(self.q(css='section.updates section article').results)
for student in students[:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
if (isinstance(ax, MultiIndex) and not (is_integer(i) or is_null_slice(i))): take_split_path = True break
return arrow
raise NotImplementedError('subclasses of SessionBase must provide a save() method')
from django.contrib.contenttypes.models import ContentType return ContentType.objects.get_for_model(obj, for_concrete_model=False)
self.assertEqual( response.status_code, status_code, msg_prefix + "Response didn't redirect as expected: Response code was %d (expected %d)" % (response.status_code, status_code) )
from salt.modules import svn
h = .02
raw_path = script.get('system_path', '').split(":") + DEFAULT_PATH
import salt.utils from salt.ext import six
_delete_item(usage_key, request.user)
return self.id
required_boto_version = '2.8.0' required_moto_version = '0.3.7'
import salt.utils import salt.modules.cmdmod import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
from __future__ import absolute_import import os import logging import fnmatch
msg = 'Error inserting to MongoDB event tracker backend' log.exception(msg)
set_crontab(
ret_cfg = cfg('{0}.{1}'.format(ret_config, virtualname), {})
self.assertRaises(TypeError, lambda: s.iloc[3.0])
dive.save() self.assertEqual(dive._state.db, 'default')
_unsupported_nodes = ((_stmt_nodes | _mod_nodes | _handler_nodes | _arguments_nodes | _keyword_nodes | _alias_nodes | _expr_context_nodes | _unsupported_expr_nodes) - _hacked_nodes)
y = (self.y_mean + self.y_std * y_).reshape(n_eval, n_targets)
self.assertRaises(ValueError, lambda: to_timedelta([1, 2], unit='foo')) self.assertRaises(ValueError, lambda: to_timedelta(1, unit='foo'))
self.selenium.find_element_by_link_text('Add another Profile').click()
model = models.IntegerField()
self.assertRaises(ValueError, lambda: DatetimeIndex( i.tz_localize(None).asi8, dtype=i.dtype, tz='US/Pacific'))
for test_index in self._iter_test_indices(): test_mask = self._empty_mask() test_mask[test_index] = True yield test_mask
'MODE_CREATION_FOR_TESTING': False,
from __future__ import absolute_import
f = forms.FileField(required=False) self.assertEqual(f.clean(False), False) self.assertEqual(f.clean(False, 'initial'), False)
keystone.auth_key: 203802934809284k2j34lkj2l3kj43k
df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'b']})
addr = {'address': val.rstrip('(Preferred)'), 'prefixlen': None} iface['inet6'].append(addr)
filterwarnings('ignore', message='No request passed to the backend, unable to rate-limit')
root, k = _get_root(key) return root[k]
response = self.client.get('/lastmod-sitemaps/ascending.xml') self.assertEqual(response['Last-Modified'], 'Sat, 20 Apr 2013 05:00:00 GMT')
zero_weights = [0] * 10 with tm.assertRaises(ValueError): o.sample(n=3, weights=zero_weights)
DATE_INPUT_FORMATS = [
self.client.login(username="inactive", password=self.PASSWORD)
IPFilter.objects.create( blacklist=", ".join(blacklist), whitelist=", ".join(whitelist), enabled=is_enabled )
return to_timedelta(self.asi8 - self.to_period(freq) .to_timestamp().asi8)
name, path, args, kwargs = self.deconstruct() return self.__class__(*args, **kwargs)
data[match.group(1)] = re.sub(r'\\([$"\'\\`])', r'\1', match.group(2))
name = models.CharField(max_length=255) bool = models.BooleanField(default=True)
pls_2 = pls_.PLSRegression(n_components=X.shape[1]) pls_2.fit(X, Y)
for dtype in ['int32', 'int64']: v = np.arange(5000000, dtype=dtype) s = Series(v)
from __future__ import unicode_literals
user = User(username="rusty", email="rusty@fake.edx.org") course_id = SlashSeparatedCourseKey("edX", "Test101", "2013")
content_type_abstract = models.ForeignKey(ContentType, models.CASCADE, related_name='+') object_id_abstract = models.PositiveIntegerField() content_object_abstract = GenericForeignKey('content_type_abstract', 'object_id_abstract')
'state_top': str,
cdn_url = getattr(settings, 'VIDEO_CDN_URL', {}).get(self.system.user_location)
__opts__['test'] = orig_test return ret
result = Fragment() if 'activate_block_id' in context: result.add_content(u"Activate Block ID: {block_id}</p>".format(block_id=context['activate_block_id'])) return result
Ensure myelb ELB exists: boto_elb.present: - name: myelb - region: us-east-1 - profile: myelbprofile
y_true, pred, probas_pred = make_prediction(binary=True)
return self._get_head(xblock, ModuleStoreEnum.BranchName.published) is not None
NO_BOTO_MODULE = True BOTO_NOT_CONFIGURED = True try: import boto NO_BOTO_MODULE = False try: boto.connect_iam() BOTO_NOT_CONFIGURED = False except boto.exception.NoAuthHandlerFound: pass except ImportError: pass
for whitelist_country in whitelist: CountryAccessRule.objects.create( rule_type=CountryAccessRule.WHITELIST_RULE, restricted_course=self.restricted_course, country=Country.objects.get(country=whitelist_country) )
self.certificates_section.wait_for_certificate_invalidations_section()
with self.assertRaises(IntegrityError), transaction.atomic(): Child.objects.create(name='xyzzy', parent=None)
dirty = git_describe.endswith("-dirty") pieces["dirty"] = dirty if dirty: git_describe = git_describe[:git_describe.rindex("-dirty")]
for idx in ['lxc.cgroup.memory.limit_in_bytes']: if not default_data.get(idx): self._filter_data(idx)
attempts = random.randint(1, 10) module = CapaFactory.create(attempts=attempts, max_attempts=attempts, force_save_button="true", done=True) self.assertFalse(module.should_show_save_button())
properties = properties.split(',')
if take_fast_path: if _possibly_castable(arr) and not copy and dtype is None: return arr
def frombuffer_empty(buf, dtype): if len(buf) == 0: return np.empty(0, dtype=dtype) else: return np.frombuffer(buf, dtype=dtype)
'pillar_cache_ttl': int,
response = self.client.post( self.url, data='Test Invalid data', content_type='application/json', REQUEST_METHOD='DELETE' ) self.assertEqual(response.status_code, 400)
from __future__ import absolute_import import logging import time
if deploy_d_from_conf_file not in deploy_scripts_search_paths: deploy_scripts_search_paths.append( (deploy_d_from_conf_file, True) ) if deploy_d_from_syspaths not in deploy_scripts_search_paths: deploy_scripts_search_paths.append( (deploy_d_from_syspaths, True) )
'pillar_cache': bool,
cStyleComment = Regex(r"/\*(?:[^*]*\*+)+?/").setName("C style comment")
if not len(set([idx.nlevels for idx in indexes])) == 1: raise AssertionError("Cannot concat indices that do" " not have the same number of levels")
f = ftype.get('f') if f is not None:
self.assertEqual(context['currency_symbol'], 'Rs') self.assertEqual(context['currency'], 'PKR')
MESSAGE = _('The underlying module store does not support import.')
return (p.name != 'self' and p.kind != p.VAR_KEYWORD and p.kind != p.VAR_POSITIONAL)
bulk_ops_record.unnest()
FieldInfo = namedtuple('FieldInfo', 'name type_code display_size internal_size precision scale null_ok')
q = Series(self.ts, dtype=object).quantile(0.9) self.assertEqual(q, percentile(self.ts.valid(), 90))
continue
import salt.log.setup
scaled = scaler.fit_transform(iris.data) separate_pred = km.fit_predict(scaled)
field_data_cache = FieldDataCache.cache_for_descriptor_descendents(course_id, student, module_descriptor) student_data = KvsFieldData(DjangoKeyValueStore(field_data_cache))
if formatted_record[-1:] != '\n': formatted_record += '\n'
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
simplefilter('ignore')
fallback_dtype = theano.config.floatX
template_name_suffix = '_detail'
self.user = User.objects.get(pk=self.user.pk)
_skip_if_no_xlrd()
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
if self.weight == 0: return None
from __future__ import unicode_literals
if lines and not lines[-1].endswith(os.linesep): lines[-1] += os.linesep line = line_to_add lines.append(line)
extra_block = self.make_block("html", vertical_block_course)
else: return OuterAtomic(using, savepoint, read_committed)
self.assertEqual(df.resample('D').asfreq().index.freq, 'D')
from optparse import make_option from django.core.management.base import BaseCommand, CommandError from .prompt import query_yes_no
global _SQLALCHEMY_INSTALLED if isinstance(con, string_types): try: import sqlalchemy con = sqlalchemy.create_engine(con) return con except ImportError: _SQLALCHEMY_INSTALLED = False return con
topleft = N.array([kshp[0]-1,kshp[1]-1])
self._build_f(X, y) return self
from salt.utils.context import ContextDict, NamespacedDictWrapper
student_answers = self.lcp.student_answers answer_ids = student_answers.keys()
root, k = _get_root(key) root[k] = v
if isinstance(z, six.integer_types + (float,)): coords = [x, y, z] else: coords = [x, y]
pass
self.database.connection.close()
pass
return self.count
ms = MeanShift(bandwidth=1.2) labels = ms.fit_predict(X) labels2 = ms.predict(X) assert_array_equal(labels, labels2)
self.assertEqual(str(qs.query), str(qs.all().query))
c_mapping = DataSpecsMapping(channel.data_specs) channel_inputs = c_mapping.flatten(channel.graph_input, return_tuple=True) inputs = c_mapping.flatten(nested_theano_args[i + 1], return_tuple=True)
if lib.isscalar(value) and isnull(value): value = [value]
return self._batch_size(is_numeric=True, batch=batch)
df_orig = DataFrame( [['1', '2', '3', '.4', 5, 6., 'foo']], columns=list('ABCDEFG'))
import logging import os
response = self.client.put(self.path, json.dumps(expected), content_type=JSON_CONTENT_TYPE)
train = CIFAR10(which_set='train') topo = train.get_batch_topo(1) assert topo.ndim == 4
df = self._insert_index(df) tb = plotting.table(ax, df, loc=9) tb.set_fontsize(self.font_size)
from __future__ import absolute_import
decorator = line_stripped continue
}
return response
return len(value.split())
self.show_admin_actions = not self.show_full_result_count or bool(full_result_count) self.full_result_count = full_result_count self.result_list = result_list self.can_show_all = can_show_all self.multi_page = multi_page self.paginator = paginator
if options.settings: os.environ['DJANGO_SETTINGS_MODULE'] = options.settings if options.pythonpath: sys.path.insert(0, options.pythonpath)
kwargs.update(kwargs.pop('metadata', {})) default_store_override = kwargs.pop('default_store', None)
mixed = Series(['aBAD_BAD', NA, 'BAD_b_BAD', True, datetime.today(), 'foo', None, 1, 2.])
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
return axes_array, block_values, block_items, extra_state
try: starts, ends = lib.generate_slices(self.slabels, self.ngroups) except: return [], True
v, W = self._cov_eigen(X)
with super(InlineDiscussionUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
configuration = self.get_configuration() return configuration.get(val_name, default)
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
pass
fig.subplots_adjust(wspace=0, hspace=0)
self._rollback = len(boundary) + 6
if servers is False: return False
self.q(css='input.check').first.click() self.wait_for_ajax()
return self._engine.is_unique
return {'HTTP_AUTHORIZATION': 'Basic ' + base64.b64encode('%s:%s' % (username, password))}
response = client2.post(self.url, creds) self._assert_response(response, success=True)
os.remove(destdir) os.makedirs(destdir)
self._chk_truncate() strcols = self._to_str_columns() text = self.adj.adjoin(1, *strcols)
clf = mixture.GaussianMixture(n_components=2, covariance_type='full') clf.fit(X_train)
from salt.modules import ldapmod
scores = cross_val_score(GaussianNB(), X, y, cv=10) assert_greater(scores.mean(), 0.77)
self.assertEqual(left_before, left_after) self.assertEqual(right_before, right_after)
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
values = self.mixed_float.as_matrix(['A', 'B', 'C', 'D']) self.assertEqual(values.dtype, np.float64)
project_state = self.set_up_test_model(app_label, **kwargs) new_state = project_state.clone() operation.state_forwards(app_label, new_state) return project_state, new_state
zmq_version()
_update_certificate_context(context, user_certificate, platform_name)
if no_nans: functions = self.base_functions + self.no_nan_functions for (f, require_min_periods, name) in functions: expanding_f = getattr( x.expanding(min_periods=min_periods), name)
self.assertTrue(result.equals(ci)) self.assertIsInstance(result, Index) self.assertNotIsInstance(result, CategoricalIndex)
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
cat_data = Categorical(data[col], ordered=order_categoricals) categories = [] for category in cat_data.categories: if category in value_label_dict[label]: categories.append(value_label_dict[label][category]) else:
assert_array_almost_equal(grad_1, grad_2) assert_almost_equal(loss_1, loss_2)
self._verify_cell_data_for_user(user_1, course.id, 'Cohort Name', '') self._verify_cell_data_for_user(user_2, course.id, 'Cohort Name', '')
is_default = True
assert_index_equal(left.index, right.index, exact=check_index_type, check_names=check_names, check_less_precise=check_less_precise, check_exact=check_exact, check_categorical=check_categorical, obj='{0}.index'.format(obj))
field_dict = fields_for_model(Person, fields=()) self.assertEqual(len(field_dict), 0)
TEMPLATES=[{ 'BACKEND': 'django.template.backends.dummy.TemplateStrings', }],
if source_item.has_children and not children_handled: dest_module.children = dest_module.children or [] for child in source_item.children: dupe = _duplicate_item(dest_module.location, child, user=user)
from salt.modules import win_shadow import salt.utils
pass
parent = self.modulestore.get_parent_location( as_published(location), ModuleStoreEnum.RevisionOption.published_only if location.revision is None else ModuleStoreEnum.RevisionOption.draft_preferred )
world.browser.execute_script('window.prompt = function(){return %s;}') % prompt
with self.assertRaises(UnsupportedRevisionError): self.store.get_items( self.course_locations[self.MONGO_COURSEID].course_key, revision=ModuleStoreEnum.RevisionOption.draft_preferred )
self.assertEqual(as_view_decorator.cache_alias, 'default')
self.assertEqual(signer.unsign(ts, max_age=datetime.timedelta(seconds=11)), value) with self.assertRaises(signing.SignatureExpired): signer.unsign(ts, max_age=10)
_create_namespace(name, apiserver_url) ret['changes'] = name ret['comment'] = "Namespace {0} created".format(name)
current_language = get_language() return [code for code, name in settings.LANGUAGES if not code == current_language][0]
estimator_weight = (-1. * self.learning_rate * (((n_classes - 1.) / n_classes) * inner1d(y_coding, np.log(y_predict_proba))))
from __future__ import unicode_literals
_default_logging_level_ = 'info' _logfile_config_setting_name_ = 'log_file' _loglevel_config_setting_name_ = 'log_level_logfile' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'cloud')
if len(y.shape) != 1: G_diag = G_diag[:, np.newaxis] return G_diag, c
if settings.USE_L10N: value = defaultfilters.floatformat(value, 1) template = string_formatted else: template = float_formatted return template % {'value': value}
if not isinstance(xmldict[name], list): xmldict[name] = [xmldict[name]] xmldict[name].append(to_dict(item))
pass
elif len(self.subclusters_) < self.branching_factor: self.append_subcluster(subcluster) return False
pass
if other is tslib.NaT: return self._nat_new(box=True) raise TypeError("cannot add a datelike to a DatetimeIndex")
__opts__['test'] = orig_test
CONTENT_GROUP_CONFIGURATION_DESCRIPTION = 'The groups in this configuration can be mapped to cohort groups in the LMS.'
if com.is_datetime64_dtype(col.dtype):
return table.append(Series({key: grand_margin[margins_name]}))
from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing ensure_in_syspath('../../')
if not ret: return None if 'ret_config' not in ret: return '' return str(ret['ret_config'])
if not GlobalStaff().has_user(request.user): raise PermissionDenied()
n_estimators_values = [1, 5, 10, 20, 30, 40, 50] accuracies_trees = np.zeros(len(n_estimators_values), dtype=float)
self.validation_scores_.append(self.score(X_val, y_val))
days=5 \ CN='My Little CA' \ C=US \ ST=Utah \ L=Salt Lake City \ O=Saltstack \ emailAddress=pleasedontemail@example.com
membership = CohortMembership.objects.create( user=user, course_user_group=get_random_cohort(course_key) ) return request_cache.data.setdefault(cache_key, membership.course_user_group)
fields_found = set() if requested is None: if isinstance(self.query.select_related, dict): requested = self.query.select_related restricted = True else: restricted = False
membership1 = CohortMembership( course_id=course_1_auto_cohort_1.course_id, user=self.user1, course_user_group=course_1_auto_cohort_1 ) membership1.save() membership2 = CohortMembership( course_id=course_1_auto_cohort_1.course_id, user=self.user2, course_user_group=course_1_auto_cohort_1 ) membership2.save()
from __future__ import absolute_import, print_function import os import logging
ANALYTICS_DATA_URL = ENV_TOKENS.get("ANALYTICS_DATA_URL", ANALYTICS_DATA_URL) ANALYTICS_DATA_TOKEN = AUTH_TOKENS.get("ANALYTICS_DATA_TOKEN", ANALYTICS_DATA_TOKEN)
check(rng.days) check(rng.seconds) check(rng.microseconds) check(rng.nanoseconds)
self.assertEqual([jid_dir_name], os.listdir(TMP_JID_DIR))
import logging
with self.assert_last_activity_updated(should_update): user = getattr(self, user) signal.send(sender=None, user=user, post=self.mock_comment())
from __future__ import absolute_import import re
s = Series(date_range('1/1/2000', periods=10))
supports_microsecond_precision = True
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
self._reset_event_aggregation() self.local.event.set_event_handler(self._process_event)
self._verify_masquerade_for_group(self.user_partition.groups[0]) self._verify_masquerade_for_group(self.user_partition.groups[1]) self._verify_masquerade_for_group(None)
n_jobs, n_estimators, starts = _partition_estimators(self.n_estimators, self.n_jobs)
import os import sys import time import errno import signal import select import logging
__virtualname__ = 'varstack'
check_ortho(Wx, "x weights are not orthogonal") check_ortho(Wy, "y weights are not orthogonal")
_maybe_remove(store, 'df2') store.put('df2', df) result = store.select('df2') assert_frame_equal(result, df)
clf = svm.OneClassSVM() rnd = check_random_state(2)
prepend_root_dirs = [ 'pki_dir', 'cachedir', 'sock_dir', 'extension_modules', 'pidfile', ]
self.assertOLXIsPublishedOnly(block_list_to_delete) self.delete_item(block_list_to_delete, revision=revision) self._check_for_item_deletion(block_list_to_delete, result) self.assertOLXIsDeleted(autopublished_children) self.assertOLXIsDeleted(block_list_draft_children)
success = 'correct' for answer_id in correct_map: if not correct_map.is_correct(answer_id): success = 'incorrect'
labels = _get_labels(node, apiserver_url)
return _makeTags( tagStr, False )
from django.db.models.sql.where import WhereNode, SubqueryConstraint, AND, OR
return dict((_maybe_box_datetimelike(key), value) for key, value in iteritems(d))
changes[namespace] = { 'new': config, 'old': update_config, } return config
inherited_settings_map.setdefault(block_key, {}).update(inheriting_settings)
res_row = df.iloc[2] tm.assert_series_equal(res_row, exp_row) tm.assertIsInstance(res_row["cats"], compat.string_types)
self.assertEqual( res_json['message'], u'Please select one or more certificate statuses that require certificate regeneration.' )
element = etree.fromstring(xml_str) state = {'value': 'x^2+1/2'} self.the_input = lookup_tag('formulaequationinput')(test_capa_system(), element, state)
return parse(out)
return (self.resid.values ** 2).sum()
CourseFactory.create(emit_signals=True)
return self._mapping.keys()
return obj.get("votes", {}).get("up_count", 0)
assert_raises(ValueError, calibration_curve, [1.1], [-0.1], normalize=False)
rng = np.random.RandomState(0)
messages.pop()
try: import certifi HAS_CERTIFI = True except ImportError: HAS_CERTIFI = False
if user is not None and user.is_active: if 'openid_error' in request.session: del request.session['openid_error']
try: self[key] except KeyError: return default
self.assertDeserializeEqual(False, 'false') self.assertDeserializeEqual(True, 'true')
try: return reverse(to, args=args, kwargs=kwargs) except NoReverseMatch: if callable(to): raise if '/' not in to and '.' not in to: raise
import salt.utils.jid
log.info(u"deleting course from split-mongo: %s", course_key) self.delete_course_index(course_key)
y_true, y_pred, _ = make_prediction(binary=False)
assert zca_dataset.has_targets()
df = DataFrame(np.random.randn(5, 3), index=['foo', 'foo', 'bar', 'baz', 'bar'])
setattr(c, "parent", None)
installed_date=installed_packages_list[this_package].timestamp
return numpy.clip(X * 2. - 1., -1., 1.)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
s = Series(list('abbcd'), dtype="category") self.assertTrue('cat' in dir(s))
t = Series(date_range('20130101', periods=1000, tz='US/Eastern')) self.assertTrue('datetime64[ns, US/Eastern]' in str(t))
lang = get_language() if lang is None: return False else: base_lang = get_language().split('-')[0] return base_lang in settings.LANGUAGES_BIDI
if idx.is_all_dates: try: return idx._get_string_slice(key) except (KeyError, ValueError, NotImplementedError): return None
bands = [] pixeltypes = [] while data: pixeltype, data = chunk(data, 2) pixeltype = unpack('B', pixeltype)[0]
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string) get_course_with_access(request.user, 'staff', course_key)
data = compressor.flush() if data: out.write(data)
start = TODAY().replace(tzinfo=pytz.UTC) override_field_for_ccx(ccx_course_object, master_course_object, 'start', start) override_field_for_ccx(ccx_course_object, master_course_object, 'due', None)
return self._wrap_union_result(other, result)
if len(left) > 0: right_drop.append(rk) else: left_drop.append(lk)
self.assertEqual(module.attempts, 1)
arrays = []
bookmark_service = BookmarksService(self.other_user) with self.assertNumQueries(1): self.assertFalse(bookmark_service.is_bookmarked(usage_key=self.sequential_1.location))
#html_additional_pages = {}
return any(self._value_matches(target, test_val) for test_val in criteria['$in'])
from defusedxml.lxml import parse, fromstring, XML
if len(self.buf) > 0: return self.buf[0] else: return self._next_line()
from salt.states import boto_sqs
import salt.utils from salt.exceptions import CommandExecutionError from salt.ext.six import string_types
store = DjangoOpenIDStore() server = Server(store, endpoint)
for app in ADDL_INSTALLED_APPS: INSTALLED_APPS += (app,)
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
kwargs['srid'] = self.srid if self.spatial_index is not True: kwargs['spatial_index'] = self.spatial_index return name, path, args, kwargs
try: import pymongo version = pymongo.version version = '.'.join(version.split('.')[:2]) HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
wp = Panel(self.panel._data) self.assertIs(wp._data, self.panel._data)
user = self._authenticate(username=username, password=password) if user is not None: request.user = user return True return False
context = {
converted = self.mixed_frame.copy() with assertRaisesRegexp(ValueError, 'invalid literal'): converted['H'].astype('int32')
url = reverse('verify_student_start_flow', kwargs=course_kwargs)
self._create_courses_and_enrollments( (self.TEST_ORG, True), (self.TEST_ORG, True), (self.TEST_ORG, True), ("org_alias", True) )
searched_perms = list() ctypes = set() for klass in app_config.get_models(): ctype = ContentType.objects.db_manager(using).get_for_model(klass)
func = lambda: date_range('2014-01-01', freq='WOM-5MON') self.assertRaises(ValueError, func)
cls._assert_block_values(block_structure, cls.transform_data_key)
if '.' in state[name]: comps = state[name].split('.') state[name] = {'__sls__': sls, '__env__': saltenv, comps[0]: [comps[1]]} continue
if grains['os_family'] == "RedHat": grains['osmajorrelease'] = grains['osrelease'].split('.', 1)[0]
raise nose.SkipTest("unreliable tests on complex128")
test_once = kwargs.get('test_once', False)
from __future__ import absolute_import import copy import logging import os import re
caches['prefix']._cache = cache._cache caches['prefix']._expire_info = cache._expire_info
scalers = [StandardScaler(with_mean=False, with_std=False), MinMaxScaler(), MaxAbsScaler()]
if val == val: nobs[lab, j] += 1 sumx[lab, j] += val
def __iter__(self): return self
beta = np.array(self.beta0)
def __enter__(self): return self
vary_on_headers('Accept-language'), vary_on_cookie,
if isinstance(value, ast.Name) and value.id == attr: return resolved
"decision": decision, "req_reference_number": str(order_id), "req_amount": order_amount, "auth_amount": paid_amount, "req_card_number": card_number,
return True
return getattr(self.client, method)(*args, HTTP_X_EDX_API_KEY=TEST_API_KEY, **kwargs)
student = self._user_factory_with_history() self.assertFalse(PasswordHistory.is_password_reset_too_soon(student))
if isinstance(value, datetime): return value.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0) return value.replace(month=1, day=1)
assert sls_obj['foo'].__str__() == '"bar"' assert sls_obj['foo'].__repr__() == '"bar"'
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) second_checkpoint.add_verification_attempt(attempt) self.assertEqual(second_checkpoint.photo_verification.count(), 1)
minions_remaining = pub_data['minions']
continue
if isinstance(opts['file_ignore_regex'], str): ignore_regex = [opts['file_ignore_regex']] elif isinstance(opts['file_ignore_regex'], list): ignore_regex = opts['file_ignore_regex']
GENDERS = (('\xc5', 'En tied\xe4'), ('\xf8', 'Mies'), ('\xdf', 'Nainen'))
if validate: for a in self.axes: a.maybe_set_size(min_itemsize=min_itemsize)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return _git_run(command, cwd=cwd, runas=user, ignore_retcode=ignore_retcode, redirect_stderr=True)['stdout']
matching = [] for disk in disks: for suitable_disk in suitable_disks: if disk.canonicalName == suitable_disk.disk.canonicalName: matching.append(disk)
continue
self.assertEqual(course_date, expected_course_date)
self.X_topo_space = view_converter.topo_space
COURSE_ENROLLMENT_CACHE_KEY = u"enrollment.{}.{}.mode"
request, strategy = self.get_request_and_strategy( auth_entry=pipeline.AUTH_ENTRY_REGISTER, redirect_uri='social:complete') strategy.request.backend.auth_complete = mock.MagicMock(return_value=self.fake_auth_complete(strategy))
result = f.clean('12.21.2010') self.assertEqual(result, date(2010, 12, 21))
return self.reset_attempts_button.click()
self._password = None
assert_equal(name, world.browser.find_by_css('.problem-header').text)
from __future__ import absolute_import import logging
self.assertFalse(Index(['a', 'b', 'c']).equals(['a', 'b', 'c']))
import integration
from __future__ import unicode_literals
classes = np.unique(y) classes = (classes[classes != -1]) self.classes_ = classes
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] y_state = layer_to_state[y]
if callable(field_name): if field_name.__name__ == '<lambda>': return 'lambda' + str(field_index) else: return field_name.__name__ return field_name
run_map = False
if len(cur_state_below) == 1: cur_state_below, = cur_state_below
import json import logging import time import pprint from salt.ext.six.moves import range import salt.ext.six as six import salt.utils try: import requests
s, v = 0.75, 0.9 c = s * v m = v - c
if err == 'usage:': break ret[csnap][ctag] = res['stderr']
return dict(parse_qsl(urlparse(url).query))
grad_shared = sharedX(zv) z_shared = sharedX(zv)
parent_task_id = InstructorTask.objects.get(pk=entry_id).task_id task_id = subtask_status.task_id total_recipients = len(to_list) recipient_num = 0 total_recipients_successful = 0 total_recipients_failed = 0 recipients_info = Counter()
'tcp_pub_port': int,
result = missing.fill_zeros(result, x, y, name, fill_zeros) return result
win_servermanager.__salt__ = {} win_servermanager.__opts__ = {}
if microsite.has_override_value('SESSION_COOKIE_DOMAIN'):
from __future__ import absolute_import
'simple_history',
self.settings_page.visit()
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
problem = self.store.get_item(problem_location) self.assertEquals(problem.display_name, expected_display_name)
Timestamp(min_ts_us) Timestamp(max_ts_us)
self.certificates_section.wait_for_certificate_exceptions_section()
t_path_dirs = os.listdir(t_path) if not t_path_dirs and t_path not in dirs_to_remove: dirs_to_remove.add(t_path) continue
if not td.nanoseconds: self.assertEqual(Timedelta(str(td)), td) self.assertEqual(Timedelta(td._repr_base(format='all')), td)
tsframe.to_csv(path) recons = DataFrame.from_csv(path, index_col=None) self.assertEqual(len(recons.columns), len(tsframe.columns) + 2)
if script: script_element = etree.SubElement(root, "script") script_element.set("type", "loncapa/python") script_element.text = str(script)
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: mock_grade.side_effect = exception_class('test error')
if state == {}: state = None
self._reset() return self.partial_fit(X, y)
value = self.literal
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor', grade=default_grade )
values = tslib.cast_to_nanoseconds(values)
if not consumer: consumer = LtiConsumer.objects.get( consumer_key=consumer_key, )
self.mapbias = sharedX( numpy.zeros(self.nmap), name='mb', borrow=True )
award = Mock()
ROLE = 'beta_testers' def __init__(self, *args, **kwargs): super(CourseBetaTesterRole, self).__init__(self.ROLE, *args, **kwargs)
module_class = EmptyXModule
from salttesting.helpers import ensure_in_syspath from salttesting.mixins import RUNTIME_VARS ensure_in_syspath('../../')
self.teams_page.verify_my_team_count(expected_number_of_teams)
user=user, course_id=course.location.course_key, status=CertificateStatuses.downloadable
empty = ParameterGrid({}) assert_equal(len(empty), 1) assert_equal(list(empty), [{}]) assert_grid_iter_equals_getitem(empty) assert_raises(IndexError, lambda: empty[1])
initial_value = initial if initial is not None else '' data_value = data if data is not None else '' return initial_value != data_value
pass
self.assertEqual(getattr(obj, op)(), datetime(2011, 11, 1))
return assertIs(expr, None, msg)
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
centers = _init_centroids(X, n_clusters, init, random_state=random_state, x_squared_norms=x_squared_norms) if verbose: print("Initialization complete")
X, y = make_classification(n_samples=1000, n_features=25, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, random_state=0)
self.opts = opts self.grains = grains self.minion_id = minion_id self.ext = ext self.functions = functions self.pillar = pillar self.pillarenv = pillarenv
self.assert_no_setting_changed_event()
check(self.bseries, 5)
FEATURES['ENFORCE_PASSWORD_POLICY'] = False FEATURES['ENABLE_MAX_FAILED_LOGIN_ATTEMPTS'] = False FEATURES['SQUELCH_PII_IN_LOGS'] = False FEATURES['PREVENT_CONCURRENT_LOGINS'] = False FEATURES['ADVANCED_SECURITY'] = False PASSWORD_MIN_LENGTH = None PASSWORD_COMPLEXITY = {}
raise ValidationError(self.error_messages['invalid'], code='invalid')
pass
can_introspect_foreign_keys = True
pass
('Sat, 01-Jan-2028 04:05:06 GMT', 'Sat, 01-Jan-2028 04:05:07 GMT')
for alg in ['SAMME', 'SAMME.R']: clf = AdaBoostClassifier(algorithm=alg, n_estimators=10) clf.fit(iris.data, iris.target, sample_weight=iris_weights)
sh( "mongo {} --eval 'db.dropDatabase()' > /dev/null".format( Env.BOK_CHOY_MONGO_DATABASE, ) )
return result, True
if self.current_token is not EndToken: raise self.error_class("Unused '%s' at end of if expression." % self.current_token.display()) return retval
if dry_run: return
from __future__ import unicode_literals
return DefusedExpatParser()
if msg_prefix: msg_prefix += ": "
if token != '': params_with_headers['SecurityToken'] = token
dict(safe_zip(range(5), range(5))),
self.auth = salt.crypt.AsyncAuth(self.opts, io_loop=self._io_loop)
return self._join_compat(other, on=on, how=how, lsuffix=lsuffix, rsuffix=rsuffix, sort=sort)
self.assertEqual(0, get_format('FIRST_DAY_OF_WEEK'))
errorlog = make_error_tracker() course_descriptor = None try: course_descriptor = self.load_course(course_dir, course_ids, errorlog.tracker, target_course_id)
assert_raises_regexp = assert_raises_regex
if self.n_classes_ > 1: max_features = max(1, int(np.sqrt(self.n_features))) else: max_features = self.n_features
with modulestore().default_store(ModuleStoreEnum.Type.mongo): self.course = CourseFactory.create()
def __init__(self, *args, **kwargs): if "resolve_entities" not in kwargs: kwargs["resolve_entities"] = False super(XMLParser, self).__init__(*args, **kwargs)
return json.loads(response.content)["access_token"]
log.debug("No refund opened for user [%s], course [%s]", unenrolled_user.id, course_key_str)
if predicate: self.assertIn(member, container) else: self.assertNotIn(member, container)
#html_favicon = None
conn_parameters['key'] = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(50))
if try_cast: result = self._try_cast_result(result)
response = self.client.get(self.dashboard_url) self.assertContains(response, attempt.expiration_datetime.strftime("%m/%d/%Y"))
g = GaussianMixture(n_components=n_components, n_init=1, max_iter=5, reg_covar=0, random_state=random_state, warm_start=False, tol=1e-6) h = GaussianMixture(n_components=n_components, n_init=1, max_iter=5, reg_covar=0, random_state=random_state, warm_start=True, tol=1e-6)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, Mock, NO_MOCK, NO_MOCK_REASON, patch )
batch0 = slice(0, chunk_size) scaler_batch = MinMaxScaler().fit(X[batch0]) scaler_incr = MinMaxScaler().partial_fit(X[batch0])
return capi.geos_disjoint(self.ptr, other.ptr)
self.added_tags.extend(kwargs.items())
self.teams_page.click_all_topics() self.verify_my_team_count(0)
import datetime import json
number_aware_alphabetical_key = cmp_to_key(number_aware_alphabetical_cmp)
self.settings_patcher = patch.dict('django.conf.settings.FEATURES', {'MILESTONES_APP': True}) self.settings_patcher.start()
if self.output_field.get_internal_type() == 'TextField': class ToNCLOB(Func): function = 'TO_NCLOB'
s = [True, False, True, True] res = to_numeric(s) tm.assert_numpy_array_equal(res, np.array(s))
from salt.pillar import Pillar
import salt.utils
self.assertEqual(str(ret['LIGHT_YELLOW']), str(ret['LIGHT_GRAY']))
reset_sequences = False
import logging import sys import xml.etree.ElementTree as ET
'acceptance_wait_time': float,
_get_file_from_s3(metadata, saltenv, fnd['bucket'], path, cached_file_path)
data.update({'queuekey': header['lms_key']})
vertical1_parent = self.store.get_parent_location(vertical1.location) self.assertEqual(unicode(vertical1_parent), unicode(chapter1.location))
non_capturing_groups.append(len(result))
grandkids = [] for descendant in descendants: grandkids.extend(descendant.children)
filtered_response = self.verify_response(params={'org': self.course.org, 'username': self.staff_user.username}) self.assertTrue(
opts = apply_cloud_config(overrides, defaults)
os.path.join(os.path.dirname(__file__), '..', '../..', 'sphinxext')
freq = defaultdict(int) for tok in tokens(doc): freq[tok] += 1 return freq
self.base_estimator = base_estimator self.n_estimators = n_estimators self.estimator_params = estimator_params
self.navigate_to_video()
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE['unsupported'])
from __future__ import absolute_import import msgpack import salt.ext.six as six
cipher = aes_cipher_from_key(key) padded_data = cipher.decrypt(encrypted_data) return unpad(padded_data)
cls.create_and_enroll_student( courses=[cls.test_course_2], username='student_enrolled_other_course_not_on_team' )
from ioflo.aid.odicting import odict
if isinstance(file_h, six.string_types): with open(file_h, 'rb') as file_h: buf = file_h.read() else: buf = file_h.read()
self.name = app_name
fg1.ptr = ctypes.c_void_p() fg1.ptr = None fg2.ptr = c_float_p(ctypes.c_float(5.23)) fg2.ptr = None
self.thread_page_2.check_focus_is_set(selector=".discussion-article")
user = self.create_user_and_enroll('verified') self.add_verification_status(user, VerificationStatus.APPROVED_STATUS) with self.assertNumQueries(4): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
if self.per_second: seconds = channels['training_seconds_this_epoch'].val_record seconds = np.array(seconds) seconds = seconds.cumsum() x = seconds[x]
try: parser = TextParser(data, header=header, index_col=index_col, has_index_names=has_index_names, na_values=na_values, thousands=thousands, parse_dates=parse_dates, date_parser=date_parser, skiprows=skiprows, skip_footer=skip_footer, squeeze=squeeze, **kwds)
return hasattr(obj, 'next') or hasattr(obj, '__next__')
ret = utils.repack_dictlist(LORUM_IPSUM) self.assertDictEqual(ret, {})
with translation.override("fr"):
return self.student_email_input.is_present()
prob /= prob_sum.reshape((prob.shape[0], -1))
self._check_double_roundtrip(df, tm.assert_frame_equal, compression='zlib', check_frame_type=True)
self._write(str(t))
return response
k3 = 0.5**2 * RationalQuadratic(length_scale=1.0, alpha=1.0) k4 = 0.1**2 * RBF(length_scale=0.1) \ + WhiteKernel(noise_level=0.1**2,
from salt.states import http
col = np.argmax(self.marked[row] == 2) if self.marked[row, col] != 2: col = -1 return col
return network
MODEL_METHODS_EXCLUDE = ('_', 'add_', 'delete', 'save', 'set_')
e._element.send_keys(Keys.ENTER)
TASK_RUNLEVEL_LUA = 0 TASK_RUNLEVEL_HIGHEST = 1
theano.config.floatX = self.orig_floatX
return '{0} not found'.format(name)
obj = self.model(**kwargs) self._for_write = True obj.save(force_insert=True, using=self.db) return obj
self.assertIn("Email or password is incorrect.", self.login_page.wait_for_errors())
context['courses_list'] = microsite.get_template_path('courses_list.html')
self.assert_register_response_before_pipeline_looks_correct(self.client.get('/register'))
self.assertFalse(hasattr(Director(), 'director')) self.assertFalse(hasattr(School(), 'school'))
columns = self.column_classes(Note) self.assertFalse(columns['info'][1][6])
pass
import salt.ext.six as six try: import pip HAS_PIP = True except ImportError: HAS_PIP = False
hid_acts, filters, output_shape = inputs out, = outputs assert hid_acts[0] == filters[3] flops = (hid_acts[3] * filters[0] * hid_acts[0] * filters[1] * filters[2] * hid_acts[1] * hid_acts[2] * 2) return flops
(thumbnail_content, thumbnail_location) = contentstore().generate_thumbnail( content, tempfile_path=tempfile_path, )
return has_team_api_access(request.user, obj.course_id)
key = pd.Timestamp('2012-01-01') series = pd.Series() series[key] = 47 expected = pd.Series(47, [key]) assert_series_equal(series, expected)
return "{};q={}".format(lang, priority)
self.randomize_datasets(randomize_now)
self.assertSetEqual(set(apps._pending_operations) - initial_pending, {('apps', 'lazyb')})
ret = self.run_state('ssh_known_hosts.present', **dict(kwargs, name=GITHUB_IP)) self.assertSaltStateChangesEqual( ret, GITHUB_FINGERPRINT, keys=('new', 'fingerprint') )
self._assert_certs_in_queue(mock_queue, 1)
from __future__ import unicode_literals
from __future__ import absolute_import
cluster_ids, mu = milk.kmeans(X, k)
import salt.utils from salt.ext.six import string_types
return xmlstore.get_item(usage_key, for_parent=for_parent)
return FilterExpression(token, self)
s3 = Series([0.01, 0], index=[3, 5]) assert_frame_equal(df.loc[[3]], df.sample(1, weights=s3))
self.assertContains(response, 'test<br /><br />test<br /><br />test<br /><br />test') self.assertContains(response, 'test<br />link')
raise NotImplementedError('subclasses of BaseCache must provide a set() method')
current_node = stack.pop()
return True
site = admin.AdminSite(name='auth_test_admin') site.register(User, UserAdmin) site.register(Group, GroupAdmin)
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
if 'ip_address' in vm_: ip_address = str(vm_['ip_address']) elif 'public_ips' in data:
self.assertRaises(TypeError, store.select, 'df1', ( 'columns=A', Term('index>df.index[4]')))
unpickled = self.round_trip_pickle(self.empty) repr(unpickled)
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
from .overrides import get_override_for_ccx return get_override_for_ccx(self, self.course, 'due')
import logging
revoke_access(course_ccx, staff, 'staff')
try: from salt.ext.six.moves._thread import get_ident as _get_ident except ImportError: from salt.ext.six.moves._dummy_thread import get_ident as _get_ident
old = list_pkgs(saltenv=saltenv)
detR = (np.diag(C) ** (2. / n_samples)).prod()
if hasattr(clz, 'check_throttles'): clz.check_throttles = _check_throttles_decorator(clz.check_throttles)
try: v1 = arg_val_dict[key] v2 = compat_args[key]
user_partititons = self.course.user_partitions
self.assertIsNone(cache_middleware.process_request(request))
with tm.assert_produces_warning(FutureWarning): self.ts.order()
if not isinstance(usrgrps, list): usrgrps = [usrgrps] for usrgrp in usrgrps: params['usrgrps'].append({"usrgrpid": usrgrp})
log.debug('generated search string: {0}'.format(search_string)) return self.Search(search_string)
from __future__ import absolute_import
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'gce', vm_['profile'], vm_=vm_) is False: return False
from __future__ import absolute_import import multiprocessing import logging
funcs = self.run_function('sys.list_functions') self.assertIn('hosts.list_hosts', funcs) self.assertIn('pkg.install', funcs)
tz = self.tz('US/Eastern')
df['int16_2'] = Series([1] * len(df), dtype='int16') self.assertRaises(ValueError, store.append, 'df', df)
layer = data_source[layer_key] ogr_fields = layer.fields
if isinstance(cfg, dict): c_cfg = cfg else: c_cfg = cfg('{0}'.format(virtualname), {})
expected = Panel({"One": df}) check_drop('Two', 0, ['items'], expected)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
from __future__ import absolute_import
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
COURSE_BLOCK_ACCESS_TRANSFORMERS = [ library_content.ContentLibraryTransformer(), start_date.StartDateTransformer(), user_partitions.UserPartitionTransformer(), visibility.VisibilityTransformer(), ]
__virtualname__ = 'zpool'
if not _any_pandas_objects(terms): return _result_type_many(*term_values), None
if not include_meta_estimators: estimators = [c for c in estimators if not c[0] in META_ESTIMATORS] if type_filter is not None: if not isinstance(type_filter, list): type_filter = [type_filter] else:
try: sec_index = self._section_titles().index(section_title) except ValueError: self.warning("Could not find section '{0}'".format(section_title)) return
self.module = app_module
try: return set((str(x) for x in thing)) except TypeError: return set((str(thing),))
y_seq_of_seqs = [[], [1, 2], [3], [0, 1, 3], [2]] assert_raises(ValueError, LabelBinarizer().fit_transform, y_seq_of_seqs)
result = read_csv(filename, index_col=0) result = result.rename(columns={'a.1': 'a'}) assert_frame_equal(result, df)
CourseSalesAdminRole(self.course.id).add_users(instructor)
xpath = "//div[@class='indicator-container']/span[@class='status correct']" self.assert_no_xpath(xml, xpath, self.context)
if name is not None: name = os.path.basename(name)
db_alias = ( 'read_replica' if 'read_replica' in settings.DATABASES else 'default' ) return connections[db_alias].cursor()
return self._topology(capi.geos_difference(self.ptr, other.ptr))
if is_request_from_mobile_app(request): return MobilePlatform.get_instance(user_agent)
display_height = get_option('display.height', silent=True)
if org_target: if record.index['org'] != org_target: continue
self.previous_version = edit_info.get('previous_version', None)
if not _check_features(): ret['error'] = 'bookmarks are not supported' return ret
return str_columns
if isinstance(value, Promise): value = value._proxy____cast() return value
student_module__in=[module.id for module in student_modules]
return self.prior.get_params()
output.append(str_hidden)
create_collection_index(self.collection, 'definition.children', sparse=True, background=True)
logger.info(this_package) packages_really_to_upgrade.append(this_package)
from salt.exceptions import CommandExecutionError
log.debug('generated search string: {0}'.format(search_string)) return self.Search(search_string)
result = _rollf(result)
if len(args) == 1: if isinstance(args[0], (tuple, list)): init_geoms = args[0] else: init_geoms = args else: init_geoms = args
free_regex = re.compile(r'^GEO-\d{3}FREE') lite_regex = re.compile(r'^GEO-\d{3}LITE')
part = dtime.strftime(code)
from __future__ import unicode_literals
grad[-1] = n_samples grad[-1] -= n_sw_outliers * epsilon ** 2 grad[-1] -= squared_loss / sigma
return '__file__' in globals()
tm.assert_series_equal(result1, frame.apply(wrapper, axis=1), check_dtype=False, check_less_precise=check_less_precise)
self.assertSetEqual(set(apps._pending_operations) - initial_pending, {('apps', 'lazyc')})
idx = Index([]) result = idx.isin(values) self.assertEqual(len(result), 0) self.assertEqual(result.dtype, np.bool_)
import salt.utils from salt.exceptions import CommandExecutionError
from __future__ import absolute_import, print_function import os import copy import json import stat import shutil import fnmatch import hashlib import logging
df = self.series.to_frame('foo')
self.assertRaises(TypeError, lambda: dti - ts_tz) self.assertRaises(TypeError, lambda: dti_tz - ts) self.assertRaises(TypeError, lambda: dti_tz - ts_tz2)
world.wait_for(lambda _driver: len(world.browser.find_by_css('div.ui-loading.is-hidden')) > 0)
result = f.clean('1:30:05 PM') self.assertEqual(result, time(13, 30, 5))
if id_: id_ += '_0' return id_
import salt.utils
pass
import salt.client.ssh import logging import os from salt.exceptions import CommandExecutionError
payment_data = payment_data['payment_form_data']
reindexed_int = int_ts.reindex(self.ts.index)
os.killpg(os.getpgid(process.pid), signal.SIGKILL) process.wait()
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
image = ':'.join(_get_repo_tag(name)) all_tags = __salt__['dockerng.list_tags']()
import logging import re import os from salt.ext.six.moves import map
pass
rng = date_range('1/1/2000', '1/31/2000') ts = Series(np.random.randn(len(rng)), index=rng)
import hashlib import logging import os.path import random import signal
import salt.ext.six as six
if name not in loader.file_mapping: return {}
status = 'failed' reason = { 'final_grade': grade_summary['percent'], 'minimum_grade': min_grade }
prefix = _('Hint ({hint_num} of {hints_count}): ').format(hint_num=hint_index + 1, hints_count=len(demand_hints))
def f(grp): if grp.name == 'Pony': return None return grp.iloc[0].loc['C']
self.course_fixture = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
for name in res: res[name]['__sls__'] = fn_
from .test_auth_backends import ImportedModelBackend
assert_equal(iterations, expected_n_iter) if n_samples is not None: assert_equal(collected_test_samples, set(range(n_samples)))
if 'master_uri' not in __opts__: __opts__['master_uri'] = 'tcp://{ip}:{port}'.format( ip=salt.utils.ip_bracket(__opts__['interface']),
if self.opts['order_masters']: payload_kwargs['to'] = timeout
web.get_data_yahoo('GOOG')
from __future__ import absolute_import
from salt.exceptions import CommandExecutionError
assert_raise_message(ValueError, error_msg % ("fake", pipe), pipe.set_params, fake__estimator='nope')
self._setup_mode_and_enrollment(self.FUTURE, "verified")
DEFAULT_TIMEOUT = object()
cohort = CohortFactory(course_id=self.course.id, users=[]) self._verify_non_staff_cannot_access(users_in_cohort, "GET", [unicode(self.course.id), cohort.id])
index, data = tm.getMixedTypeDict() mixed = DataFrame(data, index=index)
sqrt_n = np.sqrt(len(x)) return (sqrt_n - np.linalg.norm(x, 1) / norm(x)) / (sqrt_n - 1)
self.assertIn("Not checking migrations", self.output.getvalue())
modulestore = XMLModuleStore( data_dir, default_class=None, source_dirs=source_dirs )
self._reset_event_aggregation() self.local.event.set_event_handler(self._process_event)
self.assert_numpy_array_equal(c._codes, np.array([3, 2, 1, 0, 3], dtype=np.int8))
self.client.login(username=self.user.username, password=self.test_password) response = self.send_get(self.client) self.assertEqual({}, response.data)
new_hash = compute_fingerprint(paths) if new_hash != old_hash: install_func()
return self.REMOVE_SPAN_TAG_RE.search(element.get_attribute('innerHTML')).groups()[0].strip()
from salt.states import artifactory
import salt.ext.six as six
assert key.user_id == self.user.id
client_kwargs['version'] = 'auto'
bt = BallTree(X) distances_nn, neighbors_nn = bt.query(X, k=k + 1) neighbors_nn = neighbors_nn[:, 1:]
global cuda if cuda is None: from theano.sandbox import cuda return cuda.mem_info()[0]/1024./1024
_check_types(left.levels[level], right.levels[level], obj=obj)
self.assertEqual( self.run_function('xattr.list', [TEST_FILE]), {'spongebob': 'squarepants', 'crabby': 'patty'})
problem = new_loncapa_problem(xml_str, capa_system=self.capa_system)
return _error(ret, u_check)
_js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
self.assertTrue(component.has_validation_error) self.assertEqual(component.validation_error_text, self.VALIDATION_ERROR_LABEL) self.assertEqual([self.VALIDATION_ERROR_MESSAGE], component.validation_error_messages)
cdf_rows = cdf[1:5] self.assertTrue(isinstance(cdf_rows, CustomDataFrame)) self.assertEqual(cdf_rows.custom_frame_function(), 'OK')
rng = np.random.RandomState([2014, 11, 4]) start = 0 stop = 990 num_examples = 1000 num_feat = 5 num_classes = 2
assert_equal(len(matched_buttons), 1) return matched_buttons[0]
self.assertEqual(poly, fromstr(p.wkt))
partitions.append({ "id": p.id, "name": p.name, "scheme": p.scheme.name, "groups": groups, })
self.assertFalse(result['success']) self.assertIn(u"did not return a required parameter", result['error_html'])
with self.assertRaises(TypeError): City.objects.geojson(precision='foo')
X, y = make_classification(n_samples=200, n_features=100, n_informative=3, random_state=0)
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
params.update(body) return params
H_hat[-1] = Y
self.assertEqual(len(exceptions), 1)
self.prog_name = "{} {}".format(prog_name, subcommand) return super(TrackedCommand, self).create_parser(prog_name, subcommand)
def check(result, expected): tm.assert_numpy_array_equal(result, expected) tm.assertIsInstance(result, np.ndarray)
rerun_state = CourseRerunState.objects.update_state( course_key=rerun_course_key, new_state=state, allow_not_found=True ) CourseRerunState.objects.update_should_display( entry_id=rerun_state.id, user=user2, should_display=should_display )
tgt = ipaddress.ip_network(tgt)
json = self.tsframe.to_json() result = read_json(json) assert_frame_equal(result, self.tsframe)
if len(self.args) <= 1: self.print_help() self.exit(salt.defaults.exitcodes.EX_USAGE)
return self.q(css='.wrapper-content ' + self.certficate_css + ' .no-content').text[0]
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE[CourseMode.DEFAULT_MODE_SLUG])
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 swap: <size>
super(CoursePage, self).__init__(browser) self.course_id = course_id
self.assertIn( 'Update not available', self.run_function('softwareupdate.update', ['spongebob']))
if transform: self.source_srs = self.check_srs(source_srs) self.transform = self.coord_transform() else: self.transform = transform
EDX_PLATFORM_REVISION = dealer.git.Backend(path=REPO_ROOT).revision
stdout, stderr, retcode = single.shell.copy_id()
user.set_password(password) user.save() history = PasswordHistory() history.create(user)
df.unstack(['b', 'c'])
response = self.client.get('/syndication/naive-dates/') doc = minidom.parseString(response.content) updated = doc.getElementsByTagName('updated')[0].firstChild.wholeText
url_fields[0] = 'http'
url = "{base}/verify_student/{entry_point}/{course}/".format( base=BASE_URL, entry_point=self._entry_point, course=self._course_id ) return url
_new_dir(CACHE_ROOT)
epoch_num = 2
value = "(%s)" if len(strings) != 1 else "(%s,)" return value % (", ".join(strings)), imports
__virtualname__ = 'autoruns'
from salttesting import (expectedFailure, skipIf) from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import copy import logging import salt.ext.six as six from salt.serializers.yamlex import merge_recursive as _yamlex_merge_recursive
if urlparse.urlparse(url_path).netloc: return url_path
#html_file_suffix = ''
pass
return get_url("TOS_AND_HONOR")
'include_paths': get_config_value('include_paths', ()),
return { 'qty': self.qty, 'unit_price': unicode(self.unit_price), 'currency': self.currency }
X_homo = X + sigma * rng.randn(n_samples, n_features)
installer = pkginfo[version_num].get('installer', False) cache_dir = pkginfo[version_num].get('cache_dir', False) cache_file = pkginfo[version_num].get('cache_file', False)
try: response_msg_div = etree.XML('<div>%s</div>' % str(response_msg))
group1_id = self.partition_service.get_user_group_id_for_partition(user_partition_id) self.assertEqual(group1_id, groups[0].id)
size += (stat.st_size // 512 + 1) * 512
raise CommandExecutionError( 'Error {0}: {1}'.format(exc.response.status_code, exc.explanation) )
#epub_guide = ()
if isnull(value) or not isinstance(value, compat.string_types):
return self.filter_by(data, "id", note_id)
alternate_course = self.create_course( org=md5(self.course.org).hexdigest() )
if obj <= best_obj: best_obj = obj best_alpha = alpha best_alpha_ind = ind
salt '*' vsphere.get_coredump_network_config my.vcenter.location root bad-password \ esxi_hosts='[esxi-1.host.com, esxi-2.host.com]'
for _ in range(20): next_index = random.randrange(len(alphabet)) password += alphabet[next_index]
return [item + '\n' for item in ifcfg.split('\n')]
self.assertEqual( self.course.clean_id(), "course_ORSXG5C7N5ZGOL3UMVZXIX3DN52XE43FF52GK43UL5ZHK3Q=" ) self.assertEqual( self.course.clean_id(padding_char='$'), "course_ORSXG5C7N5ZGOL3UMVZXIX3DN52XE43FF52GK43UL5ZHK3Q$" )
for label in np.unique(labels): assert_equal(len(np.unique(folds[labels == label])), 1)
ret['comment'] = 'Event module not available. Beacon add failed.'
df = orig.copy() df.at["j", "cats"] = "b" tm.assert_frame_equal(df, exp_single_cats_value)
raise NotImplementedError()
return nt_uri[SHORTNAME_SLICE]
from salt.states import win_dns_client
if problem_url: usage_key = course_id.make_usage_key_from_deprecated_string(problem_url) usage_keys.append(usage_key)
idx = PeriodIndex([], freq='M') result = idx._shallow_copy() expected = idx
_("Expected a {expected_tag} tag; got {given_tag} instead").format( expected_tag=u"<choice>", given_tag=choice.tag, )
self.assertRaises(AssertionError, df.groupby('a').apply, f3) self.assertRaises(AssertionError, df2.groupby('a').apply, f3)
args = vars(ArgParser().parse_args())
#add_module_names = True
df = DataFrame(index=lrange(10), columns=['a', 'b'], dtype=object) self.assertEqual(df.values.dtype, np.object_)
from salt.exceptions import CommandExecutionError import salt.utils
if isinstance(s, np.bytes_): s = s.decode('UTF-8') return s
flags = [('Name', name)]
'mine_return_job': bool,
self.assertEqual(cl.result_count, 1)
assert_true(X_scaled is X)
if old_value is not None: __salt__['file.sed'](makeconf, value, '', limit=var)
image_index[0] = add_mod(image_index[0], step, len(row_indices))
transformed_grid = hasher.transform(np.c_[xx.ravel(), yy.ravel()]) y_grid_pred = nb.predict_proba(transformed_grid)[:, 1]
cherrypy.config['saltopts'] = opts cherrypy.config['apiopts'] = apiopts
self.assertTrue(allowance_section.is_add_allowance_popup_visible)
core_samples, labels = dbscan(X, algorithm=algorithm, eps=1, min_samples=3) assert_array_equal(core_samples, [2]) assert_array_equal(labels, [-1, 0, 0, 0, -1, -1, -1])
self.assertFalse([ requirement for requirement in requirements if requirement['namespace'] == 'proctored_exam' ])
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
return self.get_text('.certificate-id .certificate-value')
when = _when[0]
if logging.getLoggerClass() is not SaltLoggingClass:
import salt.spm import salt.utils.parsers as parsers from salt.utils.verify import verify_log
typs = get_dtype_kinds(to_concat) if len(typs) != 1:
bwait = self.opts.get('batch_wait', 0) wait = []
html_theme_path = ['themes']
K = squareform(K) np.fill_diagonal(K, 1)
for i, update in enumerate(updates): results['update {0}'.format(i)] = update
pc_clf.fit(this_X_train, y_train + 1, sample_weight=sw_train) prob_pos_pc_clf_relabeled = pc_clf.predict_proba(this_X_test)[:, 1] assert_array_almost_equal(prob_pos_pc_clf, prob_pos_pc_clf_relabeled)
with ensure_clean_store(self.path) as store:
response = self._change_password(email=self.NEW_EMAIL) self.assertEqual(response.status_code, 400)
log.debug('No updates to install') ret['Success'] = False ret['Message'] = 'No Updates to install' return ret
@wraps(view_func, assigned=available_attrs(view_func)) def _wrapped_view_func(request, *args, **kwargs): response = view_func(request, *args, **kwargs) add_never_cache_headers(response) return response return _wrapped_view_func
multi_db = True
render_args, _ = module.system.render_template.call_args self.assertEqual(len(render_args), 2)
np.testing.assert_almost_equal(np.diag(cm), np.ones(cm.shape[0]))
settings = partitioned_fields[Scope.settings] settings = self._serialize_fields(block_key.type, settings) if not is_updated: is_updated = self._compare_settings(settings, original_entry.fields)
if not isinstance(obj.list_max_show_all, int): return must_be('an integer', option='list_max_show_all', obj=obj, id='admin.E119') else: return []
from salt.states import schedule
import salt.utils
return self.values
self.assertTrue('Activate Course Enrollment' in response.content)
options = self.q(css="body.discussion .forum-nav-sort-control option") return options.filter(lambda el: el.is_selected())[0].get_attribute("value")
BULK_EMAIL_ROUTING_KEY_SMALL_JOBS = LOW_PRIORITY_QUEUE
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
import glob import logging import re
y_pred_rf = rf.predict_proba(X_test)[:, 1] fpr_rf, tpr_rf, _ = roc_curve(y_test, y_pred_rf)
process_view(self.rf.get('/'))
self.assertEqual(self.ts.asof(self.ts.index[3]), self.ts[3])
if not modeladmin.has_delete_permission(request): raise PermissionDenied
wtf_numpy = np.zeros((n_classes,)) for i in xrange(n_classes): wtf_numpy[i] = probs[i] probs = wtf_numpy
if sp.issparse(predictions[0]): predictions = sp.vstack(predictions, format=predictions[0].format) else: predictions = np.concatenate(predictions) return predictions[inv_test_indices]
block_structure.request_xblock_fields('graded', 'format', 'display_name', 'category')
newpath = (next_usage, path) queue.append((parent, newpath))
self.assertEqual(problem.context['expect'], '42')
self.assertTrue((a == a).all()) self.assertFalse((a != a).all())
weights_less_than_1 = [0] * 10 weights_less_than_1[0] = 0.5 tm.assert_frame_equal( df.sample(n=1, weights=weights_less_than_1), df.iloc[:1])
test_func._modified_settings = list( test_func._modified_settings) + self.operations
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
openstack_config.__salt__ = {}
if self.float_format is None and self.fixed_width: float_format = '%% .%df' % self.digits else: float_format = self.float_format
result = s.resample('2200L').mean() self.assertEqual(result.index[-1], pd.Timestamp('2014-10-15 23:00:02.000'))
greatest_least_ignores_nulls = False
pass
emails = instructor_task.api.get_instructor_task_history(course_id, task_type=task_type)
try: #pylint: disable=unused-import import boto import boto.sns #pylint: enable=unused-import logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
return self.get(path, data or {}, follow, HTTP_ACCEPT="text/html", **extra)
with self.assertRaises(Http404): self.get_form(expected_valid=False)
from __future__ import absolute_import import logging
for i in range(len(df.columns)): df.iloc[:, i]
__virtualname__ = 'redis'
suite = BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite)
iptables.__grains__ = {} iptables.__salt__ = {} iptables.__context__ = {} iptables.__opts__ = {}
self.client.logout()
self.selenium.find_element_by_id('change_id_user').click() self.wait_for_popup() self.selenium.switch_to.window('id_user')
response.render() pickled_response = pickle.dumps(response) unpickled_response = pickle.loads(pickled_response)
op(a, b, axis=0)
'courseware_access': has_access( request.user, 'load_mobile', course_overview ).to_json(),
if not self._known_consolidated: self._consolidate_check() return self._is_consolidated
data = list(storage) self.assertTrue(storage.used) self.assertEqual(data, list(storage))
L = np.zeros((max_features, max_features), dtype=Gram.dtype)
for layer in ds: for feat in layer: g = feat.geom
#'django.contrib.auth.middleware.AuthenticationMiddleware', 'cache_toolbox.middleware.CacheBackedAuthenticationMiddleware', 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
msg = msg.replace('\r\n', '') self.assertNotIn('\r', msg) self.assertNotIn('\n', msg)
payload = json.dumps(data)
'options': self.xml.get('options'), 'testdat': 'hello world',
self.models = None
self.wait_for_element_visibility( self._bounded_selector(self.ADDER_SELECTOR), "Adder is visible." )
return dict((_instantiate(k, bindings), _instantiate(v, bindings)) for k, v in six.iteritems(proxy))
try: with open(path, 'a'): os.utime(path, None) except (IOError, OSError): return False return True
from pylearn2.datasets import vector_spaces_dataset
if status is not None: if status in self.NOTIFICATION_MESSAGES: found_msg = False for message in self.NOTIFICATION_MESSAGES[status]: if message in response.content: found_msg = True break
pass
salt.utils.minion.cache_jobs(self.opts, load['jid'], ret)
CATEGORY = "vertical" DATA = '' METADATA = {} MODEL_DATA = {'data': '<some_module></some_module>'}
import logging import os import re
FEATURES['ENABLE_PAYMENT_FAKE'] = True
import jinja2
response = salt.utils.vmware.esxcli(host, username, password, cmd, protocol=protocol, port=port) ret.update({host: _format_syslog_config(response)})
eps = 0.8 min_samples = 10 metric = distance.euclidean core_samples, labels = dbscan(X, metric=metric, eps=eps, min_samples=min_samples, algorithm='ball_tree')
if _TRAFFICLINE: cmd = _traffic_line('-S') else: cmd = _traffic_ctl('server', 'stop')
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
from __future__ import unicode_literals
original_values_map = self.get_settings_fields_of_each_type() self.set_wrong_inputs_to_fields()
self.registration.activate() self.assertTrue(self.user.is_active) self.assertFalse(mock_segment_identify.called)
if index < 0: index = len(sysPath) + index + 1 if index > len(sysPath): index = len(sysPath)
try: import keyring import keyring.backend
try: import msgpack except ImportError: import msgpack_pure as msgpack
actual_status = certs_api.example_certificates_status(self.COURSE_KEY) self.assertEqual(list(expected_statuses), actual_status)
return promote(getitem(key))
user = UserFactory() user.name = 'mock_user' user.is_staff = is_staff user.is_enrolled = is_enrolled user.is_authenticated = lambda: is_authenticated return user
output = os.linesep.join(output.splitlines())
actions = None
wp = Panel(vals, copy=True) self.assertIsNot(wp.values, vals)
result = store.select( 'df', start=30, stop=40) expected = df.iloc[30:40, :] tm.assert_frame_equal(result, expected)
self.assertEqual(self.loader._dict, {}) self.assertTrue(inspect.isfunction(self.loader['test.ping']))
mac_brew.__context__ = {} mac_brew.__salt__ = {} mac_brew.__opts__ = {'user': MagicMock(return_value='bar')}
'recon_max': float,
min_samples = X.shape[1] + 1
with check_exact_number_of_calls(store, '_get_cached_metadata_inheritance_tree', 1):
func()
ovr = OneVsRestClassifier(DecisionTreeClassifier()) ovr.fit(iris.data, iris.target) assert_raises(AttributeError, lambda x: ovr.coef_, None)
key = UsageKey.from_string(ref_string) return key.replace(run=self.modulestore.fill_in_run(key.course_key).run)
level = int(level) if level < self.level: return self.added_new = True message = Message(level, message, extra_tags=extra_tags) self._queued_messages.append(message)
qry = 'OPTIMIZE TABLE {0}.{1}'.format(s_name, s_table) _execute(cur, qry) results = cur.fetchall() log.debug(results) return results
return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)
if value is None: value = self._empty_value final_attrs = self.build_attrs(attrs) return self.renderer(name, value, final_attrs, self.choices)
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
html=True
checkpoint = verification_statuses.get(checkpoint) has_completed_check = bool(checkpoint)
raise NotImplementedError
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, source_course_key): component = self.store.get_item(unit.location) self.assertEqual(component.display_name, updated_display_name)
self.assertEqual(len(exported_static_files), 1) self.assertTrue(filesystem.exists(expected_displayname)) self.assertEqual(exported_static_files[0], expected_displayname)
return self._get_course_info(request, course)
if credit_service: credit_state = credit_service.get_credit_state(user_id, course_id) if credit_state: context.update({ 'credit_state': credit_state })
sub_match_args = sub_match.args if not sub_match_dict: sub_match_args = match.groups() + sub_match.args
microsite.set_by_domain(self.microsite.site.domain) self.assertTrue(microsite.has_override_value('platform_name'))
raise NotImplementedError('subclasses of BasePasswordHasher must provide an encode() method')
log = logging.getLogger(__name__)
for X in [self.train.X, self.test.X]: assert X.min() == 0.0 assert X.max() == 1.0
if entry in finished: continue else: finished.append(entry)
form_data = {'course_id': self.course.id.run, 'email_enabled': True} form = CourseAuthorizationAdminForm(data=form_data) self.assertFalse(form.is_valid())
self.fast_deletes = []
self.assertEqual(rendered_html.tag, "div")
if __Expiration__ != '': timenow = datetime.utcnow() timestamp = timenow.strftime('%Y-%m-%dT%H:%M:%SZ') if timestamp < __Expiration__: return __AccessKeyId__, __SecretAccessKey__, __Token__
return cart.has_items()
self.envelope = poly.envelope
if self.edx_video_id and edxval_api: val_youtube_id = edxval_api.get_url_for_profile(self.edx_video_id, "youtube") if val_youtube_id: video_id = val_youtube_id
class EpisodePermanent(Episode): pass
return self.q(css=self.BOOKMARKS_BUTTON_SELECTOR).visible
user = kwargs['user'] updated_state = kwargs['state'] update_course_creator_group(kwargs['caller'], user, updated_state == CourseCreator.GRANTED)
html_static_path = ['_static']
if ret['retcode'] > 1: del ret['stdout'] return ret elif not ret['retcode']: return data
redirect_to = get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to)
ret['comment'] = 'Target was successfully mounted' ret['changes']['mount'] = True
CREDIT_PROVIDER_TIMESTAMP_EXPIRATION = 15 * 60
if not self._is_master_running(): raise salt.exceptions.SaltDaemonNotRunning( 'Salt Master is not available.')
elif request.method == 'DELETE': try: re_validate_certificate(request, course_key, certificate) except ValueError as error: return JsonResponse({'message': error.message}, status=400)
except StopIteration: log.info("Extension requested training halt.") continue_learning = False
if update.IsInstalled: results['Installed'] += 1
not_loaded = list(set(mods) - set(already_loaded))
if type(MultiprocessingProcess) is type(tgt) and ( issubclass(tgt, MultiprocessingProcess)): need_log_queue = True else: need_log_queue = False
self._assert_output(output, (self.user, self.courses[0].id, True))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, call, mock_open, NO_MOCK, NO_MOCK_REASON, MagicMock
html_use_smartypants = True
self.assert_index_equal(result.insert(1, 'z'), result.insert(-2, 'z'))
from __future__ import absolute_import
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
return default_pprint
fn_.write(self.dumps(msg, use_bin_type=True))
try: sfn, source_sum, comment = __salt__['file.get_managed']( cron_path, template, source, source_hash, owner, group, mode, __env__, context, defaults,
if not found_domain: new_contents.insert(0, 'domain {0}\n' . format(domainname))
num_braces = 0
self.xmin = xlim[0] self.xmax = xlim[1] self.delta_x = (self.xmax-self.xmin)/float(self.cols-1)
show_openedx_logo = bool(request.GET.get('show-openedx-logo', False))
with tm.assert_produces_warning(FutureWarning): rng += other tm.assert_index_equal(rng, expected)
params[ '{0}BlockDeviceMapping.{1}.DeviceName'.format( spot_prefix, dev_index ) ] = rd_name
grains = dict() if osdata['kernel'] != 'Windows': return grains
if is_iterator(key): raise InvalidIndexError(key) else: raise e1
result.status_code
the_mean = self.mixed_frame.mean(axis=1) the_sum = self.mixed_frame.sum(axis=1, numeric_only=True) self.assert_index_equal(the_sum.index, the_mean.index)
if np.abs(np_var(A) - two_pass_var(A)).max() < 1e-6: stable_var = np_var else: stable_var = two_pass_var
display_name = models.CharField(max_length=255, default="", blank=True)
from __future__ import absolute_import import logging
echo "manual" > /etc/init/salt-master.override
req_basepath = (self.venv_dir)
return self._doc_id
if settings.DEBUG and not urlpatterns: urlpatterns += staticfiles_urlpatterns()
pass
return tolerance
'root_dir': str,
_skip_if_no_xlrd()
if oob: indexer = slice(0, 0) else: indexer = slice(-6, 6) self.check(result, s, indexer, False)
form_class_attrs = { 'Meta': Meta, 'formfield_callback': formfield_callback }
kernel = RBF(length_scale=1.0)
self.q(css="a.forgot-password").click()
if re.search('^{0}$'.format(re.escape(content)), r_data, flags=flags_num): found = True
self.assertEqual( InternalCertificationAudit._meta.verbose_name_plural, 'Audits' )
def __init__(self, func): self.func = func
from __future__ import absolute_import import os import textwrap import tempfile
data = models.OneToOneField(Anchor, models.CASCADE, primary_key=True)
import salt.utils from salt.exceptions import CommandExecutionError try: import salt.utils.pycrypto HAS_CRYPT = True except ImportError: HAS_CRYPT = False
import integration
return self.page.paginator.count
del_cached_content(thumbnail_location) if thumbnail_content is not None: content.thumbnail_location = thumbnail_location
files_to_fingerprint = list(PYTHON_REQ_FILES)
self.q(css=self._bounded_selector(self.TAG_SELECTOR)).filter(lambda el: tag_name in el.text).click()
return '/etc/sysconfig/scripts/SuSEfirewall2-custom'
if m > n: m, n = n, m
ax0 = self.obj._get_axis(0) if isinstance(ax0, MultiIndex): result = self._handle_lowerdim_multi_index_axis0(tup) if result is not None: return result
return self.fields
msg = '%200s has no associated address class' % (type(self),) raise NotImplementedError(msg)
MOCK_HOSTNAME = 'very.long.complex.fqdn.that.is.crazy.extra.long.example.com'
filtered_list = list(cls.FILTERED_LIST)
return user[0].state
if self._isClockwise(poly.exterior_ring): poly.exterior_ring = list(reversed(poly.exterior_ring))
self.assertEqual('10000', nformat(self.l, decimal_sep='.', decimal_pos=0, grouping=0, force_grouping=True))
result = df.unstack(fill_value=0.5)
self.fmtlist = ["%td" if x.startswith("%td") else x for x in self.fmtlist]
with new_connection.cursor(): pass new_connection.queries_log.clear()
from __future__ import unicode_literals
if isinstance(source, (tuple, list)): source, = source
course_outline.visit() subsection = course_outline.section_at(0).subsection_at(0) subsection.expand_subsection() subsection.add_unit()
expected_index = (pd.period_range(start=start, end=end, freq='D') - 1) expected = pd.Series(1, index=expected_index) assert_series_equal(result, expected)
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.NEVER_PUBLISHED, is_locked=True), self.STAFF_ONLY_WARNING )
if user_must_complete_entrance_exam(request, user, course): return redirect(reverse('courseware', args=[unicode(course.id)]))
return self.defaults.get("ask_initial", False)
self.assertTrue(config['blah'])
if not value: return None else: return connection.ops.Adapter(self.get_prep_value(value))
assert test.X.shape[0] % batch_size == 0
mode = models.CharField(max_length=100, default='', blank=True) image = models.ImageField(upload_to='badge_classes', validators=[validate_badge_image])
if settings.FEATURES.get('USE_CUSTOM_THEME') and message_key in messages.CUSTOM_THEME_OVERRIDES: message_dict = messages.CUSTOM_THEME_OVERRIDES
final_obj = OrderedDict(yaml.deserialize(yml_src)) assert obj != final_obj
cls._field_list_filters.insert( cls._take_priority_index, (test, list_filter_class)) cls._take_priority_index += 1
supports_num_points_poly = False
self._verify_components_visible(['problem']) self._verify_student_view_locked()
assert_warns(UserWarning, BaggingRegressor(base_estimator=DecisionTreeRegressor(), n_estimators=1, bootstrap=True, oob_score=True, random_state=rng).fit, X_train, y_train)
new_display_name = "The Trouble with Tribbles" new_weight = 20 problem_block_course.display_name = new_display_name problem_block_course.weight = new_weight self.store.update_item(problem_block_course, self.user_id)
self.assertEqual( list(Order.objects.exclude(items__status=1)), list(Order.objects.exclude(Q(items__status=1)).distinct()))
config_id = create_config(kwargs={'name': name, 'linode_id': node_id, 'root_disk_id': root_disk_id, 'swap_disk_id': swap_disk_id})['ConfigID']
return HttpResponse(content="")
multiprocessing.active_children()
self.assertRaises(AttributeError, getattr, grouped, 'foo')
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, self.course.id): self.store.delete_item(self.subsection.location, ModuleStoreEnum.UserID.test)
with mock.patch.dict('django.conf.settings.FEATURES', {'ENABLE_MKTG_SITE': True}): self.assertEquals(self.get_about_page_link(), None)
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
kwargs['verbose_name'] = verbose_name
if not isinstance(opExpr, Optional): opExpr = Optional(opExpr) matchExpr = FollowedBy(opExpr.expr + thisExpr) + Group( opExpr + thisExpr )
return T.sum(T.mean(T.sqr(Y-Y_hat), axis=batch_axis))
for alias, mirror_alias in mirrored_aliases.items(): connections[alias].creation.set_as_test_mirror( connections[mirror_alias].settings_dict)
try: cached_mapping = CourseStructure.objects.get(course_id=course.id).discussion_id_map if not cached_mapping: raise DiscussionIdMapIsNotCached() return cached_mapping.get(discussion_id) except CourseStructure.DoesNotExist: raise DiscussionIdMapIsNotCached()
urlconf_module = arg
try:
from __future__ import absolute_import import os import fnmatch import re import logging
formset.save()
UserPartition.scheme_extensions = None super(GroupAccessTestCase, self).tearDown()
X = csr_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
continue
rendered = "0.post%d" % pieces["distance"] if pieces["dirty"]: rendered += ".dev0" rendered += "+g%s" % pieces["short"]
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
import salt.utils
self.assertEqual(response.status_code, 200) self.assertEqual(len(mail.outbox), 1)
apiserver_url = "http://127.0.0.1:8080"
import salt.utils
user_answer = json.loads(user_answer)
UserProfile.objects.exists() return HttpResponse(mock_render_to_string(template_name, context))
for k, v in six.iteritems(self.parent.global_data): if k not in self._data: self._data[k] = copy.deepcopy(v)
if queue in minion_tracker: minion_tracker[queue]['active'] = False
shutil.rmtree(self.dirname)
masquerade_settings = getattr(user, 'masquerade_settings', {}) return masquerade_settings.get(course_key, None)
tz = self.tzstr("Europe/London")
df = DataFrame( np.random.randn(5, 5), columns=['A', 'B', 'B', 'B', 'A'])
delete_item(category='chapter', name='chapter_2')
from salt.utils import get_group_list
self.assertTrue(result_dict['success'])
self.create_squares_with_executemany(args)
try: course_key = CourseKey.from_string(key) except InvalidKeyError: course_key = key return isinstance(course_key, CourseKey)
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
graph = image.img_to_graph(img, mask=mask)
try: length = int(self.headers.getheader('content-length')) except (TypeError, ValueError): return "" else: return self.rfile.read(length)
import salt.ext.six as six
self.asides = block_data.get('asides', {})
report_comments = models.TextField(default="")
rng = np.random.RandomState(0) X = rng.rand(10, 20)
for gen in xrange(3): gc.collect(gen) scanner.dump_all_objects( format_str.format("gc-gen-{}".format(gen)) )
data = [(type(d) is dict) and d or dict(d) for d in data]
group = self.get_node(key) if group is None: return None s = self._create_storer(group) s.infer_axes() return s
self.assertEqual(self.func(None), [csrf.W016])
try: from pandas.core.index import MultiIndex except ImportError: pass
info = next(six.itervalues(next(six.itervalues(next(six.itervalues(info))))))
import salt.utils.templates from salt.exceptions import SaltRenderError
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
required_boto3_version = '1.2.1'
self.refresh_course() return section
response = self.client.post(self.url, { "password": self.PASSWORD, }) self.assertHttpBadRequest(response)
for s in [Series(range(5)), Series(range(5), index=range(1, 6))]:
course = CourseFactory.create( org=org, number=course_number, run=course_run, display_name=display_name, default_store=ModuleStoreEnum.Type.split )
raise TypeError('incompatible index of inserted column ' 'with frame index')
return (v_prime * Q ** 2).sum(axis=-1)
xpath = "//div[@class='%s ']" % div_class self.assert_has_xpath(xml, xpath, self.context)
_mbce = MeanBinaryCrossEntropy() reconstruction_cost = lambda a, b: _mbce.cost(a, b) / ds.X.shape[1]
for ax in axes[[0, 1, 2], [0]].ravel(): self._check_visible(ax.get_yticklabels(), visible=True)
if hasattr(self, 'mlp'): return self.mlp return None
import logging
courses_having_prerequisites = frozenset( enrollment.course_id for enrollment in course_enrollments if enrollment.course_overview.pre_requisite_courses ) courses_requirements_not_met = get_pre_requisite_courses_not_completed(user, courses_having_prerequisites)
bandwidth = ET.SubElement(content, 'bandwidth') bandwidth.text = config.get_cloud_config_value( 'bandwidth', vm_, __opts__, default='100', search_global=False )
self._create_course_unit(subtitles=True) self.edit_component() self.video.upload_transcript('english_single_transcript.srt')
saltenv = env
return 'some html safe content'
class CustomErrorList(ErrorList): pass
import logging
return [item + '\n' for item in ifcfg]
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
PAYMENT_REPORT_GENERATOR_GROUP = ENV_TOKENS.get('PAYMENT_REPORT_GENERATOR_GROUP', PAYMENT_REPORT_GENERATOR_GROUP)
return self.report_download_links.map(lambda el: el.text)
from __future__ import absolute_import
block_structure.request_xblock_fields('category')
return MilestoneError() if any_unfulfilled_milestones(course_id, user.id) else ACCESS_GRANTED
BULK_EMAIL_INFINITE_RETRY_CAP = 1000
value = self._resolve_lookup(context)
for k, v in grouped: self.assertEqual(len(v.columns), 2)
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
return modulestore.get_library(structure_key, depth=None)
return self.descriptor.is_configured
version_guids = [] id_version_map = defaultdict(list) for course_index in matching_indexes: version_guid = course_index['versions'][branch] version_guids.append(version_guid) id_version_map[version_guid].append(course_index) return version_guids, id_version_map
s = Series([1, 2, 3, 4], index=list('abde'))
'limits': { 'CPU': 1, },
_ = lambda text: text
f = lambda: s_or_idx.str.extract('(?:[AB]).*', expand=True) self.assertRaises(ValueError, f)
if 0.5 not in percentiles: percentiles.append(0.5) percentiles = np.asarray(percentiles)
line_X = np.arange(-5, 5) line_y = model.predict(line_X[:, np.newaxis]) line_y_ransac = model_ransac.predict(line_X[:, np.newaxis])
self.config.pop(self._logfile_loglevel_config_setting_name_)
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
return model.log_prob(X) - self.noise.log_prob(X)
try: user.email_user( subject, message, theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL) )
to_return = (list(maybe_read_encoded_stream(req, encoding, compression)) + [compression]) return tuple(to_return)
saltenv = env
return list( { attr: video[attr] for attr in ["edx_video_id", "client_video_id", "created", "duration", "status"] } for video in _get_videos(course) )
import salt.ext.six as six from salt.ext.six.moves import filter from salt.ext.six.moves.urllib.parse import quote as _quote
for (label_to_value_map, label_to_value_func) in zip(label_to_value_maps, norb.label_to_value_funcs): for label, expected_value in six.iteritems(label_to_value_map): actual_value = label_to_value_func(label) assert expected_value == actual_value
__salt__['file.comment_line'](name, regex, char, True, backup)
self.client.login(username=self.staff_usr, password='test') resp = self.client.get(self.url_locked) self.assertEqual(resp.status_code, 200)
add_user_with_status_granted(self.admin, self.user) self.assertEqual('unrequested', get_course_creator_status(self.user))
import salt.utils import salt.utils.dictupdate import salt.utils.minions
df.astype(str)
chunks = [kwargs]
if revision == ModuleStoreEnum.RevisionOption.published_only: return get_published()
dict(safe_zip(range(0, 36, 2), numpy.arange(0, 360, 20))),
continue
clf = ARDRegression(compute_score=True) clf.fit(X, y)
self.course_nav.go_to_section('Test Section', 'Test Subsection')
supports_sequence_reset = True
if type(indicator) == str: indicator = [indicator]
SHORT_DATE_FORMAT = 'm/d/Y'
return ACCESS_GRANTED
if delete_published: item['_id']['revision'] = MongoRevisionKey.published to_be_deleted.append(item['_id'])
if installed_apps is not None: self.populate(installed_apps)
try: import SoftLayer HAS_SLLIBS = True except ImportError: HAS_SLLIBS = False
return "django_date_extract('%s', %s)" % (lookup_type.lower(), field_name)
if fails is not None: if isinstance(detail, fails): result = 'ok (%s)' % type(detail).__name__ _print(result) return
data_home = get_data_home(data_home) shutil.rmtree(data_home)
url = reverse("certificates:search") + "?user=" + user_filter if course_filter: url += '&course_id=' + course_filter return self.client.get(url)
import matplotlib.pyplot as plt
[(CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG, CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG)]
jdict['__master_id__'] = event['data']['master_id']
self.cursor.numbersAsStrings = True self.cursor.arraysize = 100
b_float32 = astype(a_int32, dtype=np.float32, copy=False) assert_equal(b_float32.dtype, np.float32)
messages = [
self.assertIsInstance( descriptor._field_data._authored_data._source, OverrideFieldData )
with self.assertRaises(TypeError): EmptyQuerySet() self.assertIsInstance(Article.objects.none(), EmptyQuerySet) self.assertFalse(isinstance('', EmptyQuerySet))
max_scores_cache.fetch_from_remote([location_to_cache]) self.assertIsNone(max_scores_cache.get(location_to_cache)) self.check_grade_percent(0.33)
if sample_weight_sum <= 0: break
brc_partial.set_params(n_clusters=3) brc_partial.partial_fit(None) assert_array_equal(brc_partial.subcluster_labels_, brc.subcluster_labels_)
custom_parameters = {}
attempt = SoftwareSecurePhotoVerification.objects.create(user=user)
rnn_mo = neighbors.RadiusNeighborsClassifier(weights=weights, algorithm=algorithm) rnn_mo.fit(X_train, y_train) y_pred_mo = rnn_mo.predict(X_test)
get_geomn = GeomOutput('GEOSGetGeometryN', [GEOM_PTR, c_int])
if store is not None and i not in (4, 5): store.save_asset_metadata(asset_md, asset[4])
sysrc.__salt__ = {} sysrc.__opts__ = {}
train.save = MethodType(only_run_extensions, train)
__virtualname__ = 'service'
from __future__ import absolute_import import salt.utils import sys import types
return s if len(s) <= 80 else s[:77] + "..."
new_conf.append(_format_master(**line))
result = Timestamp(result) self.assertEqual(result.value, expected) self.assertEqual(tslib.pydt_to_i8(result), expected)
from __future__ import unicode_literals
'ALLOW_COURSE_RERUNS': True,
mail.mail_admins = orig_mail_admins admin_email_handler.email_backend = orig_email_backend
if dtype.kind in ['i', 'O', 'f']: dtype = np.float64
enrollment.activate() self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_enrollment_event_was_emitted(user, course_id)
npix = self._npix[zoom]
try: expiry_dates = self._expiry_dates except AttributeError: expiry_dates, _ = self._get_expiry_dates_and_links() return expiry_dates
self.case_sensitive = False
mlp.n_layers_ = 3
def _process_subheader_counts(self, offset, length): pass
pipe2 = clone(pipe) assert_false(pipe.named_steps['svc'] is pipe2.named_steps['svc'])
with self.assertRaises(Http404): self._build_and_run_request(self._anon_user, self._anon_fields)
self.assertEqual(self.cohort1.name, response_dict.get("name"))
community_ta_role.inherit_permissions(moderator_role)
assert all(np.all(this_point.cv_validation_scores == 0.0) for this_point in gs.grid_scores_ if this_point.parameters['parameter'] == FailingClassifier.FAILING_PARAMETER)
(n, d) = a.frac() (n2, d2) = b.frac() return Progress(n + n2, d + d2)
exc_info_on_loglevel=logging.DEBUG
DATE_FORMAT = 'd F Y' TIME_FORMAT = 'g.i.A' YEAR_MONTH_FORMAT = 'F Y' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'Y-m-d'
from salt.states import pyrax_queues
to = str(to)
return block_type in DETACHED_BLOCK_TYPES
import logging
assert_raises(ValueError, sel.transform, np.array([[1], [2]]))
if not is_list_like_indexer(key): key = tuple([key]) else: raise ValueError('Invalid call for scalar access (getting)!')
if self.freq is None: return None return self.freq.freqstr
df1 = DataFrame.from_records(df, index=['C']) tm.assert_index_equal(df1.index, Index(df.C))
course = self.create_course_with_orphans(module_store)
'disable_returners': list,
axis0 = 'sample' axis1 = 'label' if average == 'samples': axis0, axis1 = axis1, axis0
self._test_create_model("test_mltdb_crmo2", should_run=False)
GeoIP_open = lgeoip.GeoIP_open GeoIP_open.restype = DBTYPE GeoIP_delete = lgeoip.GeoIP_delete GeoIP_delete.argtypes = [DBTYPE] GeoIP_delete.restype = None
self.assertEqual(len(response['results']), 0)
with self.assertRaises(Exception) as cm: admin.autodiscover() self.assertEqual(str(cm.exception), "Bad admin module")
resp = self.client.get(reverse('dashboard'), HTTP_HOST=settings.MICROSITE_TEST_HOSTNAME) self.assertContains(resp, 'Robot_Super_Course') self.assertNotContains(resp, 'Robot_Course_Outside_Microsite')
self.certificates_section.wait_for_certificate_exceptions_section()
if isinstance(target_name, numbers.Integral): target_name = col_names[target_name] if isinstance(data_name, numbers.Integral): data_name = col_names[data_name]
flat = {} for d in self.dicts: flat.update(d) return flat
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
import logging import re
self.client.login(username=self.global_staff.username, password="test") self._assert_certificates_visible(True)
if os.path.isfile('/etc/mtab'): shutil.move('/etc/mtab', '/tmp/mtab')
from salt.pillar import sqlite3
names = []
'f82b5416c9f54b5ce33989511bb5ef2e', self._get_anonymous_id(SlashSeparatedCourseKey('MITx', '6.00x', '2013_Spring'), descriptor_class)
break
import salt.utils.event
self.xblock.test_content_field = "Explicitly set" self.xblock.test_settings_field = "Explicitly set" self.xblock.save()
saltenv = env
super(Minion, self).__init__(opts) self.timeout = timeout self.safe = safe
from __future__ import absolute_import, generators, print_function, with_statement import re import logging
return self.model._meta
ldict, rdict = defaultdict(list), defaultdict(list)
return
reg_code = CourseRegistrationCode.objects.get(code=reg_code.code) self.assertEqual(reg_code.is_valid, True)
_get_file_from_s3(metadata, saltenv, bucket, file_path, cached_file_path)
status_code = status.HTTP_400_BAD_REQUEST
prepend_root_dirs = [ 'formula_path', 'pillar_path', 'reactor_path', 'spm_cache_dir', 'spm_build_dir' ]
key, _ = convert_missing_indexer(idx)
if extracted: self.users.add(*extracted) for user in self.users.all(): CohortMembership.objects.create( user=user, course_user_group=self, )
if logo_image: notification_msg.attach(logo_image)
with storebuilder.build() as (__, store): course = CourseFactory.create(modulestore=store)
for i in range(3):
input_css = "$('.CodeMirror')[0].CodeMirror.setValue('{}');".format(response_str) self.browser.execute_script(input_css)
continue
warnings.warn("localedirs is ignored when domain is 'django'.", RuntimeWarning) localedirs = None
import salt.utils.boto3 import salt.utils.compat import salt.utils from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
for idx, code in enumerate(sorted(final_codes)):
self.app_configs = self.stored_app_configs.pop() self.apps_ready = self.models_ready = self.ready = True self.clear_cache()
if self.__no_lock: self.__no_lock = not self.__refresh
other = UserFactory.create() self.client.login(username=other.username, password='test') self.enroll() self.logout()
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
mako_middleware_process_request(request) response = views.course_about(request, unicode(course.id)) self.assertEqual(response.status_code, 200) self.assertNotIn(in_cart_span, response.content)
if lib.isscalar(values): dtype, values = _infer_dtype_from_scalar(values) try: values = dtype(values) except TypeError: pass return values
ret['create'][nodename] = nodedata alias, driver = nodedata['provider'].split(':') defined.add((alias, driver, nodename))
many_days = datetime.timedelta(days=60)
del params["name"] assert_name_error("Your legal name must be a minimum of two characters long")
test_course_data = self.assert_created_course() course_id = _get_course_id(self.store, test_course_data) course_module = self.store.get_course(course_id) self.assertEquals(course_module.language, 'hr')
q = Author.objects.raw('SELECT * FROM raw_query_author') self.assertIsNone(q.query.cursor) list(q) self.assertIsNotNone(q.query.cursor)
targets.append(':'.join(_get_repo_tag(str(target))))
from __future__ import absolute_import import logging import yaml import urllib
raise RedirectCycleError("Redirect loop detected.", last_response=response)
c.value = 5 with self.assertRaises(IntegrityError): with transaction.atomic(): c.save(force_insert=True)
PIPELINE_JS_COMPRESSOR = None
return self.sort_values(return_indexer=True, ascending=ascending)
if level is not None and (self_is_mi or other_is_mi): return self._join_level(other, level, how=how, return_indexers=return_indexers)
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
spec_mapping = tuple( self._fill_mapping(sub_space, sub_source) for sub_space, sub_source in safe_zip( space.components, source))
indexer = _update_indexer(_convert_to_indexer( self.get_loc_level(k, level=i, drop_level=False)[0]), indexer=indexer)
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_key): assertProblemNameEquals(problem_original_name)
import salt.ext.six
__virtualname__ = 'pkg'
self._enter_mockbin()
if isinstance(content, EmailMessage): content = content.message() elif not isinstance(content, Message): content = message_from_string(content)
rng = check_random_state(0) n_features = 2 n_samples = 40 n_output = 3
import salt.ext.six as six HAS_SVN = False try: import pysvn HAS_SVN = True CLIENT = pysvn.Client() except ImportError: pass
from salt.modules import debian_ip
for op in ['__pos__', '__neg__', '__abs__', '__inv__']:
'ENABLE_COURSE_SORTING_BY_START_DATE': True,
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
a.save() self.assertIsNotNone(a.id) self.assertEqual(Article.objects.all().count(), 1)
from __future__ import absolute_import
self.assertTrue(f.has_changed('resume.txt', {'filename': 'resume.txt', 'content': 'My resume'}))
self.assertIn( 'oauth_body_hash="00hq6RNueFa8QiEjhep5cJRHWAI%3D"', prepped_req.headers['Authorization'] )
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
geom_args = bool(geom)
empty_distribution = grades.answer_distributions(self.course.id)
self.assertTrue( self.run_function('xattr.delete', [TEST_FILE, 'squidward']))
return unicode(data)
stamp = Timestamp('3/10/2012 22:00', tz=self.tz('US/Eastern'))
pass
render_pipe = template_shebang(template, renderers, default, blacklist, whitelist, input_data)
return False
session_cache = getattr(self, '_session_cache', {}) return signing.dumps( session_cache, compress=True, salt='django.contrib.sessions.backends.signed_cookies', serializer=self.serializer, )
for X in [X_1row, X_1col, X_list_1row, X_list_1row]:
if not data[pkg_name]: data.pop(pkg_name)
try: role = Role.objects.get(name=rolename, course_id=course_id) except Role.DoesNotExist: return False return role.users.filter(username=uname).exists()
set_random_state(lda, 3) set_random_state(tree, 3) assert_equal(tree.random_state, 3)
if self.op in eval_in_python: res = self.func(left.value, right.value) else: res = pd.eval(self, local_dict=env, engine=engine, parser=parser)
raise TypeError("cannot do {form} indexing on {klass} with these " "indexers [{key}] of {kind}".format( form=form, klass=type(self), key=key, kind=type(key)))
class Channel(models.Model): name = models.CharField(max_length=255)
if '_ordered' not in state:
data_not_concrete_abstract = models.ForeignObject( Relation, on_delete=models.CASCADE, from_fields=['abstract_non_concrete_id'], to_fields=['id'], related_name='fo_abstract_rel', )
all_assets, __ = contentstore('trashcan').get_all_content_for_course(self.course.id) self.assertGreater(len(all_assets), 0)
bio.write(struct.pack(byteorder + 'i', self.text_len))
results = (course for course in results if self.user_can_access_course(self.request.user, course))
try: key = unicode(key, 'utf-8') value = unicode(value, 'utf-8') except UnicodeDecodeError: self.log_message("Could not decode request params as UTF-8")
node = mock.Mock(due=2, extended_due=1) self.assertEqual(self.call_fut(node), 2)
clf = OneVsRestClassifier(base_clf).fit(X, Y) y_pred = clf.predict([[0, 0, 4]])[0] assert_array_equal(y_pred, [0, 0, 1])
for path in glob.glob(path): shutil.rmtree(path)
df2.columns = ['A', 'C'] result = df1.isin(df2) expected['B'] = False tm.assert_frame_equal(result, expected)
_MIN_ELEMENTS = 10000
if not self._requested_xblock_fields: return for xblock_usage_key, xblock in self._xblock_map.iteritems(): for field_name in self._requested_xblock_fields: self._set_xblock_field(xblock_usage_key, xblock, field_name)
certificate_count = 3 for __ in xrange(certificate_count): self.generate_certificate(course_id=self.course.id, mode='honor', status=CertificateStatuses.generating)
signal_handler.reset_mock() section = self.store.create_item(self.user_id, course.id, 'chapter') signal_handler.send.assert_called_with('course_published', course_key=course.id)
import logging logging.basicConfig(filename=TEST_ROOT / "log" / "cms_acceptance.log", level=logging.ERROR)
for i in xrange(1, len(self.aes)): assert (self.aes[i].weights.get_value().shape[0] == self.aes[i - 1].nhid)
if dtype == np.object_: return v.tolist()
former_encoding = sys.getdefaultencoding()
import os import random
assert_frame_equal(result_sort, df.groupby(col, sort=True).first()) assert_frame_equal(result_nosort, df.groupby(col, sort=False).first())
random_instance = check_random_state(random_state) sample_indices = random_instance.randint(0, n_samples, n_samples) return sample_indices
try: common_type = np.common_type(np.array(res), result) if common_type != result.dtype: result = result.astype(common_type) except: pass
ancestors = urlpath.cached_ancestors
syslog_opts.pop('socktype', None)
messages = _log_level_code(level, status_code) self.assertIn('GET A %d' % status_code, messages[0])
self.assertEqual(cached_structure, not_cached_structure)
import os
for course in self.list_courses(): if course['org'] == org and course['number'] == number and course['run'] == run: return True return False
return { 'item_description': 'Course %s Description' % index, 'quantity': index, 'list_price': 10, 'discount': discount, 'item_total': 10 }
try: shutil.rmtree(repo['lockfile']) except OSError as exc: _add_error(failed, repo, exc)
class Meta: proxy = True ordering = ["name"]
try: result = CourseTeam.objects.get(team_id=team_id) except ObjectDoesNotExist: raise CommandError(u"Argument {0} is not a course_team team_id".format(team_id)) return result
return False
df = DataFrame(index=[0, 1], columns=[0]) df.ix[1, 0] = [1, 2, 3] df.ix[1, 0] = [1, 2]
self.assertIn("example_source.mp4", self.item_descriptor.render(STUDENT_VIEW).content)
for label in np.unique(labels): assert_equal(len(np.unique(folds[labels == label])), 1)
NAMES = ['Bexar', 'Galveston', 'Harris', 'Honolulu', 'Pueblo']
rmtree(fs_root, ignore_errors=True)
self.assertEqual(len(mail.outbox), 0)
DATABASE_ROUTERS = []
return self.value
octets = ip_address.split('.') if len(octets) != 4: return False
return self.q(css=INTRO_VIDEO_SELECTOR)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
CourseEnrollment.unenroll(self.user, self.courses[3].id, skip_refund=True)
split_test = self._update_partition_id(0)
module = CapaFactory.create(max_attempts="0", attempts="2") self.assertTrue(module.closed())
X, y = check_X_y(X, y, ['csr', 'csc'])
if not (dtype is None or com.is_int64_dtype(dtype)): raise TypeError('Invalid to pass a non-int64 dtype to RangeIndex')
current_network_settings = _parse_rh_config(_RH_NETWORK_FILE)
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
from itertools import product
if self.eigen_solver == 'auto': if K.shape[0] > 200 and n_components < 10: eigen_solver = 'arpack' else: eigen_solver = 'dense' else: eigen_solver = self.eigen_solver
from __future__ import unicode_literals
for X_minibatch in np.array_split(X, 10): km.partial_fit(X_minibatch)
import os.path import re
for attr, value in base.__dict__.items(): if value is None and attr in declared_fields: declared_fields.pop(attr)
topics_data = self._serialize_and_paginate( TopicsPagination, topics, request, BulkTeamCountTopicSerializer, {'course_id': course.id}, ) topics_data["sort_order"] = sort_order
self.assertEqual(col[1], Timestamp('2000-06-01 07:00:00'))
self.assertContains(response, 'course-container', 2) self._assert_responses(response, 1)
credit_requirements = get_credit_requirements(course_key) paired_requirements = {} for requirement in credit_requirements: namespace = requirement.pop("namespace") paired_requirements.setdefault(namespace, []).append(requirement)
foo = Foo()
result = self.apply(f, reduce=False) if result.ndim == self.ndim: result = result.iloc[0] return result
try: import salt.utils.openstack.neutron as suoneu HAS_NEUTRON = True except NameError as exc: HAS_NEUTRON = False
port_speed = config.get_cloud_config_value( 'port_speed', vm_, __opts__, default=273 ) kwargs['prices'].append({'id': port_speed})
fields = make_immutable_fields_list("get_fields()", fields)
ind.view('i8')
status.__salt__ = {}
template_dirs = tuple(self.dirs) if self.app_dirs: template_dirs += get_app_template_dirs(self.app_dirname) return template_dirs
mlp_first_part = MLP( layers=[ first_indep_layer ], input_space=VectorSpace(features_in_first_mlp), input_source=('features0') )
log.error("etcd: error. python-etcd does not fully support python 2.6, no error information available") raise
prev_ptr = self.ptr srid = self.srid self.ptr = self._create_polygon(length, items) if srid: self.srid = srid capi.destroy_geom(prev_ptr)
r = {k: f.name for k, f in request.FILES.items()} return HttpResponse(json.dumps(r))
return CourseDetails.fetch(course_key)
_(', ').join(force_text(i) for i in list_[:-1]), force_text(last_word), force_text(list_[-1]))
pass
response = self.client.get(self.dashboard_url) self.assertContains(response, attempt.expiration_datetime.strftime("%m/%d/%Y"))
response = self.client.get(self.url) self.assertFalse(self.email_modal_link in response.content)
return self._get_indices([name])[0]
self.obj[item] = s
ind2 = self.index.set_labels(new_labels) assert_matching(ind2.labels, new_labels) assert_matching(self.index.labels, labels)
self.assertEqual(len(h_data['course_modes']), 1) self.assertEqual(h_data['course_modes'][0]['slug'], CourseMode.HONOR)
return force_text(capi.get_band_description(self._ptr))
self._test_email_address_failures(SESLocalAddressCharacterError(554, "Email address contains a bad character"))
if chapter.hide_from_toc or local_hide_from_toc: continue
self.assertContains(self.response, "%s\n - place of work" % company_markup)
self.page.modal_dialog_visible(dialog_type) self.assertIn(dialog_message, self.page.modal_dialog_text(dialog_type))
actual = self.get_exceldf(basename, 'Sheet1', converters=converters) tm.assert_frame_equal(actual, expected)
UUIDGrandchild().save()
if six.PY3: related_names.extend(['試', '試驗+'])
('body_stats', Pipeline([ ('selector', ItemSelector(key='body')),
if root_node is not None: visitor = OuterFormatVisitor(file_contents, results) visitor.visit(root_node) results.prepare_results(file_contents, line_comment_delim=self.LINE_COMMENT_DELIM)
is_hideable = False
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
self.submit_question_answer('p1', {'2_1': u'Correct'})
log = logging.getLogger(__name__)
if self.ignore and field_name not in field_names: continue field = Model._meta.get_field(field_name)
for course_overview in [course_overview_cache_miss, course_overview_cache_hit]: course_overview_tabs = course_overview.tabs.all() course_resp_tabs = {tab.tab_id for tab in course_overview_tabs} self.assertEqual(self.COURSE_OVERVIEW_TABS, course_resp_tabs)
return self.values._slice(slicer)
assert_series_equal(empty, empty2, check_index_type=False)
__salt__
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) course_key = course.id
from __future__ import absolute_import import os import shutil
n_samples = n_features samples = np.arange(n_samples)
if isinstance(value, datetime.timedelta) or value is None: return value return self.from_json(value)
return self._engine.is_monotonic_decreasing
s_database = dbc
for cache in settings.CACHES: caches[cache].clear()
run_check_cmd_kwargs = {'runas': user, 'python_shell': True} if 'shell' in __grains__: run_check_cmd_kwargs['shell'] = __grains__['shell']
if self.choice is None: return None return self.descriptor.get_children()[self.choice]
def empty_gen(): return yield
settings._setup()
self.assertFalse(SignatureValidator(self.lti_consumer).check_client_key(key))
return html.cssselect('.course-item[data-course-key="{}"]'.format(unicode(course_key)))
result = df.xs(1, level=2, drop_level=False) assert_frame_equal(result, expected)
from __future__ import absolute_import, division, print_function import contextlib import copy import collections import datetime
_address_class = IPv4Address
mode = models.CharField(default=CourseMode.DEFAULT_MODE_SLUG, max_length=100)
self.login() response = self.client.get('/logout/') self.assertIn('site', response.context)
return beta_from_design(dataset.X, **kwargs)
expected_body = json.dumps({'correct': True, 'score': 1, 'msg': '<div></div>'}) self._check_grade_response(callback_url, expected_header, expected_body)
fld = forms.GeometryField(required=False) self.assertIsNone(fld.clean(None))
result = f.clean('1:30:05 PM') self.assertEqual(result, time(13, 30, 5))
self.exp_dirichlet_component_ = np.exp( _dirichlet_expectation_2d(self.components_)) self.n_batch_iter_ += 1 return
'LICENSING': False,
login = self.client.post(login_url, self.joepublic_login) self.assertEqual(login.status_code, 200) self.assertContains(login, ERROR_MESSAGE)
view_name = None
request = Mock() request.GET = request.POST = {'task_id': task_id} return instructor_task_status(request)
riak.__salt__ = {}
dual_coef = linalg.solve(K, y, sym_pos=True, overwrite_a=False)
srcinfo.append(__salt__['cp.cache_file'](pkg_src, saltenv))
tasks.environment = MockEnvironment()
self._initialize_mixed(mappings={})
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, call, Mock
dt_obj = salt.utils.date_cast(newdate)
out = -np.sum(sample_weight * log_logistic(yz)) + .5 * alpha * np.dot(w, w) return out
from salt.modules import win_dism as dism
val1 = ts.asof(str(ts.index[7])) self.assertEqual(val1, ts[4])
if name == 'due': return None if name == 'start' and block.category != 'course': return None
elif existing['code'] == 404:
if not hasattr(self, 'names_to_del'): self.names_to_del = set() self.names_to_del = self.names_to_del.union(names)
import salt.utils from salt.exceptions import CommandExecutionError, MinionError
raise NotImplementedError()
with tm.assertRaisesRegexp( IndexError, 'single positional indexer is out-of-bounds'): s.iloc[30] self.assertRaises(IndexError, lambda: s.iloc[-30])
import salt.ext.six as six
class Person(Form): first_name = CharField() last_name = CharField() birthday = DateField()
this_yaml = test_yaml_which_set % {'which_set': 'bogus'} try: yaml_parse.load(this_yaml) raise AssertionError except ValueError: pass
from sklearn.tree._tree import TREE_LEAF X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) k = 4
rows = [[1, 2, 3], [4, 5, 6]]
if ext not in self.suffix_map:
functions = self.functions self.functions = {} returners = self.returners self.returners = {}
activations = self._forward_pass(activations)
for chunk in iter(lambda: ifile.read(chunk_size), b''): hash_obj.update(chunk) return hash_obj.hexdigest()
return self.pdf.current_page_count() == 1
assert_raises(ValueError, compute_sample_weight, {1: 2, 2: 1}, y_)
try: import redis HAS_REDIS = True except ImportError: HAS_REDIS = False
elif is_integer(label): self._invalid_indexer('slice', label)
scale = 0.5
result = a.dot(b['one']) tm.assert_series_equal(result, expected['one'], check_names=False) self.assertTrue(result.name is None)
expected = Series([1., 3., 5., 7., np.nan, 11.])
from salt.states import boto_elb
for name, value in tb_frame.f_locals.items(): cleansed[name] = self.cleanse_special_types(request, value)
test_invalid_token("AAAAAAAAAAAAAAAAAAAAAC6iLXGhjkFytJoJSBJZzJ4=", "padding")
students = [instructor, staff, self.coach] + [ UserFactory.create(is_staff=False) for _ in range(3) ]
ret['changes'] = {'old': '', 'new': name}
if self.min_weight_fraction_leaf != 0. and sample_weight is not None: min_weight_leaf = (self.min_weight_fraction_leaf * np.sum(sample_weight)) else: min_weight_leaf = 0.
df.ix['d', :] = nan
enable_course_home_improvements = BooleanField( default=False, verbose_name=_("Enable course home page improvements.") )
class Managed1(models.Model): mm = models.ManyToManyField(Unmanaged1)
if value: params.append(template % value)
for course in store.get_courses(**kwargs): course_id = self._clean_locator_for_mapping(course.id) if course_id not in courses: courses[course_id] = course
group = self.get_node(key) if group is None: raise KeyError('No object named %s in the file' % key) return self._read_group(group)
silence_use_for_related_fields_deprecation = True
return self.profile_image_uploaded_at is not None
return self.categories.itemsize
with override_settings(CREDIT_PROVIDER_SECRET_KEYS={}): response = self.post_credit_request(self.user.username, self.eligibility.course.course_key) self.assertEqual(response.status_code, 400)
score = sub_api.get_score(student_item) self.assertIs(score, None)
related = RelatedModel.objects.create(exact=False) relation = related.test_fk.create() self.assertEqual(related.test_fk.get(), relation)
return StudentModule.objects.get(pk=self.student_module_id)
chunk = self.data[self.cursor:(self.cursor + chunk_size)] self.cursor += chunk_size return chunk
objects = Series([1, 2, 3], dtype=object)
git_import.add_repo(self.TEST_REPO, repo_dir / 'edx4edx_lite', self.TEST_BRANCH) def_ms = modulestore() self.assertIsNotNone(def_ms.get_course(self.TEST_BRANCH_COURSE))
val = v.tostring(self.encoding) return "(%s %s %s)" % (self.lhs, self.op, val)
objects = models.Manager()
cache.set("hello2", "goodbye2") self.assertIn("hello2", cache) self.assertNotIn("goodbye2", cache)
if ax.is_all_dates: from pandas.tseries.tools import to_datetime before = to_datetime(before) after = to_datetime(after)
from salt.states import postgres_user
return not self.low_mark and self.high_mark is None
ret['Comment'] = "Failed with failure code: {0}".format(exc[5]) ret['Success'] = False
global __AccessKeyId__, __SecretAccessKey__, __Token__, __Expiration__
v3.set_params(strip_accents='ascii', lowercase=False) assert_equal(v3.build_preprocessor(), strip_accents_ascii)
(osfullname, _) = osinfo.Name.split('|', 1) osfullname = osfullname.strip()
plt.close('all')
from __future__ import absolute_import import os import sys import stat import codecs import shutil import hashlib import socket import tempfile import time import subprocess import multiprocessing import logging import pipes import msgpack import traceback import copy import re import uuid
allow_database_queries = True
with override_settings(CREDIT_PROVIDER_SECRET_KEYS={}): response = self._credit_provider_callback(request_uuid, 'approved', keys={}) self.assertEqual(response.status_code, 403)
excluded_books = annotated_books.exclude(publisher__name="__UNLIKELY_VALUE__")
'ENABLE_LTI_PROVIDER': False,
with self.settings(TIME_ZONE=new_tz): new_connection.set_autocommit(False) cursor = new_connection.cursor() new_connection.rollback()
import salt.ext.six as six
self.assertEquals(provider2.icon_image, provider1.icon_image) self.assertEquals(provider2.name, post_data['name'])
trimmed = strings while len(strings) > 0 and all([x[0] == ' ' for x in trimmed]): trimmed = [x[1:] for x in trimmed] return trimmed
strides = None total_buffer_len = None
locale_dirs = ['locale/']
return services[name]
import logging log = logging.getLogger(__name__)
for cache_params in settings.CACHES.values(): cache_params.update({'LOCATION': self.dirname}) setting_changed.send(self.__class__, setting='CACHES', enter=False)
pass
self.io_loop.remove_timeout(timeout)
names = sorted(str_repl, key=len, reverse=True)
for path in utils.get_files(self.storage, ignore_patterns): yield path, self.storage
if (is_day and day_nanos % offset.nanos == 0) or not is_day: return _adjust_dates_anchored(first, last, offset, closed=closed, base=base)
plt.matshow(importances, cmap=plt.cm.hot) plt.title("Pixel importances with forests of trees") plt.show()
self.assertRaises( ValueError, lambda: DataFrame([pd.Categorical(list('abc')), pd.Categorical(list('abdefg'))]))
from __future__ import absolute_import
self.assertRaises(ValueError, lambda: Timedelta('3.1415'))
td = Series(date_range('20130101', periods=4)) - \ Series(date_range('20121201', periods=4)) td[2] += timedelta(minutes=5, seconds=3) td[3] = np.nan
scsi_spec.device.sharedBus = vim.vm.device.VirtualSCSIController.Sharing.virtualSharing
if not func_accepts_kwargs(receiver): raise ValueError("Signal receivers must accept keyword arguments (**kwargs).")
rng = np.random.RandomState(0) X_ = rng.random_sample((5, 10)) y_ = np.ones(X_.shape[0]) y_[0] = 0
self.course_hierarchy = self.get_course_hierarchy() self.blocks = self.build_course(self.course_hierarchy) self.course = self.blocks['course']
assert_series_equal(result + td2, td1)
self.assertIn( 'Failed to setup the Syslog logging handler', '\n'.join(ret[1]) ) self.assertEqual(ret[2], 2)
salt '*' vsphere.enable_firewall_ruleset my.esxi.host root bad-password True 'syslog'
objects = CourseActionStateManager()
input_dict = {'1_2_1': '42', '1_2_2': '42'} correct_map = problem.grade_answers(input_dict)
if do_ref: df.ix[0, "c"]
with remove_ccx(dest_key) as (dest_key, restore): return restore(self._modulestore.copy_from_template( source_keys, dest_key, user_id, **kwargs ))
self.assertTrue(hasattr(course_overview_before, 'image_set'))
log = logging.getLogger(__name__)
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, )
max_prec = model_field.max_digits - model_field.decimal_places
try:
if not __execute_cmd('config -g cfgUserAdmin -o \ cfgUserAdminUserName -i {0} {1}'.format(uid, username)): delete_user(username, uid) return False
return True
resp_params = PaymentFakeView.response_post_params(post_params) self.assertEqual(resp_params.get('decision'), 'DECLINE')
if len(to_add) and not isnull(to_add).all(): raise ValueError("Cannot setitem on a Categorical with a new " "category, set the categories first")
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.NEVER_PUBLISHED, is_locked=False), self.NEVER_PUBLISHED_WARNING )
item = order.orderitem_set.all().select_subclasses()[0]
import re import logging
DATE_INPUT_FORMATS = [
self.assertTrue(CourseEnrollment.is_enrolled(self.user, course_key)) return test_course_data
sample_str = self._sample_str(sample_dict, num_samples, tolerance) response_element.set("samples", sample_str)
from __future__ import unicode_literals
name = self.env.add_tmp(np.float32(right.value)) right = self.term_type(name, self.env)
from __future__ import absolute_import, print_function import logging
with patch('capa.capa_problem.LoncapaProblem.supports_rescoring') as mock_supports_rescoring: mock_supports_rescoring.return_value = False with self.assertRaises(NotImplementedError): module.rescore_problem()
expected = np.array([31200, 45678, 10000], dtype='m8[ns]')
self.assertEqual(list(qs1), list(qs2)) self.assertEqual(list(qs3), list(qs4))
__import__(name) return sys.modules[name]
from IPython.frontend.terminal.ipapp import TerminalIPythonApp app = TerminalIPythonApp.instance() app.initialize(argv=[]) app.start()
from __future__ import absolute_import
return True
closed_cursor_error_class = ProgrammingError
import salt.utils
form.data[form.add_prefix(self._pk_field.name)] = None
context = get_context(self.course, self.request, make_minimal_cs_thread(thread_data)) return CommentSerializer(comment, context=context).data
self.assertFalse(linode._validate_name('-foo'))
K1 = kernel(X, Y) K2 = pairwise_kernels(X, Y, metric=kernel) assert_array_almost_equal(K1, K2)
if len(indices) != n_samples: return False hit = np.zeros(n_samples, bool) hit[indices] = True if not np.all(hit): return False return True
if block_key not in missing_blocks: self.assertEquals( set(block_structure.get_children(block_key)), set(children), )
self.assertIn( finger_print, [i.strip() for i in _key] )
import salt.defaults.exitcodes import salt.ext.six as six
self.assertQuerysetEqual( Article.objects.order_by("headline")[:2], [ "Article 1", "Article 2", ], attrgetter("headline") )
DATE_INPUT_FORMATS = [
with warnings.catch_warnings(record=True) as recorded_warnings:
course_listings = self.dashboard_page.get_course_listings() self.assertEqual(len(course_listings), 1)
location = urljoin(current_uri, location)
os.unlink(full_path)
return NoneToEmptyQuerySet(self.model, using=self._db)
self._W = W
if connection.features.supports_transform: with self.assertRaises(LayerMapError): LayerMapping(County, co_shp, co_mapping)
if stdout is None and stderr is None: self.assertFalse(term.isalive())
'master_port': int,
disable_left_right = (is_blank(grid_indices) and not (grid_dimension[0] in (0, 5)))
raise
ntaps += 1
code_length = getattr(settings, 'REGISTRATION_CODE_LENGTH', 8) return generate_random_string(code_length)
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book])
result = f.clean('13.30.05') self.assertEqual(result, time(13, 30, 5))
name = models.CharField(max_length=20) companies = models.ManyToManyField(Company)
result = df.quantile(.5) expected = Series([2.5], index=['b'])
world.wait(1) continue
return {key: val for key, val in self.session.cookies.items()}
relevant_frames = 0 for frame_record in inspect.stack(): frame = frame_record[0] if '__unittest' in frame.f_globals: break relevant_frames += 1
query_features.append('cohort') query_features_names['cohort'] = _('Cohort')
return self(kind='box', **kwds)
if len(set(ml)) != 1: raise ValueError("Composite space is empty or containing " "incompatible index spaces") return ml[0]
GenericIPAddress.objects.create() o = GenericIPAddress.objects.get() self.assertIsNone(o.ip)
if course_key.org is None or course_key.course is None or course_key.run is None: return self._active_bulk_ops.records[ course_key.replace(org=None, course=None, run=None, branch=None) ]
result = A.dot(b)
label_bg_color = Attribute('label_bg_color', default=None).parse_from_xml(self.xml) if label_bg_color: to_js['label_bg_color'] = label_bg_color
from salt.ext.six.moves import range
client_class = Client _overridden_settings = None _modified_settings = None
class EscapingForm(Form): special_name = CharField(label="<em>Special</em> Field") special_safe_name = CharField(label=mark_safe("<em>Special</em> Field"))
user, created = User.objects.get_or_create(username=USERNAME, email=EMAIL) if created: user.set_unusable_password() user.save()
self.assertTrue(self.store.has_changes(xblock))
import salt.config from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) import os
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
alpha = np.mean(emp_cov ** 2) num = alpha + mu ** 2 den = (n_samples + 1.) * (alpha - (mu ** 2) / n_features)
Ensure mykey key exists: boto_kms.key_present: - name: mykey - region: us-east-1 - profile: myprofile
survey = SurveyForm.get(course_descriptor.course_survey_name)
return descriptor.location.library_key
assert_(loaded['a'].yaml_src.find("${TEST_VAR}") != -1) del environ['TEST_VAR']
return False
salt '*' vsphere.vsan_enable my.esxi.host root bad-password
link_pattern = '<a href="%s">%s</a>' orig_pattern = '<span class="n">%s</span>' period = '<span class="o">.</span>'
name = com._maybe_match_name(self, delta)
email = staff.email password = 'test' self.login(email, password) self.enroll(self.course, verify=True)
if self.category == 'course': node.set('org', self.location.org) node.set('course', self.location.course)
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import destructiveTest
values = self.values.to_dense() if values.ndim == self.ndim - 1: values = values.reshape((1,) + values.shape) return values
invoice = shoppingcart.models.Invoice.objects.get(id=sale_invoice_1.id) invoice.is_valid = True invoice.save()
requires_system_checks = False leave_locale_alone = True
if field_type == 'CharField' and row[3]: field_params['max_length'] = int(row[3])
course = world.CourseFactory.create( org='edx', number='999', display_name='Test Course' )
stacklevel = 3
if self.get('_session_expiry') is None: return settings.SESSION_EXPIRE_AT_BROWSER_CLOSE return self.get('_session_expiry') == 0
bbox = (-180, -90, 180, 90) p = OGRGeometry.from_bbox(bbox) self.assertEqual(bbox, p.extent)
if not position: position = get_rule_handle(table, chain, rule, family)
raise SkipTest('Sandbox RNNs are disabled.')
if not self._check_enabled_suites(include_cloud_provider=True) and not self.options.name: return status
if objects_in_fixture == 0: warnings.warn( "No fixture data found for '%s'. (File format may be " "invalid.)" % fixture_name, RuntimeWarning )
return True
pass
pip install https://pysphere.googlecode.com/files/pysphere-0.1.8.zip
self.assertTrue(BulkEmailFlag.feature_enabled(self.course.id)) response = self.client.get(self.url) self.assertTrue(self.email_link in response.content)
from __future__ import absolute_import
children_headers = self._set_library_content_settings(count=2, capa_type="Custom Evaluated Script") self.assertEqual(children_headers, set())
for current_vname in current_communities: if current_vname not in communities: ret_communities['changes'][current_vname] = {'old': current_communities[current_vname], 'new': None}
LANGUAGES_BIDI = ["he", "ar", "fa", "ur"]
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
n_samples = 100 n_features = 500 rank = 4 k = 10
USE_I18N = True LOCALE_PATHS = []
EmptyPromise( lambda: self.find_css('.signatory-panel-body .signatory-name-value').present, 'On signatory details view' ).fulfill()
expected_y = y.mf_update( state_below = v.upward_state(v_state))
response = self.assert_request_status_code(400, url, method="POST", data=data) self.assertIn("The sale associated with this invoice has already been invalidated.", response.content)
return ((-123.30, -41.32), (174.78, 48.46))
return self.list_display
task_type = 'grade_course' task_class = calculate_grades_csv task_input = {} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
if self.name == "edx.video.seeked": self['name'] = "edx.video.position.changed"
if not self._is_numeric_dtype: raise TypeError("cannot evaluate a numeric op " "{opstr} for type: {typ}".format( opstr=opstr, typ=type(self)) )
self.assertIs( descriptor._field_data._authored_data._source.fallback, descriptor._unwrapped_field_data )
self.n_iter_ = 0 self.t_ = 0 self.n_outputs_ = y.shape[1]
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21 13:30:05')
def render(self, name, value, attrs=None): return super(ViewersWidget, self).render(name, ', '.join(value), attrs)
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
return spanify(render_expression(left))
from salt.modules import win_network
self.assertEqual(reindexed_bool.dtype, np.object_)
self.assertRaises( Http404, views.container_handler, request, usage_key_string='i4x://InvalidOrg/InvalidCourse/vertical/static/InvalidContent', )
self.register_page.register(country="US", favorite_movie="Battlestar Galactica", terms_of_service=True)
__proxyenabled__ = ['ssh_sample']
self.q(css=self._bounded_selector(".tab-manage_students")).first.click()
on_course_publish(course_key)
df['D'] = i.to_pydatetime() result = df['D'] assert_series_equal(result, expected, check_names=False) self.assertEqual(result.name, 'D')
idx1 = idx1.tz_localize('Asia/Tokyo') exp_idx = exp_idx.tz_localize('Asia/Tokyo')
from salt.utils.odict import OrderedDict
return value
corr2 = self.ts.autocorr(lag=1)
float_frame = frame.astype(float) recons = read_excel(path, 'test1', convert_float=False) tm.assert_frame_equal(recons, float_frame, check_index_type=False, check_column_type=False)
if make_data is csr_matrix: assert_raises(type(exc), func, X, metric=metric, n_jobs=2, **kwds) continue else: raise
return self.date_extract_sql(lookup_type, field_name)
entry = _fstab_entry(**entry_args) try: criteria = entry.pick(match_on)
env = geom.envelope env_w, env_h = self.get_width_height(env.extent) center = env.centroid
msg = "no doc impacting files detected:\n" + u"\n".join(filenames) exit(msg, skip=True)
options = dict(d) task_id = options['task_id'] del options['task_id'] return SubtaskStatus.create(task_id, **options)
self.notes_page.wait_for_ajax() note = self.notes_page.notes[0] assert_page(note, self.raw_note_list[4]['usage_id'], "Recent Activity")
import salt.config import salt.loader from salt.modules import boto_s3_bucket
old_field = IntegerPK._meta.get_field('j') new_field = IntegerField(primary_key=True) new_field.model = IntegerPK new_field.set_attributes_from_name('j')
is_increasing = y_[0] < y_[-1] assert_false(is_increasing)
if not settings.FEATURES.get("ENABLE_CREDIT_ELIGIBILITY"): return {}
remove_instance = False
company_label = _(u"Company")
edge_model = covariance.GraphLassoCV()
from salt import template
data = {}
self.settings_page.visit() self._set_pre_requisite_course()
rng = np.random.RandomState(0) n_samples, n_features = 500, 2
form = self.FORM_CLASS(self.form_data, initial=getattr(self, 'initial', None)) self.assertEqual(form.is_valid(), expected_valid) return form
self.setup_cohort_config(self.course_fixture) self.cohort_1_name = "Cohort 1" self.cohort_1_id = self.add_manual_cohort(self.course_fixture, self.cohort_1_name)
if start_date: date_format = _get_date_time_format(start_date) if date_format: dt_obj = datetime.strptime(start_date, date_format) else: return 'Invalid start_date' else: dt_obj = datetime.now()
y_size = n_classes + 1 while (not allow_unlabeled and y_size == 0) or y_size > n_classes: y_size = generator.poisson(n_labels)
pygments_style = 'sphinx'
return GISLookup._check_geo_field(self.model._meta, field_name)
if self.youtube_id_1_0: encoded_videos["youtube"] = { "url": self.create_youtube_url(self.youtube_id_1_0),
return None
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
n_init_range = np.array([1, 5, 10, 15, 20])
if not _wipe(dev): return False
test_stats = {'n_test': 0, 'n_test_pos': 0}
conn.allow_thread_sharing = True connections_dict[id(conn)] = conn
cleanup_services = config.get_cloud_config_value( 'cleanup_services', get_configured_provider(), __opts__, search_global=False, default=False ) if cleanup_services: log.debug('Deleting service {0}'.format(service_name))
self._mock_paver_needs = patch.object(pavelib.quality.run_jshint, 'needs').start() self._mock_paver_needs.return_value = 0
return v4_int_to_packed(self._ip)
vocabulary = dict(vocabulary) if not vocabulary: raise ValueError("empty vocabulary; perhaps the documents only" " contain stop words")
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
usage_key = self.course.id.make_usage_key('vertical', None)
redirect_uri = super(ExceptionMiddleware, self).get_redirect_uri(request, exception)
_, X = self._count_vocab(raw_documents, fixed_vocab=True) if self.binary: X.data.fill(1) return X
base_url = AssetBaseUrlConfig.get_base_url() excluded_exts = AssetExcludedExtensionsConfig.get_excluded_extensions() url = StaticContent.get_canonicalized_asset_path(course_id, rest, base_url, excluded_exts)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'joyent', vm_['profile'], vm_=vm_) is False: return False
return self.block.values
@property def score(self): raise AttributeError
store.append('s4', wp) self.assertRaises(ValueError, store.append, 's4', wp2)
sut = PCA(self.num_components) sut.apply(self.dataset, True)
self.q(css=".login-button").click()
ensemble = BaggingClassifier(SVC(decision_function_shape='ovr'), n_jobs=3, random_state=0).fit(X_train, y_train)
attempt = SoftwareSecurePhotoVerification(user=user) attempt.status = 'submitted' attempt.save()
set_user_preference(self.user, LANGUAGE_KEY, 'eo') self.middleware.process_request(self.request) self.assertEquals(self.request.session[LANGUAGE_SESSION_KEY], 'eo')
return self.find_css("#due_date").first.attrs('value')[0]
from __future__ import absolute_import
y += 0.01 * np.random.normal((n_samples,))
super(CategoricalBlock, self).__init__(maybe_to_categorical(values), fastpath=True, placement=placement, **kwargs)
prev_coef = coef prev_alpha[0] = alpha[0] coef = np.zeros_like(coef)
learn_more = model.train_batch(dataset, batch_size) model.monitor.report_batch(batch_size) if not learn_more: break
return
from salt.states import pagerduty
counts[center_idx] += count
modulestore().update_item(course_module, request.user.id)
values = Series([u('fooBAD__barBAD'), NA, u('foo')])
store.put('c', df[:10], format='table', append=False) tm.assert_frame_equal(df[:10], store['c'])
my-minion: - esxi-1.example.com - esxi-2.example.com
if len(indexer) > 1 and not multiindex_indexer: l = len(indexer[1]) ser = np.tile(ser, l).reshape(l, -1).T
policy_str = '{}'
def test_spline_error(self): tm._skip_if_no_scipy()
if context is None: context = self.serializer_context return BlockDictSerializer( context['block_structure'], many=False, context=context, )
if self.xqueue_grade_response is not None: XQueueResponseFixture(self.submission, self.xqueue_grade_response).install()
orphans = self.store.get_orphans(course_key) self.assertEqual(len(orphans), 0)
enc_query = self._check_query(query, city_or_country=True) return Country(self._country_or_city(enc_query))
clf = AdaBoostRegressor(random_state=0) clf.fit(boston.data, boston.target) score = clf.score(boston.data, boston.target) assert score > 0.85
self.q(css=self.PREVIOUS_PAGE_BUTTON_CSS).click() self.wait_for_ajax()
waitpid_options = 0
pass
if field.remote_field: fake_user_data[field_name] = field.remote_field.model(input_value)
def __init__(self, W): self.W = W super(ModelWithW, self).__init__()
import salt.ext.six as six
assert_almost_equal(entropy(y), sum(importances)) assert_less(np.abs(true_importances - importances).mean(), 0.01)
currently_fixing = []
if labels.is_unique: indexer = check = labels.get_indexer(objarr)
return sum(estimator.decision_function(X[:, features]) for estimator, features in zip(estimators, estimators_features))
writer.writerow(encoded_labels)
score += _loglikelihood(topic_word_prior, self.components_, dirichlet_component_, n_features)
if self.structure_json: return json.loads(self.structure_json) return None
zk_concurrency.__salt__ = {} zk_concurrency.__opts__ = {}
p, h = prob_max_pool_c01b(z, (pool_rows, pool_cols) ) func = function([z], [p, h], mode = mode_with_gpu)
assert_numpy_array_equal(np.array([1]), 1)
c(win_type='boxcar', window=2, min_periods=1) c(win_type='boxcar', window=2, min_periods=1, center=True) c(win_type='boxcar', window=2, min_periods=1, center=False)
self.find_css('.action-add-signatory').first.click()
post_data = models.model_to_dict(provider1) del post_data['icon_image']
self.verify_expected_team_id(new_teams[2], 'a-really-long-team-n')
if db_field.choices: return self.formfield_for_choice_field(db_field, request, **kwargs)
data = 'a,b,c\n4,5,6#comment' result = self.read_csv(StringIO(data), comment='#') tm.assert_frame_equal(result, expected)
return self.k1.is_stationary() and self.k2.is_stationary()
cmd = 'emerge-webrsync -q' if salt.utils.which('emerge-delta-webrsync'): cmd = 'emerge-delta-webrsync -q' return __salt__['cmd.retcode'](cmd, python_shell=False) == 0
context['show_homepage_promo_video'] = microsite.get_value('show_homepage_promo_video', False)
if block_id is None: if block_type == 'course': block_id = course_key.run else: block_id = u'{}_{}'.format(block_type, uuid4().hex[:5])
log = logging.getLogger(__name__)
return (user, name, email, enabled)
return self.q(css='.advance-modules-list li').text
old_definition = self.get_definition(course_key, definition_locator.definition_id) if old_definition is None: raise ItemNotFoundError(definition_locator)
if xblock.fields['visible_to_staff_only'].is_set_on(xblock): return xblock
ret['size'] = size.splitlines()[-1].split()[1]
distances[k - n_samples] = edge.weight
combined = series_copy.combine_first(series) self.assertTrue(np.isfinite(combined).all())
fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
with option_context('display.max_colwidth', 999999): objstr = obj.to_string(**kwargs)
rs = GDALRaster(self.rs_path, write=False) band = rs.bands[0]
enum = None
self._pyplot_imported = False
return (floating_network, port)
super(BaggingClassifier, self)._validate_estimator( default=DecisionTreeClassifier())
self.url = reverse('dashboard') self.site_lang = settings.LANGUAGE_CODE
return self.q(css='div.instructor-dashboard-wrapper-2').present
course_usage_main_vertical = self.lc_block.children[0] course_usage_inner_vertical = self.store.get_item(course_usage_main_vertical).children[0] inner_vertical_in_course = self.store.get_item(course_usage_inner_vertical) course_usage_html = inner_vertical_in_course.children[0] course_usage_problem = inner_vertical_in_course.children[1]
from salt.states import disk
'openedx.core.djangoapps.programs',
for model, obj in self.instances_with_model(): if not model._meta.auto_created: signals.pre_delete.send( sender=model, instance=obj, using=self.using )
return item.point.x, item.point.y
template = Template(template, origin, template_name, engine=self)
self.assertEquals( preview.latex_preview('(2+3)/(4+5)'), r'\frac{2+3}{4+5}' )
from __future__ import absolute_import import json try:
X[:, :n_informative] = generator.randn(n_samples, n_informative)
if update.IsDownloaded and not update.IsInstalled: results['Downloaded'] += 1
self.options, self.engine = self._clean_options(options, engine) if 'has_index_names' in kwds: self.options['has_index_names'] = kwds['has_index_names']
clf = svm.SVC() assert_raises(ValueError, clf.fit, X, Y, sample_weight=range(len(X) - 1))
recall = tp / T.maximum(1., y.sum()) return recall
retcode = 1
assert_greater(X.std(axis=0).std(), 43.8)
from __future__ import absolute_import import json import logging import threading import salt.ext.six as six
if not isinstance(layer, Layer): raise TypeError( "The operand on the right side of + must be a Layer instance") self.layers.append(layer)
languages.sort() return languages
def __init__(self, form, *items): self.form = form super(ResultList, self).__init__(*items)
with self.assertRaises(AttributeError): r.content = 'xyz'
if user is None: user = self.user if user not in self.session_data: self.session_data[user] = {} request = Mock(user=user, session=self.session_data[user]) _load_preview_module(request, descriptor)
from salt.utils.yamldumper import OrderedDumper
APP.config_from_object('django.conf:settings') APP.autodiscover_tasks(lambda: settings.INSTALLED_APPS)
import collections import json import logging from pkg_resources import resource_string
request = RequestFactory().request() request.user = user all_tabs = get_course_tab_list(request, course) return any([tab.name == u'My Notes' for tab in all_tabs])
date_created = models.DateTimeField() def get_absolute_url(self): return '/urlarticles/%s/' % self.slug get_absolute_url.purge = True
from salt.utils.decorators import memoize
self.assertEqual(self.session.serializer, JSONSerializer) self.session.save()
with tm.assert_produces_warning(FutureWarning): first.sym_diff(second)
return (self._resid_raw ** 2).sum()
target_mod = module + '.' if not module.endswith('.') else module
formset = cl.formset = None
path = dirs[0] while os.path.basename(path) not in ['salt', 'salt-tests-tmpdir']: path, base = os.path.split(path)
from __future__ import unicode_literals
return str(uuid.uuid4())
self.client.logout() self._test_return_login(user_is_activated=False)
self.assertEqual(default_storage.base_location, '') with self.settings(MEDIA_URL='/test_value/'): self.assertEqual(default_storage.base_url, '/test_value/')
pass
y = np.array([0.0, 1.1, 2.0, 3.0]) msg = type_of_target(y) assert_raise_message(ValueError, msg, check_classification_targets, y)
default_pc = 0.5
col_formatter = _maybe_wrap_formatter(col_formatter) col_num = self.data.columns.get_indexer_for([col])[0]
theta0 = self.theta0
msg = ("must supply a a same-length tuple to get_group" " with multiple grouping keys") raise ValueError(msg)
clf = ElasticNet() clf.coef_ = [1, 2, 3]
FEATURES['ENABLE_EDXNOTES'] = True
try: value = value.reindex(self.index)._values except Exception as e:
world.css_click('.mce-primary')
response_dict = self._get_page_data(response) self.assertEqual(response_dict['contribution_amount'], expected_amount)
return {'err_code': response.status_code, 'err_msg': json.loads(response.text).get('err', '')}
cursor = self.connection.connection.cursor() try: return cursor.execute(sql, params).fetchone() finally: cursor.close()
response = self.client.get(reverse('admin:generic_inline_admin_episode_add')) self.assertEqual(response.status_code, 200)
influxDBVersionHeader = "X-Influxdb-Version"
def get_chunk(self, size=None): if size is None: size = self.chunksize return self.read(nrows=size)
app.add_config_value('ipython_mplbackend', 'agg', 'env')
- 'olcDatabase={1}hdb,cn=config': - replace: olcRootDN: - cn=admin,dc=example,dc=com olcRootPW: []
result = f.clean('13.30') self.assertEqual(result, time(13, 30, 0))
return []
from config_models.models import cache
field_errors = self._validate_patch(request.data) if field_errors: return Response({'field_errors': field_errors}, status=status.HTTP_400_BAD_REQUEST) return self.partial_update(request, *args, **kwargs)
temp_dir = tempfile.mkdtemp(dir=TMP_JID_DIR)
aside2 = AsideBar(scope_ids=ScopeIds('user', block_type2, def_id, usage_id), runtime=self.runtime) aside2.field21 = 'new_value21'
group_axis = obj._get_axis(self.axis) return Grouping(group_axis, None, obj=obj, name=self.key, level=self.level, sort=self.sort, in_axis=False)
assert_equals(expected, deserialize_field(self.test_field(), arg))
if not snapshot: ret['error'] = 'one or more snapshots must be specified'
if dj_exc_type not in (DataError, IntegrityError): self.wrapper.errors_occurred = True six.reraise(dj_exc_type, dj_exc_value, traceback)
self.assertIsNone(default_storage.file_permissions_mode) with self.settings(FILE_UPLOAD_PERMISSIONS=0o777): self.assertEqual(default_storage.file_permissions_mode, 0o777)
return expected_prefix + '-' + team['discussion_topic_id']
([[400, 150, 400], [400, 450, 600], [300, 225, 300]],
all_nodes = dict([(n.attrib['id'], n) for n in root])
return Fragment(content=u"<div>Nothing to randomize between</div>")
self.assertEqual(len(mail.outbox), 1)
super(NoseTestSuite, self).__exit__(exc_type, exc_value, traceback) test_utils.clean_mongo()
handler404 = 'contentstore.views.render_404' handler500 = 'contentstore.views.render_500'
oh = OneHotEncoder(handle_unknown='error') oh.fit(X) assert_raises(ValueError, oh.transform, y)
X, y = datasets.make_regression(n_targets=1) X_train, y_train = X[:50], y[:50] X_test, y_test = X[50:], y[50:]
store = self._get_modulestore_for_courselike(course_key) if not hasattr(store, 'fill_in_run'): return course_key return store.fill_in_run(course_key)
hidden = False
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, destructiveTest) ensure_in_syspath('../../')
from __future__ import unicode_literals
raise NotImplementedError('subclasses of BaseDatabaseOperations may require a date_interval_sql() method')
dive = Book.objects.using('other').get(title='Dive into Python') self.assertEqual(dive._state.db, 'other')
p = DataFrame({'first': [3, 4, 5, 8], 'second': [0, 0, 0, 3]}) result = p / p
result = ci.append([]) tm.assert_index_equal(result, ci, exact=True)
user = models.ForeignKey(User, db_index=True, null=True) course_id = CourseKeyField(max_length=255, db_index=True)
for middleware_method in self._view_middleware: response = middleware_method(request, callback, callback_args, callback_kwargs) if response: return response
worktree_data = dict([(x, '') for x in tracked_data_points])
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.user = UserFactory.create(password=self.test_password) self.teams_url = reverse('teams_dashboard', args=[self.course.id])
try: super(URLValidator, self).__call__(value) except ValidationError as e: if value: scheme, netloc, path, query, fragment = urlsplit(value) try:
to_unset = [key for key in os.environ if key not in environ] for key in to_unset: ret[key] = setval(key, False, false_unsets, permanent=permanent)
self.client.logout()
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
for tt in set([str, compat.text_type]): result = df.astype(tt)
'modules_max_memory': int,
response = problem.responders.values()[0] self.assertFalse(response.has_mask()) self.assertFalse(response.has_answerpool())
import salt.utils.compat import salt.utils from salt.ext.six import string_types
credit_state = self.service.get_credit_state(self.user.id, self.course.id) self.assertEqual(credit_state['credit_requirement_status'][0]['status'], "satisfied")
return self.q(css="div.problem p").text
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
continue
htown = City.objects.get(name='Houston') with self.assertRaises(ValueError): City.objects.get(point__exact=htown.point)
if os_name == 'CentOS' \ and grains['osrelease'].startswith('5.'): target = target.replace('.i686', '.i386')
decorators = (myattr_dec_m, myattr2_dec_m)
self.assertFalse(module_has_submodule(test_no_submodule, 'anything')) with self.assertRaises(ImportError): import_module('utils_tests.test_no_submodule.anything')
selection = SelectKBest(k=1)
assert_raises(Exception, metric, y1, y2, sample_weight=np.hstack([sample_weight, sample_weight]))
nvcc_compiler.add_standard_rpath(cuda_convnet_loc)
self.assertRaises(ValueError, df.to_sql, "", self.conn, flavor=self.flavor)
self.assertEqual(col[0], Timestamp('2000-01-01 08:00:00'))
return
AUTH_BASE_URL = os.environ.get('test_url', 'http://localhost:8031')
return name, path, args, kwargs
clf = GradientBoostingRegressor(n_estimators=100, random_state=1, max_features=0) assert_raises(ValueError, clf.fit, X, y)
return self.fit(X).labels_
import cgi import logging
from numbers import Number
AUTHENTICATION_BACKENDS = ( 'ratelimitbackend.backends.RateLimitModelBackend', )
params = dict([param.strip().replace('"', '').split('=') for param in params.split(',')])
for offset in self.off: bio.write(struct.pack(byteorder + 'i', offset))
with super(ViewPermissionsTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
super(ViewsTestCase, self).setUp()
grouped = values.groupby(labels) agged = grouped.agg(len) expected = Series([4, 2], index=['bar', 'foo'])
import salt.ext.six as six try: import pkg_resources HAS_PKG_RESOURCES = True except ImportError: HAS_PKG_RESOURCES = False
else:
w = self.r1.waiter_set.create(name='Joe') self.assertEqual(repr(w), '<Waiter: Joe the waiter at Demon Dogs the restaurant>')
sorted_grid_scores = list(sorted(search.grid_scores_, key=lambda x: x.mean_validation_score)) best_score = sorted_grid_scores[-1].mean_validation_score assert_equal(search.best_score_, best_score)
OIDC_COURSE_HANDLER_CACHE_TIMEOUT = 0
)
self.assertEqual(self.settings_detail.course_pacing, 'Instructor-Paced')
expected_p, expected_h = h1.mf_update( state_below = v.upward_state(v_state), state_above = h2.downward_state(h2_state), layer_above = h2)
for a in self.non_index_axes: obj = _reindex_axis(obj, a[0], a[1])
clf_sparse = SVC(kernel="linear") rfe_sparse = RFE(estimator=clf_sparse, n_features_to_select=4, step=0.1) rfe_sparse.fit(X_sparse, y) X_r_sparse = rfe_sparse.transform(X_sparse)
kvs = MongoKeyValueStore( definition_data, None, [], metadata, ) field_data = KvsFieldData(kvs) return field_data
return getattr(self.description, self.cname, None)
cost = SumOfCosts([SumOfParams(), (0., DummyCost())])
piece.set_axis(cat_axis, piece._get_axis( cat_axis)._to_safe_for_reshape()) piece[all_key] = margin[key]
cls.js.setdefault('xmodule_js', resource_string(__name__, 'js/src/xmodule.js'))
validation = self.store.get_item(self.video_location).validate() self.assertEqual(len(validation.messages), 0)
DATE_INPUT_FORMATS = [
if name in get_all(): raise CommandExecutionError('Service Already Exists: {0}'.format(name))
__virtualname__ = 'docker'
raise ValueError("'%s' does not resolve to an item that supports " "prefetching - this is an invalid parameter to " "prefetch_related()." % lookup.prefetch_through)
self.assertEquals(block_counts_for_course['problem'], 6) self.assertEquals(block_counts_for_chapter_x['problem'], 3)
safe_cookie_data_1 = SafeCookieData.create(session_id, user_id) self.assertTrue(safe_cookie_data_1.verify(user_id))
__func_alias__ = { 'list_': 'list' }
patcher = patch.object(api, 'api_enabled', Mock(return_value=True)) patcher.start() self.addCleanup(patcher.stop)
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 block_device: - source: image id: <image_id> dest: volume size: 100 shutdown: <preserve/remove> bootindex: 0
self.coach = coach = AdminFactory.create(password="test") self.client.login(username=coach.username, password="test")
target = win32file.GetLongPathName(target)
from urllib2 import HTTPError from urllib2 import quote from urllib2 import urlopen
self.assertEqual(element.tag, tag)
self.categories = categories
super(TestGenerateCourseOverview, self).setUp() self.course_key_1 = CourseFactory.create().id self.course_key_2 = CourseFactory.create().id self.command = generate_course_overview.Command()
sql, params = val, []
try: result = o + o2 self.check_metadata(result) except (ValueError, AttributeError): pass
import argparse import gc import logging import os
self._test_email_address_failures(SESIllegalAddressError(554, "Email address is illegal"))
axes = df.plot(subplots=True, color='green') for ax in axes: self._check_colors(ax.get_lines(), linecolors=['green']) tm.close()
log.warning( 'Authentication failure of type "eauth" occurred.' ) return ''
if value is None: return None return six.text_type(value)
self.restricted_course.enroll_msg_key = 'embargo' self.restricted_course.access_msg_key = 'embargo' self.restricted_course.save()
(["foo", "bar", "baz"], [None, "bar", "baz"]),
return self
goal_time = 0.2
courses = split_store.get_courses(BRANCH_NAME_DRAFT)
A = rng.random_sample([2, 2]) for dtype in ['f8', 'f4']: A = A.astype(dtype) B = B.astype(dtype)
ndims = set() for obj in objs: if not isinstance(obj, NDFrame): raise TypeError("cannot concatenate a non-NDFrame object")
NOTES_DISABLED_TABS = ['course_structure', 'tags']
X = X_orig.copy() result1 = (X[block1] - Z).reindex(columns=subs)
from __future__ import unicode_literals
with tm.assert_produces_warning(UserWarning, check_stacklevel=False): indexer_obj = indexer_obj.reindex(self.tsframe.index[::-1]) subframe_obj = self.tsframe[indexer_obj] assert_frame_equal(subframe_obj, subframe)
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string) get_course_with_access(request.user, 'staff', course_key)
for __ in xrange(certificate_count): self.generate_certificate( course_id=self.course.id, mode='verified', status=CertificateStatuses.downloadable )
cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF']) cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])
try: import consul HAS_CONSUL = True except ImportError: HAS_CONSUL = False
template_name_suffix = '_archive'
for x in range(1, 10): a = Article(headline='Article %s' % x, pub_date=datetime(2005, 7, 29)) a.save()
if isinstance(value, six.string_types): value = self.deserialize(value)
pass
service.__grains__ = {} service.__salt__ = {}
ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_ ).astype(np.bool_) ref_inlier_mask[outliers] = False
DTOR = pi / 180. RTOD = 180. / pi
if label_type == 'azimuth': data_y = np.cast[config.floatX](data_y / 360.)
qry = 'REPAIR TABLE {0}.{1}'.format(s_name, s_table) _execute(cur, qry) results = cur.fetchall() log.debug(results) return results
if compat.PY35: BaseExprVisitor.visit_Call = BaseExprVisitor.visit_Call_35 else: BaseExprVisitor.visit_Call = BaseExprVisitor.visit_Call_legacy
return cls.default() | { cls.PAYLOAD_EXTRA_FIELDS }
'__salt__': __salt__, '__pillar__': __pillar__, '__grains__': __grains__
return self._upsample(method, limit=limit)
self.assertNotContains(response, 'sausage-value', status_code=500) self.assertNotContains(response, 'bacon-value', status_code=500)
authentication_classes = () permission_classes = ()
from salt.states import memcached
if self.isalive(): self.wait()
supports_regex_backreferencing = True
if not isinstance(notes, list): notes = [notes] for note in notes: self.notes.append(note)
self.assertEqual(uri_to_iri(uri_to_iri(uri)), iri)
__virtualname__ = 'group'
Site.objects.clear_cache()
df = DataFrame(np.random.randn(10, 3), index=index, columns=['A', 'B', 'C'])
with warnings.catch_warnings(record=True) as w: warnings.simplefilter("always")
return self.runtime.service(self, 'library_tools')
return dict((feature, getattr(student, feature)) for feature in features)
if isinstance(course.id, CCXLocator): return False
if sparse: decay = .01
if 'schema' not in resobj: raise ValueError('missing schema field in path {0}, ' 'op {1}, response {2}'.format(path, opname, rescode))
request = Request(self.request_factory.get('/')) request.user = requesting_user with check_mongo_calls(0): return course_detail(request, target_user.username, course_key)
self.assertEqual(len(mail.outbox), 1)
provider = PaidCourseEnrollmentReportProvider() self.assertIsNotNone(provider) self.assertTrue(isinstance(provider, PaidCourseEnrollmentReportProvider))
query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(None, query) self.assertIs(result, None)
trimmed_something = True while trimmed_something: trimmed_something = False
return self.dop_adapter.create_confidential_client( name='test_app', user=user, client_id=client_id, redirect_uri=DUMMY_REDIRECT_URL )
import integration import salt.utils
request = CreditRequest.objects.get(username=username, course__course_key=course_key) self.assertEqual(request.status, 'pending')
return values.view('i8')
to_js['base_image'] = Attribute('img').parse_from_xml(self.xml)
url = reverse('shoppingcart.views.postpay_callback') response = self.client.post(url, processor_response_params) self.assertRedirects(response, self._receipt_url)
from salt.modules import serverdensity_device from salt.exceptions import CommandExecutionError
plt.xlim(0, 100) plt.legend(loc='best') plt.title('Feature selection scores - Mutual incoherence: %.1f' % mi)
self.assertIn(str('Child Subject'), parent_s)
atom = (tables.Int32Atom() if config.floatX == 'float32' else tables.Int64Atom())
PersonModel = PersonDimensionsFirst File = File
return CourseUserGroup.objects.get( course_id=course_key, group_type=CourseUserGroup.COHORT, id=cohort_id )
mlp.n_iter_ = 0 mlp.learning_rate_ = 0.1
LOGGING_NULL_HANDLER = TemporaryLoggingHandler(logging.WARNING)
return [ tt.upper() for tt in map(_ustr,t) ]
course_key = usage_key.course_key
from __future__ import absolute_import
return path.startswith(self.base_url[2]) and not self.base_url[1]
self.assertTrue(self.run_cloud('-f remove_key {0} id={1}'.format(PROVIDER_NAME, finger_print)))
exc_info_on_loglevel=logging.DEBUG
wkb_w.byteorder = 0 self.assertEqual(hex2, wkb_w.write_hex(g)) self.assertEqual(wkb2, wkb_w.write(g))
old_cwd = None
urlpatterns += ( url(r'^survey/', include('survey.urls')), )
idx = PeriodIndex(['2011-01', 'NaT', '2011-03', '2011-04'], freq='M', name='idx')
if __opts__['test'] is True:
ind = self.subclusters_.index(subcluster) self.subclusters_[ind] = new_subcluster1 self.init_centroids_[ind] = new_subcluster1.centroid_ self.init_sq_norm_[ind] = new_subcluster1.sq_norm_ self.append_subcluster(new_subcluster2)
from __future__ import unicode_literals
for minion in get_minions():
out = decons_group_index(obs_ids, shape) return out if xnull or not lift.any() \ else [x - y for x, y in zip(out, lift)]
userdata_file: /etc/salt/my-userdata-file
return [('127.0.0.1:11211 (1)', {})]
data = dict((k, v) for k, v in compat.iteritems(data) if k in columns)
rindex = list(self.ts.index) random.shuffle(rindex)
rendered = "0.post.dev%%d" %% pieces["distance"]
eol_message = message.replace(str('\r\n'), str('\n')).replace(str('\r'), str('\n'))
result = values.view('i8') == tslib.iNaT
from salttesting.helpers import ensure_in_syspath, expensiveTest
test_dir = path(__file__).abspath().dirname().dirname().dirname() file_path = test_dir + '/data/uploads/' + file_name
text = self.adj.adjoin(1, *strcols)
ret = _psql_prepare_and_run(['-c', query], user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, runas=runas) return ret['retcode'] == 0
'%d/%m/%Y', '%d/%m/%y'
file.save(file.name, file, save=False)
self.client.logout() staff_user = StaffFactory(course_key=self.course.id) staff_user.is_staff = True self.client.login(username=staff_user.username, password='test')
print("\r[dl] %6.2f%% %s" % (min(totalsize,blocks*blocksize)*100.0/totalsize, hook_download_filename), end='') sys.stdout.flush()
if method is not None or limit is not None: new_values = missing.interpolate_2d(new_values, method=method, limit=limit, fill_value=fill_value)
bucket_files[bucket_name] = [k for k in s3_meta if 'Key' in k]
raise NotImplementedError('subclasses of BaseDatabaseOperations may require a date_extract_sql() method')
if val == val and val != %(nan_val)s: nobs[lab, j] += 1 if nobs[lab, j] == rank: resx[lab, j] = val
for X in [X_1row, X_1col, X_list_1row, X_list_1row]:
client_args={"disable_ssl_certificate_validation": True}
_ret = [] for row in _response['rows']: _ret.append(row['key']) return _ret
try: action_index = int(request.POST.get('index', 0)) except ValueError: action_index = 0
def __init__(self, partitions, **kwargs): super(StaticPartitionService, self).__init__(**kwargs) self._partitions = partitions @property def course_partitions(self): return self._partitions
self.lcp.ungraded_response(score_msg, queuekey) self.set_state_from_lcp() return dict()
current_time = json.loads(video_event['event'])['currentTime'] self.assertAlmostEqual(current_time, time_in_seconds, delta=1)
merged = target.map(source.to_dict())
multi_db = True
call_task('pavelib.quality.run_safelint', options={"thresholds": '{"rules": {"javascript-escape": 5}}'})
from __future__ import absolute_import import sys import types
masterStack.keep.auto = raeting.AutoMode.always.value minionStack.keep.auto = raeting.AutoMode.always.value
data = dict((k, v.to_dense()) for k, v in compat.iteritems(self)) return DataFrame(data, index=self.index, columns=self.columns)
with self.assertNumQueries(1): CountryAccessRule.check_country_access(course_id, 'NZ')
for key in list(__context__): try: if key.startswith('validation.docker.'): __context__.pop(key) except AttributeError: pass
url( r'^u/(?P<username>[\w.@+-]+)$', 'student_profile.views.learner_profile', name='learner_profile', ),
for saltenv, targets in six.iteritems(top): sorted_targets = sorted(targets, key=lambda target: orders[saltenv][target]) for target in sorted_targets: sorted_top[saltenv][target] = targets[target] return sorted_top
CELERY_IMPORTS = ( 'openedx.core.djangoapps.programs.tasks.v1.tasks', )
has_children = True field1 = String(default="something", scope=Scope.user_state) field2 = Integer(scope=Scope.user_state)
task = host_ref.Destroy_Task()
if isinstance(address, bytes): self.network_address = IPv4Address(address) self._prefixlen = self._max_prefixlen self.netmask = IPv4Address(self._ALL_ONES) #fixme: address/network test here return
if iface_name not in adapters: adapters[iface_name] = salt.utils.odict.OrderedDict()
assert_array_equal(mb_k_means.predict(X), mb_k_means.labels_)
for field in model._meta.local_many_to_many: if field.remote_field.through._meta.auto_created: self.create_model(field.remote_field.through)
with self.assertRaises(ItemNotFoundError): are_permissions_roles_seeded(course_id)
self.html_unit = ItemFactory.create( parent_location=self.vertical.location, category="html", display_name="Html Content", modulestore=store, publish_item=False, )
os.remove(hashdir) os.makedirs(hashdir)
CertificateGenerationConfiguration.objects.create(enabled=True)
if isinstance(metric, partial): metric.__module__ = 'tmp' metric.__name__ = name
return {'queue_len': self.queue_len, }
test_discussion = self.store.create_child(self.user.id, course.location, 'discussion', 'test_discussion')
if lines_list and lines_list[-1]: lines_list.append('') return '\n'.join(lines_list)
return ''
return int(info[1][column:end])
if (isinstance(labels, MultiIndex) and not isinstance(objarr[0], tuple)): level = 0 _, indexer = labels.reindex(objarr, level=level)
df = DataFrame([arr, s1]).T expected = DataFrame({1: s1, 0: arr}, columns=[0, 1]) tm.assert_frame_equal(df, expected)
resp = self.create_xblock(parent_usage_key=self.seq_usage_key, category='problem', boilerplate='multiplechoice.yaml') self.problem_usage_key = self.response_usage_key(resp)
ranks0 = self.frame.rank(na_option='bottom', ascending=False) ranks1 = self.frame.rank(1, na_option='bottom', ascending=False)
from __future__ import unicode_literals
if to.startswith(('./', '../')): return to
return 1
if is_categorical_dtype(data) or is_categorical_dtype(dtype): from .category import CategoricalIndex return CategoricalIndex(data, copy=copy, name=name, **kwargs)
_("There was a problem with the staff answer to this problem: empty boundary.")
self.assertIsNone(SurveyForm.get(self.test_survey_name, throw_if_not_found=False))
to_lisa_select_option = self.get_select_option(to_box, str(self.lisa.id)) self.assertEqual(to_lisa_select_option.get_attribute('title'), to_lisa_select_option.get_attribute('text'))
for st in (4, 7, 1000): clear_counties() lm.save(step=st, strict=True) self.county_helper(county_feat=False)
from __future__ import absolute_import
return date.replace(day=1)
with tm.assertRaisesRegexp(TypeError, 'list of lists-like'): self.index.set_labels(labels[0], level=[0, 1])
return mark_safe(force_text(value).translate(_js_escapes))
import logging
self.update_structure(asset_key.course_key, new_structure)
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
if not username: return redirect(reverse('api_admin:catalog-search')) return redirect(reverse('api_admin:catalog-list', kwargs={'username': username}))
#add_module_names = True
self.d.stalkers.add(self.a)
try: return key in self._engine except TypeError: return False
class Note(models.Model): content_type = models.ForeignKey(ContentType, models.CASCADE) object_id = models.PositiveIntegerField() content_object = GenericForeignKey() note = models.TextField()
'ENABLE_ONLOAD_BEACON': False,
self.assertRaises(ItemNotFoundError, lambda: self.draft_store.get_all_asset_metadata(course_key, 'asset')[:1])
kwds_no_nanos = dict( (k, v) for k, v in self.kwds.items() if k not in ('nanosecond', 'nanoseconds') ) use_relativedelta = False
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
resp = self.client.ajax_post( self.seq2_update_url, data={'children': [unicode(unit_1_key), unicode(unit_2_key)]} ) self.assertEqual(resp.status_code, 200)
response = self.client.get(self.url) self.assert_tag_has_attr(response.content, "html", "lang", self.site_lang)
log_entry.action_flag = 4 self.assertEqual(six.text_type(log_entry), 'LogEntry Object')
for item in list(required_keys): if item in provider_key: required_keys.remove(item)
ret = regenerate_user_certificates( student, course_id, course=course, forced_grade=options['grade_value'], template_file=options['template_file'], insecure=options['insecure'] )
ret = envstate.setenv('test', 'other') self.assertEqual(ret['changes'], {})
new_candidates = [] for candidate in candidates: if candidate.endswith('.xml'): new_candidates.append(candidate[:-4] + '.html') return candidates + new_candidates
self.client.logout()
orphan = course_key.make_usage_key('chapter', 'OrphanChapter') self.store.create_item( self.user_id, orphan.course_key, orphan.block_type, block_id=orphan.block_id )
return ( f for f in opts.get_fields(include_hidden=True) if f.auto_created and not f.concrete and (f.one_to_one or f.one_to_many) )
assert_true(id1, id2)
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
IDP = 'https://idp.stanford.edu/' REMOTE_USER = 'test_user@stanford.edu'
VERIFY_STATUS_NEED_TO_VERIFY = "verify_need_to_verify" VERIFY_STATUS_SUBMITTED = "verify_submitted" VERIFY_STATUS_APPROVED = "verify_approved" VERIFY_STATUS_MISSED_DEADLINE = "verify_missed_deadline" VERIFY_STATUS_NEED_TO_REVERIFY = "verify_need_to_reverify"
funparts = cmd.get('fun', '').split('.')
teams_per_topic = 10 topics = self.setup_topics(teams_per_topic=teams_per_topic) self.assert_serializer_output(topics, num_teams_per_topic=teams_per_topic, num_queries=1)
self.q(css=self.search_bar_selector + ' input[type="text"]').fill(text)
if existing_vhost == '' and perms == ['', '', '']: continue perm_need_change = True
return Series({ 'count': 1, 'mean': 2, 'omissions': 3, }, name=df.iloc[0]['A'])
ind = np.logical_and(y_pred < n_labels, y_true < n_labels) y_pred = y_pred[ind] y_true = y_true[ind] sample_weight = sample_weight[ind]
q = (cdist(x, mu[np.newaxis], "mahalanobis", VI=A) ** 2).reshape(-1) return q
super(OAuth2ProviderConfig, self).clean() self.other_settings = clean_json(self.other_settings, dict)
fetched = self.store.get_item(discussion_item.location)
@python_2_unicode_compatible class SelfRefer(models.Model): name = models.CharField(max_length=10) references = models.ManyToManyField('self') related = models.ManyToManyField('self')
xpath = "//div[@class='{0}']".format(expected_css_class) self.assert_has_xpath(xml, xpath, self.context)
raise NotImplementedError
self.assertIn('test error', result['success'])
if prev_log_likelihood is not None: change = abs(current_log_likelihood - prev_log_likelihood) if change < self.tol: self.converged_ = True break
self.update({})
try: return self._aggregate_item_by_item(name, *args, **kwargs) except (AttributeError): raise ValueError
res = store.select('wpneg', Term('items == -1')) expected = Panel({-1: wpneg[-1]}) tm.assert_panel_equal(res, expected)
return StaticNode.handle_token(parser, token)
return run_multi_processes([cmd], out_log=out_log, err_log=err_log)
return self.length
output_buffer = StringIO() csvwriter = csv.writer(output_buffer) csvwriter.writerows(self._get_utf8_encoded_rows(rows)) self.store(course_id, filename, output_buffer)
self._fill_flat(nested, self.spec_mapping, rval)
X_test = np.arange(0.0, 5.0, 0.01)[:, np.newaxis] y_1 = regr_1.predict(X_test) y_2 = regr_2.predict(X_test)
new_labels = []
id = "literal" lbp = 0
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
from_, f_params = self.get_from_clause()
self.master_opts['file_roots']['base'] = [os.path.join(integration.FILES, 'file', 'base')]
response = salt.utils.vmware.esxcli(host, username, password, cmd, protocol=protocol, port=port) ret.update({host: response})
self.assertRaises(NotImplementedError, store.select, 'df', '~(string="bar")')
X /= np.sqrt(np.sum(X ** 2, axis=0))
age = 5*24*60*60
try: import pip HAS_PIP = True except ImportError: HAS_PIP = False
invoice = models.ForeignKey(Invoice, null=True) invoice_item = models.ForeignKey(CourseRegistrationCodeInvoiceItem, null=True)
out = np.packbits((projected > 0).astype(int)).view(dtype=HASH_DTYPE) return out.reshape(projected.shape[0], -1)
with tm.assertRaisesRegexp(TypeError, 'list of lists-like'): self.index.set_levels(levels[0], level=[0, 1])
for zp in res['stdout'].splitlines(): zp = zp.split("\t") zp_data = {}
self.load_extra_content( system, course_descriptor, 'static_tab', self.data_dir / course_dir / 'tabs', course_dir, url_name )
s6.__salt__ = {} s6.SERVICE_DIR = '/etc/service'
'openedx.core.djangoapps.bookmarks',
self.assertNotEqual(token1, token2)
@ensure_csrf_cookie
enable_sigusr1_handler()
self.ensure_schema() self.migration_qs.create(app=app, name=name)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
response = self.client.get(reverse('admin:admin_views_ingredient_changelist'), {TO_FIELD_VAR: 'iname'}) self.assertEqual(response.status_code, 200)
from openpyxl.styles import NumberFormat return NumberFormat(**number_format_dict)
self.video.wait_for_state('pause')
self._create_course_unit_with_handout('textbook.pdf', save_settings=False) self.assertEqual(self.video.download_handout('application/pdf', is_editor=True), (True, True))
return self.find_courses(data['user'], CourseStaffRole.ROLE, data.get('values'))
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
if self._syndics[master].done():
self.assert_redirect_to_dashboard_looks_correct(actions.do_complete(
ScopeIds(None, block_type, location, location), dbmodel, for_parent=kwargs.get('for_parent'),
self.assertRaises(TypeError, self.frame.rename)
ir = IsotonicRegression() assert_array_equal(ir.fit_transform(np.ones(len(x)), y), np.mean(y))
source_courselike.static_asset_path = source_courselike.data_dir source_courselike.save() log.debug('course static_asset_path=%s', source_courselike.static_asset_path)
axis = self._get_axis_number(axis) if self._AXIS_REVERSED: m = self._AXIS_LEN - 1 return m - axis return axis
shutil.move(src_filename, dst_filename)
if isinstance(other, datetime.timedelta): other = DurationValue(other, output_field=fields.DurationField()) else: other = Value(other)
DarkLangConfig = apps.get_model("dark_lang", "DarkLangConfig") objects = DarkLangConfig.objects if not objects.exists(): objects.create(enabled=True)
self._test_create_model("test_mltdb_crmo", should_run=True)
if not hasattr(self, 'path'): self.path = self._path_from_module(app_module)
if ptr is None or isinstance(ptr, self.ptr_type): self._ptr = ptr else: raise TypeError('Incompatible pointer type')
assert images[3] == kerns[3] flops = kerns[1] * kerns[2] * 2 #nb flops by output image flops *= out[1] * out[2] flops *= images[3] * kerns[0] * images[0] return flops
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
return np.dot(np.dot(u * (1. / np.sqrt(s)), u.T), W)
result = store.select('df') tm.assert_frame_equal(expected, result)
multi_type = self.MULTI_TYPES[geom.geom_type.num] g = OGRGeometry(multi_type) g.add(geom)
return self.get_text('.course-title-override .certificate-value')
def ordered_dict_presenter(dumper, data): return dumper.represent_dict(data.items())
for item in ret: self.assertSaltTrueReturn(item)
import integration from salt.fileserver import gitfs
df2 = df.copy()
return strategy.storage.user.user_model().objects.get(email=email)
return auth_data
cfg_branch, _, environment = branch_env.partition(':')
store = self._get_modulestore_for_courselike(course_id) with store.bulk_operations(course_id, emit_signals): yield
if not __opts__['test'] and len(ret['changes']) > 0: ret['result'] = _write_config(config)
X, _, X_offset, _, X_scale = _preprocess_data(X, y, fit_intercept, normalize=normalize) return X, y, X_offset, y, X_scale
return self._match_registry.keys() + self._prefix_registry.keys()
if __grains__['os'] in ['Windows']: changes_needed = False current_settings = __salt__['proxy.get_proxy_win']() current_domains = __salt__['proxy.get_proxy_bypass']()
import salt.utils from salt.ext.six.moves import range
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from __future__ import absolute_import
if GeneratedCertificate.certificate_for_student(self.user, self.course_id) is not None: return False
result = Timestamp(result, tz='UTC') expected_utc = expected self.assertEqual(result.value, expected_utc) self.assertEqual(tslib.pydt_to_i8(result), expected_utc)
self.assertEqual(f.clean('2010-12-21'), date(2010, 12, 21))
self.assertFileContains('test/⊗.txt', '⊗ in the app dir')
limit = 999 if len(fields) > 1 else 500 return (limit // len(fields)) if len(fields) > 0 else len(objs)
from salt.ext.six.moves.urllib.parse import urlencode as _urlencode
if '@' in username_or_email: return User.objects.get(email=username_or_email) else: return User.objects.get(username=username_or_email)
already_exists and cinfos['out']['Image'] == iinfos['out']['Id']
unfiltered_response = self.verify_response(params={'username': self.staff_user.username}) for org in [self.course.org, alternate_course.org]: self.assertTrue(
pass
pass
if token_privileges[privilege] == privilege_attrs: log.debug( 'The requested privilege {0} is already in the ' 'requested state.'.format(privilege_name) ) return True
self._install_indv_pkg(package, out_file)
self._check_vocabulary() return [t for t, i in sorted(six.iteritems(self.vocabulary_), key=itemgetter(1))]
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
class A(object):
if key_betas is not None: betas = numpy.hstack((betas, key_betas)) betas.sort()
ScopeIds(None, category, loc, loc), DictFieldData(data_content),
return self._tags[course_id].get(key)
self.assertEqual(self.problem_page.problem_name, self.problem_name)
return "/assets/" + self._course_key + "/"
from salttesting.helpers import ensure_in_syspath, requires_salt_modules ensure_in_syspath('../../')
from __future__ import absolute_import
course_key = CourseKey.from_string(course_id) with modulestore().bulk_operations(course_key): response = get_course_topics(request, course_key) return Response(response)
self._advanced_settings.update(settings)
if value is None: return None return six.text_type(value)
module = CapaFactory.create(max_attempts="1", attempts="0") self.assertFalse(module.closed())
if self.__serialize_attr_aliases__ and argname in self.__serialize_attr_aliases__: argname = self.__serialize_attr_aliases__[argname] serialized[argname] = argvalue
arr = np.arange(1000, dtype=np.int64) index = DatetimeIndex(arr)
try: return render(request, path) except TemplateDoesNotExist: return technical_500_response(request, *sys.exc_info())
split_test_module.user_partition_id = -1 [active_children, inactive_children] = split_test_module.active_and_inactive_children() self.assertEqual(active_children, []) self.assertEqual(inactive_children, children)
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
assert_greater(mb_k_means.cluster_centers_.any(axis=1).sum(), 10)
def start(self): pass
if len(sl) == 1:
import salt.utils from salt.ext.six.moves import map
course_item.tabs = new_tab_list modulestore().update_item(course_item, request.user.id)
if cherrypy.request.method == 'OPTIONS': cherrypy.serving.request.handler = cors_handler
test1=value 1
sample_dict = {'x': (-10, 10)}
class datetimeobject(datetime, object): pass
if not status: ret['result'] = False return ret
__, __ = self.log_in_as_instructor()
dtype_numeric = dtype == "numeric"
for n, (name, estimator) in enumerate(estimators): y_predict = np.zeros((n_test, n_repeat))
dt = X.dtype if output_pixel_vals: dt = 'uint8' out_array = np.zeros(out_shape, dtype=dt)
break
request.user = self.user
parent = modulestore.get_parent_location(next_usage)
f = models.TextField() self.assertEqual(f.to_python(1), '1')
module = CapaFactory.create(done=False)
resp = self.client.get(self.url_unlocked) self.assertEqual(resp.status_code, 200) self.assertEquals('Origin', resp['Vary'])
return value.lower()
return urlencode({ 'next': '/account/finish_auth?{}'.format(urlencode(params)) })
self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course.id)) self.assert_no_events_were_emitted()
_check_all_orients(self.frame) self.assertEqual(self.frame.to_json(), self.frame.to_json(orient="columns"))
is_stopped = False for proc in all_processes: if proc.startswith(name) \ and _is_stopped_state(all_processes[proc]['state']): is_stopped = True break
from salt.log import is_console_configured from salt.exceptions import SaltClientError, SaltSystemExit, \ CommandExecutionError import salt.defaults.exitcodes import salt.utils
DEBUG_TOOLBAR_MONGO_STACKTRACES = False
if not self.ALLOW_NESTED and connection.in_atomic_block: raise transaction.TransactionManagementError('Cannot be inside an atomic block.')
return self
lyr.spatial_filter = None self.assertEqual(3, len(lyr))
self.desired_space = Conv2DSpace(shape=space.shape, channels=space.num_channels, axes=('c', 0, 1, 'b'))
migration_loader = MigrationLoader(connection) self.assertEqual(migration_loader.migrated_apps, {'migrated_app'}) self.assertEqual(migration_loader.unmigrated_apps, set())
self._find_within(".response_{} .discussion-response .wmd-input".format(response_id)).fill(new_body)
z = mask[:, None] * z + (1 - mask[:, None]) * state_before
solr.__salt__ = {} solr.__opts__ = {}
import salt.utils import salt.utils.itertools import salt.utils.decorators as decorators import salt.utils.pkg.rpm from salt.ext.six.moves import zip from salt.ext import six
from __future__ import absolute_import import io
auto_created = False concrete = False editable = False hidden = False
for obj in m2o_type_fields: if hasattr(obj, 'field'): reverse_field = obj.field self.assertTrue(reverse_field.is_relation and reverse_field.one_to_many)
course = xml.CourseFactory.build() sequence = xml.SequenceFactory.build(parent=course) split_test = SplitTestModuleFactory( parent=sequence, attribs={ 'user_partition_id': '0',
from salt.exceptions import SaltInvocationError
patcher = patch( 'social.backends.twitter.TwitterOAuth.unauthorized_token', create=True, return_value="unauth_token" ) patcher.start() self.addCleanup(patcher.stop)
self.assertEqual(len(FooImage.objects.all()), 0) self.assertEqual(len(FooFile.objects.all()), 0)
from __future__ import unicode_literals
if when > data['_when']: data['_when'] = when data['_when_run'] = True
return u"skipped_reverification.{}.{}".format(user_id, unicode(course_key))
raise SaltClientError(general_exception)
if values.dtype == 'M8[us]': values = values.astype('M8[ns]') return make_block(values, placement=mgr_locs)
from __future__ import unicode_literals
actual_enabled = certs_api.cert_generation_enabled(course_key) self.assertEqual(expect_enabled, actual_enabled)
from __future__ import unicode_literals
if Replication is not None: config_items.append(versioning_item) config_items.append(replication_item) else: config_items.append(replication_item) config_items.append(versioning_item)
response_providers = get_credit_provider_display_names(self.course_key) self.assertListEqual(self.PROVIDERS_LIST, response_providers)
fixture_files_in_dir.append((candidate, fixture_dir, fixture_name))
left = self.lhs.evaluate(env, engine=engine, parser=parser, term_type=term_type, eval_in_python=eval_in_python) right = self.rhs.evaluate(env, engine=engine, parser=parser, term_type=term_type, eval_in_python=eval_in_python)
module_store_setting['default']['OPTIONS']['stores'] = convert_old_stores_into_list( get_mixed_stores(module_store_setting) ) assert isinstance(get_mixed_stores(module_store_setting), list)
raise IOError("No translation files found for default language %s." % settings.LANGUAGE_CODE)
settings = _normalize_server_settings(**settings)
patcher = patch('config_models.models.cache', Mock(get=Mock(return_value=None))) patcher.start() self.addCleanup(patcher.stop)
try:
pan = web.get_data_yahoo('XOM', '2013-01-01', '2013-12-31', interval='w') self.assertEqual(len(pan), 53)
result = ts2.asfreq('4H', method='ffill') expected = ts[5:].asfreq('4H', method='ffill') assert_series_equal(result, expected)
AutoAuthPage( self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False ).visit()
for op in ['year', 'day', 'second', 'weekday']: self.assertRaises(TypeError, lambda x: getattr(self.dt_series, op))
df = orig.copy() df.iloc[2:4, 0] = ["b", "b"] tm.assert_frame_equal(df, exp_parts_cats_col)
GDAL_TO_POSTGIS = [None, 4, 6, 5, 8, 7, 10, 11, None, None, None, None]
#add_function_parentheses = True
if not success: return "ROLLBACK;" return "COMMIT;"
self.value = {}
try: return self.obj._xs(label, axis=axis) except: return self.obj[label]
import matplotlib.pyplot as plt from itertools import cycle
import salt.utils import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
return Client.objects.create( client_id=self.client_id, client_type=PUBLIC, )
_("There was a problem with the staff answer to this problem: complex boundary.")
log_loss_scorer = make_scorer(log_loss, greater_is_better=False, needs_proba=True)
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
for student in students[5:6]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.deleted, mode='honor' )
return course_metadata_utils.clean_course_key(self.location.course_key, padding_char)
_SEUPD_WHICH = ['LM', 'SM', 'LA', 'SA', 'BE']
types += text_type,
import salt.ext.six as six import tornado.ioloop import tornado.iostream
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
df['B', '1'] = [1, 2, 3] df['A'] = df['B', '1']
self.pub_channel.on_recv(self._process_cmd_socket)
self.teams_page.click_all_topics() self.verify_my_team_count(1)
Xt = X for name, transform in self.steps[:-1]: Xt = transform.transform(Xt) return self.steps[-1][-1].predict(Xt)
self.assertIsInstance(p.mugshot, TestImageFieldFile) self.assertEqual(bool(p.mugshot), False)
axes = [obj._get_axis_number(a) for a in axes]
cluster_centers_indices = np.unique(labels) labels = np.searchsorted(cluster_centers_indices, labels)
self.course.edxnotes = False self.assertEqual("original_get_html", self.problem.get_html())
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
return reverse( 'xblock_handler', args=(unicode(self.course.id), quote_slashes(self.item_url), 'xmodule_handler', dispatch) )
s1['test_data'] = 'value2' with self.assertRaises(UpdateError): s1.save()
dr = date_range('2011-10-02 00:00', freq='h', periods=10, tz=self.tzstr('America/Atikokan'))
obj.consolidate(inplace=True) ndims.add(obj.ndim)
places = list(Place.objects.all()) self.assertEqual(places, [place1, place2])
import yaml import json
self.assertTrue('success' in result and not result['success'])
_illegal_formatting = re.compile(r"((^|[^%])(%%)*%[sy])")
import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudSystemExit
dns_reply = list() try: dns_reply = dns.resolver.query(peer) except dns.resolver.NoAnswer: continue for dns_ip in dns_reply: ip_only_peers.append(str(dns_ip))
self.session.pop('_auth_user_id') self.session.save()
self.assertTrue(self_paced_course.self_paced) self.assertEqual(self_paced_course.start, one_month_from_now) self.assertIsNone(self_paced_section.start)
if isinstance(empty_label, (list, tuple)): if not len(empty_label) == 3: raise ValueError('empty_label list/tuple must have 3 elements.')
return "<LibraryFixture: org='{org}', number='{number}'>".format(**self.library_info)
#html_use_index = True
self.assertEqual(module.attempts, 2)
with salt.utils.fopen(file_path): plist = plistlib.readPlist(true_path)
self.assert_enrollment_status()
notification_msg = MIMEMultipart('related') msg_alternative = MIMEMultipart('alternative') notification_msg.attach(msg_alternative) subject = _(u'Course Credit Eligibility')
nested_ipt = mapping.nest(ipt)
import salt.pillar import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM
n_samples = 500
return fragment
executor.migrate([("author_app", "0002_alter_id")])
from __future__ import unicode_literals
return '{} {}'.format(self.selector, selector)
self.course_id = course_entry.course_key self.lazy = lazy self.module_data = module_data self.default_class = default_class self.local_modules = {} self._services['library_tools'] = LibraryToolsService(modulestore)
FEATURES['ENABLE_COURSEWARE_SEARCH'] = True
'state_events': bool,
if value is None: value_srid = None elif f.geom_type == 'RASTER' and isinstance(value, six.string_types): value_srid = get_pgraster_srid(value) else: value_srid = value.srid
elif isinstance(proxy, six.string_types): return preprocess(proxy) else: return proxy
assert has_expected
from __future__ import absolute_import import json import logging
__allow_additional_items__ = True
try:
X, redirects, index_map = get_adjacency_matrix( redirects_filename, page_links_filename, limit=5000000) names = dict((i, name) for name, i in iteritems(index_map))
X = generator.randn(n_samples, n_features)
for child_location, parent_location, revision in expected_results: self.assertEqual( parent_location, self.store.get_parent_location(child_location, revision=revision) )
with self: if self.cmd: passed = self.run_test() if not passed: self.failed_suites.append(self)
django.test.signals.template_rendered.send(sender=None, template=None, context=kwargs) return orig_render(*args, **kwargs)
import logging
return self.q(css='.page-content-secondary .tooltip-custom').text[0]
if self.source in self.html5_sources:
from netaddr import IPAddress from netaddr.core import AddrFormatError
resp = self.create_xblock(parent_usage_key=chap_usage_key, category='vertical') vert_usage_key = self.response_usage_key(resp)
try: if np.isnan(value): return True except: pass
self.parseAction += map(self._normalizeParseActionArgs, list(fns)) self.callDuringTry = self.callDuringTry or ("callDuringTry" in kwargs and kwargs["callDuringTry"]) return self
default = self.defaults.get(option.dest) value = getattr(self.options, option.dest, default) if value != default: continue
'module_dirs': list,
is_deleted = np.zeros(self.nblocks, dtype=np.bool_) is_deleted[removed_blknos] = True
while len(row) > 0 and (row[0] == '' or row[0] is None): row = row[1:] return row
predictions = cross_val_predict(clf, X_sparse, multioutput_y) assert_equal(predictions.shape, (150, 2))
return {'path': os.environ.get('PATH', '').strip()}
n_features = 2000 t = np.pi * np.linspace(0, 1, n_features)
if not self.done(): self.set_result(future)
self.q(css=subsection_css).first.click() self._on_section_promise(section_title, subsection_title).fulfill()
if not isnull(new_values).all(): values = new_values
return self.q(css=".certificates").present
from __future__ import absolute_import import copy import hashlib import logging import os
comb = self.frame.combineMult(self.frame)
data_rows = _strip_listing_to_done(cmdoutput.splitlines())
mongo_course = self.store.get_course(self.course_locations[self.MONGO_COURSEID].course_key) mongo_course.wiki_slug = 'simple' self.store.update_item(mongo_course, self.user_id)
assert_equal(len(slo), n_iter)
if len(obj_list) == 0: break
return settings.FEATURES.get('ENABLE_COURSEWARE_INDEX', False)
Finalize(self, self.close, exitpriority=15)
self._navigate_to_courseware_video() self.video.wait_for_video_class()
def f(): df.ix[2:5, 'bar'] = np.array([2.33j, 1.23 + 0.1j, 2.2])
#pepa_grains:
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
assert_array_equal(clf.predict([[0.2, -1.0]]), np.array([-1]))
stage_vars = _get_stage_variables(stage_variables)
cache_root_path = all_cached_pkgs[0] specific_pkg = '{0}/{1}/'.format(cache_root_path, name)
result = ci.insert(0, 'a') expected = CategoricalIndex(list('aaabbca'), categories=categories) tm.assert_index_equal(result, expected, exact=True)
for i in range(len(group) - 1): connections.append((group[i], group[i + 1]))
FIELD_OVERRIDE_PROVIDERS = tuple(ENV_TOKENS.get('FIELD_OVERRIDE_PROVIDERS', []))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
shutil.rmtree(clone_parent_dir)
with check_mongo_calls(courses_list_from_group_calls): _accessible_courses_list_from_groups(self.request)
if deep is None: s2 = s.copy() else: s2 = s.copy(deep=deep)
def summarize(df, name=None): return Series({'count': 1, 'mean': 2, 'omissions': 3, }, name=name)
check_is_fitted(self, "coefs_") y_pred = self._decision_scores(X) if y_pred.shape[1] == 1: return y_pred.ravel() return y_pred
self.assertFalse(views.is_course_passed(self.course, None, self.student, self.request))
return ( auth.user_has_role(user, CourseBetaTesterRole(descriptor.id)) or _has_staff_access_to_descriptor(user, descriptor, descriptor.id) or _is_descriptor_mobile_available(descriptor) )
from __future__ import absolute_import import time
wmi = types.ModuleType('wmi') sys.modules['wmi'] = wmi
try: import boto import boto.ec2.elb HAS_BOTO = True except ImportError: HAS_BOTO = False
from __future__ import absolute_import
lfw_pairs_train = fetch_lfw_pairs(data_home=SCIKIT_LEARN_DATA, resize=None, slice_=None, color=True, download_if_missing=False) assert_equal(lfw_pairs_train.pairs.shape, (10, 2, 250, 250, 3))
module = CapaFactory.create(max_attempts=None, rerandomize=RANDOMIZATION.NEVER, done=False) self.assertFalse(module.should_show_save_button())
import salt.utils from salt.exceptions import CommandExecutionError
from __future__ import absolute_import, with_statement import logging
s = Series(np.random.randn(5)) expected = s - s.index.to_series() result = s - s.index assert_series_equal(result, expected)
from salt://map.sls import Samba
for status in ["submitted", "must_retry", "approved"]: attempt.status = status attempt.save() assert_true(SoftwareSecurePhotoVerification.user_has_valid_or_pending(user), status)
return None
ensure_in_syspath('../../') from salt.modules import ssh from salt.exceptions import CommandExecutionError
return False
FEATURES['ENABLE_EDXNOTES'] = enable_edxnotes with override_settings(FEATURES=FEATURES): self.assertEqual(EdxNotesTab.is_enabled(self.course), enable_edxnotes)
def test_real_user(useless): useless_user = Mock(email='fake@fake.com', id=useless) return useless_user
for group in self.option_groups: for option in group.option_list: if option.dest is None: continue
top_idx = set(component.argsort()[-3:][::-1]) assert_true(tuple(sorted(top_idx)) in correct_idx_grps)
for op in ['__eq__', '__le__', '__ge__']: v1 = getattr(o, op)(o) self.check_metadata(o, v1)
return_stdout = kwargs.pop('return_stdout', False)
self.empty.info(buf=buf)
out = StringIO() assert_raises(IndexError, export_graphviz, clf, out, feature_names=[])
with self.assertRaises(ImportError): serializers.deserialize("yaml", "")
class ReplaceField(forms.ModelForm): url = forms.BooleanField()
import os import tarfile import tempfile import json import shutil from contextlib import closing
for o in self.objs: index = np.searchsorted(o, max(o)) self.assertTrue(0 <= index <= len(o))
super(BaseLmsIndexTest, self).setUp()
self.add_team_configuration(max_team_size=4, topics=[]) self.assertFalse(self.course.teams_enabled)
raise SkipTest("XFailed Test") diabetes = datasets.load_diabetes() X, y = diabetes.data, diabetes.target
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, source_course_key): component = self.store.get_item(unit.location) self.assertEqual(component.display_name, updated_display_name)
self.create_reverification_xblock()
with translation.override('ja'), self.settings(USE_L10N=True): self.humanize_tester([100], ['100'], 'intcomma')
if isinstance(data, str): log.error('Error requesting instance: {0}'.format(data)) return {}
if _is_convertible_to_td(item): try: item = Timedelta(item) except: pass
if fastpath: self._data.set_axis(axis, labels)
groups = grouped.groups tm.assertIsInstance(list(groups.keys())[0], datetime)
DEFAULT_ASSET_COLLECTION_NAME = 'assetstore'
category = item['location']['category'] apply_cached_metadata = category not in DETACHED_XBLOCK_TYPES and \ not (category == 'course' and depth == 0) return apply_cached_metadata
MOCK_STAFF_GRADING = True MOCK_PEER_GRADING = True
return running( name, restart=restart, update=update, user=user, conf_file=conf_file, bin_env=bin_env )
pass
raise NotImplementedError('get_response is not implemented.')
res = __salt__['cmd.run_all'](cmd)
import salt.utils import salt.ext.six as six
node.visible_to_staff_only = True self.mstore.update_item(node, self.coach.id)
mixed = Series(['fooBAD__barBAD', NA, 'foo', True, datetime.today(), 'BAD', None, 1, 2.])
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
with self.assertNumQueries(0): self.field_data_cache = FieldDataCache([mock_descriptor()], course_id, self.user) self.kvs = DjangoKeyValueStore(self.field_data_cache)
X = np.arange(10000)[:, np.newaxis] y = np.arange(10000)
df = DataFrame({'col1': [1.123, 2.123, 3.123], 'col2': [1.234, 2.234, 3.234]})
resp = self.client.ajax_post( self.url, data={'tabs': [{'tab_id': tab_id} for tab_id in tab_ids]}, ) self.assertEqual(resp.status_code, 204)
class GEOSGeom_t(Structure): pass
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
wrongly_typed = [Series([0, 1]), 2, 'str', None, np.array([0, 1])] df = DataFrame({'a': [1, 1]})
children = self.q(css='.note-group') return [EdxNotesTagsGroup(self.browser, child.get_attribute("id")) for child in children]
import copy import logging import re
discount = Decimal("{0:.2f}".format(Decimal(percentage_discount / 100.00) * value)) return value - discount
enrolled = CourseEnrollment.objects.users_enrolled_in(course_id=course_id).values_list('email', flat=True) return CourseEnrollmentAllowed.objects.filter(course_id=course_id).exclude(email__in=enrolled)
import pandas.core.config_init
raise NotImplementedError("cannot use an invert condition when " "passing to numexpr")
return self.assertCleanError(ipaddress.AddressValueError, details, *args)
X = 5 * rng.rand(10000, 1) y = np.sin(X).ravel()
select_option_by_text(language_selector, 'English') self.account_settings.wait_for_ajax() self.assertEqual(self.account_settings.value_for_dropdown_field('pref-lang'), u'English')
self.define_randomized_custom_response_problem(problem_url_name, redefine=True) self.render_problem('u1', problem_url_name) self.check_state('u1', descriptor, 1, 1, 2)
import salt.returners import salt.utils.jid import salt.exceptions
signing_key = _sig_key( secret_access_key, datestamp, location, product )
from salt.exceptions import CommandExecutionError import salt.utils
class AdHocLazyObject(LazyObject): def _setup(self): self._wrapped = wrapped_object return AdHocLazyObject()
try: from log4mongo.handlers import MongoHandler, MongoFormatter HAS_MONGO = True except ImportError: HAS_MONGO = False
import salt.config import salt.loader
request_csrf_token = request.META.get(settings.CSRF_HEADER_NAME, '')
try: mask = ~lib.ismember(arg, tslib._nat_strings) return calc_with_mask(arg, mask) except: pass
model = linear_model.LinearRegression() model.fit(X, y)
from __future__ import absolute_import
df = DataFrame({}, columns=['foo', 'bar']) self.assertEqual(df.values.dtype, np.object_)
def f(): s.categories = [1, 2]
parent_dir = os.path.dirname(path)
CourseModeFactory.create( course_id=self.course_key, mode_display_name="Honor No Expiration", mode_slug="honor_no_expiration", expiration_datetime=None )
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
self.cost_from_X_data_specs()[0].validate(data) X, Y = data Y_hat = self.fprop(X) return self.cost(Y, Y_hat)
gid = group_to_gid(gid)
self.video.show_captions()
self.band = None if os.path.isfile(pam_file): os.remove(pam_file)
from __future__ import unicode_literals
if include_default_option: field_dict["options"].append({ "value": "", "name": "--", "default": True })
from __future__ import absolute_import import os
ret['deploy_kwargs'] = deploy_kwargs
try: temp_file = _mkstemp_copy(path=path, preserve_inode=False) except (OSError, IOError) as exc: raise CommandExecutionError("Exception: {0}".format(exc))
from __future__ import unicode_literals
for key in locations: self.assertFalse(self._has_changes(locations[key]))
data_dict = get_executive_report(course_id) data_dict.update( { 'total_enrollments': true_enrollment_count, 'report_generation_date': report_generation_date.strftime("%Y-%m-%d"), } )
return '%s'
self.wait_for_ajax() return self.q(css='.u-field-{}'.format(field_id)).visible
try: import netaddr HAS_NETADDR = True except ImportError as e: HAS_NETADDR = False
with self.assertRaises(IntegrityError): Person.objects.get_or_create(first_name="Tom", last_name="Smith")
from __future__ import absolute_import
wua_searcher = wua_session.CreateUpdateSearcher()
course_enrollments.sort(key=lambda x: x.created, reverse=True)
min_estimators = 15 max_estimators = 175
continue
try: self.assertIn(ret_str, instance) except AssertionError: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME)) raise
from __future__ import absolute_import
return (unpickle_inner_exception, (attached_to, name), self.args)
self.object = None
if parens is not None: left_parens = parens if left_parens == '{': left_parens = r'\{'
courses_list, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list), 1) self.assertNotIn( ccx_course_key, [course.id for course in courses_list] )
self.assertContains(response, "\n1 recommendation\n")
lm = LayerMapping(County, co_shp, co_mapping, transform=False, unique='name') with self.assertRaises(MissingForeignKey): lm.save(silent=True, strict=True)
is_oneshot = True
from smtplib import SMTPException
from __future__ import absolute_import import cherrypy
return vpnservice
minion_id = kwargs['opts']['id']
assert_array_equal(clf.feature_log_prob_, (num - denom))
if settings.COMPREHENSIVE_THEME_DIR: enable_comprehensive_theme(settings.COMPREHENSIVE_THEME_DIR)
response = self.client.post(self.send_mail_url, test_email) self.assertEquals(json.loads(response.content), self.success_content)
return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)
return _makeTags( tagStr, True )
self.q(css='a[data-section=membership]').first.click() membership_section = MembershipPage(self.browser) membership_section.wait_for_page() return membership_section
for how in ['sort_values', 'isnull']: with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): getattr(r, how)()
instructor_task = self._create_success_entry() instructor_task.task_output = None succeeded, message = get_task_completion_info(instructor_task) self.assertFalse(succeeded) self.assertEquals(message, "No status information available")
if self.get_autocommit() != self.settings_dict['AUTOCOMMIT']: self.close() return
run_command = (test_command + 'cleanup').format(mode) __salt__['cmd.run'](run_command)
altered_grader = CourseGradingModel.fetch(self.course.id) self.assertDictEqual(test_grader.grade_cutoffs, altered_grader.grade_cutoffs, "Noop update")
return self.nunique() == len(self)
if statii[dev]['cache'] == cuuid: count += 1
from __future__ import absolute_import
course_masquerade = get_course_masquerade(user, course_key) return bool(course_masquerade and course_masquerade.user_name)
request = self.factory.get('////absolute-uri') self.assertEqual( request.build_absolute_uri(), 'http://testserver//absolute-uri' )
#today = '' #today_fmt = '%B %d, %Y'
emp_cov = np.dot(X.T, X) / n_samples
OAUTH_ID_TOKEN_EXPIRATION = 5 * 60
if sl_: tmpret = _get_template_texts(source_list=sl_, template=template, defaults=defaults, context=context) if not tmpret['result']: return tmpret text = tmpret['data']
self['event_type'] = self.legacy_event_type
__virtualname__ = 'system'
assert_raises(ValueError, compute_sample_weight, {1: 2, 2: 1}, y, range(4))
providers[provider_alias][driver]['profiles'] = {}
user = self.create_user_and_enroll(enrollment_type) if verification_status: self.add_verification_status(user, verification_status)
salt.utils.fopen(minion_config, 'w').write( 'blah: false\n' 'root_dir: {0}\n' 'log_file: {1}\n'.format(tempdir, minion_config) )
weights = weights.fillna(0)
course = get_course_by_id(SlashSeparatedCourseKey.from_deprecated_string(course_id)) unit = find_unit(course, request.GET.get('url')) return JsonResponse(dump_module_extensions(course, unit))
unshifted = self.ts.shift(0) assert_series_equal(unshifted, self.ts)
ret = {'name': name, 'result': False, 'comment': '', 'changes': {},
return LibraryLocator( org=library_info['org'], library=library_info['course'], branch=branch, )
self.config.pop(cli_log_file_fmt)
mappings = mappings or {} self.store = MixedModuleStore( contentstore, create_modulestore_instance=create_modulestore_instance, mappings=mappings, **self.options ) self.addCleanup(self.store.close_all_connections)
estimator_error = np.mean( np.average(incorrect, weights=sample_weight, axis=0))
ttype = 'zeromq'
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
result = sparse[orig % 2 == 1] exp = orig[orig % 2 == 1].to_sparse(fill_value=0) tm.assert_sp_series_equal(result, exp)
U, S, V = randomized_svd(X, n_components, random_state=random_state) W, H = np.zeros(U.shape), np.zeros(V.shape)
wrong_round_dict = {'col3': 2, 'col2': 1} tm.assert_frame_equal(df.round(wrong_round_dict), expected_partially_rounded)
ret_override_cfg = ret_cfg.get( attr_name, override_cfg_default ) if ret_override_cfg: return ret_override_cfg
DEFAULT_DATETIME_STR = datetime.datetime(year=2014, month=12, day=1).isoformat(' ')
end = how == 'E' if end: ordinal = asi8 + mult1 - 1 else: ordinal = asi8
self.apps_ready = self.models_ready = self.ready = False
if request.content_type != MergePatchParser.media_type: raise UnsupportedMediaType(request.content_type) return Response(update_thread(request, thread_id, request.data))
return self._geom_attribute('centroid', **kwargs)
self.assertEqual(_mock_pep8_violations.call_count, 1) self.assertEqual(self._mock_paver_sh.call_count, 2)
try: new_data = data.astype('int64') if (new_data == data).all(): data = new_data result = True except: pass
entrance_exam_minimum_score_pct = _get_default_entrance_exam_minimum_pct() if ee_min_score != '' and ee_min_score is not None: entrance_exam_minimum_score_pct = float(ee_min_score) return create_entrance_exam(request, course_key, entrance_exam_minimum_score_pct)
html_use_smartypants = True
'-oStrictHostKeyChecking={0}'.format(host_key_checking), '-oUserKnownHostsFile={0}'.format(known_hosts_file), '-oControlPath=none'
warn("Assigning to 'levels' is deprecated, use 'categories'", FutureWarning, stacklevel=2) self.categories = levels
with self.settings(MODULESTORE_BRANCH='published-only'): for cache in settings.CACHES: caches[cache].clear()
self.course_info_page.visit() self.tab_nav.go_to_tab('Test Static Tab') self.assertTrue(self.tab_nav.is_on_tab('Test Static Tab'))
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
ret = salt.utils.cloud.bootstrap(vm_, __opts__)
return lambda course, reverse_url_func: reverse_url_func(reverse_name, args=[course.id.to_deprecated_string()])
bulk_write_record = self._get_bulk_ops_record(course_key) if bulk_write_record.active: bulk_write_record.modules[version_guid][block_key] = block
nonstaff, password = self.create_non_staff_user() client = AjaxEnabledTestClient() if authenticate: client.login(username=nonstaff.username, password=password) nonstaff.is_authenticated = lambda: authenticate return client, nonstaff
PRIVATE_REQS = 'requirements/private.txt' if os.path.exists(PRIVATE_REQS): PYTHON_REQ_FILES.append(PRIVATE_REQS)
y_pred = clf.predict(xx)
from __future__ import absolute_import from textwrap import dedent
do_init = not(self.warm_start and hasattr(self, 'converged_')) n_init = self.n_init if do_init else 1
semi_major = srs_double(lgdal.OSRGetSemiMajor) semi_minor = srs_double(lgdal.OSRGetSemiMinor) invflattening = srs_double(lgdal.OSRGetInvFlattening)
from markdown.util import etree, AtomicString
return False
import numpy as np
_ = lambda text: text
return [self._filters]
if answer_id in self.cmap: return self.cmap[answer_id]['correctness'] == 'partially-correct' return None
__virtualname__ = 'pip'
self.assertIn('Traceback', result['success'])
logger.debug( "Comment Service received POST request {0} to path {1}" .format(json.dumps(post_dict), self.path) )
course_masquerade = get_course_masquerade(user, course_key) return course_masquerade.role if course_masquerade else None
rs = ser.replace([np.nan, 'foo', 'bar'], -1)
with self.assertRaisesMessage(AssertionError, msg): with self.assertRaisesMessage(ValueError, "Expected message"): raise ValueError("Unexpected message")
self.settings_patcher.stop() super(GatingTestCase, self).tearDown()
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
@property def geos(self): "Returns a GEOSGeometry object from this OGRGeometry." from django.contrib.gis.geos import GEOSGeometry return GEOSGeometry(self.wkb, self.srid)
if not Article._meta.get_latest_by: Article._meta.get_latest_by = 'pub_date'
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.DENY)
'packages': ('openassessment',),
block = store.create_child( user_id, parent_loc, block_info.category, block_id=block_info.block_id, fields=block_info.fields, ) for tree in block_info.sub_tree: create_sub_tree(block.location, tree)
class HTMLParseError(Exception): pass
call_command( 'migrate', verbosity=max(verbosity - 1, 0), interactive=False, database=self.connection.alias, run_syncdb=True, )
self.assertEqual(idx.reindex(dt_idx.values)[0].name, None) self.assertEqual(idx.reindex(dt_idx.tolist())[0].name, None)
click_css(page, component_css, 0)
return tensor.dot(self._hidden_activation(inputs), self.whf)
with self.assertRaises(TemplateDoesNotExist): loader.find_template(template_name)
if self.cohort_config is None: return [] else: return self.cohort_config.get("auto_cohort_groups", [])
EmptyPromise(self.is_error_modal_showing, 'Error Modal Displayed', timeout=30).fulfill()
buttons = world.css_find('div.new-component-{} button'.format(category))
if (n_inliers_subset == n_inliers_best and score_subset < score_best): continue
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
all_assets.extend(course_assets.setdefault(asset_type, [])) asset_idx = all_assets.find(asset_key)
MOBILE_STORE_URLS = { 'apple': '#', 'google': '#' }
data = bz2.decompress(f.read()) f = StringIO(data)
tgt = ipaddress.ip_address(tgt)
AUTHENTICATION_BACKENDS = ( 'ratelimitbackend.backends.RateLimitModelBackend', )
raise NotImplementedError
reraise_as("Couldn't open {0}".format(filepath))
from __future__ import absolute_import
kwargs = {'hostname': host, 'creds': creds}
if len(set(['year', 'month', 'day']) & found_attrs) != 3: return None
from __future__ import absolute_import
counts = {}
self.label_distributions_ = np.zeros((n_samples, n_classes)) for label in classes: self.label_distributions_[y == label, classes == label] = 1
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'digital_ocean'
self.assertEqual(article.content, "\r\nTst\r\n")
log.warning("_find_course_asset request of XML modulestore - not implemented.") return (None, None)
return allowed_origins
length = int(self.headers.getheader('content-length')) data_string = self.rfile.read(length) post_dict = json.loads(data_string)
pass
response = self._load_dashboard() self.assertNotContains(response, "credit-eligibility-msg") self.assertNotContains(response, "purchase-credit-btn")
assert not ind.is_monotonic
self.attempt_upload_file_and_verify_result(test_case, 'upload_screenshot')
actual = grouped_df.filter(lambda x: len(x) > 1) expected = df.iloc[expected_indexes] assert_frame_equal(actual, expected)
return JsonError(["username parameter is required"])
cp = self.ts[:10].copy() cp[:] = np.nan self.assertTrue(isnull(cp.cov(cp)))
tempdir = tempfile.mkdtemp() egg = zipfile.ZipFile(top_dirname) egg.extractall(tempdir) top = os.path.join(tempdir, base) os.chdir(tempdir)
d1, d2 = self.ts.index[[5, 15]] result = self.ts.ix[d1:d2] expected = self.ts.truncate(d1, d2) assert_series_equal(result, expected)
return self._get_xblocks(".is-inactive ")
DEBUG = True SITE_NAME = 'localhost:{}'.format(LETTUCE_SERVER_PORT)
client = getattr(self, api_client) user = getattr(self, user) client.login(username=user.username, password=self.test_password) return client
"error": "invalid_client", "error_description": "{} is not a public client".format(client_id),
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../')
response = csrf_client.post('/post_view/', {}) self.assertEqual(response.status_code, 403)
class Person(Form): first_name = CharField() prefix = 'foo'
hashes[clean_path(full_cython_path)] = current_hash
'openedx.core.djangoapps.site_configuration',
self.assertFalse(self.cohort_management_page.is_category_selected())
self.assertNotIn("strict-transport-security", self.process_response(secure=True))
ADMINS = []
destroy(vm_['name'])
course_module = modulestore().get_course(course_id) if course_module is None: return Response(status=status.HTTP_404_NOT_FOUND)
df.resample('W-MON', closed='left', label='left').first()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return dateformat.format(value, get_format(format or 'DATE_FORMAT', use_l10n=use_l10n))
import logging
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call )
execute_from_command_line(['django-admin', 'help', 'makemessages'])
func.restype = c_int
self._setup_mode_and_enrollment(self.PAST, "verified")
Y = Y.astype(np.float64) if sample_weight is not None: sample_weight = np.atleast_2d(sample_weight) Y *= check_array(sample_weight).T
second_iterations = 0 for index, raw_author in enumerate(raw_authors): self.assertEqual(normal_authors[index], raw_author) second_iterations += 1
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
assert_not_equal(id(attr_value), id(attr_value_cloned))
related_models.add((app_label, model_name))
if lang_code == 'zh_HANT': self.video.select_language(lang_code) unicode_text = lang_text.decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
if level_num in columns.names: return columns.names[level_num] else: if columns.names[level_num] is None: return level_num else: return columns.names[level_num]
#self.assertIn("4 matching components", library_block.author_content)
self.assertQuerysetEqual( Article.objects.filter(reporter_id__exact=self.r.id), ["<Article: John's second test>", "<Article: This is a test>"] )
scaler = MinMaxScaler(feature_range=(2, 1)) assert_raises(ValueError, scaler.fit, X)
print 'Not logged in' for page in auth_pages: print "Checking '{0}'".format(page) self.check_page_get(page, expected=302)
ndim = values.ndim if values.ndim == 1:
if mp is not None: try: _sem = mp.Semaphore()
self.assertFalse(form.is_valid())
from __future__ import absolute_import
if not trust_root.validateURL(openid_request.return_to): log.error('invalid return_to') return False
descriptor = modulestore().get_course(course_key) del descriptor.graceperiod modulestore().update_item(descriptor, user.id)
a, b = first, second assert a is not b, "%s: %r is %r" % (msg.format(a, b), a, b)
return Fragment(self.FRAG_CONTENT)
rng = date_range('1/1/1990', periods=N, freq='H', tz='US/Eastern') ts = Series(np.random.randn(N), index=rng)
df = DataFrame({'foo': [1, 2], 'bar': [3, 4]}).astype(np.int64)
post_login_handler = _finish_auth_url(params) js_success_var = 'var nextUrl = "{}";'.format(post_login_handler) self.assertContains(response, js_success_var)
df['foo', 'four'] = 'foo' df = df.sortlevel(0, axis=1)
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
self.check_get_and_set_methods(tab)
if is_feature_enabled(): BACKEND.enable_microsites(log)
lead, middle, trail = '', word, '' lead, middle, trail = trim_punctuation(lead, middle, trail)
field_type, field_params, field_notes = self.get_field_type(connection, table_name, row) extra_params.update(field_params) comment_notes.extend(field_notes)
from __future__ import absolute_import import difflib import itertools import logging import os import shutil import sys import traceback from collections import Iterable, Mapping, defaultdict
__virtualname__ = 'svn'
result2 = (DataFrame.from_records(recarray, columns=columns) .reindex(columns=df.columns)) result3 = (DataFrame.from_records(recarray2, columns=columns) .reindex(columns=df.columns))
self.assertTrue( inspect.isfunction( self.loader[self.module_name + '.loaded'] ) ) self.assertTrue(self.module_name + '.not_loaded' not in self.loader)
import integration import salt.utils
data_converted = _convert_string_array(data, encoding) itemsize = data_converted.itemsize
f = lambda x: len(set(map(id, x.index))) grouped.agg(f)
from __future__ import absolute_import, print_function import datetime import json import logging import time
result = df.set_index(df.C) self.assertEqual(result.index.name, 'C')
continue
from __future__ import absolute_import import os import shutil
self.lc_block.max_count = 10 self.lc_block.capa_type = 'multiplechoiceresponse' self.lc_block.refresh_children() result = self.lc_block.validate()
from __future__ import absolute_import import copy import logging import time import traceback
if apply_routes: try: __salt__['ip.apply_network_settings'](**kwargs) except AttributeError as error: ret['result'] = False ret['comment'] = str(error) return ret
if not os.path.exists(self._dir): return for fname in self._list_cache_files(): self._delete(fname)
if self.only_on_web: return {"only_on_web": True}
self.dispatch = Pickler.dispatch.copy()
self.duration_sec = 'unknown'
cohort_tuple = namedtuple("Cohort", "name id user_count assignment_type user_partition_id group_id") return cohort_tuple( name=cohort.name, id=cohort.id, user_count=user_count, assignment_type=assignment_type, user_partition_id=user_partition_id, group_id=group_id )
import salt.ext.six as six try: import zmq HAS_ZMQ = True except ImportError: HAS_ZMQ = False
clf = DecisionTreeClassifier() clf.feature_importances_
return ( self.q(css='{} .acid-block'.format(self.context_selector)).present and wait_for_xblock_initialization(self, self.context_selector) and self._ajax_finished() )
self.options.log_file_level = self.config.get( self._logfile_loglevel_config_setting_name_ )
response = client.post(self.path, data=json.dumps(data), content_type=JSON, HTTP_X_CSRFTOKEN=csrf_token) self.assertEqual(response.status_code, 201)
mock_course_module = MagicMock() mock_course_module.position = 3 mock_course_module.get_display_items.return_value = [] self.assertIsNone(helpers.get_course_position(mock_course_module))
return (floating_network, port)
),
assert_less(np.sum(s_clf.coef_ != 0.0), 2 * n_informative)
AutoAuthPage( self.browser, username=self.username, email=self.email, password=self.password, course_id=self.course_id, staff=False ).visit()
self.assertEqual(test, expected)
obj = OAuth2ProviderConfig(**kwargs) obj.save() return obj
from __future__ import absolute_import
request = self.rf.get('/unknown') response = HttpResponseNotFound() self.assertEqual(CommonMiddleware().process_response(request, response), response)
mathjax_container = self.q(css=".static_tab_wrapper .MathJax_SVG") EmptyPromise( lambda: mathjax_container.present and mathjax_container.visible, "MathJax is not visible" ).fulfill()
from __future__ import absolute_import import os import copy import shutil import tempfile
start = datetime.now(UTC) self.add_icrv_xblock(related_assessment_name="Midterm A", start_date=start)
diff = 2**(self.rounds - int(rounds)) - 1 while diff > 0: self.encode(password, force_bytes(salt)) diff -= 1
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'nova', vm_['profile'], vm_=vm_) is False: return False
return microsite.get_value( 'COURSE_ABOUT_VISIBILITY_PERMISSION', settings.COURSE_ABOUT_VISIBILITY_PERMISSION )
result = algos.diff(_values_from_object(self), periods) return self._constructor(result, index=self.index).__finalize__(self)
if format == '%Y%m%d': try: result = _attempt_YYYYMMDD(arg, errors=errors) except: raise ValueError("cannot convert the input to " "'%Y%m%d' date format")
verbose = getattr(options, "verbose", None) cmd = "i18n_tool extract" if verbose: cmd += " -vv" sh(cmd)
return (-2 * self.score(X) * X.shape[0] + self._n_parameters() * np.log(X.shape[0]))
keyarr = key
chapter_index = self._chapter_index(chapter) if chapter_index is None: return None
self.assertEqual(correct_map.get_overall_message(), 'Message text')
return getattr(self, '_cacher', None) is not None
self.assertEqual(response.status_code, 302)
clf3 = self.factory(alpha=0.01, eta0=0.01, n_iter=5, shuffle=False, warm_start=True, learning_rate=lr) clf3.fit(X, Y)
ir = IsotonicRegression(increasing='auto', out_of_bounds="raise")
qs = self.get_dated_queryset() date_list = self.get_date_list(qs, ordering='DESC') if not date_list: qs = qs.none() return (date_list, qs, {})
supports_nullable_unique_constraints = True
mask = notnull(frame.values)
salt '*' vsphere.get_vmotion_enabled my.esxi.host root bad-password
if column_name in indexes: if indexes[column_name]['primary_key']: extra_params['primary_key'] = True elif indexes[column_name]['unique']: extra_params['unique'] = True
face_image = decode_image_data(face_data)
_maybe_remove(store, 'wp') store.put('wp', wp, format='table')
certificates = course.certificates.get('certificates', []) if only_active: certificates = [certificate for certificate in certificates if certificate.get('is_active', False)] return certificates
with self.assertRaises(ValueError): with transaction.atomic(using='other'): dive.reviews.add(review1)
from pandas.tseries.index import DatetimeIndex return DatetimeIndex(subarr, copy=copy, name=name, **kwargs)
users = [UserFactory() for _ in range(3)] self._enroll_users(users, self.course.id)
self.alias_refcount[alias] -= amount
merged_parent_group_ids = None
TOKEN_RESPONSE_DATA = None
sampler_updates = self.sampler.updates()
sys.path.append(project_path)
<vcenter-password> esxi_hosts='[esxi-1.example.com, esxi-2.example.com]'
for minion_id, minion_key in six.iteritems(preseed_minion_keys): rpath = os.path.join( preseed_minion_keys_tempdir, minion_id ) ssh_file(opts, rpath, minion_key, ssh_kwargs)
template_obj = MicrositeTemplate.get_template_for_microsite( microsite_get_value('site_domain'), uri )
is_eligible = api.is_user_eligible_for_credit("staff", credit_course.course_key) self.assertFalse(is_eligible)
if os.environ.get('TRAVIS') == "true": raise SkipTest("This test needs to be skipped on Travis")
return self.values
add_discussion(container, group_a_menu) container.duplicate(self.group_a_item_1_action_index)
ret[key] = {'new': '', 'old': old[key]}
return "CAST(%s AS TIMESTAMP)" % field_name
if self.algorithm not in ('SAMME', 'SAMME.R'): raise ValueError("algorithm %s is not supported" % self.algorithm)
ret = self.run_run_plus(fun='fileserver.update', args=['backend="[roots]"']) self.assertTrue(ret['fun'])
output.append('\'{0}\': \'{1}\''.format(key, value))
global _local_random
self.expect_error_on_file_content( 'cohort\n', "The file must contain a 'username' column, an 'email' column, or both." )
if not added and not cmd_opt: raise CommandExecutionError( 'Specified arguments did not result in modification of repo' )
mock_sh = patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh = mock_sh.start()
import salt.utils
add_function_parentheses = True
username, user_id = self.log_in_as_unique_user() profile_page = self.visit_profile_page(username) self.verify_profile_page_is_public(profile_page)
from pandas.tseries.plotting import tsplot import matplotlib.pyplot as plt
middleware.process_request(request) request.session['hello'] = 'world'
role.add_users(self.user)
with remove_ccx(location) as (location, restore): return restore( self._modulestore.convert_to_draft(location, user_id) )
from __future__ import absolute_import, print_function import os import yaml import tarfile import shutil import msgpack import datetime import hashlib import logging import pwd import grp import sys
pass
with remove_ccx(location) as (location, restore): return restore( self._modulestore.publish(location, user_id, **kwargs) )
subarr = _sanitize_index(data, index, copy=True)
certificates.update( status=CertificateStatuses.unavailable, verify_uuid='', download_uuid='', download_url='', grade='', )
self.assertEqual(p.books.count(), 3)
self.assertEquals( response_data["content"], strip_none(make_mock_thread_data(course=self.course, text=text, thread_id=thread_id, num_children=1)) ) mock_request.assert_called_with( "get",
df = pd.DataFrame({'X': [1, 2, 3, 4], 'Y': list('aabb')}, index=list('ABCD'))
order_item_dict = dict((feature, getattr(purchased_course, feature, None)) for feature in order_item_features)
cs, sn, rho = _sym_ortho(rhobar1, beta)
noise = rng.randn(*X.shape) / 100 X_reembedded = clf.transform(X + noise) assert_less(linalg.norm(X_reembedded - clf.embedding_), tol)
X = faces.data[:5000] n_samples, h, w = faces.images.shape n_features = X.shape[1]
from salt.states import apache_site
household.index.name = 'foo'
s = data[:, 11] == 1 data = np.c_[data[s, :11], data[s, 12:]] target = target[s]
return 24, 80
response['Last-Modified'] = http_date( timegm(feedgen.latest_post_date().utctimetuple()))
l = Series(values).sort_values() ln = len(l)
_check_plot_works(df.hist, figsize=(8, 10))
response = self.client.get(reverse('admin:admin_views_customarticle_add')) self.assertTemplateUsed(response, 'custom_admin/add_form.html')
estimator_error = (sample_weight * error_vect).sum()
if child.location in prob_grade_distrib:
if not history_entries: raise self.DoesNotExist()
return self.field.widget.value_from_datadict(self.form.data, self.form.files, self.html_name)
X = np.array([[1.], [0.], [0.], [5.]]) X_csr = sparse.csr_matrix(X) X_csc = sparse.csc_matrix(X)
intfs = __salt__['sysfs.interfaces'](path)
return self.file.name
return len(self.q(css=self.section_selector))
n_labels = 15 n_samples = 1000 n_folds = 5
try: import psycopg2 HAS_POSTGRES = True except ImportError: HAS_POSTGRES = False
os.remove(filename)
from __future__ import unicode_literals
def _get_items(self): return self.axes[0]
n_iter_search = 20 random_search = RandomizedSearchCV(clf, param_distributions=param_dist, n_iter=n_iter_search)
selected = tds[6] self.assertEqual(selected.get_attribute('class'), 'selected')
response = self.client.get('/lastmod-sitemaps/mixed-ascending.xml') self.assertFalse(response.has_header('Last-Modified'))
return self.warp(data, resampling=resampling, max_error=max_error)
ret['comment'] = 'Event module not available. Schedule add failed.' ret['result'] = True
assert_equal(pairwise_distances([[1]], metric=lambda x, y: 5)[0, 0], 5)
import integration
return base.DeserializedObject(obj, m2m_data)
self.assertEqual(buffer_o, expected_data) self.assertFalse(term.isalive())
from __future__ import absolute_import import os import copy
yield found + 1, "E201 whitespace after '%s'" % char
for j in range(len(tset)): cs[i] = tset self.assertEqual(tset[j], cs[i][j])
return [ desc.module_class for desc in _list_descriptors() ]
from __future__ import unicode_literals
return site_prefix() + reverse( 'certificates:html_view', kwargs={'user_id': user_id, 'course_id': unicode(course_key)}) + '?evidence_visit=1'
check_sources(b'\xc3\x85ngstr\xc3\xb6m', ['/dir1/Ångström', '/dir2/Ångström']) check_sources('Ångström', ['/dir1/Ångström', '/dir2/Ångström'])
(14, True, u"True"),
return self.q(css=".xblock-message.information").first.text[0]
self.assertTrue(fstats_post.st_mtime, fstats_orig.st_mtime-age)
scaling = 0.3 selection_threshold = 0.5
other_icrv = ItemFactory.create(parent=self.verticals[3], category='edx-reverification-block') self._update_partitions()
with tm.assert_produces_warning(UserWarning): axes = _check_plot_works(scatter_matrix, filterwarnings='always', frame=df, range_padding=.1) axes0_labels = axes[0][0].yaxis.get_majorticklabels()
timed_exam_attempt_context = None try: timed_exam_attempt_context = get_attempt_status_summary( user.id, unicode(course.id), unicode(section.location) )
self.assertEqual( list(Order.objects.exclude(items__status=1).distinct()), list(Order.objects.exclude(Q(items__status=1)).distinct()))
best_doublecolon_len = doublecolon_len best_doublecolon_start = doublecolon_start
self.assertEqual(len(team_membership), 1) member = team_membership[0]['user'] self.assertEqual(member['username'], creator)
'support',
return [user.name for user in self.users]
import salt.returners import salt.utils.jid import salt.exceptions from salt.exceptions import CommandExecutionError
clf = svm.SVR(kernel=lambda x, y: np.array([[1.0]])) clf.fit(X, y) assert_raises(ValueError, clf.predict, X)
from __future__ import absolute_import import logging
def is_secure(self): return getattr(self, '_is_secure_override', False)
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError
for idx in [self.strIndex, self.intIndex, self.floatIndex]: empty_idx = idx.__class__([])
from __future__ import unicode_literals
self.login_staff() content = self.get_course_info_page().content self.assertIn("OOGIE BLOOGIE", content)
if self.op in ['==', '!='] and len(values) > self._max_selectors:
df = self.frame.copy() df = df.set_index(['A', 'B'])
destroy(server_['name'])
super(AccountSettingsPageTest, self).setUp() self.full_name = XSS_INJECTION self.username, self.user_id = self.log_in_as_unique_user(full_name=self.full_name) self.visit_account_settings_page()
inp = self.get_inputs() out = self.get_outputs() chmod = []
self.assertIs( bool(access.has_access(user, 'load', modulestore().get_item(block_location), self.course.id)), is_accessible )
root_dir = path(mkdtemp_clean()) export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_roundtrip')
url = reverse('create_mode', args=[unicode(self.course.id)]) response = self.client.get(url)
return [('127.0.0.1:11211 (1)', {})]
from salt.modules import mac_keychain as keychain
def _get_courses_with_access_type(self, user, access_type):
task_progress.failed += 1 err_rows.append([student.id, student.username, err_msg])
rel_indent[row] = expand_indent(line) - indent_level
if refresh: refresh_db()
class LayerMapError(Exception): pass
self.assertFalse(library_container.has_validation_error) self.assertFalse(library_container.has_validation_warning)
if value.lower() in _unit_map: return _unit_map[value.lower()]
with make_uploaded_file(extension=extension, content_type=content_type) as uploaded_file: self.check_validation_result(uploaded_file, expected_failure_message)
pass
if values: engine = values['ENGINE'] options = values.get('OPTIONS', {}) backends[name] = _instantiate_backend_from_name(engine, options)
def build_extension(self, ext): pass
import json import logging
if user is not None and has_course_author_access(user, course_key): return True
from pylearn2.utils import serial
if os.path.isfile(this_minion_key): os.unlink(this_minion_key)
from __future__ import unicode_literals
corr_eq_dir = np.dot(Gram[:n_active, n_active:].T, least_squares)
if self.columns.is_unique: return self._get_item_cache(key)
folders_list_in_path = folders_list_in_path[:-4]
grade_summary = self.get_grade_summary() self.assertEqual(grade_summary['percent'], percent)
clf = OneVsRestClassifier(base_clf).fit(X, Y) y_pred = clf.predict([[3, 0, 0]])[0] assert_equal(y_pred, 1)
if socks.get(cupd_in) == zmq.POLLIN: new_c_data = serial.loads(cupd_in.recv()) #cupd_in.send(serial.dumps('ACK'))
self.assertEqual([], course_detail_json['pre_requisite_courses'])
footer_style.append(('BACKGROUND', (1, 6), (1, 6), '#EEEEEE'))
_FUNCTION_HASHES = weakref.WeakKeyDictionary()
from __future__ import unicode_literals
class SchoolManager(models.Manager): def get_queryset(self): return super(SchoolManager, self).get_queryset().filter(is_public=True)
self.verify_server_task("lms", options)
total_amount = PaidCourseRegistration.get_total_amount_of_purchased_item(course_key=self.course_key) self.assertEqual(total_amount, 0.00)
opts.log_file = os.path.join(opts.artifact_dir, 'salt-buildpackage.log')
if hasattr(locator, 'version_agnostic'): locator = locator.version_agnostic() if hasattr(locator, 'branch'): locator = locator.replace(branch=None) return locator
birch_models = [Birch(threshold=1.7, n_clusters=None), Birch(threshold=1.7, n_clusters=100)] final_step = ['without global clustering', 'with global clustering']
__func_alias__ = { 'list_installed': 'list', 'update_installed': 'update', 'import_image': 'import' }
response = client.get(path='/shib-login/', data={}, follow=False, **identity)
self.find_css('.signatory-name-input').first.fill(value)
activate_account(activation_key) account = get_account_settings(request) self.assertTrue(account['is_active'])
data = DictWrapper(self.__dict__, connection.ops.quote_name, "qn_") try: return connection.data_type_check_constraints[self.get_internal_type()] % data except KeyError: return None
__func_alias__ = { 'list_': 'list', 'get_': 'get', 'put_': 'put', 'delete_': 'delete', }
if child.parent is None or child.parent > descriptor.scope_ids.usage_id: child.parent = descriptor.location child.save()
iris = datasets.load_iris() rng = check_random_state(0) perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
model.set_params(warm_start=True) model.fit(X, y) n_iter_warm_start = model.n_iter_ assert_equal(n_iter_warm_start, 1)
try: structure = CourseStructure.objects.get(course_id=course_key) structure.discussion_id_map_json = None structure.save() except CourseStructure.DoesNotExist: pass
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
def get_absolute_url(self): return "/users/%s/" % self.unknown_field
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=True).visit()
if os_grain['kernel'] not in 'Darwin': self.skipTest( 'Test not applicable to \'{kernel}\' kernel'.format( **os_grain ) )
if 'public_key' not in kwargs and 'csr' not in kwargs: kwargs['public_key'] = kwargs['signing_private_key']
if role: role(self.course.id).add_users(self.user)
result = (DataFrame.from_records(tuples, columns=columns) .reindex(columns=df.columns))
deadline = second_attempt.created_at + timedelta(days=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(deadline, query) self.assertEqual(result, second_attempt)
if not hasattr(xblock, '_published_by'): self.modulestore.compute_published_info_internal(xblock) return getattr(xblock, '_published_by', None)
assert_equal(_dynamic_max_trials(1, 100, 10, 0), 0) assert_equal(_dynamic_max_trials(1, 100, 10, 1), float('inf'))
mock = MagicMock(return_value=return_value) new_patch = patch(function_name, new=mock) new_patch.start() self.addCleanup(new_patch.stop) return mock
self.assertNotIn("\"/static/", response.content)
rng = check_random_state(404) y_pred = rng.rand(10)
self.q(css=self._bounded_selector(".annotator-save")).first.click() self.wait_for_notes_invisibility("Note is saved.") self.wait_for_ajax() return self
self.assertEqual(SimpleView.as_view()( self.rf.get('/', REQUEST_METHOD='DISPATCH') ).status_code, 405)
cmd_ret = _srvmgr(func=str().join(pscmd_validate), as_json=True)
ret.update({host_name: {'Disks Added': 'No new VSAN-eligible disks were found to add.'}})
expected = 'You can now <a href="' + reverse('login') + '">login</a>.' self.assertIn(expected, resp.content)
return "/wiki/" + self.article_name + "/_edit"
raise ItemNotFoundError(library_id)
import salt.utils
self.assertOptimizesTo( [ alter_foo, alter_bar, ], [ alter_bar, ], )
opts['grains'] = salt.loader.grains(opts) super(SMinion, self).__init__(opts)
salt '*' vsphere.esxcli_cmd my.esxi.host root bad-password \ 'system coredump network get'
cls.site1 = Site(pk=1, domain='example.com', name='example.com') cls.site1.save()
self.assertEqual(any_.result(), futures[0])
try: from StringIO import StringIO except: from io import StringIO
httpretty.register_uri( httpretty.GET, "http://localhost:4567/api/v1/threads/{id}".format(id=thread["id"]), body=json.dumps(thread), status=200 )
if param_name not in PARAMETERS: param_name = 'custom_' + param_name
DATE_FORMAT = 'j F Y' TIME_FORMAT = 'g:i A' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'd-m-Y'
user = XBlockUser() user.opt_attrs['edx-platform.username'] = 'test user' return user
self.assertListEqual(model_classes, [LazyA, LazyB, LazyB, LazyC, LazyA])
parser.add_argument('repository_url') parser.add_argument('--directory_path', action='store') parser.add_argument('--repository_branch', action='store')
return Message(*obj[1:])
value = value.date()
generate_cython()
with self.assertRaises(AttributeError): self.client.post('/quota/broken/', {'f': file})
PersonModel = PersonWithHeight
self.assertFalse(bool(version))
self.assertFalse(0 in ci) self.assertFalse(1 in ci)
assert left is not right assert left.fixed_vars is not right.fixed_vars assert left.on_load_batch is not right.on_load_batch
if srid and isinstance(srid, int): self.srid = srid
self.assertTrue(filesystem.exists('policy.json'))
flags = libvirt.VIR_DOMAIN_MEM_MAXIMUM if config: flags = flags | libvirt.VIR_DOMAIN_AFFECT_CONFIG
g[['A', 'D']]
_join_precedence = 1
import yaml
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
pass
if ENV_TOKENS.get('AUDIT_CERT_CUTOFF_DATE', None): AUDIT_CERT_CUTOFF_DATE = dateutil.parser.parse(ENV_TOKENS.get('AUDIT_CERT_CUTOFF_DATE'))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
with self.assertNumQueries(0): connection.ops.__class__(connection)
captions_rendered_selector = self.get_element_selector(CSS_CLASS_NAMES['captions_rendered']) self.wait_for_element_presence(captions_rendered_selector, 'Captions Rendered')
X_train += 1.
from salt.utils import SaltInvocationError import logging log = logging.getLogger(__name__)
self.assertEqual(self.rng[4], self.rng[np.int_(4)])
for i, v in enumerate(values): rows[names[i + nindexes]] = v
context['accomplishment_copy_course_description'] = _('a course of study offered by ' '{partner_short_name}.').format( partner_short_name=context['organization_short_name'], platform_name=platform_name)
self.assertIn("- Add field silly_char to sillymodel", out.getvalue())
self.certificates_section.wait_for_certificate_invalidations_section()
res = grainsmod.filter_by(dict1, grain='xxx', merge=mdict1, default='Z') self.assertEqual(res, mdict1)
if relevant_course_mode.sku: processors = ecommerce_api_client(request.user).payment.processors.get() else: processors = [settings.CC_PROCESSOR_NAME]
return LibraryLocator( self.courselike_key.org, self.courselike_key.library )
orch = salt.utils.alias_function(orchestrate, 'orch') sls = salt.utils.alias_function(orchestrate, 'sls')
class Entity(models.Model): pass
t1 = phi / rho t2 = -theta / rho dk = (1 / rho) * w
from __future__ import absolute_import import copy import re import os import logging
ret['result'] = False
if six.PY2 and not isinstance(path, six.text_type): return path.decode(fs_encoding) return path
self.assertTrue(self.store.has_changes(parent))
if val == val: nobs[lab, j] += 1 sumx[lab, j] += val
return 'unknown'
import hashlib import re import salt.utils.dictupdate as dictupdate from salt.exceptions import SaltInvocationError import salt.ext.six as six
repr(series.index[0])
os.makedirs(name)
shutdown_message = options.get('shutdown_message', '') quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'
request.session.save()
continue
return (self.role, self.org, self.course_id, self.user_id)
self.f_ = lambda x: y.repeat(x.shape)
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
from __future__ import absolute_import
db = self.db compiler = connections[db].ops.compiler('SQLCompiler')( self.query, connections[db], db )
return item.published.replace(tzinfo=get_fixed_timezone(42))
if is_justify:
if block.fields[field_name].is_set_on(block): return getattr(block, field_name) else: return default_value
self.profile.level_of_education = level_of_education self.profile.save()
self._verify_and_return_staff_page().set_staff_view_mode('Student') self.assertEqual(0, self.courseware.num_xblock_components)
course_email = cls( course_id=course_id, sender=sender, subject=subject, html_message=html_message, text_message=text_message, template_name=template_name, from_addr=from_addr, )
if not isinstance(query, six.string_types): raise TypeError('GeoIP query must be a string, not type %s' % type(query).__name__)
with self.assertRaises(ValueError): with transaction.atomic(using='default'): marty.edited.set([pro, dive])
self.assertIn('html', result) self.assertEqual(result['html'], "<div>Test HTML</div>")
f = lambda: s_or_idx.str.extract('(?:[AB]).*', expand=False) self.assertRaises(ValueError, f)
ddm = get_rnd_design_matrix() folds = ddm.split_dataset_nfolds(10) assert folds[0].shape[0] == np.ceil(ddm.get_num_examples() / 10)
self.mock_tracker.reset_mock() try: views.server_track(request, str(sentinel.event_type), '{}')
out = models.ForeignKey(PrimaryKeyCharModel, models.CASCADE)
course = CourseFactory.create() self.assertIsInstance(course, CourseDescriptor)
if user.has_perms(perms): return True if raise_exception: raise PermissionDenied return False
self.find_css('.certificate-course-title-input').first.fill(value)
_ = lambda text: text
import hashlib import json import logging import requests import dogstats_wrapper as dog_stats_api
with self.assertRaises(Exception) as cm: admin.autodiscover() self.assertEqual(str(cm.exception), "Bad admin module")
if not hasattr(self, 'detector_normalization'): self.detector_normalization = None
def f(): np.dtype(self.dtype)
self.add(metadata_to_insert)
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
continue
s = Series(index=np.array([None])) expected = Series(index=Index([None])) assert_series_equal(s, expected)
p_empty = Panel(items=list('ABC')) store.append('p', p_empty) self.assertRaises(KeyError, store.select, 'p')
_append_list(serv, 'minions', minion) _append_list(serv, 'jids', jid)
return False
yield check_oob_score, name, iris.data, iris.target * 2 + 1
global __FQDN__ grains = {}
func_name = "H{}".format(level) self.body.append(getattr(E, func_name)(text))
from django.db import migrations, models
rng = np.random.RandomState(0)
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
from __future__ import absolute_import
from salt.modules import mdadm
for svd in svds: assert_array_less(svd.explained_variance_ratio_.sum(), 1.0)
cols = ['b', 'a'] _check_df(df, cols)
dictionary = dict(mako_context) return loader.render_to_string(file_name, dictionary=dictionary)
self._install_masquerade(self.course_instructor) self.assertEqual( 'student', access.get_user_role(self.course_instructor, self.course_key) )
from __future__ import unicode_literals
return holiday_calendars[name]()
if '_dtype' not in state_dict: self._dtype = theano.config.floatX
self._assets.extend(asset_name)
default_error_messages = { 'required': _('This field is required.'), } empty_values = list(validators.EMPTY_VALUES)
pass
lines = '\n'.join(l.rstrip(' ') for l in lines.split('\n')) return lines
result = __salt__['cmd.retcode']('tuned-adm off') if int(result) != 0: return False return True
if ( settings.FEATURES.get('AUTH_USE_SHIB') and course.enrollment_domain and course.enrollment_domain.startswith(SHIBBOLETH_DOMAIN_PREFIX) ): return redirect_with_get('shib-login', request.GET)
self.assertEquals(course.entrance_exam_minimum_score_pct, .5)
if hasattr(_active, "value"): del _active.value
ldata, rdata = self.left._data, self.right._data lsuf, rsuf = self.suffixes
can_introspect_ip_address_field = False
res_r = int(numpy.floor(last_pool_r/rs)) + 1 res_c = int(numpy.floor(last_pool_c/cs)) + 1
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
kwargs = {'sort': sort} if how == 'left' else {} join_func = _join_functions[how] return join_func(lkey, rkey, count, **kwargs)
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
import integration import salt.utils
microsite_url = get_microsite_url(name) if microsite_url != EMPTY_URL: return microsite_url
return redirect_to_custom_form(strategy.request, auth_entry, kwargs)
lkey, rkey = _get_join_keys(llab, rlab, shape, sort)
return self.get(key, version=version) is not None
for field in ['id', 'name', 'course_id', 'topic_id', 'date_created', 'description']: self.assertIn(field, team)
for key, val in value.items(): value[key] = six.text_type(val) return value
neighbors_nn = np.argsort(distances, axis=1)[:, :k]
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
assert_equal(5, KFold(5).get_n_splits(X2))
Series(np.ones(10)).rolling(window=3, center=True, axis=0).mean()
response = self.client.get(reverse('admin:index')) self.assertContains(response, 'bodyclass_consistency_check ')
response = self.client.get_json(LIBRARY_REST_URL) self.assertEqual(response.status_code, 404)
return cloud.list_nodes_select( list_nodes_full('function'), __opts__['query.selection'], call, )
self.assertEqual(cached_structure, not_cached_structure)
bob = User.objects.db_manager('other').create_user('bob', 'bob@example.com')
broadcasted = self.frame.apply(np.sum, broadcast=True) tm.assertIsInstance(broadcasted, SparseDataFrame)
world.css_click(button_class) perform_action_in_plugin(action)
try: m = missing.clean_interp_method(method, **kwargs) except: m = None
res_sp_values = np.abs(self.sp_values) return self._constructor(res_sp_values, index=self.index, sparse_index=self.sp_index, fill_value=self.fill_value).__finalize__(self)
accepts = request.META.get('HTTP_ACCEPT', '*/*')
import salt.ext.six as six try: import msgpack except ImportError:
return AES.new(key, AES.MODE_CBC, generate_aes_iv(key))
from __future__ import unicode_literals
self.update_module() self.update_lib() self.loader.clear() self.assertEqual(self.loader[self.module_key](), (self.count, self.lib_count))
final_attrs['value'] = force_text(value)
if os.getuid() == 0 and not salt.utils.is_windows(): os.kill(parent_pid, 0)
col_services = obj_sm.Services
self.client.login(username=self.global_staff.username, password="test") self._assert_certificates_visible(False)
version = unichr(unicode_char)
course = self.store.get_course(course.id)
'answers': student_answers,
super(CourseDescriptorTestCase, self).setUp() self.course = get_dummy_course(start=_TODAY)
self.assertEqual(3, Book.objects.count())
self.local_models = []
from salt.states import sysrc
for correctness in ['correct', 'incorrect']: self.problem.correct_map = CorrectMap()
import salt.utils
In [151]: ylabel('number')
clf = self.factory(alpha=0.01, n_iter=5, shuffle=False) clf.fit(X, Y) Y_ = np.array(Y)[:, np.newaxis]
with dog_stats_api.timer('instructor_tasks.time.overall', tags=[u'action:{name}'.format(name=action_name)]): task_progress = task_fcn(entry_id, course_id, task_input, action_name)
for key, val in six.iteritems(dict_from): if key in dict_to: raise KeyError(key) dict_to[key] = val return dict_to
response = self.client.get('/lastmod/date-sitemap.xml') self.assertEqual(response['Last-Modified'], 'Wed, 13 Mar 2013 00:00:00 GMT')
W = rng.uniform(-self.irange, self.irange, (input_dim, self.dim * 3))
capi.reset_reading(self._ptr) for i in range(self.num_feat): yield Feature(capi.get_next_feature(self._ptr), self)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( patch, DEFAULT, create_autospec, NO_MOCK, NO_MOCK_REASON ) ensure_in_syspath('../../')
source_store.copy_all_asset_metadata(source_course_key, dest_course_key, user_id)
y_true_inv = ["b" if i == "a" else "a" for i in y_true]
self.assertEqual(store, modulestore()._get_modulestore_for_courselike(new_key).get_modulestore_type())
log.error("etcd: failed to perform 'watch' operation on key {0} due to connection error".format(key)) return {}
if force: file_attributes = win32api.GetFileAttributes(path) win32api.SetFileAttributes(path, win32con.FILE_ATTRIBUTE_NORMAL)
try: import pymongo HAS_MONGODB = True except ImportError: HAS_MONGODB = False
kwds['bottom'] = self.bottom kwds['bins'] = self.bins return kwds
STATIC_GRAB = False DEV_CONTENT = True
mod.myfunc(1, 2, "three")
return Fraction(treedic['1 factors'][0] / treedic['2 factors'][0])
if self.centering: self.Xt[row] -= self.x_sum / normalizer
response = self.get_with_bearer_token('/oauth2-test/') self.assertEqual(response.status_code, status.HTTP_200_OK)
try: import boto import boto.exception from boto.exception import BotoServerError
problem = self.build_problem(answer=u"\\\\", case_sensitive=False, regexp=True) self.assert_grade(problem, u"\\", "correct")
preview_lang = request.GET.get('preview-lang', None) if not preview_lang and auth_user: preview_lang = get_user_preference(request.user, DARK_LANGUAGE_KEY)
self.course_nav.go_to_vertical('Test Vertical-1')
certificate_invalidation = CertificateInvalidation.objects.get(generated_certificate=generated_certificate)
open_assessment = ItemFactory.create( parent_location=vertical.location, category="openassessment", display_name="untitled", ) draft_open_assessment = self.store.convert_to_draft( open_assessment.location, self.user.id )
lru_cache_object.cache_clear() try: yield finally: lru_cache_object.cache_clear()
for X in (X_dense, X_sparse_pruned, X_sparse_unpruned):
import salt.utils import salt.utils.files import salt.utils.templates import salt.utils.validate.net from salt.exceptions import CommandExecutionError, SaltInvocationError
rng1 = cdate_range('12/5/2011', '12/5/2011') rng2 = cdate_range('12/2/2011', '12/5/2011') rng2.offset = datetools.CDay()
pred = Y_proba > .5 assert_array_equal(pred, Y_pred_sprs.toarray())
import copy import os import re import logging import json
@setup({'basic-syntax13': "{{ va>r }}"}) def test_basic_syntax13(self): with self.assertRaises(TemplateSyntaxError): self.engine.get_template('basic-syntax13')
self.assertEqual(len(details['course_modes']), 3) self.assertEqual(details, cached_details)
result = df.to_csv(path, index=index, sep=sep, na_rep=na_rep, float_format=float_format, header=header, index_label=index_label, mode=mode, nanRep=nanRep, encoding=encoding, date_format=date_format, decimal=decimal) if path is None: return result
with self.assertRaises(InvalidCacheBackendError): self.backend()
ApiAccessConfig(enabled=False).save() response = self.client.get(self.url) self.assertEqual(response.status_code, 404)
self.wait_for_ajax() return self.q(css='#u-field-select-account_privacy').visible
response = requests.put(self.url, data={'test_unicode': u'\u2603 the snowman'}) self.assertEqual(response.status_code, 400)
self.record_visit_unit( 'Lecture 1 - Doing the Right Thing', 'Discussion Prompt: Ethics of Torture', 'Discussion Prompt: Ethics of Torture' )
state = self.v_sample0 ki = 0
response = self.client.post(set_course_price_url, data) self.assertTrue("Please Enter the numeric value for the course price" in response.content)
raise ValueError("Non-reversible reg-exp portion: '(?%s'" % ch)
self.assertEquals(parent_status.get('total'), total) self.assertEquals(parent_status.get('action_name'), action_name)
pass
import salt.client import salt.payload import salt.utils import salt.utils.jid import salt.minion import salt.returners
registry = Registry() hkey = registry.hkeys[local_hive] key_path = local_key access_mask = registry.registry_32[use_32bit_registry]
self.update_version = edit_info.get('update_version', None)
from __future__ import unicode_literals
if port is None: port = 443 if protocol is None: protocol = 'https'
self.assertEqual(1, len(removed)) volumes.remove(removed[0]) return removed[0]
self.store_precision = True
from __future__ import absolute_import
import salt.utils
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
except ValueError as e: raise nose.SkipTest("No indicators returned data: {0}".format(e))
omask[5:10] = np.nan self.assertRaises(Exception, s.__getitem__, omask) self.assertRaises(Exception, s.__setitem__, omask, 5)
k = self._k n = self._nobs resid = self._resid_raw return np.dot(resid, resid.T) / (n - k)
return self.make_call( reverse('topics_detail', kwargs={'topic_id': topic_id, 'course_id': str(course_id)}), expected_status, 'get', data, **kwargs )
self.assertSequenceEqual( CharArrayModel.objects.filter(field__contains=['text']), [] )
p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': '1940-10-9'})
return self.q(css='#view-updated-button').visible
if self.shuffle: rng = check_random_state(self.random_state) else: rng = self.random_state
for offset, name in enumerate(positional[non_default_count:]): annotation = annotations.get(name, _empty) parameters.append(Parameter(name, annotation=annotation, kind=_POSITIONAL_OR_KEYWORD, default=defaults[offset]))
from __future__ import absolute_import
pass
how = kwargs.pop('how', None) if how is not None: kwds['how'] = how
reload(vboxapi) _virtualboxManager = vboxapi.VirtualBoxManager(None, None)
return self._r2_raw
self.setup_user()
self.assertRaises( ValidationError, BadgeClass( slug='test', issuing_component='test2', criteria='test3', description='test4', image=get_image('unbalanced') ).full_clean )
self.assertEqual(context['currency'], 'usd') self.assertEqual(context['currency_symbol'], '$')
freqstr = 'Q-%s' % (_int_to_month[freq_month],) return self._beg_apply_index(i, freqstr)
sl = self.frame[:20] self.assertEqual(20, len(sl.index))
baseqs.filter(age__mult3__gte=models.F('average_rating')), [a2, a3], lambda x: x)
test = -3
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.deny("Not valid!")
if len(args) == 1: coords = args[0] else: coords = args
def _make_str_accessor(self): from pandas.core.index import Index
for (query_name, model_name) in self.translations.items(): try: index = self._columns.index(query_name) self._columns[index] = model_name except ValueError: pass
nav_dict = dict()
cohort = get_course_cohorts(self.course)[0]
import salt.utils
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
with ensure_clean_store(self.path) as store:
return False
mixed = Series(['aBAD_BAD', NA, 'BAD_b_BAD', True, datetime.today(), 'foo', None, 1, 2.])
lib = glob.glob(os.path.join( '/opt/local/lib', 'libcrypto.so*')) lib = lib[0] if len(lib) > 0 else None
qs = County.objects.all() self.assertEqual(1, qs.count()) self.assertEqual('Galveston', qs[0].name)
sparse_results = sparse_classifier.score(X_test_sparse, y_test) dense_results = dense_classifier.score(X_test, y_test) assert_array_equal(sparse_results, dense_results)
if class_weight in ("auto", "balanced"): class_weight_ = compute_class_weight(class_weight, mask_classes, y_bin) sample_weight *= class_weight_[le.fit_transform(y_bin)]
e = pd.Series([0, 1, 2, 3, 4]) tr, v = [3], [3.0] check_replace(tr, v, e)
dtype = np.dtype(dtype) if self.dtype == dtype: if copy: return self.copy() return self
insert_system_path(opts, opts['utils_dirs'])
if use_dtypes: if self.dtype is False: return data, False elif self.dtype is True: pass
return len(self.index), len(self.columns)
__, course_ids = mock_get_programs.call_args[0] self.assertEqual(list(course_ids), [self.course_1.id]) self._assert_responses(response, 1)
obj_sm.ClientApplicationID = "My App"
if not conf.get('sparse', False): valid_set = valid_set.get_value(borrow=True) test_set = test_set.get_value(borrow=True)
if not given: return False
tm._skip_if_no_scipy()
lines.append(line) continue
self.assertEqual(deserial_objs[0].object.__class__, Author)
return self._time_has_obs.astype(int)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
def __init__(self): super(NoBatchSizeError, self).__init__("Neither the " "TrainingAlgorithm nor the model were given a specification " "of the batch size.")
orig_mail_admins = mail.mail_admins orig_email_backend = admin_email_handler.email_backend mail.mail_admins = my_mail_admins admin_email_handler.email_backend = ( 'logging_tests.logconfig.MyEmailBackend')
self.certificates_section.remove_first_certificate_invalidation()
LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=3, max_num=0) formset = LimitedFavoriteDrinkFormSet() form_output = []
#_connarg('connection_useSSL', 'useSSL')
third = e.count(':')
first_addend = random.randint(-100, 100) second_addend = 10 - first_addend
_skip_if_no_xlrd()
self.find_css('.signatory-organization-input').first.fill(value)
self.assertFalse(self._search_for_content(self.EDITED_SEARCH_STRING))
extensions = [ "djangodocs", "sphinx.ext.intersphinx", "sphinx.ext.viewcode", "ticket_role", ]
pixeltype = GDAL_TO_POSTGIS[band.datatype()]
if compat.PY3: return s.encode(self._encoding) else: return s
return [t.value for t in TagAvailableValues.objects.filter(category=self)]
proba[np.isnan(proba)] = 1. / n_classes
self.outline.a11y_audit.config.set_scope( include=["div.video"] ) self.outline.a11y_audit.check_for_accessibility_errors()
index = self.create_index() expected = Index(index.values % 2) self.assert_index_equal(index % 2, expected)
super(CourseKeyField, self).__init__(**kwargs)
if not os.path.exists(dest_dir): os.makedirs(dest_dir)
if not isinstance(self.storage, (Storage, LazyObject)): self.storage = self.storage() super(BaseStorageFinder, self).__init__(*args, **kwargs)
r = XFrameOptionsMiddleware().process_response(req, resp) self.assertEqual(r.get('X-Frame-Options', None), None)
titles = [] for child in self._xmodule.get_child_descriptors(): titles.extend(child.get_content_titles()) return titles
self.parents = []
import salt.ext.six as six from salt.ext.six.moves import zip_longest
if hasattr(self, 'vae'): return self.vae else: return None
template_context['js_init_parameters'] = json.dumps(frag.json_init_args).replace("/", r"\/")
self.find_css('li.group-configuration-usage-unit a').nth(index).click()
self.dashboard_page.upgrade_enrollment(self.course_info["display_name"], self.upgrade_page)
self.assertIn( 'Invalid String Value for Enabled', self.run_function('system.set_remote_events', ['spongebob']))
self.estimators_ = [] self.estimators_samples_ = [] self.estimators_features_ = []
pythoncom.CoInitialize()
supports_mixed_date_datetime_comparisons = True
msg = "Could not decode base64 data: %r" % e six.reraise(MultiPartParserError, MultiPartParserError(msg), sys.exc_info()[2])
try: if register_to: before_import_registry = copy.copy(register_to._registry)
from salt.states import mac_assistive as assistive
return True
rs = ser.replace({np.nan: -1, 'foo': -2, 'bar': -3})
'worker_threads': int,
if getattr(settings, "THEME_NAME", "") == "": settings.THEME_NAME = None return
before = attempt.created_at - timedelta(seconds=1) self.assertFalse(attempt.active_at_datetime(before))
index = date_range('1/1/2012', periods=4, freq='12H') index_as_arrays = [index.to_period(freq='D'), index.hour]
new_splist = SparseList(fill_value=self.fill_value) new_splist._chunks = list(self._chunks) return new_splist
Axis to broadcast over
comment, passed, retries = _install(quidditch, retries) if not passed: return (comment, str(passed))
sql, _ = compiler.compile(value) return placeholder % sql
self.defaults = block_data.get('defaults', {})
'zmq_filtering': bool,
value = int(value)
self._print('Got {} rows.\n'.format(total_rows))
return view_auth_classes(is_user)
with self.assertRaisesMessage(TemplateSyntaxError, 'Empty variable tag on line 1'): self.engine.get_template('basic-syntax07')
self.assertRaises(KeyError, lambda: ser.loc[[3, 3, 3]])
import salt.utils from salt.ext.six.moves import range
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
return self.list_price if self.list_price else self.unit_cost
if not getattr(response, 'is_rendered', True) and callable(getattr(response, 'render', None)): response = response.render()
__virtualname__ = 'pkg'
self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 0, next_enabled=True, prev_enabled=False)
actual = grouped_df.filter(lambda x: len(x) > 1) expected = df.iloc[expected_indexes] assert_frame_equal(actual, expected)
#html_show_sourcelink = True
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=effective_rank, tail_strength=tail_strength, random_state=generator)
is_verified, has_skipped, has_completed = _get_user_statuses(user, course_key, checkpoint)
self.assertFalse(form.is_valid())
os.environ['SALT_CLOUD_CONFIG'] = env_fpath config = sconfig.cloud_config(fpath) self.assertEqual(config['log_file'], fpath)
course_group.users.remove(user) user.course_groups.remove(course_group)
discrete_estimator_errors = bdt_discrete.estimator_errors_[:n_trees_discrete] real_estimator_errors = bdt_real.estimator_errors_[:n_trees_real] discrete_estimator_weights = bdt_discrete.estimator_weights_[:n_trees_discrete]
course_locator = self._map_revision_to_branch(course_locator) return super(DraftVersioningModuleStore, self).get_course_successors( course_locator, version_history_depth=version_history_depth )
self.assertTrue(self._is_location_published(location)) self.assertTrue(modulestore().has_changes(modulestore().get_item(location)))
self.assertEqual(4.0, calc.evaluator({}, {}, '4.'))
plt.figure(fignum, figsize=(4, 3)) plt.clf()
render_args, _ = module.system.render_template.call_args context = render_args[1] self.assertIn(error_msg, context['problem']['html'])
htmlhelp_basename = 'Djangodoc'
return self.get_block_keys()
self.assertNotEqual(original_problem, module.lcp)
cert_asn1 = c.dump_certificate(c.FILETYPE_ASN1, cert)
if isinstance(prefix_sep, compat.string_types): prefix_sep = cycle([prefix_sep]) elif isinstance(prefix_sep, dict): prefix_sep = [prefix_sep[col] for col in columns_to_encode]
def convert_extent(self, box, srid): raise NotImplementedError('Aggregate extent not implemented for this spatial backend.')
for section in self.course_outline_page.sections(): self.assertEqual(collapsed, section.is_collapsed)
import logging import re
return _vote_or_unvote(request, course_id, cc.Thread.find(thread_id), undo_vote=True)
import os import time import fnmatch import hashlib import logging import datetime from collections import MutableMapping from multiprocessing.util import Finalize
filename_numpy = '/Users/wesm/tmp/numpy.npz' filename_larry = '/Users/wesm/tmp/archive.hdf5' filename_pandas = '/Users/wesm/tmp/pandas_tmp'
url = self._reverse_urls(['courseware'], course)[0] self.assert_request_status_code(302, url)
raise ValueError("Unknown activation function %s" % self.activation)
self.assertTrue(check_password('letmein', encoded, setter)) self.assertTrue(state['upgraded'])
return numpy.arccosh(1. / val)
fake_course_image = 'sample_image.png' course_overview = self._assert_image_urls_all_default(modulestore_type, fake_course_image)
import integration
f.DEFAULT_CHUNK_SIZE = 4 self.assertEqual(list(f), [b'one\r', b'two\r', b'three'])
if commit: obj.delete()
return library.location.library_key
self.assertContains(response, msg) self.assertEqual(Subscriber.objects.count(), 2)
if tasks.environment.dry_run: return
self.assertTrue(list(store) == [])
self.assert_logged_in_cookie_redirect(actions.do_complete(
foo = 'bar' def __eq__(self, other): return self.foo == other.foo
course_listing = self.q(css=".course").filter(lambda el: course_name in el.text).results
assert_frame_equal(p.ix[item], p[item]) assert_frame_equal(p.ix[item, :], p[item]) assert_frame_equal(p.ix[item, :, :], p[item])
qs = Happening.objects.annotate(latest_time=models.Max('when')) self.assert_pickles(qs)
with ensure_clean_store(self.path) as store: df = tm.makeDataFrame()
self.assertNotIn('Search for a course', response.content)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
_, model_0_path, model_1_path = sys.argv
self.store.publish(sequential.location, self.user_id) self.assertFalse(self._has_changes(sequential.location))
from pandas import Series return Series(self._data.get_ftype_counts())
values = self if slicer is not None: values = values[slicer] return values._format_native_types(**kwargs)
page_size = TOPICS_PER_PAGE
freezer_includes.extend([ 'cherrypy', 'dateutils', 'pyghmi', 'croniter', 'mako', 'gnupg', ])
self.criteria = criteria[_REQUIRES_PATH] + \ criteria[_REQUIRES_STAT] + \ criteria[_REQUIRES_CONTENTS]
pos = self[::-1].searchsorted(label, side='right' if side == 'left' else 'right') return len(self) - pos
if kw_overrides_match is _marker: return profile_match return kw_overrides_match
state_run = self.run_function('state.sls', mods='requisites.onfail_simple')
if months: self.months = months else: self.months = MONTHS
ASSET_IGNORE_REGEX = r"(^\._.*$)|(^\.DS_Store$)|(^.*~$)"
self.assertEqual(self.video.speed, '2.0x')
lines = list(csv.reader(StringIO(self.data1))) parser = TextParser(lines, index_col=0, chunksize=2)
return [(k,self[k]) for k in self.__tokdict.keys()]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.assertTrue(has_horizontally_truncated_repr(df))
objs = [Person(name="abcd_%s" % i, person_country=self.usa) for i in range(0, 5)] Person.objects.bulk_create(objs, 10)
if not show_disabled and not schedule[job]['enabled']: del schedule[job] continue
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
ret = {'name': 'off', 'changes': {}, 'result': False, 'comment': 'off'}
'event_match_type': str,
answered_survey = SurveyAnswer.do_survey_answers_exist(survey, user) return not answered_survey and not has_staff_access
return response
idx = np.where(land_reference > -9999) coverages_land = data.coverages[:, idx[0], idx[1]].T
supports_unspecified_pk = False
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
USER_PARTITION_SCHEME_NAMESPACE = 'openedx.user_partition_scheme'
__virtualname__ = 'cmd'
SupportedFieldType(None, BlockCountsTransformer, BlockCountsTransformer.BLOCK_COUNTS),
result = df.append(series.to_dict(), ignore_index=True) assert_frame_equal(result, expected)
error_response(response, "Can't find transcripts in storage for {}".format(old_name))
parent = models.OneToOneField(Place, models.CASCADE)
query = "UPDATE auth_userprofile SET country = NULL WHERE id = %s" connection.cursor().execute(query, [str(self.user.profile.id)])
resolved_url = resolve_url('logout') self.assertEqual('/accounts/logout/', resolved_url)
frgd_img = to_img(data.X[i], 28) frgd_img = frgd_img.convert('L')
import logging import os import re
self.assertEqual(xblock_info['enable_proctored_exams'], True)
train_score = Perceptron().fit(X_kpca, y).score(X_kpca, y) assert_equal(train_score, 1.0)
'dark_lang.middleware.DarkLangMiddleware',
centers = [[1, 1], [-1, -1], [1, -1]] X, _ = make_blobs(n_samples=10000, centers=centers, cluster_std=0.6)
with self.assertRaises(ObjectDoesNotExist): CertificateInvalidation.objects.get( generated_certificate=self.generated_certificate, invalidated_by=self.global_staff, active=True, )
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
old_field_name = field_name
if key.field_name not in aside_fields: self._load_definition()
effective_diff = np.sum((new_centers_csr - old_centers) ** 2) assert_almost_equal(incremental_diff_csr, effective_diff)
axes = df.plot() self._check_ticks_props(axes, xrot=0)
self._tags[course_id][key] = value
staff_access = False errored_courses = {} if has_access(user, 'staff', 'global'): staff_access = True errored_courses = modulestore().get_errored_courses()
self.q(css=self._bounded_selector('.add-admin-role')).click() wait_for_ajax_or_reload(self.browser)
return [ url(r'^extra/$', self.extra, name='cable_extra'), ]
sorted_block_requirements = sorted( block_requirements, key=lambda x: (x['start_date'] is None, x['start_date'], x['display_name']) )
if LANGUAGE_SESSION_KEY in request.session: del request.session[LANGUAGE_SESSION_KEY]
response = client.delete(url) self.assertEqual(expected_status, response.status_code) return response
if params: parameters.update(params)
perms = [] for action in opts.default_permissions: perms.append(( get_permission_codename(action, opts), 'Can %s %s' % (action, opts.verbose_name_raw) )) return perms
enrollment = CourseEnrollment.get_enrollment(student, self.course.id) self.assertEqual(enrollment.is_active, False)
DATE_INPUT_FORMATS = [
return None, None
from __future__ import absolute_import
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
for user in get_users_with_role(CourseStaffRole.ROLE): add_user_with_status_unrequested(user)
self.assertContains(response, "\n0 persons\n") self.assertNotContains(response, "Guido")
from __future__ import absolute_import
log.error('Wrong type, skipping {0}'.format(kwarg))
unique_names = uniq_stable(names)
from salt.exceptions import CommandExecutionError, SaltInvocationError
try: import psycopg2 except ImportError: raise nose.SkipTest("no psycopg2 installed")
boston = load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
bob_profile = UserProfile.objects.using('other').create(user=bob, flavor='crunchy frog')
attempt.mark_ready() attempt.submit(copy_id_photo_from=initial_verification)
return self._data.ftype
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
print "Starting export" file_system = OSFS(root_dir) initial_course.runtime.export_fs = file_system.makeopendir(course_dir) root = lxml.etree.Element('root')
data = {} if node.hasAttribute('pk'): data[Model._meta.pk.attname] = Model._meta.pk.to_python( node.getAttribute('pk'))
result = s[list(mask)] expected = s[mask] assert_series_equal(result, expected) self.assert_index_equal(result.index, s.index[mask])
self.config[option.dest] = value
for msg in messages.get_messages(request): if msg.extra_tags.split()[0] == "social-auth":
return self.scope_ids.usage_id.course_key.library
assert_almost_equal(errors, errors3) assert_almost_equal(values, values3)
self.user.profile.country = unrestricted_country.country self.user.profile.save() self.assert_enrollment_status()
arr2 = np.zeros((2, 3)) tm.assert_frame_equal(DataFrame.from_records(arr2), DataFrame(arr2))
self.assertTrue( makeFY5253LastOfMonthQuarter( 1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1) .year_has_extra_week(datetime(2010, 12, 26)))
from __future__ import unicode_literals
full_name = self.imported_names[local_name] + remainder yield name, full_name
assert_almost_equal(np.std(y - np.dot(X, c)), 1.0, decimal=1)
def custom_score(y_true, y_pred): return (((y_true == y_pred).sum() - (y_true != y_pred).sum()) / y_true.shape[0])
import sys import os
d = _get_deprecated_option(key) if d: return d.rkey or key else: return key
return prlctl('snapshot-switch', args, runas=runas)
self.assertTrue( self.user.roles.filter(name="Student", course_id=new_course_key) )
sql = "DATE_TRUNC('%s', %s)" % (lookup_type, field_name) return sql, params
self._field = field self._klass = klass super(SpatialProxy, self).__init__(field.attname, klass)
self.check_val('true', True)
super(AdvancedProblemComponentTest, self).setUp(is_staff=is_staff)
copy_cov = False cov = np.dot(dictionary, X.T)
ret = self.run_run_plus(fun='fileserver.file_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
user2 = UserFactory.create(email=self.new_email, password="test2")
self.store_builders = store_builders self.mappings = mappings or {} self.mixed_modulestore = None
from django.db import models from django.utils.encoding import python_2_unicode_compatible
colors_hue = np.arange(n_colors) colors_hue = as_floatX(colors_hue) colors_hue *= 1./n_colors
tab = tab_class(tab_dict=dict_tab)
self.assertTrue('Activate Course Enrollment' in response.content)
from __future__ import absolute_import, print_function import logging import logging.handlers import time import datetime import socket import threading
list_updates = salt.utils.alias_function(list_upgrades, 'list_updates')
iris = datasets.load_iris()
try: atomic_replace(temp_filename,local_dst) except Exception as e: raise IOError("[ac] %s %s --> %s" % (str(e),temp_filename,local_dst))
with self.assertRaises(AttributeError): (DataFrame(vals).rolling(5, win_type='boxcar', center=True) .std())
task_folder = task_service.GetFolder(location)
descriptor_class = FileDescriptor
'ENABLE_CORS_HEADERS': False,
return []
continue
except ValueError: return None
s = string_at(result, last_arg_byref(cargs)) free(result) return s
'overall_message': overall_message,
if (self.is_bool or self.is_integer) and not self.is_timedelta: if inplace: return self else: return self.copy()
expected_warning = Warning if PY35 else PerformanceWarning with tm.assert_produces_warning(expected_warning=expected_warning, check_stacklevel=False): ser = Series(values, [0, 'y']) self._check_roundtrip(ser, func)
return self.cleaned_data.get("order_by") or "last_activity_at"
DELAY = 0.5
result = self.service.delete_student_attempt( self.student.username, unicode(self.course.id), self.other_problem_urlname, requesting_user=self.student, ) self.assertIsNone(result)
return name not in _get_svc_list(name, 'ENABLED')
expected = DataFrame([[1, 3], [4, 6]], columns=[ 'A', 'C'], index=['X', 'Y']) assert_frame_equal(a, expected)
self.courseware_page.go_to_sequential_position(4) self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 3, next_enabled=True, prev_enabled=True)
if properties: optlist = [] for prop in properties.keys():
ind2 = self.index.set_levels(new_levels) assert_matching(ind2.levels, new_levels) assert_matching(self.index.levels, levels)
result = ts.shift(1, freq='4H') exp_index = ts.index + datetools.Hour(4) tm.assert_index_equal(result.index, exp_index)
self.set_up_books(1)
res_df = df.loc["j":"k", :] tm.assert_frame_equal(res_df, exp_df) self.assertTrue(com.is_categorical_dtype(res_df["cats"]))
path = path.replace(os.sep, '/') if path.startswith('./'): path = path[2:] return path
gc = AgglomerativeClustering(n_clusters=10) brc2 = Birch(n_clusters=gc) brc2.fit(X) assert_array_equal(brc1.subcluster_labels_, brc2.subcluster_labels_) assert_array_equal(brc1.labels_, brc2.labels_)
_ = lambda text: text
age = forms.IntegerField() class Meta: model = Person fields = ('name', 'age')
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
if old_database_name is not None: settings.DATABASES[self.connection.alias]["NAME"] = old_database_name self.connection.settings_dict["NAME"] = old_database_name
start = datetime.now(UTC) self.add_icrv_xblock(related_assessment_name="Midterm A", start_date=start)
self.course.edxnotes = False self.assertFalse(has_notes_tab(self.user, self.course))
self._setup_mode_and_enrollment(self.PAST, "verified")
multi_db = True
self.data_location = self.path_or_buf.tell()
self.assertTrue(self.enrollment.refundable())
world.browser.execute_script('window.confirm = function(){return true;} ; window.alert = function(){return;}')
from __future__ import unicode_literals
raise GitLockError( exc.errno, 'Checkout lock exists for {0} remote \'{1}\'' .format(self.role, self.id) )
tolW = max(0.001, tol) * np.sqrt(init_grad) tolH = tolW
from __future__ import unicode_literals
if not self.hyperparameter_periodicity.fixed: periodicity_gradient = \ 4 * arg / self.length_scale**2 * cos_of_arg \ * sin_of_arg * K periodicity_gradient = periodicity_gradient[:, :, np.newaxis]
df = DataFrame([1, 2]) result = df.get_dtype_counts() expected = Series({'int64': 1}) tm.assert_series_equal(result, expected)
concat([df1, df2])
import salt.utils from salt.modules import pagerduty import json
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file)
new_art.save() art_id_3 = new_art.id self.assertNotIn(art_id_3, (None, art_id_1, art_id_2))
tasks = instructor_task.api.get_entrance_exam_instructor_task_history(course_id, entrance_exam_key, student)
if 0 < passed_index <= len(course_update_items): course_update_item = course_update_items[passed_index - 1] course_update_item["status"] = CourseInfoModule.STATUS_DELETED course_update_items[passed_index - 1] = course_update_item
self.assertEqual(input, ujson.decode(output)) tm.assert_numpy_array_equal( np.array(input), ujson.decode(output, numpy=True))
class Politician(models.Model): politician_id = models.AutoField(primary_key=True) title = models.CharField(max_length=50)
self.assertNotEqual(list(a.question.get_answer_order()), id_list)
return dict([(k, v) for k, v in dic.iteritems() if v is not None])
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
tm._skip_if_no_scipy()
if com.is_datetime64tz_dtype(dtype): dtype = DatetimeTZDtype(dtype)
clf = LogisticRegression(random_state=0) clf.fit(X, Y1) clf.coef_[:] = 0 clf.intercept_[:] = 0 assert_array_almost_equal(clf.decision_function(X), 0)
ret['comment'] = 'Database {0} is already present, so cannot be created'\ .format(name) return ret
if not course.course_survey_name: return redirect(redirect_url)
section_description = { 'section_descriptor': section, 'xmoduledescriptors': [child for child in xmoduledescriptors if child.has_score] }
@property def supports_collect_aggr(self): return aggregates.Collect not in self.connection.ops.disallowed_aggregates
if kwargs['setting'] in ('LANGUAGES', 'LANGUAGE_CODE'): check_for_language.cache_clear() get_languages.cache_clear() get_supported_language_variant.cache_clear()
class SelfReferChild(SelfRefer): pass
osa_script = self.run_function('assistive.installed', [OSA_SCRIPT]) if osa_script: self.run_function('assistive.remove', [OSA_SCRIPT])
site_configuration = SiteConfigurationFactory.create( site=self.site, )
bare_select_suffix = ''
bluez.__salt__ = {}
return _error(ret, u_check)
l = [1, 2, 3]
changes_dict = {'init': []} changes = changes_dict.get('init')
if not dayfirst and not yearfirst: result2 = Timestamp(date_str) self.assertEqual(result2, expected)
X, y = hastie_X, hastie_y ForestEstimator = FOREST_ESTIMATORS[name] clf = ForestEstimator(n_estimators=5, max_depth=3, warm_start=True, random_state=1) clf.fit(X, y)
else:
pod_spec = vim.storageDrs.PodSelectionSpec(storagePod=datastore_cluster_ref)
__version_info__ = __saltstack_version__.info __version__ = __saltstack_version__.string
db = {}
return '{}.{}'.format(self.backend_class.__module__, self.backend_class.__name__)
self.assertEqual(mock.call_count, 0)
from __future__ import absolute_import import os import pwd import grp import random
if p.active and p.groups and (schemes is None or p.scheme.name in schemes):
http = self.authenticate(secrets) return auth.init_service(http)
return graders[self.credit_type[0]]( all_choices=all_choices, student_answer=student_answer, student_non_answers=student_non_answers )
EmptyPromise(options_selected, "Option is selected").fulfill()
if self.current_user != username: self.logout() user_email = User.objects.get(username=username).email self.login(user_email, "test") self.current_user = username
OAUTH2_PROVIDER_APPLICATION_MODEL = 'oauth2_provider.Application'
mac_desktop.__salt__ = {}
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
if compute_squared_diff: diff = centers[center_idx].ravel() - old_center_buffer.ravel() squared_diff += np.dot(diff, diff)
result = data.unstack(fill_value='d') assert_frame_equal(result, expected)
self.update_enrollment(is_active=True)
import datetime import json import ddt import mock from nose.plugins.attrib import attr from pytz import UTC from django.utils.timezone import UTC as django_utc
super(SendMsgBot, self).__init__(jid, password)
self.factory().fit(X, Y, intercept_init=np.zeros((3,)))
self.related_fkey_lookups = []
from __future__ import absolute_import import logging import uuid import re
self.pdf.drawString(horizontal_padding_from_border, y_pos,
return json.loads(self.look_at_question(self.problem_display_name).content)['progress_detail']
form_desc = json.loads(response.content)
from __future__ import absolute_import import json import os import logging import copy import time from pprint import pformat
data = String(scope=Scope.content, default='')
SQUEEZE_DEFAULTS = dict(axis=None) validate_squeeze = CompatValidator(SQUEEZE_DEFAULTS, fname='squeeze', method='kwargs')
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
if __name__ == '__main__': main()
return iter(self.values)
has_native_duration_field = False
X -= X.min()
self.assertFalse(has_expanded_repr(df6)) self.assertFalse(has_truncated_repr(df6))
ret = self.process_request("get", "/some/url", secure=True) self.assertEqual(ret, None)
rendered_html = etree.XML(problem.get_html())
assert content is not None assert mimetype is not None self.alternatives.append((content, mimetype))
if (y_type not in ["binary", "multiclass", "multilabel-indicator"]): raise ValueError("{0} is not supported".format(y_type))
doublecolon_start = index
self.assertTrue(bool(pkg_targets))
if isinstance(index_like, list): if type(index_like) != list: index_like = list(index_like) converted, all_arrays = lib.clean_index_list(index_like)
af = AffinityPropagation(affinity="euclidean") labels = af.fit_predict(X) labels2 = af.predict(X) assert_array_equal(labels, labels2)
assert_equal(_barnes_hut_tsne.test_index2offset(), 1) assert_equal(_barnes_hut_tsne.test_index_offset(), 1)
return {'result': ignore_already_stopped, 'comment': 'Container \'{0}\' absent'.format(name)}
indexed_count = self.reindex_library(store) self.assertFalse(indexed_count)
p = self.round_trip_pickle(NaT) self.assertTrue(p is NaT)
f = lambda x: x.drop_duplicates(inplace=True) _check_f(data.copy(), f)
return next_workday(nearest_workday(dt))
self.assertEqual(google_provider.id, google_state.provider.id) self.assertEqual(self.user, google_state.user)
container = self.go_to_nested_container_page() verify_ordering(self, container, expected_ordering)
return self.get_selector('div.certificate-exception-container')
raise ValueError("Invalid value for train_size: %r" % train_size)
path = microsite_tags.microsite_template_path('footer.html') self.assertEqual("footer.html", path)
from __future__ import absolute_import
try: code = _period_str_to_code(freqstr[0]) stride = freqstr[1] except: if com.is_integer(freqstr[1]): raise code = _period_str_to_code(freqstr[1]) stride = freqstr[0] return code, stride
grouper, _, _ = _get_grouper(dropped, key=self.keys, axis=self.axis, level=self.level, sort=self.sort, mutated=self.mutated)
if '.' not in tag_suffix: raise yaml.YAMLError("!import: tag suffix contains no '.'") return try_to_import(tag_suffix)
file_to_upload = 'image.jpg' self.settings_page.upload_image('#upload-video-thumbnail-image', file_to_upload) self.assertIn(file_to_upload, self.settings_page.get_uploaded_image_path('#video-thumbnail-image'))
if not parent_location: return None
log.error('Received local command remotely! Ignoring: {0}'.format(msg)) return
return self._create_user(username, email, is_staff=False, mode=mode)
assert_almost_equal(mcc, 0.)
if com.is_categorical_dtype(self.tr_series.dtype): level_info = self.tr_series._values._repr_categories_info() if footer: footer += "\n" footer += level_info
from __future__ import absolute_import
return self.child_at(index)
module_dependencies=dependencies)
errstring = "Invalid course key." with self.assertRaisesRegexp(CommandError, errstring): call_command('force_publish', 'TestX/TS01')
fake_key = SlashSeparatedCourseKey('a', 'b', 'c') self.assertRaises(Http404, lambda: cohorts.is_course_cohorted(fake_key))
return render_to_string('shoppingcart/cybersource_form.html', { 'action': get_purchase_endpoint(), 'params': get_signed_purchase_params(cart), })
expected_url = _third_party_login_url( backend_name, "login", redirect_url=self.courseware_url ) self.assertContains(response, expected_url)
from __future__ import absolute_import
assert isinstance(course_key, CourseKey) store = self._get_modulestore_for_courselike(course_key) return store.delete_course(course_key, user_id)
sqls, sqls_params = self.batch_process_rhs(compiler, connection, rhs) placeholder = '(' + ', '.join(sqls) + ')' return (placeholder, sqls_params)
response = client.delete(self.url) self.assertEqual(expected_status, response.status_code) return response
u"\u00A9 {org_name}. All rights reserved except where noted. " u"EdX, Open edX and the edX and Open EdX logos are registered trademarks " u"or trademarks of edX Inc."
import win32serviceutil import win32service import winerror
return self.rows_, self.columns_
import salt.ext.six as six
_ = lambda text: text
from __future__ import absolute_import import logging import json
normalizer = (1.0 - pow(self.gamma, self.n_observations - self.minibatch_index)) /\ (1.0 - self.gamma)
'list_max_length': get_config_value('list_max_length'),
setattr(self.options, option.dest, self.config[option.dest])
lines.append(line) continue
from salt.exceptions import CommandExecutionError, CommandNotFoundError
q = Author.objects.none() self.assertQuerysetEqual(q.values(), []) self.assertQuerysetEqual(q.values_list(), [])
pass
self._test_run_with_task( generate_certificates, 'certificates generated', 0, 0, expected_attempted=1, expected_total=1 )
self.key = key return key
self._add_draft_modules_to_course(new_course.location, source_course_key, user_id, **kwargs)
DATE_INPUT_FORMATS = [
from __future__ import absolute_import import json import pprint import logging from os import path from functools import wraps
service = _get_service(name) path = service['file_path']
init_bias = \ init_sigmoid_bias_from_array(bias_from_marginals.X / 2. + 0.5)
result = self.ts.map(lambda x: x * 2) self.assert_series_equal(result, self.ts * 2)
os.remove(CONFIG)
output = self.engine.render_to_string('legacyi18n08', {'number': 2}) self.assertEqual(output, '2 plural')
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.jack, self.john])
css = '.group-allocation' return self.find_css(css).first.text[0]
int_idx = idx1.intersection(idx2)
some_required_info = models.PositiveIntegerField() family_name = models.CharField(max_length=255, blank=False)
'learner_dashboard',
if len(objs) == 1: wp = objs[0] else: wp = concat(objs, axis=0, verify_integrity=False).consolidate()
if not self.fields['download_track'].is_set_on(self) and self.track: self.download_track = True
import salt.config import salt.transport.ipc
class MultiPoint(GeometryCollection): pass
exclude_trees = []
clf = svm.SVC(kernel='linear', probability=True, random_state=0) probas_pred = clf.fit(X[:half], y[:half]).predict_proba(X[half:])
import salt.utils import tempfile import salt.utils.locales import salt.utils.url from salt.ext.six import string_types from salt.exceptions import CommandExecutionError, CommandNotFoundError
orig = pd.Series([np.nan, 2, np.nan, 4, 0, np.nan, 0]) sparse = orig.to_sparse()
if is_jail(name): return '{0} already exists'.format(name)
vb_get_manager() vbox = _virtualboxManager.vbox return vbox
self._country = reader self._country_file = path
res = grainsmod.filter_by(dict1, grain='xxx') self.assertIs(res, None)
assert_warns(RuntimeWarning, k_means, X, n_clusters=n_clusters, init=centers)
"shareable_fields": [ 'username', 'profile_image', 'country', 'time_zone', 'language_proficiencies', 'bio', 'account_privacy', 'accomplishments_shared', ],
"weighted_f0.5_score", "weighted_f1_score", "weighted_f2_score", "weighted_precision_score", "weighted_recall_score",
note = self.filter_by_id(self.notes, note_id) if note: index = self.notes.index(note[0]) self.notes.pop(index) return True else: return False
self.assertRaises(ValueError, lambda: Timedelta('-10 days -1 h 1.5m 1s 3us'))
return self[indices]
import salt.ext.six as six
def test_constructor_empty(self): sp = SparseSeries() self.assertEqual(len(sp.index), 0) self.assertEqual(sp.shape, (0, ))
if date.isdigit(): date = int(date) else: date = float(date)
courses_summary_list, __ = _accessible_courses_summary_list(self.request)
searched_locations = []
__func_alias__ = { 'list_': 'list' }
check_has_course_method( XMLModuleStore(DATA_DIR, source_dirs=['toy', 'simple']), SlashSeparatedCourseKey('edX', 'toy', '2012_Fall'), locator_key_fields=SlashSeparatedCourseKey.KEY_FIELDS )
return False if str is None else str.lower() == "true"
self.wait_for_ajax() caption_state_selector = self.get_element_selector(CSS_CLASS_NAMES['captions']) return self.q(css=caption_state_selector).visible
if ndim == 0: return Series(result)
cm = confusion_matrix(y_test, y_pred) np.set_printoptions(precision=2) print('Confusion matrix, without normalization') print(cm) plt.figure() plot_confusion_matrix(cm)
self.deferred_loading = field_names, False
return ''
import integration
block_types_list = {'block_type1', 'block_type2'} for field_name in ['block_counts', 'student_view_data']: self.form_data.setlist(field_name, block_types_list) self.cleaned_data[field_name] = block_types_list
content = loader.render_to_string(template_name, context, using=using) return HttpResponse(content, content_type, status)
from __future__ import absolute_import import logging import re import getopt import copy from os import path as ospath
with self.assertRaises(UnsupportedRevisionError): self.store.delete_item( private_leaf.location, self.user_id, revision=ModuleStoreEnum.RevisionOption.draft_preferred )
os.remove(tmp.name)
preprocessor = GlobalContrastNormalization(subtract_mean=False, sqrt_bias=0.0, use_std=False)
order_history_list = order_history(user, course_org_filter=course_org_filter, org_filter_out_set=org_filter_out_set)
result = super(NORB, self).get_topological_view(mat)
copy = self.mixed_frame.copy() self.assertIsNot(copy._data, self.mixed_frame._data)
@patch.object(OrderItem, 'purchased_callback')
if 'display_name' in param_dict: param_dict['course_name'] = param_dict['display_name']
self.mock_module = MagicMock() self.mock_module.id = 1 self.dispatch = 'score_update'
exp_row = pd.Series(["b", 3], index=["cats", "values"], dtype="object", name="j")
dtype = arr.dtype if isnull(fill_value): return not (is_bool_dtype(dtype) or is_integer_dtype(dtype)) return True
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
elif field in axis_values:
self.field_name = None
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS + PayAndVerifyView.VERIFICATION_STEPS, PayAndVerifyView.PAYMENT_CONFIRMATION_STEP, )
if _np_version_under1p9: raise nose.SkipTest("Numpy version is under 1.9")
rng = np.random.RandomState(random_state)
X = np.array(list(product(range(N_per_side), repeat=2)))
yield check_clustering yield check_estimators_partial_fit_n_features
self.assertTrue(bool(version))
X = X * self._idf_diag
self.assertEqual(ip1.compare_networks(ip2), -1) self.assertEqual(ip2.compare_networks(ip1), 1)
if regedit: return rehash() else: return False
hasher = RandomTreesEmbedding(n_estimators=30, random_state=1) assert_array_equal(hasher.fit(X).transform(X).toarray(), X_transformed.toarray())
X1 = np.ones(18) kf = KFold(3) check_cv_coverage(kf, X1, y=None, labels=None, expected_n_iter=3)
self._auto_auth(self.USERNAME, self.EMAIL, False) self.courseware_search_page.visit()
pass
for l in [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)]:
raise NotImplementedError()
inv = salt.utils.vmware.get_inventory(_get_si())
cls.req_server_channel = salt.transport.server.ReqServerChannel.factory(cls.master_opts) cls.req_server_channel.pre_fork(cls.process_manager)
__virtualname__ = 'virt'
with filesystem.open('grading_policy.json', 'r') as grading_policy: on_disk = loads(grading_policy.read()) self.assertEqual(on_disk, course.grading_policy)
c = 24650000000000000
lzma = compat.import_lzma() f = lzma.open(filename, 'rb') assert_frame_equal(df, read_csv(f, index_col=0)) f.close()
ret.update({esxi_host: {'Coredump Config': _format_coredump_stdout(response)}})
df1 = DataFrame(index=np.arange(10)) df1['bool'] = True df1['string'] = 'foo'
from __future__ import unicode_literals
train_object.algorithm.termination_criterion.prop_decrease = 0.5 train_object.algorithm.termination_criterion.N = 1
pass
__virtualname__ = 'service'
return isinstance(obj, _PROTECTED_TYPES)
import salt.loader import salt.payload import salt.utils import salt.utils.templates import salt.utils.url from salt.utils.locales import sdecode from salt.exceptions import CommandExecutionError
multi_db = True
return 0
from __future__ import absolute_import import sys import os.path
idx = Index([0, 1, 2]) frame = DataFrame({}, index=idx) self.assertIs(frame.index, idx)
raise NotImplementedError('subclasses of BaseDatabaseOperations may require a datetime_cast_date() method')
problem = self.build_problem(answer='[1j, 5]') input_dict = {'1_2_1': '3'} with self.assertRaises(StudentInputError): problem.grade_answers(input_dict)
'update_url': (bool, string_types),
python_2_unicode_compatible = six.python_2_unicode_compatible
recommended_datastores = si.content.storageResourceManager.RecommendDatastores(storageSpec=storage_spec)
method = DataPoint.objects.all()[:2].update with self.assertRaises(AssertionError): method(another_value='another thing')
if not course.certificates or not course.certificates.get('certificates'): return [] return [cert['id'] for cert in course.certificates['certificates']]
doc_store_config = { 'host': HOST, 'port': PORT, 'db': DB, 'collection': COLLECTION, } cls.add_asset_collection(doc_store_config)
VerificationStatus.add_verification_status( checkpoint=self.first_checkpoint, user=self.user, status=status )
new_blocks.extend( make_block(values=value.copy(), ndim=self.ndim, placement=slice(mgr_loc, mgr_loc + 1)) for mgr_loc in unfit_mgr_locs)
task_folder = task_service.GetFolder(location)
pass
lazymod_py_file = lazymod.__file__ if lazymod_py_file.endswith("c"): lazymod_py_file = lazymod_py_file[:-1]
store = self._verify_modulestore_support(dest_key.course_key, 'copy_from_template') return store.copy_from_template(source_keys, dest_key, user_id)
rval_axes = self.output_axes assert len(rval_axes) == 4
if timezone.is_aware(value): raise ValueError("MySQL backend does not support timezone-aware times.")
self.wait_for_ajax() video_selector = '{0}'.format(CSS_CLASS_NAMES['video_container']) self.wait_for_element_presence(video_selector, 'Video is initialized')
if _is_empty_indexer(indexer): pass
return models.AccessToken.objects.get(token=token_string)
self.assertEqual(f.clean('2010-12-21 13:30:05'), datetime(2010, 12, 21, 13, 30, 5))
merged_access = descriptor.merged_group_access if False in merged_access.values(): log.warning("Group access check excludes all students, access will be denied.", exc_info=True) return ACCESS_DENIED
return self.forms[index]
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.check_problem(get_request_dict)
if not pkg_name: return "pandas"
if self._is_in_bulk_operation(course_key, ignore_case): return self._get_bulk_ops_record(course_key, ignore_case).index else: return self.db_connection.get_course_index(course_key, ignore_case)
item = self.get_item(item_location)
y = multioutput_estimator_convert_y_2d(name, y)
elif existing['code'] == 404: response = __salt__['bigip.create_node'](hostname, username, password, name, address)
return math.rank(self._x.values)
if not settings.FEATURES.get(feature_name, False): return HttpResponseBadRequest() return view_func(request, *args, **kwargs)
if keep_descendants: for child in children: for parent in parents: self._add_relation(parent, child)
if isinstance(err, DataFrame):
import re import logging
n_responses = 3 y = rng.randn(n_samples, n_responses) r.fit(x, y) assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))
n_estimators_per_job = (n_estimators // n_jobs) * np.ones(n_jobs, dtype=np.int) n_estimators_per_job[:n_estimators % n_jobs] += 1 starts = np.cumsum(n_estimators_per_job)
self.read_csv(self.csv1, memory_map=True)
position = "numerator" numerator = [] denominator = []
return sum(self[i].point_count for i in range(self.geom_count))
status = certs_api.example_certificates_status(self.course.id) self.assertIsNot(status, None)
imports = None
return [{'username': username, 'remote_id': 'remote_' + username} for username in usernames]
from __future__ import absolute_import import logging
log.error('No host given to create this VM on') raise SaltCloudExecutionFailure
self._assert_can_reverify()
with tm.assertRaisesRegexp(TypeError, 'list of lists-like'): self.index.set_labels(labels[0])
if len(state) == 2: nd_state, own_state = state data = np.empty(nd_state[1], dtype=nd_state[2]) np.ndarray.__setstate__(data, nd_state)
train, target = iris.data, iris.target n_samples, n_features = train.shape
assert_raises(ValueError, getattr(nbrs_D, method), X)
value = self.get_cleansed_multivaluedict(request, value)
condition = label.any(axis=1) return tuple(var.compress(condition, axis=0) for var in (train, label))
if labels.is_unique and Index(keyarr).is_unique:
self.selenium.switch_to.window(main_window) self.wait_for_value('#id_supporting_bands', '42')
def close_old_connections(**kwargs): for conn in connections.all(): conn.close_if_unusable_or_obsolete() signals.request_started.connect(close_old_connections) signals.request_finished.connect(close_old_connections)
from __future__ import absolute_import import os import logging
pass
NS = slice(None, None)
self.model.enforce_constraints()
students = self._create_students(10)
pass
num_padded_bytes = ord(padded_data[-1]) return padded_data[:-num_padded_bytes]
G = neighbors.kneighbors_graph(X, n_neighbors, mode='distance').toarray()
_, res = SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, 0, 0, SMTO_ABORTIFHUNG, 5000) return not bool(res)
assert_frame_equal(df1, df1_copy) assert_frame_equal(df2, df2_copy)
can_distinct_on_fields = False
cid = cid if cid > 0 else self.ID return reverse_course_url( 'group_configurations_detail_handler', self.course.id, kwargs={'group_configuration_id': cid}, )
clf = svm.SVC(kernel='linear', C=0.1, decision_function_shape='ovo').fit(iris.data, iris.target)
super(JavaScriptLinter, self).__init__() self._skip_javascript_dirs = SKIP_DIRS + ('i18n', 'static/coffee') self._skip_coffeescript_dirs = SKIP_DIRS self.underscore_linter = UnderscoreTemplateLinter()
for iface in (vcapi, rcapi): driver = iface.get_driver_by_name(force_bytes(name)) if driver: break
self.srs = ds_input.get('srid')
content_range = {'start': 0, 'stop': 1, 'end': 2}
API_DATADOG_SAMPLE_RATE = 0.1
mount_ignore_fs_keys = { 'ramfs': ['size'] }
eps = 1e-5 n, m = V.shape W, H = _initialize_nmf(V, r, init, random_state=0)
DATE_FORMAT = 'j F، Y' TIME_FORMAT = 'g:i A' YEAR_MONTH_FORMAT = 'F Y' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'd‏/m‏/Y'
return "{0},{1}".format(bookmark.user.username, bookmark.usage_key)
if row_max[-1] == 0: y_i_all_argmax = np.append(y_i_all_argmax, [len(y.data)])
return self._geomset_attribute('intersection', geom, **kwargs)
return self.q(css="div.problem div.problem-hint").html[0].split(' <', 1)[0]
precompute = 'auto' Xy = None
return [username.strip() for username in value.split(',')]
'cli_summary': bool,
from io import TextIOWrapper s = TextIOWrapper(s, encoding='utf-8')
return dict(result=True, data=outf.name)
return [None]
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(courses_list, [])
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
if not layout[ax.rowNum + 1, ax.colNum]: continue if sharex or len(ax.get_shared_x_axes() .get_siblings(ax)) > 1: _remove_labels_from_axis(ax.xaxis)
if taps: if not isinstance(taps, list): taps = [taps]
self.assertRaises(TypeError, rwindow._flex_binary_moment, 5, 6, None)
if isinstance(relation, six.string_types): if "." not in relation: relation = "%s.%s" % (scope_model._meta.app_label, relation)
keys, values_lists = zip(*sorted(sub_grid.items())[::-1]) sizes = [len(v_list) for v_list in values_lists] total = np.product(sizes)
self.check_apps_ready() return self.app_configs.values()
time_step = 5 rval = np.zeros((time_step, batch_size), dtype=dtype) rval[:3, :1] = 1 rval[:4, 1:] = 1 return rval
ret[host_name] = {}
X = sparse.csr_matrix(X)
import salt.utils
self[asset_idx] = metadata_to_insert
__remove_null_logging_handler() __remove_queue_logging_handler()
idx = date_range('1750-1-1', '2050-1-1', freq='7D') idx_p = self.round_trip_pickle(idx) tm.assert_index_equal(idx, idx_p)
class A(models.Model): a_text = models.CharField(max_length=20)
return self.current_group.get(user.id, {}).get(user_partition.id)
if isinstance(data, dict): data = [data]
raise NotImplementedError
'edxmako.middleware.MakoMiddleware',
PAGES_PACKAGE_DIR = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'pages')
self.assertRedirects(response, '/password_change/done/')
from lms.envs.common import ( COURSE_KEY_PATTERN, COURSE_ID_PATTERN, USAGE_KEY_PATTERN, ASSET_KEY_PATTERN )
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
self.setup_logfile_logger() verify_log(self.config)
pass
self._auto_auth("STAFF_TESTER", "staff101@example.com", True)
assert_raises(ValueError, Pipeline, [('svc', SVC()), ('svc', SVC())])
arr = np.random.random(100) assert not contains_nan(arr) arr[0] = np.nan assert contains_nan(arr)
with self.assertRaisesRegexp(CommandError, ".*ENABLE_TEAMS must be enabled.*"): call_command('reindex_course_team', self.team1.team_id)
def __unicode__(self): return u'SystemUser'
from salt.modules import monit
mask = str(mask).upper()
block, _ = get_module_by_usage_id( request, unicode(course_key), unicode(usage_key), disable_staff_debug_info=True, course=course )
with open(os.path.join(os.path.dirname(__file__), 'data', filename)) as f: return f.read()
nobs = self._nobs factors = (nobs - 1) / (nobs - self._df_raw) return 1 - (1 - self._r2_raw) * factors
end = info[1].index(' ', column+1)
import os
for j in range(n_components): w = w_init[j, :].copy() w /= np.sqrt((w ** 2).sum())
pro.save(using='default') marty.save(using='default') dive.save(using='other') mark.save(using='other')
if dtypes is False: return self
assert_raises(ValueError, cls().partial_fit, X2, y2)
if kwargs.get('clean_file', False): salt.utils.fopen(kwargs['file'], 'w').close()
S.flat[::(n_samples + 1)] = preference
if not alias.strip(): line_to_add = ''
opts = self._meta
n_samples = 100 n_features = 500 rank = 5 k = 10
r = int(np.sqrt(m)) c = m // r while r * c < m: c += 1 return (r, c)
return html.cssselect('.courses-processing li[data-course-key="{}"]'.format(unicode(course_key)))
return capi.geos_touches(self.ptr, other.ptr)
p = T.nnet.sigmoid(linear_response) return p
Y = np.vstack((y_diabetes, y_diabetes)).T n_features = X_diabetes.shape[1]
df['A'].ix[14] = 5 self.assertEqual(df['A'][14], 5)
from __future__ import absolute_import
url = reverse('instructor_dashboard', kwargs={'course_id': unicode(course_key)}) if section is not None: url += u'#view-{section}'.format(section=section) return url
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, MagicMock, NO_MOCK, NO_MOCK_REASON
from unit.modules.boto_cognitoidentity_test import BotoCognitoIdentityTestCaseMixin
values, _, value, _ = self._try_coerce_args(self.values, value) arr_value = np.array(value)
if key == settings.SESSION_COOKIE_NAME: domain = microsite.get_value('SESSION_COOKIE_DOMAIN', domain)
return Mode( self.mode_slug, self.mode_display_name, self.min_price, self.suggested_prices, self.currency, self.expiration_datetime, self.description, self.sku, self.bulk_sku )
((), {'attrs': {'class': 'pretty'}}, '<label for="id_field" class="pretty">Field:</label>')
result = s.isin(s[0:2].values.astype('datetime64[D]')) assert_series_equal(result, expected)
import salt.utils
self.table_entry.state = state self.creator_admin.save_model(self.request, self.table_entry, None, True)
self.hw1_names = ['h1p1', 'h1p2'] self.hw2_names = ['h2p1', 'h2p2'] self.hw3_names = ['h3p1', 'h3p2']
db_name = 'foo 1' self._db_creation_loop(db_name=db_name, returning_name=db_name, test_conn=True, connection_user=self.user, connection_pass=self.password )
if certificate_data.get('course_title'): certificate_response["course_title"] = certificate_data['course_title']
member.name = member.name.replace('{0}/'.format(package), '')
from salt.beacons import glxinfo
alg.fit(X) alg.fit(X.tolist())
from pylearn2.blocks import Block from pylearn2.utils import sharedX
from __future__ import unicode_literals
self.assertIn( 'Failed to setup the Syslog logging handler', '\n'.join(ret[1]) ) self.assertEqual(ret[2], 2)
self.assertRaises(ValueError, web.get_data_yahoo, 'XOM', interval='NOT VALID')
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../..')
self._submit_photos( face_image=self.IMAGE_DATA, photo_id_image=self.IMAGE_DATA )
self.courseware_page.visit() self.courseware_page.wait_for_page() self.assertFalse(element_has_text( page=self.courseware_page, css_selector=entrance_exam_link_selector, text='Entrance Exam' ))
if not isinstance(user_exists, bool): ret['comment'] = user_exists ret['result'] = False return ret
self.service.remove_credit_requirement_status( self.user.id, no_credit_course.id, 'grade', 'grade' )
self.page = CourseTeamPage( self.browser, self.course_info['org'], self.course_info['number'], self.course_info['run'] ) self._go_to_course_team_page()
actual_items = source_store.get_items(dest_course_id, revision=ModuleStoreEnum.RevisionOption.published_only) chapter_is_found = False
with self.assertRaises(ResponseError): problem.grade_answers({'1_2_1': '42'})
MISSING = 0 COLLAPSE = 1 EXPAND = 2
try: import pymongo version = pymongo.version version = '.'.join(version.split('.')[:2]) HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False
return "%s"
self.values[locs] = values
transport = 'ssh' address = self.url
iris = datasets.load_iris()
self.assertFalse(self.user.is_active)
import re
from __future__ import unicode_literals
if item_kind is None: items.append(value) else: items.append({'kind': item_kind, 'name': value})
result2 = DataFrame(p.values.astype('float64') / 0, index=p.index, columns=p.columns) assert_frame_equal(result2, expected)
self.x_sum = numpy.zeros([self.n_dim])
assert_raises(ValueError, auc, [1.0, 0.0, 0.5], [0.0, 0.0, 0.0])
d = get_deserializer(format) return d(stream_or_string, **options)
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
ret = self.run_function('state.sls', mods='pip-installed-errors') self.assertSaltTrueReturn(ret)
series = self.series.copy() self.assertRaises(Exception, setattr, series, 'index', np.arange(len(series) - 1))
if 'extensions' not in d: self.extensions = []
if len(names) == 1: return ret[names[0]] return ret
from __future__ import absolute_import import os import imp import sys import salt import time import logging import inspect import tempfile import functools from collections import MutableMapping from zipimport import zipimporter
return True
self.lengths = [len(s) for s in self._sequence_data] self.len_unique = np.unique(self.lengths)
if not organizations_enabled(): return [] from organizations import api as organizations_api return organizations_api.get_course_organizations(course_id)
raise
asset_deprecated = None ssck_deprecated = None
test3 = new value 3B
#
self.verify_show_answer_present(False)
'pd.options.display.encoding="utf8"' ]
DATABASES = {}
if self.cleaned_data.get("_expiration_datetime"): return self.cleaned_data.get("_expiration_datetime").replace(tzinfo=UTC)
output = self.engine.render_to_string('inheritance36', {'numbers': '123'}) self.assertEqual(output, '_1_2_3_')
return self.children()
ret['comment'] = ('User {0} is not present, so it cannot be removed' ).format(name) return ret
df = DataFrame({'text': ['some words'] + [None]*9})
super(DraftModuleStore, self).clone_course(source_course_id, dest_course_id, user_id, fields)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, Mock, NO_MOCK, NO_MOCK_REASON )
with ensure_clean_store(self.path) as store:
group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition)
__virtualname__ = 'mongodb_user'
long_index = MultiIndex.from_arrays( [i.values for i in self.index_axes])
self.assertIsInstance( self.run_function('softwareupdate.list_available'), dict)
import nose
self.test_datefieldlistfilter()
from salt import utils
with remove_ccx(location) as (location, restore): return restore( self._modulestore.get_parent_location(location, **kwargs) )
raise
self.assertTrue(self.video.is_aligned(False))
assert_raises(ValueError, e.fit, X_zero_samples, [])
if len(tree) == 1: return tree[0][0] if len(tree) == 3: return " <sup>{num}</sup>&frasl;<sub>{den}</sub> ".format(num=tree[0][0], den=tree[2][0]) return "Error"
col_line = [] if self.index:
pass
self.class_weight_ = np.empty(0) return column_or_1d(y, warn=True).astype(np.float64)
assert_true(X_scaled is not X) assert_true(X_csr_scaled is not X_csr)
with tm.assert_produces_warning(FutureWarning): df.sort_index(by=[('a', 1)]) expected = df.sort_values(by=[('a', 1)])
self.assertFalse(hasattr(draft_open_assessment, "xml_attributes"))
result = sparse.loc[[1, 3, 4, 5]] exp = orig.loc[[1, 3, 4, 5]].to_sparse() tm.assert_sp_frame_equal(result, exp)
self.assertNotIn('error_code', json.loads(response.content))
from salt.exceptions import CommandExecutionError
return sig.replace(parameters=tuple(sig.parameters.values())[1:])
try: currIndex = sysPath.index(path) if currIndex != index: sysPath.pop(currIndex) else: return True except ValueError: pass
mount_invisible_keys = [ 'actimeo', 'comment', 'direct-io-mode', 'password', 'retry', 'port', ]
for i in permissions.split(','): perm = i.strip()
for sel in PROBLEM_DICT[problem_type][correctness]: if bool(isnt_marked):
return value
from unit.transport.req_test import ReqChannelMixin from unit.transport.pub_test import PubChannelMixin
types = [(MockDataFrame, MockDataFrame)] try: from pandas import Series, DataFrame types.append((DataFrame, Series)) except ImportError: pass
MUTABLE = False
class KwargsStruct(object): def __init__(self, **entries): self.__dict__.update(entries)
_opts = __opts__.get('sqlite3', {})
conf = { 'reposdir': ['/etc/yum/repos.d', '/etc/yum.repos.d'], }
return datetime.fromtimestamp(os.path.getmtime(self.path(name)))
sl = self.frame[:20] tm.assert_sp_frame_equal(sl, self.frame.reindex(self.frame.index[:20]))
'publish_session': int,
if settings.DEBUG: return host
emails = list(emails)
dest2check = dest if not dest2check: rel_path = self._check_proto(path)
predictions = np.array([ est.predict(X) for est in self.estimators_[:limit]]).T
with self.assertRaisesRegexp(CommandError, "Error: too few arguments"): call_command('fix_not_found')
self.assertIn('display_course_number: ""', response.content)
from salt.utils import args
'SHOW_LANGUAGE_SELECTOR': False,
self.restricted_course.delete() self._assert_history_deleted()
ret['result'] = False ret['comment'] = \ 'Failed to configure repo \'{0}\': {1}'.format(name, exc) return ret
self.tab_nav.mathjax_has_rendered()
try: import confidant.client import confidant.formatter HAS_LIBS = True except ImportError: HAS_LIBS = False
self.verify_end_date('edX/toy/TT_2012_Fall')
if config_file_path.endswith(suffix_to_strip): config_file_full_stem = config_file_path[0:-len(suffix_to_strip)] else: config_file_full_stem = config_file_path
self.client.logout() response = self.client.get( '/verify_student/software-secure-fake-response' ) self.assertEqual(response.status_code, 302)
from salt.states import postgres_group
a = tm.makeTimeSeries() b = tm.makeTimeSeries() a[:5] = np.nan b[:10] = np.nan
if (self._ip >> 112) != 0x2002: return None return IPv4Address((self._ip >> 80) & 0xFFFFFFFF)
self.assertTrue(self.video.downloaded_transcript_contains_text('srt', 'Welcome to edX.'))
section_titles = [t for t in section_titles if t]
log = logging.getLogger(__name__)
data = JUNK_FOOD_DOCS + NOTJUNK_FOOD_DOCS
from __future__ import print_function from __future__ import absolute_import import os
ntf = tempfile.NamedTemporaryFile() ntf.write(self.as_string()) ntf.flush() return ntf
CourseEnrollment.enroll(user, course_id) self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_enrollment_event_was_emitted(user, course_id)
import salt.utils import salt.utils.itertools import salt.ext.six as six from salt.exceptions import SaltInvocationError from salt.ext.six.moves import range from salt.exceptions import CommandExecutionError
if message_type == 'status': self.wait_for_element_visibility(CLASS_SELECTORS[message_type], '{} message is Visible'.format(message_type.title())) return self.q(css=CLASS_SELECTORS[message_type]).text[0]
return mixed_setting["default"]["OPTIONS"]["stores"]
response = self.client.get(self.path, **headers) self.assertEqual(response.status_code, 403)
}
with patch('sys.argv', ['salt-call']): ret = utils.daemonize_if({}) self.assertEqual(None, ret)
if is_staff: user.is_staff = True user.save() CourseEnrollment.enroll(user, course_key)
else:
LONG_VERSION_PY = {} HANDLERS = {}
MMINION = None
return _check_range_and_return('instance', label, -1, 9, -1)
item = test_databases.setdefault( connection.creation.test_db_signature(), (connection.settings_dict['NAME'], set()) ) item[1].add(alias)
class Meta(object): model = Dummy
else: return ""
from __future__ import absolute_import
for attr in REQUISITES: if attr in kwargs: try: iter(kwargs[attr]) except TypeError: kwargs[attr] = [kwargs[attr]] self.kwargs = kwargs
alphas /= alphas[0] alphas = alphas[::-1] coefs = coefs[:, ::-1] mask = alphas >= eps mask[0] = True alphas = alphas[mask] coefs = coefs[:, mask] return alphas, coefs
if not (name == 'HuberRegressor' and estimator.n_iter_ is None): assert_greater_equal(estimator.n_iter_, 1)
self._collection.clear() self._uri_cache.clear()
CertificateGenerationConfiguration(enabled=True).save() resp = views.progress(self.request, course_id=unicode(self.course.id)) self.assertNotContains(resp, 'Request Certificate')
n_fits = len(out)
if dtype == np.object_: return v.tolist()
self.dispatch_table = copyreg.dispatch_table.copy()
from salt.utils.validate import net
rh_ip.__grains__ = {} rh_ip.__salt__ = {}
return self.client.patch(url, data=kwargs.get('data', None))
npm.__salt__ = {}
must_be_first = False child_nodelists = ('nodelist',) token = None
resource['event'] = test_case['event_second'] self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
func = getattr(block.__class__, handler_name, None) if not func: raise ValueError("{!r} is not a function name".format(handler_name))
assert_bad({"files": [{"content_type": "video/mp4"}]})
sorter = uniques.argsort()
return self.q(css='.annotatable-title').text[0]
result = Reso.get_freq(Reso.get_str_from_freq(freq)) self.assertEqual(freq, result)
self._enroll_students_in_course(self.course.id, extra_count) return {}
self.instructor_dashboard_page = InstructorDashboardPage(self.browser, self.course_id) self.instructor_dashboard_page.visit() self.cohort_management_page = self.instructor_dashboard_page.select_cohort_management() self.cohort_management_page.wait_for_page()
response = requests.post(self.url, data={"test_param": None}) self.assertEqual(response.status_code, 400)
mixed = Series(['a', NA, 'b', True, datetime.today(), 'c', 'eee', None, 1, 2.])
for page in self.pages: page.visit()
vmconfig = _parse_vmconfig(vmconfig, vmconfig_type['instance']) log.debug('smartos.vm_present::{0}::vmconfig - {1}'.format(name, vmconfig))
loc = label if takeable is True else self.index.get_loc(label) return self._get_val_at(loc)
H, W = img_shape Hs, Ws = tile_spacing
f = File(BytesIO(b'one\rtwo\rthree')) self.assertEqual(list(f), [b'one\r', b'two\r', b'three'])
self.set_select_value(self.LIBRARY_LABEL, library_name) EmptyPromise(lambda: self.library_name == library_name, "library_name is updated in modal.").fulfill()
tstart = datetime.now() clf = DecisionTreeClassifier() clf.fit(X, Y).predict(X) delta = (datetime.now() - tstart)
self.client.logout() response = self.client.get(url, **{'HTTP_X_EDX_API_KEY': self.API_KEY}) self.assertEqual(response.status_code, status.HTTP_200_OK)
ISO_8859_1, UTF_8 = str('iso-8859-1'), str('utf-8')
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
serialized_value = unicode(safe_cookie_data_1)
return start(name)
self.assertEqual(err.__class__, uploadhandler.CustomUploadError)
from pandas.tseries.timedeltas import ( _coerce_scalar_to_timedelta_type as _coerce)
object_image_index = [0, ] blank_image_index = [0, ] blank_label = _get_blank_label(dataset)
from __future__ import absolute_import
with self.assertRaises(SomeOtherException): self.engine.render_to_string('filter-syntax23', {"var": SomeClass()})
import integration import salt.utils
stat['4505/est'], stat['4506/est'] = next(SaltNetstat().run())
_caches = {} _expire_info = {} _locks = {}
context['ewa_diff'] = ewa_diff context['ewa_inertia'] = ewa_inertia context['ewa_inertia_min'] = ewa_inertia_min context['no_improvement'] = no_improvement return False
destroy = salt.utils.alias_function(remove, 'destroy')
msg = "'inline_formsets.Child' has more than one ForeignKey to 'inline_formsets.Parent'." with self.assertRaisesMessage(ValueError, msg): inlineformset_factory(Parent, Child)
return username in [user.username for user in cohort.users.all()]
super(CeleryConfigTest, self).setUp() self.client = Client() self.ping_url = reverse('status.service.celery.ping')
self.tsframe.to_csv(path) recons = DataFrame.from_csv(path)
get_blob_properties = show_blob_properties
try:
__func_alias__ = { 'reload_': 'reload' }
px_y = round(npix + (0.5 * log((1 + fac) / (1 - fac)) * (-1.0 * self._radpp[zoom])))
df = DataFrame(index=lrange(10), columns=['a', 'b'], dtype=int) self.assertEqual(df.values.dtype, np.object_)
self.assertEqual(self.foo, 'override')
TestCase._enter_atomics = enter_atomics_wrapper(TestCase._enter_atomics) TestCase._rollback_atomics = rollback_atomics_wrapper(TestCase._rollback_atomics)
a = np.random.rand(10).astype(np.complex64) b = np.random.rand(10).astype(np.complex128)
pass
self.assertFalse(library_container.has_validation_error) self.assertFalse(library_container.has_validation_warning)
from __future__ import absolute_import
if np.prod(a.shape) > _MIN_ELEMENTS:
x_squared_norms = (X ** 2).sum(axis=1) labels_array, inertia_array = _labels_inertia( X, x_squared_norms, noisy_centers) assert_array_almost_equal(inertia_array, inertia_gold) assert_array_equal(labels_array, labels_gold)
if 'tag' in _options: syslog.openlog(ident=_options['tag'], logoption=logoption) else: syslog.openlog(logoption=logoption)
if name is not None: self._check_structures(f, static_comp, name=name, has_min_periods=has_min_periods, has_time_rule=has_time_rule, fill_value=fill_value, has_center=has_center, **kwargs)
max_scores_cache.push_to_remote()
if not hasattr(coeffs, '__iter__'): coeffs = [coeffs] * len(self.layers)
available_apps = None
self.request.user = AnonymousUser() context = user_has_cart_context_processor(self.request) self.assertFalse(context['should_display_shopping_cart_func']())
label = _(u"I agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
self.repo = dulwich.repo.Repo.init(self.cachedir) new = True
if len(set(pixeltypes)) != 1: raise ValidationError("Band pixeltypes are not all equal.")
topics = self.setup_topics(teams_per_topic=0) self.assert_serializer_output(topics, num_teams_per_topic=0, num_queries=1)
y = f(X).ravel()
LogoutPage(self.browser).visit() self._auto_auth("STAFF_TESTER", "staff101@example.com", True) self.course_outline.visit()
signature = _compute_signature(real_parameters, access_key_secret, 'GET', '/iaas/') real_parameters['signature'] = signature
>> a=makeCustomDataframe(5,3,r_idx_nlevels=4, r_idx_names=["FEE","FI","FO","FAM"], c_idx_nlevels=2)
with self.assertNumQueries(0): RestrictedCourse.is_restricted_course(new_course_id)
self.selenium.find_element_by_id('id_birthdate_0').send_keys('2013-06-01')
self.assertRaises(TypeError, check, 'table', index) with tm.assert_produces_warning( expected_warning=PerformanceWarning): check('fixed', index)
try: value = result.get(timeout=4.0) success = True except TimeoutError: value = None success = False
return ItemFactory.create( parent_location=parent.location, category="video", display_name="Group {} Sees This Video".format(group), )
self.assertGroupContent( groups[0], title=u"cool (2)", notes=[u"Third note", None] )
wt_loc = toplevel
sparse = self.dense1.to_sparse() sparse3 = self.dense3.to_sparse()
k = redirects.get(k, k) return index_map.setdefault(k, len(index_map))
if '' in (referer.scheme, referer.netloc): return self._reject(request, REASON_MALFORMED_REFERER)
#pylint: disable=E0602
ipaddr.IPNetwork(address)
value = rs[2] + np.timedelta64(timedelta(minutes=5, seconds=1)) rs[2] += np.timedelta64(timedelta(minutes=5, seconds=1)) self.assertEqual(rs[2], value)
adder = { 'type': 'text', 'contents': choice_text, 'tail_text': '', 'value': '' } components.append(adder)
EDX_XML_PARSER = XMLParser(dtd_validation=False, load_dtd=False, remove_comments=True, remove_blank_text=True, encoding='utf-8')
return
return dict(_typ=self._typ, _subtyp=self._subtyp, _data=self._data, _default_fill_value=self._default_fill_value, _default_kind=self._default_kind)
self.assertCalcEqual(True, [1, 'or', 1, '==', 2])
with mock.patch.dict('django.conf.settings.FEATURES', {'ENABLE_CREATOR_GROUP': True}): self.assert_created_course()
n_cv = 2 cv = StratifiedKFold(n_cv) precomputed_folds = list(cv.split(train, target))
intra_clust_dists = np.ones(distances.shape[0], dtype=distances.dtype)
__virtualname__ = 'pkg'
predictions = estimator.predict(X[:, features])
new_context = copy(self) new_context._reset_dicts(values) return new_context
ret = self.run_function( 'state.sls', mods='testappend.issue-2227' ) self.assertSaltTrueReturn(ret)
next_cart = Order.get_cart_for_user(user=self.user) self.assertNotEqual(cart, next_cart) self.assertEqual(next_cart.status, 'cart')
self._auto_auth(self.USERNAME, self.EMAIL, False) self.dashboard.visit()
import salt.loader from salt.log import LOG_LEVELS
return def_id.block_type
self.configuration = GroupConfiguration.parse(json_string) self.course = course self.assign_id(configuration_id) self.assign_group_ids() self.validate()
with self.assertRaises(ResponseError): problem.grade_answers({'1_2_1': '42'})
if set(attrs) & found_attrs: continue
pass
return self.clone()
def __init__(self, course_descriptor): self.graders = [ CourseGradingModel.jsonize_grader(i, grader) for i, grader in enumerate(course_descriptor.raw_grader)
rval = (transform(raw_batch[0]),) + raw_batch[1:]
pass
self.store_precision = True
plt.plot(xx, yy, 'k-') plt.plot(xx, yy_down, 'k--') plt.plot(xx, yy_up, 'k--')
return " ".join(str(arg) for arg in args if arg)
if existing['code'] == 200:
import logging import re import os HAS_DBUS = False try: import dbus HAS_DBUS = True except ImportError: pass
self.provider.enable_integration = True self.provider.save()
if '.' not in val: if x < 0: return '%d' % (-whole - 1) else: return '%d' % (whole + 1)
return True
past_due_date = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(past_due_date.answer_available())
myrole: boto_iam_role.present: - profile: key: GKTADJGHEIQSXMKKRBJ08H keyid: askdjghsdfjkghWupUjasdflkdfklgjsdfjajkghs region: us-east-1
from __future__ import absolute_import import os import sys import textwrap import tempfile
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
pass
for option in self.option_list: if option.dest is None: continue
authentication_classes = (EnrollmentCrossDomainSessionAuth, OAuth2AuthenticationAllowInactiveUser) permission_classes = (IsAuthenticated,)
self.assertFalse(mock_push_update.called)
left = self.lhs(env) right = self.rhs(env)
folders_list_in_path.extend(['data', 'uploads', file_name])
if isinstance(regex, six.string_types): return re.compile(regex, flags) else: assert not flags, "flags must be empty if regex is passed pre-compiled" return regex
else: ret = _load_result(existing, ret)
try: get_course_overview_with_access(request.user, 'load', course_id) return redirect("/courses/{course_id}/wiki/{path}".format(course_id=course_id.to_deprecated_string(), path=wiki_path)) except Http404: pass
if callable(maybe_callable): return maybe_callable(obj, **kwargs) return maybe_callable
self.stderr.write(_('Could not find a group named "{}" - skipping.').format(group_name))
aside1 = AsideFoo(scope_ids=ScopeIds('user', block_type1, def_id, usage_id), runtime=self.runtime) aside1.field11 = 'new_value11' aside1.field12 = 'new_value12'
FEATURES['ENABLE_DASHBOARD_SEARCH'] = True
num_braces = 0
if '@' not in snapshot: ret['result'] = False ret['comment'] = 'invalid snapshot name: {0}'.format(snapshot)
result = func(self.values, **kwargs) if not isinstance(result, Block): result = self.make_block(values=_block_shape(result, ndim=self.ndim)) return result
p.mugshot.size self.assertEqual(p.mugshot.closed, True)
from __future__ import absolute_import import sys
import logging
self.train_set.adjust_to_be_viewed_with( self.train_set.X, np.ones(self.train_set.X.shape))
User.objects.filter(username='testclient').update(is_staff=True, is_superuser=True) self.login() self.admin = User.objects.get(pk=self.u1.pk)
'service_status',
return { "result": ( "inclusion_no_params_with_context_from_template - Expected result (context value: %s)" % context['value'] ) }
return dict([item for d in dicts for item in d.items()])
if requested_child == 'first': return children[0] elif requested_child == 'last': return children[-1] else: return children[0]
return self.visit(node.value)
if hasattr(settings, 'LMS_SEGMENT_KEY') and settings.LMS_SEGMENT_KEY: tracking_context = tracker.get_tracker().resolve_context() identity_args = [
self._validate_estimator()
block_structure.set_transformer_block_field( block_key, cls, cls.MERGED_VISIBLE_TO_STAFF_ONLY, ( all_parents_visible_to_staff_only or block_structure.get_xblock(block_key).visible_to_staff_only ) )
data = { 'A': {'foo': 0, 'bar': 1} }
import integration from salt.config import cloud_providers_config
number2 = models.IntegerField(blank=True, default=Numbers.get_static_number)
if 'width' not in ds_input: ds_input['width'] = self.width
pass
if len(sindexers) == 1 and sindexers[0] != 0: df = df.T
instance._state.adding = False
global _default t = getattr(_active, "value", None) if t is not None: return t if _default is None: _default = translation(settings.LANGUAGE_CODE) return _default
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
return func(self.ptr, other.ptr)
sp = SparseDataFrame(self.frame.values)
if not isinstance(target, six.string_types) or not isinstance(index, int): raise TypeError return capi.get_attr_value(self.ptr, force_bytes(target), index)
microsites_root = settings.MICROSITE_ROOT_DIR if self.has_configuration_set(): settings.DEFAULT_TEMPLATE_ENGINE['DIRS'].append(microsites_root)
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
VERSION_RE = re.compile(r'\S+ (\d+)\.(\d+)\.?(\d+)?')
ret = _get_labels(node, apiserver_url)
self.assertListEqual(json.loads(response.content), expected)
if do_oob: sample_mask = _random_sample_mask(n_samples, n_inbag, random_state) old_oob_score = loss_(y[~sample_mask], y_pred[~sample_mask], sample_weight[~sample_mask])
check_lti_popup(parent_window)
label_indexer = np.zeros((ngroups, periods), dtype=np.int64) with nogil: for i in range(N):
content_location = Transcript.asset_location(location, name) content = StaticContent(content_location, name, mime_type, content) contentstore().save(content) return content_location
result = sparse.loc[orig % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse(fill_value=0) tm.assert_sp_series_equal(result, exp)
return array.array(str("i"))
from __future__ import unicode_literals
filename = self.state.document.current_source lineno = self.state.document.current_line
from salt.ext.six.moves import shlex_quote as _cmd_quote
if math_string != '4': raise err
df = DataFrame()
author_view = module_attr(AUTHOR_VIEW) has_author_view = True
return self.month_format
self.assertEqual(a.other, 1) self.assertTrue(callable(a.other_value))
self.selenium.find_element_by_xpath('//input[@value="Save"]').click() self.wait_page_loaded()
return sorted(self.houses.all(), key=lambda house: -house.rooms.count())[0]
return self.q(css=self._bounded_selector('a.duplicate-button'))
def f(x): return float(len(x))
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
os.environ['REQUIRE_BUILD_PROFILE_OPTIMIZE'] = 'none'
return etree.Element(self.tag)
if build_axes:
if not self.options.name and not \ self._check_enabled_suites(include_unit=True, include_cloud_provider=True): self._enable_suites(include_unit=True)
return cls.objects.filter(invoice__isnull=False, course_id=course_id)
uninstall_python(python, runas=runas) return False
self.drop_table('test_frame1')
groups = pickle.loads(pickle.dumps(groups)) self.assertQuerysetEqual(groups, [g], lambda x: x)
verbose_name = '¿Chapter?'
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
from __future__ import absolute_import import logging import re
assert_raises(ValueError, plot_partial_dependence, clf, X, [{'foo': 'bar'}])
from __future__ import unicode_literals
__virtualname__ = 'cyg'
self.select_content_group_radio_button() select_option_by_text( self.q(css=self._bounded_selector(self.content_group_selector_css)), content_group )
CreditCourse.objects.create(course_key=course.id, enabled=True)
self.navigate_to_video()
for char in key: if ord(char) < 33 or ord(char) == 127: return False
self.assertIn(k, body_plain) self.assertIn(v, body_plain) self.assertIn(k, body_html) self.assertIn(v, body_html)
return False
_WINDOW_TYPES.update((v, v) for k, v in list(_WINDOW_TYPES.items())) _ADDITIONAL_CLUSTER_TYPES = set(("entity", "time"))
self._create_course_unit(subtitles=True) self.assertTrue(self.video.is_captions_visible())
analytics_patcher = patch('lms.djangoapps.verify_student.views.analytics') self.mock_tracker = analytics_patcher.start() self.addCleanup(analytics_patcher.stop)
used_column_names = [] errors = []
self.assertFalse(library_container.has_validation_not_configured_warning)
for key in log_format_types: if str(format_id) == log_format_types[key]: return key _LOG.warning('Unable to determine log format.') return None
cache = caches[DEFAULT_CACHE_ALIAS] self.assertIsNone(cache.default_timeout) self.assertIsNone(cache.get_backend_timeout())
latex_font_size = '11pt'
from __future__ import absolute_import
from __future__ import absolute_import
if len(document.children) == 1: if not isinstance(document.children[0], six.string_types): document = document.children[0] return document
self.dbm = dbm
self.assertEqual(list(iter_format_modules('de')), [default_mod])
self.assertNotIn(self.module_key, self.loader)
student_views.create_account(strategy.request) self.assert_json_failure_response_is_username_collision(student_views.create_account(strategy.request))
if self.depth == self.num_fields - 1:
from salt.ext.six import string_types, iteritems
'edx_proctoring',
self.find_css('.collection-name-input').first.fill(value)
for kernel in ('linear', 'poly', 'rbf'): clf = svm.SVC(kernel=kernel, gamma=2) clf.fit(X, Y)
frame = self.frame.copy() expected = self.frame.copy()
course = get_course(course_id)
from salt.modules import aliases from salt.exceptions import SaltInvocationError
management.call_command( 'loaddata', 'sequence_extra', ignore=True, verbosity=0, ) self.assertEqual(Animal.specimens.all()[0].name, 'Lion')
import pytz tz = pytz.timezone('US/Eastern') dt = tz.localize(datetime(2012, 1, 1))
self.course_info_page.visit() self.tab_nav.go_to_tab('Progress')
__virtualname__ = 'virtualenv'
'ENABLE_COURSE_DISCOVERY': False,
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.assertEqual(module.attempts, 1)
response = self.http_get(reverse(self.view), HTTP_AUTHORIZATION=auth_header) self.assertEqual(response.status_code, 200)
from __future__ import absolute_import
self.store.convert_to_draft(problem.location, self.user.id) problem = self.store.get_item(problem.location)
config_course_cohorts_legacy( course, discussions=[], cohorted=True, auto_cohort_groups=["OtherGroup"] )
inpaint_cost = 0.5 * inpaint_cost + 0.5 * new_inpaint_cost
from salt.utils.odict import OrderedDict from salt.modules import pillar as pillarmod
if not self.cpub and not self.connect_pub(timeout=wait): break
self.assertEqual(cities_within_state.count(), 1)
value = sp.sparse.linalg.svds(A, k=1, return_singular_vectors=False)
return store.db_connection.structures
return hasattr(self.__get_module(fullname), "__path__")
d = Entry.objects.get(pk=1).published pub_date = rfc2822_date(timezone.make_aware(d, TZ))
return _is_batch_all(batch, lambda x: isinstance(x, theano.gof.Variable))
return six.next(six.iterkeys(obj))
DATE_FORMAT = 'j F Y' TIME_FORMAT = 'g:i A' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'j M Y'
if not is_platform_windows(): formatted = index.format() expected = [str(index[0])] self.assertEqual(formatted, expected)
index = 0
return self.get_selector('.certificate-exception-container div.message')
'publish_port': int,
self.assertTrue(self._is_valid_key(key), msg="Failed for unicode character {0}".format(unicode_char))
self.INVALID_TOKEN = ("\n\nIt appears the LOGENTRIES_TOKEN " "parameter you entered is incorrect!\n\n") self.LINE_SEP = _to_unicode(r'\u2028')
from salt.version import __version__ return {'saltversion': __version__}
self.assertEqual(len(course_summaries), 1)
n_clusters_range = [2, 10, 50, 90] n_samples = 100 n_runs = 10
return SparsePanel(data)
import integration import salt.utils
cmd, arg = command.split(' ', 1)
return _click_edit(self, '.edit-button', '.xblock-studio_view', self._bounded_selector)
request = HttpRequest() request.session = self.client.session
self.assertIn(SplitTestDescriptor.user_partition_id.name, editable_metadata_fields)
order = [4, 1, -2] for df in [self.mixed_frame]:
joined = left.join(right, on='key', sort=False) self.assert_index_equal(joined.index, pd.Index(lrange(4)))
self._write(_pad_bytes("", 5)) self._prepare_data() self._write_data() self._write_value_labels() self._file.close()
textvalue = "pi + 1" if correct else str(random.randint(-2, 2)) self.problem_page.fill_answer(textvalue)
default_grade = '-1'
_save()
GitRepo._parse_commit_log = _parse_wrapper(args.base_commit)
with cf.option_context('display.unicode.east_asian_width', True):
self.assertDeserializeEqual('10:20:30', '"10:20:30"')
for axes in all_axes: axes.get_xaxis().set_visible(False) axes.get_yaxis().set_visible(False)
self.assertEqual(Article.objects.filter(pub_date__exact='2005-07-27 00:00:00').count(), 3)
clf = GradientBoostingClassifier(n_estimators=100, random_state=1, subsample=1.0) clf.fit(X, y) assert_raises(AttributeError, lambda: clf.oob_improvement_)
rnd = np.random.RandomState(37) X = rnd.uniform(size=(10, 4))
url(r'^list_financial_report_downloads$', 'instructor.views.api.list_financial_report_downloads', name="list_financial_report_downloads"),
if isinstance(data, ABCSparseArray): data = data.to_dense()
with self.assertRaises(TemplateSyntaxError): self.engine.get_template('filter-syntax05')
from salt.utils import etcd_util try: from urllib3.exceptions import ReadTimeoutError, MaxRetryError HAS_URLLIB3 = True except ImportError: HAS_URLLIB3 = False
client = self.login_client(api_client, user) self.send_patch(client, {}, expected_status=403 if user == "staff_user" else 404)
return (self._x.values * self._beta_matrix(lag=1)).sum(1)
git@github.com:user/repo.git: git.latest: - user: deployer - identity: /home/deployer/.ssh/id_rsa
if not __execute_cmd('config -g cfgUserAdmin -o ' 'cfgUserAdminEnable -i {0} 1'.format(uid)): delete_user(username, uid) return False
self.config['id'] = self.values.proxyid
import salt.utils from salt.exceptions import CommandExecutionError
if namespace in NAMESPACE_CHOICES.values(): if namespace == 'entrance_exams': return '{}.{}'.format(unicode(course_key), NAMESPACE_CHOICES['ENTRANCE_EXAM'])
classifier = OneVsRestClassifier(svm.SVC(kernel='linear', probability=True, random_state=random_state)) y_score = classifier.fit(X_train, y_train).decision_function(X_test)
] DATETIME_INPUT_FORMATS = [
X = variation.copy().T X /= X.std(axis=0) edge_model.fit(X)
PROCESSOR_MODULE = __import__( 'shoppingcart.processors.' + settings.CC_PROCESSOR_NAME, fromlist=[ 'render_purchase_form_html', 'process_postpay_callback', 'get_purchase_endpoint', 'get_signed_purchase_params', ] )
result = ts[ts.index[4]] expected = ts[4] self.assertEqual(result, expected)
course.tabs = [tab for tab in course.tabs if not tab.type == 'discussion'] modulestore().update_item(course, user_id)
nan_round_Series = Series({'col1': nan, 'col2': 1})
target_users = [user for user in self.users if user.email == email] assert len(target_users) == 1 return target_users[0]
return '%s' % formatter(x)
return dispatch_to_register()
exc_info_on_loglevel=logging.DEBUG
pass
obj = DatetimeIndex([]) self.assertTrue(pd.isnull(getattr(obj, op)()))
if isinstance(value, Morsel): dict.__setitem__(self, key, value) else: super(SimpleCookie, self).__setitem__(key, value)
tgt = ipaddress.ip_address(tgt)
cmd = ['/usr/sbin/pkgrm', '-n', '-a', adminfile] + targets out = __salt__['cmd.run_all'](cmd, python_shell=False, output_loglevel='trace')
dalnet = Network.objects.create(name="DALnet") formset = HostFormSet(data, instance=dalnet, save_as_new=True)
course = CourseFactory.create(course_image=u'things_stuff.jpg', static_asset_path="foo") self.assertEquals( course_image_url(course), '/static/foo/things_stuff.jpg' )
self._tilesize = tilesize
radio_button = self.q(css=self._bounded_selector(self.select_content_group_button_css)).results[0] radio_button.click() return radio_button.is_selected()
except ItemNotFoundError: return False
e = pd.Series([0, 1, 2, 3.5, 1]) tr, v = [3, 4], [3.5, True] check_replace(tr, v, e)
replaces = [] for migration in migrations_to_squash: if migration.replaces: replaces.extend(migration.replaces) else: replaces.append((migration.app_label, migration.name))
head_sha = None
page_number = link_info.split('>')[0].split('&page=')[1]
assert not isinstance(batch, list)
grains.update(_hw_data(grains))
casted = mn.astype('O') _check_cast(casted, 'object')
site_configuration = SiteConfigurationFactory.create( site=self.site, )
if self.contentstore: self.contentstore.close_connections() super(ModuleStoreReadBase, self).close_connections()
if i + 1 == len(course_keys): self.assertTrue(badge_class.get_for_user(user)) else: self.assertFalse(badge_class.get_for_user(user))
PathInfo = namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct')
pass
self.assertRaises(ValueError, cut, [], 2)
MODULE_DOCS = __doc__
time.sleep(1) if not os.path.isfile(dest): _unlock_cache(lk_fn) return False
suffixes=suffixes, fill_method=fill_method)
kernel32.CloseHandle(process_info.hProcess)
cr_ec2 = MockEC2() cr_ec2.tenant_id = tenantid cr_ec2.user_id = userid return cr_ec2
self.assertEqual( Article.objects.get(Q(headline__startswith='Hello'), Q(headline__contains='bye')).headline, 'Hello and goodbye' )
vm_['host'] = config.get_cloud_config_value( 'default_host', get_configured_provider(), __opts__, search_global=False )
#texinfo_appendices = []
'example_certificate': True,
attributes['source'] = attributes.pop(type_)
import salt.utils
final_exit = 1
version = IntegerField()
from salttesting.helpers import ( destructiveTest, requires_network, requires_salt_modules, ensure_in_syspath ) ensure_in_syspath('../../')
with self.assertNumQueries(2): embargo_api.message_url_path(self.course.id, "enrollment")
if self._cache is None: self._cache = import_module(self.compiler_module) return getattr(self._cache, compiler_name)
for field in self.fields.values(): if field.widget.needs_multipart_form: return True return False
(count, violations_list) = _get_pep8_violations()
idx = pd.Index(list('abc'))
if is_list_of_files(answer): new_answers[answer_id] = [f.name for f in answer] else: new_answers[answer_id] = answers[answer_id]
return phone2numeric(value)
self.assertIn( 'Invalid value passed for arch', self.run_function('system.set_boot_arch', ['spongebob']))
assert_raises(ValueError, chi2_kernel, [[0, -1]]) assert_raises(ValueError, chi2_kernel, [[0, -1]], [[-1, -1]]) assert_raises(ValueError, chi2_kernel, [[0, 1]], [[-1, -1]])
items = self._latest_history()['items'] self.assertItemsEqual(items, expected_items)
block_structure_result = xblock_key in block_structure has_access_result = bool(has_access(user, 'load', self.get_block(i), course_key=self.course.id))
with mock_create_refund(status=200, response=[1, 2, 3]): self.send_signal() self.assertTrue(mock_send_notification.called)
from __future__ import absolute_import import optparse import pprint
assert_frame_equal(recons, newdf, check_names=False)
self._update_no_improvement_count(early_stopping, X_val, y_val)
return self.descriptor.validate()
boxes = self.color or self._boxes_c whiskers = self.color or self._whiskers_c medians = self.color or self._medians_c caps = self.color or self._caps_c
_builtin_isinstance = isinstance
from pylearn2.utils import serial from pylearn2.utils.logger import ( CustomStreamHandler, CustomFormatter, restore_defaults )
from django.http import HttpResponse from django.template.response import TemplateResponse
config = models.CourseTalkWidgetConfiguration.current() config.enabled = enabled config.platform_key = self.PLATFORM_KEY config.save()
return self.get_selector('div.white-listed-students table tr:last-child td')
if not __opts__.get('state_verbose', False) and \ ret['result'] and not schanged: continue
ax = ts_irregular[:5].plot() ts_irregular[5:].plot(ax=ax)
from __future__ import absolute_import
return {}
entry.save_now() return task_progress
self.TA_role_2.inherit_permissions(self.TA_role)
self._auto_auth({'username': 'test', 'course_id': course_id})
enetcv_constrained = ElasticNetCV(n_alphas=3, eps=1e-1, max_iter=max_iter, cv=2, positive=True, n_jobs=1) enetcv_constrained.fit(X, y) assert_true(min(enetcv_constrained.coef_) >= 0)
X, y = check_X_y(X, y, accept_sparse=("csr", "csc"), multi_output=True, y_numeric=True)
self.assertTrue(all(isinstance(resi, t) for resi in res))
old = list_pkgs()
import psutil
res1 = sql.read_sql_query("select * from test_chunksize", self.conn)
return lambda x: isinstance(x.value, t)
assert V is orig_V assert drop_mask is orig_drop_mask
css_classes.append('xmodule_display')
data = '\n hello\nworld\n' result = self.read_csv(StringIO(data), header=None) self.assertEqual(len(result), 2)
if __PLATFORM.startswith('win'): ROOT_DIR = r'c:\salt' else: ROOT_DIR = '/'
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
if is_library: role_hierarchy = (CourseInstructorRole, CourseStaffRole, LibraryUserRole) else: role_hierarchy = (CourseInstructorRole, CourseStaffRole)
if (len(labels) == 1 and isinstance(self.obj[labels[0]].axes[0], MultiIndex)): item = labels[0] obj = self.obj[item] index = obj.index idx = indexer[:info_axis][0]
if not key: query_params['recurse'] = 'True' function = 'kv/' else: function = 'kv/{0}'.format(key)
i = date_range('1/1/2011', periods=5, freq='10s', tz='US/Eastern')
rfe = RFE(estimator=self.estimator, n_features_to_select=n_features_to_select, step=self.step)
host[host.index(o_hostname.split('.')[0])] = hostname.split('.')[0]
super(BinomialSampler, self).__init__(0, *args, **kwargs)
frame = DataFrame(index=np.arange(1000))
'to-port',
self.update_masquerade(role='student', user_name=self.student_user.username) content = self.get_course_info_page().content self.assertIn("OOGIE BLOOGIE", content)
#
X = check_array(X, accept_sparse=['csr', 'csc']) n_samples = X.shape[0]
for handler in handlers: retval = handler.upload_complete() if retval: break
params.update(default_flow_style=False)
result = self.arr[-12:] exp = SparseArray(self.arr) tm.assert_sp_array_equal(result, exp)
os.system('rm source/html-styling.html') os.system('cd build; rm -f html/pandas.zip;')
from salt.states import postgres_extension
#if not sig_valid:
import salt.ext.six as six
return self.page_num < self.num_pages
figure.subplots_adjust(bottom=0.05)
from salt.modules import win_disk
])
if max_leaf_nodes < 0: builder = DepthFirstTreeBuilder(splitter, min_samples_split, min_samples_leaf, min_weight_leaf, max_depth) else: builder = BestFirstTreeBuilder(splitter, min_samples_split, min_samples_leaf, min_weight_leaf, max_depth, max_leaf_nodes)
if bulk_write_record.active: bulk_write_record.set_structure_for_branch(course_key.branch, new_structure)
result = df.iloc[:, slice(4, 8)] expected = df.ix[:, 8:14] assert_frame_equal(result, expected)
self._corrupt_switch = True
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
module = CapaFactory.create(max_attempts=0, done=False) self.assertTrue(module.should_show_save_button())
self.assertFalse(empty_forms[0].is_bound) self.assertFalse(empty_forms[1].is_bound)
X, y_bin = iris.data, iris.target.copy() y_bin[y_bin == 2] = 0
all_modes, unexpired_modes = CourseMode.all_and_unexpired_modes_for_courses([course_key])
return cls.__name__
self.assertEqual(own_metadata(course1_item), own_metadata(course2_item))
df = DataFrame(np.random.randn(10, 4), index=date_range('1/1/2000', periods=10))
if self.cert_status is not None: return { 'status': self.cert_status, 'can_unenroll': self.cert_status not in DISABLE_UNENROLL_CERT_STATES } else: return {}
self.payment_and_verification_flow.proceed_to_payment()
response = self._credit_provider_callback( request_uuid, 'approved', provider_id=other_provider_id, secret_key=other_provider_secret_key, keys={other_provider_id: other_provider_secret_key} )
os.dup2(stdout_child_fd, pty.STDIN_FILENO) os.dup2(stdout_child_fd, pty.STDOUT_FILENO) os.dup2(stderr_child_fd, pty.STDERR_FILENO)
log = logger.getLogger(__name__)
'acceptance_wait_time_max': float,
lookup_name = 'week_day'
if not self.names: raise EmptyDataError( "No columns to parse from file")
alpha = 1.5 beta = 0.75
return remote_key.split(u"___", 1)[1]
from __future__ import unicode_literals
return None
self.crypt = kwargs.get('crypt', 'aes')
if content.get('group_id') is not None: content['group_name'] = get_cohort_by_id(course_key, content.get('group_id')).name
aggs = {'D': 'sum', 'E': 'mean'}
batch_inertia, centers_squared_diff = _mini_batch_step( X_valid, x_squared_norms[validation_indices], cluster_centers, counts, old_center_buffer, False, distances=None, verbose=self.verbose)
si = _get_si()
all_assets = SortedAssetList(iterable=course_assets.get(asset_type, []), key=key_func)
with super(TestNavigation, cls).setUpClassAndTestData(): cls.test_course = CourseFactory.create() cls.test_course_proctored = CourseFactory.create() cls.course = CourseFactory.create()
from salt.states import pyenv
import win32serviceutil import win32service import win32event import win32api
clf = svm.SVC(kernel=my_kernel) clf.fit(X, Y)
value = True if value == "true" else False
m.save(using=self.using) num_saved += 1 if verbose: stream.write('%s: %s\n' % ('Updated' if is_update else 'Saved', m))
msg_format = _("Status: {action} {succeeded} of {attempted}")
__grains__ = {}
from __future__ import unicode_literals
from __future__ import absolute_import
send_password = False
del channel
vmcfg = {} kwargs = salt.utils.clean_kwargs(**kwargs) for k, v in kwargs.iteritems(): vmcfg[k] = v
with ctx: self.assertEqual(self.cf.get_option(option_name), context_value)
([], []),
from __future__ import absolute_import import time import logging import re import sys import shlex
import salt.utils import salt.utils.fsutils from salt.exceptions import CommandExecutionError from salt.exceptions import get_error_message as _get_error_message
from salt.modules import scsi import os import salt.utils import copy
result = values.view('i8') == tslib.iNaT
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
rng = date_range('6/1/2000', '6/15/2000', freq='T') result = rng[0:0].intersection(rng) self.assertEqual(len(result), 0)
response = requests.post(self.launch_uri, data=self.payload) self.assertIn('Wrong LTI signature', response.content)
with mock.patch('openedx.core.lib.courses.create_course_image_thumbnail') as patched_create_thumbnail: course_overview = CourseOverview.get_from_id(course_overview.id) patched_create_thumbnail.assert_not_called()
pkg_params = __salt__['pkg_resource.parse_targets'](name, pkgs, **kwargs)[0]
from __future__ import unicode_literals
try: import docker import docker.utils HAS_DOCKER_PY = True except ImportError: HAS_DOCKER_PY = False
if six.PY2: import urlparse else: import urllib.parse as urlparse
self.assertEqual( utils.get_discussion_category_map(self.course, self.instructor, cohorted_if_in_list, exclude_unstarted), expected )
return subnet
key = make_key(args, kwds, typed)
import salt.utils import salt.utils.templates import salt.utils.validate.net import salt.ext.six as six
n_samples = 200 outliers_fraction = 0.25 clusters_separation = [0, 1, 2]
self.ha_cmd = ha_cmd self.objectify = objectify return True
language = models.CharField(blank=True, max_length=255, db_index=True) location = models.CharField(blank=True, max_length=255, db_index=True)
meta = set(self._internal_names + self._metadata) for k in list(meta): if k in state: v = state[k] object.__setattr__(self, k, v)
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file)
out, err = self.run_manage(['check']) self.assertNoOutput(err) self.assertOutput(out, "System check identified no issues (0 silenced).")
y_true = np.zeros((1, n_labels)) assert_equal(lrap_score(y_true, y_score), 1.) assert_equal(lrap_score(y_true, y_score_ties), 1.)
train_data = iter(ALL_FOOD_DOCS[:-1]) test_data = [ALL_FOOD_DOCS[-1]] n_train = len(ALL_FOOD_DOCS) - 1
self.assertTrue(filecmp.cmp(path_in, path_test))
exists = conn.describe_stacks(name) log.debug('Stack {0} exists.'.format(name)) return True
try: raise Exception except Exception: return technical_500_response(request, *sys.exc_info())
import logging import re
X_train = X_train.astype(np.float64) X_test = X_test.astype(np.float64) normalize(X_train, copy=False) normalize(X_test, copy=False)
get_disk = show_disk
if self._xml_string is not None: return self._xml_string return etree.tostring(self._xml_node)
has_case_insensitive_like = True
self.assertIn("Password Reset Email Sent", self.login_page.wait_for_success())
data.append(name) continue
course_id = CourseKeyField(max_length=255, db_index=True, verbose_name=_("Course"))
coerce = True if any([isinstance(x, Timestamp) for x in values]) else False return (Series(values, index=key_index, name=self.name) ._convert(datetime=True, coerce=coerce))
urlpatterns += patterns( '',
pillar.client.get_state = MagicMock( return_value={ 'dest': '/path/to/pillar/files/foo.sls', 'source': 'salt://foo.sls' } )
raise NotImplementedError(str(type(self))+" does not implement plot.")
if 'master_list' not in opts: opts['master_list'] = local_masters
filt = g.filter(lambda x: x['A'].sum() == 2) assert_frame_equal(filt, df.iloc[[0, 1]])
_delete = self.run_function('beacons.delete', ['ps']) self.assertTrue(_delete['result'])
self._test_dir = tempfile.mkdtemp(prefix='salt-testdaemon-')
self.assertEqual( 'student', access.get_user_role(self.anonymous_user, self.course_key) )
command = command_name command_name = command.__class__.__module__.split('.')[-1]
if n_features > 1: X = np.hstack([X, np.random.randn(n_samples, n_features - 1)]) return X, y
assert_array_almost_equal(x_rotations_sign_flip, x_weights_sign_flip) assert_array_almost_equal(np.abs(x_rotations_sign_flip), 1, 4) assert_array_almost_equal(np.abs(x_weights_sign_flip), 1, 4)
data_source = DataSource(data_source)
MEDIA_ROOT = ENV_TOKENS.get('MEDIA_ROOT', MEDIA_ROOT) MEDIA_URL = ENV_TOKENS.get('MEDIA_URL', MEDIA_URL)
self.assertEqual(Article.objects.filter(submitted_from__contains='32').count(), 0)
self.assertEqual(str(connections.query).count(" JOIN "), 6)
self.current_view = self.MAPPING["search"](self.browser) if text.strip(): self.current_view.wait_for_page()
if max_iter is None: max_iter = 1000
clf = svm.SVC(kernel='linear', probability=True, random_state=0) probas_pred = clf.fit(X[:half], y[:half]).predict_proba(X[half:])
base = PeriodIndex(['2011-01-05', '2011-01-04', '2011-01-02', '2011-01-03'], freq='D', name='idx')
elif np.array(value).ndim == 2:
FIRST_DAY_OF_WEEK = 0
nanptp)
return self.q(css=TEAMS_HEADER_CSS + ' .page-description')[0].text
self.store.publish(self.course.location, self.user_id)
from openpyxl.workbook import Workbook
return ip_str
rng = np.random.RandomState(0)
self.assertEqual(len(formset.forms), 4)
return self._ordered
task_folder = task_service.GetFolder(location)
if not changes.get('purge_desired'): changes = changes['installed']
if not isinstance(data, SparseArray): data = SparseArray(data, sparse_index=sparse_index, fill_value=fill_value, dtype=dtype, copy=copy)
net4_url = 'http://download.microsoft.com/download/1/B/E/1BE39E79-7E39-46A3-96FF-047F95396215/dotNetFx40_Full_setup.exe'
'log_file': str,
if out['result'] is None: ret['result'] = False ret['comment'] = out['comment'] return ret
ops = ['lt', 'le', 'gt', 'ge', 'eq', 'ne'] for op in ops: val = s[5]
def _get_ptr(self): if self._ptr: return self._ptr else: raise GDALException('GDAL %s pointer no longer valid.' % self.__class__.__name__)
self.assertRaises(Exception, frame.__setitem__, 'foo', np.random.randn(N - 1))
p = Place.objects.get(pk=self.p1.pk) r = p.restaurant with self.assertNumQueries(0): self.assertEqual(r.place, p)
r = StreamingHttpResponse(iter(['hello', 'world'])) self.assertEqual( six.binary_type(r), b'Content-Type: text/html; charset=utf-8')
if not files: files = ["`{}`".format(coffeescript_files())] sh(cmd( "node_modules/.bin/coffee", "--compile", *files ))
obj = UTC.localize(obj)
self.lcp = self.new_lcp(None) self.set_state_from_lcp()
self.navigate_to_video()
certificate_template_asset.asset = SimpleUploadedFile('picture2.jpg', 'file contents') certificate_template_asset.save()
with self.assertRaisesMessage(TypeError, "'full_name' is an invalid keyword argument"): Person(full_name='Paul McCartney')
response.data["current_page"] = self.page.number
import salt.utils
idx1 = pd.DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], tz=tz) self.assertTrue(idx1.is_monotonic)
return make_immutable_fields_list( "local_concrete_fields", (f for f in self.local_fields if f.concrete) )
if instance.pk is None: raise ValueError("%r instance needs to have a primary key value before " "a many-to-many relationship can be used." % instance.__class__.__name__)
epoch_num = 15 termination_criterion = EpochCounter(epoch_num)
from __future__ import unicode_literals
self.fs.delete(location_or_id)
(new_options, __) = parser.parse_args([])
if rbm.nvis < rbm.nhid: width = rbm.nvis type = 'vis' else: width = rbm.nhid type = 'hid'
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
return len(self.children)
FEATURES['ENABLE_DISCUSSION_SERVICE'] = False
return {'obj': kwargs.get('item'), 'site': kwargs.get('site')}
NETWORK_DEVICE['UP'] = True
self.assertEqual(len(self.video.q(css='video')), 1)
print('Loading model...') model = serial.load(model_path) model.set_batch_size(m) return model
self.assertEqual( df.set_index(['a', 'b']).to_csv(decimal="^"), expected)
import salt.utils.gitfs from salt.exceptions import FileserverConfigError
from django.core.cache import cache from django.test.utils import override_settings from lang_pref import LANGUAGE_KEY
if self.is_unique: return self.get_indexer(target, **kwargs) indexer, _ = self.get_indexer_non_unique(target, **kwargs) return indexer
def index(self, request, extra_context=None): return super(Admin2, self).index(request, {'foo': '*bar*'})
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'softlayer', vm_['profile'], vm_=vm_) is False: return False
self.assertTrue(self.store.has_item(course.id.make_usage_key('html', "multi_parent_html")))
return self.q(css='article.content-primary').visible
self.assertNotIn('Search for a course', response.content) self.assertNotIn('<aside aria-label="Refine Your Search" class="search-facets phone-menu">', response.content)
return True
assert_array_equal(lfw_people.target, [2, 0, 1, 0, 2, 0, 2, 1, 1, 2])
LASTCALL = int(time.mktime(datetime.datetime.now().timetuple()))
wtf_numpy = np.zeros((n_classes,)) for i in xrange(n_classes): wtf_numpy[i] = probs[i] probs = wtf_numpy
theano_rng = MRG_RandomStreams(2013*5*4) cost_weights = theano_rng.normal(size=output_conv2d.shape, dtype=output_conv2d.dtype) cost = (cost_weights * output).sum()
tsne = TSNE(metric="precomputed") assert_raises_regexp(ValueError, ".* square distance matrix", tsne.fit_transform, np.array([[0.0], [1.0]]))
url = reverse( 'info', kwargs={ 'course_id': unicode(self.course.id), } ) return self.client.get(url)
[self.shape[i] for i in (2, 0, 1)])
obj_view.Destroy()
return module.sort_key or module.discussion_target
return (os.access(exe, os.X_OK) and (os.path.isfile(exe) or os.path.islink(exe)))
import salt.ext.six as six
from __future__ import absolute_import
if 'sysctl.default_config' in __salt__: config = __salt__['sysctl.default_config']() else: config = '/etc/sysctl.conf'
for mode in ["honor", "verified"]: CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
subarr = tools._to_datetime(data, box=False, utc=True)
if 'set_{0}'.format(collection) not in vmconfig['changed']: vmconfig['changed']['set_{0}'.format(collection)] = {}
assert sreq.send_auto({'load': 'foo'}) == {'load': 'foo', 'enc': 'clear'}
self.assertContains( response, '<div class="js-inline-admin-formset inline-group" id="question_set-group"' ) self.assertContains(response, '<p>Callable in QuestionInline</p>')
try: import memcache HAS_MEMCACHE = True except ImportError: HAS_MEMCACHE = False
class m2msimple(models.Model): id2 = models.ForeignKey(ModelWithLongField, models.CASCADE)
result = Timestamp(result) self.assertEqual(result.value, expected_tz) self.assertEqual(tslib.pydt_to_i8(result), expected_tz)
user_groups = _get_user_partition_groups( self.course.id, [self.split_test_user_partition], self.user ) self.assertEquals(len(user_groups), 1)
from __future__ import absolute_import
self.generated_certificate.invalidate()
header = 'HTTP_AUTHUSER'
response_kwargs.setdefault('content_type', self.content_type) return self.response_class( request=self.request, template=self.get_template_names(), context=context, using=self.template_engine, **response_kwargs )
return "no_params - Expected result"
instance_map = weakref.WeakKeyDictionary()
@test_parallel(num_threads=2) def pg2(): f()
raise NotImplementedError(str(type(self)) + " does not implement " + "get_batch")
os.chdir(TEST_DIR)
self.json_kwargs['separators'] = (',', ': ')
pass
result = sparse.loc[orig % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
return
form = self.get_form(expected_valid=True) self.assertDictEqual(form.cleaned_data, self.cleaned_data)
log_format = '[%(name)-15s] %(message)s' handler = TestsLoggingHandler(format=log_format) log.addHandler(handler)
return User.objects.filter( courseenrollment__course_id=course_id )
if name in list_tasks(location):
import yaml import salt.ext.six as six from salt.ext.six.moves import range log = logging.getLogger(__name__)
if context is None: context = self.serializer_context return BlockSerializer( context['block_structure'], many=True, context=context, )
return self.sm_ols.fittedvalues
verification_status, verification_msg = SoftwareSecurePhotoVerification.user_status(user)
if res['retcode'] != 0: ret[name] = res['stderr'] if 'stderr' in res else res['stdout'] else: ret[name] = 'created'
err = ''
rng = np.random.RandomState(0)
self.assertNotContains(response, '<h2>Inner2s</h2>') self.assertNotContains(response, 'Add another Inner2') self.assertNotContains(response, 'id="id_inner2_set-TOTAL_FORMS"')
with patch('student.models.cc.User.save'): uname = 'student' email = 'student@edx.org'
if iface_type not in ['slave', 'source']: return __salt__['cmd.run'](['ifdown', iface]) return None
from salt.modules import etcd_mod from salt.utils import etcd_util
from __future__ import absolute_import
self.streaming_content = streaming_content
self._verify_response(200)
collapsed = ipaddress.collapse_addresses([ip1, ip2]) self.assertEqual(list(collapsed), [ipaddress.IPv4Network('1.1.0.0/23')])
score_bucket = "incorrect" if grade > 0 and grade < max_grade: score_bucket = "partial" elif grade == max_grade: score_bucket = "correct" return score_bucket
msg_p_elements = msg_div_element.findall('p') self.assertEqual(msg_p_elements[0].tag, "p") self.assertEqual(msg_p_elements[0].text, "Test message 1")
from django.db import models from django.utils.encoding import python_2_unicode_compatible
return list(whitelist_countries - blacklist_countries)
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
_, s, _ = linalg.svd(X, full_matrices=False)
lush_magic = { 507333717: 'uint8', 507333716: 'int32', 507333713: 'float32', 507333715: 'float64' }
from __future__ import absolute_import import os
pass
if exc.errno != errno.EEXIST: raise else: ret['comment'] = 'File {0} exists and cannot be overwritten'.format(name)
log.info( 'Since parallel deployment is in use, ssh console output ' 'is disabled. All ssh output will be logged though' ) opts['display_ssh_output'] = False
ret = self.run_function('virtualenv.create', [venv_dir]) self.assertEqual(ret['retcode'], 0)
if response.status_code != 404: return response
if shuffle: X, y = util_shuffle(X, y, random_state=generator)
self.non_index_axes = [] self.data_columns = []
return self.data.isoformat()
msg = "No merge commit for {commit} in {branch}!".format( commit=commit, branch=branch, ) raise DoesNotExist(msg, commit, branch)
return self.page.num_pages
from __future__ import absolute_import
draft_preferred = 'rev-opt-draft-preferred'
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
try: face = sp.face(gray=True) except AttributeError: from scipy import misc face = misc.face(gray=True)
self.current_video_display_name = video_display_name
return NOT_PROVIDED
geo_obj = self._klass(geo_value) setattr(instance, self._field.attname, geo_obj)
original_image_shape = (96, 96)
return self._value.values.dtype
return staticfiles_storage.url(microsite.get_value('favicon_path', default))
X = X[:, np.newaxis]
file_root = os.path.abspath(self.options.file_root) self.config['file_roots'] = {'base': _expand_glob_path([file_root])}
continue
man_pages = [( 'ref/django-admin', 'django-admin', 'Utility script for the Django Web framework', ['Django Software Foundation'], 1 ), ]
output = self.engine.render_to_string('filter-syntax11', {"var": None, "var2": "happy"}) self.assertEqual(output, 'happy')
pyenv.__grains__ = {} pyenv.__salt__ = {}
if isinstance(obj, cls): err_msg = "{0}Input must not be type {1}" raise AssertionError(err_msg.format(msg, cls))
return { "cc_requester": User(id=requester_id), "is_requester_privileged": is_requester_privileged, "course": CourseFactory(cohort_config={"cohorted": is_cohorted}), "thread": thread, }
return self._reindex_axes(axes, level, limit, tolerance, method, fill_value, copy).__finalize__(self)
if parser not in _parsers: raise KeyError('Invalid parser {0!r} passed, valid parsers are' ' {1}'.format(parser, _parsers.keys()))
rm_ = ind
self._submit_photos( face_image=self.IMAGE_DATA, photo_id_image=self.IMAGE_DATA, ) attempt = SoftwareSecurePhotoVerification.objects.get(user=self.user) attempt.photo_id_key = "dummy_photo_id_key" attempt.save()
self.create_programs_config(enable_studio_tab=False) response = self.client.get(self.path) self.assertEqual(response.status_code, 404)
try: grad_not_implemented = theano.gradient.grad_not_implemented except: def grad_not_implemented(op, idx, ipt): return None
self.client.logout()
assert self.get_dbm() is None self.dbm = dbm
layer_to_state = model.make_layer_to_state(m) vis_sample = layer_to_state[model.visible_layer]
__grains__ = grains
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
qs = Employee.objects.filter( company_ceo_set__num_chairs=F('company_ceo_set__num_employees')) self.assertEqual(str(qs.query).count('JOIN'), 1)
return super(MultiIndex, self).slice_locs(start, end, step, kind=kind)
YEAR_MONTH_FORMAT = 'F Y'
from __future__ import absolute_import import json
use_reloader = options['use_reloader'] if use_reloader: autoreload.main(self.inner_run, None, options) else: self.inner_run(None, **options)
obj = obj.astimezone(UTC)
result = func(self.data.loc[subset], **kwargs)
return gid
__virtualname__ = 'group'
model = SelectFromModel(clf, prefit=False) model.fit(data, y) assert_array_equal(model.transform(data), X_transform)
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, course_key): self.assertTrue(self.store.has_item(problem_location)) assertProblemNameEquals(problem_original_name)
course_key, _ = strip_ccx(course_key) return self._modulestore.delete_course(course_key, user_id)
AVAIL_SVR_DIRS = []
self.course.save() self.store.update_item(self.course, self.user.id)
return self.q(css='.wrapper-status').visible
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
with self.assertNumQueries(0): with self.assertRaises(UndergroundBar.DoesNotExist): p.undergroundbar
return self.background_task_history_button.click()
uploaded_file = request.FILES['file']
import salt.utils.gitfs import salt.utils.dictupdate from salt.exceptions import FileserverConfigError from salt.pillar import Pillar
save_button_css = '%s %s' % (self.discussion_form_selectors[key], '.action-save') self.q(css=self._bounded_selector(save_button_css)).first.click()
response = self.client.get(test_url) self.assertIn(str(self.cert.verify_uuid), response.content)
from salt.states import lxc import salt.utils
activate('de')
microsite.enable_microsites(log)
return None
self.assertEqual(params['signature'], self._signature(params))
_check_config_exists()
n_samples = 12 n_features = 2 n_estimators = 5 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features)
self.assertRaises(ValueError, f, self.series, axis=1)
rgr_lasso = Lasso(alpha=0.001) rgr_lasso.fit(proj_operator, proj.ravel()) rec_l1 = rgr_lasso.coef_.reshape(l, l)
idx = self._holder(np.arange(5, dtype='int64'))
class UserRegistration(Form): username = CharField(max_length=10, initial='django') password = CharField(widget=PasswordInput)
return ImageFile(open(TEST_DATA_ROOT / 'badges' / name + '.png'))
if ip_str.count('::') > 1: return False
choice = 0 if correct else 1 input_value = "8" if correct else "5" self._select_choice(choice) self._fill_input_text(input_value, choice)
return (self.close_date is not None and datetime.datetime.now(UTC()) > self.close_date)
self.notes_page.go_to_page(2) self._verify_pagination_info( notes_count_on_current_page=1, header_text='Showing 26-26 out of 26 total', previous_button_enabled=True, next_button_enabled=False, current_page_number=2, total_pages=2 )
statobj = inputtypes.Status('queued', func) self.assertEqual(statobj.display_name, u'PROCESSING')
LogoutPage(self.browser).visit() LmsAutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id).visit()
local_name = os.path.join(self.dataset_local_dir, os.path.relpath(remote_name, self.dataset_remote_dir))
return self.replace('<', '<<').replace('>', '>>')
return self._topology(capi.geos_symdifference(self.ptr, other.ptr))
data_csv = pd.read_csv(self.file03.replace(".xpt", ".csv"))
clf_samme.algorithm = "SAMME.R" assert_array_less(0, np.abs(clf_samme.predict_proba(iris.data) - prob_samme))
max_row = np.sqrt(n_plots) max_row = np.round(max_row) max_row = int(max_row)
if refresh: refresh_db()
w = rng.randn(num_features)
self.assertNotEqual(v['Name'], name)
copy = copy if copy is not None else self.copy X = check_array(X, accept_sparse='csr') return normalize(X, norm=self.norm, axis=1, copy=copy)
pnt_wo_srid = Point(1, 1) pnt_wo_srid.srid = pnt_wo_srid.srid
m = 15 monitoring_dataset = get_topological_dataset(rng, rows, cols, channels, m)
if "memorySize" in machine: del machine["memorySize"] return machine
options['no_color'] = True return super(Command, self).execute(*args, **options)
import re import copy
try: encoding = locale.getdefaultlocale()[1] or 'ascii' codecs.lookup(encoding) except Exception: encoding = 'ascii' return encoding
return func(self)
useradd.__grains__ = {} useradd.__salt__ = {} useradd.__context__ = {}
pre_requisite_courses = get_prerequisite_courses_display(course)
class ReferencedByParent(models.Model): name = models.CharField(max_length=20, unique=True)
for idxr in [lambda x: x.ix, lambda x: x, lambda x: x.iloc]:
set(self.old_unmanaged_keys).intersection(self.new_model_keys)
'ENTRANCE_EXAMS': False,
get_space = lambda i: (model.aes[i].get_input_space() if i == 0 else model.aes[i - 1].get_output_space())
df = pd.DataFrame({'A': [1, 2, 1], 'B': [1, 2, 3]}) g = df.groupby('A')
old_data = data.copy() for _ in range(4): data = data.unstack() assert_frame_equal(old_data, data)
if self.ndim == 1: blocks = np.array([], dtype=self.array_dtype) else: blocks = [] return self.__class__(blocks, axes)
self._assert_survey_redirect(self.course)
import salt.utils
'utils_dirs': list,
self.assert_cookie_data_equal(safe_cookie_data_1, safe_cookie_data_2)
cp = s.copy() cp.ix[3:11] = 0 self.assertTrue((cp.ix[3:11] == 0).values.all())
self.addCleanup(ModuleIsolation().clean_up)
for field_name in remove_fields: self.fields.pop(field_name)
salt '*' win_update.download_updates categories="['Critical Updates']"
response = self.client.get('/lastmod-sitemaps/descending.xml') self.assertEqual(response['Last-Modified'], 'Sat, 20 Apr 2013 05:00:00 GMT')
self.new_connection = connection.copy()
u = linalg.solve_triangular(self.G.T, np.dot(self.Ft.T, rt) - f.T, lower=True)
if xblock.category == 'chapter': return None
self.browser.refresh() profile_page.wait_for_page() self.verify_profile_page_is_public(profile_page)
indptr_3 = X_sparse_unpruned.indptr[3] indptr_4 = X_sparse_unpruned.indptr[4] X_sparse_unpruned.data[indptr_3:indptr_4] = 0.0
s = Series(rng) s[1] = np.nan
return getattr(request, '_messages', [])
block_type = 'vertical' for idx in xrange(0, 8): block_id = _make_block_id(block_type, idx) self.all_verticals.append((block_type, block_id))
response = organizations_helpers.get_organization_by_short_name('non_existing') self.assertIsNone(response)
w = clf.coef_[0] a = -w[0] / w[1]
from __future__ import absolute_import import os import string import logging
#epub_identifier = ''
FEATURES['EMBARGO'] = True
if app_list_value is not None: if model not in app_list_value: app_list_value.append(model)
middleware.process_request(request) request.session['hello'] = 'world'
figsize = self.cell_width * hcells, self.cell_height * vcells
if values.dtype.fields is not None: values = values[self.cname]
self.assertEqual(response_dict, self.expected_response)
formulahint_element = etree.SubElement(hintgroup_element, "formulahint")
students = self._create_students(10)
task_type = 'detailed_enrollment_report' task_class = enrollment_report_features_csv task_input = {} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
#templates_path.append('source/_templates')
return self._nobs_raw >= max(self._min_periods, len(self._x.columns) + 1)
try: import salt.utils.psutil_compat as psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
import salt.utils
tmp.sort(cmp=lambda x, y: cmp(x.lstrip('-'), y.lstrip('-'))) return tmp
return [tuple(value) for value in values]
if not (isinstance(key, tuple) and isinstance(labels, MultiIndex)):
xpath = "//option[@selected='true']/b" self.assert_has_text(xml, xpath, 'Option 2')
return frozenset(child.data for child in self.library_fixture.children)
ts = Timestamp('2012-1-1') _assert_less(ts, ts + Second()) _assert_less(ts, ts + Milli()) _assert_less(ts, ts + Micro(50))
defaults = {} if obj is None: defaults['form'] = self.add_form defaults.update(kwargs) return super(UserAdmin, self).get_form(request, obj, **defaults)
from __future__ import absolute_import import os import random import string
HAS_RANGE = False try: import seco.range HAS_RANGE = True except ImportError: log.error('Unable to load range library')
__virtualname__ = 'pkg'
self.update_masquerade(role='staff') self.verify_staff_debug_present(True)
if not self.infer_axes(): return False
expected = [fill_value.ordinal] * 2 + list(values[2:]) expected = klass(ordinal=expected, freq=o.freq) o = klass(ordinal=values, freq=o.freq)
return u"{} : {}".format(self.course_id.to_deprecated_string(), self.annotation)
cls.coach = AdminFactory.create()
return signature[start:end] + 'x' * (end - start) + signature[end:]
def utcoffset(self, _dt): return None
answer_objs = SurveyAnswer.objects.filter( user=self.student, form=self.survey )
right = other._reindex_with_indexers({0: [join_index, iridx], 1: [join_columns, cridx]}, copy=copy, fill_value=fill_value, allow_dups=True)
attrs['class'] = 'vManyToManyRawIdAdminField'
continue
block = self.store.get_item(block_location) block.group_access = access_dict self.store.update_item(block, 1)
__virtualname__ = 'foreman'
GDAL_PIXEL_TYPES = {
cat = pd.Categorical([1, 2, 3], ordered=True)
@python_2_unicode_compatible class Person(models.Model): name = models.CharField(max_length=128)
hasher = RandomTreesEmbedding(n_estimators=10, random_state=0, max_depth=3) X_transformed = hasher.fit_transform(X)
current_pred = _samme_proba(estimator, n_classes, X)
assert_array_almost_equal(np.diag(K), np.ones(5))
labname = self._encode(_pad_bytes(self.labname[:32], 33)) bio.write(labname)
exc_info_on_loglevel=logging.DEBUG
wait_for_present(css_selector=css, timeout=wait_time) return world.browser.find_by_css(css)
template_attrs = ( 'template_name', 'context_data', '_post_render_callbacks', '_request', ) for attr in template_attrs: self.assertFalse(hasattr(unpickled_response, attr))
if strategy == "mean": if missing_values != 0: n_non_missing = n_zeros_axis
del context_mock.context self.assertIn("this module is temporarily unavailable", render_to_string("courseware/error-message.html", None))
call_task('pavelib.quality.run_safelint', options={"thresholds": '{"total": 5}'})
if timezone.is_aware(value): raise ValueError("Oracle backend does not support timezone-aware times.")
return self._estimate_log_prob(X) + self._estimate_log_weights()
f = lambda x: x.sort_values('b', inplace=True) _check_f(data.copy(), f)
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO['username'])
if problem_type in ("radio_text", "checkbox_text"): selector_template = "input#{}_2_{input}" else: selector_template = "input#input_{}_2_{input}"
def arg_byref(args, offset=-1): "Returns the pointer argument's by-reference value." return args[offset]._obj.value
vsan_config = vim.vsan.host.ConfigInfo() vsan_config.enabled = True
image_index[0] = min(image_index[0], len(row_indices))
response = self._regenerate( course_key=self.CERT_COURSE_KEY, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 400)
break
r = RasterModel.objects.create(rast=None) r.refresh_from_db() self.assertIsNone(r.rast)
if link_map[name] is not None: return reverse(link_map[name])
task = object_ref.Clone(folder_ref, vm_name, clone_spec) salt.utils.vmware.wait_for_task(task, vm_name, 'clone', 5, 'info')
result = store.select('df', where=where) tm.assert_frame_equal(result, expected)
lm = LayerMapping(Point2D, vrt_file, point_mapping, transform=False) lm.save() self.assertEqual(3, Point2D.objects.count())
self.assertRaises(ValueError, s.drop, 'one', axis='columns')
'tcp_keepalive': bool,
text = f.widget.format_value(result) self.assertEqual(text, '13:30:05')
df.insert(0, 'baz', df['c']) self.assertEqual(df.columns.name, 'some_name')
_table_mod = None _table_file_open_policy_is_strict = False
for config_key in ('spm_logfile',): log_setting = opts.get(config_key, '') if log_setting is None: continue
with mock_basket_order(basket_id=1, exception=exceptions.HttpNotFoundError): response = self.client.get(self.path) self.assertEqual(response.status_code, 404)
return self.children()
y = np.dot(X, w)
unit = self.go_to_unit_page() verify_ordering(self, unit, [{"": ["Unit HTML", "Unit Problem"]}])
'gather_job_timeout': int,
payload = json.loads(response.content) thread = extract_thread(payload) if extract_thread else payload self._assert_thread_contains_group_info(thread)
code = "1/0" g = {} cache = {} with self.assertRaises(SafeExecException): safe_exec(code, g, cache=DictCache(cache))
self.assert_grade(problem, '42', 'correct') self.assert_grade(problem, '0', 'incorrect')
result = o.unique() self.assert_numpy_array_equal(result[1:], values[2:])
return instr.encode('mbcs')
full_name = UserProfile.objects.get(user=user).name
return JsonResponse({'return_code': 0})
if ip in servers: rm_dns(ip, interface)
command = resubmit_error_certificates
from salt.utils import cache
ct_in_map = { 'application/x-www-form-urlencoded': urlencoded_processor, 'application/json': json_processor, 'application/x-yaml': yaml_processor, 'text/yaml': yaml_processor, 'text/plain': text_processor, }
get_response = self.send_get(self.client) self.assertEqual(new_name, get_response.data["name"])
N_per_side = 5 Npts = N_per_side ** 2 n_neighbors = Npts - 1
return fig, ax
TEST_RUNNER = 'openedx.core.djangolib.nose.NoseTestSuiteRunner'
return HttpResponseBadRequest(u'The field {} is required.'.format(err.message))
dir_mode = __salt__['config.manage_mode'](dir_mode) file_mode = __salt__['config.manage_mode'](file_mode)
score_bucket = get_score_bucket(grade, max_grade)
logger.debug('Websocket already connected, returning') return
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
import platform raise nose.SkipTest("failing on %s" % ' '.join(platform.uname()).strip())
self.assertEqual( houston_json, City.objects.annotate(json=functions.AsGeoJSON('point', crs=True)).get(name='Houston').json )
self.assertEqual(None, ret)
verify_group_id_present(profiled_user=self.student, pass_group_id=True) verify_group_id_present(profiled_user=self.moderator, pass_group_id=True) verify_group_id_present( profiled_user=self.student, pass_group_id=True, requested_cohort=self.student_cohort )
fake_data_api.add_course(self.COURSE_ID, course_modes=course_modes) api.add_enrollment(self.USERNAME, self.COURSE_ID)
args = ['base_command', 'testlabel', '--option_a=x', '--settings=alternate_settings'] self._test(args)
context = { 'reorderable_items': set(), 'read_only': True } html = get_preview_fragment(request, html, context).content
def __init__(self, array): self.array = array self.shape = array.shape self.ndim = array.ndim self.iloc = ArraySlicingWrapper(array)
with self.assertRaises(CommandError): self.command.handle('not/found', all=False)
return u('table') in self.group
djangomod.__grains__ = {} djangomod.__salt__ = {} djangomod.__context__ = {}
return HttpResponseBadRequest(u'Could not parse request JSON.')
management.call_command('loaddata', 'fixture1', verbosity=0)
self.assertFalse(self._search_for_content(self.EDITED_SEARCH_STRING))
key, value = name.split('=', 1) kwargs[key] = value
'tcp_master_publish_pull': int,
width = self.ext.config['bliptv_width'][0] height = self.ext.config['bliptv_height'][0] return flash_object(url, width, height)
if error: ret['changes'] = {} ret['result'] = False ret['comment'] = str(error)
with check_number_of_calls(object_with_method, method_name, num_calls, num_calls): yield
return StudentModule.objects.get(course_id=self.course.id, student=User.objects.get(username=username), module_type=descriptor.location.category, module_state_key=descriptor.location, )
if self.index.equals(new_axis): if copy: return self.copy(deep=True) else: return self
if self.name == 'loc': return {'key': obj}
return self.values
def _get_byteorder(self): return wkb_writer_get_byteorder(self.ptr)
classifier.set_params(n_iter=1000)
fe_bp_h1 = free_energy_at_beta(W_list, b_list, nsamples, beta, pa_bias, marginalize_odd=marginalize_odd) free_energy_fn = theano.function([beta], fe_bp_h1)
with check_mongo_calls(1): ver_block = modulestore().get_item(self.reverification.location)
for t in cls.tags: self._mapping[t] = cls
kwargs.setdefault('widget', super(IntegerField, self).widget)
world.wait_for(lambda _: world.css_text('#data-student-profiles-table') not in [u'', u'Loading'])
df[0] = np.zeros(1000)
del dirs[:]
xml_object.tag = self.category node.tag = self.category
staff = UserFactory() allow_access(self.course, staff, 'staff') self.assertTrue(CourseStaffRole(self.course.id).has_user(staff))
resp = self.client.get(url) self.assertEqual(resp.status_code, 200) self.assertIn("Course is full", resp.content)
@ignore_warnings(category=ImportWarning) def test_migration_path(self): test_apps = [ 'migrations.migrations_test_apps.normal', 'migrations.migrations_test_apps.with_package_model', 'migrations.migrations_test_apps.without_init_file', ]
if request is not None and hasattr(request, 'META') and header_name in request.META: return request.META[header_name] else: return default
self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course_key))
from __future__ import unicode_literals
When(integer=1, then=Value(time(1), output_field=models.TimeField())), When(integer=2, then=Value(time(2), output_field=models.TimeField())),
escaped_encoded_from_addr = escape(encoded_from_addr) if len(escaped_encoded_from_addr) >= 320 and truncate: from_addr = format_address(course_name)
source_list = _validate_str_list(source)
THEME_NAME = ENV_TOKENS.get('THEME_NAME', None) COMPREHENSIVE_THEME_DIR = path(ENV_TOKENS.get('COMPREHENSIVE_THEME_DIR', COMPREHENSIVE_THEME_DIR))
self._sample_switch = True
from salt.modules import random_org
user=user, course_id=course.location.course_key, status=CertificateStatuses.downloadable
grains = {} pillars = {}
dnsmasq.__salt__ = {}
offset[(~isleapyear(year)) & (offset >= 59)] += 1
self.assert_login_response_before_pipeline_looks_correct(self.client.get('/login'))
cp = self.frame.copy() cp.ix[:4] = 0
response = middleware.process_response(request, response)
entered_passwords = ["", "", "password2", "password2"]
self.assertTrue( makeFY5253LastOfMonthQuarter( 1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1) .year_has_extra_week(datetime(2005, 4, 2)))
shiftedFrame = self.tsframe.shift(5) self.assert_index_equal(shiftedFrame.index, self.tsframe.index)
non_eligible_statuses = ['failed', 'declined']
self.video.verify_speed_changed('1.0x')
from __future__ import absolute_import
self.assertEqual(orphan_sequential.location.block_type, root.location.block_type) self.assertEqual(orphan_sequential.location.block_id, root.location.block_id)
self.message = force_text(self.message, strings_only=True) self.extra_tags = force_text(self.extra_tags, strings_only=True)
if field.error_messages['incomplete'] not in errors: errors.append(field.error_messages['incomplete']) continue
return self.q(css=self.COURSE_RUN_INPUT).text[0]
class SightingInline(admin.TabularInline): model = Sighting
finally: HIGHSTATE.pop_active()
svm = SVC(kernel="precomputed") assert_raises(ValueError, cross_val_score, svm, X, y)
return { 'id': user.id, 'username': user.username, 'email': user.email, 'role': role }
if 'retcode' not in event['data']: self.raw_events.append(event)
qn = self.connection.ops.quote_name opts = self.query.get_meta() result = ['INSERT INTO %s' % qn(opts.db_table)]
lm = LayerMapping(County, co_shp, co_mapping, transform=False, unique='name')
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
try: import win32com import pythoncom import pywintypes HAS_WIN_LIBS = True except ImportError: HAS_WIN_LIBS = False
cet = CourseEmailTemplate.objects.get(name=None) self.assertIsNotNone(cet)
def test_email_flag_false_mongo_true(self): BulkEmailFlag.objects.create(enabled=False) response = self.client.get(self.url) self.assertFalse(self.email_link in response.content)
raise tools.DashboardError("Oh noes!")
if math_expr.strip() == "": return ""
return self._num_batches_seen
self.q(css=self.content_groups_css + " .action-add").first.click()
store = modulestore() with store.default_store('split'): destination_course_key = store.make_course_key(org, number, run)
METRICS_WITH_POS_LABEL = [ "roc_curve",
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
del c._parent_cache self.assertIsNot(c.parent, p)
indptr_3 = X_sparse_unpruned.indptr[3] indptr_4 = X_sparse_unpruned.indptr[4] X_sparse_unpruned.data[indptr_3:indptr_4] = 0.0
return [mock.call(self.store, self._get_lib_key(lib)) for lib in libraries]
with self.assertRaises(Exception): self.build_problem(type="invalidtextgroup")
return False
fk_kwargs = {} for field_name, ogr_name in rel_mapping.items(): fk_kwargs[field_name] = self.verify_ogr_field(feat[ogr_name], rel_model._meta.get_field(field_name))
port = get_unused_localhost_port() usock.close() return port
if 'parent_url' in value: del value['parent_url'] if 'parent_sequential_url' in value: del value['parent_sequential_url']
connections['default'].allow_thread_sharing = True exceptions = [] do_thread() self.assertEqual(exceptions, [])
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch
ret['changes'] = {name: __salt__['chocolatey.uninstall'](name, version, uninstall_args, override_args)}
return etree.Element('multiplechoiceresponse')
for parameter, default in PARAMETERS.iteritems(): PARAMETERS[parameter] = request.GET.get(parameter, default)
cert = request._req.subprocess_env.get(certkey, '')
metric = ALL_METRICS[name]
if uninstaller.startswith(('salt:', 'http:', 'https:', 'ftp:')):
request.POST = request.POST.copy()
from docutils.statemachine import ViewList self.content = ViewList(lines, self.content.parent)
Category.objects.get(url='4th').delete() with self.assertRaises(ValidationError): f.clean(c4.id)
context['logo_subtitle'] = _("Certificate Validation")
__opts__.get( 'log_level', 'error' )
try: imp.find_module(app_name) except ImportError: try: __import__(app_name) except ImportError: continue INSTALLED_APPS += (app_name,)
config = self.cohort_config if config is None: return False return bool(config.get("cohorted"))
if X is not None: X = check_array(X, accept_sparse='csr') n_samples1 = X.shape[0] else: n_samples1 = self._fit_X.shape[0]
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010')
CourseFixture( org='test_org', number='335535897951379478207964576572017930000', run='test_run', display_name='Test Course 335535897951379478207964576572017930000', ).install()
pre = __salt__['git.config_get_regexp']( cwd=repo, key=key, value_regex=None, user=user, ignore_retcode=True, **{'global': global_} )
import logging
x = DataFrame() x.join(DataFrame([3], index=[0], columns=['A']), how='outer')
dtype = dtype[0]
filter_spec = vmodl.query.PropertyCollector.FilterSpec( objectSet=[obj_spec], propSet=[property_spec], reportMissingObjectsInResults=False )
for tab in tab_list: if tab.type == tab_type: return True return False
self.template_name = template self.context_data = context
return self
return True
class OGRGeometry(GDALBase): "Generally encapsulates an OGR geometry."
self.process = MultiprocessingProcess(target=raet_minion_run, kwargs={'cleanup_protecteds': [self.stack.ha], }) self.process.start() self._wait_caller(opts)
expected = DataFrame([[2, 1]], columns=['b', 'a'])
def isatty(self): return False
self.assertTrue(inspect.isfunction(self.loader[self.module_key]))
import integration
def __init__(self, *args, **kwargs): raise TypeError("EmptyQuerySet can't be instantiated")
if isinstance(ns, dict): for k, v in ns.items(): setattr(cls, k, v)
from __future__ import absolute_import import os import json
return "SELECT cache_key FROM %s ORDER BY cache_key LIMIT 1 OFFSET %%s"
assert_raises(ValueError, plot_partial_dependence, clf, X, [0])
from scipy import misc face = misc.face(gray=True)
from __future__ import absolute_import
apps.register_model('migrations', UnserializableModel)
none_coerced = block._try_coerce_args(block.values, None)[2] self.assertTrue(pd.Timestamp(none_coerced) is pd.NaT)
dog_stats_api.increment( 'DjangoXBlockUserStateClient.{}'.format(evt_name), timestamp=evt_time, sample_rate=self.API_DATADOG_SAMPLE_RATE, )
def f(): df = orig.copy() df.iloc[2, 0] = "c"
element = self.q(css=".inline-error").first if element and self.is_error_visible: return element.text[0] else: return None
self.assertEqual(Article.objects.all()[0], self.a4)
manage.py ... transfer_students -f edX/Open_DemoX/edx_demo_course -t edX/Open_DemoX/new_demoX
from __future__ import absolute_import
add_level_messages(storage) self.assertEqual(len(storage), 5)
module = CapaFactory.create(attempts=attempts, max_attempts=attempts, done=True) self.assertFalse(module.should_show_save_button())
new_mods = [m for m in sys.modules if m not in self.mods] for m in new_mods: del sys.modules[m]
DATE_INPUT_FORMATS = [
X_pred_transformed = kpca.transform(X_pred) assert_equal(X_pred_transformed.shape[1], X_fit_transformed.shape[1])
new_cols = [_series_round(v, decimals) for _, v in self.iteritems()]
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
import salt.utils
cohort.name = "NewName" cohort.save() self.assertFalse(mock_tracker.called)
def process_request(self, request): request.site = get_current_site(request)
self.assertNotIn('contents', result)
def __init__(self, **kwargs): for key, value in kwargs.items(): setattr(self, key, [TestGeom(**strconvert(kw)) for kw in value])
rng = np.random.RandomState(0) iris_weights = rng.randint(10, size=iris.target.shape) boston_weights = rng.randint(10, size=boston.target.shape)
username = user.username if user else ""
return library_key.replace(version_guid=None, branch=None)
for item in ret: self.assertSaltTrueReturn(item)
if node.name != '__repr__': self.generic_visit(node)
fill_value = get_fill_value(o)
errors = [] minions = [] for minion in response: minions.append(minion) if not response[minion]: errors.append(minion)
unbalanced_X = iris.data[:125] unbalanced_y = iris.target[:125] sample_weight = compute_sample_weight("balanced", unbalanced_y)
return False
learn_cache_key(request, response)
m_log_alphas = -np.log10(model.alphas_)
import logging
return printing.pprint_thing(self.expr)
setup_temp_logger() setup_extended_logging(opts)
try: C = linalg.cholesky(R, lower=True) except linalg.LinAlgError: return reduced_likelihood_function_value, par
print("--- Dense matrices")
res = cat.add_categories("d") self.assert_categorical_equal(cat, old) self.assert_categorical_equal(res, new)
sparse_classifier = AdaBoostRegressor( base_estimator=CustomSVR(), random_state=1 ).fit(X_train_sparse, y_train)
from __future__ import absolute_import import socket import logging
Ua, sa, Va = \ randomized_svd(X, k, power_iteration_normalizer=normalizer, random_state=0) assert_almost_equal(s[:rank], sa[:rank])
inner_module = inner_get_module(location.replace(category="problem", name='choiceprob')) inner_module.attempts = 1 inner_module.save()
n_jobs, _, _ = _partition_estimators(self.n_estimators, self.n_jobs)
from lxml import etree import unittest import xml.sax.saxutils as saxutils
response = JsonResponse(payment_data)
import re import os import json import time import logging import subprocess
response2 = self.client.get('/template_response_view/') self.assertEqual(response2.status_code, 200)
self.validate_thread_sharing() if self.queries_logged: cursor = self.make_debug_cursor(self._cursor()) else: cursor = self.make_cursor(self._cursor()) return cursor
clf = LassoCV()
vmax = arr.max(axis=0) out = np.log(np.sum(np.exp(arr - vmax), axis=0)) out += vmax return out
text = f.widget.format_value(result) self.assertEqual(text, "01:30:05 PM")
try: import logstash HAS_LOGSTASH = True except ImportError: HAS_LOGSTASH = False
self.assertEqual(repr(idx), expected)
self._verify_editable(self._get_course_details_response(True))
_update_context_with_user_info(context, user, user_certificate)
import salt.ext.six as six
with self.assertRaises(SuspiciousOperation): self.storage.exists('..') with self.assertRaises(SuspiciousOperation): self.storage.exists('/etc/passwd')
return v6_int_to_packed(self._ip)
from __future__ import unicode_literals
if not user.is_authenticated(): return HttpResponseForbidden()
self._make_eligible() self._purchase_credit() CourseEnrollmentAttribute.objects.all().delete()
modules = get_accessible_discussion_modules(course, self.non_staff_user) self.assertTrue( all(module.display_name == 'released' for module in modules) )
self.fed.append('&%s;' % name)
with self.assertRaisesMessage(TypeError, "'Publication' instance expected, got <Article"): with transaction.atomic(): a6.publications.add(a5)
CourseInstructorRole(course_key).add_users(new_instructor) auth.add_users(requesting_user, CourseStaffRole(course_key), new_instructor)
autosummary_generate = True
self.cfunc = getattr(lgeos, func_name + '_r') self.threaded = True self.thread_context = thread_context
for service in services: service_key = None
self._aborting = False if not self._managed_pool: n_jobs = self._initialize_pool() else: n_jobs = self._effective_n_jobs()
res.source_expressions[pos] = Transform(expr, base_srid).resolve_expression(*args, **kwargs)
CourseAboutSearchIndexer.index_about_information(modulestore, structure)
paver.easy.sh("exit 1")
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
problem_info = prob_grade_distrib[child.location]
return [MockRoles()]
log_prob_of = (Y * log_prob).sum(axis=1) masked = log_prob_of * drop_mask_Y assert masked.ndim == 1
check_is_fitted(self, ["classes_", "calibrated_classifiers_"]) return self.classes_[np.argmax(self.predict_proba(X), axis=1)]
_maybe_remove(store, 'df') store.append('df', df, data_columns=True) result = store.select('df') assert_frame_equal(result, df)
clf = NearestCentroid() clf.fit(X, y) assert_array_equal(clf.predict(T), true_result)
self.registration.activate() self.assertTrue(self.user.is_active) mock_segment_identify.assert_called_with( self.user.id, expected_segment_payload, expected_segment_mailchimp_list )
if isinstance(machinestate, int): return MACHINE_STATES_ENUM.get(machinestate, UNKNOWN_MACHINE_STATE) elif isinstance(machinestate, str): return MACHINE_STATES.get(machinestate, UNKNOWN_MACHINE_STATE) else: return UNKNOWN_MACHINE_STATE
return self.find_css("#due_date").present
import integration
from __future__ import absolute_import import time import threading
return signal_job(jid, salt_SIGKILL)
log.error( 'Unable to resolve %s from %s remote \'%s\' ' 'to either an annotated or non-annotated tag', tag_ref, self.role, self.id ) return None
if not hasattr(self, 'needs_reformat'): self.needs_reformat = self.needs_reshape del self.needs_reshape
container.delete(0) self.verify_groups(container, ['alpha'], [], verify_missing_groups_not_present=False)
arr = [1] + [5] * 2592 idx = dti[0:-1:5] idx = idx.append(dti[-1:]) expect = Series(arr, index=idx)
self.attempt_login(200) user.is_active = False
assert_raises(ValueError, _fast_dot, A.T, np.array([A, A]))
if not updates: return 'No updates found. Check software and drivers parameters. One must be true.'
from __future__ import absolute_import
return str((template_name, sorted(context.iteritems())))
_ = lambda text: text
self.assertEqual(expected_message, error.exception.message)
ports = [4505, 4506]
td = Timedelta(days=1, seconds=1) result = frequencies.to_offset(td) expected = offsets.Second(86401) assert (expected == result)
data = "Some data" ItemFactory.create( parent_location=self.library.location, category="html", display_name="Html Content 3", data=data, modulestore=store, publish_item=False, )
raise ItemNotFoundError(destination_course)
get_connection(using).on_commit(func)
AUTH_PROVIDERS = ('pygit2',) AUTH_PARAMS = ('user', 'password', 'pubkey', 'privkey', 'passphrase', 'insecure_auth')
errstring = "migrate_to_split requires at least two arguments" with self.assertRaisesRegexp(CommandError, errstring): self.command.handle()
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
assert_equal(X_counted.nnz, X_hashed.nnz)
self.certificates_section.refresh()
exc_info_on_loglevel=logging.DEBUG
if not self.fields['download_video'].is_set_on(self): self.download_video = self.download_video self.force_save_fields(['download_video'])
ret[bucket_name] += [k for k in filePaths if not k.endswith('/')]
self.test_b_grade_exact()
return np.tanh(X, out=X)
if hasattr(index, 'tz'): if index.tz is not None: self.values = tslib.tz_convert(self.values, 'UTC', index.tz)
__func_alias__ = { 'id_': 'id', 'reload_': 'reload', }
index = MultiIndex(levels=[[0, 1]] + [level] * 8, labels=[np.arange(2).repeat(500)] + [labels] * 8)
#'wiki.plugins.notifications', 'course_wiki.plugins.markdownedx',
Z = Z.reshape(xx.shape) plt.contourf(xx, yy, Z, cmap=plt.cm.Paired) plt.axis('off')
self.publish_item(store, self.vertical.location) with self.assertRaises(SearchIndexingError): self.reindex_course(store)
self.set_date('due_date', "#due_date", date)
self.assertEqual(course_date, expected_course_date)
td[0] = np.nan
inherited_metadata_filter_list = list(filtered_metadata.keys()) inherited_metadata_filter_list.extend(INHERITED_FILTER_LIST)
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, requires_network, )
norm_expected = expecteds.copy() for k in norm_expected: norm_expected[k] = Timestamp(norm_expected[k].date())
self.client.force_login(self.u1, backend='test_client.auth_backends.TestClientBackend')
blocks = get_course_blocks(user, usage_key, transformers)
with ensure_clean_store(self.path) as store:
return self._explode_shorthand_ip_string()
socket = context.socket(zmq.PUB) socket.setsockopt(zmq.LINGER, 100) socket.bind('ipc://' + self.timer_sock)
modal.release_date = '5/14/1969'
'ioflo_realtime': bool,
indices = np.empty(X.shape[0], dtype=np.intp) values = np.empty(X.shape[0]) values.fill(np.infty)
('BACKGROUND', (1, 4), (1, 4), '#EEEEEE'),
for field in self.fields.values(): if field.scope in (Scope.parent, Scope.children): continue
self.course_nav.go_to_vertical('Test Vertical-1')
return anonymous_id_for_user(user, None, save=save)
for lnum in range(len(level_lengths)): name = columns.names[lnum] yield ExcelCell(lnum, coloffset, name, header_style)
self._bind_module(lc_block) self.assertEqual(len(lc_block.children), num_to_create) self.assertEqual(len(lc_block.get_child_descriptors()), num_expected)
margin = 1 / np.sqrt(np.sum(clf.coef_ ** 2)) yy_down = yy + a * margin yy_up = yy - a * margin
CourseMode( course_id=self.xss_course_key, mode_slug=CourseMode.HONOR, mode_display_name="honor cert", min_price=self.cost ).save()
all_items = self.sequence_items
sim = np.array([[0, 5, 9, 4], [5, 0, 2, 2], [3, 2, 0, 1], [4, 2, 1, 0]])
self.assertEqual(len(mail.outbox), 2)
return 0
if quiet is True: cmd.append('--quiet')
descending_grades = sorted(grade_cutoffs, key=lambda x: grade_cutoffs[x], reverse=True) for possible_grade in descending_grades: if percentage >= grade_cutoffs[possible_grade]: letter_grade = possible_grade break
df.resample('AS').sum()
if not isinstance(obj.extra, int): return must_be('an integer', option='extra', obj=obj, id='admin.E203') else: return []
if isinstance(value, ABCDataFrame) and value.ndim > 1: sub_indexer = list(indexer) multiindex_indexer = isinstance(labels, MultiIndex)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
self.assertEqual(len(mail.outbox), 0)
class MyWidget4(TextInput): class Media: css = {'all': ('/path/to/css1', '/path/to/css1')} js = ('/path/to/js1', '/path/to/js1')
if isinstance(data, text_type): return sum([_EAW_MAP.get(east_asian_width(c), ambiguous_width) for c in data]) else: return len(data)
cmd = 'Uninstall-Module "{0}"'.format(name) no_ret = _pshell(cmd) return name not in list_modules()
if salt_token and self.resolver.get_token(salt_token): return True
self.seed %= MAX_RANDOMIZATION_BINS
for c in join_col: assert(result[c].notnull().all())
VISIBLE_CONTENT = [ ['class=&#34;problems-wrapper'], ['Some HTML for group 1'] ]
to_field = to_field or (to._meta.pk and to._meta.pk.name)
multi_target_forest.fit(X, y)
X = check_array(X, accept_sparse=['csc'], ensure_2d=False) if issparse(X): X.sort_indices()
#add_function_parentheses = True
with self.assertRaisesMessage(TemplateSyntaxError, 'Empty block tag on line 3'): self.engine.get_template('filter-syntax08-multi-line')
model._results
self._prepare_field_lists() self._generate_through_model_map()
bytes = bytearray
url = forms.CharField(required=False) class Meta: fields = ('name', 'slug') model = Category
return super(NullBackend, self).get_dict(dict_name, default, **kwargs)
df = orig.copy() df.loc["j", :] = ["b", 2] tm.assert_frame_equal(df, exp_single_row)
na_values, na_fvalues = _clean_na_values(na_values, keep_default_na)
fields = {f for f in fields if f != 'pk'}
df = DataFrame({'b': [1.1, 2.2]}) df = df.rename(columns={}) df.insert(0, 'a', [1, 2])
weights_format = ('v', 'h')
result = f.clean('21.12.10') self.assertEqual(result, date(2010, 12, 21))
bg = nodes.container() bg['classes'] = ['lit-background'] node.append(bg)
mode = str(mode)
htable.get_labels(vals[:nvals], uniques, 0, -1) uniques.to_array() htable.get_labels(vals, uniques, 0, -1)
self.select = [] self.values_select = []
self.course_fixture.add_course_details({'start_date': datetime.now() + timedelta(days=1)})
CREDIT_NOTIFICATION_CACHE_TIMEOUT = 5 * 60 * 60
opts = model._meta app_label = opts.app_label action_list = LogEntry.objects.filter( object_id=unquote(object_id), content_type=get_content_type_for_model(model) ).select_related().order_by('action_time')
qs = Author.objects.none()
return datetime.now(UTC()) > self.start
config = settings.PROFILE_IMAGE_BACKEND storage_class = get_storage_class(config['class']) return storage_class(**config['options'])
return { self.fk_field: obj.pk, self.ct_field: ContentType.objects.get_for_model(obj).pk, }
return fnd
self.assertContains(response, should_contain)
rng = date_range('1/1/2000', '3/1/2000') idx = Index(rng, dtype=object)
self._handle.create_array(self.group, key, value.asi8)
if not done: ret['result'] = False if not quiet: __jid_event__.fire_event({'message': ret}, 'progress') return ret
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course.id): course.enrollment_domain = domain self.store.update_item(course, self.test_user_id)
prev_soft, prev_hard = resource.getrlimit(resource.RLIMIT_NOFILE)
invalid = Series([1]) with tm.assertRaisesRegexp(AttributeError, "only use .str accessor"): invalid.str self.assertFalse(hasattr(invalid, 'str'))
x_p_nrm, y_p_nrm = norm(x_p), norm(y_p) x_n_nrm, y_n_nrm = norm(x_n), norm(y_n)
monitoring_dataset = DenseDesignMatrix(X=X)
s = Series(np.random.randn(21), index=date_range(start='1/1/2012 9:30', freq='1min', periods=21)) s[0] = np.nan
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor' )
metadata = None try: if os.path.getmtime(cache_file) > exp: metadata = _read_buckets_cache_file(cache_file) except OSError: pass
response = requests.get(self.url, params={"test_param": 2}) self.assertEqual(response.status_code, 200)
response = super(Client, self).trace(path, data=data, secure=secure, **extra) if follow: response = self._handle_redirects(response, **extra) return response
import salt.utils import salt.utils.decorators as decorators
resp = self.create_xblock(category='static_tab', parent_usage_key=course.location) usage_key = self.response_usage_key(resp)
self.client.login(username=self.instructor.username, password='test') response = self.client.post(url) self.assertEqual(response.status_code, 403)
'API': 'www.youtube.com/iframe_api',
invalid_formset = self.make_choiceformset([('Calexico', '')]) self.assertFalse(invalid_formset.is_valid()) self.assertTrue(invalid_formset.has_changed())
offset1 = BMonthEnd() offset2 = BMonthEnd() self.assertFalse(offset1 != offset2)
import salt.utils
destination_block.edit_info.source_version = ( new_block.edit_info.source_version or new_block.edit_info.update_version )
import salt.config import salt.loader
return True
t3 = TfidfTransformer(use_idf=True) assert_raises(ValueError, t3.transform, counts_train)
self._consolidate_inplace() counts = dict() for b in self.blocks: v = f(b) counts[v] = counts.get(v, 0) + b.shape[0] return counts
Y_neg = Y.copy() Y_neg[0, 0] = -1 assert_raises(ValueError, transform.transform, Y_neg)
del sys del builtins del encoding
'transcript': 'http://video.google.com/timedtext?lang=en&v=OEoXaMPEzfM',
assert_raises(ValueError, pairwise_distances, X, Y, metric="blah")
if 'target' not in kwargs: target = '*' else: target = kwargs['target'] del kwargs['target']
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
now = time.mktime(datetime.utcnow().timetuple())
return self._folds[0].get_input_space()
if not isinstance(self.object_list, list): self.object_list = list(self.object_list) return self.object_list[index]
"remote_id": 'remote_' + username,
reloc_spec = vim.vm.RelocateSpec()
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if not enabled: ret['result'] = True ret['comment'] = enabled_msg ret['changes'].update(enabled_changes) return ret
stride = np.prod(shape[1:nlev], dtype='i8') out = stride * labels[0].astype('i8', subok=False, copy=False)
@functools.wraps(func) def capture(*args, **kwargs): stacks.capture_stack(args, kwargs) return func(*args, **kwargs)
return id
self.students = [UserFactory() for _ in xrange(STUDENT_COUNT)] for student in self.students: CourseEnrollmentFactory.create(user=student, course_id=self.course.id)
try: ranges.last.value = 'Failure' except InvalidElementStateException:
_test_seq(df, idx_ser.values, col_ser.values)
pass
clf = QuadraticDiscriminantAnalysis(reg_param=0.1) with ignore_warnings(): clf.fit(X5, y5) y_pred5 = clf.predict(X5) assert_array_equal(y_pred5, y5)
import salt.utils from salt.exceptions import CommandExecutionError
key = safe_key('a' * 300, 'prefix', 'version') self.assertTrue(self._is_valid_key(key))
super(CertificatesListHandlerTestCase, self).setUp('contentstore.views.certificates.tracker')
set_pw_cmd = "shadow.set_password {0} '{1}'".format( self.userA, password if salt.utils.is_darwin() else hashed_pwd ) self.run_call(set_pw_cmd)
pass
for block in blocks: for field in fields: self.assertEquals( block_structure.get_xblock_field(block.location, field), block.field_map.get(field), )
self.assertEqual( info['blocks'], [[reverse_usage_url('container_handler', vertical2.location), 'notes problem in vert2']] )
addresses.append(line.strip()) continue
] DATETIME_INPUT_FORMATS = [
saved_fields.extend(key.field_name for key in set_many_data)
self.process_input_line(line, store_history=store_history)
'renderer_blacklist': list,
from __future__ import absolute_import import re import logging
return self._get_xblocks()
if query: url += '?' + query
changes = self._detect_changes(convert_apps, graph) changes = self.arrange_for_graph(changes, graph, migration_name) if trim_to_apps: changes = self._trim_to_apps(changes, trim_to_apps) return changes
msg = self.style.HTTP_SERVER_ERROR(msg)
df = pd.DataFrame({'X': [1, 2, 3, 4], 'Y': list('aabb')}, index=list('ABCD'))
GRADES_DOWNLOAD_ROUTING_KEY = HIGH_MEM_QUEUE
self.assertEqual(module.attempts, 1)
return False
image_dtype = numpy.dtype(image_dtype)
self.assertEqual(new_version.location.course_key, target_location_namespace)
celery_task_patcher = patch.object( sync_cohort_with_mode, 'apply_async', mock.Mock(wraps=sync_cohort_with_mode.apply_async) ) self.mocked_celery_task = celery_task_patcher.start() self.addCleanup(celery_task_patcher.stop)
del self.bias_from_marginals
user.is_staff = True
from __future__ import absolute_import, with_statement import copy import os import sys import time import errno import types import signal import logging import threading import contextlib import subprocess import multiprocessing import multiprocessing.util
self.assert_numpy_array_equal( pd.to_datetime(dts, box=False), np.array([Timestamp(x).asm8 for x in dts]) )
from __future__ import absolute_import import logging
raise NotImplementedError(str(type(self))+" does not implement " + "continue_learning.")
from_xmodule = [entry_point for entry_point in entry_points if entry_point.dist.key == 'xmodule'] return default_select(identifier, from_xmodule)
return SelectKBest(chi2, k=k)
ref_key = 'new tags' \ if new_ref_type == 'tag' \ else 'new branches' ret.setdefault(ref_key, []).append(ref_name)
ret['changes'] = {'feature': __salt__['win_servermanager.install'](name, recurse, restart)}
return -2
return self.mlp.get_weights()
try: import sqlite3 HAS_SQLITE3 = True except ImportError: HAS_SQLITE3 = False
BSD = ('OpenBSD', 'FreeBSD')
for lhs in self.objects: for rhs in self.objects: if lhs is rhs: continue self.assertNotEqual(lhs, rhs)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains, requires_salt_modules ) ensure_in_syspath('../../')
p.undergroundbar = None
return X.take(indices, axis=0)
cat = Series(Categorical(list("abc"), ordered=True))
latex_documents = [ ('index', 'performance.tex', u'pandas vbench Performance Benchmarks', u'Wes McKinney', 'manual'), ]
_period_code_map.update({
sync = SyncWrapper(AsyncReqChannel.factory, (opts,), kwargs) return sync
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(X, y)
log.warning('You can only set either memdump or quiesce to True. Setting quiesce=False') quiesce = False
apache2.service.require(state('libapache2-mod-wsgi').pkg, pkg='apache2') \\ .watch(file='/etc/apache2/httpd.conf')
elif isinstance(data, (np.ndarray, Index, ABCSeries)):
connection.close()
locked=getattr(content, 'locked', False)) as fp:
from urllib.request import urlopen
from salt.modules import htpasswd
if dropna: result = result.dropna(axis=0, how='all')
assert not com.is_hashable(np.array([]))
self.assertTrue(module_has_submodule(egg_module, 'good_module')) mod = import_module('egg_module.good_module') self.assertEqual(mod.content, 'Good Module')
is_increasing = assert_no_warnings(check_increasing, x, y) assert_true(is_increasing)
FEATURES['ENABLE_SPECIAL_EXAMS'] = True
class SomeModel(models.Model): somefield = models.IntegerField()
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
return [tuple(map(int, score.split('/'))) for score in text_scores]
expected = DataFrame([[4, 5, 6]], columns=['a', 'b', 'c'])
log.warning('"lsof" returncode = 1, likely no active TCP sessions.') return remotes
if regex and pattern: rx = re.compile(to_replace) else: return super(ObjectBlock, self).replace(to_replace, value, inplace=inplace, filter=filter, regex=regex, mgr=mgr)
return redirect(reverse('about_course', args=[unicode(course_key)]))
is_small_course = False enrollment_count = CourseEnrollment.objects.num_enrolled_in(course_key) max_enrollment_for_buttons = settings.FEATURES.get("MAX_ENROLLMENT_INSTR_BUTTONS") if max_enrollment_for_buttons is not None: is_small_course = enrollment_count <= max_enrollment_for_buttons return is_small_course
db_name = connection.creation.create_test_db(verbosity=verbosity, autoclobber=not interactive, serialize=False)
if isinstance(model, six.string_types): return model.split(".", 1) else: return model._meta.app_label, model._meta.object_name
member = models.Member.objects.create(name='Bob', birthdate=datetime(1984, 5, 15), gender='M')
def __init__(self): self.Unauthorized = Unauthorized self.AuthorizationFailure = AuthorizationFailure
'profiles_config', os.path.join(salt.syspaths.CONFIG_DIR, 'cloud.profiles')
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, mock_open, NO_MOCK, NO_MOCK_REASON )
return self._fetch()
X, y = make_blobs() branching_factor = 9
self.case_sensitive = False
st_ = salt.client.ssh.state.SSHState(__opts__, __pillar__)
raise GEOSException('Geometry resulting from slice deletion was invalid.')
merged_start_value = min_all_parents_start_date
row_items = [E.TD(x) for x in items] self.table.append(E.TR(*row_items))
call_command('git_add_course', self.TEST_REPO, directory_path=self.git_repo_dir / 'edx4edx_lite', repository_branch=self.TEST_BRANCH)
module.system.render_template = Mock(return_value="<div>Test Template HTML</div>")
if self._is_training_data(X): return 2. - float(self.train_sizes) / self.n_max_train_sizes else: return float(self.train_sizes) / self.n_max_train_sizes
return self._get_spatialite_func('lwgeom_version()')
object_state = list(ndarray.__reduce__(self)) subclass_state = self.fill_value, self.sp_index object_state[2] = (object_state[2], subclass_state) return tuple(object_state)
self.assertTrue(self.all_models[0]._meta._relation_tree)
self.cart1 = Order.get_cart_for_user(self.first_verified_user) CertificateItem.add_to_order(self.cart1, self.course_key, self.cost, 'verified') self.cart1.purchase()
if line.startswith('-'): if summary and summary_data and fault_data: result.update(_merge_data(summary_data, fault_data))
srid = kwargs.get('srid')
pkg_name.reverse()
disk_name = next(six.iterkeys(diskp[0])) disk_type = diskp[0][disk_name]['format'] disk_file_name = '{0}.{1}'.format(disk_name, disk_type)
s = Series(index=[1, 2, 3]) rs = s.apply(lambda x: x) tm.assert_series_equal(s, rs)
return TermValue(v, stringify(v), u('string'))
return '%s_%s' % (action, opts.model_name)
warnings.extend(check_resolver(pattern))
ret = {} ifaces = _get_interfaces() for face in ifaces: if 'hwaddr' in ifaces[face]: ret[face] = ifaces[face]['hwaddr'] return {'hwaddr_interfaces': ret}
if how == 'left': how = 'outer' join_axes = [self.index] else: join_axes = None
import logging
if not len(data): return data, False
b5 = BooleanModel.objects.all().extra(select={'string_col': 'string'})[0] self.assertNotIsInstance(b5.pk, bool)
import salt.utils
if 'spelling' in sys.argv: extensions.append("sphinxcontrib.spelling")
return 1 / numpy.cos(arg)
left = self.rng[:10] right = self.rng[5:10]
html = self.get_problem_html(encapsulate=False)
self.q(css=self._bounded_selector(".check-discussion-subcategory-%s" % key)).first.click()
break
lang = node['language'] highlight_args['force'] = True
from __future__ import absolute_import import os import os.path import logging import time
context = test_view.get_context_data(test_name='test_value') self.assertEqual(context['test_name'], 'test_value')
self.assertFalse(user.is_staff)
AND = 'AND' OR = 'OR'
mgr = create_mgr('f: i8; g: f8') new_mgr = mgr.convert() _compare(mgr, new_mgr)
import salt.utils.compat
return response
self.assertEqual(copy.sortorder, original.sortorder)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call
return set_system_date_time(hours=int(dt_obj.strftime('%H')), minutes=int(dt_obj.strftime('%M')), seconds=int(dt_obj.strftime('%S')))
d = dict([(self._AXIS_SLICEMAP[a], self._get_axis(a)) for a in (axes or self._AXIS_ORDERS)]) d.update(kwargs) return d
loss[i] = np.dot(true_at_reversed_rank.cumsum(), false_at_reversed_rank)
retc["_id"] = ret["jid"]
self.selenium.find_element_by_css_selector('#id_user option[value=newuser]')
return self.connection.settings_dict['NAME']
response = self.client.get(self.url, params)
chapter = modulestore().get_item(chapter.location.version_agnostic()) del chapter.visible_to_staff_only modulestore().update_item(chapter, self.user_id)
AutoAuthPage(self.browser, username="second", email="second@example.com", no_login=True).visit()
BADGR_API_TOKEN = None BADGR_BASE_URL = "http://localhost:8005" BADGR_ISSUER_SLUG = "example-issuer" BADGR_TIMEOUT = 10
data['course_price'] = 100 response = self.client.post(set_course_price_url, data) self.assertTrue("CourseMode price updated successfully" in response.content)
query_features = task_input.get('features') student_data = list_may_enroll(course_id, query_features) header, rows = format_dictlist(student_data, query_features)
store.get_items(SlashSeparatedCourseKey('abc', 'def', 'ghi'), qualifiers={'category': 'vertical'})
def f(x): x[:] = 10
decorators = (add_exclamation_mark, add_question_mark)
if s3_meta: bucket_files[bucket] = __get_pillar_files_from_s3_meta(s3_meta)
resources_dir = None def get_html(self): return self.studio_view(None).content
return SearchEngine.get_search_engine(self.INDEX_NAME)
if virtual is not True and module_name != virtual: log.trace('Loaded {0} as virtual {1}'.format( module_name, virtual ))
enrollment_start = DateTimeField(null=True) enrollment_end = DateTimeField(null=True) enrollment_domain = TextField(null=True) invitation_only = BooleanField(default=False) max_student_enrollments_allowed = IntegerField(null=True)
else: return provider_respond(server, openid_request, server.handleRequest(openid_request), {})
contents = filepath_or_buffer.read() try: contents = contents.encode(self._encoding) except: pass self.filepath_or_buffer = compat.BytesIO(contents)
res = cat.add_categories("d", inplace=True) self.assert_categorical_equal(cat, new) self.assertIsNone(res)
return None
apply_ranged_setting = False
pass
import logging import salt.ext.six as six
dest_id = self.store.make_course_key(courselike_key.org, courselike_key.course, courselike_key.run)
mode = 'create' mtdata = __salt__['postgres.create_metadata']( name, schema=schema, ext_version=ext_version, **db_args)
mask = this_mask ^ other_mask this_vals[this_mask & mask] = fill_value other_vals[other_mask & mask] = fill_value
import os
with wrap_ugettext_with_xyz(french_translation): self.assertEqual(i18n_service.ugettext(self.test_language), 'XYZ dummy language')
self.frame['E'] = 7. self.frame.values[6] = 6 self.assertTrue((self.frame.values[6] == 6).all())
response = self.client.get('/get_view/') self.assertEqual(response.resolver_match.url_name, 'get_view')
HAS_FCNTL = False
w = rng.uniform(size=n_samples) w[5:8] = 0 regression.fit(x, y, sample_weight=w)
return True
time.sleep(1) Reporter.objects.exclude(id=1).update(id=2)
for _ in xrange(30): self._send_bad_redirection_login()
raise CommandError( _( 'Invalid group name: "{group_name}". {messages}' ).format( group_name=group_name, messages=exc.messages[0] ) )
self.assertRaises(ValueError, self.df.groupby, [])
return str(self.dtype)
if host: self.host = host else: self.host = socket.gethostname()
data_types_reverse = DatabaseIntrospection.data_types_reverse.copy() data_types_reverse[FIELD_TYPE.GEOMETRY] = 'GeometryField'
exc_info_on_loglevel=logging.DEBUG
response = getattr(self.client, verb)(LIBRARY_REST_URL) self.assertEqual(response.status_code, 405)
import salt.ext.six as six
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
with transaction.atomic(): (user, profile, registration) = _do_create_account(form, custom_form)
from __future__ import unicode_literals
try: return self.maps[0].pop(key, *args) except KeyError: raise KeyError('Key not found in the first mapping: {!r}' .format(key))
import salt.defaults.exitcodes import salt.utils import salt.utils.nb_popen import salt.utils.vt
SafeUnicode = SafeText
return self._data
'ENABLE_DISCUSSION_SERVICE': True, 'ENABLE_TEXTBOOK': True, 'ENABLE_STUDENT_NOTES': True,
self._assert_reg_field( no_extra_fields_setting, { "name": "password", "type": "hidden", "required": False, } )
if j > 1: with tm.assertRaises(NotImplementedError): res = roundtrip(df, use_headers, index=False) else: res = roundtrip(df, use_headers)
cart.start_purchase()
return [self._get_axis(a) for a in self._AXIS_ORDERS]
from __future__ import unicode_literals
for url_name in self.EXPECTED_URL_NAMES: self.assertContains(response, reverse(url_name))
expected = Series({'col': 'float64:sparse'}) result = df.ftypes tm.assert_series_equal(expected, result)
display_id = slugify(chapter.display_name_with_default_escaped) local_hide_from_toc = False if required_content: if unicode(chapter.location) not in required_content: local_hide_from_toc = True
X = check_array(X, accept_sparse=['csr', 'csc'])
if user is None: return False if user.is_authenticated(): return CourseEnrollment.is_enrolled(user, course.id) else: return False
source_name = name if os.sep == '/' else name.replace(os.sep, '/') target_name = posixpath.join(posixpath.dirname(source_name), url_path)
self._is_valid_list_like(key, axis)
with self.assertRaises(IntegrityError): VerificationCheckpoint.objects.create(course_id=self.course.id, checkpoint_location=self.checkpoint_midterm)
mock_response = mock.Mock() mock_response.status_code = 500 mock_post.return_value = mock_response with self.assertRaises(ccxconapi.CCXConnServerError): ccxconapi.course_info_to_ccxcon(self.course_key)
resp_params = PaymentFakeView.response_post_params(post_params) self.assertEqual(resp_params.get('decision'), 'REJECT')
var = 1.0 / 12 tm.assert_almost_equal(variance_1, var, check_less_precise=2)
pass
ANALYTICS_SERVER_URL = ENV_TOKENS.get("ANALYTICS_SERVER_URL") ANALYTICS_API_KEY = AUTH_TOKENS.get("ANALYTICS_API_KEY", "")
'failhard': bool,
X -= X.min() - .1 this_X = NotAnArray(X) this_y = NotAnArray(np.asarray(y)) _check_transformer(name, Transformer, this_X, this_y)
expected = s1.apply( lambda x: Timedelta(np.timedelta64(m, unit)) / x) result = np.timedelta64(m, unit) / s1
self.assertNumberMigrations(changes, "testapp", 0)
limiter.tick_bad_request_counter(request)
self.context = self._extract_context(self.tree)
self.page.visit()
>>> calls = aapl.get_call_data()
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010')
with remove_ccx(usage_key) as (usage_key, restore): return restore( self._modulestore.get_item(usage_key, depth, **kwargs) )
return '.send-email {}'.format(selector)
df = orig_df.copy() df.eval('c = a + b', inplace=True) self.assertRaises(SyntaxError, df.eval, 'c = a = b')
coords = kwargs.pop('coords', None) if coords: self.coords = tuplize(coords)
with self.assertRaises(ValueError): c(halflife=0)
idx = check_ogr_fld(ogr_name) ogr_field = ogr_field_types[idx]
page = DashboardPage(self.browser) page.wait_for_page() self.assertIn( 'The course you are looking for is closed for enrollment', page.banner_text )
if issparse(example): example = example.toarray()
with self.assertNumQueries(12): api.set_credit_requirement_status( user.username, self.course_key, requirements[0]["namespace"], requirements[0]["name"] )
from commerce import signals
raise NotImplementedError()
self.pdf.drawString( horizontal_padding_from_border, y_pos, _(u'Date: {date}').format(date=self.date) )
import copy import logging import os import re import string from distutils.version import LooseVersion as _LooseVersion
data_csv = pd.read_csv(self.file01.replace(".xpt", ".csv")) numeric_as_float(data_csv)
_globals['include'] = Registry.include _globals['extend'] = Registry.make_extend
for app_label, model_name, field_name in sorted(self.old_field_keys - self.new_field_keys): self._generate_removed_field(app_label, model_name, field_name)
for part_svc in [ps_shared_cache_1, ps_shared_cache_2, ps_diff_cache]: self.assertEqual( first_group.id, part_svc.get_user_group_id_for_partition(user_partition_id) )
self.assertEqual( StudentModule.objects.filter( student=self.module_to_reset.student, course_id=self.course.id, module_state_key=self.module_to_reset.module_state_key, ).count(), 0 )
res = grainsmod.filter_by(dict2, grain='xxx', base='default') self.assertEqual(res, dict2['default'])
import logging
offset = self._offset() offset2 = self._offset() offset2.normalize = True self.assertEqual(offset, offset2)
with tm.assertRaisesRegexp(ValueError, expErrMsg): q = Series(self.ts, dtype=object).quantile(0.7, interpolation='higher')
import salt.daemons.flo import salt.daemons.masterapi from raet import raeting from raet.lane.stacking import LaneStack from raet.lane.yarding import RemoteYard
super(TestRequireStudentIdentifier, self).setUp() self.student = UserFactory.create()
return reverse_func(view_name, args=[unicode(course.id), index])
exc_info_on_loglevel=logging.DEBUG
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
res1l, res1r = df1.align(df2, join='left') res2l, res2r = df2.align(df1, join='right')
wkt_w = WKTWriter() with self.assertRaises(TypeError): wkt_w._set_ptr(WKTReader.ptr_type())
self.login() response = self.client.get(self.dont_redirect_url) self.assertEqual(response.status_code, 200)
root = CourseFactory.build(days_early_for_beta="null") sequence = SequenceFactory.build(parent=root) ProblemFactory.build(parent=sequence)
__type__ = None __format__ = None _attributes = None __flatten__ = False
max_len = n if n >= 0 else - 1 - n dropped = self.obj.dropna(how=dropna, axis=self.axis)
n_jobs, n_estimators, starts = _partition_estimators( self.n_estimators, self.n_jobs)
return event['event_type'].startswith('edx.course.enrollment.')
numer = _zero_out_fperr(numer) denom = _zero_out_fperr(denom)
import salt.utils import salt.utils.odict
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
request = self.rf.get('/slash') response = HttpResponseNotFound() self.assertEqual(CommonMiddleware().process_response(request, response), response)
self.assertEqual(module.attempts, 1)
response = self.session.put( "{}/xblock/{}".format(STUDIO_BASE_URL, locator), data=json.dumps(data), headers=self.headers, )
import logging import os.path import os
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
for block_key in block_structure.topological_traversal(): assert ( block_structure.get_transformer_block_field( block_key, cls, data_key, ) == cls._create_block_value(block_key, data_key) )
CACHE_TOOLBOX_DEFAULT_TIMEOUT = getattr( settings, 'CACHE_TOOLBOX_DEFAULT_TIMEOUT', 60 * 60 * 24 * 3, )
obj = WithCustomPK(name=1, value=1) with self.assertRaises(DatabaseError): with transaction.atomic(): obj.save(force_update=True)
for item in mask.split(','): if item not in _MASK_TYPES: return 'Invalid mask type: {0}' . format(item)
from __future__ import absolute_import import time import logging import re import traceback
if file_access_rights(local_dst,os.W_OK,check_above=True):
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
raise NotImplementedError('subclasses of Serializer must provide a start_serialization() method')
ret.update({host_name: {'Disks Added': eligible}})
if r == 0: return True
response = self.client.get( self._url(), HTTP_ACCEPT="text/plain", ) self.assertEqual(response.status_code, 406)
dirname = os.path.normpath(os.path.dirname(path))
from __future__ import absolute_import
cm = confusion_matrix(y_true, y_pred, labels=[0, 1]) assert_array_equal(cm, [[19, 4], [4, 3]])
self.assertIsNone(p2.image)
module_system = get_test_system()
self.cleaned_data[name] = self.initial.get(name, field.initial) continue
return isinstance(array, gt.ABCCategorical) or is_categorical_dtype(array)
import salt.config as config
self._studio_publish_content(1)
s.map(f) s.apply(f) DataFrame(s).applymap(f)
data = { "email": self.EMAIL, "password": self.PASSWORD, }
from __future__ import unicode_literals
qemu_img.__salt__ = {}
raise NotImplementedError('subclasses of Widget must provide a render() method')
DATE_INPUT_FORMATS = [
test_configuration = [ { "urlname": "two_done_block_test_case_0", #"olx": self.olx_scenarios[0],
if timezone.is_aware(now): now = timezone.localtime(now)
reader = self.read_csv(StringIO(self.data1), index_col=0, iterator=True) df = self.read_csv(StringIO(self.data1), index_col=0)
return (field_object.module_type, field_object.field_name)
HAS_LIBS = False try: from pysphere import VIServer, MORTypes, VIException HAS_LIBS = True
self.q(css=".filterable-column .nav-item").click()
parser = self.create_parser(prog_name, subcommand) parser.print_help()
domain = DNS_NAME
template = Template(filename=file_path, module_directory=self.module_directory, input_encoding='utf-8', output_encoding='utf-8', default_filters=['decode.utf8'], encoding_errors='replace', uri=template_name) return template, None
self.q(css='div.problem button.check').click() self.wait_for_ajax()
from __future__ import absolute_import
self.send_signal() self.assertTrue(mock_refund_seat.called) self.assertEqual(mock_refund_seat.call_args[0], (self.course_enrollment, self.student))
mock_refund_seat.reset_mock() self.course_enrollment.refundable = mock.Mock(return_value=False) self.send_signal() self.assertFalse(mock_refund_seat.called)
DEBUG = False SESSION_COOKIE_SECURE = False SESSION_SAVE_EVERY_REQUEST = False SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
'ENABLE_OPENBADGES': False,
if not user_must_complete_entrance_exam(request, user, course): required_content = [content for content in required_content if not content == course.entrance_exam_id]
ds = DataSource(inter_shp)
with self.assertRaises(NotImplementedError): self.client.get(self.url)
block_id = BlockKey.from_usage_key(parent_usage_key) if block_id not in new_structure['blocks']: raise ItemNotFoundError(parent_usage_key)
for password in ["", "a"]: params["password"] = password assert_password_error("A valid password is required")
state = devices[str(dev_id)]['state']['on'] and Const.LAMP_OFF or Const.LAMP_ON
'ENABLE_EDXNOTES': False,
self._do_create_preference_test(False)
self.store.convert_to_draft(self.vertical_y1a, self.user_id)
resp = self.client.post('/courses/def/generate_user_cert') self.assertEqual(resp.status_code, 404)
if hasattr(self, '_dimensions_cache'): del self._dimensions_cache super(ImageFieldFile, self).delete(save)
from salt.exceptions import CommandExecutionError, SaltInvocationError
self.assertIsInstance(Article.objects.iterator(), collections.Iterator)
with self.assertRaises(TestException): module = self.descriptor._xmodule
if os_family == 'FreeBSD': return
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
band, data = chunk(data, pack_size * header[10] * header[11]) band_result = {'data': binascii.unhexlify(band)}
TASK_VALIDATE_ONLY = 0x1 TASK_CREATE = 0x2 TASK_UPDATE = 0x4 TASK_CREATE_OR_UPDATE = 0x6 TASK_DISABLE = 0x8 TASK_DONT_ADD_PRINCIPAL_ACE = 0x10 TASK_IGNORE_REGISTRATION_TRIGGERS = 0x20
types = [(MockDataFrame, MockDataFrame)] try: from pandas import Series, DataFrame types.append((DataFrame, Series)) except ImportError: pass
return get_freq_group(cls.get_freq(resostr))
le = LabelEncoder() ret = le.fit_transform([1, 1, 4, 5, -1, 0]) assert_array_equal(ret, [2, 2, 3, 4, 0, 1])
self.assertEqual(pro.pages, 200)
s = Series(['a', 'b', 'c'], index=[0, 0.5, 1]) tmp = s.copy()
setattr(_MovedItems, move.name, move)
doc_resolvers = {} doc_resolvers['sklearn'] = SphinxDocLinkResolver(app.builder.outdir, relative=True)
import salt.ext.six as six
return SequenceDatasetIterator(self, data_specs, subset_iterator, return_tuple=return_tuple)
save_path.replace('\\', r'\\')
form = self._admin_form(course_mode) self._set_form_verification_deadline(form, self.VERIFICATION_DEADLINE) self._assert_form_has_error(form, "Verification deadline can be set only for verified modes.")
choicegroup = mult_choice_response.xpath('./choicegroup[@type="MultipleChoice"]')[0] choices_list = list(choicegroup.iter('choice'))
I18N_REPORT_DIR = REPORT_DIR / 'i18n'
ser = Series(['A', 'B'], [1, 2]) ser.sort_values()
@property def _prefix(self): raise NotImplementedError('Prefix not defined')
win_timezone.__salt__ = {}
self._assert_cert_status(self.courses[0].id, self.user, CertificateStatuses.notpassing)
lim = max(abs(abs(np.diag(fast_dot(W1, W.T))) - 1)) W = W1 if lim < tol: break
self.prob1 = ItemFactory.create( parent_location=self.vert1.location, category='problem', display_name='untitled problem 1' )
self.assertIsNone(self.request.session.get(SESSION_KEY))
self.make_course(textbooks=[IMAGE_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('book', book_index=0, page='xyzzy')
self.client.logout() response = self.client.get(self.get_token_url) self.assertEqual(response.status_code, 302)
regressor.n_components = 1
if not isinstance(geom, GEOSGeometry) or geom.srid != 4326: raise TypeError('get_zoom() expects a GEOS Geometry with an SRID of 4326.')
self.httpd.shutdown() self.httpd.server_close()
from salt.states import rdp
return _static(path)
if existing['code'] == 200:
return self._data.dtype
'action': ['external_mail', 'delete_selected'], 'index': 0
if course_id is None: course_id = self.course.id return CourseEnrollment.enroll(self.user, course_id, mode='honor')
self.subcluster_labels_ = clusterer.fit_predict( self.subcluster_centers_)
for student in students[5:6]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.deleted, mode='honor', grade=default_grade )
train, test = set(train), set(test)
def __init__( self, contentstore=None,
self.show_question_answer('p1')
with tm.assertRaises(AttributeError): ind.freq
self._verify_xblock_info_state(xblock_info, 'staff_only_message', expected_state, path)
] TIME_INPUT_FORMATS = [
result = df1.loc[(slice('A1')), :] expected = df1.iloc[0:10] assert_frame_equal(result, expected)
call_command('loaddata', *fixture_labels, **{'verbosity': verbosity})
return msgpack.dumps(msg, use_bin_type=use_bin_type)
self.assertIsNone(rewrite_video_url(None, None))
self.assertGroupContent( groups[1], title=u"review (2)", notes=[u"Fourth note", None] )
import salt.utils.cloud import salt.utils.pycrypto as sup import salt.config as config from salt.utils import namespaced_function from salt.exceptions import ( SaltCloudConfigError, SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
embargoed_countries = models.TextField( blank=True, help_text="A comma-separated list of country codes that fall under U.S. embargo restrictions" )
freq = self.freq if isinstance(self, com.ABCPeriodIndex) else None return self._shallow_copy(taken, freq=freq)
return
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:00")
from __future__ import unicode_literals
USER_RESPONSE_DATA = None
if self.restricted.filter(user=student).exists(): cert.status = status.restricted cert.save()
result = data.get_course_enrollment(self.user.username, unicode(self.course.id)) self.assertIsNone(result)
THEME_NAME = ENV_TOKENS.get('THEME_NAME', None) COMPREHENSIVE_THEME_DIR = path(ENV_TOKENS.get('COMPREHENSIVE_THEME_DIR', COMPREHENSIVE_THEME_DIR))
self.db_connection.close_connections()
from __future__ import absolute_import
self.course_outline.a11y_audit.config.set_scope( include=['section.edit-settings-timed-examination'] ) self.course_outline.a11y_audit.check_for_accessibility_errors()
from salttesting import skipIf from salttesting.helpers import (ensure_in_syspath, destructiveTest) ensure_in_syspath('../../')
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, requires_salt_modules, requires_system_grains, destructiveTest, ) ensure_in_syspath('../../')
if com.is_bool_dtype(result): return result return Index(result)
value = self.cleaned_data["following"] if value is False: raise ValidationError("The value of the 'following' parameter must be true.") else: return value
if dataset.y is not None: dataset.y = dataset.y[::patches.shape[0] / reassembled_shape[0]]
if not isnull(new_values).all(): values = new_values
y_hat = sum(all_y_hat) / self.n_estimators
if primary: return getattr(ax, 'left_ax', ax) else: return getattr(ax, 'right_ax', ax)
EmptyPromise( lambda: self.q(css='a.button.action-primary').present, 'Delete prompt is displayed' ).fulfill()
index, name = own_state[0], None if len(own_state) > 1: name = own_state[1]
payment_info = json.loads(response.content) self.assertEqual(payment_info["payment_url"], "/shoppingcart/payment_fake")
format_dateaxis(ax, ax.freq) return lines
css = '.group-name' self.find_css(css).first.fill(value)
self.n_observations = 0 self.minibatch_index = 0
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
with self.assertNumQueries(0): embargo_api.message_url_path(self.course.id, "enrollment")
'sources': [u'example.mp4', u'example.webm', u'http://www.meowmix.com'],
assert_warns(UserWarning, f) failed = True
field_list.reverse() fld_name = field_list.pop()
for k in self.file_mapping: if mod_name in k: yield k
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
self.assertFalse(form.is_valid())
self.set_logged_in_cookies(request)
LOGGER.debug("Flushing the test database...") call_command('flush', interactive=False, verbosity=0) world.absorb({}, 'scenario_dict')
try:
from salt.pillar import Pillar import salt.utils import salt.utils.s3 as s3
self.setlistdefault(key).append(value)
import salt.utils import salt.utils.itertools import salt.utils.decorators as decorators import salt.utils.pkg.rpm from salt.exceptions import ( CommandExecutionError, MinionError, SaltInvocationError )
raise NotImplementedError()
self.save()
if self._impl in ['c_svc', 'nu_svc'] and len(self.classes_) == 2: return -dec_func.ravel()
bad3 = copy(city_mapping) bad3['point'] = 'CURVE'
y = [0, 1, 2, 3] * 3 + [4, 5] * 5 X = np.ones_like(y)
'log_granular_levels': dict,
CREDIT_MODES = [CREDIT_MODE]
try: return calc(arg.astype(np.int64)) except: pass
self._click_button('save_settings')
val = force_text(ogr_field.value, self.encoding)
library_fixture.add_children( XBlockFixtureDesc("html", "Html1"), XBlockFixtureDesc("html", "Html2"), XBlockFixtureDesc("html", "Html3"), )
iris = datasets.load_iris() y_true, y_pred, _ = make_prediction(dataset=iris, binary=False)
self.assertEqual(event.dt, dt.replace(microsecond=0, tzinfo=EAT))
__virtualname__ = 'service'
return [item + '\n' for item in ifcfg.split('\n')]
return any(isinstance(term.value, pd.core.generic.PandasObject) for term in terms)
return self._tax_deduction_msg()
self._api_base = api_base self._configuration = configuration
seen_models = {None: start_alias}
try:
output = self.engine.render_to_string('inheritance10') self.assertEqual(output, '1&3_')
self.assertNotContains(response, '<h2>Author-book relationships</h2>') self.assertNotContains(response, 'Add another Author-Book Relationship') self.assertNotContains(response, 'id="id_Author_books-TOTAL_FORMS"')
version = __import__('django').get_version()
A = neighbors.kneighbors_graph(X, 1, mode='connectivity', include_self=True) assert_array_equal(A.toarray(), np.eye(A.shape[0]))
return name
final_yaml_str = yaml_template % hyper_parameters
if self._result_cache is not None: return len(self._result_cache) return self.query.get_count(using=self.db)
import logging import os
try: shutil.rmtree(repo['lockfile']) except OSError as exc: _add_error(failed, repo, exc)
if not s3_meta: continue
class FakeObj(object): def get_absolute_url(self): return "/hi-there/"
result = df.describe(include=['bool'])
df = DataFrame({"aa": lrange(5), "bb": [2.2] * 5})
msg = _(u"An error occurred with SymbolicResponse. The error was: {error_msg}").format( error_msg=err, ) raise Exception(msg)
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
X, y, X_offset, y_offset, X_scale = _preprocess_data( X, y, fit_intercept=fit_intercept, normalize=normalize, copy=copy)
altered_grader = CourseGradingModel.fetch(self.course.id) self.assertEqual(test_grader.grace_period, altered_grader.grace_period, "Noop update")
info_log.assert_called_with('email sent to new created user at %s', 'test_student@example.com')
ax = _check_plot_works(series.plot.pie, labels=None) self._check_text_labels(ax.texts, [''] * 5)
raise AssertionError('Error performing exclusion: ' 's1: %s s2: %s other: %s' % (s1, s2, other))
n_classes_ = [n_classes_] classes_ = [classes_] class_prior_ = [class_prior_] constant = [constant]
serialization_options = { 'favorite_editor': { 'default': 'vim', }, }
unicode_text = "好 各位同学".decode('utf-8') self.assertTrue(self.video.downloaded_transcript_contains_text('srt', unicode_text))
for enrollment in manual_enrollments: self.assertEqual(enrollment.enrollment.mode, CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG)
_view_name = "profile_image_remove" _replacement_method = 'openedx.core.djangoapps.profile_images.views.ProfileImageView.delete'
absent_state = 'cmd_|-listener_test_listening_non_changing_state_|-echo "Only run once"_|-mod_watch' self.assertNotIn(absent_state, state_run)
self.set_header('Access-Control-Allow-Methods', 'OPTIONS, GET, POST')
content = 'outside <strong>inside</strong> after' payload = get_response(content, 'June 22, 2000') self.assertHTMLEqual(content, payload['content'], "text outside tag")
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
assert_raises(ValueError, cls().partial_fit, X2, y2[:-1], classes=np.unique(y2))
def __add__(self, other): 'add another list-like object' return self.__class__(list(self) + list(other))
dist_unstructured = out_unstructured[-1] dist_structured = out_structured[-1]
X_trans = minmax_scale(X) assert_array_almost_equal(X_trans, X_expected_0_1) X_trans = minmax_scale(X, feature_range=(1, 2)) assert_array_almost_equal(X_trans, X_expected_1_2)
if reversed: a, b = b, a
kernel32 = ctypes.WinDLL('kernel32') advapi32 = ctypes.WinDLL('advapi32')
X, y, _, _, _ = _preprocess_data(X, y, fit_intercept, normalize, copy=False)
nic_opts = {}
return self.sm_ols.df_model
course_fixture = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
log.exception(u"Error occurred while retrieving course enrollment details from the cache")
with salt.utils.fopen(args.config) as fh_: __opts__.update(yaml.load(fh_.read()))
import salt.returners import salt.utils.pushover from salt.exceptions import SaltInvocationError
self.values.extend(values_seq)
self.make_course() url = self.make_url('html_book', book_index=0, chapter=1) response = self.client.get(url) self.assertEqual(response.status_code, 404)
dirname, filename = os.path.split(filename) return os.path.normpath(os.path.join(dirname, self.get_valid_name(filename)))
for vname in values: if vname not in current_communities: __salt__['reg.set_value'](_HKEY, _COMMUNITIES_KEY, vname, values[vname], 'REG_DWORD')
return super(ConfigurationModelStrategy, self).setting(name, default, backend)
all_y_hat = Parallel(n_jobs=n_jobs, verbose=self.verbose, backend="threading")( delayed(parallel_helper)(e, 'predict', X, check_input=False) for e in self.estimators_)
iris = datasets.load_iris() X = iris.data y = iris.target n_classes = np.unique(y).size
dir_name.rmtree_p() dir_name.mkdir_p()
import fnmatch import logging import time
n_samples_range = np.logspace(2, 6, 5) colors = plt.cm.Blues(np.linspace(0.3, 1.0, len(n_samples_range)))
return self._data.is_view
choice = random.SystemRandom().choice return ''.join([choice(chars) for _i in range(length)])
return aside_id.definition_key
f = lambda x: x.set_index('a', inplace=True) _check_f(data.copy(), f)
if bucket_size: cmd += ' --bucket {0}'.format(bucket_size)
ret = self.run_function('state.sls', mods='issue-1879', timeout=120) self.assertSaltTrueReturn(ret)
self.create_xblock(parent_usage_key=self.chapter_usage_key, category='sequential2')
scorer = make_scorer(fbeta_score, beta=2) score1 = scorer(clf, X_test, y_test) score2 = fbeta_score(y_test, clf.predict(X_test), beta=2) assert_almost_equal(score1, score2)
days_early_for_beta = FloatField(null=True) mobile_available = BooleanField(default=False) visible_to_staff_only = BooleanField(default=False)
return JsonResponse({"error": "Cohort name must be specified."}, 400)
if user.is_anonymous(): return None
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
ps_shared_cache_1 = self._create_service(username, shared_cache) ps_shared_cache_2 = self._create_service(username, shared_cache)
if Y is not None: state_above = dbm.hidden_layers[-1].downward_state(Y) layer_above = dbm.hidden_layers[-1] assert len(dbm.hidden_layers) > 1
for i in cfg.versionfile_source.split('/'): root = os.path.dirname(root)
row = reader.next()
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.utils import vt
connections['default'].allow_thread_sharing = True t2 = threading.Thread(target=runner2, args=[connections['default']]) t2.start() t2.join()
logging.captureWarnings(self._old_capture_state)
if style: first_row = startrow + cell.row + 1 last_row = startrow + cell.mergestart + 1 first_col = startcol + cell.col + 1 last_col = startcol + cell.mergeend + 1
sorted_deps = serializers.sort_dependencies( [('fixtures_regress', [M2MSimpleA, M2MSimpleB])] ) self.assertEqual(sorted_deps, [M2MSimpleB, M2MSimpleA])
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.fill_in_run(course_key))
@python_2_unicode_compatible class Widget(models.Model): name = models.CharField(max_length=255)
return _do_static(parser, token)
obj.delete() os.unlink(full_name)
return self.context["group_ids_to_names"].get(obj["group_id"])
self._captions_visibility(False)
return "{}/library/{}".format(BASE_URL, unicode(self.locator))
name_instructions = _(u"Your legal name, used for any certificates you earn.")
return CourseLocator(org, course, run, deprecated=True)
import os
key = (ct.app_label, ct.model) self._cache.setdefault(using, {})[key] = ct self._cache.setdefault(using, {})[ct.id] = ct
with tm.assert_produces_warning(FutureWarning): result = df.drop_duplicates('C', take_last=True) expected = df.ix[[3, 7]] tm.assert_frame_equal(result, expected)
desc_score_indices = np.argsort(y_score, kind="mergesort")[::-1] y_score = y_score[desc_score_indices] y_true = y_true[desc_score_indices] if sample_weight is not None: weight = sample_weight[desc_score_indices] else: weight = 1.
log = logging.getLogger(__name__)
changes = autodetector.changes( graph=loader.graph, trim_to_apps=app_labels or None, convert_apps=app_labels or None, migration_name=self.migration_name, )
ADD = '+' SUB = '-' MUL = '*' DIV = '/' POW = '^' MOD = '%%'
arg_spec_for_format = arg_spec[:7 if PY3_OR_LATER else 4]
left = self.rng[:5] right = self.rng[5:10]
self.file1.close() self.file2.close() shutil.rmtree(temp_storage_dir)
result = df.loc['2016-01-02 12'] expected = df.iloc[9:12] tm.assert_frame_equal(result, expected)
self._check_results( test_user, expected_user_accessible_blocks, blocks_with_differing_access, transformers, )
return template_name, None, msg_prefix
if len(student) != 2: if len(student) > 0: build_row_errors('data_format_error', student[user_index], row_num)
dom1 = parse_html('<p>foo') dom2 = parse_html('<p>foo</p>') self.assertIn(dom1, dom2) self.assertIn(dom2, dom1)
return self.retried_nomax + self.retried_withmax
import lettuce.django
if load['jid'] == 'req': load['jid'] = prep_jid(nocache=load.get('nocache', False))
response = self.process_response(secure=True, headers={"x-content-type-options": "foo"}) self.assertEqual(response["x-content-type-options"], "foo")
if 'nobase' not in ks_opts['packages']['options']: sls['base'] = {'pkg_group': ['installed']}
state_frame = self._get_context_stack_frame(context) if self not in state_frame: state_frame[self] = None
X[0, 0] = 0 X[2, 1] = 0 X[4, 3] = 0 X_lil = sp.lil_matrix(X) X_lil[1, 0] = 0 X[1, 0] = 0
regr = linear_model.LinearRegression()
test_connection = copy.copy(connections[DEFAULT_DB_ALIAS]) test_connection.settings_dict = copy.copy(connections[DEFAULT_DB_ALIAS].settings_dict) return test_connection
self.log_in_as_instructor() self.student_admin_section = self.visit_instructor_dashboard().select_student_admin()
self.assertEqual(result, expected_without_index)
import salt.utils
return (self.semi_major, self.semi_minor, self.inverse_flattening)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
response = self.http_get_for_course(HTTP_AUTHORIZATION=None) self.assertEqual(response.status_code, 401)
def true_and_notnull(x, *args, **kwargs): b = wrapper(x, *args, **kwargs) return b and notnull(b)
X = rng.randint(0, 4, size=(1000, 1)) y = rng.rand(1000) n_trees = 500
tasks = json.loads(response.content)['tasks'] self.assertEqual(len(tasks), 0)
six.assertRegex(self, yaml, r"\n fields: {dt: !(!timestamp)? '%s'}" % re.escape(dt))
for child_hierarchy in block_hierarchy.get('#children', []): self.add_parents(child_hierarchy, block_map)
if not path.startswith('/'): url = urljoin(response.request['PATH_INFO'], url) path = urljoin(response.request['PATH_INFO'], path)
transactions = self._latest_history()['transactions'] self.assertItemsEqual(transactions, expected_transactions)
problem = self.store.get_item(problem.location)
pass
import salt.utils.pycrypto from salt.exceptions import SaltInvocationError
width = self.ext.config['metacafe_width'][0] height = self.ext.config['metacafe_height'][0] return flash_object(url, width, height)
if s3_meta: files = __get_pillar_files_from_s3_meta(s3_meta) environments = __get_pillar_environments(files)
'ENABLE_XBLOCK_VIEW_ENDPOINT': False,
return (self.asi8 == tslib.iNaT)
varname = tokens[0][0] self.variables_used.add(varname)
cmd = ['rpmbuild', '-ba'] cmd.extend(define_opts) cmd.append(spec_path) stdout, stderr, rcode = _run_command(cmd)
response = self.client.get('/second_test/') self.assertEqual(response.status_code, 200) self.assertEqual(response.content, b'/second_test/')
self.alpha_ = best_alpha self.cv_alphas_ = all_alphas self.cv_mse_path_ = mse_path
gp = GaussianProcessRegressor(kernel=kernel, alpha=(dy / y) ** 2, n_restarts_optimizer=10)
result = self.get_result(allow_cache_miss) self.verify_result_with_val_profile(result)
pueblo = City.objects.get(name='Pueblo') state = State.objects.filter(poly__contains=pueblo.point) cities_within_state = City.objects.filter(id__in=state)
diff = self._diff_list_dicts(api_keys, items_dt, 'id')
raise NotImplementedError('subclasses of BaseDatabaseOperations may require a datetrunc_sql() method')
import json
if box is None: return None shell = Geometry(box, srid).shell xmin, ymin = shell[0][:2] xmax, ymax = shell[2][:2] return (xmin, ymin, xmax, ymax)
pass
r = self.series.resample('H') with tm.assert_produces_warning(None): str(r) with tm.assert_produces_warning(None): repr(r)
self.assertEqual(self.video.speed, '2.0x')
StudentViewTransformer.collect(block_structure) BlockCountsTransformer.collect(block_structure) BlockDepthTransformer.collect(block_structure) BlockNavigationTransformer.collect(block_structure)
continue theano.tests.unittest_tools.verify_grad(op, [a.get_value()])
gaussian_matrix_params = { "n_components": opts.n_components, "random_state": opts.random_seed } transformers["GaussianRandomProjection"] = \ GaussianRandomProjection(**gaussian_matrix_params)
__func_alias__ = {'set_': 'set'}
class MyWidget(TextInput): pass
site.register(Holder, HolderAdmin, inlines=[InnerInline]) site.register(Holder2, HolderAdmin, inlines=[InnerInline2]) site.register(Holder3, inlines=[InnerInline3])
selectors = compound_hint.get('value').upper().split() selector_set = set(selectors)
return self._intercept
from __future__ import unicode_literals
self.register_get_thread_response(thread) return get_comment_list(self.request, thread["id"], endorsed, page, page_size)
class NoTemplateResponseMiddleware(TestMiddleware): def process_template_response(self, request, response): super(NoTemplateResponseMiddleware, self).process_template_response(request, response)
self.assertFalse(self._has_changes(published_xblock.location))
services = sorted(set(services))
logging.getLogger().setLevel(getattr(logging, FLAGS.logging_level))
with check_mongo_calls(max_find, max_send): self.store.unpublish(self.vertical_x1a, self.user_id)
context = RequestContext(request, processors=[csrf]) template = Template("{% csrf_token %}") return HttpResponse(template.render(context))
cached_files = __salt__['cp.cache_dir']( winrepo_source_dir, saltenv, include_pat='*.sls' ) genrepo(saltenv=saltenv) return cached_files
check_predictions(LogisticRegression(random_state=0), X, Y1) check_predictions(LogisticRegression(random_state=0), X_sp, Y1)
test_options.pop(0) if len(test_options) <= 1: break
self.check_headers(self.handler._get_headers())
oauth2_adapter = adapters.DOPAdapter()
opts['utils_dirs'] = ( opts.get('utils_dirs') or [os.path.join(opts['extension_modules'], 'utils')] )
def contains(self, other): "Returns true if other.within(this) returns true." return capi.geos_contains(self.ptr, other.ptr)
from courseware.views.views import render_xblock return render_xblock(request, unicode(usage_key), check_if_enrolled=False)
if not hasattr(self, '_loaded_data'): messages, all_retrieved = self._get() self._loaded_data = messages or [] return self._loaded_data
RSTR = '_edbc7885e4f9aac9b83b35999b68d015148caf467b78fa39c05f669c0ff89878' RSTR_RE = re.compile(r'(?:^|\r?\n)' + RSTR + r'(?:\r?\n|$)')
from __future__ import unicode_literals
data_inherited = models.CharField(max_length=10) fk_inherited = models.ForeignKey(Relation, models.CASCADE, related_name='fk_concrete_rel')
return LocalTimezone()
return super(DatabaseOperations, self).last_executed_query(cursor, statement, params)
model = SelectFromModel(clf, prefit=True) assert_raises(ValueError, model.fit, data, y)
a = self.Answer.objects.create(text="Number five", question=self.q1)
foo = df['z']
from salt.modules import rpm
buf = StringIO()
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010')
result = algos.take_nd(arr, indexer, axis=0) expected = arr.take(indexer, axis=0) expected[-1] = np.nan tm.assert_almost_equal(result, expected)
try: log.info("Course import %s: Upload complete", courselike_key) _save_request_status(request, courselike_string, 1)
second_result = SoftwareSecurePhotoVerification.get_initial_verification(user=user) self.assertIsNotNone(second_result) self.assertEqual(second_result, first_result)
if not request.user.is_authenticated(): return redirect(reverse('signin_user'), next=request.path)
raise NotImplementedError('subclasses of BaseDatabaseIntrospection may require a get_table_list() method')
exams = get_all_exams_for_course(unicode(self.course.id)) self.assertEqual(len(exams), 1)
raise DeprecationWarning( '`salt.utils.cloud.deploy_script now only accepts ' 'dictionaries for it\'s `minion_conf` parameter. ' 'Loading YAML...' )
subtask_status.increment(state=SUCCESS) return subtask_status, None
self._check_results(self.staff, set(range(len(self.parents_map))), {}, transformers)
has_nodata = pixeltype >= 64 if has_nodata: pixeltype -= 64
class PedanticField(forms.Field): def to_python(self, value): raise ValidationError('Whatever')
#latex_font_size = '10pt'
s = pd.Series([1, 2, 3, 4]) self.assertEqual(s.index.dtype, np.int64)
sample_weight = sample_weight * sample_mask.astype(np.float64)
account_settings = get_account_settings(self.default_request, self.different_user.username) self.assertNotIn("email", account_settings)
self.block_type = block_data.get('block_type', None)
if zmq is None: raise unittest.SkipTest
js = {'coffee': [resource_string(__name__, 'js/src/raw/edit/metadata-only.coffee')]} js_module_name = "MetadataOnlyEditingDescriptor" mako_template = "widgets/metadata-only-edit.html"
wide_means = self.panel.to_panel().mean('major') assert_frame_equal(means, wide_means)
self.xblock.location = Location("org", "import", "run", "category", "stubxblock")
self.check_ordering_of_field_choices([self.b2, self.b1])
try: iter(update_callbacks) self.update_callbacks = update_callbacks except TypeError: self.update_callbacks = [update_callbacks]
df = DataFrame(index=['a', 'b']) assert_frame_equal(df, df.replace(5, 7))
def f(): s.iloc[3.0] = 0 self.assertRaises(TypeError, f)
ret = client.get_datastore(DatastoreType.RUNNING) GRAINS_CACHE.update(ret) return GRAINS_CACHE
if '.' not in var and 'e' not in var.lower(): self.literal = int(self.literal)
return course_key.to_deprecated_string()
self.assertDeserializeEqual(False, 'false') self.assertDeserializeEqual(True, 'true')
truncated = ts.truncate() assert_series_equal(truncated, ts)
if label_flags.size == 0 or (label_flags.size == 1 and label_flags[0] == 0 and vmin % 1 > 0.0): return False else: return True
iris = datasets.load_iris()
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file) self.addCleanup(remove_file, self.TEST_INDEX_FILENAME)
rabbitmq.__salt__ = {}
'render_dirs': list,
requirements = get_credit_requirements(self.course.id, namespace="reverification") self.assertEqual(len(requirements), 1)
salt '*' win_update.list_updates
from salt.beacons import inotify
if request is not None and hasattr(request, 'META') and header_name in request.META: return request.META[header_name] else: return default
idx = 0 start_idx = end_idx for rd in rings: start_idx = restore_ring(img, idx, rd, dense_input, start_idx) idx += rd
if not self.apps_ready: raise AppRegistryNotReady("Apps aren't loaded yet.")
result = first.difference([]) self.assertTrue(first.equals(result)) self.assertEqual(first.names, result.names)
log.exception( u"%s in Range header: %s for content: %s", exception.message, header_value, unicode(loc) )
raise ValueError
data = { "indexed_count": indexed_count, 'category': category, } tracker.emit( event_name, data )
math_interpreter.check_variables(all_variables, all_functions)
ae = Autoencoder(5, 7, act_enc='tanh', act_dec='cos', tied_weights=True) model = UntiedAutoencoder(ae) model._ensure_extensions()
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
from __future__ import absolute_import
master_doc = 'index'
self.socket.close()
assert_series_equal(df[:0].dtypes, ex_dtypes) assert_series_equal(df[:0].ftypes, ex_ftypes)
del bmark
get_request_dict = {} result = module.reset_problem(get_request_dict)
self.connection_reset = connection_reset
layer_1_detector = FilterActs()(images, filters)
if not _valid_composer(composer): raise CommandNotFoundError( '\'composer.{0}\' is not available. Couldn\'t find \'{1}\'.' .format(action, composer) )
try: import influxdb import influxdb.influxdb08 HAS_INFLUXDB = True except ImportError: HAS_INFLUXDB = False
class FieldOverridePost(Post): class Meta: proxy = True
user2 = UserFactory.create() module.descriptor.bind_for_student(module.system, user2.id)
return self.cleaned_data['return_type'] or 'dict'
potential_clashes = rel_opts.fields + rel_opts.many_to_many for clash_field in potential_clashes:
from pandas import NaT
self._check_stat_op('sum', np.sum, frame=self.mixed_float.astype('float32'), has_numeric_only=True, check_dtype=False, check_less_precise=True)
delete_thread(request, thread_id) return Response(status=204)
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
raise NotImplementedError('subclasses of SessionBase must provide an exists() method')
tsframe = self.tsframe.copy().astype(np.float32) tsframe['A'][:5] = nan tsframe['A'][-5:] = nan
for saltenv in environments: env_files = [k for k in files if k['Key'].startswith(saltenv)]
os.makedirs(fn_, **mode)
return _get_array_element('contrast change', label, (0.8, 1.3))
recipients_info[email] += 1 to_list.pop()
from __future__ import unicode_literals
credit_api.set_credit_requirements(
s = Series(list('abc'))
if correct: style = QUESTION_HINT_CORRECT_STYLE else: style = QUESTION_HINT_INCORRECT_STYLE
self.import_static(data_path, dest_id)
if vm.config.template: status = 'VMware tools cannot be updated on a template' return status
self._choose_algorithm(self.algorithm, self.metric)
n_topics, X = _build_sparse_mtx() lda = LatentDirichletAllocation(n_topics=n_topics, max_iter=10, random_state=0) distr = lda.fit_transform(X) perplexity_1 = lda.perplexity(X, distr, sub_sampling=False)
g = feature.geom
exclude.extend(self.form._meta.exclude)
qs_args = { 'issuing_component': badge_class.issuing_component, 'slug': badge_class.slug, } if check_course: qs_args['course_id'] = self.get_course_id(wildcard, badge_class) return qs_args
for this_X in (X, X_csr): mb_k_means = MiniBatchKMeans(n_clusters=n_clusters, batch_size=100, random_state=42) mb_k_means.fit(this_X)
pass
non_int_round_Series = Series(non_int_round_dict) with self.assertRaises(TypeError): df.round(non_int_round_Series)
watch = salt.utils.alias_function(wait, 'watch')
if numpy is True and df.shape == (0, 0): assert unser.shape[0] == 0 else: assert_almost_equal(df.values, unser.values, check_dtype=check_numpy_dtype)
course_key = courselike.id
try: m = missing.clean_fill_method(method) except: m = None
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
indices = mask.sp_index.indices
from __future__ import absolute_import import os
return self.get_input_space()
self.parse_args()
logging.getLogger('boto3').setLevel(logging.CRITICAL) HAS_BOTO = True
ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_ ).astype(np.bool_) ref_inlier_mask[outliers] = False
clf = ForestClassifier(class_weight='auto', warm_start=True, random_state=0) assert_warns(UserWarning, clf.fit, X, y) assert_warns(UserWarning, clf.fit, X, _y)
needed_holds.append(hold)
with self.assertNumQueries(0): self.assertRaises(KeyError, self.kvs.get, user_state_key('not_a_field'))
return JavaScriptCatalog.as_view(packages=['django.contrib.admin'])(request)
doc = func.__doc__
bower.__salt__ = {}
localized = DatetimeIndex(times, tz=tz, ambiguous=is_dst) self.assert_index_equal(dr, localized)
import salt.ext.six as six
from __future__ import absolute_import import os import random import string
class BadForm(ArticleForm, BaseCategoryForm): pass
i = np.argsort(dist2, axis=1) row_ind = np.arange(n_rows)[:, None] dist2 = dist2[row_ind, i] ind2 = ind2[row_ind, i]
return set(MicrositeOrganizationMapping.objects.all().values_list('organization', flat=True))
tsframe = self.tsframe old_index = tsframe.index new_index = [old_index, np.arange(len(old_index))] tsframe.index = MultiIndex.from_arrays(new_index)
z = SouthTexasZipcode.objects.get(name='77005')
print(client_error)
self.assertEqual(len(installed), 2)
run_tests(df, rhs, right)
if not overrides_disabled(): for provider in self.providers: value = provider.get(block, name, NOTSET) if value is not NOTSET: return value return NOTSET
expected = Float64Index(arr) a = np.zeros(5, dtype='float64') result = fidx - a tm.assert_index_equal(result, expected)
y = (y > 4).astype(np.int)
df.sort_values(by=["unsort"], ascending=False)
self._studio_reindex()
step_size = x if self.verbose: logger.info('best objective: {0}'.format(mn)) assert not np.isnan(mn)
nav_dict[sec_title] = self._subsection_titles(sec_index + 1)
try: import boto import boto.elasticache import boto.utils logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
delvols_on_destroy = kwargs.get('del_all_vols_on_destroy', None)
pruned_block_relations = defaultdict(_BlockRelations) old_block_relations = self._block_relations
from salt.modules import mac_package as macpackage
request.META["HTTP_HOST"] = "edge.edx.org" response = index(request)
self.assertIsInstance(request.COOKIES, dict)
return parse(out)
from __future__ import unicode_literals
result = _agg(arg, _agg_2dim)
X = FeatureHasher().transform([{'foo': 0}]) assert_equal(X.data.shape, (0,))
try: import salt.utils.etcd_util HAS_LIBS = True except ImportError: HAS_LIBS = False
self.assertEqual(self.func(None), [sessions.W014])
CoursewareSearchIndexer.do_course_reindex(store, course.id) deleted_count = 1 + load_factor + (load_factor ** 2) + (load_factor ** 3) self.assert_search_count(course_size - deleted_count)
import os import sys
self._regex = regex self._regex_dict = {}
__valid_configs = { 'user': [ 'tomcat-manager.user', 'tomcat-manager:user' ], 'passwd': [ 'tomcat-manager.passwd', 'tomcat-manager:passwd' ] }
if name in list_tasks(location) and not force: return '{0} already exists'.format(name)
self.assertEquals( preview.latex_preview('epsilon_max', variables=['epsilon_max']), r'\epsilon_{max}' )
cls.create_and_enroll_student( courses=[cls.test_course_1, cls.test_course_2], username='student_enrolled_both_courses_other_team' )
if not found: return False
return lxml.html.tostring(self.table)
thread_yields = [100, 200, 500, 1000] thread_locks = [2, 4, 8, 16]
return ''.join(self.fed)
if usage_key.block_type != "problem": return False descriptor = self.store.get_item(usage_key, depth=0) assert isinstance(descriptor, CapaDescriptor) return capa_type in descriptor.problem_types
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
from __future__ import absolute_import
self.type = None self.data = None self.choices_display_names = None
if has_nodata: band_result['nodata_value'] = nodata
warning_string = 'Found another file'
module_path, _, name = engine_path.rpartition('.') return getattr(importlib.import_module(module_path), name)
import salt.utils import salt.utils.itertools from salt.exceptions import SaltInvocationError, CommandExecutionError
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
y = train['y'][:, 0] - 1 assert y.shape == (5000,)
if delimiter is None: delimiter = sep
if not is_safe_url(url=redirect_to, host=request.get_host()): return resolve_url(settings.LOGIN_REDIRECT_URL) return redirect_to
added = self.frame + self.mixed_float _check_mixed_float(added, dtype='float64') added = self.mixed_float + self.frame _check_mixed_float(added, dtype='float64')
log.exception("Error in django view.") return render_to_response(template_path, context)
if isinstance(address, int): self._check_int_address(address) self._ip = address return
self.assertFalse(issubclass(df.DateCol.dtype.type, np.datetime64), "DateCol loaded with incorrect type")
X = [[0], [1]] Y = [[-1], [2]]
except (TypeError, AttributeError, KeyError, ValueError, IndexError):
def _get_rename_function(mapper): if isinstance(mapper, (dict, ABCSeries)):
self.split_test_module.user_partition_id = 999
([], 'honor'),
if rerandomize == RANDOMIZATION.NEVER: self.assertEqual(seed, 1, msg="Seed should always be 1 when rerandomize='%s'" % rerandomize)
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
return _has_staff_access_to_location(user, descriptor.location, course_key)
key = safe_key('key', 'a' * 300, 'version') self.assertTrue(self._is_valid_key(key))
pass
assert_equal((i + 1), scaler_incr.n_samples_seen_)
import integration
original = Microsite.objects.get(id=instance.id) _make_archive_copy(original)
fstypes.add(arg)
try: certificate_exception, student = parse_request_data_and_get_user(request, course_key) except ValueError as error: return JsonResponse({'success': False, 'message': error.message}, status=400)
self._auto_auth(self.USERNAME, self.EMAIL, False) self.courseware_search_page.visit() self.courseware_search_page.search_for_term(search_term) return search_term in self.courseware_search_page.search_results.html[0]
if index is None: ix = np.arange(self._lines_read - read_lines, self._lines_read) data = data.set_index(ix)
with self._secondary_action_menu_open(".response_{} .discussion-response".format(response_id)): return self._is_element_visible(".response_{} .discussion-response .action-edit".format(response_id))
self.assertEquals(len(audit_log_calls), 0)
team = Team.objects.create(name="Red Vipers") Player(name="Timmy").save() Player(name="Bobby", team=team).save()
app.release_serving()
idx = info.get(self.name) if idx is not None: self.__dict__.update(idx)
return []
htown = fromstr('POINT(1947516.83115183 6322297.06040572)', srid=3084) ptown = fromstr('POINT(992363.390841912 481455.395105533)', srid=2774)
from __future__ import absolute_import
if not uninstaller: uninstaller = pkginfo[version_num].get('installer')
return self.data_specs
ret = self.run_state( 'file.directory', name=tmp_dir, follow_symlinks=False, user=user, group=group, recurse=['user', 'group'] ) self.assertSaltTrueReturn(ret)
from sklearn.linear_model import ElasticNet
return value or None
if self.terms is not None: self.condition, self.filter = self.terms.evaluate()
from salt.states import network
reg = RidgeClassifier(class_weight='balanced') reg.fit(X, y) assert_array_equal(reg.predict([[0.2, -1.0]]), np.array([1]))
from .celery import APP as CELERY_APP
from salt.states import vbox_guest
from __future__ import absolute_import
MobileApiConfig(video_profiles="mobile_low,mobile_high,youtube").save()
GENERATE_PROFILE_SCORES = False
cache_stat = os.stat(list_cache) age = time.time() - cache_stat.st_mtime
student_choices = set(choices) required_selected = len(self.correct_choices - student_choices) == 0 no_extra_selected = len(student_choices - self.correct_choices) == 0 correct = required_selected and no_extra_selected return correct
cauth = EmbargoedCourse(course_id=course_id, embargoed=True) cauth.save()
incorrect = y_predict != y
dropped = df.dropna(axis=1, how='all') assert_frame_equal(dropped, df)
import json
if sys.version_info < (2, 7): raise nose.SkipTest('on python version < 2.7')
from __future__ import absolute_import
self.q(css=self._bounded_selector('span.message-text a')).first.click()
authors = [ 'Thomas S. Hatch <thatch45@gmail.com> and many others, please see the Authors file', ]
return BASE_URL + "/" + self.url_path + "/user/" + self.user_id + "/course/" + self.course_id
with open(Env.METRICS_DIR / "pylint", "w") as f: f.write(violations_count_str)
Site.objects.all().delete() management.call_command('loaddata', 'fixture1.json', verbosity=0)
del DEFAULT_FILE_STORAGE MEDIA_ROOT = "/edx/var/edxapp/uploads"
try: socket.inet_pton(address_family, ip) except socket.error: return False
result = normalize_date(result)
clf = self.factory().fit(X2, Y2, coef_init=np.zeros((3, 2)))
self.assertTrue(has_access(beta_tester, 'load', self_paced_course)) self.assertTrue(has_access(beta_tester, 'load', self_paced_section, self_paced_course.id))
datasetCache = cache.datasetCache im_path = datasetCache.cache_file(im_path)
self._submit_photos( face_image=self.IMAGE_DATA, photo_id_image=self.IMAGE_DATA, full_name=self.FULL_NAME )
module = CapaFactory.create(attempts=1)
try: try: func, args, kwargs = self._job_queue.get(timeout=1)
'ENABLE_VERIFIED_CERTIFICATES': False,
from __future__ import absolute_import import sys import types
self.assert_numpy_array_equal(di_test.values, localized.values)
'default': { 'BACKEND': 'django.core.cache.backends.dummy.DummyCache', },
return self.values.flags
c = Client() login = c.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
return self.store.get_course(courselike.id.replace(branch=None, version_guid=None))
cc_thread, context = _get_thread_and_context(request, thread_id) if can_delete(cc_thread, context): cc_thread.delete() thread_deleted.send(sender=None, user=request.user, post=cc_thread) else: raise PermissionDenied
estimator.fit(X, y) coef, intercept, dual_gap = (estimator.coef_, estimator.intercept_, estimator.dual_gap_)
pass
with self.assertRaises(PermissionDenied): self.get_form(expected_valid=False)
DefaultFeed = Rss201rev2Feed
import salt.ext.six as six
if namespace in LOOKUP: del LOOKUP[namespace]
con_x = self.conn the_sum = sum([my_c0[0] for my_c0 in con_x.execute("select * from mono_df")]) self.assertEqual(the_sum, 3)
test_command = 'sysbench --num-threads=250 --test=mutex ' test_command += '--mutex-num={0} --mutex-locks={1} --mutex-loops={2} run ' result = None ret_val = {}
function_names = {}
self.assertEqual(toy.graded, True)
title = ugettext_noop('Discussion') priority = None is_default = False
self.win_downloader = self.update_session.CreateUpdateDownloader() self.win_downloader.Updates = self.download_collection
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
tol = 2 * np.finfo(A.dtype).eps
check_cv_coverage(cv, expected_n_iter=3, n_samples=len(y))
micro_measure = metric(y_true, y_pred, average="micro") assert_almost_equal(micro_measure, metric(y_true_binarize.ravel(), y_pred_binarize.ravel()))
from __future__ import absolute_import
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salt.modules import cpan cpan.__grains__ = {} cpan.__salt__ = {} cpan.__context__ = {}
self.n_nonzero_coefs_ = max(int(0.1 * n_features), 1)
if data.dtype.kind in ['M', 'm']: data = _sanitize_array(data, index, copy=copy)
def _get_course_name(el): return el.text return self.q(css='h3.course-title > a').map(_get_course_name).results
if 'enabled' not in schedule[job]: schedule[job]['enabled'] = True
Number.objects.filter(pk=self.n.pk).update(integer=F('integer') - 15, float=F('float') - 42.7)
img[i, j] /= float(min(i + 1, p_h, i_h - i) * min(j + 1, p_w, i_w - j))
@override_settings(DATABASE_ROUTERS=[TestRouter()]) class RouterTestCase(TestCase): multi_db = True
corr_x_y = corr(x, y) corr_y_x = corr(y, x) assert_equal(corr_x_y, corr_y_x)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
result = _chkconfig_is_enabled(name, runlevel) if result: return True
assert_raises(ValueError, cval.KFold, 2.5, 2)
MUTABLE = False
self.assertRaises(Exception, func, p1, df)
data = { "form-TOTAL_FORMS": "3", "form-INITIAL_FORMS": "3", "form-MAX_NUM_FORMS": "0",
self.send_get(self.anonymous_client, expected_status=401) self.send_patch(self.anonymous_client, {}, expected_status=401)
n_samples = 100
assert_less(np.sqrt(np.mean((X_iso - X_iso2) ** 2)), 2 * noise_scale)
axes = [slice(None)] * obj.ndim axes[axis] = key return tuple(axes)
self.__class__ = OGRFieldTypes[self.type]
import salt.utils.reactor import salt.utils.event import ioflo.base.deeding
log.error( 'Unrecognized target engine "{0}" for' ' target expression "{1}"'.format( target_info['engine'], word, ) ) return []
white_label_org = microsite.get_value('course_org_filter') if white_label_org: zendesk_tags = zendesk_tags + ["whitelabel_{org}".format(org=white_label_org)]
rs = self.ts.diff(-1) xp = self.ts - self.ts.shift(-1) assert_series_equal(rs, xp)
self.assertRaises(KeyError, lambda: df.loc[slice(None), [1]])
if six.PY3: invalid_related_names.append('，')
train.algorithm.termination_criterion = EpochCounter(max_epochs=1) train.extensions.pop(0) train.save_freq = 0 train.main_loop()
with tm.assert_produces_warning(None):
post_params = {key: json.dumps(val)} response = requests.put(self.url, data=post_params) self.assertEqual(response.status_code, 200)
with self.assertRaises(SurveyFormNotFound): SurveyForm.get(self.test_survey_name)
dive = Book.objects.using('other').get(title='Dive into Python') self.assertEqual(dive._state.db, 'other')
return self.q(css="#register-username").attrs('value')[0]
rs.mean() getattr(rs, attr)
f = lambda x: x.reset_index(inplace=True, drop=True) _check_f(data.set_index('a')['c'], f)
from __future__ import absolute_import
spot_prefix = ''
if self.forms: return self.forms[0].is_multipart() else: return self.empty_form.is_multipart()
child_vertical = ItemFactory.create(parent_location=vertical.location, category='vertical', display_name='Child Vertical') self.assertEqual(xblock_type_display_name(child_vertical), u'Vertical')
f = ArticleForm() with self.assertRaises(ValidationError): f.fields['status'].clean('42')
if self._selection is None: slice_axis = self.obj.columns else: slice_axis = self._selection_list slicer = lambda x: self.obj[x]
'a minute from now', '%(count)s minutes from now', count
return ThreadSerializer(thread, context=get_context(self.course, self.request)).data
key = '^' + name.lstrip('^').rstrip('$') + '$'
self.assertEqual( repr(Timestamp(2015, 11, 12)), repr(Timestamp('20151112')))
self.client.logout() self.assertEqual(403, self._post_to_view().status_code)
modulestore()
assert_greater_equal(call_count, minimum_calls)
plt.figure(figsize=(20, 6))
df = DataFrame({'bools': [True, False, True]}) result = df.replace(False, True) self.assertTrue(result.values.all())
if nan_rep is None: nan_rep = 'nan'
if not com.is_list_like(rhs): rhs = [rhs] if isinstance(rhs, np.ndarray): rhs = rhs.ravel() return rhs
list_staff_master_course = list_with_level(self.course, 'staff') list_instructor_master_course = list_with_level(self.course, 'instructor')
field_type, geo_params = connection.introspection.get_geometry_type(table_name, geo_col) field_params.update(geo_params)
try: import jsonschema import jsonschema.exceptions HAS_JSONSCHEMA = True except ImportError: HAS_JSONSCHEMA = False
self.source._flush() self._stats_refresh = True
if not name and not pkgs: return 'Must pass a single package or a list of packages'
log.error('Failed to read region from instance metadata. Giving up.')
continue
if not using_ip_for_id and 'append_domain' in opts: opts['id'] = _append_domain(opts) if append_master: opts['id'] += '_master'
output = tensor.dot(patch_stack, kerns.flatten(2).T).reshape((B, OR, OC, K))
self._initialize_mixed(contentstore=contentstore, mappings={})
STATIC_URL = None
if do_assemble: __salt__['raid.assemble'](name, devices, **kwargs) else: __salt__['raid.create'](name, level, devices, **kwargs)
from salt.modules import twilio_notify
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
SREQTestCase.thread_running.clear() SREQTestCase.echo_server.join()
try: return cls.objects.get( user=user, course_id=course_key ) except cls.DoesNotExist: return None
return self.array
X = np.ascontiguousarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
td = Series([timedelta(days=i) for i in range(3)]) self.assertEqual(td.dtype, 'timedelta64[ns]')
cart = Order.get_cart_for_user(request.user) cart.reset_cart_items_prices() CouponRedemption.remove_coupon_redemption_from_cart(request.user, cart) return HttpResponse('reset')
continue
for i in range(9): i += 13 registration_code_redemption = RegistrationCodeRedemption( registration_code_id=i, redeemed_by=self.instructor ) registration_code_redemption.save()
df = DataFrame({'A': [1, 2, 3], 'B': ['5,6', '7,8', '9,0']})
'corsheaders.middleware.CorsMiddleware', 'cors_csrf.middleware.CorsCSRFMiddleware', 'cors_csrf.middleware.CsrfCrossDomainCookieMiddleware', 'django.middleware.csrf.CsrfViewMiddleware',
capi.geom_close_rings(self.ptr)
self.assertEqual(grouped.groups[k], e)
stdout = sys.stdout sys.stdout = StringIO()
__virtualname__ = 'smartos'
data_x = np.cast[config.floatX](data['data']) data_x = data_x[MNISTPlus.idx[which_set]]
data = 'a,b,c\n4,5,6\n"' self.assertRaises(Exception, self.read_csv, StringIO(data), escapechar='\\')
self._auto_auth(self.USERNAME, self.EMAIL, False)
self.course_enrollment.change_mode(self.mode) self.course_enrollment.activate()
self.assertTrue(filecmp.cmp(path_in, path_test))
result = pd.read_pickle(path) self.compare_element(result, expected, typ)
indexer = minor * N + major
def _install_signal_handlers(self): signal.signal(signal.SIGTERM, self._handle_signals) signal.signal(signal.SIGINT, self._handle_signals)
defaults = { 'form_class': forms.URLField, } defaults.update(kwargs) return super(URLField, self).formfield(**defaults)
import nose raise nose.SkipTest("skipping sparse binary operators test")
self.client.logout() ModuleStoreTestCase.tearDown(self)
details['extends'] = extends keep_looping = True
self._samples = samples self._sigma = sigma
for arg_name in operation_args[i:]:
return self._builtin_table.get(arg, arg)
return result_index, result
for key, matrix in matrices.items(): del result[key]
- user: admin - password: sekrit
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
results = results[args.burnin:]
TASK_LOG.error(u"Task (%s) has no InstructorTask object for id %s", task_id, entry_id)
scsi_spec.device.sharedBus = vim.vm.device.VirtualSCSIController.Sharing.physicalSharing
transfer_students.Command().handle( source_course=original_key, dest_course_list=new_key_one + "," + new_key_two ) self.assertTrue(self.signal_fired)
response = self.client.get(manage_users_url) self.assertEqual(response.status_code, 200) self.assertIn(extra_user.username, response.content)
EXPECTED_ITEMS = ['Test Problem 1', 'Test Problem 2', 'Test HTML']
with self.assertRaisesMessage(CommandError, "Conflicting migrations detected"): call_command("migrate", "migrations")
new_bar = Bar.objects.create() new_foo = Foo.objects.create(bar=new_bar)
self.errors_occurred = False self.run_commit_hooks_on_set_autocommit_on = True
defined_but_not_allowed = ("(?:^Cannot.+{0!r}.+{1!r}.+try using the " "'apply' method$)")
self.validate_preview_html(self.vertical, self.container_view) self.validate_preview_html(self.child_container, self.container_view) self.validate_preview_html(self.child_vertical, self.reorderable_child_view)
ret = self.run_function( 'state.sls', mods='issue-1879.step-2', timeout=120 ) self.assertSaltTrueReturn(ret)
student_module.save(force_update=True)
flags = [('Name', name)]
raise RuntimeError('The passed keys need to be a list')
cls.create_and_enroll_student( courses=[cls.test_course_2], username='student_enrolled_public_profile' ) profile = cls.users['student_enrolled_public_profile'].profile profile.year_of_birth = 1970 profile.save()
memory = Memory(os.path.join(get_data_home(), 'mnist_benchmark_data'), mmap_mode='r')
self.event.fire_event(new_job_load, tagify([clear_load['jid'], 'new'], 'job'))
with self.assertRaises(ValueError): Author.objects.annotate(book_contact_set=Avg('friends__age'))
self.new_email = email self.activation_key = uuid.uuid4().hex self.save() return self.activation_key
formset = self.make_choiceformset() self.assertFalse(formset.is_valid()) self.assertFalse(formset.has_changed())
super(OverrideFieldDataTests, cls).setUpClass() cls.course = CourseFactory.create(enable_ccx=True)
if all_students or delete_module: if not has_access(request.user, 'instructor', course): return HttpResponseForbidden("Requires instructor access.")
import salt import salt.utils import salt.exceptions
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
import salt.thorium
import salt.utils import salt.utils.odict as odict
objs = tuple(objs)
self.assertNotIn("x-content-type-options", self.process_response())
tm.assert_numpy_array_equal(A.todense(), A_result.todense()) self.assertEqual(il, il_result) self.assertEqual(jl, jl_result)
user = auth.authenticate(remote_user=username) if user: request.user = user auth.login(request, user)
dt = datetime.datetime(2012, 3, 9, 1, 30, tzinfo=utc)
import salt.ext.six as six from salt.ext.six.moves import StringIO
if values: expected = f.values[i] else: expected = f for a in reversed(i): expected = expected.__getitem__(a)
return hash(id(self))
path = '%s.csv' % tm.rands(10) self.assertRaises(IOError, self.read_csv, path)
from pandas.tseries.common import Properties from pandas.tseries.index import date_range, DatetimeIndex from pandas.tseries.period import period_range, PeriodIndex from pandas.tseries.tdi import timedelta_range, TimedeltaIndex
return self.list_display
try: data = pandas.read_pickle(vf) except (ValueError) as e: if 'unsupported pickle protocol:' in str(e): return else: raise
string_data = serializers.serialize( format, NaturalKeyAnchor.objects.all(), indent=2, use_natural_foreign_keys=True, use_natural_primary_keys=True, )
super(BaseLmsDashboardTest, self).setUp()
cmd = '{0} '.format(path) cmd += '| Select-Object -Property FullName, Extension, Exists, ' \ '@{Name="LastWriteTime";Expression={Get-Date ($_.LastWriteTime) -Format g}}'
provider_url = reverse('openid-provider-xrds') factory = RequestFactory() request = factory.request() abs_provider_url = request.build_absolute_uri(location=provider_url)
eligibilities = api.get_eligibilities_for_user("staff") self.assertEqual(eligibilities, [])
if emsg: raise e
master_profile.setdefault('preseed_minion_keys', {}) master_profile['preseed_minion_keys'].update({name: pub})
saltenv = env
last_touch = request.session.get(LAST_TOUCH_KEYNAME)
datasource_properties = {'connection-url': 'jdbc:/old-connection-url'} ds_status = {'created': False}
gecos_field = data.pw_gecos.split(',', 3) while len(gecos_field) < 4: gecos_field.append('')
self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course.id))
lines.append(line) continue
import logging
if 'index' in kwargs: pull_opts.append('--dkr-index-url={0}'.format(kwargs['index']))
indexer, new_index = self.index.get_loc_level(key) return self._constructor(self._values[indexer], index=new_index).__finalize__(self)
inter = first.intersection(first) self.assertIs(inter, first)
exclude_dirs = ['images', 'scripts', 'sandbox']
self._setup_mode_and_enrollment(self.FUTURE, "verified")
qs = qs.none()
ret['comment'] = "Service {0} doesn't exist".format(name)
try: import esky from esky import EskyVersionError HAS_ESKY = True except ImportError: HAS_ESKY = False from salt.ext import six from salt.ext.six.moves.urllib.error import URLError
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
sigma_1 = 1 sigma_2 = 10 corr = 0.5 cov = np.array([ [sigma_1**2, corr * sigma_1 * sigma_2], [corr * sigma_1 * sigma_2, sigma_2**2] ])
X_train = np.vstack([shifted_gaussian, stretched_gaussian])
pass
return response
if object_domain is None: try: object_domain = Site.objects.get_current(request).domain except Site.DoesNotExist: pass
priority = 0.5
next_page = False
scaled = face - face.min() scaled /= scaled.max() return scaled
problem_name = own_metadata(child).get('display_name', '')
nn = self.quote_name(name) if nn[0] == '"' and nn[-1] == '"': nn = nn[1:-1] return nn
self.table = self.table.tometadata(self.pd_sql.meta) self.table.create()
from __future__ import unicode_literals
PersonModel = PersonDimensionsFirst
CourseModeFactory.create(mode_slug="honor", course_id=self.course.id, min_price=100)
module.save() return module
if value.srid is None: value.srid = self._field.srid
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
EmptyPromise( lambda: self.q(css='.assetupload-modal .action-upload').present, 'Signature image upload dialog opened' ).fulfill()
with self.assertRaises(forms.ValidationError): f.clean('21/12/2010')
response.data["start"] = (self.page.number - 1) * self.get_page_size(self.request)
elif isinstance(key, BaseGrouper): return key, [], obj
ref_u1 = MultiPoint(p1, p2, p4, p5, p3, srid=4326) ref_u2 = MultiPoint(p2, p3, srid=4326)
if verification_deadline is not None and mode_slug not in CourseMode.VERIFIED_MODES: raise forms.ValidationError("Verification deadline can be set only for verified modes.")
if enc in ['e', 'ecdsa']: return 'ecdsa-sha2-nistp256' return enc
n_samples = 200 X, y = make_circles(n_samples=n_samples, shuffle=False) outer, inner = 0, 1 labels = -np.ones(n_samples) labels[0] = outer labels[-1] = inner
if response and response.status_code != 200: if_modified_since = None if_unmodified_since = None
delattr(obj.__class__, self.name)
with self.assertRaisesMessage(AttributeError, 'Object is immutable!'): d.__setitem__(1, 'test')
number_part = Word(nums) inner_number = (number_part + Optional("." + Optional(number_part))) | ("." + number_part) inner_number = Combine(inner_number)
return self.prepopulated_fields
try: del self._process_map[pid] except KeyError: pass
take_2d_axis0_%(name)s_%(dest)s_memview(values, indexer, out, fill_value=fill_value) return
def __setstate__(self, state): self.__init__(state['opts'])
else: values[indexer] = value
K1 = pairwise_kernels(X, Y=X, metric=metric, **kwds) K2 = rbf_kernel(X, Y=X, **kwds) assert_array_almost_equal(K1, K2)
resource = self.generate_edit_resource(self.resource_id) for xblock_name in self.XBLOCK_NAMES: self.check_event_response_by_http_status('edit_resource', resource, 200, xblock_name)
log = logging.getLogger(__name__)
__virtualname__ = 'service'
model = self.object.__class__
course = modulestore().get_course(self.toy_course_key) config_course_cohorts(course, is_cohorted=True) self.assertEqual([], cohorts.get_course_cohorts(course))
HAS_RANGE = False try: import seco.range HAS_RANGE = True except ImportError: pass
EmptyPromise(self._is_loading_in_progress, "Loading is in progress.").fulfill()
return self(kind='pie', **kwds)
try: user_id = int(identifier) except ValueError: return User.objects.get(email=identifier) return User.objects.get(id=user_id)
tag = get_tag(d) try: resolver = resolvers[tag] except KeyError: reraise_as(TypeError('config does not know of any object type "'+tag+'"')) return resolver(d)
from __future__ import absolute_import
return self.q(css=self.search_bar_selector).present
termination_criterion = EpochCounter(5)
signals.user_logged_in.disconnect(self.listener_login) signals.user_logged_out.disconnect(self.listener_logout) signals.user_login_failed.disconnect(self.listener_login_failed)
kwargs['choice_type'] = 'multiple' return ResponseXMLFactory.choicegroup_input_xml(**kwargs)
if len(new_name) < NAME_MIN_LENGTH: raise serializers.ValidationError( "The name field must be at least {} characters long.".format(NAME_MIN_LENGTH) ) return new_name
html_with_inline_css = pynliner.fromString('<style>' + css_content + '</style>' + html_without_css) return html_with_inline_css
dates = DatetimeIndex(start=reference_start_date, end=reference_end_date, freq=year_offset, tz=start_date.tz)
return sorted(returners_)
Number.objects.filter(pk=self.n.pk).update(integer=15 * F('integer'), float=42.7 * F('float'))
to_input = self.to_input(batch) return self.orig_view_converter.get_formatted_batch(to_input, dspace)
X = self._check_fit_data(X) return self.fit(X)._transform(X)
node = _get_node(instance_id=vm_['instance_id']) ret.update(node)
else: self._send_immediate_response(False, message="Invalid request URL")
sparse_classifier = BaggingRegressor( base_estimator=CustomSVR(), random_state=1, **params ).fit(X_train_sparse, y_train) sparse_results = sparse_classifier.predict(X_test_sparse)
lab, lev, dropna = cat.codes, bins[:-1], False
response = self._load_dashboard() self.assertContains(response, "credit-request-rejected-msg")
return wkb_w(dim=3 if self.hasz else 2).write_hex(self)
resultset = self.collection.find(query, record_filter)
output = self.engine.render_to_string('basic-syntax18', {"foo": {"bar": "baz"}}) self.assertEqual(output, "baz")
self.backend = backend self.server = server self.weight = weight return 'server weight'
logoption = 0 for opt in _options['options']: logoption = logoption | getattr(syslog, opt)
HAS_SWIFT = False try: from swiftclient import client
'ratelimitbackend.middleware.RateLimitMiddleware',
self.assertRaises(ValueError, lambda: Timedelta('10 days -1 h 1.5m 1s 3us'))
z = mask[:, None] * z + (1 - mask[:, None]) * state_before
return BoundField(form, self, field_name)
if xclipExists:
queried_children = to_process_dict.values()
from __future__ import absolute_import import inspect import tempfile import shutil import os import collections
if self.has_resolvers: return self.resolvers[key]
s1 = Series([0.1235], dtype='float32') s2 = Series([0.1236], dtype='float32')
from xmodule.modulestore.inheritance import InheritanceMixin from xmodule.modulestore import prefer_xmodules from xmodule.x_module import XModuleMixin
salt.utils.atomicfile.atomic_open( os.path.join(hn_dir, OUT_P), 'w+b' )
def test_course_authorized_feature_off(self): BulkEmailFlag.objects.create(enabled=False, require_course_email_auth=True) cauth = CourseAuthorization(course_id=self.course.id, email_enabled=True) cauth.save()
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
css = '.group-configuration-usage-unit' return self.find_css(css).text
_view_name = 'profile_image_upload' _replacement_method = 'openedx.core.djangoapps.profile_images.views.ProfileImageView.post'
if file: width = file.width height = file.height else: width = None height = None
username = "test_{uuid}".format(uuid=self.unique_id[0:6]) auto_auth_page = AutoAuthPage(self.browser, username=username).visit() user_id = auto_auth_page.get_user_id() return username, user_id
base_dashboards_from_pillar = ([_DEFAULT_DASHBOARD_PILLAR] + base_dashboards_from_pillar) base_panels_from_pillar = ([_DEFAULT_PANEL_PILLAR] + base_panels_from_pillar) base_rows_from_pillar = [_DEFAULT_ROW_PILLAR] + base_rows_from_pillar
KT = np.zeros_like(KT) for i in range(len(T)): for j in clf.support_: KT[i, j] = np.dot(T[i], X[j])
def __wrapper__(self, *args, **kw): res = func(*self.__args, **self.__kw) return getattr(res, method_name)(*args, **kw) return __wrapper__
return self.modulestore.get_library(self.courselike_key, depth=None, lazy=False)
X = g.sample(n_samples=100) g = self.model(n_components=self.n_components, covariance_type=self.covariance_type, random_state=rng, min_covar=1e-1, n_iter=1, init_params=params) g.fit(X)
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.PUBLISHED, is_locked=True), self.STAFF_ONLY_WARNING )
from __future__ import absolute_import import os
Q = random_state.normal(size=(A.shape[1], size))
CountryAccessRule.invalidate_cache_for_course(restricted_course.course_key)
#html_title = None
pass
clf = GridSearchCV(clf, {'anova__percentile': [5, 10, 20]}, cv=cv)
import copy import logging import hashlib import os
for mode in ('audit', 'honor'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
if lookup_type == 'dwithin': dist_param = 'distance=%s' % dist_param
'headers': dict(self.request.headers),
_skip_if_has_locale()
skip_if_no_sklearn() mapping = {'dataset_iterator': 'StratifiedDatasetValidationShuffleSplit'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
values = np.asarray(values) if copy: values = values.copy()
module_state_key = LocationKeyField(max_length=255, db_index=True, db_column='module_id') student = models.ForeignKey(User, db_index=True)
assert_raises(ValueError, precision_recall_fscore_support, y_true, y_pred, beta=0.0)
ax.plot_surface(X, Y, Z.T, cstride=1, rstride=1, color=c, alpha=0.8)
self.assertEqual( include((self.url_patterns, 'app_name', 'namespace')), (self.url_patterns, 'app_name', 'namespace') )
service_variant = ''
import logging import glob import re
from salttesting.helpers import ( ensure_in_syspath, skip_if_not_root, skip_if_binaries_missing ) from salttesting import skipIf ensure_in_syspath('../../')
as_stolen_buf = move_into_mutable_buffer(b[:-3])
fields['advertised_start'] = None
import pandas
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salt.ext.six.moves import range
self.jobs = {}
self.total_violations = 0 self.totals_by_rule = dict.fromkeys( [rule.rule_id for rule in Rules.__members__.values()], 0 )
(it is done to allow user to enter both /static/filename.srt and filename.srt)
eq_dir = np.dot(X.T[:n_active].T, least_squares) corr_eq_dir = np.dot(X.T[n_active:], eq_dir)
log = logging.getLogger(__name__)
klass = import_string(backend or settings.EMAIL_BACKEND) return klass(fail_silently=fail_silently, **kwds)
from salt.modules import mine
if isinstance(g, Polygon):
_as = self.argsort() if not ascending: _as = _as[::-1] sorted_index = self.take(_as) if return_indexer: return sorted_index, _as else: return sorted_index
try: import progressbar HAS_PROGRESSBAR = True except ImportError: HAS_PROGRESSBAR = False
return self.field.null or (self.field.is_relation and self.field.many_to_many)
offsets = [pd.offsets.Hour(2), timedelta(hours=2), np.timedelta64(2, 'h'), Timedelta(hours=2)]
from __future__ import absolute_import import os import sys import posixpath import ntpath import platform import tempfile
self.xblock.location = Location("org", "import", "run", "category", "stubxblock") self.xblock.save()
'keep_jobs': int,
from __future__ import absolute_import
keys = list(range(len(values))) result = concat(values, axis=self.axis, keys=keys)
import logging import os import re import datetime
return NotAny( self )
import salt.ext.six as six
from __future__ import absolute_import import sys
for (op, args), targop in ops: for data in [s, s_missing]: expected = data.groupby(labels).transform(targop)
X = [[1, 0, 0], [1, 1, 1]]
result = result.astype('object')
book = None curr_sheet = None path = None
import logging import os
if isinstance(value, (bool)): value = 'true' if value else 'false' if not value: value = ""
try:
if text: wait_for(lambda _: css_text(css_selector, index=index))
pca = PCA(n_components=50) pca.fit(X) pca_test = PCA(n_components=50, svd_solver='full') pca_test.fit(X) assert_array_almost_equal(pca.components_, pca_test.components_)
course_location = self.store.make_course_key('Org1', 'Course1', 'Run1') course = self._create_course_with_access_groups(course_location, self.user)
env: /path/to/virtualenv/
lat = RTOD * (2 * atan(exp((px[1] - npix) / (-1.0 * self._radpp[zoom]))) - 0.5 * pi)
self._upload_file('auto_reg_enrollment.csv')
from __future__ import unicode_literals
os.remove(filename)
url = forms.CharField(required=False) class Meta: exclude = ['url'] model = Category
request = RequestFactory() request.COOKIES = {} request.META = {} request.path = '/' return request
autosummary_generate = False
_listen_for_course_publish('store', self.course.id) self.assertEqual(VerificationDeadline.deadline_for_course(self.course.id), self.course.end)
history = HistoricalRecords()
if footer: footer += '\n' footer += level_info
result = cut(np.arange(11.), 2)
project_state = ProjectState() project_state.add_model(ModelState.from_model(TestModel)) with self.assertRaises(ValueError): project_state.apps
from __future__ import unicode_literals
log.error(err)
try: verify_signatures(resp_params)
self.verify_expected_team_id(team, 'fully-specified-team') del team['id']
path = preprocess(path) data_x, data_y = self.make_data(which_set, path)
parts = [os.path.normpath(p) for p in parts]
if not len(values) and columns is not None and len(columns): values = np.empty((0, 1), dtype=object)
from __future__ import absolute_import import re import logging
w = random_state.randn(n_features, n_targets)
if estimator_error <= 0: return sample_weight, 1., 0.
if not expr: raise ValueError("expr cannot be an empty string")
from __future__ import absolute_import
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
for i in range(max_iter): centers_old = centers.copy() labels, inertia = \ _labels_inertia(X, x_squared_norms, centers, precompute_distances=precompute_distances, distances=distances)
role = CourseStaffRole(self.course_key) role.add_users(self.student) self.assertGreater(len(role.users_with_role()), 0)
self.assertEqual(urlize('email@.stream.ru'), 'email@.stream.ru')
if self.context_object_name: return self.context_object_name elif hasattr(object_list, 'model'): return '%s_list' % object_list.model._meta.model_name else: return None
raise RuntimeError( 'The syslog facility \'{0}\' is not known'.format( facility_name ) )
data = 'a,b,c\n4,apple,bat,5.7\n8,orange,cow,10'
return initial
if os.path.exists(_DEB_NETWORK_DIR): interface_files += ['{0}/{1}'.format(_DEB_NETWORK_DIR, dir) for dir in os.listdir(_DEB_NETWORK_DIR)]
super(AcidView, self).__init__(browser) if isinstance(context_selector, unicode): context_selector = context_selector.encode('utf-8') self.context_selector = context_selector
y_pred, sigma = gp.predict(x, return_std=True)
assert_equal(y[train].size + y[test].size, y.size)
other_course = CourseLocator(org='other', course='other', run='other') self._assert_enabled_for_course(other_course, False)
input_dict = {'1_2_1': '0', '1_2_2': '42'} correct_map = problem.grade_answers(input_dict)
sock.shutdown(socket.SHUT_RDWR) sock.close() break
rs = self.ts.diff(0) xp = self.ts - self.ts assert_series_equal(rs, xp)
if driver == 'vmware' and profile_key.get('image', True): non_image_drivers.append('vmware')
changed_modules = StudentModule.objects.filter(module_state_key__in=self.ee_modules) self.assertEqual(changed_modules.count(), 0)
sys = 'cms' if sys == 'studio' else sys return cmd("python manage.py", sys, "--settings={}".format(settings), *args)
return saved_ifcfg.split('\n')
if 'srid' not in ds_input: raise GDALException('Specify srid for JSON or dict input.')
for svd in svds: assert_array_less(0.0, svd.explained_variance_ratio_)
assert_raises(ValueError, cv.get_feature_names)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
return settings.LANGUAGE_CODE
METRIC_UNDEFINED_BINARY = [ "samples_f0.5_score", "samples_f1_score", "samples_f2_score", "samples_precision_score", "samples_recall_score", "coverage_error",
if 'provider' in provider: driver = provider.pop('provider') else: driver = provider['driver']
_win(advapi32.CreateProcessWithLogonW, wintypes.BOOL,
response = self.post_credit_request(None, 'a/b/c') self.assert_error_response(response, 'A username must be specified.')
from salt.modules import win_timezone
__virtualname__ = 'user'
self.assertEqual(source.ds, ds.name)
_check_arg_length(fname, args + tuple(kwargs.values()), max_fname_arg_count, compat_args)
component = self.store.publish(component.location, self.user_id) self.assertFalse(self.store.has_changes(component))
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
os.rmdir(path)
X = csr_matrix(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
log.info('Denying API request from user [%s].', self.user.id) self.status = self.DENIED self.save()
yield self.auth.authenticate() ret = yield _do_transfer()
get_parents=None, get_children=get_children, filter_func=filter_func,
dive = Book() dive.title = "Dive into Python" dive.published = datetime.date(2009, 5, 4) dive.save(using='other')
self.attrs.pandas_type = str(self.pandas_kind) self.attrs.pandas_version = str(_version) self.set_version()
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor', grade=default_grade )
n_estimators, n_classes = self.estimators_.shape leaves = np.zeros((X.shape[0], n_estimators, n_classes))
self._timeout_future(tag, future) if future in self.timeout_map: tornado.ioloop.IOLoop.current().remove_timeout(self.timeout_map[future]) del self.timeout_map[future]
exams = get_all_exams_for_course(course_key)
_exprArgCache = {} def resetCache(): ParserElement._exprArgCache.clear() resetCache = staticmethod(resetCache)
df = DataFrame(np.random.randint(0, 2, (4, 4)), columns=['a', 'b', 'c', 'd'])
store1 = HDFStore(path)
safe_cookie_data_2 = SafeCookieData.parse(serialized_value) self.assertTrue(safe_cookie_data_2.verify(user_id))
if hasattr(self, 'base_field'): self.base_field = self.base_field() super(RangeField, self).__init__(*args, **kwargs)
from django.contrib.admin.views.main import ChangeList return ChangeList
if not isinstance(content, str): raise AssertionError("Expected content to be of type str, got " + str(type(content)))
if not patterns: return default return any(fnmatch(filename, pattern) for pattern in patterns)
if not validate_trust_root(openid_request): return default_render_failure(request, "Invalid OpenID trust root")
if ApiAccessConfig.current().enabled: return view_func(view_obj, *args, **kwargs) return HttpResponseNotFound()
type_in_codemirror(self, index, text, find_prefix='$("{}").find'.format(self.editor_selector))
return page_title_breadcrumbs(*args)
assert_roundtrip("12345678901234561234567890123456123456789012345601") assert_roundtrip("")
with self.assertRaises(ValueError): p0._make_token_with_timestamp(user, 175455491841851871349)
from __future__ import absolute_import from distutils.version import LooseVersion import re import logging
enum = None
self.assertChildren(block, self.children_for_user[user])
level_values = _maybe_casted_values(lev, lab) if level is None or i in level: new_obj.insert(0, col_name, level_values)
section_descriptor = modulestore().get_item(section_key, depth=3)
y_wrong = y_[:-1] assert_raises(ValueError, clf.fit, X, y_wrong)
salt '*' vsphere.list_non_ssds my.esxi.host root bad-password
assert self.conv2d.get_params() == [self.filters]
if 'remove_{0}'.format(instance) not in vmconfig['changed']: vmconfig['changed']['remove_{0}'.format(instance)] = []
import integration
country_model = apps.get_model("embargo", "Country") for country_code, __ in list(countries): country_model.objects.get_or_create(country=country_code)
n_samples = 12 n_samples_partial_fit = 3 n_features = 2 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features) X_partial_fit = rng.rand(n_samples_partial_fit, n_features)
allowed_minions = set()
return [('127.0.0.1:11211 (1)', {})]
__remove_queue_logging_handler()
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
return self.q(css='.is-active').attrs('data-url')[0]
data = 'a b c\n1 2 3' msg = 'is not supported'
if len(blocks) > 1: new_axes[1] = axes[0]
HAS_LIBS = False try: import salt.ext.six as six HAS_LIBS = True except ImportError: try: import six HAS_LIBS = True except ImportError: pass
resp = self.create_xblock(category='problem', boilerplate='nosuchboilerplate.yaml') self.assertEqual(resp.status_code, 200)
from __future__ import absolute_import
self.video.click_player_button('fullscreen')
pre_matches = __salt__['git.config_get_regexp']( cwd=repo, key=key, value_regex=value_regex, user=user, ignore_retcode=True, **{'global': global_} )
return force_bytes(value, self.charset)
if try_cast: result = self._try_cast_result(result)
super(LmsSearchResultProcessorTestCase, self).setUp() self.build_course()
import salt.config import salt.loader
del self.map[key]
insertions.append((len(curcode), [(0, Generic.Error, output_prompt.group())])) curcode += line[output_prompt.end():]
AllowsNullGFK(content_object=None) TaggedItem(content_object=None)
df = DataFrame(Series()) assert_frame_equal(df, DataFrame({0: Series()}))
log = logging.getLogger(__name__)
self._count += 1 self._apply_learning_rate(algorithm)
exc_type, exc_value, exc_tb = sys.exc_info()
self.assertIs(ix[:, :], f)
display_name=_("Certificate Web/HTML View Overrides"), help=_("Enter course-specific overrides for the Web/HTML template parameters here (JSON format)"), scope=Scope.settings,
from __future__ import absolute_import
lines[grid_dimension[0]] = '==> ' + lines[grid_dimension[0]]
pred = pred.ravel() return 2.0 * (y - pred > 0.0) - 1.0
self.test_tab = ItemFactory.create( parent_location=self.course.location, category="static_tab", display_name="Static_1" ) self.reload_course()
import yaml import pprint import logging import urllib
n_expected = combinations(n_population, n_samples, exact=True)
return self.list_display
ref_kml_regex = re.compile(r'^<Point><coordinates>-95.363\d+,29.763\d+,18</coordinates></Point>$') self.assertTrue(ref_kml_regex.match(h.kml))
result = func(cond, values, other) if self._can_hold_na or self.ndim == 1:
self.store.convert_to_draft(problem.location, self.user.id) problem = self.store.get_item(problem.location)
final_alpha = 1e-5 low_reg_model = ElasticNet(alpha=final_alpha).fit(X, y)
from __future__ import absolute_import
sample_steps_available = [1, 2, 3] for sample_steps in sample_steps_available:
exit=False)
from __future__ import absolute_import
input_element.click() input_element.send_keys(Keys.CONTROL + 'a') input_element.send_keys(value) return input_element
col_names = [str(descr[0]) for descr in matlab_dict['mldata_descr_ordering'][0]]
self.assertTrue(section.release_date) self.assertFalse(section.due_date) self.assertFalse(section.policy)
def test_ransac_residual_metric(): residual_metric1 = lambda dy: np.sum(np.abs(dy), axis=1) residual_metric2 = lambda dy: np.sum(dy ** 2, axis=1)
est = TreeEstimator() assert_raises(NotFittedError, est.apply, T)
labels = (label == 'root' and node_id == 0) or label == 'all'
StudentViewTransformer.collect(self.block_structure) self.block_structure._collect_requested_xblock_fields()
self.find_css('button.action-add-group').first.click()
self.outline.visit()
columns_to_test = [columns.index('C'), columns.index('E1')]
upstream = None
email_obj = CourseEmail.objects.get(id=email_id) targets = [target.target_type for target in email_obj.targets.all()]
self.assertTrue(linode._validate_name('1foo')) self.assertTrue(linode._validate_name('foo0'))
with self.assertRaises(ImportError): with self.settings(INSTALLED_APPS=['apps.apps.NoSuchConfig']): pass
response = self._generate(username=self.STUDENT_USERNAME) self.assertEqual(response.status_code, 400)
def test_sparse_random_projection_transformer_invalid_density(): for RandomProjection in all_SparseRandomProjection: assert_raises(ValueError, RandomProjection(density=1.1).fit, data)
new_deadline = (self.VERIFICATION_DEADLINE + timedelta(days=1)).replace(microsecond=0) self._set_form_verification_deadline(form, new_deadline) form.save()
def __getstate__(self): return bytes(self.wkb), self.srid
response = self.client.get('/') self.assertContains( response, "Page not found <span>(404)</span>", status_code=404 )
self._read_until_future.exc_info()
middleware.process_request(request) request.session['hello'] = 'world'
self.assertFalse(original.has_duplicates)
iris = load_iris()
def _get_srid_info(self, connection): self._units, self._units_name, self._spheroid = get_srid_info(self.srid, connection)
return tz1.zone == tz2.zone
data = fetch_20newsgroups_vectorized().data[:500]
if isinstance(axis, (tuple, list)) and len(axis) == 2: return self._apply_2d(f, axis=axis)
return len(tsql_query(query='sp_helprole "{0}"'.format(role), as_dict=True, **kwargs)) == 1
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.get_course( course_key, depth=depth, **kwargs ))
return theano._asarray(arg, dtype=dtype)
return HttpResponse('<html><body>dummy</body></html>')
panel = tm.makePanel() self.assertRaises(ValueError, lambda: concat([panel, s1], axis=1))
from __future__ import absolute_import import logging import time import json
return np.prod(self.shape)
with ensure_clean_path(self.path) as path:
import salt.utils
KEY_EXPIRATION_IN_SECONDS = 86400
assert isinstance(course_key, CourseKey) store = self._get_modulestore_for_courselike(course_key) try: return store.get_course(course_key, depth=depth, **kwargs) except ItemNotFoundError: return None
log = logging.getLogger(__name__)
p.mugshot = self.file2 self.check_dimensions(p, 8, 4) self.assertEqual(p.mugshot.was_opened, True)
self._do_mstep(X, z, self.params)
return form.save(commit=commit)
self.assertEqual(os.listdir(settings.STATIC_ROOT), [])
return settings.STATIC_URL + relative_url
store = contentstore() assets, __ = store.get_all_content_for_course(location.course_key) for asset in assets: asset_location = asset['asset_key'] del_cached_content(asset_location) store.delete(asset_location)
log.error('Unrecognized target engine "{0}" for' ' target expression "{1}"'.format( target_info['engine'], word, ) ) return False
return image.convert('RGB')
del self.async
log_proba = clf.predict_log_proba(X)
day1 = datetime(2013, 3, 5) day2 = datetime(2013, 5, 5) day3 = datetime(2014, 3, 5)
with open(path, 'wb') as f: pkl.dump(obj, f, protocol=pkl.HIGHEST_PROTOCOL)
request = self.factory.get('////absolute-uri') self.assertEqual( request.build_absolute_uri(location='/foo/bar/'), 'http://testserver/foo/bar/' )
request = self.request_factory.get('/', {}) changelist = self.get_changelist(request, Book, modeladmin)
from __future__ import absolute_import
return get_default_time_display(xblock.start) if xblock.start != DEFAULT_START_DATE else None
tip = resolved(joinpath(base, dirname(info.name))) return _is_bad_path(info.linkname, base=tip)
#epub_show_urls = 'inline'
with self.assertRaises(ValueError): Choice.objects.filter(id__gt=None)
return result['dict']
self.end_blocking_transaction() thread.join(5.0)
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON )
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
from __future__ import absolute_import
return self.q(css="div.problem section.inputtype div.incorrect span.status").is_present()
module.system.user_is_staff = False
self.assertEqual(self.func(None), [])
self.resid = np.zeros(n, tp) info = 0
from salt.modules import neutron
loaded_mods = list(set(loaded_mods) & set(persist_mods))
data_not_concrete_inherited = models.ForeignObject( Relation, on_delete=models.CASCADE, from_fields=['model_non_concrete_id'], to_fields=['id'], related_name='fo_concrete_rel', )
r = result.ravel() arr = np.array([r[0]])
self.assertRaises(TypeError, lambda: ind.view('i8'))
response_element = etree.Element('symbolicresponse')
conditional_params = self.mlp.fprop(X) if not type(conditional_params) == tuple: conditional_params = (conditional_params, ) return conditional_params
assert_true(world.css_contains_text(problem_css, category))
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
from __future__ import absolute_import import json
return ''.join(rendered_widgets)
i_best_alpha = np.argmin(mse_path.mean(axis=-1)) best_alpha = all_alphas[i_best_alpha]
msg = 'Disabling timed exam {exam_id}'.format(exam_id=exam['id']) log.info(msg) update_exam( exam_id=exam['id'], is_proctored=False, is_active=False, )
if ssh_interface == 'private_ips': vm_['ssh_host'] = data['private_ips'][0] else: vm_['ssh_host'] = data['public_ips'][0]
import salt.config import salt.netapi
for i in range(5): i += 1 registration_code_redemption = RegistrationCodeRedemption( registration_code_id=i, redeemed_by=self.instructor ) registration_code_redemption.save()
if not test_labels: module_found_in_labels = True else: module_found_in_labels = any( module_label == label or module_label.startswith(label + '.') for label in test_labels_set)
result = self.panel.reindex(major=self.panel.major_axis, copy=False) assert_panel_equal(result, self.panel) self.assertTrue(result is self.panel)
self.selenium.get(self.live_server_url + reverse('admin:admin_widgets_member_add'))
n_rows = 1 n_cols = np.ceil(n_plots*1./n_rows) n_cols = int(n_cols) half_perimeter = n_cols + 1
page_input = self.q(css="#page-number-input")[0] page_input.click() page_input.send_keys(str(number)) page_input.send_keys(Keys.RETURN) self.wait_until_ready()
raise NotImplementedError('subclasses of Operation must provide a database_forwards() method')
template = self.cleaned_data["html_template"] self._validate_template(template) return template
self.assertFalse(hasattr(user, 'profile'))
EmptyPromise(self.is_upload_finished, 'Upload Finished', timeout=30).fulfill()
pos_v = data neg_v = self.sampler.particles
if get_team(commentable_id) is not None: params['context'] = ThreadContext.STANDALONE else: params['context'] = ThreadContext.COURSE
return self.q(css='{}[data-id="{}"]'.format(self.BODY_SELECTOR, self.locator)).present
self.assertEqual(request.get_port(), '80')
if match is not None: return True
pca = PCA(n_components=15, whiten=False) data = pca.fit_transform(digits.data)
generic_relation_abstract = GenericRelation(Relation)
xml = self.render_to_xml(self.context) xpath = "//div[@class='indicator-container']/span[@class='status correct']" self.assert_has_xpath(xml, xpath, self.context)
request = self.request_factory.get(path) return self.get_context_for_request(request)
'ENABLE_SERVICE_STATUS': False,
return v[::-1], W.T[:, ::-1]
memory = Memory(os.path.join(get_data_home(), 'covertype_benchmark_data'), mmap_mode='r')
log.info( "Refund successfully opened for user [%s], course [%s]: %r", unenrolled_user.id, course_key_str, refund_ids, )
with assertRaises(KeyError): df['2016-01-01']
ptr = property(_get_ptr, _set_ptr)
response = self.client.get(reverse('sysadmin_courses')) self.assertNotRegexpMatches(response.content, table_re)
for train, test in kfold.split(X, y): est.fit(X[train], y[train]) expected_predictions[test] = func(X[test])
self._textbooks.append({"chapters": chapters, "tab_title": book_title})
p.join()
In [151]: plt.clf()
pass
return None
result = f.clean('13:30') self.assertEqual(result, time(13, 30, 0))
images_grad, filters_grad = grad(cost, [images, filters]) reference_cost = (cost_weights * output_conv2d).sum() images_conv2d_grad, filters_conv2d_grad = grad(reference_cost, [images, filters])
REQUEST_CACHE.data = {} REQUEST_CACHE.request = None
MobileApiConfig(video_profiles="mobile_low,youtube").save()
def _check_if_open(self): if not self.is_open: raise ClosedFileError("{0} file is not open!".format(self._path))
values = self.get_values(dtype=object) return self.make_block(values, klass=ObjectBlock)
ChoiceFormSet = formset_factory(Choice, extra=1, min_num=1)
from __future__ import absolute_import import os
guestfs.__salt__ = {}
if (not is_object_dtype(dt) and not is_datetime_or_timedelta_dtype(dt)):
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
values = result if is_numeric_dtype(values.dtype): values = com.ensure_float(values)
post = None
return store.asset_collection
return self.get_text('.group-configuration-id .group-configuration-value')
DATE_INPUT_FORMATS = [
for student in students[2:5]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.error, mode='honor' )
for rel_app_label, rel_model_name in related_models: try: model_state = self.models[rel_app_label, rel_model_name] except KeyError: pass else: states_to_be_rendered.append(model_state)
if self.squeeze:
tolerance = self._convert_tolerance(tolerance)
students_require_certs = students_to_generate_certs_for
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
if not self.get_autocommit(): self.connection.commit()
return int(binascii.hexlify(x), 16)
for wrong_level in level_status_codes.keys(): if wrong_level != level: messages = _log_level_code(wrong_level, status_code) self.assertEqual(len(messages), 0)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
return False
if url.startswith(('http:', 'https:', '//', '#', 'data:')): return matched
instructor_user = User.objects.create_user('test_instructor_user', 'test_instructor_user@openedx.org', 'test') CourseInstructorRole(self.master_course_key).add_users(instructor_user)
fragment = Fragment( self.system.render_template(self.mako_template, self.get_context()) ) shim_xmodule_js(self, fragment) return fragment
self.applymap(self._highlight_null, null_color=null_color) return self
self.provider.enable_integration = True self.provider.save()
FEATURES['DISABLE_START_DATES'] = True
from openedx.core.djangoapps.ccxcon import tasks tasks.update_ccxcon.delay(unicode(course_key))
email_label = _(u"Email")
reset_to_default = False try: reset_to_default = xblock.start.year < 1900 except ValueError: reset_to_default = True
with self.assertRaises(exceptions.TemplateRuntimeError): env.from_string("{{ document|load_json }}").render(document="{'foo': 'it works'}")
continue
xclipExists = call(['which', 'xclip'], stdout=PIPE, stderr=PIPE) == 0
if task_progress.attempted % status_interval == 0: task_progress.update_task_state(extra_meta=current_step) task_progress.attempted += 1
n_jobs = min(_get_n_jobs(n_jobs), n_estimators)
self.assertRegexpMatches(ret, r'^\d{12}$')
self.assert_no_setting_changed_event()
self.kind = getattr(self.attrs, self.kind_attr, None)
self.assertNotRegexpMatches(problem_html, r"data-block-type=[\"\']acid_aside[\"\']")
for field_name in InheritanceMixin.fields: record_filter['metadata.{0}'.format(field_name)] = 1
self.chapter1 = ItemFactory.create( parent_location=self.course.location, category='chapter', display_name='untitled chapter 1' )
from salt.states import eselect
sign, ld = np.linalg.slogdet(A) if not sign > 0: return -np.inf return ld
for inline in self.get_inline_instances(request, obj): yield inline.get_formset(request, obj), inline
d = dict([(key, value.resid) for (key, value) in compat.iteritems(self.ols_results)]) return Panel.fromDict(d)
labels = [0, 1, 2, 3] * 3 + [4, 5] * 5
self.client.get('/') self.common_test_that_should_always_pass()
if is_list_like_indexer(value) and getattr(value, 'ndim', 1) > 0:
res2 = clear_password(name, runas)
if email_opt_in is not None: opt_in = email_opt_in == 'true' mock_update_email_opt_in.assert_called_once_with(self.user, self.course.org, opt_in) else: self.assertFalse(mock_update_email_opt_in.called)
return [('127.0.0.1:11211 (1)', {})]
self._remove_subtree(BlockKey.from_usage_key(location), new_structure['blocks'])
from __future__ import absolute_import import salt.utils from datetime import datetime import logging import time
salt '*' vsphere.list_ssds my.esxi.host root bad-password
tfidf_test = t1.transform(counts_test).toarray() assert_equal(tfidf_test.shape, (len(test_data), len(v1.vocabulary_)))
executor.loader.check_consistent_history(connection)
dts_with_oob = dts + [np.datetime64('9999-01-01')]
import salt.ext.six as six from salt.ext.six.moves import range, zip from salt.ext.six.moves.urllib.parse import urlparse as _urlparse
r = rwindow.Rolling(Series([2, 4, 6]), window=2)
repl = str(repl)
tm._skip_if_no_scipy() s = Series([1, 2, 3]) result = s.interpolate(method='polynomial', order=1) assert_series_equal(result, s)
return
self.assertIn('test.recho', funcs)
else: values = self.values
__virtualname__ = 'sentry'
self.assertTrue(self.run_function('softwareupdate.reset_catalog')) self.assertEqual(self.run_function('softwareupdate.get_catalog'), 'Default')
assert False
iris = datasets.load_iris() y_true, y_pred, _ = make_prediction(dataset=iris, binary=False)
rng = np.random.RandomState(0) X = rng.rand(10, 20) y = np.arange(10).astype(np.int)
if LooseVersion(xlrd.__VERSION__) >= LooseVersion("0.9.3"): xlrd_0_9_3 = True else: xlrd_0_9_3 = False
needs_closing = False fh = self.path
if not user or user.is_anonymous(): return None
def astype(array, dtype, copy=True): if not copy and array.dtype == dtype: return array return array.astype(dtype)
for ax in axes: df.plot(x="a", y="b", title="title", ax=ax)
from salt.utils import build_whitespace_split_regex
srid = self.query.get_context('transformed_srid') if srid: u, unit_name, s = get_srid_info(srid, connection) geodetic = unit_name.lower() in geo_field.geodetic_units
dmi_data = _dmi_data(dmi_raw, clean, fields) if len(dmi_data): record['data'] = dmi_data dmi.append(record) elif not clean: dmi.append(record)
world.xqueue.config['default'] = response_dict
resp = self.client.get(reverse('activate', kwargs={'key': activation_key})) return resp
providers_string = _("{first_providers}, and {last_provider}").format( first_providers=u", ".join(providers[:-1]), last_provider=providers[-1] )
assert X.ndim == 2 return T.nnet.softmax(X * self.P)
assert_panel_equal(p.ix[items, dates, cols], p.reindex(items=items, major=dates, minor=cols))
assert_greater(gpc.log_marginal_likelihood(gpc.kernel_.theta), gpc.log_marginal_likelihood(kernel.theta))
warnings.warn(premature, RuntimeWarning, stacklevel=2) break
pass
result = self.panel.reindex() assert_panel_equal(result, self.panel) self.assertFalse(result is self.panel)
index = period_range('1/1/2001', periods=10) s = Series(randn(10), index=index) expected = s[index[0]] result = s.iat[0] self.assertEqual(expected, result)
locale_dirs = filter(os.path.isdir, glob.glob('%s/*' % self.default_locale_path)) all_locales = map(os.path.basename, locale_dirs)
self._initialize_mixed(mappings={})
media = Media() for field in self.fields.values(): media = media + field.widget.media return media
record = { 'handle': handle, 'description': dmi_raw.pop(0).strip(), 'type': int(htype) }
X = check_array(X, accept_sparse=['csc'], ensure_2d=False) if issparse(X): X.sort_indices()
self.required_html_ids = [descriptor.location.html_id() for descriptor in self.descriptor.get_required_module_descriptors()]
import logging
if len(axes) != self.ndim - 1: raise ValueError( "currently only support ndim-1 indexers in an AppendableTable")
if not metric_base.startswith('virt.'): metric_base += '.' + ret['id'].replace('.', '_')
attempt_3 = SoftwareSecurePhotoVerification( user=user, created_at=attempt_2.created_at + timedelta(days=1) ) attempt_3.save()
old_stdout, old_stderr = sys.stdout, sys.stderr try: sys.stdout = StringIO() sys.stderr = StringIO()
assert_series_equal(ix[:, 'A'], f['A'])
assert_raises(ValueError, cval.StratifiedShuffleSplit, y, 3, 2) assert_raises(ValueError, cval.StratifiedShuffleSplit, y, 3, 3, 2)
for module in cls._iter_scorable_xmodules(block_structure): cls._collect_max_score(block_structure, module)
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
res = df.query('index < 5', engine=engine, parser=parser) expec = df[df.index < 5] assert_frame_equal(res, expec)
tm.assertRaisesRegexp(ValueError, 'No axis named 2', f, axis=2) getattr(self.mixed_frame, name)(axis=0) getattr(self.mixed_frame, name)(axis=1)
gpg_info_file = '{0}/gpg-agent-info-salt'.format(gnupghome) with salt.utils.fopen(gpg_info_file, 'r') as fow: gpg_raw_info = fow.readlines()
self.set_logged_in_cookies(request)
s = Series(date_range('20130102', periods=5)) rs = s - s.shift(1) xp = s.diff() assert_series_equal(rs, xp)
self.client.logout() super(TestCourseListing, self).tearDown()
ensemble = BaggingRegressor(base_estimator=DecisionTreeRegressor(), max_samples=1.0, bootstrap=False, random_state=rng).fit(X_train, y_train)
from __future__ import absolute_import import copy
initial_file = os.path.join(migration_dir, "0001_initial.py") self.assertTrue(os.path.exists(initial_file))
from __future__ import unicode_literals
'msg': '', 'width': width, 'height': height,
self.assertTrue(user_has_role(self.user, CourseCreatorRole()))
result = list_files('.py') for path in result: logger.info(path)
warnings.simplefilter("ignore", RuntimeWarning)
email_params = get_email_params(course, auto_enroll=True, course_key=ccx_id, display_name=ccx.display_name) enroll_email( course_id=ccx_id, student_email=request.user.email, auto_enroll=True, email_students=True, email_params=email_params, )
if enrollment_mode is None and is_active is None: return True
_("This is the wiki for **{organization}**'s _{course_name}_.").format( organization=course.display_org_with_default, course_name=course.display_name_with_default_escaped, )
assert isinstance(sls_data, OrderedDict) assert not isinstance(yml_data, OrderedDict)
is_course_full = False if course.max_student_enrollments_allowed is not None: is_course_full = self.num_enrolled_in_exclude_admins(course.id) >= course.max_student_enrollments_allowed return is_course_full
val = int(cell_contents) if val == cell_contents: cell_contents = val
return User.objects.get(email=email)
return {"result": "inclusion_one_default - Expected result: %s, %s" % (one, two)}
return add_enrollment(student_id, course_id, mode=mode, is_active=is_active)
self.answer_ids = [x.get('id') for x in self.inputfields] if self.max_inputfields == 1: self.answer_id = self.answer_ids[0]
many_to_many = False many_to_one = True one_to_many = False one_to_one = False
super(Person, self).save(*args, **kwargs) self.data.append("After save")
response = redirect(reverse('cas-login'))
log.error('Spot instance request resulted in state \'{0}\'. ' 'Nothing else we can do here.') return False
def add_implicit_requires(data):
set_has_profile_image(username, True, _make_upload_dt())
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
try: from salt._compat import ElementTree as ET HAS_ELEMENT_TREE = True except ImportError: HAS_ELEMENT_TREE = False
self.assertRaises(Exception, self.panel.reindex, major_axis=new_major, major=new_major)
sreg_response = sreg.SRegResponse.extractResponse(sreg_request, sreg_data) sreg_response.toMessage(response.fields)
self.errored_courses[course_dir] = errorlog
pass
if block: time.sleep(0.01) else: yield
ssh_args.extend(['-t', '-t'])
self.assertTrue('Activate Course Enrollment' in response.content)
return sum(name == n for n in self.names) > 1
if ttype == 'zeromq': import salt.transport.zeromq return salt.transport.zeromq.AsyncZeroMQPubChannel(opts, **kwargs)
df[k] = np.sum(mask)
list_maintenance_windows = salt.utils.alias_function(list_windows, 'list_maintenance_windows')
raise TypeError('Must provide offset.')
error_bad_lines=True, warn_bad_lines=True,
pi = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2005') self._check_all_fields(pi)
d1 = date_range('12/31/1990', '12/31/1999', freq='A-DEC') d2 = date_range('12/31/2000', '12/31/2009', freq='A-DEC')
self.assertEqual( len(CourseEnrollment.objects.filter(mode='honor', user_id__in=user_ids)), expected_conversions )
self.assertRedirects(response, '/some_view/')
assert_true(init_param.default is None) continue
generated_certificate = GeneratedCertificate.eligible_certificates.get( user=self.enrolled_user_1, course_id=self.course.id, ) self.assertFalse(generated_certificate.is_valid())
class BandAdmin(ModelAdmin): fieldsets = [(None, {'fields': ['name']})]
with self.assertRaises(Place.MultipleObjectsReturned): Restaurant.objects.get()
time.sleep(0.5)
staff_user = UserFactory.create() CourseStaffRole(self.course.location.course_key).add_users(staff_user)
results = data.get_course_enrollments(self.user.username) self.assertEqual(results, created_enrollments)
BadgrBackend.badges.append(EXAMPLE_SLUG) self.handler._create_badge = Mock() self.handler._ensure_badge_created(self.badge_class) self.assertFalse(self.handler._create_badge.called)
kpca = KernelPCA() Xt = kpca.fit_transform(X) assert_equal(Xt.shape, (3, 0))
if packages_to_upgrade==[]:
self.ensure_schema() self.migration_qs.filter(app=app, name=name).delete()
course_path = "/courses/{}".format(course_id.to_deprecated_string())
s = self.ts.iloc[[0]] result = s.sem(ddof=1) self.assertTrue(isnull(result))
from __future__ import unicode_literals
with check_mongo_calls_range(max_finds=4, max_sends=2): self._update_partitions(reload_items=False)
return [('127.0.0.1:11211 (1)', {})]
import integration from salt.config import cloud_providers_config
value = models.TextField(default='null')
def geometry_columns(self): return PostGISGeometryColumns
from __future__ import absolute_import import os import re import fnmatch import json import subprocess
self._fit_transform(X) return self.embedding_
fs.set_params(select__k=2) assert_equal(fs.fit_transform(X, y).shape, (X.shape[0], 4))
with self.assertRaises(ImproperlyConfigured): AppConfig('label', Stub())
skip_footer=0,
tsframe = self.tsframe.copy() new_index = [tsframe.index, np.arange(len(tsframe.index))] tsframe.index = MultiIndex.from_arrays(new_index)
with self.assertRaisesMessage(AssertionError, "'name' isn't a DateField or DateTimeField."): Item.objects.datetimes('name', 'month')
return set([p.id for p in course.user_partitions])
request_info = xmodule_instance_args.get('request_info', {}) if xmodule_instance_args is not None else {} task_info = {"student": student.username, "task_id": _get_task_id_from_xmodule_args(xmodule_instance_args)}
data = dict(self.data.items()) self.cleaned_data['confirmed'] = data['confirmed'] = 'true' self.data = data is_valid = False
return cls._reso_str_map.get(reso, 'day')
return _reduce_memmap_backed(a, m)
with self.assertRaises(TemplateSyntaxError): self.engine.get_template('exception04')
imputer = Imputer(missing_values, strategy=strategy, axis=0) imputer.fit(sparse.csc_matrix(X)) X_trans = imputer.transform(sparse.csc_matrix(X.copy()))
import salt.config as config from salt.exceptions import SaltCloudSystemExit import salt.utils.cloud
X_features = combined_features.fit(X, y).transform(X)
result = self.client.get_html(self._url()) self.assertNotIn('Test certificate', result.content)
self.q(css=self.BOOKMARKS_BUTTON_SELECTOR).first.click() if wait_for_results: EmptyPromise(self.results_present, "Bookmarks results present").fulfill()
return salt.runner.RunnerClient(_master_opts())
pstate['sg2'] += param_val ** 2 dx_t = - (scale * learning_rate / np.sqrt(pstate['sg2']) * param_val) rval += [param_val + dx_t]
from . import signals
if kw_overrides_match is _marker: return profile_match return kw_overrides_match
i_nbrs = nbrs.radius_neighbors([my_mean], bandwidth, return_distance=False)[0] points_within = X[i_nbrs] if len(points_within) == 0:
from request_cache.middleware import RequestCache
'sources': [u'example.mp4', u'example.webm'] + [video['url'] for video in encoded_videos],
from django.conf.urls import url
xblock_class = XBlock.load_class(block_type, select=settings.XBLOCK_SELECT_FUNCTION) content = xblock_class.open_local_resource(uri)
if not (allow_not_found and exception.args[0] == xblock.location): raise
integer = _if_str_then_list(integer) checks[int] = integer string = _if_str_then_list(string) checks[str] = string listing = _if_str_then_list(listing) checks[list] = listing dictionary = _if_str_then_list(dictionary) checks[dict] = dictionary
errstring = "No user found identified by 99" with self.assertRaisesRegexp(CommandError, errstring): self.command.handle("org/course/name", "99")
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
from django.test import TestCase
self._metric_base = metric_base self._sample_rate = sample_rate
from __future__ import unicode_literals
assert_greater((X_sparse.data == 0.).sum(), 0) assert_greater((X_sparse_test.data == 0.).sum(), 0)
self.assertEqual(views.get_cosmetic_display_price(self.course, registration_price), "Free")
k1_dims = self.k1.n_dims self.k1.theta = theta[:k1_dims] self.k2.theta = theta[k1_dims:]
noconvert_columns = set()
return ApiKeyHeaderPermission().has_permission(request, self)
pass
if library_role: library_role(self.lib_key).add_users(self.non_staff_user) if course_role: course_role(course.location.course_key).add_users(self.non_staff_user)
self.assertEqual(Author.objects.count(), 3) self.assertEqual(book.authors.count(), 2)
self.storage.save('bytes.txt', ContentFile(b"content")) self.storage.save('unicode.txt', ContentFile("español"))
expected_num_queries = (ceil(TEST_SIZE // batch_size) + ceil(TEST_SIZE // GET_ITERATOR_CHUNK_SIZE) + 2)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self._create_a_timed_exam_and_attempt()
def make_thunk(self, node, storage_map, compute_map, no_recycling): if not convnet_available(): raise RuntimeError('Could not compile cuda_convnet')
result = pd.to_datetime(i, errors='coerce') tm.assert_index_equal(result, i)
pythoncom.CoInitialize()
return redirect(reverse('dashboard'))
self._templates = templates self._engines = {}
self.course_outline.open_subsection_settings_dialog()
response = self.client.get(self.ping_url)
queue.put(random_delay)
unique_tab_types = [ CoursewareTab.type, CourseInfoTab.type, 'textbooks', 'pdf_textbooks', 'html_textbooks', ]
response = self.client.get(reverse('admin:admin_views_section_add')) self.assertIsInstance(response, TemplateResponse) self.assertEqual(response.status_code, 200)
self.current_block = NonComment(0, 0)
self.assertNotEqual(httpretty.last_request().headers, {})
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
ChoiceFormset = formset_factory(Choice, extra=0) formset = ChoiceFormset() self.assertEqual(len(formset.forms), 0) self.assertTrue(formset)
return nltk.tree.Tree(n.node, n[2:])
raise NotImplementedError('subclasses of BaseCache must provide a clear() method')
try: file_result = file_result[next(six.iterkeys(file_result))] except AttributeError: pass
self.login() self.assertEqual(original_session_key, self.client.session.session_key)
t_start = datetime.now() clf.fit(X) delta = (datetime.now() - t_start) time_to_fit = compute_time(t_start, delta)
return [{u"description": i, u"name": i, u"id": i} for i in map(str, xrange(num_topics))]
data = "a,b,c\n4,5,6\n\\" self.assertRaises(Exception, self.read_csv, StringIO(data), escapechar='\\')
return JsonResponse( CourseDetails.update_from_json(course_key, request.json, request.user), encoder=CourseSettingsEncoder )
if save_definition: task_definition.RegistrationInfo.Author = 'Salt Minion' task_definition.RegistrationInfo.Source = "Salt Minion Daemon"
bad_exceptions[math] = None
else: rng = (nanops.nanmin(x), nanops.nanmax(x)) mn, mx = [mi + 0.0 for mi in rng]
block_start = get_field_on_block(block_structure.get_xblock(block_key), 'start') if min_all_parents_start_date is None: merged_start_value = block_start or DEFAULT_START_DATE
algorithm = "full"
return urljoin(self.public_service_url, '/api/v1/')
from __future__ import unicode_literals
return np.array_equal(left, right)
REMOVE_SPAN_TAG_RE = re.compile(r'</span>(.+)<span')
GRADES_DOWNLOAD_ROUTING_KEY = HIGH_MEM_QUEUE
super(CourseGraderUpdatesTest, self).setUp() self.url = get_url(self.course.id, 'grading_handler') self.starting_graders = CourseGradingModel(self.course).graders
_optname = _optname.replace('-', '_') iface_data[addrfam][_optname] = value
sub_cmd = 'DROP ROLE "{0}"'.format(name) _psql_prepare_and_run( ['-c', sub_cmd], runas=runas, host=host, user=user, port=port, maintenance_db=maintenance_db, password=password)
return '%s:%s:%s' % (key_prefix, version, key)
return [('127.0.0.1:11211 (1)', {})]
X, y = X[y < 2], y[y < 2]
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'rackspace' DRIVER_NAME = 'openstack'
self.assert_numpy_array_equal(s.unique(), np.array([]), check_dtype=False) self.assertEqual(s.nunique(), 0)
if not hasattr(self, 'sampling_procedure') or \ self.sampling_procedure is None: self.sampling_procedure = GibbsEvenOdd() self.sampling_procedure.set_dbm(self)
get_input_endpoint = show_input_endpoint
key = self.__read_master_key() if key == self.key: return payload self.key = key payload_kwargs['key'] = self.key payload = channel.send(payload_kwargs)
try: ret = json.dumps({'return': resp}) except TypeError as exc: code = 500 ret = str(exc)
_rcost = MeanBinaryCrossEntropy() reconstruction_cost = lambda a, b: _rcost.cost(a, b) / ds.X.shape[1]
user = UserFactory.create(is_staff=True, is_superuser=True) user.save() self.client.login(username=user.username, password='test')
'ALLOW_UNICODE_COURSE_ID': False,
still_in_grace = CapaFactory.create(showanswer='correct_or_past_due', max_attempts="1", attempts="1", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertFalse(still_in_grace.answer_available())
FILE_UPLOAD_STORAGE_BUCKET_NAME = 'edxuploads' FILE_UPLOAD_STORAGE_PREFIX = 'submissions_attachments'
module = CapaFactory.create(rerandomize=RANDOMIZATION.NEVER, max_attempts=2, done=True) self.assertTrue(module.should_show_save_button())
m_obj = re.match(r'^/courses/{}'.format(settings.COURSE_ID_PATTERN), input_str) if m_obj: return CourseKey.from_string(m_obj.group('course_id')) return None
s.name = 'E' self.assert_series_equal(result2.sort_index(), s.sort_index())
from salt.modules import lvs
data_lst = np.array(data.data, dtype=object) data_lst = data_lst[indices] data.data = data_lst.tolist()
course_key, _ = strip_ccx(course_key) return self._modulestore.check_supports(course_key, method)
return os.sep.join(__file__.split(os.sep)[:-4]) + '/data/imports/' + filename
import integration
else: ret = _load_result(existing, ret)
samples_norm = self.samples samples_unif = self.prng.uniform(size=samples_norm.shape[0]) samples = np.vstack([samples_norm, samples_unif])
try: return cls.objects.filter(course_id=course_id, user=user, course_enrollment=course_enrollment, status='purchased').latest('id') except PaidCourseRegistration.DoesNotExist: return None
Site.objects.clear_cache()
self.assertRaises(ValueError, self.frame.append, self.frame, verify_integrity=True)
with tm.assert_produces_warning(None): for idx1, idx2 in cases:
for s in [Series(), Series(index=list('abc'))]: result = s.get(None) self.assertIsNone(result)
from __future__ import absolute_import import os import re import logging
raise NotImplementedError()
return { cls.STRING_PAYLOAD, cls.ROOT_EXTRA_FIELDS, cls.CONTEXT_EXTRA_FIELDS, }
self.assertEqual(response.status_code, 400)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
import salt.ext.six as six
for num, item in enumerate(extra_data, start=1): key = u"merchant_defined_data{num}".format(num=num) params[key] = item
override_field_for_ccx(self.ccx, self.course, field, value)
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
self.assertIn('good_cookie', parse_cookie('a:=b; a:=c; good_cookie=yes').keys())
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch ensure_in_syspath('../../')
DEBUG = True
if parent_url is not None and index is not None: course_key = descriptor.location.course_key parent_location = course_key.make_usage_key_from_deprecated_string(parent_url)
return CoordTransform(self.source_srs, target_srs)
name = '"SOME%NAME"' quoted_name = connection.ops.quote_name(name) self.assertEqual(quoted_name % (), name)
if existing['code'] == 200:
__saltstack_version__ = __get_version(__saltstack_version__) del __get_version
import salt.transport.client import salt.transport.frame import salt.ext.six as six
callback_url = request.build_absolute_uri( reverse("shoppingcart.views.postpay_callback") )
from salt.states import locale
if self.signal_handler and bulk_ops_record.has_library_updated_item: self.signal_handler.send("library_updated", library_key=library_id) bulk_ops_record.has_library_updated_item = False
gpr = GaussianProcessRegressor(kernel=kernel) gpr.fit(X, y_norm) gpr_norm = GaussianProcessRegressor(kernel=kernel, normalize_y=True) gpr_norm.fit(X, y)
try:
MAXSIZE = int((1 << 31) - 1)
for utmp in '/var/run/utmp', '/run/utmp': try: result[os.stat(utmp).st_mtime] = utmp except Exception: pass return result[sorted(result).pop()]
with self.assertRaises(forms.ValidationError): f.clean('13:30:05')
field.db_index = False
self.assert_enrollment_status( as_server=True, mode=None, is_active='foo', expected_status=status.HTTP_400_BAD_REQUEST )
log.debug( 'ext_pillar.mongo: no document found in collection {0}'.format( collection ) ) return {}
ret['Success'] = False ret['Result'] = format(error)
x = _ravel(x) return np.dot(x, x)
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
epub_title = project epub_author = 'Django Software Foundation' epub_publisher = 'Django Software Foundation' epub_copyright = copyright
self.assertEqual( course_complete.badge_description(self.course, 'honor'), 'Completed the course "Badged" (honor, 2015-05-19 - 2015-05-20)' )
self.assertEqual(data['course_mode_slug'], "verified")
y_true, _, probas_pred = make_prediction(binary=False)
from __future__ import absolute_import
'RUN_AS_ANALYTICS_SERVER_ENABLED': False,
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
_, y_true = make_multilabel_classification(n_features=1, n_classes=n_classes, random_state=0, allow_unlabeled=True, n_samples=n_samples) _, y_pred = make_multilabel_classification(n_features=1, n_classes=n_classes, random_state=1, allow_unlabeled=True, n_samples=n_samples)
if win32event.WaitForSingleObject(hProcess, win32event.INFINITE) == win32con.WAIT_OBJECT_0: exitcode = win32process.GetExitCodeProcess(hProcess) ret['retcode'] = exitcode
result = df.drop_duplicates(['A', 'B']) expected = df.ix[[0, 2, 3, 6]] tm.assert_frame_equal(result, expected)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, patch ensure_in_syspath('../../')
import pyinotify
world.css_click(css_selector='.chapter', index=1) subsection_css = 'a[href*="Test_Subsection_2/"]'
return { 'username': user.username, 'email': user.email, 'first_name': user.first_name, 'last_name': user.last_name, }
CreditCourse.objects.create(course_key=self.course.id, enabled=True)
return 'v{}.0'.format(ver)
Person.objects.create(name='person1', gender=1) Person.objects.create(name='person2', gender=2) changelist_url = reverse('admin:admin_views_person_changelist')
self.assertTrue(pkg_targets) version = self.run_function('pkg.version', pkg_targets)
y_true, _, probas_pred = make_prediction(binary=True)
from salt.modules import nagios import os
result = sparse.loc[sparse.x % 2 == 1] exp = orig.loc[orig.x % 2 == 1].to_sparse() tm.assert_sp_frame_equal(result, exp)
ts = Timestamp('2000-01-01')
import os
dive = Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
'show_timeout': bool,
return course.display_name_with_default.replace('<', '&lt;').replace('>', '&gt;')
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:05")
os.killpg(os.getpgid(process.pid), signal.SIGINT) term_sent = True continue
output = self.engine.render_to_string('inheritance04') self.assertEqual(output, '1&3_')
touch(name, makedirs=makedirs) retry_res, retry_msg = _check_file(name) if not retry_res: return _error(ret, check_msg)
from __future__ import absolute_import
grade_status = CreditRequirementStatus.objects.get( username=self.USER_INFO['username'], requirement__namespace="grade", requirement__name="grade" ) grade_status.reason = {} grade_status.save()
'recon_default': float,
from __future__ import absolute_import, print_function
s_list = list('aaa') s_series = Series(s_list) s_series_index = Series(s_list, list('ABC'))
course_mode_info = self._enrollment_with_complete_course('honor') self.assertTrue(course_mode_info['show_upsell']) self.assertEquals(course_mode_info['days_for_upsell'], 1)
task_input = {'student_set': "all_whitelisted"}
s = Series([1, 2, 3])
CourseOverviewImageConfig.objects.all().delete() CourseOverviewImageConfig.objects.create( enabled=enabled, small_width=200, small_height=100, large_width=400, large_height=200 )
elements = self.q(css="ol.course-tabs .new-post-btn") return elements.first if elements.visible and len(elements) == 1 else None
assert_greater(np.mean(pred == iris.target), .9)
clf = svm.OneClassSVM(nu=0.1, kernel="rbf", gamma=0.1) clf.fit(X_train)
silhouette_avg = silhouette_score(X, cluster_labels) print("For n_clusters =", n_clusters, "The average silhouette_score is :", silhouette_avg)
if not array_equivalent(left, right, strict_nan=strict_nan): _raise(left, right, err_msg)
FormSet = inlineformset_factory(ParentWithUUIDAlternateKey, ChildRelatedViaAK, fields='__all__') formset = FormSet() self.assertIsNone(formset.forms[0].fields['parent'].initial)
self.assertIsNone(subq._result_cache)
import os import stat import os.path import logging import struct
return data['alias'], data['driver'], ()
return self._x
check_err(result, cpl=cpl)
raise
try:
if len(res) != len(ri): res, out = np.zeros(len(ri), dtype=out.dtype), res res[ids] = out
if name == 'nansum': if dt.itemsize < 8: return False
if n_classes == 2: proba[:, 0] = 1. - proba[:, 1] else: proba /= np.sum(proba, axis=1)[:, np.newaxis]
self.assertTrue(check_password({}, 'test', 'test'))
copy_or_rename_transcript(new_name, old_name, item, user=request.user)
cmd = '{0}.{1}'.format(self.cmd_prefix, cmd)
exc_info_on_loglevel=logging.DEBUG
shutil.copyfile(path_in, path_test)
return psutil.NUM_CPUS
if item['item_copyright'] is not None: handler.addQuickElement("rights", item['item_copyright'])
return _write_js(output_root, _list_modules())
errstring = "Error: too few arguments" with self.assertRaisesRegexp(CommandError, errstring): call_command('force_publish')
test_user = UserFactory() GeneratedCertificateFactory.create( user=test_user, course_id=course_id, mode=mode, status=status )
return {}
self.base_fields[MIN_NUM_FORM_COUNT] = IntegerField(required=False, widget=HiddenInput) self.base_fields[MAX_NUM_FORM_COUNT] = IntegerField(required=False, widget=HiddenInput) super(ManagementForm, self).__init__(*args, **kwargs)
rotation = np.zeros((n_components, n_components)) rotation[:, 0] = vectors[random_state.randint(n_samples), :].T
_, po_contents = self._run_makemessages(domain='djangojs') self.assertMsgId("Static content inside app should be included.", po_contents)
self.validate_xblock_info_consistency(xblock_info, has_child_info=has_child_info)
result = result.astype('int64') expected = p.sum(0) assert_frame_equal(result, expected)
EmptyPromise( lambda: self.q(css=self.certficate_css + " .new-button").present, 'Create first certificate button is displayed' ).fulfill()
width = self.ext.config['vimeo_width'][0] height = self.ext.config['vimeo_height'][0] return flash_object(url, width, height)
log.debug('Multiple environment per bucket mode') s3_meta = __get_s3_meta()
value = self.widget.value_from_datadict( data={'myfile-clear': True}, files={}, name='myfile', ) self.assertEqual(value, False)
import nose
publish_event( "removed", result=format_block_keys(block_keys['selected']), removed=format_block_keys(block_keys['invalid']), reason="invalid" )
cache_values = cache.get_many([ enrollment_cache_key, has_skipped_cache_key, verification_status_cache_key ])
CACHES = { 'default': { 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache', } } CACHE_MIDDLEWARE_KEY_PREFIX = '' CACHE_MIDDLEWARE_SECONDS = 600 CACHE_MIDDLEWARE_ALIAS = 'default'
if is_datetimelike_v_numeric(x, y): raise TypeError("invalid type comparison")
d = load_linnerud() X = d.data Y = d.target
query = self.run_cloud('--query') ret_str = ' {0}:'.format(self.INSTANCE_NAME)
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
widget = MyMultiWidget(widgets=(TextInput(), FileInput())) self.assertTrue(widget.needs_multipart_form)
from salttesting.helpers import ensure_in_syspath, expensiveTest
auto_auth = AutoAuthPage(self.browser).visit() user_info = auto_auth.user_info LogoutPage(self.browser).visit() return user_info
with tm.assertRaisesRegexp( IndexError, 'single positional indexer is out-of-bounds'): df.iloc[30] self.assertRaises(IndexError, lambda: df.iloc[-30])
if isinstance(address, bytes): self._check_packed_address(address, 4) self._ip = _int_from_bytes(address, 'big') return
if not self.is_in_memory_db(self.settings_dict['NAME']): BaseDatabaseWrapper.close(self)
compute_inherited_metadata(course_descriptor)
import salt.utils.sdb
manager = self.__manager self.__manager = None yield
axes = df.plot(subplots=True, color='k') for ax in axes: self._check_colors(ax.get_lines(), linecolors=['k']) tm.close()
from salttesting import TestCase from salttesting.mock import Mock, patch, mock_open
self.assertEqual(len(all_gradesets), 5)
self._verify_visibility_state(xblock_info, VisibilityState.ready)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
s = s_orig.copy()
pass
query = self.q(css='.ui-loading-indicator') return query.present and 'is-hidden' not in query.attrs('class')[0].split()
centers[center_idx] += np.sum(X[center_mask], axis=0)
dists_m = [3553.30384972258, 1243.18391525602, 2186.15439472242]
estimator.fit(X[bootstrap_idx], y[bootstrap_idx]) y_predict = estimator.predict(X)
e = salt.utils.event.get_event('minion', sock_dir=self.minion_opts['sock_dir'], opts=self.minion_opts)
os.environ['NO_PREREQ_INSTALL'] = 'true'
with patch('student.views.cert_info', return_value=None): response = self.client.get(reverse('dashboard')) self.assertEqual(response.status_code, 200)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
actual = repr(factor) self.assertEqual(actual, expected)
with remove_ccx(parent_usage_key) as (parent_usage_key, restore): return restore(self._modulestore.create_child( user_id, parent_usage_key, block_type, block_id=block_id, fields=fields, **kwargs ))
self.assertTrue(hasattr(r, 'streaming_content'))
CourseEnrollment.unenroll(user, course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assertFalse(CourseEnrollment.is_enrolled_by_partial(user, course_id_partial)) self.assert_no_events_were_emitted()
__func_alias__ = { 'set_': 'set' }
self.assertOrphanCount(course.id, 1) self.assertOrphanCount(published_branch, 1)
cherrypy.session.release_lock()
try: from pyVmomi import vim, vmodl HAS_PYVMOMI = True except ImportError: HAS_PYVMOMI = False
lw = LedoitWolf(store_precision=False, assume_centered=True) lw.fit(X_centered) assert_almost_equal(lw.score(X_centered), score_, 4) assert(lw.precision_ is None)
import re import logging
return [field for field in self if not field.is_hidden]
import salt.client.ssh
import salt.ext.six as six
where = [True] * 10 where[-2] = False result = store.select('df2', where=where) expected = df.loc[where] tm.assert_frame_equal(result, expected)
key = 'some key with spaces' * 15 val = 'a value' cache.set(key, val) self.assertEqual(cache.get(key), val)
rng = check_random_state(0)
has_changes = False
tables = None
pass
self.grading_policy['GRADER'] return self._grading_policy['RAW_GRADER']
DETAILS['url'] = opts['proxy']['url']
self.ensure_connection() return self.autocommit
xmin = TT.switch(cond, constant(numpy.nan), a + (-B + TT.sqrt(radical)) / (3 * A)) return xmin
results.columns = ['dont_sort', 'sort']
self._engine.set_value(_values_from_object(arr), _values_from_object(key), value)
current_umask = os.umask(0o027) verify_files([logfile], self.config['user']) os.umask(current_umask)
if isinstance(path, string_types): ext = os.path.splitext(path)[-1] else: ext = 'xls' if engine == 'xlwt' else 'xlsx'
for block in value._data.blocks: self.assertTrue(block.values.flags.writeable)
__virtualname__ = 'service'
response = self.client.get_json(LIBRARY_REST_URL) self.assertEqual(response.status_code, 200) return parse_json(response)
for course in [shib_course, open_enroll_course]: for student in [shib_student, other_ext_student, int_student]: request = self.request_factory.post('/change_enrollment')
COMPONENT_TYPES = ['discussion', 'html', 'problem', 'video']
try: del self['_session_expiry'] except KeyError: pass return
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
for child in self.get_display_items(): rendered_child = child.render(STUDENT_VIEW, child_context) fragment.add_frag_resources(rendered_child)
OverrideFieldData.provider_classes = None
from jinja2 import Environment try: import ldap import ldap.modlist import ldap.filter HAS_LDAP = True except ImportError: HAS_LDAP = False
if current_state == 'off': ret['result'] = True ret['comment'] = 'System already in the correct state' return ret
return self.cache_ttl > 0
template = CourseEmailTemplate.get_template() self.assertIsNotNone(template.html_template) self.assertIsNotNone(template.plain_template)
service = MockServices() if self.flag == 1: service.id = 'asd' return [service] return [service]
from __future__ import unicode_literals
from __future__ import absolute_import, print_function
invalid_json = "{u'name': 'Test Name', []}"
p = Period('2012', freq='15D') xp = _ex(2012, 1, 16) self.assertEqual(xp, p.end_time)
output = self.engine.render_to_string('inheritance19') self.assertEqual(output, '140056783_')
raise
self.assertTrue('Activate Course Enrollment' in response.content)
if self.is_categorical_astype(dtype): return self.make_block(Categorical(self.values, **kwargs))
def f(): df.loc[df.new_col == 'new', 'time'] = v
SETTINGS_MODULE = None
self.mlp.modify_updates(updates)
import salt.utils import salt.ext.six as six from salt.exceptions import CommandExecutionError
self.set_config(False)
queryset = queryset.order_by('name')
unstacked = self.ymd.unstack() unstacked = unstacked.sort_index(axis=1, ascending=False) restacked = unstacked.stack() assert_frame_equal(restacked, self.ymd)
dense_classifier = AdaBoostClassifier( base_estimator=CustomSVC(probability=True), random_state=1, algorithm="SAMME" ).fit(X_train, y_train)
try: import hjson as hjson HAS_LIBS = True except ImportError: HAS_LIBS = False
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string) get_course_with_access(request.user, 'staff', course_key)
ofile.writelines(lines)
rng = date_range('1/1/2000', periods=10, freq='BMS')
self.cohort_management_page.select_cohort_some_inline_discussion()
import_course_from_xml( draft_store, 999, DATA_DIR, ['test_import_course'], static_content_store=content_store, do_import_static=False, verbose=True )
xblock = self.store.create_item( self.user_id, test_course.id, 'vertical', block_id='test_vertical' )
tmp = sorted(class_mapping, key=class_mapping.get)
FEATURES['ENABLE_TEAMS'] = True
n_jobs, n_estimators, starts = _partition_estimators(n_more_estimators, self.n_jobs) total_n_estimators = sum(n_estimators)
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, max_attempts=0, done=True) self.assertTrue(module.should_show_reset_button())
TestDaemon.transplant_configs(transport=self.options.transport)
world.create_user('robot', 'test') user = User.objects.get(username='robot')
all_answers = survey.get_answers(limit_num_users=1) self.assertEquals(len(all_answers.keys()), 1)
return (isinstance(subspace, NullSpace) or (isinstance(subspace, CompositeSpace) and len(subspace.components) == 0))
return get_user_model()._meta.pk.to_python(request.session[SESSION_KEY])
with self.modify_settings(INSTALLED_APPS={'append': 'i18n.resolution'}): activate('de')
p4d = tm.makePanel4D() self.assertRaises(TypeError, store.put, 'p4d', p4d)
self.wait_for_captions() captions_selector = self.q(css=CSS_CLASS_NAMES['captions_text_getter']) captions_selector.click()
return '{0}#{1}{2}'.format(self.base_url, self.anchor, self.section)
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
return next( video for video in self.previous_uploads if video["edx_video_id"] == edx_video_id )
from __future__ import unicode_literals
raise NotImplementedError( "Subclasses of AppCommand must provide" "a handle_app_config() method.")
self.tree = etree.XML(problem_text)
arr = self.index.values new_index = Int64Index(arr, copy=True) tm.assert_index_equal(new_index, self.index) val = arr[0] + 3000
n, bins, patches = ax.hist(y, bins=bins, bottom=bottom, **kwds) cls._update_stacker(ax, stacking_id, n) return patches
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import integer_types
return uid
super(BaseComponentEditorView, self).__init__(browser) self.locator = locator
calendar0 = self.selenium.find_element_by_id('calendarin0') tds = calendar0.find_elements_by_tag_name('td')
if dtype == _NS_DTYPE or dtype == _TD_DTYPE: new_values = np.vstack([x.view('i8') for x in to_stack]) return new_values.view(dtype)
if 'parent_id' not in data: data["parent_id"] = None
return value.isoformat()
self.assertTrue(isinstance(value, (int, compat.long)))
str(qs.query)
for user in [self.alpha_user, self.beta_user, self.non_cohorted_user]: self.assertTrue(CourseEnrollment.is_enrolled(user, self.course.id))
mask = com.notnull(self.values).all(axis=0) selector = mask.ravel()
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(courses_list, [])
expected = self.series.astype('object')
if not key_data: return {}
assert isinstance(value, UsageKey) self.scope_ids = self.scope_ids._replace( def_id=value, usage_id=value, )
rename_dict = dict(zip(self.ts.index, renamed.index)) renamed2 = self.ts.rename(rename_dict) assert_series_equal(renamed, renamed2)
res1l, res1r = s1.align(s2, join='left') res2l, res2r = s2.align(s1, join='right')
from __future__ import print_function from __future__ import absolute_import import re import json from salt.utils.odict import OrderedDict from salt.utils import fopen as _fopen
return super(PaymentFakeView, self).dispatch(*args, **kwargs)
df = sql.read_sql_table("types_test_data", self.conn)
if __grains__['os'] in ['MacOS', 'Darwin'] and opts == 'defaults': opts = 'noowners'
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'cloudstack', vm_['profile'], vm_=vm_) is False: return False
a = 10000000000000000 b = a + 1 s = Series([a, b])
if self.force_save_button: return not self.closed() else: is_survey_question = (self.max_attempts == 0) needs_reset = self.is_submitted() and self.rerandomize == RANDOMIZATION.ALWAYS
course_overview_before.image_set.small_url = broken_small_url course_overview_before.image_set.large_url = broken_large_url course_overview_before.image_set.save()
from __future__ import unicode_literals
#html_theme_options = {}
yield
for cookie_name in [settings.EDXMKTG_LOGGED_IN_COOKIE_NAME, settings.EDXMKTG_USER_INFO_COOKIE_NAME]: cookie = self.client.cookies[cookie_name] self.assertIn("01-Jan-1970", cookie.get('expires'))
'ALLOW_WIKI_ROOT_ACCESS': True,
url(r'^admin/', admin.site.urls),
num_dimensions += 1
args = [] self.create_squares_with_executemany(args) self.assertEqual(models.Square.objects.count(), 0)
df = _make_mixed_dtypes_df('float') _check_mixed_dtypes(df)
if convert: indices = maybe_convert_indices(indices, len(self._get_axis(axis)))
self.login() original_session_key = self.client.session.session_key self.login(username='staff') self.assertNotEqual(original_session_key, self.client.session.session_key)
if image_file is not None: self.save_image(image_file)
return redirect(AUTH_DISPATCH_URLS[AUTH_ENTRY_LOGIN])
name = _make_profile_image_name(username) return {size: _get_profile_image_filename(name, size) for size in _PROFILE_IMAGE_SIZES}
return not self == edit_info
can_defer_constraint_checks = False
request = RequestFactory().post('unused_url') request.user = self.user request.META['HTTP_HOST'] = "aGenericValidHostName" self.append_allowed_hosts("aGenericValidHostName")
assert len(self.dbm.hidden_layers) > 0
if name == 'SITE_NAME': return 'openedx.localhost' else: return default
if severities is None: severity_match = True else: if update.MsrcSeverity in severities: severity_match = True
print('Loading model...') model = serial.load(model_path) model.set_batch_size(m) return model
for library in NPM_INSTALLED_LIBRARIES: sh('/bin/cp -rf node_modules/{library} {vendor_dir}'.format( library=library, vendor_dir=NPM_VENDOR_DIRECTORY, ))
spot_prefix = 'LaunchSpecification.'
'USE_MICROSITES': False,
return field.is_relation and field.one_to_one and not field.concrete
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, show_reset_button=False, done=True) self.assertTrue(module.should_show_reset_button())
pem_body = ''.join(pem_body.split())
self.assertIn('a', index)
num_rows = max_num_channels // num_columns if num_rows * num_columns < max_num_channels: num_rows += 1
dashboard = DashboardPage(self.browser) dashboard.wait_for_page() return dashboard
matchin = rgxin.match(line) if matchin: lineno, inputline = int(matchin.group(1)), matchin.group(2)
transaction.atomic(Callable())
print "Failed with load_factor of {}".format(load_factor)
expected = ts['2001'] expected.name = 'A'
from __future__ import absolute_import import logging import pipes
action_name = ugettext_noop('generated') task_fn = partial(upload_may_enroll_csv, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
try: manual_enrollment = cls.objects.filter(enrollment=enrollment).latest('time_stamp') except cls.DoesNotExist: manual_enrollment = None return manual_enrollment
win_autoruns.__salt__ = {} win_autoruns.__grains__ = {}
return os.path.getsize(self.path(name))
choices_correct = self._check_student_choices(binary_choices) inputs_correct = self._check_student_inputs(numtolerance_inputs) correct = choices_correct and inputs_correct
fetch = get
self.load_data()
data = { "form-TOTAL_FORMS": "1", "form-INITIAL_FORMS": "1", "form-MAX_NUM_FORMS": "0",
if salt.utils.is_windows(): runners = None utils = None funcs = None
pass
from __future__ import unicode_literals
_install_opener(auth)
if not pkgs: up_to_date = [] else: up_to_date = [x for x in pkgs if x not in targets]
from __future__ import unicode_literals
expire_dt = now + datetime.timedelta(seconds=cache_ttl) return expire_dt.strftime(HTTP_DATE_FORMAT)
rgr_ridge = Ridge(alpha=0.2) rgr_ridge.fit(proj_operator, proj.ravel()) rec_l2 = rgr_ridge.coef_.reshape(l, l)
with super(ForumFormDiscussionUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
idf.unstack('E')
estimator = MockImprovingEstimator(1) assert_raises(ValueError, learning_curve, estimator, X, y, exploit_incremental_learning=True)
validators = ( traverse_tree, )
from salt.serializers.yamlex import deserialize
return offset.days * 86400 + offset.seconds
df_result_custom_name = df_result df_result_custom_name = df_result_custom_name.rename( columns={'_merge': 'custom_name'})
qs = self.get_queryset() if queryset is None else queryset
__virtualname__ = 'nova'
methods = [method for method in resample_methods if method != 'ohlc'] for method in methods: result = getattr(s.resample(freq), method)()
new_order = [len(cols)] + lrange(len(cols)) row_margin.index = row_margin.index.reorder_levels(new_order)
from salt.modules.tomcat import _extract_war_version
ac = AppConfig('label', Stub(__path__=[], __file__='b/__init__.py')) self.assertEqual(ac.path, 'b')
with salt.utils.fopen(file_path): plist = plistlib.readPlist(true_path)
expected = left_f(df, Timestamp('nat')) result = right_f(Timestamp('nat'), df) assert_frame_equal(result, expected)
import salt.utils from salt.exceptions import CommandExecutionError
response = super(Client, self).delete(path, data=data, content_type=content_type, secure=secure, **extra) if follow: response = self._handle_redirects(response, **extra) return response
with self.assertRaisesMessage(TypeError, 'view must be a callable'): url(r'uncallable-object/$', views.uncallable)
mlp = MLPClassifier(hidden_layer_sizes=(50,), max_iter=10, alpha=1e-4, algorithm='sgd', verbose=10, tol=1e-4, random_state=1, learning_rate_init=.1)
self.assert_response_with_delete_cookie()
if "tags" in kwargs: kwargs["tags"] = _clean_tags(kwargs["tags"]) dog_stats_api.increment(metric_name, *args, **kwargs)
self.assertRedirects(response, "/get_view/")
tid = random.choice(string.digits) + tid
client = Client() client.get('/get_view/') raise Exception('exception message')
if not inspect.isclass(filt): continue
password = None user_data = {} fake_user_data = {}
def downward_state(self, state): return state def downward_message(self, state): return state
split_test = self._add_split_test_to_vertical(number=0, group_configuration_metadata={'user_partition_id': 0})
self.assertEqual(len(qs.exclude(publisher=-1)), 6)
__virtualname__ = 'task'
from __future__ import absolute_import import logging
self.frame.columns.name = 'columns' resetted = self.frame.reset_index() self.assertEqual(resetted.columns.name, 'columns')
result = super(SparseDataFrame, self).copy(deep=deep) result._default_fill_value = self._default_fill_value result._default_kind = self._default_kind return result
return BASE_URL + "/courses/" + self.course_id + "/" + self.url_path
data = {'changed': False, 'backend': 'gitfs'}
REQUIRE_DEBUG = False
return self
X = [[1, 1, 5], [1, 1, 0]] t3.fit(X) X_incompt = [[1, 3], [1, 3]] assert_raises(ValueError, t3.transform, X_incompt)
plt.scatter(embedding[0], embedding[1], s=100 * d ** 2, c=labels, cmap=plt.cm.spectral)
self.assertTrue(pkg_targets)
self._write("]")
if existing['code'] == 200:
if encoding: from codecs import lookup lookup(encoding) self.encoding = encoding else: self.encoding = None
return [(i.axis, i.cname) for i in self.index_axes]
self.store.convert_to_draft(self.vertical_x1a, self.user_id) item = self.store.get_item(self.vertical_x1a) self.assertTrue(self.store.has_published_version(item))
'HTTP_REFERER': 'referer', 'HTTP_ACCEPT_LANGUAGE': 'accept_language',
elif is_numeric_v_string_like(a, b): result = False
from __future__ import absolute_import import logging
FEATURES['ENABLE_LTI_PROVIDER'] = True INSTALLED_APPS += ('lti_provider',) AUTHENTICATION_BACKENDS += ('lti_provider.users.LtiBackend',)
ifp = self.capa_system.filestore.open(filename)
output_filename = course_key.to_deprecated_string().replace('/', '-') + ".csv"
self.course_info_page.visit() self.tab_nav.go_to_tab('Course') self.course_nav.go_to_section('Test Section', 'Test Subsection')
return ((storage_used + storage_need) < (storage_total * max_disk_usage))
self.assertEqual(np.round(df['f64'].iloc[0], 14), np.round(res['f64'].iloc[0], 14))
content_type_base = models.ForeignKey(ContentType, models.CASCADE, related_name='+') object_id_base = models.PositiveIntegerField() content_object_base = GenericForeignKey('content_type_base', 'object_id_base')
self._compare(o.head(0), o.iloc[0:0]) self._compare(o.tail(0), o.iloc[0:0])
__virtualname__ = 'syslog'
test_cov = empirical_covariance( X_test - self.location_, assume_centered=True) res = log_likelihood(test_cov, self.get_precision())
return inst.user.username
assert not kwargs self.operations = args[0]
return self.q(css=".submission-success h4").text
errors = [] minions = [] for minion in response: minions.append(minion) if not response[minion]: errors.append(minion)
for alias, cur_refcount in self.alias_refcount.copy().items(): unref_amount = cur_refcount - to_counts.get(alias, 0) self.unref_alias(alias, unref_amount)
return HttpResponse()
config.cancel()
@property def encoding(self): return self._layer._ds.encoding
self.assertEquals(11, self.response.content.count('grade_F'))
from __future__ import absolute_import
cohorted_topics = self.q(css=self._bounded_selector('.check-discussion-subcategory-%s:checked' % key)) return len(cohorted_topics.results)
rval = X.copy()
der_sig_in = asn1.DerObject() der_sig_in.decode(der_sig)
q1 = Tag.objects.order_by('name') self.assertIsNot(q1, q1.all())
'a second from now', '%(count)s seconds from now', delta.seconds
return self.slice_indexer(key.start, key.stop, key.step, kind=kind)
if _ret['result'] is False or ret['result'] is True: ret['result'] = _ret['result']
if transport in ('zeromq', 'tcp'): key_dirs = _check_minions_directories(pki_dir) else: key_dirs = _check_minions_directories_raetkey(pki_dir)
series = self.series.copy() self.assertRaises(TypeError, setattr, series, 'index', None)
class Rock(Mineral): tags = GenericRelation(TaggedItem)
if self.selection.filter is not None: for field, op, filt in self.selection.filter.format():
return repr(tuple(key))
output = self.engine.render_to_string('inheritance13') self.assertEqual(output, '1a3b')
pass
from __future__ import absolute_import
if not key: key = salt.utils.aws.IROLE_CODE
self.ptr = lgeos.initGEOS_r(notice_h, error_h)
class WKTReader_st(Structure): pass
return (super(StaticTab, cls).validate(tab_dict, raise_error) and key_checker(['name', 'url_slug'])(tab_dict, raise_error))
step_incr = -1 start_idx = (num_assets - 1) - start_idx end_idx = (num_assets - 1) - end_idx
from __future__ import absolute_import, print_function import logging
for k, v in self.panel.iteritems(): pass
with assert_raises(ValueError): course = self.process_xml(CourseFactory.build(policy={'days_early_for_beta': 'null'}))
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
char_field = models.CharField(max_length=30, blank=True) integer_field = models.IntegerField(null=True) boolean_field = models.NullBooleanField()
X = np.array(list(product(range(N_per_side), repeat=2)))
declared_fields = OrderedDict() for base in reversed(new_class.__mro__): if hasattr(base, 'declared_fields'): declared_fields.update(base.declared_fields)
self.instructor_dashboard_page = InstructorDashboardPage(self.browser, self.course_id) self.instructor_dashboard_page.visit() self.cohort_management_page = self.instructor_dashboard_page.select_cohort_management()
self.X1_bool = self.X1.round(0) self.X2_bool = self.X2.round(0)
winrm_port = config.get_cloud_config_value( 'winrm_port', vm_, __opts__, default=5986 )
key = com._apply_if_callable(key, self.obj)
storage = self.get_storage() request._messages = storage self.assertEqual(get_level(request), constants.INFO)
req = self._get_POST_request_with_token() req2 = CsrfViewMiddleware().process_view(req, post_form_view, (), {}) self.assertIsNone(req2)
import fnmatch import glob import logging
certificate_invalidation.deactivate()
key = _factor_indexer(N[1:], labels)
self.draft_store.delete_course(course.id, self.dummy_user)
survey.save_user_answers(self.student, self.student_answers_update2, self.course_id)
state_run = self.run_function('state.sls', mods='requisites.listen_in_simple')
os.mkdir(path) self.addCleanup(shutil.rmtree, path)
self._assert_no_redirect(self.course_without_survey)
from salt.modules import ret import salt.loader
return _load_output(output_dir, _get_func_fullname(self.func), timestamp=self.timestamp, mmap_mode=self.mmap_mode, verbose=self._verbose)
result = _rollf(result)
from __future__ import absolute_import
mock = MagicMock(return_value=False) with patch.object(composer, '_valid_composer', mock): self.assertRaises(CommandNotFoundError, composer.install, 'd')
call_command('reindex_course_team', self.team1.team_id, self.team2.team_id) mock_index.assert_any_call(self.team1) mock_index.assert_any_call(self.team2) mock_index.reset_mock()
from __future__ import absolute_import import datetime import random import string
FEATURES['ENABLE_EDXNOTES'] = True
from __future__ import absolute_import
mod = inspect.getmodule(register_check) for (name, function) in inspect.getmembers(mod, inspect.isfunction): register_check(function)
rendered = "0.post%d" % pieces["distance"] if pieces["dirty"]: rendered += ".dev0"
non_editable_fields.extend([DiscussionDescriptor.discussion_id, DiscussionDescriptor.sort_key]) return non_editable_fields
ItemFactory.create( parent=parent, category='discussion', display_name='released', start=self.now, )
LogoutPage(self.browser).visit() self._auto_auth("STAFF_TESTER", "staff101@example.com", True)
return '{0.org}_{0.course}'.format(course_key)
self.find_css('.certificate-description-input').first.fill(value)
if not has_access_on_students_profiles: raise Http404 try: student = User.objects.get(id=student_id) except (ValueError, User.DoesNotExist): raise Http404
paid_course = CourseFactory.create() CourseModeFactory.create(course_id=paid_course.id, min_price=50, mode_slug=CourseMode.HONOR) CourseInstructorRole(paid_course.id).add_users(self.instructor) return paid_course
class sideeffect_str(str): def split(self, *args, **kwargs): res = str.split(self, *args, **kwargs) trans_real._translations['en-YY'] = None return res
if os.path.isdir(tmp_dir): shutil.rmtree(tmp_dir) elif os.path.isfile(tmp_dir): os.remove(tmp_dir)
from openedx.core.lib.block_structure.transformer_registry import TransformerRegistry TransformerRegistry.USE_PLUGIN_MANAGER = False
user.email = 'user@example.com' user.save() return user
middleware.process_request(request) request.session.flush()
return self.values.strides
self.assertEqual(dm[2].dtype, np.object_)
clf = DecisionTreeClassifier(max_depth=3, min_samples_split=2, criterion="gini", random_state=2) clf.fit(X, y)
self.generated_certificate.invalidate()
affinity = 'euclidean'
DATE_INPUT_FORMATS = [
request = self.factory.get('/child/', data={ALL_VAR: ''})
if self.priors is None: self.class_prior_ = self.class_count_ / self.class_count_.sum()
if slug_is_numerical(slug): slug = slug + "_"
from __future__ import absolute_import
'METADATA_URL': 'https://www.googleapis.com/youtube/v3/videos',
#self.assertEqual(iptables.build_rule(jump='CONNSECMARK',
requires_pytz = unittest.skipIf(pytz is None, "this test requires pytz")
del context_mock.context self.assertIn("We're having trouble rendering your component", render_to_string("html_error.html", None))
raise ValueError("strftime format ends with raw %")
return force_text(getattr(cursor, '_last_executed', None), errors='replace')
result = np.asarray(result, dtype=bool)
raise NotImplementedError( "get_html() must be provided by specific modules - not present in {0}" .format(self.__class__))
MIGRATION_MODULES = NoOpMigrationModules()
abc = RestrictedCourse.objects.get(course_key=new_course_id) abc.delete() with self.assertNumQueries(1): RestrictedCourse.is_restricted_course(new_course_id)
for line in output.splitlines(): if not line: continue fact, value = _format_fact(line) if not fact: continue ret[fact] = value return ret
__builtin__.__salt__ = {}
if hasattr(settings, 'DEPRECATED_ADVANCED_COMPONENT_TYPES'): xblock_types.extend( xblock_type for xblock_type in settings.DEPRECATED_ADVANCED_COMPONENT_TYPES if xblock_type not in xblock_types )
self._subtree_edited_on = kwargs.get('_subtree_edited_on', None) self._subtree_edited_by = kwargs.get('_subtree_edited_by', None)
original_now = timezone.now try: timezone.now = lambda: modification self.session.set_expiry(timedelta(seconds=10)) finally: timezone.now = original_now
self.assertQuerysetEqual( Tag.objects.exclude(parent__annotation__name="a1"), ['<Tag: t1>', '<Tag: t4>', '<Tag: t5>'] )
gsn._corrupt_switch = False
self.assertGreater(len(params['signed_date_time']), 0) self.assertGreater(len(params['transaction_uuid']), 0)
config = sconfig.master_config(master_config)
if host not in SITE_CACHE: SITE_CACHE[host] = self.get(domain__iexact=host) return SITE_CACHE[host]
import salt.utils.gitfs from salt.exceptions import FileserverConfigError
le = LabelEncoder() Y_multi = le.fit_transform(y)
return self.client.get(url)
from __future__ import absolute_import
class WKBWriterGet(GEOSFuncFactory): argtypes = [WKB_WRITE_PTR] restype = c_int
with open(CONFIG_ROOT / CONFIG_PREFIX + "env.json") as env_file: ENV_TOKENS = json.load(env_file)
verification_statuses = cache_values.get(verification_status_cache_key) if verification_statuses is None: verification_statuses = VerificationStatus.get_all_checkpoints(user.id, course_key) cache.set(verification_status_cache_key, verification_statuses)
other = RangeIndex(25, 14, -1)
values = self.block.values.ravel(order='K') if len(values) and values[0] is None: fill_value = None
result = DataFrame.from_records(tuples) tm.assert_index_equal(result.columns, pd.Index(lrange(8)))
coef = safe_sparse_dot(self.dual_coef_, self.support_vectors_)
output = self.engine.render_to_string('inheritance03') self.assertEqual(output, '1234')
else: ret = _load_result(existing, ret)
lshf = LSHForest(min_hash_match=31) ignore_warnings(lshf.fit)(X_train)
self.assertIsNotNone(user) self.assertTrue(user.is_anonymous)
create_manual_course_enrollment( user=user, course_id=course_id, mode=course_mode, enrolled_by=enrolled_by, reason='Enrolling via csv upload', state_transition=UNENROLLED_TO_ENROLLED, )
if snapshot.childSnapshotList: ret = _get_snapshots(snapshot.childSnapshotList, current_snapshot, snapshot_path) if current_snapshot: return ret snapshots.update(ret)
self.clear._send_pub = lambda payload: True
if is_setter: pass
if is_editable: self.assertTrue(profile_page.privacy_field_visible) self.assertEqual(profile_page.visible_fields, self.PRIVATE_PROFILE_FIELDS)
from __future__ import absolute_import
import sys from salt.ext.six.moves import map if sys.version_info < (2, 7): import unittest2 as unittest else: import unittest
mask = notnull(frame).values
return the_path
EDX_API_KEY = AUTH_TOKENS.get("EDX_API_KEY")
from urllib.error import HTTPError from urllib.parse import quote from urllib.request import urlopen
with tm.assertRaisesRegexp(ValueError, 'not valid'): df = DataFrame(index=l0) df = getattr(df, fn)('US/Pacific', level=1)
post_login_handler = _finish_auth_url(params) js_success_var = 'var nextUrl = "{}";'.format(post_login_handler) self.assertContains(response, js_success_var)
from salt.states import postgres_schema
X = check_array(X, accept_sparse="csc", dtype=DTYPE) y = check_array(y, accept_sparse='csc', ensure_2d=False, dtype=None) if issparse(X): X.sort_indices()
class MyRelModel2(models.Model): objects = MyManager()
self.provide_info(email, password) self.submit()
log.warning('Authentication failure of type "eauth" occurred.') return ''
template_packages = [__name__] @classmethod def get_template_dir(cls): return 'templates/test'
return _absolute_url(is_secure, url_path)
errors = modulestore.get_course_errors(SlashSeparatedCourseKey("edX", "toy", "2012_Fall")) assert errors == []
try: metadata = literal_eval(md)
if db_exists(name, **connection_args): log.info('DB \'{0}\' already exists'.format(name)) return False
if not driver: raise GDALException('Could not initialize GDAL/OGR Driver on input: %s' % str(dr_input)) self.ptr = driver
return indent
X = rng.randn(100, 2)
CohortFactory(course_id=course.id, name="ManualCohort") CohortFactory(course_id=course.id, name="ManualCohort2")
return create_xblock_info( modulestore().get_item(location), include_child_info=True, include_children_predicate=ALWAYS, )
pass
self.setUp()
self.distribution.running_salt_install = True self.distribution.salt_version_hardcoded_path = os.path.join( self.build_lib, 'salt', '_version.py' ) if IS_WINDOWS_PLATFORM:
with mock_create_refund(status=200, response=[]): self.send_signal() self.assertFalse(mock_send_notification.called)
self.assertEqual(len(mail.outbox), 1)
s = self.ymd['A'] s_unstacked = s.unstack(['year', 'month']) assert_frame_equal(s_unstacked, expected['A'])
return ( _has_catalog_visibility(courselike, CATALOG_VISIBILITY_CATALOG_AND_ABOUT) or _has_staff_access_to_descriptor(user, courselike, courselike.id) )
return self._get_permissions(user_obj, obj, 'user')
with self.assertRaises(CourseUserGroup.DoesNotExist): get_cohort_by_name(self.course.id, "AutoGroup")
pillar = salt.utils.gitfs.GitPillar(opts) pillar.init_remotes( opts_dict['git'], git_pillar.PER_REMOTE_OVERRIDES ) ret.append(pillar)
if CourseMode.is_white_label(course_id): course_mode = CourseMode.DEFAULT_SHOPPINGCART_MODE_SLUG else: course_mode = None
new_groups = [Group(10, 'New Group 10'), Group(20, 'New Group 20'), Group(30, 'New Group 30')] new_user_partition = UserPartition(
time.sleep(5)
htpasswd.__salt__ = {}
d = Entry.objects.latest('published').published last_build_date = rfc2822_date(timezone.make_aware(d, TZ))
meta = _ensure_decoded(self.meta)
project = u('scikit-learn') copyright = u('2010 - 2016, scikit-learn developers (BSD License)')
if len(self.blocks) > 1:
values = Series([u('a'), u('b'), NA, u('c'), NA, u('d')])
response = self.client.post(url) self.assertEquals(response.status_code, 403)
if expr_form == 'list' and len(tgt) == seen: break
get_request_dict = { CapaFactoryWithFiles.input_key(response_num=2): fileobjs, CapaFactoryWithFiles.input_key(response_num=3): 'None', }
self.store.delete_item(component.location, self.user_id) vertical = self.store.get_item(vertical.location) self.assertTrue(self._has_changes(vertical.location))
super(UniqueCourseTest, self).__init__(*args, **kwargs)
return _ENROLLMENTS
try:
dummy_v = T.tensor4() sqfilt = T.square(self._filters)
df1 = pd.DataFrame( np.arange(18, dtype='int64').reshape(6, 3), columns=["a", "b", "c"])
if adapter_type: log.error("Cannot change type of '{0}' to '{1}'. Not changing type".format(network_adapter.deviceInfo.label, adapter_type)) edited_network_adapter = network_adapter
with self._secondary_action_menu_open("#comment_{}".format(comment_id)): return self._is_element_visible("#comment_{} .action-edit".format(comment_id))
ind2 = self.index.copy() inplace_return = ind2.set_levels(new_levels, inplace=True) self.assertIsNone(inplace_return) assert_matching(ind2.levels, new_levels)
coef = np.zeros(n_features) coef[:n_relevant_features] = coef_min + rng.rand(n_relevant_features)
self.get_items_call_count += 1 item = self.blocks.get(block_key) if not item: raise ItemNotFoundError return item
Z = Z.reshape(xx.shape) plt.figure() plt.pcolormesh(xx, yy, Z, cmap=cmap_light)
hash_val = ",".join([ "{0}={1}".format(key, resp_params[key]) for key in signed_fields ]) resp_params['signature'] = processor_hash(hash_val)
set_input_value(self, self.COURSE_RUN_INPUT, value)
with self.settings(STATIC_ROOT='/tmp/test'): self.assertEqual(staticfiles_storage.location, abspathu('/tmp/test'))
ret['result'] = True ret['comment'] = 'vm {0} already stopped'.format(name)
request2 = self.request_factory.post('/create_account', data=postvars) request2.session = client.session request2.user = AnonymousUser()
best = cherrypy.lib.cptools.accept([i for (i, _) in ct_out_map])
check_node(child.location, after_create, after_edit, editing_user, after_create, after_edit, editing_user)
u_flipped, _, v_flipped = randomized_svd(mat, 3, flip_sign=True) u_based, v_based = max_loading_is_positive(u_flipped, v_flipped) assert_true(u_based) assert_false(v_based)
return self._block_relations[usage_key].children if usage_key in self else []
ForestClassifier = FOREST_CLASSIFIERS[name]
TESTABLE_BLOCK_TYPES = set(DIRECT_ONLY_CATEGORIES) TESTABLE_BLOCK_TYPES.discard('course')
return loads(_MssqlEncoder().encode({'resultset': cur.fetchall()}))['resultset']
selected_choices.remove(option_value)
response_element = etree.Element("coderesponse")
make_asset_xml(num_assets, ASSET_XML_PATH) validate_xml(ASSET_XSD_PATH, ASSET_XML_PATH)
log.debug('Downloading...') wua_downloader.Updates = wua_download_list
precompute = self.precompute if hasattr(precompute, '__array__'): Gram = precompute elif precompute == 'auto': Gram = 'auto' else: Gram = None return Gram
import sqlite3 sqlite3.register_adapter(time, lambda _: _.strftime("%H:%M:%S.%f")) super(SQLiteTable, self).__init__(*args, **kwargs)
FIELD_BLACKLIST = ['last_activity_at', 'team_size']
from __future__ import unicode_literals
response = self.client.get(activation_link) self.assertEqual(response.status_code, 200)
try: return self.get_all_decls()[id] except KeyError: self.get_all_decls()[id] = s = StateDeclaration(id) self.decls.append(s) return s
if n_active: linalg.solve_triangular(L[:n_active, :n_active], L[n_active, :n_active], trans=0, lower=1, overwrite_b=True, **solve_triangular_args)
log.trace('refresh_modules waiting for module refresh to complete') eventer.get_event(tag='/salt/minion/minion_mod_complete', wait=30)
cost = SumOfCosts([SumOfParams(), (0., DummyCost())]) model = DummyModel(shapes, lr_scalers=scales) dataset = ArangeDataset(1) momentum = 0.5
expected_list = [df_original.iloc[[0, 1, 5]], df_original.iloc[[2, 3]], df_original.iloc[[4]]] dt_list = ['2013-09-30', '2013-10-31', '2013-12-31']
return iter(self.forms)
id_token = get_id_token(student, api_config.OAUTH2_CLIENT_NAME) return EdxRestApiClient(api_config.internal_api_url, jwt=id_token)
template_name_suffix = '_form'
try: next_child = current.children.next()
self.assertEqual(response.status_code, 302)
line_start_indexes = [0] index = 0 while True: index = string.find('\n', index) if index < 0: break index += 1 line_start_indexes.append(index) return line_start_indexes
from __future__ import absolute_import import os
self.assertEqual(course.course_image, 'images_course_image.jpg')
signs = np.sign(X) signs = signs.view(dtype='|S{0}'.format(signs.strides[0])) unique_signs, cluster_index = np.unique(signs, return_inverse=True)
MODULESTORE = convert_module_store_setting_if_needed(MODULESTORE)
pieces["distance"] = int(mo.group(2))
if data.get('essential'): return super(IDTokenHandler, self).claim_instructor_courses(data) else: return None
log = logging.getLogger(__name__) request_log = logging.getLogger('requests')
from __future__ import absolute_import
quoteChar = quoteChar.strip() if len(quoteChar) == 0: warnings.warn("quoteChar cannot be the empty string",SyntaxWarning,stacklevel=2) raise SyntaxError()
return
import integration from salt.fileserver import roots from salt import fileclient
self._verify_editable(self._get_course_details_response(True))
def single_fdr(alpha, n_informative, random_state): X, y = make_regression(n_samples=150, n_features=20, n_informative=n_informative, shuffle=False, random_state=random_state, noise=10)
response = self.client.get('/check_session/') self.assertEqual(response.status_code, 200) self.assertEqual(response.content, b'YES')
@skipUnlessDBFeature("__class__") def test_func(): raise ValueError
return _get_next_prev(self, date, is_previous=False, period='day')
if instance.state == CourseCreator.DENIED or granted_state_change: send_user_notification.send( sender=sender, user=instance.user, state=instance.state )
credit_course = self.add_credit_course() credit_course.enabled = False credit_course.save()
self.stub_api() self.auth() self.listing_page.visit() self.assertTrue(self.listing_page.is_sidebar_present) self.assertTrue(self.listing_page.are_cards_present)
self._assert_about(AboutTemplateAttributeView.as_view()(self.rf.get('/about/')))
if not is_list_like_indexer(obj) and is_setter: return {'key': obj} raise
parent_element.remove(solution_element)
from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS
vectors = vectors / np.sqrt((vectors ** 2).sum(axis=1))[:, np.newaxis]
full_segment_event = request.json
THIRD_PARTY_AUTH_BACKENDS = ["google-oauth2", "facebook"] THIRD_PARTY_AUTH_PROVIDERS = ["Google", "Facebook"]
from __future__ import absolute_import import os
def dispatcher(self, obj): reduced = reduce_func(obj) self.save_reduce(obj=obj, *reduced) self.dispatch[type] = dispatcher
with tm.assert_produces_warning(FutureWarning): s.irow(1)
'master_finger': str,
self.assertRaises(KeyError, df.ix.__setitem__, ([0, 1, 2], [2, 3, 4]), 5)
if 'COMMAND' in chunks[1]:
if course.discussion_link: discussion_tab = CourseTab.load( 'external_discussion', name=_('External Discussion'), link=course.discussion_link ) else: discussion_tab = CourseTab.load('discussion')
xblock._edit_info = payload['edit_info']
all_corr = ['absolute_exponential', 'squared_exponential', 'cubic', 'linear']
from setuptools import setup setup( name="safe_lxml", version="1.0", packages=["safe_lxml"], install_requires=[ "lxml", "defusedxml" ], )
GitBase.__init__(self, opts, valid_providers=('gitpython', 'pygit2'))
for _name, _indexer in indexing.get_indexers_list(): NDFrame._create_indexer(_name, _indexer)
self.assertRaises(TypeError, lambda: td * td)
self.course_info['number'] = "3355358979513794782079645765720179311111"
s = Series(np.random.randn(6), index=[2, 2, 0, 0, 1, 1])
return self.q(css='.warning').results[0].text
pkg_params = __salt__['pkg_resource.parse_targets'](name, pkgs, **kwargs)[0]
self.assertEqual(is_active, new_is_active) self.assertEqual(course_mode, new_mode)
self.cart = Order.get_cart_for_user(self.user) CertificateItem.add_to_order( self.cart, self.course_key, self.COST, 'verified' ) self.cart.start_purchase()
pass
log.warning( u"More than 1 ranges in Range header: %s for content: %s", header_value, unicode(loc) )
autocommits_when_autocommit_is_off = False
actual = grouped_df.filter(lambda x: len(x) > 1) expected = df.iloc[expected_indexes] assert_frame_equal(actual, expected)
fields: - field_1 - field_2
if not course_org_filter: org_filter_out_set = microsite.get_all_orgs() if org_filter_out_set: exclude_dictionary['org'] = list(org_filter_out_set)
self.skipTest('This test fails when using tests/runtests.py. salt-runtests will be available soon.')
pass
store = HDFStore('bugzilla.h5', mode='w')
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from salt.states import mdadm
def context_manager_no_warning(): with ignore_warnings(): _warning_function()
initial = [ {'name': 'Gin Tonic'}, ] LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=3, max_num=2) formset = LimitedFavoriteDrinkFormSet(initial=initial) form_output = []
random_state = check_random_state(0) y_true = random_state.randint(0, 2, size=(20, )) y_pred = random_state.randint(0, 2, size=(20, ))
func_or_class.authentication_classes = ( OAuth2AuthenticationAllowInactiveUser, SessionAuthenticationAllowInactiveUser ) func_or_class.permission_classes = () if is_authenticated: func_or_class.permission_classes += (IsAuthenticated,) if is_user: func_or_class.permission_classes += (IsUserInUrl,) return func_or_class
self.custom_fields = kwargs.pop('custom_fields', [])
if out != 'grains': log.error('Invalid outputter {0} specified, fall back to nested'.format(out)) return outputters['nested']
response = self.client.get('/permission_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/permission_protected_view/')
import salt.utils
def __new__(cls, value, setting): self = tuple.__new__(cls, value) self.setting = setting return self
self.assertTrue(check_password('letmein', encoded, setter, 'argon2')) self.assertFalse(state['upgraded'])
return self.get_attrs(location).get(attr, default)
long_name = u"Финансовое программирование и политика, часть 1: макроэкономические счета и анализ"
return self._shallow_copy(values=values, **kwargs)
patched_from_string.assert_called_once_with(mock_problem_location) patched_manager.filter.assert_called_once_with( course_id=self.course_key, module_state_key=mock_problem_key )
for r in poly: self.assertEqual(r.geom_type, 'LinearRing') self.assertEqual(r.geom_typeid, 2)
handle_scm = win32service.OpenSCManager( None, None, win32service.SC_MANAGER_ALL_ACCESS)
self._post_fork_init()
self.assertRaises(IndexError, df.iloc.__getitem__, tuple([10, 5]))
s1 = Series([1, 2, 3], index=['a', 'b', 'c'], name='x')
from django.utils.translation import get_language
est = DummyRegressor(strategy="quantile", quantile=0.5) est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
mid = int(numpy.floor(kernel_shape / 2.)) centered_X = X - convout[:, mid:-mid, mid:-mid, :]
serializers._serializers = {}
df = DataFrame(dict(A=Series(lrange(3), index=date_range( '2000-1-1', periods=3, freq='H', tz='US/Eastern'))))
self.assertAlmostEqual( -0.28, calc.evaluator({}, {}, 'SiN(6)', case_sensitive=False), delta=1e-3 )
OAUTH_OIDC_ISSUER = ENV_TOKENS['OAUTH_OIDC_ISSUER']
if self.y is None: return self.X else: return (self.X, self.y)
output['texture_id'][i] = textid output['texture_pos'][i] = (px, py)
data_content = None
assert_equal(_dynamic_max_trials(100, 100, 2, 0.99), 1)
return value
else: if self.n_outputs_ == 1: return proba[:, 0]
cp = df.copy() cp['a'] = cp['b'].values assert_frame_equal(cp['a'], cp['b'])
rng = np.random.RandomState(42) old_centers = centers + rng.normal(size=centers.shape)
profiles_config_path = overrides['profiles_config']
return tenant_id
for key, op in OPERATORS.items(): op.id = key
if mod_name in self.file_mapping: yield mod_name
qs = RasterModel.objects.filter(rastprojected__dwithin=(rast, D(km=1))) self.assertEqual(qs.count(), 1)
DEBUG = True
return [Attribute('size', '20'), Attribute('label', ''), ]
from __future__ import unicode_literals
log = logging.getLogger(__name__)
address_predefined = 'DJANGO_LIVE_TEST_SERVER_ADDRESS' in os.environ old_address = os.environ.get('DJANGO_LIVE_TEST_SERVER_ADDRESS')
max_squared_sum = row_norms(X, squared=True).max()
from __future__ import absolute_import
return {key: self[key] for key in self}
qs = RasterModel.objects.filter(Q(**combos[0]) & Q(**combos[1])) self.assertTrue(qs.count() in [0, 1])
self.assertEqual(len(self.certificates_page.certificates), 1)
if bin_edges[-2] > ax_values.max(): bin_edges = bin_edges[:-1] binner = binner[:-1]
class SyslogNGTestCase(TestCase): def test_generate_source_config(self): self._config_generator_template(SOURCE_1_CONFIG, SOURCE_1_EXPECTED)
ret = {} for minion, data in six.iteritems(returns): ret[minion] = json.loads(data) return ret
application = object()
__virtualname__ = 'ip'
from __future__ import absolute_import
target._flush()
all_messages = [] for msg_group in self.NOTIFICATION_MESSAGES.values(): all_messages.extend(msg_group)
get_storage_container = show_storage_container
from __future__ import unicode_literals
try:
loader.build_graph() self.assertEqual(num_nodes(), 5)
time.sleep(0.1) if not self.isalive(): return True else: return False
X_scaled = MinMaxScaler().fit_transform(X) assert_true(np.isfinite(X_scaled).all())
with tm.assertRaisesRegexp(ValueError, msg): DataFrame(np.empty(0), columns=list('abc'))
return self._get_object_array()
self.client.ajax_post(course_update_url)
log = logging.getLogger(__name__)
MODULESTORE = TEST_DATA_MONGO_MODULESTORE __test__ = True
if terminal_converter is None: return node else: return terminal_converter(node)
service = MockServices() if self.flag == 1: service.id = 'asd' return [service] elif self.flag == 2: service.id = service_id return service return [service]
return "|".join(prefix + re.escape(c) + suffix for c in choices.split())
bio.write(struct.pack(byteorder + 'i', self.n))
from __future__ import unicode_literals
IN_PROGRESS = "in_progress" FAILED = "failed" SUCCEEDED = "succeeded"
apache2.service.running() \\ .require(apache2.pkg, pkg='libapache2-mod-wsgi') \\ .watch(file='/etc/apache2/httpd.conf')
subnets = conn.get_all_subnets(subnet_ids=subnets)
from __future__ import absolute_import import inspect import logging import time from functools import wraps from collections import defaultdict
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
assert_frame_equal(df.loc[[0, 2]], g_not_as.head(1)) assert_frame_equal(df.loc[[1, 2]], g_not_as.tail(1))
self.assertTrue(BulkEmailFlag.feature_enabled(self.course.id))
warnings.simplefilter("ignore", UserWarning) assert_equal(assert_warns(UserWarning, f), 3)
layer_trainers[-1].main_loop()
return CourseMode.objects.get_or_create( course_id=self.course.id, mode_display_name=mode_name, mode_slug=mode_slug, min_price=min_price, suggested_prices=suggested_prices, currency=currency, _expiration_datetime=expiration_datetime, )
self.video.speed = '1.0'
self.certificates_section.wait_for_certificate_exceptions_section()
cache.clear()
expected = Series(np.ones(n), index=index) s = Series(np.zeros(n), index=index) s[s == 0] = 1 assert_series_equal(s, expected)
if instance is None: raise AttributeError("operators not available as class attribute") instance.cursor().close() return instance.__dict__['operators']
K = self.kernel_(self.X_train_) K[np.diag_indices_from(K)] += self.alpha
return _ENROLLMENT_ATTRIBUTES
if hasattr(int, 'bit_length'): _int_bit_length = lambda i: i.bit_length() else: _int_bit_length = lambda i: len(bin(abs(i))) - 2
_cursor = complain ensure_connection = complain _commit = complain _rollback = ignore _close = ignore _savepoint = ignore _savepoint_commit = complain _savepoint_rollback = ignore _set_autocommit = complain
result = p.ix[:, -1, :] expected = p.ix[:, p.major_axis[-1], :] assert_frame_equal(result, expected)
break
to_hex = BinOutput('GEOSGeomToHEX_buf') to_wkb = BinOutput('GEOSGeomToWKB_buf') to_wkt = StringFromGeom('GEOSGeomToWKT')
self.assertNotIn(self.module_key + '3', self.loader) self.assertNotIn(self.module_key + '4', self.loader)
refresh_db() return ret
from __future__ import absolute_import import logging import json
y = column_or_1d(y, warn=True) _check_numpy_unicode_bug(y) self.classes_ = np.unique(y) return self
from __future__ import absolute_import import logging import os import os.path from copy import deepcopy import json
self.assertFalse(self.has_notes_tab(self.course, self.user))
_timed_exams = modulestore().get_items( course_key, qualifiers={ 'category': 'sequential', }, settings={ 'is_time_limited': True, } )
return salt.utils.which('gpg')
import salt.ext.six as six
if field.many_to_many: if field.remote_field.through._meta.db_table not in existing_table_names: return False, project_state else: found_add_field_migration = True continue
staff_role = CourseStaffRole(course_key) staff_role.remove_users(*staff_role.users_with_role()) instructor_role = CourseInstructorRole(course_key) instructor_role.remove_users(*instructor_role.users_with_role())
fig = plt.figure(figsize=(9, 8))
e = rwindow.EWM(Series([2, 4, 6]), alpha=0.5)
if not bool(Versioning) and bool(_describe.get('Versioning')): Versioning = {'Status': 'Suspended'}
tasks.update_xblocks_cache.apply_async([unicode(course_key)], countdown=0)
#html_use_opensearch = ''
self.annotation.delete() self.assertEqual(u"", self.reg.csv_report_comments)
self.assertEquals( self.middleware.process_response(self.request, self.response), self.response ) exit_context.assert_called_with(UserTagsEventContextMiddleware.CONTEXT_NAME) exit_context.reset_mock()
return ''
corr1 = self.ts.autocorr()
target_versionfile = os.path.join(base_dir, cfg.versionfile_source) print("UPDATING %s" % target_versionfile) write_to_version_file(target_versionfile, self._versioneer_generated_versions)
iterator = SequentialSubsetIterator(10, 3, 4) for i in range(4): iterator.next()
can_bulk = (not self.return_id and self.connection.features.has_bulk_insert)
#log.debug('diff_mtime_map: the maps are the same') return False
self.iterator(mode='shuffled_sequential', batch_size=batch_size, num_batches=None) return self.next()
tempfile = NamedTemporaryFile() self.assertTrue(hasattr(tempfile, "closed")) self.assertFalse(tempfile.closed) tempfile.close() self.assertTrue(tempfile.closed)
def dec(func): return self.filter_function(func, **flags) return dec
cost = None
labels = -np.ones(X.shape[0], dtype=np.intp)
from __future__ import absolute_import import logging
response_element = etree.Element("customresponse")
if not hasattr(self, 'num_channels'): self.num_channels = self.nchannels
if created: _send_new_pending_email(instance)
resource = url.split('salt://', 1)[-1]
result = pack(POSTGIS_HEADER_STRUCTURE, rasterheader)
value_regex = None
block_wrappers = []
self.assertFalse(_df[column].equals(df[column]))
from __future__ import absolute_import, print_function import math import time import copy from datetime import datetime, timedelta
idx = date_range('2001-09-20 15:59', '2001-09-20 16:00', freq='T', tz='Australia/Sydney') s = Series([1, 2], index=idx)
self.assert_numpy_array_equal(result, expected, check_dtype=False)
from salttesting.case import ModuleCase
self._close()
from salt.modules import nova
return u"{checkpoint} in {course}".format( checkpoint=self.checkpoint_name, course=self.course_id )
model = CourseRegistrationCodeInvoiceItem extra = 0 can_delete = False readonly_fields = ( 'qty', 'unit_price', 'currency', 'course_id', ) def has_add_permission(self, request): return False
ridge_gcv.fit(filter_(X_diabetes), y_diabetes, sample_weight=np.ones(n_samples)) assert_equal(ridge_gcv.alpha_, alpha_)
try: delattr(_MovedItems, name) except AttributeError: try: del moves.__dict__[name] except KeyError: raise AttributeError("no such move, %r" % (name,))
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains )
import integration import salt.utils from salt.modules import file as filemod
affinity[0, n_sample + 1] = 1 affinity[n_sample + 1, 0] = 1 affinity.flat[::2 * n_sample + 1] = 0 affinity = 0.5 * (affinity + affinity.T)
from email.utils import formataddr if localpart and domain: addr = '@'.join([localpart, domain]) return formataddr((nm, addr))
multi_db = True
nn.set_params(algorithm='kd_tree')
self.io_loop.spawn_callback(salt.engines.start_engines, self.opts, self.process_manager, proxy=self.proxy)
df = self.tsframe.copy() df['date'] = Timestamp('20130101')
from salt.serializers import json, yamlex, yaml, msgpack, python, configparser from salt.serializers import SerializationError from salt.utils.odict import OrderedDict
for col_name, df_col in data_frame.iteritems(): if com.is_datetime64tz_dtype(df_col): data_frame[col_name] = _handle_date_column(df_col)
else:
self.assertEqual(Article.objects.order_by('id').latest(), a4)
course_cohort = user_group.cohort return course_cohort.assignment_type
__virtualname__ = 'mongo'
STATIC_URL = STATIC_URL_BASE.encode('ascii') if not STATIC_URL.endswith("/"): STATIC_URL += "/" STATIC_URL += EDX_PLATFORM_REVISION + "/"
return tuple([len(self._codes)])
import salt.loader
self.store.publish(vertical.location, self.user_id) self.assertFalse(self._has_changes(vertical.location))
values = np.array([1, 2, 3]) self.assertTrue(np.allclose(nanops._ensure_numeric(values), values), 'Failed for numeric ndarray')
result = np.empty_like(np.asarray(xvalues), dtype=np.float64) result.fill(np.nan) return result
from tempfile import mkdtemp import shutil from functools import partial
REQUIRE_DEBUG = DEBUG
return modify_settings(**kwargs)
self.distribution.salt_syspaths_hardcoded_path = os.path.join( self.build_lib, 'salt', '_syspaths.py' ) self.run_command('generate_salt_syspaths')
obj_list = model_instances
from __future__ import absolute_import import logging
from __future__ import absolute_import
from ..preprocessing import LabelEncoder
try:
self.should_fetch_course = False
return False
for i in permissions.split(','): perm = i.strip()
exc_info_on_loglevel=logging.DEBUG
self.sp_index = getattr(obj, 'sp_index', None) self.fill_value = getattr(obj, 'fill_value', None)
return True
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
import salt.utils import salt.utils.decorators as decorators import salt.utils.network import salt.utils.validate.net from salt.exceptions import CommandExecutionError
queryset._add_hints(instance=self.instance) if self._db: queryset = queryset.using(self._db) return queryset._next_is_sticky().filter(**self.core_filters)
return convert_indexer(start, stop + 1, step)
#html_use_index = True
gen_hyper_keys(minion_id)
model = Bookmark fields = ( 'id', 'course_id', 'usage_id', 'block_type', 'display_name', 'path', 'created', )
module.done = True
if isinstance(cfg, dict): return c_cfg.get(attr_name, cfg.get(default_cfg_key)) else: return c_cfg.get(attr_name, cfg(default_cfg_key))
s = Series([True]) self.assertTrue(s.bool())
if HAS_GEOMETRY_COLUMNS: self.assertGeometryColumnsCount(0)
values = [arg_val] values.extend(arg_vals) arguments[param.name] = tuple(values) break
salt '*' win_wua.list_updates
Promise(_check_func, "The 'Next Step' button is enabled.").fulfill()
import logging
return self.load_template(template_name, template_dirs)
#show_authors = False
ddns.__grains__ = {} ddns.__salt__ = {}
f = lambda x: x[:2]
import warnings warnings.warn("The pandas.io.ga module is deprecated and will be " "removed in a future version.", FutureWarning, stacklevel=2)
response = self._get_reverify_page() self.assertContains(response, "reverify-container")
basedirs = set(map(os.path.abspath, filter(os.path.isdir, basedirs)))
return self.sm_ols.resid
continue
course = self._create_course("verified", sku='nonempty-sku') self._enroll(course.id)
resp_asset = post_asset_update(True, course) self.assertTrue(resp_asset['locked']) verify_asset_locked_state(True)
shared_dataset = np.random.rand(20, 19).astype(theano.config.floatX)
return logistic_sigmoid(X, out=X)
ssh_gateway_username: root
if step: rstep = step(self._step, other)
from __future__ import absolute_import
raise NotImplementedError('subclasses of BaseDatabaseOperations may require a quote_name() method')
exc_info_on_loglevel=logging.DEBUG
return np.array(self)
management.call_command('loaddata', 'fixture4.json', verbosity=0) self.assertQuerysetEqual(Article.objects.all(), [ '<Article: Django pets kitten>', ])
self.models = all_models
if (not hasattr(estimator, "decision_function") and not hasattr(estimator, "predict_proba")): raise ValueError("The base estimator should implement " "decision_function or predict_proba!")
face_image, photo_id_image, response = self._decode_image_data( params["face_image"], params.get("photo_id_image") )
if lib.isscalar(value): value = [value] sparr = SparseArray(value, fill_value=self.fill_value) self._chunks.append(sparr) self._consolidated = False
self.assertTrue(self.store.has_changes(component))
after = expiration + timedelta(seconds=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(after, query) self.assertIs(result, None)
def __or__(self, other): "Returns the union of the two geometries." return self.union(other)
for enrollment in manual_enrollments: self.assertEqual(enrollment.enrollment.mode, CourseMode.AUDIT)
saltify.__opts__ = {} saltify.__opts__['providers'] = {}
self.assertEqual(self._get_sqlite_column_type( 'dtype_test', 'B'), 'INTEGER')
htown = City.objects.get(name='Houston') Zipcode.objects.distance(htown.point)
assert_array_equal(mb_k_means.predict(X_csr), mb_k_means.labels_)
self.assertFalse(linode._validate_name('ab'))
self.different_client.login(username=self.different_user.username, password=self.test_password) self.send_get(self.different_client, expected_status=404)
exception_classes = [StudentInputError, LoncapaProblemError, ResponseError] for exception_class in exception_classes:
get_request_dict = {CapaFactory.input_key(): '3.14'} result = module.save_problem(get_request_dict)
log = logging.getLogger(__name__)
skip_if_no_sklearn() trainer = yaml_parse.load(test_yaml_ovr) trainer.main_loop()
return self.child(title)
class OptionalPersonForm(Form): first_name = CharField() last_name = CharField() birth_date = DateField(required=False)
BINS = frozenset(('svc', 'supervise', 'svok')) return all(salt.utils.which(b) for b in BINS)
orig_score = self.lcp.get_score() event_info['orig_score'] = orig_score['score'] event_info['orig_total'] = orig_score['total']
from student.views import login_user return shim_student_view(login_user, check_logged_in=True)(request)
break
prefix = unichr(unicode_char)
self._assertOLXBase(block_list, draft=True, published=True)
from __future__ import absolute_import
ret['comment'] = out ret['result'] = False return ret
return tuple([alias if alias else source for alias, source in safe_zip(self._aliases, self._sources)])
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
return _get_block_structure_manager(course_key).get_collected()
cm = metrics.confusion_matrix(y_test, y_predicted) print(cm)
self.join(other2, main)
silent_variable_failure = True
return self.week_format
self.assertEqual(False, data["accomplishments_shared"])
test_db_allows_multiple_connections = True
y_1 = regr_1.predict(X) y_2 = regr_2.predict(X)
git_describe = describe_out
CourseEnrollmentFactory(user=self.moderator, course_id=self.course.id) self.moderator.roles.add(Role.objects.get(name="Moderator", course_id=self.course.id))
byte = response.read(4096) fic.write(byte)
new_cmap = self.get_score(student_answers) self.get_hints(convert_files_to_filenames( student_answers), new_cmap, old_cmap) return new_cmap
for b in old_blocks: found = False for nb in new_blocks: if (b.values == nb.values).all(): found = True break self.assertTrue(found)
df = DataFrame('hello', lrange(1000), lrange(5))
if conf.get('normalize_on_the_fly', False): return data
ENABLED = True
log = logging.getLogger(__name__)
return self.q(css=".inline-error").visible
def test_unicode_values(self): country = Country.objects.create(country='NZ') self.assertEquals(unicode(country), "New Zealand (NZ)")
return False
from pandas.compat import range, lrange, StringIO, OrderedDict import os
result = first.difference(second)
self.check_layer()
descriptor_filter = partial(descriptor_affects_grading, course.block_types_affecting_grading) return FieldDataCache.cache_for_descriptor_descendents( course.id, user, course, depth=None, descriptor_filter=descriptor_filter )
from django.contrib.gis.gdal import GDALRaster setattr(cls, self.attname, SpatialProxy(GDALRaster, self))
response = self.session.post( url, data=self._encode_post_dict(self._advanced_settings), headers=self.headers, )
if bulk_ops_record.active: return
to = force_text(to)
def get_asides(self, block): return []
super(TrackSelectionPage, self).__init__(browser) self._course_id = course_id
if not self.as_index: key_index = None
ret = {'name': '', 'changes': {}, 'result': False, 'comment': ''}
kwds['allow_leading_cols'] = self.index_col is not False
self.payment_and_verification_flow.proceed_to_payment()
try_quick = False
overrides = salt.utils.clean_kwargs(**copy.deepcopy(kwargs)) profile_match = salt.utils.dictupdate.update( copy.deepcopy(profile_match), overrides ) return profile_match
section_context.update({ 'proctoring': timed_exam_attempt_context, })
g1 = Guild.objects.create(name='First guild') note = Note(note='Note for guild', content_object=g1) note.save()
try: from genshi.template import MarkupTemplate from genshi.template import NewTextTemplate from genshi.template import OldTextTemplate HAS_LIBS = True except ImportError: HAS_LIBS = False
return [Attribute('options', transform=cls.parse_options), Attribute('label', ''), Attribute('inline', False)]
make_user_coach(coach, master_course_key)
other = Int64Index(np.arange(25, 14, -1))
check_is_fitted(self, 'cluster_centers_') X = self._check_test_data(X) x_squared_norms = row_norms(X, squared=True) return -_labels_inertia(X, x_squared_norms, self.cluster_centers_)[1]
for saltenv in environments: env_files = [k for k in files if k['Key'].startswith(saltenv)]
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=status, )
self.assertTrue(isinstance(cdf, CustomDataFrame))
seq_css = 'ol#sequence-list>li>.nav-item>.sequence-tooltip' return self.q(css=seq_css).map(self._clean_seq_titles).results
super(StudioCourseTest, self).setUp() self.test_xss = test_xss self.install_course_fixture(is_staff)
filesystem = OSFS(root_dir / 'test_export/policies/2012_Fall') self.assertTrue(filesystem.exists('grading_policy.json'))
self.payment_and_verification_flow.webcam_capture() self.payment_and_verification_flow.next_verification_step(self.immediate_verification_page)
import salt.utils from salt.ext.six.moves import range
if not slsmod: errors.append( 'Environment {0} contains an empty sls ' 'index'.format(saltenv) )
import salt.output from salt.ext.six import string_types from salt.utils import get_colors import salt.utils.locales
self.assertContains(response, "\n1 pluggable search person\n") self.assertContains(response, "Amy")
self.session._session_key = '' self.assertIsNone(self.session.session_key)
if exc.errno != errno.EEXIST: raise
self.fit_transform(raw_documents) return self
super(SharedModuleStoreTestCase, cls).setUpClass() cls.start_modulestore_isolation()
panel = _panel shifted = panel.tshift(1) unshifted = shifted.tshift(-1)
from salt.states import rabbitmq_policy
new_module = modulestore().get_item(chapter_locator)
self.assertGreater(len(items[0].question), 0)
filter_func = filter_func or (lambda __: True)
def f(x): x = x.ravel()
if (reduce and axis == 1 and self._is_mixed_type and self._is_datelike_mixed_type): reduce = False
write_body = [False]
from __future__ import absolute_import
cache.clear()
from salt.states import boto_iam_role
address_predefined = 'DJANGO_LIVE_TEST_SERVER_ADDRESS' in os.environ old_address = os.environ.get('DJANGO_LIVE_TEST_SERVER_ADDRESS')
affiliate_id = request.COOKIES.get(settings.AFFILIATE_COOKIE_NAME) if user is not None and affiliate_id is not None: UserAttribute.set_user_attribute(user, settings.AFFILIATE_COOKIE_NAME, affiliate_id)
keyarr = _asarray_tuplesafe(key)
clf = IsolationForest(max_samples=100, random_state=rng).fit(X_train)
course2 = CourseFactory.create() CourseModeFactory.create( course_id=course2.id, mode_slug="verified", expiration_datetime=self.PAST ) CourseEnrollmentFactory( course_id=course2.id, user=self.user, mode="verified" )
self.course.end = None self.assertEqual( course_complete.badge_description(self.course, 'honor'), 'Completed the course "Badged" (honor)' )
try: uidb64 = force_text(urlsafe_base64_encode(force_bytes(base36_to_int(uidb36)))) except ValueError:
return self.best_params
self.initdb(default_ms) self._create_block_hierarchy() with self.assertRaises(InvalidVersionError): self.store.revert_to_published(self.vertical_x1a, self.user_id)
payload = self.default_payload(user=user, ttl=ttl) payload.update(overrides) return self.generate_token(payload)
filter: {'kw': 'args'}
GATING_NAMESPACE_QUALIFIER = '.gating'
with self.assertRaises(ImproperlyConfigured): Sitemap().get_urls()
from __future__ import unicode_literals
response = PostOnlyView.as_view()(self.rf.head('/')) self.assertEqual(response.status_code, 405)
ret = ava.union(ena)
return settings.FEATURES.get('USE_MICROSITES', False)
cwd = os.getcwd()
os.system('cd build; rm -f html/pandas.zip; zip html/pandas.zip -r -q html/* ') print("\n")
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
return self.find_css('.signatory-panel-body .signatory-title-value').first.text[0]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
file = getattr(instance, self.attname)
if settings.LMS_SEGMENT_KEY: analytics.write_key = settings.LMS_SEGMENT_KEY
new_io = six.StringIO() with self.assertRaises(CommandError): call_command( "createsuperuser", interactive=False, username="joe@somewhere.org", stdout=new_io, stderr=new_io, )
tm._skip_if_no_scipy()
return ret
from __future__ import unicode_literals
if (len(args) == 1 and hasattr(args[0], '__iter__') and not com.is_string_like(args[0])): axes = args[0] else: axes = args
try: if isinstance(date, six.string_types): try: if HAS_TIMELIB: return timelib.strtodatetime(to_bytes(date)) except ValueError: pass
from salt.serializers import DeserializationError, SerializationError from salt.utils.aggregation import aggregate, Map, Sequence from salt.utils.odict import OrderedDict
with tm.assert_produces_warning(FutureWarning): df.irow(1)
pieces["closest-tag"] = None count_out = run_command(GITS, ["rev-list", "HEAD", "--count"], cwd=root)
foo = Foo()
newrelic.agent.add_custom_parameter('course_id', unicode(course_key)) newrelic.agent.add_custom_parameter('org', unicode(course_key.org))
mapped = dict(zip(unique, colors)) return [mapped[v] for v in series.values]
table_pieces = [] margin_keys = []
continue
if not objs: return model = objs[0].__class__ self.field_updates.setdefault( model, {}).setdefault( (field, value), set()).update(objs)
if not ccx: raise Http404 schedule = get_ccx_schedule(course, ccx) json_schedule = json.dumps(schedule, indent=4) return HttpResponse(json_schedule, content_type='application/json')
textid = 14 while textid == 14: textid = rng.randint(1, 113)
kwargs['course_id'] = self.course.id.to_deprecated_string() url = reverse(url_name, kwargs=kwargs) return url
return np.array([np.sqrt(np.diag(value)) for value in self._forecast_cov_raw(h)])
try: static_content_store.save(content) except Exception as err: log.exception(u'Error importing {0}, error={1}'.format( fullname_with_subpath, err ))
course = self.set_up_course(due_date_display_format=u"") text = self.get_text(course) self.assertNotIn("due ", text)
import salt.utils
import time import logging
VERIFY_STUDENT["SOFTWARE_SECURE"] = { "API_ACCESS_KEY": "BBBBBBBBBBBBBBBBBBBB", "API_SECRET_KEY": "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", }
actual_branch_setting = self.get_branch_setting() if actual_branch_setting != expected_branch_setting: raise InvalidBranchSetting( expected_setting=expected_branch_setting, actual_setting=actual_branch_setting )
if left.shape != right.shape: return False
return None
Y /= np.sum(Y, axis=1)[:, np.newaxis]
self.instance.save() self._save_m2m()
import salt.ext.six as six from salt.ext.six.moves import range try:
LOGGER.info(u"Retrieved {num_rows} records.".format(num_rows=row_count))
return getattr(obj, self.attname)
def _get_srid(self): srs = self.srs if srs: return srs.srid return None
nested_args = mapping.nest(theano_args) fixed_var_descr = self.cost.get_fixed_var_descr(model, nested_args) self.on_load_batch = fixed_var_descr.on_load_batch
@property def name(self): "Returns the name of this Field." name = capi.get_field_name(self.ptr) return force_text(name, encoding=self._feat.encoding, strings_only=True)
_check_all_orients(self.series) self.assertEqual(self.series.to_json(), self.series.to_json(orient="index"))
self.assertRaises(Exception, self.panel4d.reindex, major_axis=new_major, major=new_major)
self._validate(is_numeric, batch)
return self.prefix
('default', base_mgr), ('food_mgr2', mgr2), (b'food_mgr1', mgr1),
fpr, tpr, thresholds = roc_curve(y_true, y_score, drop_intermediate=False) assert_equal(thresholds.size, np.unique(np.round(thresholds, 2)).size)
if args is None: args = [] else: args = _normalize_args(args)
if keyname(vm_) is None: raise SaltCloudSystemExit( 'The required \'keyname\' configuration setting is missing from the ' '\'ec2\' driver.' )
response = MagicMock() response.status_code = status response.content = xml.format(major_code=major_code).encode('ascii', 'ignore') return response
network.__grains__ = {} network.__salt__ = {}
staff_user = User.objects.create_user('test_staff_user', 'test_staff_user@openedx.org', 'test') CourseStaffRole(self.master_course_key).add_users(staff_user)
expected_callback_dict = { 'xqueue_header': expected_header, 'xqueue_body': expected_body, }
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
selected_choices = [key for key in a_dict if key.endswith("bc")] for key in selected_choices: binary_choices[key] = a_dict[key]
try: result = getattr(qs[0], date_field) except IndexError: return None
from salt.utils import http
self._auto_auth(self.cohort_default_student_username, self.cohort_default_student_email, False) self.courseware_search_page.visit()
'pillar_version': int,
xmodule.save() return xmodule
return tslib.ints_to_pydatetime(self.asi8, tz=self.tz)
from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON, )
result = self.service.delete_student_attempt( self.student.username, unicode(self.course.id), 'foo/bar/baz', requesting_user=self.student, ) self.assertIsNone(result)
self.layers = [Layer(data, **default_aes(x=x, y=y))]
return uuid.uuid4().hex
if is_proxy and base_meta and base_meta.swapped: raise TypeError("%s cannot proxy the swapped model '%s'." % (name, base_meta.swapped))
K = self._centerer.fit_transform(K)
self.assertTrue(tpl.render(ctx).startswith("2011"))
@patch.object(OrderItem, 'purchased_callback') @patch.object(OrderItem, 'pdf_receipt_display_name')
for store in self.modulestores: if store.get_modulestore_type() == modulestore_type: return store return None
X, y = datasets.make_classification(n_samples=1000, n_features=100, n_informative=20, random_state=1234)
self.course_outline.open_subsection_settings_dialog()
o = self._construct(n, **kwargs) result = o._get_numeric_data() self._compare(result, o)
import copy import logging import json import os
for username in ["", "a"]: params["username"] = username assert_username_error("Username must be minimum of two characters long")
#html_copy_source = True
if isinstance(key, list): key = tuple(key)
self.foundCategories = []
student_id = AutoAuthPage(self.browser).visit().get_user_id()
return bool(user and has_access(user, 'staff', course, course.id))
return self.page_num - 1
self.assertEqual(1, 1)
pred_entropies = stats.distributions.entropy(lp_model.label_distributions_.T)
fstats_post = os.stat(path_test)
return self.q(css=self._bounded_selector('{} p.{}'.format(self.VALIDATION_SELECTOR, css_class)))
_tzname_re = re.compile(r'^[\w/:+-]+$')
from __future__ import absolute_import
class CustomTzName(timezone.UTC): name = ''
res = to_numeric(s, errors='coerce') expected = pd.Series([1., 0., np.nan]) tm.assert_series_equal(res, expected)
return False
self.course.display_coursenumber = None updated_course = self.update_course(self.course, self.user.id)
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
cp.readfp(StringIO.StringIO(stream_or_string))
definition_xml.attrib.update(xml_object.attrib)
from salt.utils.aggregation import aggregate, Map, Scalar
self.go_to_tab_and_assert_problem(1, self.problem1_name) problem1_content_after_coming_back = self.problem_page.problem_content self.assertEqual(problem1_content_before_switch, problem1_content_after_coming_back)
def _description(self): return _('Field of type: %(field_type)s') % { 'field_type': self.__class__.__name__ } description = property(_description)
self._compare(o.head(-3), o.head(7)) self._compare(o.tail(-3), o.tail(7))
pull_result = __salt__['dockerng.pull']( image, client_timeout=client_timeout, )
assert_array_almost_equal(clf.coef_, clf_balanced.coef_, 6)
self.assertQuerysetEqual( School.objects.all(), ["<School: School object>"] )
for key in kwargs.keys(): if not key.startswith('_'): params.setdefault(key, kwargs[key])
return [item[0] for item in cursor.fetchall()]
getattr(rs, attr)
autoescape = autoescape and not isinstance(value, SafeData) return mark_safe(linebreaks(value, autoescape))
query = '//table//*[re:test(text(), %r)]/ancestor::table' xpath_expr = u(query) % pattern
elif trigger_types[trigger_type] == TASK_TRIGGER_REGISTRATION: trigger.Id = 'OnTaskCreation_ID1'
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
d1, d2 = self.series.index[[5, 15]] result.ix[d1:d2] = 6
else:
epilog += " http://edx.readthedocs.org/projects/edx-developer-guide/en/latest/conventions/safe_templates.html#safe-template-linter\n"
yield { "text": text, "class_attrib": format_html(' class="column-{}"', field_name), "sortable": False, } continue
vals = Book.objects.annotate(num_authors=Count('authors')).aggregate(Max('num_authors')) self.assertEqual( vals, {'num_authors__max': 3} )
return self.q(css="#clear-all-filters")
self._validate_index_level(level) return self
cs = self.ax.scatter(support_vectors[:, 0], support_vectors[:, 1], s=80, edgecolors="k", facecolors="none") self.contours.append(cs)
config.toggle() self.assertFalse(config.details_error_icon_is_present) self.assertFalse(config.details_message_is_present)
import salt.utils import salt.ext.six as six
parts = dn.split(r'.') leftmost = parts[0] remainder = parts[1:]
op = optparse.OptionParser() op.add_option("--n-times", dest="n_times", default=5, type=int, help="Benchmark results are average over n_times experiments")
df = DataFrame() tm.assert_frame_equal(df, df.round())
for state in __salt__['state.show_lowstate'](): if 'state' not in state: continue
__virtualname__ = 'pkg'
clf.fit(X, y) assert_raises(ValueError, clf.partial_fit, np.hstack((X, X)), y)
return None
try: group_id = get_group_id_for_comments_service(request, course_key, commentable_id) except ValueError: return HttpResponseBadRequest("Invalid cohort id") if group_id is not None: thread.group_id = group_id
node = object() self.assertEqual(self.call_fut(node), None)
self.errors_occurred = False
self._check_linkedin_visibility(False)
if '_dataset' in d: d['_datasets'] = [d['_dataset']] del d['_dataset']
import integration
os.environ.get('TMPDIR', tempfile.gettempdir()) if salt.utils.is_darwin() else '/tmp'
return dict(zip( header_row, [ unicode(user.id), user.email, user.username, ] + grade ))
NOT_STUDIO_EDITABLE = ( PollDescriptor, )
self.setup_extensions()
TEST_PROFILE_IMAGE_BACKEND = deepcopy(settings.PROFILE_IMAGE_BACKEND) TEST_PROFILE_IMAGE_BACKEND['options']['base_url'] = '/profile-images/'
self.assertEqual(len([r for r in httpretty.httpretty.latest_requests if r.method == 'POST']), 0)
from __future__ import absolute_import import re
return self.q(css='.advance-modules-remove-text').visible
K_train = np.dot(X_[:180], X_[:180].T) y_train = y_[:180]
result = self._upsample(None) return result.interpolate(method=method, axis=axis, limit=limit, inplace=inplace, limit_direction=limit_direction, downcast=downcast, **kwargs)
pipeline = Pipeline([('imputer', Imputer(missing_values=0)), ('tree', tree.DecisionTreeRegressor(random_state=0))])
context = { "profiles": [self.TEST_PROFILE], "allow_cache_miss": "True" if allow_cache_miss else "False" } return self.video.student_view_data(context)
options = self.create_description(complib=complib, complevel=complevel, fletcher32=fletcher32, expectedrows=expectedrows)
with option_context('mode.chained_assignment', None): return self._python_apply_general(f)
def test_version(self): pass
'lang_pref.middleware.LanguagePreferenceMiddleware',
require_course_email_auth = models.BooleanField(default=True)
return self.runtime
assert_array_equal(votes, np.round(decisions))
if superblock: result['superblock'] = super_(dev)
self.assert_enrollment_activation(False, selected_mode)
import salt.utils from salt.exceptions import SaltInvocationError
neighborhoods = neighbors_model.radius_neighbors(X, eps, return_distance=False)
msg = u"Error in xml '{x}': {err} ".format( x=etree.tostring(xml), err=err.message) raise Exception, msg, sys.exc_info()[2]
from pandas.core.series import Series result = Series(result.ravel()).replace(-1, na_sentinel).values.\ reshape(result.shape)
if self.is_datelike: values = self.to_native_types()
url = certs_api.get_certificate_url(self.student.id, self.course.id) self.assertEqual(url, "")
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
if (len(set(isinstance(label, string_types) for label in ys_labels)) > 1): raise ValueError("Mix of label input types (string and number)")
success = _retry_and_check(5, lambda: _reset_and_get_seed(module) != seed)
field = models.ForeignKey("auth.Permission", models.CASCADE) name, path, args, kwargs = field.deconstruct()
other = other.replace(tzinfo=None)
ports = list(map(int, str(ports).split(',')))
if self._validate_unique: self.validate_unique()
return str('%s(%s)' % ( 'ST_GeogFromWKB' if self.geography else 'ST_GeomFromEWKB', self._adapter.getquoted().decode()) )
y = np.array([3, 3, -1, -1, 3])
if existing_id: dest_id = existing_id
attributes = {}
self = self_wr() if self._alive: self._alive = False if callback is not None: callback(self)
for lang, transcript_url in bumper_settings.get('transcripts', {}).items(): bumper_settings['transcripts'][lang] = transcript_url.replace("/static/", "")
if AUTH_TOKEN_HEADER in self.request.headers: return self.request.headers[AUTH_TOKEN_HEADER] else: return self.get_cookie(AUTH_COOKIE_NAME)
next_date = offset.apply(cur) if next_date <= cur: raise ValueError('Offset %s did not increment date' % offset) cur = next_date
cache.clear() CertificateGenerationConfiguration.objects.create(enabled=True)
hash_exists_locally = True
if self.query.raw: return getattr(obj, field.attname) return field.pre_save(obj, add=True)
if isinstance(n, slice): return self.__class__(super(FrozenList, self).__getitem__(n)) return super(FrozenList, self).__getitem__(n)
pass
self.execute(self.sql_delete_table % { "table": self.quote_name(model._meta.db_table), })
delattr(obj.__class__, self.name)
self.assertIsNone(get_cache_key(request)) learn_cache_key(request, response)
stringified_sources_list = map(lambda loc: loc.to_deprecated_string(), self.sources_list) self.xml_attributes['sources'] = ';'.join(stringified_sources_list) return xml_object
with self.assertRaises(LTIError): req = self.get_signed_grade_mock_request() self.xmodule.verify_oauth_body_sign(req)
import tornado.gen from Crypto.Cipher import PKCS1_OAEP from Crypto.PublicKey import RSA
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
try: validator(value) except expected: pass else: self.fail("%s not raised when validating '%s'" % ( expected.__name__, value))
X -= X.min() with warnings.catch_warnings(record=True): estimator = Estimator()
AutoAuthPage(self.browser, course_id=self.course_id).visit()
from salt.states import boto_lc
def post(self, request, *args, **kwargs): return self.delete(request, *args, **kwargs)
'openedx.core.djangoapps.safe_sessions.middleware.SafeSessionMiddleware',
VerificationStatus.add_status_from_checkpoints( checkpoints=[self.first_checkpoint], user=user, status=status )
self.assertEqual(1, len(editable_fields), editable_fields) self.assert_field_values( editable_fields, 'display_name', XModuleMixin.display_name, explicitly_set=False, value=None, default_value=None )
user = UserFactory() allow_access(self.course, user, 'beta') self.assertTrue(CourseBetaTesterRole(self.course.id).has_user(user))
salt.log.setup.setup_multiprocessing_logging()
help_texts = [] if password_validators is None: password_validators = get_default_password_validators() for validator in password_validators: help_texts.append(validator.get_help_text()) return help_texts
courseware_page = CoursewarePage(self.browser, self.course_id) self._make_har_file(courseware_page)
if os.path.isfile(join(dirname(abspath(__file__)), 'private.py')):
rng = np.random.RandomState(2)
output = self.engine.render_to_string('template', {'foo': False}) self.assertEqual(output, 'yes')
geom_type = None
srs_type = 'epsg'
return HttpResponseRedirect(self.get_success_url())
tag = self.runtime.service(self.mock_block, 'user_tags').get_tag(self.scope, self.key) self.assertIsNone(tag)
from __future__ import absolute_import import copy import logging import re import os import time import datetime
if freq != 'infer': freq = to_offset(freq) else: freq_infer = True freq = None
try: self.proc_run(msg) except Exception as exc: log.error( 'Exception caught by jobber: {0}'.format(exc), exc_info=True)
self.assertRaises(ValueError, index.truncate, 3, 1)
batch_size = old_batch_size
self.assertEqual(course_date, expected_course_date)
assert_array_almost_equal(X_transformed[:, :-1], svd.fit_transform(X)) assert_array_equal(X_transformed[:, -1], select.fit_transform(X, y).ravel())
with self.assertRaises(ValueError): with store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course.id):
kwargs.pop(self._typ._info_axis_name, None)
from salt.states import boto_elasticache
log = logging.getLogger(__name__)
can_introspect_positive_integer_field = False
_moved_attributes = []
import salt.utils.jid import salt.returners
label = self._maybe_cast_slice_bound(label, side, kind)
#pylint: disable=E0602
return _is_staff_for_article(article, user)
AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {}}]), AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {3}}]),
def na_op(x, y): try: result = expressions.evaluate(op, str_rep, x, y, raise_on_error=True, **eval_kwargs) except TypeError:
if url.startswith('/') and not url.startswith(settings.STATIC_URL): return matched
self.assertEqual(event.dt.replace(tzinfo=EAT), dt)
for i in range(0, lenbin - 1): r_bin = binner[i + 1]
ipv4_re = r'(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}'
BULK_EMAIL_LOG_SENT_EMAILS = False
NULLBOOL_CHOICES = (('1', 'Yes'), ('0', 'No'), ('', 'Unknown'))
return {}
homework_1_score = 1.0 / 2 homework_2_score = 1.0 / 1 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
self.login_page.login(email=email, password=password)
MIN_IDEAL_BATCH_DURATION = .2
elif user_groups[partition_id].id in allowed_group_ids: continue
offset1 = Week() offset2 = Week() self.assertFalse(offset1 != offset2)
mask = ((y == 0) & ~np.isnan(result)).ravel()
refetched = self.store.get_item(discussion_item.location)
print "checking effects..." after = EmailEnrollmentState(self.course_key, eobjs.email) self.assertEqual(after, after_ideal)
import logging import re
ls = LineString(((150.902, -34.4245), (150.87, -34.5789)), srid=4326)
y_pred[:, k] += learning_rate * tree.predict(X).ravel()
if self.whitelist == '': return [] return self.IPFilterList([addr.strip() for addr in self.whitelist.split(',')])
name = models.CharField(max_length=50) objects = PersonManager() def __str__(self): return self.name
node_names = (node.__name__ for node in all_nodes if issubclass(node, superclass)) return frozenset(node_names)
str(excluded_books.query)
from salt.modules import apache
topo = self.train.get_batch_topo(1) assert topo.ndim == 4
if user != current_user: msg += ' Try running as user {0}.'.format(user) else: msg += ' Please give {0} read permissions.'.format(user)
self.used = True return None
group1_id = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition)
(('custom',), {}, '<label for="id_field">custom:</label>'),
return [Attribute('file'), Attribute('missing', None)]
self.ctx.clear() self._todo = []
from django.core.mail.backends.base import BaseEmailBackend class EmailBackend(BaseEmailBackend): def send_messages(self, email_messages): return len(list(email_messages))
with self.settings(AUTHENTICATION_BACKENDS=[ 'django.contrib.auth.backends.ModelBackend']): user = get_user(request)
if delete_vertical: self.store.delete_item(vertical1.location, self.user.id) else: self.store.delete_item(problem1.location, self.user.id)
return self.q(css="div.problem section.inputtype div.partially-correct span.status").is_present()
if len(names) == 1: return ret[names[0]] return ret
numpy = self.numpy if numpy: self._parse_numpy()
c = Child.objects.get(name="Child") p = c.parent
json_return = json.dumps(ret['return']) del ret['return'] json_full_ret = json.dumps(ret)
lm = LayerMapping(MultiPoint3D, vrt_file, mpoint_mapping, transform=False) lm.save() self.assertEqual(3, MultiPoint3D.objects.count())
mode = CourseModeFactory.create() mode.course_id = self.course.id mode.min_price = 1 mode.save()
return (network, cidr, name, ip_version)
test_photo = Photo.objects.get(pk=test_image.pk) foo_photo = FooPhoto(my_photo=test_photo) foo_photo.save()
if amount < decimal.Decimal('0.01'): return HttpResponseBadRequest("Amount must be greater than 0")
if categories is None: categories = self.categories if ordered is None: ordered = self.ordered return super(CategoricalIndex, self)._shallow_copy(values=values, categories=categories, ordered=ordered, **kwargs)
values = (self.data._convert(datetime=True)._get_numeric_data()) values = np.ravel(values) values = values[~com.isnull(values)]
try: data_root = path(settings.GITHUB_REPO_ROOT) subdir = base64.urlsafe_b64encode(repr(courselike_key)) course_dir = data_root / subdir filename = request.FILES['course-data'].name
class FakeGeom1(GEOSBase): pass
formulahint_element.set("samples", sample_str)
assert_raises(ValueError, agglo.fit, X[:0])
if retcode_sv != 0: os.unlink(os.path.join([_service_path(name), name])) return False return True
ci = self.create_index()
connection.timezone del connection.timezone connection.timezone_name del connection.timezone_name
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
return "BIGSERIAL"
__func_alias__ = { 'list_': 'list' }
def __virtual__(): if not HAS_SQLITE3: return (False, 'The sqlite3 execution module failed to load: the sqlite3 python library is not available.') return True
self.connection.settings_dict['USER'] = primary_settings_dict['USER'] self.connection.settings_dict['PASSWORD'] = primary_settings_dict['PASSWORD']
ALL_VAR = 'all' ORDER_VAR = 'o' ORDER_TYPE_VAR = 'ot' PAGE_VAR = 'p' SEARCH_VAR = 'q' ERROR_FLAG = 'e'
if not diff_quality_percentage_pass: raise BuildFailure("Diff-quality failure(s).")
if self.is_consolidated(): return self bm = self.__class__(self.blocks, self.axes) bm._is_consolidated = False bm._consolidate_inplace() return bm
self._socket = self.context.socket(zmq.REQ) if hasattr(zmq, 'RECONNECT_IVL_MAX'): self._socket.setsockopt( zmq.RECONNECT_IVL_MAX, 5000 )
PLATFORM_NAME = "Your Platform Name Here" CC_MERCHANT_NAME = PLATFORM_NAME COPYRIGHT_YEAR = "2015"
clf = QuadraticDiscriminantAnalysis() with ignore_warnings(): y_pred = clf.fit(X2, y6).predict(X2) assert_true(np.any(y_pred != y6))
return to_numeric(values, errors=errors)
df = pd.DataFrame([i] * 9 for i in range(16)) df = df.append([[1] + [0] * 8], ignore_index=True)
from .tasks import update_search_index
df = orig.copy() df.ix["j", 0] = "b" tm.assert_frame_equal(df, exp_single_cats_value)
mode = 1 M_matvec = None Minv_matvec = None if Minv is not None: raise ValueError("Minv should not be " "specified with M = None.")
class ReferencedByInline(models.Model): name = models.CharField(max_length=20, unique=True)
if PY3_OR_LATER: dispatch[pickle.BUILD[0]] = load_build else: dispatch[pickle.BUILD] = load_build
theme_root = settings.ENV_ROOT / "themes" / settings.THEME_NAME
class SomeError(Exception): pass try: with connection.schema_editor(): raise SomeError except SomeError: self.assertFalse(connection.in_atomic_block)
self.select = [] self.default_cols = False self.select_related = False self.set_extra_mask(()) self.set_annotation_mask(())
expiration_date = models.DateField(default=None, null=True, blank=True)
for name in names: ret[name] = ''
error = mean_absolute_error(y_true, y_pred) assert_almost_equal(error, (1. / 3 + 2. / 3 + 2. / 3) / 4.)
biggie = DataFrame({'A': randn(200), 'B': tm.makeStringIndex(200)}, index=lrange(200))
queuestate = {'key': queuekey, 'time': qtime, }
user = User.objects.get(email=email) user.set_password(new_password) user.save() history = PasswordHistory() history.create(user)
UnorderedObjectAdmin.ordering = ['bool'] check_results_order()
else: raise ValueError("unrecognized mode '%s'" % mode)
cols = self.obj.columns if isinstance(cols, Index): cols = cols.to_native_types(na_rep=na_rep, float_format=float_format, date_format=date_format, quoting=self.quoting) else: cols = list(cols)
tmp = np.zeros((n_samples, n_samples))
import salt.config import salt.loader import salt.utils.boto
title = ugettext_noop("Textbooks") is_collection = True is_default = False
contains_aggregate = False def __init__(self, sql, params): self.data = sql, list(params) def as_sql(self, compiler=None, connection=None): return self.data
frame2 = frame1.copy() multi_index = MultiIndex.from_tuples([(70, 80), (90, 100)]) frame2.index = multi_index
return self.best_estimator_.predict_proba(X)
if ':::' in ip_str: return False
from __future__ import absolute_import
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
if user is None: user = self.user return Mock( user_id=user.id, commentable_id=self.DISCUSSION_TOPIC_ID, context=context, **{'thread.user_id': self.user.id} )
def log_message(*args): pass
middleware.process_request(request) request.session.flush()
CreditRequirementStatus.remove_requirement_status( username, req_to_remove )
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
newline = ( '{0}\t{1}\t{2}\n'.format( name, type_opts, device_fmt)
fld_ptr = capi.get_feat_field_defn(feat.ptr, index) if not fld_ptr: raise GDALException('Cannot create OGR Field, invalid pointer given.') self.ptr = fld_ptr
click_css(self, 'a.delete-button', source_index, require_notification=False) confirm_prompt(self)
unvisited_children = list( child for child in get_children(current_node) if child not in yield_results )
super(AutoAuthDisabledTestCase, self).setUp() self.url = '/auto_auth' self.client = Client()
from __future__ import unicode_literals
np.testing.assert_equal(list(KFold(3).split(X)), list(cv.split(X)))
os.chdir(cwd)
self.assertIn('id', team) self.assertIn('discussion_topic_id', team) self.assertEqual(team['id'], self._expected_team_id(team, expected_prefix))
masked_terminal_regions = terminal_regions.copy() masked_terminal_regions[~sample_mask] = -1
assert_true(clf.fit_intercept)
from salt.modules import gentoo_service
return dict(zip(('request', 'user', 'course_key', 'course_mode', 'amount'), patched_create_order.call_args[0]))
from __future__ import absolute_import import logging from salt.ext.six.moves import StringIO
if user not in self._user_enrollments: self._user_enrollments[user] = CourseEnrollment.enrollments_for_user(user) return self._user_enrollments[user]
purchased_callback.assert_called_with()
import os import ast import logging
return self.log_p_x_given_z(X, theta)
return self.test_func
if b._can_hold_na: mask = isnull(d) d[mask] = None
correctness = correctmap.get_correctness('1_2_1') self.assertEqual(correctness, 'correct')
X = iris.data[45:, :] y = iris.target[45:] solvers = ("lbfgs", "newton-cg") class_weight_dict = _compute_class_weight_dictionary(y)
if 'cannot do' in str(e): raise raise IndexingError(key)
display_name = 'Nicely created' resp = self.create_xblock(display_name=display_name, category='chapter')
if '..' in template: log.warning( 'Discarded template path \'{0}\', relative paths are ' 'prohibited'.format(template) ) raise TemplateNotFound(template)
optioninput_element = etree.Element("optioninput")
continue
ret = msgpack.loads(msg, use_list=True, encoding=encoding)
N_REGIONS = 25
CONFIG_FILE = open(settings.REPO_ROOT / "docs" / "cms_config.ini") CONFIG = ConfigParser.ConfigParser() CONFIG.readfp(CONFIG_FILE)
component.edit_visibility() return ComponentVisibilityEditorView(self.browser, component.locator)
'ssh_list_nodegroups': dict,
#epub_language = ''
return aes_decrypt(base64.urlsafe_b64decode(encoded_data), key)
restart_django_servers()
return self.min_num
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
db = DBSCAN(eps=0.3, min_samples=10).fit(X) core_samples_mask = np.zeros_like(db.labels_, dtype=bool) core_samples_mask[db.core_sample_indices_] = True labels = db.labels_
self._middleware_chain = handler
content = html_parsed[0].tail
self.section = modulestore().get_item(self.section.location, depth=None) self.field_data_cache.add_descriptor_descendents(self.section, depth=None)
already_pushed = data.setdefault('Layers', {}).setdefault( 'Already_Pushed', []) already_pushed.append(item['id'])
Coupon.objects.create( code=code, description='testing code', course_id=course_key, percentage_discount=self.percentage_discount, created_by=self.user, is_active=is_active )
__func_alias__ = { 'list_': 'list' }
self.assertTrue(mock_audit_log.called)
for parent in self.model.mro()[1:]: if hasattr(parent, '_meta'): default_manager_name = parent._meta.default_manager_name break
self.assertTrue(not "\t" in pp_t("a\tb", escape_chars=("\t", )))
if ret['result']:
inject_globals['__env__'] = 'base'
self.wait_for_certificate_delete_button() self.find_css('.actions .delete.action-icon').first.click()
axis = self._get_axis_name(axis) index = self._get_axis(axis) return self.reindex(**{axis: index[slobj]})
self._codes = _coerce_indexer_dtype(values, categories) self._categories = self._validate_categories( categories, fastpath=isinstance(categories, ABCIndexClass)) self._ordered = ordered return
self.enrollment = CourseEnrollmentFactory( user=self.user,
assert_equals(value, getattr(seq, attribute))
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
def __setstate__(self, state): self._is_child = True Reactor.__init__( self, state['opts'], log_queue=state['log_queue'])
if position != seq_module.position: seq_module.position = position
for index, field in enumerate(self.related.field.local_related_fields): setattr(value, field.attname, related_pk[index])
self.ymd.astype(int).unstack()
block = Comment(start[0], end[0], string) self.blocks.append(block) self.current_block = block
self.client.login(username=self.global_staff.username, password='test') response = self.client.post(url) self.assertEqual(response.status_code, 302)
_subscriptions = [ {'protocol': s['Protocol'], 'endpoint': s['Endpoint']} for s in _subscriptions ]
X = rng.rand(n_samples, n_features)
content = get_content(service_instance, object_type, property_list=property_list, container_ref=container_ref)
from django.contrib.admin.models import LogEntry, DELETION LogEntry.objects.log_action( user_id=request.user.pk, content_type_id=get_content_type_for_model(object).pk, object_id=object.pk, object_repr=object_repr, action_flag=DELETION, )
try: AdaGrad(-1.0) allows_null = True except AssertionError: allows_null = False assert not allows_null
from __future__ import unicode_literals
self.course_nav.go_to_vertical('Test Vertical-0')
self.assert_login_response_in_pipeline_looks_correct(student_views.signin_user(strategy.request))
def test_basic_drop_first(self): s_list = list('abc') s_series = Series(s_list) s_series_index = Series(s_list, list('ABC'))
warnings.warn("order is deprecated, use sort_values(...)", FutureWarning, stacklevel=2) return self.sort_values(return_indexer=return_indexer, ascending=ascending)
from __future__ import unicode_literals
expected_y = y.mf_update( state_below = v.upward_state(v_state))
class PriceForm(Form): amount = FloatField() qty = IntegerField()
return _extend_blocks([b.convert(datetime=True, numeric=False) for b in blocks])
item_list_generator = _generate_items_for_subtask( item_querysets, item_fields, total_num_items, items_per_task, total_num_subtasks, entry.course_id, )
url_path, fragment = urldefrag(url)
transformer_clone = clone(transformer) X_pred = transformer_clone.fit_transform(X, y=y_)
self.split_test_module.user_partition_id = SplitTestFields.no_partition_selected['value']
app_label = "rss_proxy"
management.call_command( 'loaddata', 'sequence', verbosity=0, )
response = self.client.get(url) self.assertEquals(response.status_code, 403)
import salt.utils import salt.key
HAS_PWD = False
data_y = None if label_type is not None: data_y = data[label_type].reshape(-1, 1)
from __future__ import absolute_import, print_function import optparse import pprint import time import os
task_type = 'rescore_problem' task_class = rescore_problem task_input, task_key = encode_problem_and_student_input(usage_key) return submit_task(request, task_type, task_class, usage_key.course_key, task_input, task_key)
self.new_post_button.click() EmptyPromise( lambda: ( self.new_post_form ), "New post action succeeded" ).fulfill()
try: xml = self.preprocess_pmathml(self.expr)
if self.has_spatial_indexes: self.assertSpatialIndexExists('gis_neighborhood', 'heatmap')
return latest_date or datetime.datetime.utcnow().replace(tzinfo=utc)
if not verify_assets: if other_langs: translations = list(other_langs) if not translations or sub: translations += ['en'] return translations
try: result = super(StringOrDate, self).from_json(value) except ValueError: return value if result is None: return value else: return result
invoice_copy_preference = True invoice_preference_value = get_user_preference(request.user, INVOICE_KEY) if invoice_preference_value is not None: invoice_copy_preference = invoice_preference_value == 'True' return JsonResponse({ 'invoice_copy': invoice_copy_preference })
PIPELINE_DISABLE_WRAPPER = True
self.q(css="select#allowance_type").present or self.q(css="label#timed_exam_allowance_type").present
tmp_file = os.path.join(integration.TMP, 'issue-2379-file-append.txt') salt.utils.fopen(tmp_file, 'w').write(
ret = self.run_function( 'state.template_str', [template], timeout=120 )
class CopyForm(Form): degree = IntegerField(widget=Select(choices=((1, gettext_lazy('test')),)))
class BinOutput(GEOSFuncFactory): "Generates a prototype for the routines that return a sized string." argtypes = [GEOM_PTR, POINTER(c_size_t)] restype = c_uchar_p errcheck = staticmethod(check_sized_string)
row.delete()
self.assertEqual(self.user1.course_groups.count(), 1) self.assertEqual(CohortMembership.objects.filter(user=self.user1).count(), 1)
A_xT = self.rmul(self.transpose_right(x, True)) rval = self.transpose_left(A_xT, True) return rval
for item in _CREATE_OPTIONS_REQUIRED[set_type]: if item not in kwargs: return 'Error: {0} is a required argument'.format(item)
result = salt.utils.slack.query(function='message', api_key=api_key, method='POST', header_dict={'Content-Type': 'application/x-www-form-urlencoded'}, data=urllib.urlencode(parameters))
atomic_transactions = True
a_date = Period(freq='A', year=2007) self.assertEqual(a_date.year, 2007)
try: return np.linalg.inv(a) except linalg.LinAlgError: return np.linalg.pinv(a)
return mark_safe('onload="%s.load()"' % self.js_module)
from salt.modules import deb_postgres
return Series(self._t_stat_raw, index=self.beta.index)
output = self.engine.render_to_string('i18n26', {'myextra_field': 'test', 'number': 1}) self.assertEqual(output, 'singular test')
serialized_data = serializers.serialize(format, objects, indent=2)
return self.q(css='.wrapper-last-draft').first.text[0]
with self.assertNumQueries(3): lst1 = self.traverse_qs( Room.objects.prefetch_related('house__occupants'), [['house', 'occupants']] )
with self.assertRaises(ValidationError): SurveyForm.create('badform', '<input name="oops" /><<<>')
saltenviron(environ)
subset_idxs = sample_without_replacement(n_samples, min_samples, random_state=random_state) X_subset = X[subset_idxs] y_subset = y[subset_idxs]
if enrollment.mode in CourseMode.VERIFIED_MODES:
return self.fillna(method='ffill', axis=axis, inplace=inplace, limit=limit, downcast=downcast)
self.person = Person.objects.create(name='Reinhardt')
from __future__ import absolute_import
raise ValueError('cannot insert %s, already exists' % item)
return settings.FEATURES['ENABLE_MAX_FAILED_LOGIN_ATTEMPTS']
Site.objects.clear_cache()
certificate_id = content.pop("id") return certificate_id
import salt.config import salt.loader from salt.modules import boto_cloudtrail
if bulk_write_record.active and course_key.branch in bulk_write_record.dirty_branches: return bulk_write_record.structure_for_branch(course_key.branch)
response = c.get("/login_protected_redirect_view/")
import salt.utils import salt.utils.decorators as decorators
self.key = key self.value = value self.time = time self.min_compress_len = min_compress_len return True
X, y = check_X_y(X, y, multi_output=True, y_numeric=True) self.y_ndim_ = y.ndim if y.ndim == 1: y = y[:, np.newaxis]
return self.is_acquired
return False
class AvatarProxy(Avatar): class Meta: proxy = True
log.debug( 'The \'{0}\' cloud driver defined under \'{1}\' provider ' 'alias is unable to get the sizes information'.format( driver, alias ) ) continue
from io import TextIOWrapper s = TextIOWrapper(s, encoding='utf-8')
groups = pickle.loads(pickle.dumps(groups)) self.assertQuerysetEqual(groups, [g], lambda x: x)
df3 = pd.concat([df2.A.to_frame(), df2.B.to_frame()], axis=1) assert_frame_equal(df2, df3)
from salt.modules import keyboard
raise SkipTest
import itertools from abc import ABCMeta, abstractmethod import warnings
return len(self._line_start_indexes)
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
try: msg = e.message except AttributeError: msg = compat.text_type(e) raise UndefinedVariableError(msg)
self.assertEqual(html.count("</script>"), 1)
active_users = get_user_model()._default_manager.filter( email__iexact=email, is_active=True) return (u for u in active_users if u.has_usable_password())
from __future__ import unicode_literals
if isinstance(slicer, tuple) and len(slicer) == 2: if not is_null_slice(slicer[0]): raise AssertionError("invalid slicing for a 1-ndim " "categorical") slicer = slicer[1]
return capi.geos_isempty(self.ptr)
call_command('manage_group', TEST_GROUP) self.check_groups([TEST_GROUP])
if num_violations > violations_limit > -1: raise BuildFailure("Failed. Too many pylint violations. " "The limit is {violations_limit}.".format(violations_limit=violations_limit))
if protocol == 6:
match = CONTENT_TYPE_RE.match(content_type) if match: charset = match.group(1) else: charset = settings.DEFAULT_CHARSET return force_bytes(data, encoding=charset)
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath
try:
VerificationCheckpoint.objects.create( course_id=self.course.id, checkpoint_location=self.checkpoint_midterm, )
self.bulk.update_definition(self.course_key, self.definition) self.assertConnCalls(call.insert_definition(self.definition, self.course_key))
parent = np.arange(n_nodes, dtype=np.intp) used_node = np.ones(n_nodes, dtype=np.intp) children = []
(2, 2.0, classification_cost)
return
colg = self._gotitem(self._selection, ndim=2, subset=obj) return colg.aggregate(how, _level=None)
GDAL_INTEGER_TYPES = [1, 2, 3, 4, 5]
for klass, count in instance_count.items(): self.assertEqual(count, klass.objects.count())
return self.lcp.done
if self.tables: alias = self.tables[0] self.ref_alias(alias) else: alias = self.join(BaseTable(self.get_meta().db_table, None)) return alias
from datetime import datetime from mock import patch, Mock
import contracts contracts.disable_all()
course = get_course_overview_with_access(user, 'staff', course_id) return bool(has_access(user, 'staff', course))
self.verify_run_all_servers_task(options)
self.assertEquals( response_data["content"], strip_none(make_mock_thread_data(course=self.course, text=text, thread_id=thread_id, num_children=1)) ) mock_request.assert_called_with( "get",
updates = _filter_list_by_category(updates=updates, categories=categories)
self.assert_categorical_equal(cat, cat.shift(0))
return response
ensure_in_syspath('../../') import salt.ext.six as six from salt.ext.six.moves import reload_module from salt.utils import locales
from __future__ import absolute_import import os
import salt.loader import salt.runner import salt.state import salt.utils import salt.utils.schema as S from salt.utils.doc import strip_rst as _strip_rst from salt.ext.six.moves import zip
self.assertNotContains(response, formats.number_format(year))
assert_array_almost_equal(K.flat[::6], [linalg.norm(x) ** 2 for x in X])
mean_y = mean(y) mean_x_times_y = mean(x * y) assert_equal(cov_x_y, mean_x_times_y - (mean_x * mean_y))
XBlockDisableConfig.objects.create( disabled_create_blocks='', enabled=True )
if clear_load['fun'] != 'saltutil.find_job': log.warning( 'Authentication failure of type "eauth" occurred.' ) return ''
tempdir = tempfile.mkdtemp() egg = zipfile.ZipFile(top_dirname) egg.extractall(tempdir) top = os.path.join(tempdir, base) os.chdir(tempdir)
cv_score -= cv_score[0] cv_best_iter = x[np.argmin(cv_score)]
return Date().to_json(datetime_obj)
df['bb'].iloc[0] = 0.17 df._clear_item_cache() self.assertAlmostEqual(df['bb'][0], 0.17)
import tornado.ioloop
for i in range(1, 3): self.tab_nav.go_to_tab("PDF Book {}".format(i))
return self._descriptors[location.to_deprecated_string()]
result = idx * idx expected = Index(idx.values * idx.values) tm.assert_index_equal(result, expected, exact=True)
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): result = op(panel, 1) tm.assert_sp_frame_equal(result['ItemA'], op(panel['ItemA'], 1))
try: from setuptools import setup except ImportError: from distutils.core import setup
return str((template_name, context))
if stop_words is not None: tokens = [w for w in tokens if w not in stop_words]
SOCIAL_MEDIA_FOOTER_URLS = ENV_TOKENS.get('SOCIAL_MEDIA_FOOTER_URLS', SOCIAL_MEDIA_FOOTER_URLS)
from __future__ import absolute_import import os
result = self.index.append([]) self.assertTrue(result.equals(self.index))
available_version = latest_version
c2pread, c2pwrite = CreatePipe(inherit_read=False, inherit_write=True) errread, errwrite = CreatePipe(inherit_read=False, inherit_write=True)
bp = df.plot.box(color='DodgerBlue', return_type='dict') _check_colors(bp, 'DodgerBlue', 'DodgerBlue', 'DodgerBlue', 'DodgerBlue')
class TimeSeries(Series): def __init__(self, *args, **kwargs): warnings.warn("TimeSeries is deprecated. Please use Series", FutureWarning, stacklevel=2)
Ht = check_array(H.T, order='C') X = check_array(X, accept_sparse='csr')
return self.http_get( reverse(self.view, kwargs={'course_id': course_id or self.course_id}), **headers )
with tm.assertRaises(SyntaxError): df.query('(@df>0) & (@df2>0)', engine=engine, parser=parser)
mode = 2 if Minv is None: Minv_matvec = get_inv_matvec(M, symmetric=True, tol=tol) else: Minv = _aslinearoperator_with_dtype(Minv) Minv_matvec = Minv.matvec M_matvec = _aslinearoperator_with_dtype(M).matvec
o2o_setnull = models.ForeignKey(R, models.SET_NULL, null=True, related_name="o2o_nullable_set")
self.assertEqual(self.book1.authors.count(), 3)
import salt.utils as utils
def left_op(imgs): return self.op(imgs, self.s_filters)
row = next(reader)
return self.q(css=self.experiment_groups_css).present or self.q(css=".experiment-groups-doc").present
return ''
from ratelimitbackend import admin
#epub_max_image_width = 0
from __future__ import absolute_import
if structure is None: structure = self.db_connection.get_structure(version_guid, course_key) bulk_write_record.structures[version_guid] = structure if structure is not None: bulk_write_record.structures_in_db.add(version_guid)
assert_equal(100, n_lines)
SurveyAnswer.objects.filter(form=self, user=user).delete()
return int(r_hash.hexdigest()[:7], 16) % NUM_RANDOMIZATION_BINS
salt.utils.daemonize()
class Person(models.Model): name = models.CharField(max_length=128)
return launchctl('disable', 'system/{0}'.format(label), runas=runas)
if f.remote_field.through is None: sequence_list.append({'table': f.m2m_db_table(), 'column': None})
pygments_style = 'sphinx'
if convnet_available.compiled: _logger.debug('already compiled') return True
self.skipTest( 'Unable to find out how many PTY\'s are open on Darwin - ' 'Skipping for now' )
self.assertIsInstance(descriptor._field_data, LmsFieldData)
chapter = self.store.create_child(self.user_id, self.course.location, 'chapter', block_id='Overview', asides=asides) self.writable_chapter_location = chapter.location
self.r.cached_query = Article.objects.filter(reporter=self.r) self.assertEqual(repr(deepcopy(self.r)), "<Reporter: John Smith>")
from salt.modules import mac_power from salt.exceptions import SaltInvocationError
K_gradient = np.empty((X.shape[0], X.shape[0], 0)) return K, K_gradient
class MockEstimator(object): def predict_proba(self, X): assert_array_equal(X.shape, probs.shape) return probs mock = MockEstimator()
self.assertEqual( Book.objects.aggregate(Sum("pages")), {"pages__sum": 3703}, )
if publish == "discard_changes": store.revert_to_published(xblock.location, user.id) return JsonResponse({'id': unicode(xblock.location)})
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
self.assertNotContains(resp, 'Explore free courses from')
return self.batch_process_rhs(compiler, connection)
def __init__(self, start, end): self.start = start self.end = end
frame = DataFrame(np.random.randn(1500, 4), columns=['a', 'a', 'b', 'b']) frame.info(buf=io)
assert_raises(ValueError, next, StratifiedShuffleSplit(3, 0.2).split(X, y))
tab2_css = 'div.ui-tabs-panel#tab2' world.wait_for_visible(tab2_css)
exit=False)
data = { 'parent_locator': unicode(parent_usage_key), 'duplicate_source_locator': unicode(source_usage_key) } if display_name is not None: data['display_name'] = display_name
GITHUB_REPO_ROOT = (TEST_ROOT / "data").abspath() LOG_DIR = (TEST_ROOT / "log").abspath()
self.request_map = defaultdict(list)
assert_not_debug_mode()
return self._get_course_info(request, course)
self.method = method self.submit_url = submit_url self.fields = [] self._field_overrides = defaultdict(dict)
import dns.resolver
CoursewareSearchIndexer.do_course_reindex(store, course.id)
self.process_manager.stop_restarting() self.process_manager.send_signal_to_processes(signum) self.process_manager.kill_children()
index = self.r2.index return Series(self._r2_adj_raw, index=index)
for key in baseline: params = baseline.copy() del params[key] with self.assertRaises(CCProcessorDataException): payment_accepted(params)
scheme_id = UserPartition.VERSION_1_SCHEME
return json.dumps({})
sql, _ = compiler.compile(value) placeholder = placeholder % sql
import_course_from_xml( draft_store, 999, DATA_DIR, ['test_import_course'], static_content_store=content_store, do_import_static=False, verbose=True, target_id=SlashSeparatedCourseKey('guestx', 'foo', 'bar') )
return self._active_count == 1
ret |= {"voted"} if _is_author_or_privileged(cc_content, context): ret |= {"raw_body"}
if not set_permissions(username, permissions, uid): log.warning('unable to set user permissions') delete_user(username, uid) return False
HAS_RANGE = False try: import seco.range HAS_RANGE = True except ImportError: pass
ts_pre_fallback = "2013-11-03 01:59:59.999999" ts_pre_springfwd = "2013-03-10 01:59:59.999999"
return self.values[slicer]
path %= { 'minion_id': minion_id }
port = 4505 master_ip = None
salt myminion git.submodule /path/to/repo/sub/repo update opts='--rebase'
non_editable_metadata_fields = self.split_test_module.non_editable_metadata_fields self.assertIn(SplitTestDescriptor.due, non_editable_metadata_fields) self.assertIn(SplitTestDescriptor.user_partitions, non_editable_metadata_fields) self.assertNotIn(SplitTestDescriptor.display_name, non_editable_metadata_fields)
return None, None
ret['result'] = True ret['comment'] = enabled_msg return ret
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self._update_cutoff()
original_distances = original_distances[non_identical]
ret = self.run_function('shadow.info', [NO_USER]) self.assertEqual(ret['name'], '')
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1]}) grid_search.fit(X, y) assert_true(hasattr(grid_search, "grid_scores_"))
return mapping[math_string]
input_dict = {'1_2_1': '0'} correct_map = problem.grade_answers(input_dict)
self._auto_auth({'username': 'test', 'course_id': course_id})
DEFAULT_REASON = ugettext_noop("UNKNOWN REASON")
class LinearRing(LineString): pass
url(r'^programs/(?P<program_id>\d+)/[\w\-]*/?$', views.program_details, name='program_details_view'),
reload_the_page(step) edit_component_and_select_settings()
self.selenium.find_element_by_id('calendarlink0').click()
index = DatetimeIndex(["2014-03-31", "2014-06-30", "2015-03-30"]) assert frequencies.infer_freq(index) is None
return result_index, result
try: cmd_all = __salt__['cmd.run_all']( name, timeout=timeout, python_shell=True, **cmd_kwargs ) except CommandExecutionError as err: ret['comment'] = str(err) return ret
match = TRAILING_PUNCTUATION_RE.match(middle) if match: middle = match.group(1) trail = match.group(2) + trail trimmed_something = True
import salt.utils import salt.utils.files import salt.utils.atomicfile from salt.utils.odict import OrderedDict
values = np.column_stack([d_values[item][mask.take(d_indexer[item])] for item in self.items])
return self.q(css='.outline .no-content').is_present()
Business.objects.create(name='jaźń')
if rest.endswith('?raw'): return original
self.assertFalse(os.path.exists(path))
VS = VectorSpace(dim=27) VS_sparse = VectorSpace(dim=27, sparse=True)
sys.stdout.write("{0}\next_mods\n".format(OPTIONS.delimiter)) sys.exit(EX_MOD_DEPLOY)
assert_array_equal(np.intersect1d(train, test), [])
from __future__ import absolute_import import logging
CLASS_PRIORITY = ['video', 'problem']
if 'HTTP_USER_AGENT' in request.META: for user_agent_regex in settings.DISALLOWED_USER_AGENTS: if user_agent_regex.search(request.META['HTTP_USER_AGENT']): raise PermissionDenied('Forbidden user agent')
from __future__ import absolute_import import os import shutil import tempfile
self.assertEqual(len(FooFile.objects.all()), 0) self.assertEqual(len(FooImage.objects.all()), 0)
self._iterator = iter(value) if hasattr(value, 'close'): self._closable_objects.append(value)
Xt = X for name, transform in self.steps: Xt = transform.transform(Xt) return Xt
masks = numpy.asarray([subset.sum(axis=0) for subset in data]).squeeze() nz_feats = combine(masks).nonzero()[0]
with open(dquality_dir / "diff_quality_pep8.html", "w") as f: f.write(_pep8_output(count, violations_list, is_html=True))
LANGUAGES_BIDI = ("he", "ar", "fa", "ur", "fa-ir", "rtl")
return capa_module
self.assertIn('a_custom', __grain__) self.assertEqual({'k1': 'v1', 'k2': 'v2'}, __grain__['a_custom'])
from salt.modules import config
import salt.ext.six as six
from __future__ import absolute_import
self.check_components_on_page( ADVANCED_COMPONENT_TYPES, ['Word cloud', 'Annotation', 'Text Annotation', 'Video Annotation', 'Image Annotation', 'split_test'], )
clf = PCA(n_components=2) X_true = clf.fit_transform(X_true)
_skip_if_no_xlsxwriter()
tasks = instructor_task.api.get_entrance_exam_instructor_task_history(course_id, entrance_exam_key)
self.assertEqual(len(self.store.get_orphans(course_key)), number)
return text
STATICFILES_STORAGE = 'openedx.core.lib.django_require.staticstorage.OptimizedCachedRequireJsStorage'
import salt.utils import salt.modules.cmdmod from salt.exceptions import CommandExecutionError
__virtualname__ = 'partition'
def get_prep_lookup(self): if isinstance(self.rhs, float): self.rhs = math.ceil(self.rhs) return super(IntegerFieldFloatRounding, self).get_prep_lookup()
assert_equal(clf.fit(x, y).score(x, y), 1.0, 'using covariance: %s' % solver)
if local_loglevel not in LOG_LEVELS: local_loglevel = 'INFO'
from __future__ import unicode_literals
pass
self.assertIn( 'Invalid String Value for Enabled', self.run_function('system.set_disable_keyboard_on_lock', ['spongebob']))
response = self.client.post(self.url, {})
notification_selector = '.auto_enroll_csv .results .message-%s' % section_type self.wait_for_element_presence(notification_selector, "%s Notification" % section_type.title()) return self.q(css=notification_selector).is_present()
DEBUG = True
{% for k, v in details['servers'].iteritems() %} {{ k }}: dellchassis.blade_idrac: - idrac_password: {{ v['idrac_password'] }} {% endfor %}
return start_index
if 'hostname' not in vmconfig: vmconfig['hostname'] = name
pass
response = self.client.post(reverse('admin:student_courseaccessrole_add'), data=data) self.assertRedirects(response, reverse('admin:student_courseaccessrole_changelist'))
from __future__ import absolute_import
self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
clf = DecisionTreeClassifier().fit(X, y)
assert_not_in('rerandomize', seq.xml_attributes)
ScopeIds(None, block_type, definition_id, usage_id), field_data,
return self.best_estimator_.predict(X)
modulestore().update_item(course, ModuleStoreEnum.UserID.primitive_command)
if psutil.version_info < (1, 0, 1): net_io_counters = psutil.network_io_counters()
from salt.exceptions import SaltInvocationError
if engine == 'c': if options['skip_footer'] > 0: fallback_reason = "the 'c' engine does not support"\ " skip_footer" engine = 'python'
for freq in ['Y', 'M', 'foobar']: self.assertRaises(ValueError, lambda: t1.round(freq))
clf = svm.NuSVC(nu=0.0) assert_raises(ValueError, clf.fit, X_sp, Y)
with salt.utils.fopen('/usr/share/libvirt/cpu_map.xml', 'r') as cpu_map: cpu_map = minidom.parse(cpu_map)
self.track_selection_page.visit()
if isinstance(exc, zmq.ZMQError) and exc.errno == errno.EINTR: return
return np.vstack([kernel.bounds for kernel in self.kernels])
import numpy as np import matplotlib.pyplot as plt from sklearn.tree import DecisionTreeRegressor from sklearn.ensemble import AdaBoostRegressor
eligibilities = api.get_eligibilities_for_user("staff") self.assertEqual(eligibilities, [])
age = opts.get('fileserver_list_cache_time', 30) + 1
kern_data_minor = kern_data.transpose([0,2,3,1]).copy() img_data_minor = img_data.transpose([0,2,3,1]).copy()
check_perms(path, None, perms['user'], perms['group'], perms['mode'])
expected = left_f(s, Timestamp('nat')) result = right_f(Timestamp('nat'), s) tm.assert_series_equal(result, expected)
coef_init = np.zeros((n_features, n_classes), dtype=np.float64, order='C')
return textwrap.dedent("\n".join(lines)).split("\n")
self.has_conf = False self.val = self.run_function('sysctl.get', [ASSIGN_CMD])
data_specs = (IndexSpace(max_labels=10, dim=1), 'targets') it = self.test.iterator(mode='sequential', data_specs=data_specs, batch_size=100) for y in it: pass
remove_users(self.admin, CourseCreatorRole(), self.user) self.assertFalse(user_has_role(self.user, CourseCreatorRole()))
eng = _engines[engine] eng_inst = eng(parsed_expr) ret = eng_inst.evaluate()
n_iter = 4 n_iter_specified = False
self._active_count -= 1
if not isinstance(obj.save_as, bool): return must_be('a boolean', option='save_as', obj=obj, id='admin.E101') else: return []
return _get_next_prev(self, date, is_previous=False, period='month')
self.assertNotEqual(order.processor_reply_dump, '')
libraries = ['m'] if not is_platform_windows() else []
return tslib.dates_normalized(self.asi8, self.tz)
cm = confusion_matrix(y_true, y_pred, labels=[2, 1]) assert_array_equal(cm, [[18, 2], [24, 3]])
self.q(css="input.proctored_exam").first.click()
profile_page.value_for_dropdown_field('language_proficiencies', 'English') profile_page.value_for_dropdown_field('country', 'United Arab Emirates') profile_page.set_value_for_textarea_field('bio', 'Nothing Special')
transcripts_utils.download_youtube_subs(good_youtube_sub, self.course, settings)
self.assertRaises(ValueError, TimedeltaIndex, ['1 days', '2 days', '4 days'], freq='D')
LOOKUP_SEP = '__'
X = iris.data
return [x for x in cmd['stdout'].split('\n') if check_ip(x)]
if self.base_dir is None: return False return resource_exists(self.module, os.path.join(self.base_dir, path))
result = Timestamp(np.nan) self.assertIs(result, NaT)
if block_key is None: block_key = BlockKey(block_data.block_type, LocalId())
if not db_field.remote_field.through._meta.auto_created: return None db = kwargs.get('using')
fraction_mode_ever = True position = "denominator"
return self._get_field('microseconds')
import salt.utils
] DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.' NUMBER_GROUPING = 3
base = np.memmap(filename, dtype=dtype, shape=total_buffer_len, mode=mode, offset=offset, order=order) return as_strided(base, shape=shape, strides=strides)
rp = SparseRandomProjection(n_components=10, dense_output=False, random_state=0) rp = rp.fit(data) assert isinstance(rp.transform(data), np.ndarray)
discussion_id_map_json = CompressedTextField(verbose_name='Discussion ID Map JSON', blank=True, null=True)
from __future__ import unicode_literals
import salt.client import salt.loader import salt.runner import salt.utils import salt.utils.event import salt.utils.http import salt.utils.slack
self.service.set_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' )
raise NotImplementedError('subclasses of ListFilter must provide a choices() method')
rs = self.pc.convert([0, 1], None, self.axis) xp = [0, 1] self.assertEqual(rs, xp)
self.user.profile.country = restricted_country.country self.user.profile.save()
if inclusive: lmask = self >= left rmask = self <= right else: lmask = self > left rmask = self < right return lmask & rmask
unvisited_children.reverse() stack.extend(unvisited_children)
try:
#html_use_smartypants = True
if y.ndim > 2 or (y.dtype == object and len(y) and not isinstance(y.flat[0], string_types)):
httpd = make_server('localhost', mod_opts['port'], application)
response = self.client.get(reverse('admin:admin_views_referencedbyparent_changelist'), {TO_FIELD_VAR: 'name'}) self.assertEqual(response.status_code, 200)
search_engine = cls.engine() serialized_course_team = CourseTeamIndexer(course_team).data() search_engine.index(cls.DOCUMENT_TYPE_NAME, [serialized_course_team])
if hash(np.int64(-1)) != -2: raise nose.SkipTest("skipping because of windows hash on Python" " 3.2.2")
default_pprint = lambda x, max_seq_items=None: \ pprint_thing(x, escape_chars=('\t', '\r', '\n'), quote_strings=True, max_seq_items=max_seq_items)
inject_globals['__env__'] = str(cdata['kwargs']['env'])
if self.axis == 0: obj = obj.swapaxes(0, 1) return obj
if rank < n_negative: return data[rank] if rank - n_negative < n_zeros: return 0 return data[rank - n_zeros]
def __init__(self, opts, io_loop=None): super(SAuth, self).__init__(opts, io_loop=io_loop)
return bool(value)
'organizations',
return self.asfreq()
_new_value_type = 'simple' if isinstance(val, dict): _new_value_type = 'complex' elif isinstance(val, list): _new_value_type = 'complex'
if expected is None: self.assertEqual(expected, constructed) else: self.assertTrue(constructed.startswith(notes_url))
p = safe_sparse_dot(v, self.components_.T) p += self.intercept_hidden_ return expit(p, out=p)
self.video.click_player_button('fullscreen')
self.distribution.salt_installing_m2crypto_windows = True self.run_command('install-m2crypto-windows') self.distribution.salt_installing_m2crypto_windows = None
try: return get_student_from_identifier(unique_student_identifier) except User.DoesNotExist: raise DashboardError( _("Could not find student matching identifier: {student_identifier}").format( student_identifier=unique_student_identifier ) )
f = FloatField(localize=True) self.assertWidgetRendersTo(f, '<input id="id_f" name="f" type="text" required />')
import warnings import operator import sys import time
self.verbose_mod *= 10
rng = np.random.RandomState(0) n_samples, n_features, n_components = 500, 2, 2
v = value.value[result]
REQUIRE_JS = "js/vendor/requiresjs/require.js"
with tm.assertRaises((ValueError, TypeError)): s.plot(yerr=s_err)
stat_f = os.path.join(PLUGINDIR, plugin) execute_bit = stat.S_IXUSR & os.stat(stat_f)[stat.ST_MODE] if execute_bit: ret.append(plugin)
temp_poll_answers = self.poll_answers temp_poll_answers[dispatch] += 1 self.poll_answers = temp_poll_answers
invalid_cdn_url = 'http://http://fakecdn.com/' self.assertIsNone(rewrite_video_url(invalid_cdn_url, self.original_video_url))
EXPORTED_ASSET_FILENAME = 'assets.xml'
res = df.groupby('gender').hist() tm.close()
self.assertEqual(sysex.exception.args, (1,))
assert_raises(ValueError, check_is_fitted, ARDRegression, "coef_") assert_raises(TypeError, check_is_fitted, "SVR", "support_")
MOBILE_APP_USER_AGENT_REGEXES = [ r'edX/org.edx.mobile', ]
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"])
self.request.user = UserFactory.create(is_staff=True) self.assertTrue(self.permission.has_permission(self.request, None))
GeneratedCertificate.eligible_certificates.all().delete()
frame = self.frame.copy() expected = self.frame.copy()
response = self.api_response() self.assertNotIn('\'/static/', response.data['handouts_html'])
urlpatterns = super(UnchangeableObjectAdmin, self).get_urls() return [p for p in urlpatterns if p.name and not p.name.endswith("_change")]
import os import datetime import yaml import zmq from collections import namedtuple
age = 5*24*60*60
unique_name = uuid.uuid4().hex[0:30]
from __future__ import absolute_import
loss, grad = _logistic_loss_and_grad(w, X, y, alpha=1.) grad_2, hess = _logistic_grad_hess(w, X, y, alpha=1.) assert_array_almost_equal(grad, grad_2)
assert_equal(X.indptr.shape[0], 7) assert_equal(X.shape[0], 6) assert_equal(X.shape[1], 21) assert_equal(y.shape[0], 6)
return self.test_passed('.js-init-run')
for i in range(3): bio.write(struct.pack('c', null_byte))
pnt = Point(0, 0) self.assertEqual(0.0, pnt.distance(Point(0, 0)))
_mock_count.return_value = None with self.assertRaises(SystemExit): call_task('pavelib.quality.run_safecommit_report')
md5er = hashlib.md5() update_hash(md5er, obj) return md5er.hexdigest()
if strategy == "median": median = np.empty(len(columns)) for i, column in enumerate(columns): median[i] = _get_median(column, n_zeros_axis[i])
from __future__ import absolute_import import os import yaml import shutil import time
if isinstance(self.columns, MultiIndex) and self.merge_cells: self.rowcounter += 1
ir = IsotonicRegression(increasing='auto', out_of_bounds="nan") ir.fit(x, y)
for c in colors.cnames: result = plotting._get_standard_colors(num_colors=1, color=c) self.assertEqual(result, [c])
import os
return Fragment(self.FRAG_CONTENT)
result = sparse.loc[sparse % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse(fill_value=0) tm.assert_sp_series_equal(result, exp)
request.add_header('User-Agent', 'OpenAnything/1.0') html_content = opener.open(request).read() open(html_filename, 'wb').write(html_content)
self.assertEqual(request.COOKIES['want'], force_str("café"))
out, err = DETAILS['server'].sendline('pkg_list\n')
return self.q(css='.page-header .page-title')[0].text
ret['result'] = True ret['prefix'] = '' ret['version_spec'] = []
if 'download_track' not in field_data and track is not None: field_data['download_track'] = True
last = int(time.time()) salt.daemons.masterapi.clean_fsbackend(self.opts) salt.daemons.masterapi.clean_pub_auth(self.opts)
return "{}/badges".format(self._base_url)
NUM_ROWS = 1000
Xs.append(np.array([[0.0003817754041, 1.0], [0.0003817753750, 2.0]], dtype=np.float32))
replication_map = { 'class': replication_strategy }
PersonFromAbstract.abstract_persons.create(objects='Test') self.assertQuerysetEqual( PersonFromAbstract.abstract_persons.all(), ["Test"], lambda c: c.objects, )
from __future__ import absolute_import
np.random.seed(0) index = range(3) columns = list('abc')
continue
def refresh_thread_page(self, thread_id): self.browser.refresh() self.thread_page.wait_for_page()
ApiResponse = collections.namedtuple('ApiResponse', ['http_response', 'data'])
s_1 = .5 * a.T.dot(C).dot(a) - .5 * R.T.ravel().dot(C.ravel())
ret['result'] = True ret['comment'] = 'image {0} is absent'.format(name)
csv_str = self.frame.to_csv(path=None) self.assertIsInstance(csv_str, str) recons = pd.read_csv(StringIO(csv_str), index_col=0) assert_frame_equal(self.frame, recons)
#html_title = None
assert_almost_equal(df.values, unser.values, check_dtype=check_numpy_dtype) self.assert_index_equal(df.columns, unser.columns, exact=check_column_type)
jid_dir_name = jid_dir.rpartition('/')[2]
log = logging.getLogger(__name__)
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if hasattr(lgeoip, 'GeoIP_lib_version'): GeoIP_lib_version = lgeoip.GeoIP_lib_version GeoIP_lib_version.argtypes = None GeoIP_lib_version.restype = c_char_p else: GeoIP_lib_version = None
ret = self.shell.exec_cmd('/bin/sh \'$HOME/{0}\''.format(target_shim_file))
dictionary = np.array(dictionary, order='F')
from __future__ import absolute_import
from __future__ import absolute_import
return proxy_output
with self.assertRaises(CourseOverview.DoesNotExist): self.store.delete_course(course.id, ModuleStoreEnum.UserID.test) CourseOverview.get_from_id(course.id)
X_filtered = np.vstack((X[y == 0][:500], X[y == 1][:100], X[y == 2][:10])) y_pred = KMeans(n_clusters=3, random_state=random_state).fit_predict(X_filtered)
frame['H'] = np.random.randn(N) tm.assertIsInstance(frame['H'], SparseSeries)
url_path = "tabs" def is_browser_on_page(self): return self.q(css='body.view-static-pages').present
bandmem.nodata_value = 99 self.assertEqual(bandmem.nodata_value, 99)
cons = self._orig._constructor return cons(result, name=name, index=index)
func_code_h = hash(getattr(self.func, '__code__', None)) return id(self.func), hash(self.func), func_code_h
return 'initial-%s' % self.add_prefix(field_name)
CertificateGenerationConfiguration(enabled=True).save()
from salt.states import tomcat
return self._is_element_visible(".response_{} .edit-post-body".format(response_id))
apps = Apps(["migrations"])
return "start_date"
if not salt_data: return _globals
from __future__ import unicode_literals
self.create_credentials_config() self.create_programs_config()
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
import calendar import operator import sys import warnings from datetime import datetime, time, timedelta from numpy.random import rand
patcher = mock.patch.object(linter_class, '_is_valid_directory', return_value=True) patch_start = patcher.start() self.addCleanup(patcher.stop) return patch_start
import integration import salt.utils
location = self.problem_location(problem_url_name) modx_url = self.modx_url(location, "problem_get") resp = self.client.get(modx_url) return resp
from __future__ import unicode_literals
has_access.return_value = True response = views.all_problem_grade_distribution(self.request, 'test/test/test') self.assertEqual(json.dumps(self.simple_data), response.content)
resp = self.client.post( '/course/bad/course/key/entrance_exam', {}, http_accept='text/html' ) self.assertEqual(resp.status_code, 400)
return dict([(self._AXIS_SLICEMAP[i], a) for i, a in zip( self._AXIS_ORDERS[self._AXIS_LEN - len(axes):], axes)])
return value.upper()
version_guids, id_version_map = self.collect_ids_from_matching_indexes(branch, **kwargs) if not version_guids: return for entry in self.find_structures_by_id(version_guids): for course_index in id_version_map[entry['_id']]: yield entry, course_index
current_hash = get_hash_tuple(full_header_path, full_cython_path, full_gen_file_path)
CONTEXT_SEPARATOR = "\x04"
title_label = _(u"Title")
return Index(result, name=self.name)
tested_connections = ConnectionHandler({}) with mock.patch('django.core.management.base.connections', new=tested_connections): self.cmd.check_migrations()
self.colspecs = kwds.pop('colspecs')
return getattr(self.cost, attr)
answer = 'Option 2' if correct else 'Option 3' selector_element = self.problem_page.q( css='.problem .option-input select') select_option_by_text(selector_element, answer)
del_info = self.run_function('group.info', [DEL_GROUP]) if del_info: self.run_function('group.delete', [DEL_GROUP])
from course_modes.models import CourseMode cert_set = cls.objects.create(course_key=course_key)
self.factory(n_iter=-10000)
return self.book.save(self.path)
if existing['code'] == 200:
'tools.lowdata_fmt.on': True,
for index in [tm.makeIntIndex, tm.makeRangeIndex]:
face = sp.misc.imresize(face, 0.10) / 255.
from __future__ import absolute_import
if self._can_hold_na: return self._isnan.any() else: return False
if len(minions - allowed_minions_from_auth_list) > 0: return False
#def file_list_emptydirs(load):
try: return getattr(self, '_%s_cache' % related_name) except AttributeError: pass
step = min(step, max_time - time.time()) * BLUR_FACTOR
self.release_languages('ar, es-419')
dump_data = self.serial.dumps(data, use_bin_type=True)
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52 CSRF_COOKIE_SECURE = False
from __future__ import absolute_import
DataFrame.from_records([rec], index='begin_time')
pass
SKIP_STEPS = [ INTRO_STEP, ]
self.config['loglevel'] = 'info'
self.record_visit_outline()
path = os.path.expanduser(path)
X, y = _rescale_data(X, y, sample_weight)
stored_file_name = file_storage.save(stored_file_name, uploaded_file)
return False
if ( settings.FEATURES.get('AUTH_USE_SHIB') and course.enrollment_domain and course.enrollment_domain.startswith(SHIBBOLETH_DOMAIN_PREFIX) ): return redirect_with_get('shib-login', request.GET)
return notnull(self).__finalize__(self)
return self.SEPARATOR.join([self.version, self.session_id, self.key_salt, self.signature])
scaler_batch = StandardScaler(with_std=False).fit(X)
self.assertIs(r1.article_set.__class__, r1.article_set.__class__)
self._validate_params(self.n_features, self.input_type) return self
def as_double(self): "Retrieves the Field's value as a double (float)." return capi.get_field_as_double(self._feat.ptr, self._index)
mod_dict[mod] = lambda: None
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
module.system.user_is_staff = True
self.adding = True
import salt.utils import salt.utils.url from salt.exceptions import CommandExecutionError from salt.ext import six
for obj in o2o_type_fields: if hasattr(obj, 'field'): reverse_field = obj.field self.assertTrue(reverse_field.is_relation and reverse_field.one_to_one)
elif not isinstance(r[0], (np.integer, np.floating, np.bool, int, float, bool)): return result
EmptyPromise( lambda: self.q(css="#pre-requisite-course").present, 'Prerequisite course dropdown selector is displayed' ).fulfill()
df = self.read_csv(StringIO(data), header=None, parse_dates=date_spec, date_parser=conv.parse_date_time) self.assertIn('nominal', df)
if isinstance(arr, np.ndarray): pass
cost = SumOfCosts([SumOfOneHalfParamsSquared(), (0., DummyCost())]) model = DummyModel(shapes, lr_scalers=scales) dataset = ArangeDataset(1) decay = 0.95
test_invalid_token("AAAAAAAAAAAAAAAAAAAAAMoazRI7ePLjEWXN1N7keLw=", "padding")
import salt.ext.six as six
if os.path.isfile(cache_file): os.remove(cache_file)
if __grains__.get('os_family') == 'Debian': cfg_file = '/etc/mdadm/mdadm.conf' else: cfg_file = '/etc/mdadm.conf'
{},
COURSE_NAME = 'manual-testing-complete'
import os import re
class BeatleForm(Form): name = CharField()
didx = DatetimeIndex(start='2013/10/01', freq='D', periods=10) pidx = PeriodIndex(start='2013/10/01', freq='D', periods=10)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.cursor().execute('SET CONSTRAINTS ALL IMMEDIATE') self.cursor().execute('SET CONSTRAINTS ALL DEFERRED')
return 'server backend'
if not hasattr(a, 'dtype'): a = np.asarray(a) if not hasattr(b, 'dtype'): b = np.asarray(b)
Y /= Y.sum(axis=1)[:, np.newaxis] loss = -(T * np.log(Y)).sum(axis=1)
(vals, idx, cols), object_state = state
kwargs.pop('_view_name')
if not labels.is_floating() and not labels.is_integer(): return self._get_loc(key, axis=axis)
json = salt.utils.import_json() couchbase.set_json_converters(json.dumps, json.loads)
key = OpenSSL.crypto.load_privatekey( OpenSSL.crypto.FILETYPE_PEM, fic2.read()) bits = key.bits()
tree = etree.fromstring(u'<div>{}</div>'.format(html))
try: return int(value) except (ValueError, TypeError): return 0
results.extend([')' for item in unmatched])
return usage_id.replace(library_key=(usage_id.library_key.replace(version_guid=None, branch=None)))
t_start = datetime.now() sampling(n_population, n_samples) delta = (datetime.now() - t_start) time = compute_time(t_start, delta) return time
self.assertEqual(df.asfreq('D').index.freq, 'D')
train = TFD(which_set='train') topo = train.get_batch_topo(1) assert topo.ndim == 4
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch ensure_in_syspath('../../')
return UserFactory()
if isinstance(student_answer, list): student_answer = student_answer[0]
weights = rand_data.weights g = GaussianMixture(weights_init=weights, n_components=n_components) g.fit(X) assert_array_equal(weights, g.weights_init)
from __future__ import absolute_import import logging import os import os.path import json
if self.byteorder != self._native_byteorder: data = data.byteswap().newbyteorder()
with self.bulk_operations(source_course): source_structure = self._lookup_course(source_course).structure
if sp.issparse(X): centers[c] = X[best_candidate].toarray() else: centers[c] = X[best_candidate] current_pot = best_pot closest_dist_sq = best_dist_sq
rval = -T.mean(log_hx)-T.mean(log_one_minus_hy) rval.name = 'NCE('+X_name+')'
for name in ALL_TREES: yield check_min_weight_fraction_leaf, name, "iris"
sys.stdout.write('Invalid options passed. Please try -h for '
itemList = ['x'] * length for i, v in enumerate(items): itemList[i] = v
if hasattr(searchindex, 'decode'): searchindex = searchindex.decode('UTF-8')
detached_locations = [ course_id.make_usage_key('static_tab', 'StaticTab'), course_id.make_usage_key('course_info', 'updates'), ]
train_with_monitoring_datasets( train_dataset=dataset1, monitoring_datasets=no_monitoring_datasets, model_force_batch_size=False, train_iteration_mode='sequential', monitor_iteration_mode='sequential')
if N == 0: return
if (student_username != request.user.username) and (not staff_access): raise PermissionDenied
from __future__ import unicode_literals
return SurveyForm.create(self.test_survey_name, self.test_form)
rs = np.random.RandomState(1999) n_samples = 20 n_features = 10 X = rs.randn(n_samples, n_features)
return self.__pow__(val)
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
import salt.utils import salt.utils.files import salt.utils.decorators as decorators from salt.exceptions import ( SaltInvocationError, CommandExecutionError, ) from salt.ext.six.moves import range
return "{}#{} {}".format( self.BODY_SELECTOR, self.item_id, selector, )
df = DataFrame({'A': np.arange(20)}, index=np.arange(20))
return self
ps_path = 'C:\\Windows\\SYSTEM32\\WindowsPowerShell\\v1.0\\powershell.exe'
import salt.loader import salt.utils import salt.utils.locales
plt.figure()
sparse_results = sparse_classifier.staged_score(X_test_sparse, y_test) dense_results = dense_classifier.staged_score(X_test, y_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
loss, grad, p = _multinomial_loss_grad(w, X, Y, alpha, sample_weight) sample_weight = sample_weight[:, np.newaxis]
import salt.utils.openstack.swift as suos
exc_info_on_loglevel=logging.DEBUG
'ENABLE_CREDIT_ELIGIBILITY': ENABLE_CREDIT_ELIGIBILITY,
self.assertEqual(result.value, expected) self.assertEqual(tslib.pydt_to_i8(result), expected)
repo = kwargs.get('repo', '') if not fromrepo and repo: fromrepo = repo
import salt.utils
try: manual_enrollment = cls.objects.filter(enrolled_email=email).latest('time_stamp') except cls.DoesNotExist: manual_enrollment = None return manual_enrollment
charged_amt = Decimal(params['ccAuthReply_amount'])
def stop(self): pass
if not properties: properties = {}
self._enroll(course.id, "verified")
print("Computing embedding") X_red = manifold.SpectralEmbedding(n_components=2).fit_transform(X) print("Done.")
call_command("migrate", "migrations", verbosity=0)
vim-enhanced: pkg.installed: - version: 7.4.160-1.el7 - ignore_epoch: True
grid_search.score(X, y) grid_search.predict_proba(X) grid_search.decision_function(X) grid_search.transform(X)
unnorm_predict_proba = np.array([[0.005183999999999999, 0.02194787379972565]]) predict_proba = unnorm_predict_proba / np.sum(unnorm_predict_proba) assert_array_almost_equal(clf.predict_proba(X_test), predict_proba)
class Channel(object): @staticmethod def factory(opts, **kwargs): ttype = 'zeromq'
def get_group_permissions(self, obj=None): return set()
header = "REMOTE_USER" force_logout_if_no_header = True
DATE_INPUT_FORMATS = [
if encrypted is not False: encrypted = postgres._DEFAULT_PASSWORDS_ENCRYPTION password = postgres._maybe_encrypt_password(name, password, encrypted=encrypted)
mock_email_change.side_effect = [ValueError, "mock value error thrown"] self.client.login(username=self.user.username, password=self.test_password) old_email = self.user.email
return {}
BROKER_POOL_LIMIT = 0 BROKER_CONNECTION_TIMEOUT = 1
def handle(self, *args, **options): return reverse('some_url')
if isinstance(config[mod], dict): del config[mod]['enabled'] else: self._remove_list_item(config[mod], 'enabled')
idx = pd.DatetimeIndex(values, name='xxx') tm.assert_series_equal(idx.value_counts(), exp)
n_folds = 5 n_iter = 1000
from salt.modules import nfs3
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
return len(self._max_scores_updates)
for course in courses: self.enroll(course.id)
with salt.utils.fopen(full, 'r') as _fh: for line in _fh: if line.startswith('#'): lines.append(line) continue
REST_FRAMEWORK,
xqueue_interface = XQueueInterface("http://example.com/xqueue", Mock())
config.groups[1].remove() config.groups[0].name = "First Group" config.save()
return self._batch_size(is_numeric=False, batch=batch)
if os.path.isfile(join(dirname(abspath(__file__)), 'private.py')):
resp = self.client.get_json( get_url('xblock_view_handler', self.vert_loc, kwargs={'view_name': 'container_preview'}) ) self.assertEqual(resp.status_code, 200)
child_pids = p1_group.get_children(recursive=True)
'openedx.core.djangoapps.common_views',
def handle_error():
'auto_log_stacks': get_config_value('auto_log_stacks'),
image = Image.open(file) image.verify()
return self.data_types_reverse[data_type]
self.certificates_section.click_generate_certificate_exceptions_button() self.certificates_section.wait_for_ajax()
self.r = models.Reporter.objects.create(first_name='John', last_name='Smith')
MIN_PRICE = 1438
X, y = make_hastie_10_2(n_samples=20, random_state=1)
from __future__ import unicode_literals
data = slave if core is None else {core: {'data': slave}}
for name, value in tb_frame.f_locals.items(): cleansed[name] = CLEANSED_SUBSTITUTE
return self.attempts > 0
class SchoolManager(models.Manager): def get_queryset(self): return super(SchoolManager, self).get_queryset().filter(is_public=True)
self.init_queries.append("CREATE TABLE inspector_ignored (path CHAR(4096))") self.init_queries.append("CREATE TABLE inspector_allowed (path CHAR(4096))")
return reverse( self.namespaced_url, kwargs={ 'course_id': self.course.id, 'username': username } )
result = query(params) return result['InstanceId']
return UserPreference.get_value(user, LANGUAGE_KEY)
MONGO_PORT_NUM = int(os.environ.get('EDXAPP_TEST_MONGO_PORT', '27017')) MONGO_HOST = os.environ.get('EDXAPP_TEST_MONGO_HOST', 'localhost')
return None
from salt.modules import defaults
if datetime: values = lib.maybe_convert_objects(values, convert_datetime=datetime)
shifted = self.ts.tshift(1) unshifted = shifted.tshift(-1)
TestScenario((self.demo_course,), "Empty"), TestScenario((self.html_course,), "Intro to &lt;html&gt;"),
grad_shared = sharedX(zv) z_shared = sharedX(zv)
import salt.utils.systemd import salt.utils.odict as odict
self._test_group_id_passed_to_user_profile( mock_request, True, self.moderator, profiled_user, requested_cohort.id, pass_group_id )
y = test['y'][:, 0] - 1 assert y.shape == (8000,)
import salt.utils
info.insert(2, '')
import integration from salt.output import display_output import salt.config
result = first.copy() result.update(second) return result
confirm_prompt(self, require_notification=False) self.wait_for_ajax()
idx = TimedeltaIndex([1e14, 'NaT', pd.NaT, np.NaN])
expected = x * np.nan expected[count_x >= max(min_periods, 1)] = exp assert_equal(mean_x, expected)
return self.q(css=self._bounded_selector('a.delete-button'))
log = logging.getLogger(__name__)
try: ds = gdal.DataSource(data_source) except gdal.GDALException as msg: raise CommandError(msg)
for key, func in six.iteritems(self.loader): break self.assertNotEqual(self.loader._dict, {})
import salt.utils.jid import salt.returners
if dep in inspected: continue inspected.append(dep)
expected = ts[:3]
server.ping()
p, h = max_pool_c01b(z, (pool_rows, pool_cols), top_down = t) func = function([z, t], [p, h], mode = mode_without_gpu)
self._click_button('basic_tab')
@property def is_staff(self): return self.is_admin
checkpoint = VerificationCheckpoint(course_id=self.course_key, checkpoint_location=self.reverification_location) checkpoint.save()
self.assertAcceptEquals( 'rel-ter;q=1.0, rel-ter;q=0.5', self.process_request(accept='rel-ter;q=1.0, rel;q=0.5') )
return { 'cl': cl, 'show_result_count': cl.result_count != cl.full_result_count, 'search_var': SEARCH_VAR }
import integration
HAS_LIBS = True try:
for i, j in product([0, 1], repeat=2): metric([i], [j])
with tm.assertRaises(UndefinedVariableError): df.query('@a > b > c', engine=engine, parser=parser)
return self.lcp.done
geos_version = GEOSFuncFactory('GEOSversion', restype=c_char_p)
if GlobalStaff().has_user(caller): return
self.go_to_tab_and_assert_problem(2, self.problem2_name)
from __future__ import unicode_literals
if center and scale: data_x -= 127.5 data_x /= 127.5 elif center: data_x -= 127.5 elif scale: data_x /= 255.
with self.assertRaises(ValueError): with transaction.atomic(using='default'): marty.book_set.set([pro, dive])
for freq in ['Y', 'M', 'foobar']: self.assertRaises(ValueError, lambda: dti.round(freq))
i10 = pd.date_range(i30[0], i30[-1], freq='10T')
self._test_email_address_failures(SESAddressBlacklistedError(554, "Email address is blacklisted"))
path_info = get_bytes_from_wsgi(environ, 'PATH_INFO', '/') return path_info.decode(UTF_8)
try: self.assertTrue(nanops._USE_BOTTLENECK)
if values_passed and not values_multi and not table.empty: table = table[values[0]]
self.factory().fit(X5, Y5, intercept_init=0)
from __future__ import absolute_import import os import logging import json import salt.utils.http from salt.exceptions import CommandExecutionError
'edx-ui-toolkit/js/utils/global-loader.js', 'edx-ui-toolkit/js/utils/string-utils.js', 'edx-ui-toolkit/js/utils/html-utils.js',
assert x.ndim == 4 axes = self.input_space.axes assert len(axes) == 4
user = User.objects.get(username=self.USERNAME) request = RequestFactory().get('/url') request.user = user account_settings = get_account_settings(request)
data = {'changed': False, 'files': {'changed': []}, 'backend': 'roots'}
self._cache = {}
return '{}_{}'.format(block_type, block_ref)
self.metadata = handler.read_metadata(self.cname)
return get_random_string()
with self.assertRaises(NotImplementedError): send_refund_notification(self.course_enrollment, [1, 2, 3])
call_command('seed_permissions_roles', unicode(self.course_id))
return {"result": "inclusion_explicit_no_context_from_template - Expected result: %s" % arg}
course_key = self.make_course_key(org, course, run) if course_key in self.mappings and self.mappings[course_key].has_course(course_key): raise DuplicateCourseError(course_key, course_key)
for student in students[0:MAX_SCREEN_LIST_LENGTH + 1]: results.append({ 'name': student['student__profile__name'], 'username': student['student__username'], })
from __future__ import absolute_import import copy import errno import fnmatch import hashlib import logging import os import shutil from datetime import datetime from salt.exceptions import FileserverConfigError
default_axes = ('b', 0, 1, 'c')
import salt.utils from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.modules.freebsdports import _normalize, _options_file_exists
ret = {} for node in items['servers']: ret[node['name']] = {} for item in node: value = node[item] ret[node['name']][item] = value return ret
coef = coef.ravel()
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
self.assertTrue(has_access(self.beta_tester, 'load', self.content, self.course.id))
resp = json.loads(self.call_event('export_resources', {}).content)
self.filter(id=entry_id).delete()
session_user_id = SafeSessionMiddleware.get_user_id_from_session(request)
return getattr(super(BulkAssertionTest, self), 'assert' + assertion_name)(*args, **kwargs)
return [('127.0.0.1:11211 (1)', {})]
self.assertNumContains(sql, 'tbl_tbsp', 1) self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)
columns = {} for idx, col_name in enumerate(response['Titles']): columns[idx] = col_name
values = Series([u('foo'), u('fooo'), u('fooooo'), np.nan, u( 'fooooooo')])
self.assertEqual(len(mail.outbox), 1) self.assertEqual(mail.outbox[0].to[0], self.instructor.email)
return mini_batch
dive.editor = chris dive.save()
if not os.path.exists(path): return 'File/Folder not found: {0}'.format(path)
code = np.empty((n_samples, n_components)) slices = list(gen_even_slices(n_samples, _get_n_jobs(n_jobs)))
from __future__ import absolute_import import logging
'pillar_opts': bool,
gentoo_service.__grains__ = {} gentoo_service.__salt__ = {} gentoo_service.__context__ = {} gentoo_service.__opts__ = {}
attempt = self._submit_attempt(request.user, face_image, photo_id_image, initial_verification)
from __future__ import absolute_import import logging import json
n_faces = 5 rng = check_random_state(4) face_ids = rng.randint(test.shape[0], size=(n_faces, )) test = test[face_ids, :]
self.assertEqual(d1, d2) self.assertNotEqual(d1.keys(), d2.keys())
jid_dir_name = jid_file.rpartition('/')[2] self.assertEqual(jid_dir_name, 'jid')
IS_WIN = win_ntp.__virtual__()
mat = ma.masked_all((2, 3), dtype=bool) frame = DataFrame(mat, columns=['A', 'B', 'C'], index=[1, 2])
USE_I18N = True
self.assertEqual(timesince(self.t, self.t), '0\xa0minutes')
super(CacheBackedAuthenticationMiddleware, self).process_request(request)
err = SearchIndexingError mock_index_dictionary.return_value = err
>> mkdf(5,3,data_gen_f=lambda r,c:randint(1,100))
pieces = modulename.split('.') str_e = str(e) found = True in [piece.find(str(e)) != -1 for piece in pieces]
continue
classifier = OneVsRestClassifier(svm.SVC(kernel='linear', probability=True, random_state=random_state)) y_score = classifier.fit(X_train, y_train).decision_function(X_test)
msg = "Wait for status to be {}".format(message) self.wait_for_element_visibility(status_selector, msg)
if name[-1] == '/' and name != '/': name = name[:-1]
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=False).visit()
__func_alias__ = { 'list_': 'list' }
_check_align(self.ts[:-5], self.ts[:0], how=kind, method=meth) _check_align(self.ts[:-5], self.ts[:0], how=kind, method=meth, limit=1)
TASK_TRIGGER_EVENT = 0 TASK_TRIGGER_TIME = 1 TASK_TRIGGER_DAILY = 2 TASK_TRIGGER_WEEKLY = 3 TASK_TRIGGER_MONTHLY = 4 TASK_TRIGGER_MONTHLYDOW = 5 TASK_TRIGGER_IDLE = 6 TASK_TRIGGER_REGISTRATION = 7 TASK_TRIGGER_BOOT = 8 TASK_TRIGGER_LOGON = 9 TASK_TRIGGER_SESSION_STATE_CHANGE = 11
self.assert_numpy_array_equal(rng.asi8, rng_eastern.asi8)
self.assertIn( 'Service not found', self.run_function('service.show', ['spongebob']))
create_collection_index(self.collection, '_id.category', background=True)
log.error("etcd: {0}".format(err)) raise
pass
try: res = FuncNode(node.func.id) except ValueError: raise
self.assertRaises(TypeError, store.append, 'df_unimplemented', df)
self.assertTrue(com.is_integer(np.timedelta64(1, 'D')))
self.course_db.update( { (block_type, block_id): _make_course_db_entry( parent_type, parent_id, block_id, idx, child_type, child_base ) } )
return role
BLACKLIST = [ 'CompositeLayer',
self.assertFalse( self.run_function('pkgutil.is_installed', ['spongebob']))
if not dummy_na and len(levels) == 0: return get_empty_Frame(data, sparse)
$ ./manage.py lms resubmit_error_certificates
from mock import call
{{ salt['cmd.run']('whoami') }} {{ salt.cmd.run('whoami') }}
url( r'^v1/blocks/', BlocksInCourseView.as_view(), name="blocks_in_course" ),
rm_tok = True
train, valid, test, transfer = utlc.load_ndarray_dataset("ule", normalize=True, transfer=True) assert train.shape[0] == transfer.shape[0]
if isinstance(key, tuple) and isinstance(ax, MultiIndex): return True
import logging
HAS_KEYSTONE = False try: from keystoneclient.v2_0 import client as kstone #import keystoneclient.apiclient.exceptions as kstone_exc HAS_KEYSTONE = True except ImportError: pass
photo_id_url = ( self.image_url("photo_id") if copy_id_photo_from is None else self.image_url("photo_id", override_receipt_id=copy_id_photo_from.receipt_id) )
'limits': { 'CPU': 1, },
self.assertInUnsucceededCourseActions(destination_course_key)
log = logging.getLogger(__name__)
continue
self.assertTrue(BulkEmailFlag.feature_enabled(course_id))
ret.__opts__ = {} ret.__salt__ = {}
import salt.utils
ret = self.run_function('beacons.enable') self.assertTrue(ret['result'])
f = plt.figure(figsize=(7, 5)) for index, image_index in enumerate(uncertainty_index): image = images[image_index]
import logging
continue
response_element.set("answer", unicode(answer))
__virtualname__ = 'kmod'
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
columns = self._maybe_make_multi_index_columns(columns, self.col_names)
self.assertEqual(self.do_email_validation(self.user.email), 'Old email is the same as the new email.')
dis = euclidean_distances(X)
return os.lchown(path, uid, gid)
if not os.path.isfile(config): try: with salt.utils.fopen(config, 'w+') as _fh:
from __future__ import absolute_import from __future__ import print_function import sys import getopt import re import email.utils import datetime
if mode: current_umask = os.umask(0o77)
raise
import integration
course_overview = CourseOverview.get_from_id(course.id)
db_table = 'django_comment_client_role'
data = {'var': '\xf2'} response = self.client.get('/get_view/', data)
listen_for_course_publish(self, self.course.id)
layers = [self.visible_layer] + self.hidden_layers
product = partial(reduce, operator.mul) return sum(product(len(v) for v in p.values()) if p else 1 for p in self.param_grid)
expected = Series([2, 5], index=['X', 'Y'], name='B') + 1 assert_series_equal(b, expected)
def initial_django(): return 'django'
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')
- volumes: - /usr/local/etc/ssl/certs/example.crt: bind: /etc/ssl/certs/com.example.internal.crt ro: True
missing = [] for key in required_keys: if params.get(key) is None: missing.append(key)
import logging
result = df.sortlevel(0) self.assertTrue(result.index.lexsort_depth == 3)
original_modified = tag.modified tag.value = "barfoo" tag.save() self.assertEquals(tag.value, "barfoo") self.assertNotEqual(original_modified, tag.modified)
from unit.modules.boto_lambda_test import BotoLambdaTestCaseMixin, TempZipFile
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
import salt.utils.event
if self.edx_video_id: video_profile_names = context.get("profiles", ["mobile_low"])
'idset': idset,
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21')
self.course_outline.select_advanced_tab()
return library.location.library_key
((ax0_indexer is None and blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice.step == 1) or (np.diff(ax0_blk_indexer) == 1).all()))
self.assertEqual(url_path, '/embargo/blocked-message/courseware/default/')
expected = self.frame.cov() result = self.frame.cov(min_periods=len(self.frame))
return HttpResponse(content="")
__virtualname__ = 'raid'
context = self._get_sample_plain_context() context['course_image_url'] = "/location/of/course/image/url" return context
from salttesting import TestCase from salttesting.mock import ( MagicMock, mock_open, patch, ) from salt.modules import hosts from salt.ext.six.moves import StringIO
__func_alias__ = { 'set_': 'set' }
if self.presort == 'auto' and issparse(X): presort = False elif self.presort == 'auto': presort = True
self.video.show_captions()
lim = 8
request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"]) self.assertEqual(request["parameters"]["user_mailing_address"], "")
activation_key = create_account(self.USERNAME, self.PASSWORD, self.EMAIL) activate_account(activation_key)
clf.partial_fit(X3, Y3)
pass
from __future__ import absolute_import
import yaml
import salt.states.environ as envstate import salt.modules.environ as envmodule
tolerance = self._convert_tolerance(tolerance)
first_iterations = 0 for index, raw_author in enumerate(raw_authors): self.assertEqual(normal_authors[index], raw_author) first_iterations += 1
course_about_accessor = lambda object, field_name: CourseDetails.fetch_about_attribute(object.id, field_name)
elif access_point == self.ENROLLMENT_ACCESS_POINT: message_dict = messages.ENROLL_MESSAGES elif access_point == self.COURSEWARE_ACCESS_POINT: message_dict = messages.COURSEWARE_MESSAGES
y = iris.target
self.assertIs(t1.entry_set.__class__, t1.entry_set.__class__) self.assertIs(e1.topics.__class__, e1.topics.__class__)
try: import gen_rst except: pass
clf = svm.SVC(class_weight={1: 0.1}) clf.fit(X, Y) assert_array_almost_equal(clf.predict(X), [2] * 6)
X, y = datasets.make_classification(n_samples=2000, n_features=10, n_informative=3, n_redundant=0, n_repeated=0, shuffle=False, random_state=0)
mixed = Series(['a_b', NA, 'asdf_cas_asdf', True, datetime.today(), 'foo', None, 1, 2.])
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, username=username, email=email, staff=staff).visit()
network_spec = _add_new_network_adapter_helper(network_adapter_label, network_name, adapter_type, switch_type, container_ref) adapter_mapping = _set_network_adapter_mapping(devices['network'][network_adapter_label]) device_specs.append(network_spec) nics_map.append(adapter_mapping)
return environ.setdefault(key, value)
else: if not s.is_table: raise ValueError( 'can only remove with where on objects written as tables') return s.delete(where=where, start=start, stop=stop)
ransac_estimator.fit(X, y)
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
regex = re.compile(pat, flags=flags) f = lambda x: len(regex.findall(x)) return _na_map(f, arr, dtype=int)
random_state = check_random_state(est.random_state) seed = random_state.randint(0, np.iinfo(np.int32).max)
assert_raises(ValueError, binarizer.transform, sparse.csc_matrix(X))
User.objects.create_user('alice', 'alice@example.com')
stream.send('Server-side exception handling payload')
with modulestore().bulk_operations(course_key): course = modulestore().get_course(course_key, depth=depth) if course: return course else: raise Http404("Course not found.")
self.assertEqual(len(response['results']), expected_length) unused_class = self.create_badge_class(check_course, slug='unused_slug', issuing_component='unused_component')
self.assertEqual( self.run_function('pip.list', ['pip'], bin_env=venv_dir), {'pip': '6.0'} )
return missing.interpolate_1d(index, x, method=method, limit=limit, limit_direction=limit_direction, fill_value=fill_value, bounds_error=False, **kwargs)
from pandas import Series return Series(self._data.get_dtypes(), index=self._info_axis, dtype=np.object_)
self.get_select_option(from_box, str(self.peter.id)).click() self.get_select_option(from_box, str(self.lisa.id)).click()
check_is_fitted(self, 'estimator_') return self.estimator_.predict(X)
matched_buttons = [btn for btn in buttons if btn.text == component_type]
log_proba = all_log_proba[0]
odd_ids = [user.pk for user in User.objects.all() if user.pk % 2] self.assertEqual(len(odd_ids), 0)
self.xblock_keys = [self.course.location]
re.compile(r'^Course Outline \|'): [ "js/base", "js/models/course", "js/models/location", "js/models/section"],
return u'{microsite_key}: {organization}'.format( microsite_key=self.microsite.key, organization=self.organization )
key = Timestamp(key, tz=tz)
if not bytes: return self._update_unget_history(len(bytes)) self.position -= len(bytes) self._leftover = b''.join([bytes, self._leftover])
values = np.empty(len(self), dtype=np.bool_) values.fill(False) return values
try: import exceptions except ImportError: pass
Push.alert( data=push_payload, channels={"$in": push_channels}, where={"deviceType": "android"}, )
for ginput, expected in self.GOOD_DISPATCH_INPUTS: self.assertEquals(self.xmodule.parse_lti_2_0_handler_suffix(ginput), expected)
url_user_invoice_preference = reverse('get_user_invoice_preference', kwargs={'course_id': self.course.id.to_deprecated_string()})
pass
from __future__ import unicode_literals
s1 = Series(date_range('20120101', periods=3)) s2 = Series(date_range('20120102', periods=3)) expected = Series(s2 - s1)
import logging
if not sqltype.timezone: return datetime return DatetimeTZDtype
unique_together = ('username', 'course', 'provider') get_latest_by = 'created'
return [x for sub in seq for x in sub]
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
ind2 = self.index.set_levels(new_levels, level=[0, 1]) assert_matching(ind2.levels, new_levels) assert_matching(self.index.levels, levels)
values = pd.Categorical([1, 2, 3, 1, 1, 3], ordered=True)
html_problem_semantics = [ "codeparam", "responseparam", "answer", "script", "hintgroup", "openendedparam", "openendedrubric", ]
self.save_and_verify_discussion_topics(key=self.inline_key)
result = func(Series([]), 50, min_periods=min_periods) tm.assert_series_equal(result, Series([]))
tz_range = pd.date_range('20130101', periods=3, tz='US/Eastern') tz_naive = tz_range.tz_convert('utc').tz_localize(None)
url = EcommerceService().payment_page_url() self.assertEqual(url, 'http://ecommerce_url/test_basket/')
pan = web.get_data_yahoo('XOM', '2013-01-01', '2013-12-31', interval='m') self.assertEqual(len(pan), 12)
jid_dir, jid_file = self._make_tmp_jid_dirs(create_files=False)
_ignore_names = ['tz_localize']
td = TimedeltaIndex(td)
setattr(self, hyperparameter.name, np.exp(theta[i:i + hyperparameter.n_elements])) i += hyperparameter.n_elements
result = f.clean('1:30 PM 21-12-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
from __future__ import unicode_literals
result = func(idx) exp = func(idx.values) self.assertIsInstance(result, np.ndarray) tm.assertNotIsInstance(result, Index)
self.assertEqual(trans_real.to_language('en_US'), 'en-us') self.assertEqual(trans_real.to_language('sr_Lat'), 'sr-lat')
return ret
pd.plot = None pd.save()
self.timer_stop = Event() self.timer = CacheTimer(self.opts, self.timer_stop) self.timer.start() self.running = True
from __future__ import unicode_literals
with open(Env.METRICS_DIR / "pep8", "w") as f: f.write(violations_count_str + '\n\n') f.write(violations_list)
return
rval = -(self.beta * T.dot(state, self.bias))
GIT_REPO_DIR = ENV_TOKENS.get('GIT_REPO_DIR', '/edx/var/edxapp/course_repos') GIT_IMPORT_STATIC = ENV_TOKENS.get('GIT_IMPORT_STATIC', True)
return self.q(css='div.csh_hint_text').attrs('student_answer')
if 'add_{0}'.format(instance) not in vmconfig['changed']: vmconfig['changed']['add_{0}'.format(instance)] = []
member = models.Member.objects.get(name='test') self.assertGreater(member.birthdate, now - error_margin) self.assertLess(member.birthdate, now + error_margin)
raise self.retry(exc=exc, countdown=countdown, max_retries=config.max_retries)
self.redefine_option_problem(problem_url_name) self.render_problem('u1', problem_url_name) self.check_state('u1', descriptor, 2, 2, 1)
return REQUEST_CACHE.request
expiration_datetime_custom.short_description = "Upgrade Deadline"
return len(data)
CourseEnrollmentFactory(user=other_user, course_id=self.courses[0].id)
pygments_style = 'sphinx'
with self.assertRaises(forms.ValidationError): f.clean('21.12.2010')
import logging
if connections[self.using].features.supports_transform: self.geo_field = self.geometry_field() else: transform = False
bulk_ops_record.dirty = False
pass
if not settings.FEATURES['ADVANCED_SECURITY']: return False min_days_between_reset = settings.ADVANCED_SECURITY_CONFIG.get( 'MIN_TIME_IN_DAYS_BETWEEN_ALLOWED_RESETS' ) return min_days_between_reset
self.page.visit() config = self.page.experiment_group_configurations[0]
if self.orig is not None: result = take_1d(result, self.orig.cat.codes)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
assert_raises(ValueError, sample_without_replacement, -1, 5) assert_raises(ValueError, sample_without_replacement, 5, -1)
if not array_equivalent(l, r, strict_nan=strict_nan): diff += 1
raise SaltClientError('Connection to master lost')
SECRET_KEY = "very_secret_bok_choy_key"
import integration import salt.loader import salt.config import salt.utils from salt.state import HighState from salt.utils.pydsl import PyDslError
response = requests.delete(reset_config_url) self.assertEqual(response.status_code, 200)
return False
myiterator = d.iterator(mode=i, batch_size=b, num_batches=n, data_specs=self._flat_data_specs, return_tuple=True, rng=sd)
return _graph_connected_component(graph, 0).sum() == graph.shape[0]
def get_readonly_fields(self, request, obj=None):
curr_indices = self.len_indices[curr_len][curr_pos:curr_pos + curr_batch_size]
step = min(step or 1, timeout) * BLUR_FACTOR
y4 = np.array([1, 1, 1, 1, 1, 1, 1, 1, 2])
with tm.assertRaisesRegexp(ValueError, "^Index length"): SparseDataFrame(self.frame.values, index=self.frame.index[:-1])
from logging import getLogger
self.dummy_leaf_ = _CFNode(threshold, branching_factor, is_leaf=True, n_features=n_features) self.dummy_leaf_.next_leaf_ = self.root_ self.root_.prev_leaf_ = self.dummy_leaf_
ASSET_XML_PATH = COURSE_DATA_DIR / AssetMetadata.EXPORTED_ASSET_DIR / AssetMetadata.EXPORTED_ASSET_FILENAME
(['professional'], 'professional'), (['no-id-professional'], 'no-id-professional')
_fulfill_content_milestones( user, course_id, descriptor.location, )
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath, MockWraps from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch ensure_in_syspath('../')
'clone']
return self.skip_entrance_exam_button.click()
return cursor.lastrowid
non_int_round_dict = {'col1': 1, 'col2': [1, 2]} with self.assertRaises(TypeError): df.round(non_int_round_dict)
tm._skip_if_no_scipy()
for k, v in sorted(results.items()): data[k] = v
continue
raise NotImplementedError('subclasses of BaseDatabaseOperations may require a no_limit_value() method')
if recursive: cmd = '{0} -r'.format(cmd) if depth: cmd = '{0} -d {1}'.format(cmd, depth)
df_original = df_original.set_index('Date') df_reordered = df_original.sort_values(by='Quantity')
return element.is_displayed() and all(size > 0 for size in element.size.itervalues())
asset_key = asset_metadata_list[0].asset_id course_key = asset_key.course_key
super(GroupConfigurationsListHandlerTestCase, self).setUp()
email, password = self._create_unique_user()
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug=CourseMode.HONOR) data = certs_api.get_certificate_header_context(is_secure=True)
self.setup_mongo_course(course_edit_method='XML') result_fragment = self.module.render(STUDENT_VIEW, context=self.default_context) self.assertNotIn('View Unit in Studio', result_fragment.content)
if 'pinned' not in thread.attributes: thread['pinned'] = False
if not isinstance(identity, list): identity = [identity]
self.assertEqual(resp.status_code, 200)
return '-%s' % self.get_date_field() if self.ordering is None else self.ordering
user = UserFactory.create() self.obj.user = user self.assert_user_has_object_permission(user, True)
with check_mongo_calls(mongo_calls): _accessible_courses_summary_list(self.request)
subsuite_index, subsuite, failfast = args runner = RemoteTestRunner(failfast=failfast) result = runner.run(subsuite) return subsuite_index, result.events
startup_info = win32process.STARTUPINFO() startup_info.dwFlags = win32con.STARTF_USESTDHANDLES startup_info.hStdInput = stdin_read startup_info.hStdOutput = stdout_write startup_info.hStdError = stderr_write
ret = self.run_state( 'file.directory', name=tmp_dir, follow_symlinks=True, user=user, group=group, recurse=['user', 'group'] ) self.assertSaltTrueReturn(ret)
_('Git Commit'), _('Last Change'), _('Last Editor')],
X_FRAME_OPTIONS = 'ALLOW'
if not (self.inverse_match is not bool(self.regex.search( force_text(value)))): raise ValidationError(self.message, code=self.code)
if hasattr(other, 'name'): return self.name == other.name return self.name == other
tm._skip_if_no_pathlib()
self.check_response('done_0', 'done-unmarked') self.check_response('done_1', 'done-unmarked')
corr_x_x = corr(x, x)
self.coach = AdminFactory.create() role = CourseCcxCoachRole(self.split_course.id) role.add_users(self.coach)
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape)
BULK_EMAIL_DEFAULT_RETRY_DELAY = 30
return len(self.q(css='.team-member'))
d = self.ts.index[0] - datetools.bday self.assertRaises(KeyError, self.ts.__getitem__, d)
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor', grade=default_grade )
for idxr, getitem in [(lambda x: x.ix, False), (lambda x: x.loc, False), (lambda x: x, True)]:
pass
elapsed += time.clock() - _s gc.enable() result[kind] = (elapsed / iterations) * 1000
CourseEnrollment.enroll(self.user, course.id)
if self.index.lexsort_depth < 2: selfsorted = self.sortlevel(0) else: selfsorted = self
(ModuleStoreEnum.RevisionOption.published_only, 'assertOLXIsDraftOnly'), (ModuleStoreEnum.RevisionOption.all, 'assertOLXIsDeleted'), (None, 'assertOLXIsDeleted'),
import salt import salt.utils.fsutils from salt.modules import btrfs from salt.exceptions import CommandExecutionError
attrs['__config__'] = True attrs['__flatten__'] = False attrs['__config_name__'] = None
self.assertQuerysetEqual( Article.objects.filter(headline__endswith='4').iterator(), ['Article 4'], transform=attrgetter('headline'))
for word in self.student_words: temp_all_words[word] = temp_all_words.get(word, 0) + 1
prod = np.dot(W1, W2) pv = make_viewer(prod.T) return pv
scikit_classifier_results = [] scikit_regressor_results = []
return course_metadata_utils.display_name_with_default(self)
self.assertTrue(self._has_changes(parent.location)) self.assertTrue(self._has_changes(child.location))
import salt.utils import salt.utils.cloud as suc from salt.exceptions import SaltInvocationError
signals.m2m_changed.send( sender=self.through, action='post_add', instance=self.instance, reverse=self.reverse, model=self.model, pk_set=new_ids, using=db, )
FavoriteDrinksFormSet = formset_factory(FavoriteDrinkForm, formset=BaseFavoriteDrinksFormSet, extra=3)
return self.context["cc_requester"]["id"] in obj.get("abuse_flaggers", [])
limited_epoch_train(os.path.join(pylearn2.__path__[0], "scripts/autoencoder_example/hcae.yaml"))
def __getstate__(self): return {"valid": self.valid, "value": self.value}
return self.course_id.to_deprecated_string()
if hang_closing: yield start, "E133 closing bracket is missing indentation"
if mappings: for key in mappings.iterkeys(): if re.match(key, hostname): return mappings[key]
from __future__ import absolute_import import salt.runner
rng = np.random.RandomState(seed) X = rng.randn(10, 10) Xcsr = csr_matrix(X)
return self.integer_field_ranges[internal_type]
len_m1 = 473504.769553813 len_m2 = 4617.668
return self.sm_ols.params
import salt.ext.six as six
from pandas.core.config import get_option encoding = get_option("display.encoding") return self.__unicode__().encode(encoding, 'replace')
time.sleep(1) continue
return xblock
if category not in ['html', 'problem', 'video']: return HttpResponseBadRequest( "Category '%s' not supported for Libraries" % category, content_type='text/plain' )
return
loader = MigrationLoader(connection) graph = loader.graph targets = graph.leaf_nodes() plan = [] seen = set()
User.objects.create_user(username='J\xfalia', password='qwerty') call_command('changepassword', username='J\xfalia', stdout=self.stdout)
start = self._start + self._step * start stop = self._start + self._step * stop step = self._step * step
encoded_data = encoded_data[1:]
err = Exception mock_index_dictionary.return_value = err
return {}
req = self._get_GET_no_csrf_cookie_request() resp = token_view(req) token = get_token(req) self.assertIsNotNone(token) self._check_token_present(resp, token)
obj = Empty() obj.__class__ = self.__class__ obj.__dict__ = self.__dict__.copy() return obj
self._fit(X) return self
new_url = _urlparse(url) if not new_url.path:
if not os.access(cwd, os.R_OK): cwd = '/' if salt.utils.is_windows(): cwd = os.tempnam()[:3]
return cls._do_reindex(modulestore, library_key)
self.assertFalse(has_access(self.non_staff_user, 'load', self_paced_course))
from __future__ import unicode_literals
unmodified_overview = CourseOverview.get_from_id(course.id) self.assertEqual(unmodified_overview.version, 11)
if isinstance(cmd, str): funs_to_check = [cmd] else: funs_to_check = cmd for fun in funs_to_check: if re.match(blacklisted_module, fun): return True
return self.get_db_prep_value(value, connection=connection, prepared=False)
key = np.array([0, np.nan, 1], dtype='O') na_sentinel = -1
from __future__ import absolute_import
from __future__ import print_function from __future__ import absolute_import
if val == val and val != %(nan_val)s: nobs[lab, 0] += 1 if val > maxx[lab, 0]: maxx[lab, 0] = val
else: return CommitOnSuccessManager(using, read_committed)
self.q(css='div.problem .clarification:nth-child({index}) i[data-tooltip]'.format(index=index + 1)).click()
except: pass
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
self.assertEqual(len(Package.objects.values('screening__movie__pk', 'screening__movie__title')), 2)
if purge: try: sid = getUserSid(name) win32profile.DeleteProfile(sid) except pywintypes.error as exc: (number, context, message) = exc
from __future__ import print_function
action_name = ugettext_noop('emailed') visit_fcn = perform_delegate_email_batches return run_main_task(entry_id, visit_fcn, action_name)
return False
TreeClassifier = CLF_TREES[name] _y = np.vstack((y, np.array(y) * 2)).T
from salt.modules import incron
relative_path = 'just_a_test.jpg' absolute_path = base_url + relative_path
self.assertEqual(self.func(None), [])
set_inventory_base_uri_default(__opts__, kwargs)
try: import psutil HAS_PSUTIL = True except ImportError: HAS_PSUTIL = False
cmd = '{0} add -exist {1} {2}'.format(_ipset_cmd(), set, cmd) out = __salt__['cmd.run'](cmd, python_shell=False)
response = copy(obj_b)
self.user = User.objects.create_user(self.uname, self.email, self.password)
'subscription_id': course_overview.clean_id(padding_char='_'),
TaggedItem.objects.create(content_object=self.quartz, tag="shiny") TaggedItem.objects.create(content_object=self.quartz, tag="clearish")
user_partitions = UserPartitionList( help=_("The list of group configurations for partitioning students in content experiments."), default=[], scope=Scope.settings )
REQUIRE_DEBUG = False
from __future__ import unicode_literals
data = models.CharField(max_length=10) class Meta: abstract = True
cache.clear() CertificateGenerationConfiguration.objects.create(enabled=True) self.client.login(username=self.global_staff.username, password='test')
role = __salt__['keystone.role_get'](name=name, profile=profile, **connection_args)
expected_fields = CourseSummary.course_info_fields + ['id', 'location'] return all([hasattr(course_summary, field) for field in expected_fields])
import salt.utils from salt.exceptions import CommandExecutionError
self.deferred_sql.extend(self._model_indexes_sql(model))
from __future__ import absolute_import import datetime import math import sys import logging import copy
if 'datetime' in typs or 'datetimetz' in typs or 'timedelta' in typs: return _concat_datetime(to_concat, axis=axis, typs=typs)
fstats_orig = os.stat(path_test)
try: from pyroute2.ipdb import IPDB HAS_PYROUTE2 = True except ImportError: HAS_PYROUTE2 = False
__proxyenabled__ = ['fx2']
__virtualname__ = 'service'
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
return newey_west(m, new_max_lags, nobs, df)
from __future__ import unicode_literals
url = reverse('verify_student_start_flow', kwargs={'course_id': unicode(course_id)}) self.assertRedirects(response, url)
user = User.objects.get(email=email) self.assertFalse(user.is_active) return user
from __future__ import unicode_literals
models.OriginalRasterField = models.RasterField
return self.q(css='{} .request-response-error'.format(self.EE_CONTAINER)).first
NumpyDocString.__init__(self, docstring, config=config)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
assert_raises(ValueError, auc, [0.0], [0.1])
return capi.get_intring(self.ptr, index - 1)
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition triggers = task_definition.Triggers
if not exists(zpool): ret[zpool] = 'storage pool does not exist' return ret
loader.build_graph() self.assertEqual(num_nodes(), 5)
self.assertEqual(self.func(None), [base.W002])
self._block_relations = pruned_block_relations
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
self._pending_operations = defaultdict(list)
for student in students[3:]: self.assertIsNone( GeneratedCertificate.certificate_for_student(student, self.course.id) )
with self.assertRaisesRegexp(LTIError, "Content-Type must be"): request = Mock(headers={u'Content-Type': u'Non-existent'}) self.xmodule.verify_lti_2_0_result_rest_headers(request)
REQUEST_CONTEXT.request = None return response
self._check_align(left, empty, axis=ax, fill_axis=fax, how=kind, method=meth) self._check_align(left, empty, axis=ax, fill_axis=fax, how=kind, method=meth, limit=1)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
if hasattr(self, 'oob_improvement_'): self.oob_improvement_.resize(total_n_estimators) else: self.oob_improvement_ = np.zeros((total_n_estimators,), dtype=np.float64)
parent = models.OneToOneField(Place, models.CASCADE, parent_link=True)
return PeriodIndex([item], **self._get_attributes_dict())
return self.q(css="span.current-page")[0].get_attribute('innerHTML')
available_version = salt.utils.alias_function(latest_version, 'available_version')
means = np.array([[0, 0, -1], [0, 2, 0], [0, -2, 0], [0, 0, 5]])
exp_in.index = exp_in.index.astype(object)
X = np.vstack(data_chunks) X_lil = sp.lil_matrix(X) X_csr = sp.csr_matrix(X_lil) X_csc = sp.csc_matrix(X_lil)
self.search_results = None
thread_local_branch_setting = getattr(self.thread_cache, 'branch_setting', None) if thread_local_branch_setting: return thread_local_branch_setting else: return self.default_branch_setting_func()
values = np.array(values, dtype=np.object_)
for xblock_name in self.XBLOCK_NAMES: self.check_event_response_by_key('flag_resource', resource, 'reason', 'reason 0', xblock_name)
idx = PeriodIndex(['2016-05-16', 'NaT', NaT, np.NaN], freq='D')
for optgroup_key, optgroup_value in option_value: if value == optgroup_key: return
Xtrans = Xtrans.toarray() Xtrans2 = mkchi2(k=2).fit_transform(Xsp, y).toarray() assert_equal(Xtrans, Xtrans2)
self.update_state( course_key=destination_course_key, new_state=self.State.IN_PROGRESS, user=user, allow_not_found=True, source_course_key=source_course_key, display_name=display_name, )
return browser.execute_script("return typeof(jQuery) == 'undefined' || jQuery.active == 0")
self.client.login(username=self.global_staff.username, password="test")
if not correct: second_addend += random.randint(1, 10)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.reset_tracker()
return self.mlp.get_lr_scalers()
response = explicit_default_with_prefix_view(request, '14') self.assertEqual(response.content, b'Hello World 4')
from __future__ import unicode_literals
from __future__ import unicode_literals
info = prlctl('snapshot-list', [name, '--id', snap_id], runas=runas)
i18n_service = ModuleI18nService(None) self.assertEqual(i18n_service.ugettext(self.test_language), 'XYZ-TEST-LANGUAGE')
yob_label = _(u"Year of birth")
self.assertEqual(event.dt.replace(tzinfo=EAT), dt)
@python_2_unicode_compatible class RelatedModel(models.Model): test_gfk = GenericRelation('RelationModel', content_type_field='gfk_ctype', object_id_field='gfk_id') exact = models.NullBooleanField()
if not choice.get('id'): choice.set("id", chr(ord("A") + index))
try: nn = n[m]
url(r'^api/user/', include('openedx.core.djangoapps.user_api.urls')),
self.create_programs_config(enable_certification=False)
changes[namespace] = { 'new': config, 'old': update_config, }
lookup_tag = inputtypes.registry.get_class_for_tag
import logging log = logging.getLogger(__file__)
result = s.astype(object) expected = Series(DatetimeIndex(s._values).asobject) assert_series_equal(result, expected)
if not exceptions: return frames
return self._seek_value_label_names + (33 * self.nvar) + 20 + 17
qs = PennsylvaniaCity.objects.transform(32128)
REQUIRE_STANDALONE_MODULES = {}
self.assertEqual(len(Event.objects.values('screening__movie__pk', 'screening__movie__title')), 2)
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
random_state = check_random_state(42)
self.sharex = False
self.assertRaises(ValueError, lambda: to_timedelta(time(second=1))) self.assertTrue(to_timedelta( time(second=1), errors='coerce') is pd.NaT)
'5afe5d9bb03796557ee2614f5c9611fb', self._get_anonymous_id(CourseKey.from_string(course_id), descriptor_class)
status = 'pending'
with self.assertRaises(ValueError): self.runtime.service(self.mock_block, 'user_tags').set_tag('fake_scope', self.key, set_value)
dists = pairwise_distances(query, X, metric='cosine').ravel()
return self._is_element_visible(".add-response-btn")
return self._copy(deepcopy=False)
return adj.justify([x], *args, **kwargs)[0]
daymonth_max = 28
n_components = init.shape[1] if n_samples != init.shape[0]: raise ValueError("init matrix should be of shape (%d, %d)" % (n_samples, n_components)) X = init
if state.transposed: results = results[:, ::-1]
with outer_atomic(): if section_module.hide_from_toc or unicode(section_module.location) in gated_content: continue
counts = self.get_counters(request) return sum(counts.values()) >= self.requests
if task_progress.attempted % status_interval == 0: task_progress.update_task_state(extra_meta=current_step) task_progress.attempted += 1
import salt.utils
return _('TBD')
x = self._x.values betas = self._beta_matrix(lag=lag) return self._unstack_y((betas * x).sum(1))
Book.objects.filter(title='Pro Django').update(pages=200)
query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(now, query) self.assertIs(result, None)
return { 'course_key': unicode(credit_course.course_key), 'enabled': credit_course.enabled }
self.assertEqual(self.client.session['tobacconist'], 'hovercraft')
result = grouped.apply(how, *args, **kwargs)
if '__opts__' not in globals(): globals()['__opts__'] = get_opts()
activations = [X]
different = df1.copy() different['floats'] = different['floats'].astype('float32') self.assertFalse(df1.equals(different))
dupe_counters[title] += 1 title = u"{title} ({counter})".format(title=title, counter=dupe_counters[title])
g.precisions_init = precisions_not_positive[covar_type] assert_raise_message(ValueError, "'%s precision' should be %s" % (covar_type, not_positive_errors[covar_type]), g.fit, X)
self.wait_for_element_absence(self.upload_image_popup_window_selector, 'upload dialog is hidden')
from __future__ import unicode_literals
if isinstance(f, models.FileField): file_field_list.append(f) else: f.save_form_data(instance, cleaned_data[f.name])
from __future__ import absolute_import
if newline: output += '\n'
reset_queries()
if relevant_verification is not None and relevant_verification.status == "approved": recent_verification_datetime = max( recent_verification_datetime if recent_verification_datetime is not None else relevant_verification.expiration_datetime, relevant_verification.expiration_datetime )
module.save_problem(get_request_dict)
return self.inherited_settings[key.field_name]
tm.assert_series_equal(df['labels'], df['expected_labels'], check_names=False)
if ip_str.count(':') > 7: return False
if not settings.FEATURES.get('ENABLE_CSMH_EXTENDED'): post_save.connect(save_history, sender=StudentModule)
ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3, color=c) ax.plot([1], [1], [1], color=c, label=label)
VERIFY_STUDENT["SOFTWARE_SECURE"] = { "API_ACCESS_KEY": "BBBBBBBBBBBBBBBBBBBB", "API_SECRET_KEY": "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", }
xsupi = _cg(fhess_p, fgrad, maxiter=maxinner, tol=termcond)
exp = Index([1.0, 'obj', 3.0], name='x') self.assert_index_equal(idx.fillna('obj'), exp)
self.assertIsNone(Comment.objects.select_related('post').filter(post__isnull=True)[0].post)
good_states = ['AZ', 'FR'] blocked_states = ['US', 'AQ'] currently_blocked = EmbargoedState.current().embargoed_countries_list
from __future__ import absolute_import import logging import time import json
else: retcode = 0
return self.link_value
for tree, dataset in product(REG_TREES, ["boston", "reg_small"]): if tree in SPARSE_TREES: yield (check_sparse_input, tree, dataset, 2)
mouse_hover_action = ActionChains(self.browser).move_to_element(element) mouse_hover_action.perform()
assert_array_almost_equal(lr1.coef_, lr2.coef_) msg = "Arrays are not almost equal to 6 decimals" assert_raise_message(AssertionError, msg, assert_array_almost_equal, lr1.coef_, lr3.coef_)
ENROLLMENT_COURSE_DETAILS_CACHE_TIMEOUT = 60
self.__dict__['_modulestore'] = modulestore
else: self.alphas_ = np.asarray(alphas[0])
self.functions = salt.loader.minion_mods(self.opts) self.returners = salt.loader.returners(self.opts, self.functions)
self.q(css='nav.%s * .next-page-link' % position)[0].click() self.wait_until_ready()
from __future__ import unicode_literals
FEATURES['MILESTONES_APP'] = True
return self.hidbias + tensor.dot(x, self.weights)
return (os.path.normcase(os.path.abspath(src)) == os.path.normcase(os.path.abspath(dst)))
self.course_outline_page.visit() section = self.course_outline_page.section_at(0) section.subsection_at(0).set_staff_lock(True) self.assertFalse(section.has_staff_lock_warning)
programs_config = self.create_programs_config(cache_ttl=cache_ttl) self.assertEqual(programs_config.is_cache_enabled, is_cache_enabled)
logging.debug("Current state of '{}' element is '{}'".format(state_selector, current_state))
return None
if value == 'course_org_filter': return alternate return default
pred2 = svm.libsvm.cross_validation(iris.data, iris.target.astype(np.float64), 5, kernel='linear', random_seed=0) assert_array_equal(pred, pred2)
return caches[alias]
X, y = make_blobs(n_samples=500, n_features=2, centers=4, cluster_std=1, center_box=(-10.0, 10.0), shuffle=True,
_base.update(copy.deepcopy(_overrides)) return _base
import salt.loader from salt.template import compile_template from salt.ext.six import string_types from salt.roster import get_roster_file
return (len(ax.lines) != 0 or len(ax.artists) != 0 or len(ax.containers) != 0)
raise NotImplementedError
CELERY_ALWAYS_EAGER = True HTTPS = 'off'
import salt.utils import logging import salt.utils.mac_utils from salt.exceptions import CommandExecutionError
distances = paired_distances(X[connectivity.row], X[connectivity.col], metric=affinity)
result = strings.str_cat(one) exp = 'aabbc' self.assertEqual(result, exp)
if self.level_of_education: return self.__enumerable_to_display(self.LEVEL_OF_EDUCATION_CHOICES, self.level_of_education)
self.queue_len = 0 if self.status == 'incomplete': self.status = 'queued' self.queue_len = self.msg self.msg = self.submitted_msg
if salt.utils.is_windows(): from salt.utils.win_functions import get_parent_pid ppid = get_parent_pid() else: ppid = os.getppid()
xblock = _update_with_callback(xblock, user, old_metadata, old_content)
self.assertTrue('Coupon Code List' in response.content)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
import salt.utils
block_structure.request_xblock_fields('category')
from __future__ import absolute_import import logging import pprint import re import time import datetime
if self.credit_type[0] not in graders: raise LoncapaProblemError('partial_credit attribute should be one of: ' + ','.join(graders))
self.wait_for_ajax()
MAX_DATABASE_LOCK_RETRIES = 5
self.course.edxnotes = _edxnotes self.assertEqual(helpers.is_feature_enabled(self.course), _edxnotes)
df2 = df.ix[:, ['AAA', 'B', 'C']]
self.assertEqual(self.selenium.find_element_by_id('id_supporting_bands').get_attribute('value'), '')
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] y_state = layer_to_state[y]
self.create()
result = ci.append(['c', 'a']) expected = CategoricalIndex(list('aabbcaca'), categories=categories) tm.assert_index_equal(result, expected, exact=True)
def _get_pad(t): return max_len - self.len(t) + len(t)
if isinstance(other, six.string_types): return self.wkt == other elif isinstance(other, GEOSGeometry): return self.equals_exact(other) else: return False
covars = np.asarray(covars) _validate_covars(covars, self.covariance_type, self.n_components) self.covars_ = covars
values = [values[i] for i in indexer]
class DecimalLessThanOne(models.Model): d = models.DecimalField(max_digits=3, decimal_places=3)
error_msg = "XQueue received invalid grade request" self._send_immediate_response(False, message=error_msg)
CustomizableView.as_view(parameter="value") with self.assertRaises(TypeError): CustomizableView.as_view(foobar="value")
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath, TestsLoggingHandler from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
self.assertRaises(ValueError, Timestamp, max_ts_us + one_us)
return ip_str
try: return view(request, course_id=course_id) except DashboardError, error: return error.response()
client_kwargs['base_url'] = os.environ.get('DOCKER_HOST')
salt '*' win_wua.list_updates categories=['Critical Updates','Drivers']
result = user.Rename(new_name)[0]
#html_short_title = None
for modulestore in self.modulestores: modulestore.close_connections()
supports_geometry_field_unique_index = True
self.assert_no_xpath(xml, "//label[@class='choicegroup_incorrect']", self.context)
from __future__ import absolute_import import logging
exc_info_on_loglevel=logging.DEBUG
to_ignore = name.rsplit('-', 1)[0]
return self.n_iter
s4 = Series([1, 0], index=[1, 2]) with tm.assertRaises(ValueError): df.sample(1, weights=s4)
from __future__ import unicode_literals from datetime import timedelta
_network_errno_vals = (
if self._load_module(name) and key in self._dict: return True
self.assertIsNotNone(self.page.new_post_button) self.page.click_new_post_button() self.assertIsNotNone(self.page.new_post_form)
self.a = Article( id=None, headline='Swallow programs in Python', pub_date=datetime(2005, 7, 28), ) self.a.save()
with self.assertNumQueries(0): with self.assertRaises(UndergroundBar.DoesNotExist): p.undergroundbar
site_header = ugettext_lazy('Django administration')
import salt.utils
self.factory(eta0=0, learning_rate="constant")
cache.clear()
include_dependencies = bool(request.GET.get('include-dependencies', False))
requires_sqlparse_for_splitting = True
rng = np.random.RandomState(0) X = rng.uniform(size=(10, 3))
from salt.states import mac_xattr as xattr
return restore( self._modulestore._clean_locator_for_mapping(locator) )
if __grains__['kernelrelease'] == "5.9": return (False, 'The smf execution module failed to load: SMF not available on Solaris 9.') return __virtualname__
from salttesting.helpers import ensure_in_syspath, expensiveTest from salttesting import skipIf
res = grainsmod.filter_by(dict1, grain='xxx', default='Z') self.assertIs(res, None)
self.login_and_enroll() self.logout()
if '_when' not in data: data['_when'] = when
certs_list = self.run_function('keychain.list_certs') self.assertIn(CERT_ALIAS, certs_list)
if not isinstance(validation, Validation): raise TypeError("Copy must be called with a Validation instance") studio_validation = cls(validation.xblock_id) studio_validation.messages = validation.messages return studio_validation
self.assertIn("EXCEPTION!", get_processor_exception_html(CCProcessorException()))
X, y = make_regression( n_samples=n_samples, n_features=n_features, random_state=0, noise=0.05)
self._each_parens('(x+y)', 'x+y', '(')
return status
md5 = hashlib.md5() md5.update(repr(resource)) return md5.hexdigest()
if not self.in_atomic_block: raise TransactionManagementError( "The rollback flag doesn't work outside of an 'atomic' block.") return self.needs_rollback
if EventMatchTolerates.STRING_PAYLOAD in tolerate: expected = parse_event_payload(expected) actual = parse_event_payload(actual)
f = lambda x: x.fillna(0, inplace=True) _check_f(data.copy(), f)
config = VerifiedTrackCohortedCourse.objects.create(course_key=course_key, enabled=True) config.save() self.assertTrue(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(course_key))
from __future__ import unicode_literals
return self.enabled and self.enable_certification
import salt.utils from salt.exceptions import CommandExecutionError try: import salt.utils.pycrypto HAS_CRYPT = True except ImportError: HAS_CRYPT = False
from salt.modules import cmdmod from salt.exceptions import CommandExecutionError, SaltInvocationError import salt.utils import salt.utils.odict
self.course_db = {}
recorder.record_applied("migrations", "5_auto") loader.build_graph() self.assertEqual(num_nodes(), 2)
digits = load_digits() data = digits.data
dm['A'] = 'bar' self.assertEqual('bar', dm['A'][0])
with self._mock_geoip('US'): result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
sh("i18n_tool generate")
return self.get(path, data or {}, follow, HTTP_ACCEPT="application/json", **extra)
with check_exact_number_of_calls(store, 'refresh_cached_metadata_inheritance_tree', 28):
lfw_people = fetch_lfw_people(data_home=SCIKIT_LEARN_DATA, resize=None, slice_=None, color=True, download_if_missing=False) assert_equal(lfw_people.images.shape, (17, 250, 250, 3))
return os.sep.join(__file__.split(os.sep)[:-5]) + '/data/uploads/' + filename
def __init__(self, location): super(InvalidVersionError, self).__init__() self.location = location
active_attempts = cls.objects.filter(user=user, status='ready').order_by('-created_at') if active_attempts: return active_attempts[0] else: return None
log.warning('Local mode detected. Event with tag {0} will NOT be sent.'.format(tag)) return False
self.generate_renamed_models()
add_user_to_cohort(first_cohort, self.student.username) self.assert_student_in_group(None)
axis += 1
handlers = logger.handlers level = logger.getEffectiveLevel()
context['certificate_id_number_title'] = _('Certificate ID Number')
return (not self._intercept and not self._time_effects)
evt1 = me.get_event(wait=0, tag='evt1', no_block=False) self.assertGotEvent(evt1, {'data': 'foo1'})
self.conn = pymysql.connect(host='localhost', user='root', passwd='', db='pandas_nosetest')
if return_type not in self._valid_return_types: raise ValueError( "return_type must be {None, 'axes', 'dict', 'both'}")
self.update({})
corr_rank = np.bincount(rank, minlength=n_ranks + 1).cumsum() rank = corr_rank[rank]
if (is_ppa and repo_type == 'deb' and source.type == 'deb-src' and source.uri == repo_uri and source.dist == repo_dist):
rexp = re.compile('(?m)^ [*] ' r'([^ ].*)[\r\n].*\(([^\)]+)')
result = sparse.loc[orig.x % 2 == 1] exp = orig.loc[orig.x % 2 == 1].to_sparse() tm.assert_sp_frame_equal(result, exp)
raise NotImplementedError("Deleting files from a package is not supported")
ret = ava.difference(ena)
self.__dict__['_deleted'] = set() self.default_settings = default_settings
if not decode: ret = _get_secrets(namespace, name, apiserver_url) else: ret = _decode_secrets(_get_secrets(namespace, name, apiserver_url)) return ret
with check_mongo_calls(1): cached_structure = self._get_structure(self.new_course)
pass
self.client.logout() self.assert_can_create_course(HTTP_X_EDX_API_KEY=settings.EDX_API_KEY)
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
self.assertCalcEqual(True, [True, 'or', False, 'and', False])
return ( {"cohort_id": cohort.id, "cohort_name": cohort.name, "user_id": user_id} for user_id in user_id_iter for cohort in cohort_iter )
if 'retcode' in self.functions.pack['__context__']: ret['retcode'] = self.functions.pack['__context__']['retcode']
if level is None and (self_is_mi or other_is_mi):
d = np.diag(prec).reshape(1, prec.shape[0]) d = 1. / np.sqrt(d)
MONTH_DAY_FORMAT = 'F j'
raise TypeError('Must specify either start or end.')
query = self._qs(self.browser.current_url) return 'code' in query
points = [round0_25(point) for point in points]
with check_mongo_calls(max_find, max_send): wiki_courses = self.store.get_courses_for_wiki('999') self.assertEqual(len(wiki_courses), 1) self.assertIn(
self.assertEqual(module.attempts, 0)
return type(self).censor_updates != Model.censor_updates
sls_file = '{0}.sls'.format(os.sep.join(repo)) if not os.path.exists(sls_file):
from salt.modules import dockerng as dockerng_mod from salt.exceptions import CommandExecutionError, SaltInvocationError
placemarks = klass._default_manager.using(using).annotate(kml=AsKML(field_name))
set_course_cohort_settings( course_key=self.course.id, is_cohorted=False, cohorted_discussions=["Topic_A"], always_cohort_inline_discussions=False, ) check_cohorted_topics([])
from salt.log.mixins import NewStyleClassMixIn, ExcInfoOnLogLevelFormatMixIn
except KeyError: self.send_error(400) return
registration_codes_list = CourseRegistrationCode.objects.filter( course_id=course_id ).order_by('invoice_item__invoice__company_name')
import salt.transport.ipc return salt.transport.ipc.IPCMessageClient(opts, **kwargs)
if output is None: output = value self.assertEqual(function(value), output)
return location in self._locations_to_scores
if order_items.count() == 1: receipt_template = order_items[0].single_item_receipt_template context.update(order_items[0].single_item_receipt_context)
return self.delete_student_state_button.click()
if field.many_to_many and field.remote_field.through._meta.auto_created: return self.create_model(field.remote_field.through) self._remake_table(model, create_fields=[field])
#np.sum(np.abs(y_hat - y), axis=1) != 0
cls.course_with_visibility = CourseFactory.create( display_name='visible_course', org='TestMicrositeX', course="foo", catalog_visibility=CATALOG_VISIBILITY_CATALOG_AND_ABOUT, emit_signals=True, )
@skipUnlessDBFeature('test_db_allows_multiple_connections') class DeleteLockingTest(TransactionTestCase):
frame = DataFrame(mat, columns=['A', 'B', 'C'], index=[1, 2], dtype=object) self.assertEqual(frame.values.dtype, object)
raise Exception(msg), None, sys.exc_info()[2]
max_rows = get_option("display.max_rows") return len(self) <= max_rows
return cls.objects.filter( user=user, status="approved", created_at__gte=(earliest_allowed_date or cls._earliest_allowed_date()) ).exists()
self.assertEqual(command_output, "Installed 0 object(s) (of 2) from 1 fixture(s)")
import jinja2 import yaml import msgpack import salt.ext.six as six import tornado
history = HistoricalRecords()
return self.q(css=".courses-listing-item")
self.assertQuerysetEqual( Number.objects.none().values('num').order_by('num'), [] )
selector = self.get_element_selector(CSS_CLASS_NAMES['error_message']) return self.q(css=selector).text[0]
__virtualname__ = 'win_dacl'
class UserRegistration(Form):
ret_stdout = [] ret_stderr = [] while self.conn.has_unread_data: stdout, stderr = self.conn.recv()
self.courseware_page.visit() csh_problem_page = CrowdsourcehinterProblemPage(self.browser) self.assertGreater(len(self.browser.find_elements_by_class_name('crowdsourcehinter_block')), 0) return csh_problem_page
orig_tz = os.environ.get('TZ')
violations_count_str = "Number of pylint violations: " + str(num_violations) print violations_count_str
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.alfred])
self.assertEqual(1, true_cardinality_flags)
def geometry_columns(self): from django.contrib.gis.db.backends.spatialite.models import SpatialiteGeometryColumns return SpatialiteGeometryColumns
with self.assertRaisesMessage(ValidationError, "'Enter a valid URL.'"): f.clean('http://%s' % ("X" * 60,))
for func in ('order', 'sort'): with tm.assert_produces_warning(FutureWarning): getattr(c, func)()
self.create_programs_config(program_listing_enabled=True) response = self.client.get(path=self.view_path) self.assertContains(response, '<li class="tab-nav-item">')
key = key.lower() return key in _deprecated_options
print_monitor_cv.main(filename)
import salt.utils import salt.utils.decorators as decorators
X = self._validate_for_predict(X) X = self._compute_kernel(X)
if http_event_collector_debug: log.debug('auto flushing')
mean = X.mean(axis=0) std = X.std(axis=0) X = (X - mean) / std
clf = LinearDiscriminantAnalysis(solver="svd").fit(X, y) means_transformed = clf.transform(means)
return sql.DeleteQuery(self.model).delete_qs(self, using)
course = CourseFactory.create() self.verify_url( unicode(course.id.make_asset_key('asset', course.course_image)), course_image_url(course) )
extra['w'] = extra.get('w', 0)
self.functions = functions self.returners = returners
component_2 = _graph_connected_component(affinity, p[stop - 1]) assert_equal(component_2.sum(), component_size) assert_array_equal(component_1, component_2)
df_as = df
authentication_classes = []
import salt.utils
sample_ids = [0, 1] common_nodes = (node_indicator.toarray()[sample_ids].sum(axis=0) == len(sample_ids))
last_mean = np.zeros(n_features) last_var = np.zeros_like(last_mean) last_n = 0
change_info = self.run_function('group.info', [CHANGE_GROUP]) if change_info: self.run_function('group.delete', [CHANGE_GROUP])
self.assertDictEqual(json.loads(response.content), self._serialize_credit_course(cc1))
check_lti_iframe_content("Wrong LTI signature")
y_true = rng.randint(0, 3, size=10) assert_raise_message(ValueError, "multiclass format is not supported", roc_auc_score, y_true, y_pred)
r = self.frame.resample('H')['A', 'B'] tm.assert_index_equal(r._selected_obj.columns, self.frame.columns[[0, 1]])
if isinstance(weights, pd.Series): weights = weights.reindex(self.axes[axis])
return 'ERROR: Failure deploying thin, undefined state: {0}'.format(stdout), stderr, retcode
for fixture_label in fixture_labels: if self.find_fixtures(fixture_label): break else: return
set_pw_cmd = "shadow.set_password {0} '{1}'".format( self.userB, password if salt.utils.is_darwin() else hashed_pwd ) self.run_call(set_pw_cmd)
request_finished.disconnect(close_old_connections)
raise TypeError("'values' is not ordered, please " "explicitly specify the categories order " "by passing in a categories argument.")
dependencies=[ (app_label, model_name, field_name, "order_wrt_unset"), (app_label, model_name, field_name, "foo_together_change"), ],
assert_array_almost_equal((tfidf ** 2).sum(axis=1), [1., 1., 1.])
self.assertRaises(IndexError, s.__getitem__, len(self.ymd))
else: self.append_subcluster(subcluster) return True
MPLPlot.__init__(self, data, **kwargs)
certificate_count = 3 for __ in xrange(certificate_count): self.generate_certificate(course_id=self.course.id, mode='honor', status=CertificateStatuses.downloadable)
if line.startswith('bridge name'): continue vals = line.split() if not vals: continue
result = s.reorder_levels([0, 1, 2]) assert_series_equal(s, result)
BASE_URL = os.environ.get('test_url', 'http://localhost:8003')
if _level: return results return list(compat.itervalues(results))[0]
raise NotImplementedError()
uniform_batch_size = True
from __future__ import absolute_import import logging
from __future__ import unicode_literals
self.assertTrue(self.video.downloaded_transcript_contains_text('txt', 'Welcome to edX.'))
from urllib2 import urlopen from urllib2 import HTTPError
unicode_user = UserFactory(first_name=u'Ⓡⓞⓑⓞⓣ', last_name=u'ՇﻉรՇ') CourseEnrollmentFactory.create(user=unicode_user, course_id=self.course.id) self.students.append(unicode_user)
if settings.ROOT_URLCONF != 'lms.urls': raise unittest.SkipTest('Test only valid in lms') super(XBlockTestCase, cls).setUpClass()
X = np.arange(-200, 200) y = 0.2 * X + 20 data = np.column_stack([X, y])
return {'shell': os.environ.get('SHELL', '/bin/sh')}
y_proba = clf.predict_proba(T) assert_true(np.all(y_proba >= 0.0)) assert_true(np.all(y_proba <= 1.0))
get_storage_container_acl = show_storage_container_acl
import cherrypy from cherrypy.lib import cpstats import yaml import salt.ext.six as six
self.affinity_matrix_ = 0.5 * (self.affinity_matrix_ + self.affinity_matrix_.T) return self.affinity_matrix_
import os.path
f.DEFAULT_CHUNK_SIZE = 4 self.assertEqual(list(f), [b'one\n', b'two\n', b'three'])
interp_values = np.apply_along_axis(func, axis, data)
pass
import numpy import theano from pylearn2.datasets.utlc import load_ndarray_dataset, load_sparse_dataset from pylearn2.utils import subdict, sharedX
result = df['A'] - df['A'].shift() self.assertEqual(result.dtype, 'timedelta64[ns]')
HAS_WHOOSH = False try: import whoosh.index import whoosh.fields import whoosh.store import whoosh.qparser HAS_WHOOSH = True except ImportError: pass
df = DataFrame({'A': [2, 3, 5], 'B': [7, 11, 13]}) s = df['A']
#
search_string = '' search_params = []
from __future__ import unicode_literals
with self.assertRaisesRegexp(GitExportError, unicode(GitExportError.XML_EXPORT_FAIL)): git_export_utils.export_to_git( course_key, 'file://{0}'.format(self.bare_repo_dir))
instance.file.delete()
self.assertNotIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertNotIn(notes, self.certificates_section.last_certificate_exception.text)
result = np.repeat(np.array([self._na_value] * len(qs)), len(values)).reshape(len(values), len(qs))
state = dict(state.items() + matrices.items()) del matrices
Sigma = Sigma[::-1] U, VT = svd_flip(U[:, ::-1], VT[::-1])
baseperson = models.ForeignKey(BasePerson, models.CASCADE, related_name='relating_baseperson') baseperson_hidden = models.ForeignKey(BasePerson, models.CASCADE, related_name='+')
if hasattr(np, 'float128'): c2f_dict['complex256'] = np.float128
if not xblock.group_access: return False for partition in get_user_partition_info(xblock): if any(g["selected"] for g in partition["groups"]): return True return False
install_package(package,temp_filename,dataset_data_path) update_installed_list("i",package)
salt '*' vsphere.reset_syslog_config my.esxi.host root bad-password \ syslog_config='logdir,loghost'
assert_raises(ValueError, cv.fit, K_train.tolist(), y_train)
HAS_LIBS = False try: import azure HAS_LIBS = True except ImportError: pass
raise NotImplementedError("DateOffset with relativedelta " "keyword(s) %s not able to be " "applied vectorized" % (set(self.kwds) - relativedelta_fast),)
iris = datasets.load_iris()
course_overview.delete() course_overview = None
with filesystem.open('updates.html', 'r') as grading_policy: on_disk = grading_policy.read() self.assertEqual(on_disk, course_updates.data)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
datepart_offset = getattr(t, offset_name if offset_name != 'weekday' else 'dayofweek') self.assertTrue(datepart_offset == offset.kwds[offset_name])
obj_sys = win32com.client.Dispatch('Microsoft.Update.SystemInfo')
s = Series(date_range('20010101', periods=10), name='dates') s_nat = s.copy(deep=True)
af = AffinityPropagation(affinity="euclidean") assert_raises(ValueError, af.predict, X)
fstypes.add('*')
self.name = name
self.localize = localize if self.localize: widget.is_localized = True
io_loop = tornado.ioloop.IOLoop()
from salt.states import boto_asg
TestScenario( (self.demo_course.id, '='), "course_MVSFQL2EMVWW6WBOGEXUMYLMNRPTEMBRGQ======" ), TestScenario( (self.html_course.id, '~'), "course_MNXXK4TTMUWXMMJ2KVXGS5TFOJZWS5DZLAVUGUZNGIYDGK2ZGIYDSNQ~" ),
f = lambda x: x[i] if len(x) > i else np.nan return _na_map(f, arr)
ANALYTICS_DASHBOARD_URL = None
xml = etree.tostring(node) block = cls.from_xml(xml, runtime, id_generator) return block
try: self.client.session['tobacconist'] self.fail("Shouldn't have a session value") except KeyError: pass
addr = _split_optional_netmask(address)
self.assertTrue('success' in result and not result['success'])
name = models.CharField(max_length=128) person_country_id = models.IntegerField()
self.assertTrue(len(ax.get_children()) > 0)
f_stat_dicts = dict((date, f_stat_to_dict(f_stat)) for date, f_stat in zip(self.beta.index, self._f_stat_raw)) return DataFrame(f_stat_dicts).T
return security_group
assert_page_correct( page=1, page_size=10, expected_start=0, expected_stop=10, expected_next=None, expected_prev=None )
TEST_ROOT = REPO_ROOT / "test_root" LOG_DIR = (TEST_ROOT / "log").abspath()
return not self.x_compat and self.use_index and self._use_dynamic_x()
multi_db = True COURSE_SLUG = "100" COURSE_NAME = "test_course"
pos = logical_line.find('.has_key(') if pos > -1 and not noqa: yield pos, "W601 .has_key() is deprecated, use 'in'"
result = jboss7.bindings_exist(name='bindings', jboss_config={}, bindings={'env': 'DEV2'}, profile=None)
def _get_dtypes(self, seek_vartypes):
_orig_sys_path = sys.path[:] sys.path.extend(paths) try: yield finally: sys.path = _orig_sys_path
_win(kernel32.SetHandleInformation, wintypes.BOOL,
result = f.clean('13.30.05') self.assertEqual(result, time(13, 30, 5))
'rule': Rules.python_interpolate_html
from IPython.Shell import IPShell shell = IPShell(argv=[]) shell.mainloop()
third_party_provider = None running_pipeline = None if third_party_auth.is_enabled() and pipeline.running(request): running_pipeline = pipeline.get(request) third_party_provider = provider.Registry.get_from_pipeline(running_pipeline)
return [Attribute('genex_dna_sequence'), Attribute('genex_problem_number') ]
cls.clear_caches()
@context_cache def _test_refill_cache(comparison_context): self.assertEqual(__context__, comparison_context)
description = "A Location object, saved to the DB in the form of a string" KEY_CLASS = UsageKey
return cls
self.url_map.update({ self.apiopts.get('webhook_url', 'hook').lstrip('/'): Webhook, })
constraints = self.get_key_columns(cursor, table_name) relations = {} for my_fieldname, other_table, other_field in constraints: relations[my_fieldname] = (other_field, other_table) return relations
delete_item(category='html', name='test_html')
pass
if referer.scheme != 'https': return self._reject(request, REASON_INSECURE_REFERER)
folders_list_in_path.extend(['data', 'uploads', file_name])
if is_categorical_dtype(values):
if 'selinux' in ks_opts.keys(): for mode in ks_opts['selinux']: sls[mode] = {'selinux': ['mode']}
self.code_book_ = random_state.random_sample((n_classes, code_size_)) self.code_book_[self.code_book_ > 0.5] = 1
import os CMS_SEGMENT_KEY = os.environ.get('SEGMENT_KEY')
import salt.utils
self.presence_events = True
class BadRequestMiddleware(TestMiddleware): def process_request(self, request): super(BadRequestMiddleware, self).process_request(request) raise TestException('Test Request Exception')
problem.grade_answers({'1_2_1': 'test'})
if getattr(callback, 'csrf_exempt', False): return None
smallfile.write(b'a' * (2 ** 21)) smallfile.seek(0)
log.debug('Pinging all connected minions ' 'due to key rotation') salt.utils.master.ping_all_connected_minions(self.opts)
oid = self.repo.lookup_reference(remote_ref).get_object().id if local_ref not in refs: self.repo.create_reference(local_ref, oid)
pivot_table(self.data, values='D', index=index)
return ':'.join((image, tag))
return len(self.q(css=self.subsection_selector))
self.sock = None self.io_loop = io_loop or IOLoop.current() self._closing = False self.streams = set()
for p in self.geometries.polygons: poly = fromstr(p.wkt)
cov = pca.get_covariance() precision = pca.get_precision() assert_array_almost_equal(np.dot(cov, precision), np.eye(X.shape[1]), 12)
from __future__ import unicode_literals
output[:, i:i + width, j:j + width] = dense_input[ :, idx][:, None, None] idx += 1
from salt.states import timezone
people = models.ManyToManyField(Person, related_name='relating_people') people_hidden = models.ManyToManyField(Person, related_name='+')
raise salt.exceptions.CommandExecutionError(lazy_obj.missing_fun_string(fun))
def test_inheritance_null_FK(self): Event.objects.create() ScreeningNullFK.objects.create(movie=None) ScreeningNullFK.objects.create(movie=self.movie)
form = self.get_form(expected_valid=False) self.assertEqual(form.errors, {expected_field: [expected_message]})
pass
return _('{section_or_subsection} "{display_name}"').format( section_or_subsection=xblock_type_display_name(xblock), display_name=xblock.display_name_with_default)
urlpatterns += [ url(r'^json/response/$', views.json_response_view), ]
return self._get_ax_layer(ax)
return total / len(model_output)
PASSWORD_RESET_TIMEOUT_DAYS = 3
ret['changes']['diff'] = ( ''.join(difflib.unified_diff(slines, nlines)) )
assert_raises(ValueError, cross_val_score, svm, linear_kernel.tolist(), y)
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
data = tools.to_datetime(dates)
with tm.assertRaises(ValueError): com._random_state('test')
data = {"time": eventtime} data.update(payload)
return self.q(css=".badges-modal").visible
if viewname == "django_comment_client.forum.views.forum_form_discussion" and args == [unicode(course.id)]: return "default_discussion_link"
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
merged_parent_group_ids = set()
split_tests = store.get_items(course.id, qualifiers={'category': 'split_test'}) return GroupConfiguration._get_content_experiment_usage_info(store, course, split_tests)
return [MockEndpoints()]
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, patch )
import salt.config import salt.loader import salt.transport.client import salt.utils import salt.utils.minions import salt.payload
if self.n_components is None: n_components = X.shape[1] else: n_components = self.n_components
self.assertTrue(check_password('letmein', encoded, setter, 'argon2')) self.assertTrue(state['upgraded'])
n_samples = len(digits.images) data = digits.images.reshape((n_samples, -1))
return self.q(css=ERROR_ITEM_CONTENT_SELECTOR).text
X_sparse_pruned = sparse.csr_matrix(X_dense)
'test': bool,
biggest = terms[ndims.idxmax()].value typ = biggest._constructor axes = biggest.axes naxes = len(axes) gt_than_one_axis = naxes > 1
self.assertNotIn('error_code', json.loads(response.content))
ipset.__salt__ = {}
'ENABLE_TEAMS': True,
fd, name = mkstemp(suffix='.png') os.close(fd)
sparse_results = sparse_classifier.predict(X_test_sparse) dense_results = dense_classifier.predict(X_test) assert_array_equal(sparse_results, dense_results)
from __future__ import absolute_import import libcloud.security import platform import os
store = self._verify_modulestore_support(location.course_key, 'unpublish') return store.unpublish(location, user_id, **kwargs)
mako_middleware_process_request(request)
transformer = self.transformer_dataset.transformer out_space = self.data_specs[0] if isinstance(out_space, CompositeSpace): out_space = out_space.components[0]
KEY_CSRF_TOKENS = ('csrf_token', 'csrf') for key in KEY_CSRF_TOKENS: if key in context_dictionary: context_dictionary[key] = unicode(context_dictionary[key])
call_command("migrate", "migrations", "zero", verbosity=0)
return sum(estimator.predict(X[:, features]) for estimator, features in zip(estimators, estimators_features))
descriptor = CapaDescriptor(get_test_system(), scope_ids=1) descriptor.data = xml if name: descriptor.display_name = name return descriptor
raise NotImplementedError()
self.assertEqual(len(self.certificates_page.certificates), 1) course_number = self.certificates_page.get_course_number() self.assertEqual(self.course_info['number'], course_number)
with self.assertRaises(Http404): get_object_or_404(Article, title="Foo")
y_train, y_test = data_train.target, data_test.target
with ignore_warnings(): yield check_transformer_n_iter, name, estimator
return ", ".join(DOC_PATHS.keys())
from __future__ import unicode_literals
archive.__salt__ = {} archive.__pillar__ = {} archive.__grains__ = {"id": "0"} archive.__opts__ = {}
from __future__ import absolute_import, print_function import os
tracker.send(event)
self.store.publish(self.vertical_x1a, self.user_id) self.store.publish(problem_location, self.user_id)
from collections import namedtuple record = namedtuple('record', 'x y') r = record(5, 6) values = [r]
for i in range(current_page, total_pages): _check_page() if current_page < total_pages: page.click_on_page(current_page + 1) current_page += 1
xml = etree.fromstring(expr) xml = self.formulaInstance.preprocess_pmathml(xml) test = etree.tostring(xml)
errors += self.state.verify_high(high) high, req_in_errors = self.state.requisite_in(high) errors += req_in_errors high = self.state.apply_exclude(high)
self.assertEqual(len(mail.outbox), 0)
module.system.render_template = Mock(return_value="<div>Test Template HTML</div>")
y = np.zeros((10, 2))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
for child in children: self._block_relations[child].parents.remove(usage_key)
return CreditCourse.is_credit_course(course_key=course_key)
def f(): cat.add_categories(["d"])
context.update(extra_context)
_PKG_TARGETS_DOT = { 'RedHat': {'5': 'python-migrate0.5', '6': 'tomcat6-el-2.1-api', '7': 'tomcat-el-2.2-api'} }
return self(kind='bar', **kwds)
offset = datetools.DateOffset(months=3) result = date_range("2011-1-1", "2012-1-31", freq=offset)
_ = lambda text: text
names = self._maybe_dedup_names(self.orig_names) return _get_empty_meta(names, self.index_col, self.index_names)
self.optimizer = 'fmin_cobyla' self.verbose = False
def has_permission(self, request, view): if request.user.is_staff: return True return super(IsUserInUrlOrStaff, self).has_permission(request, view)
self.assertEqual(response.request['PATH_INFO'], '/unknown_view/;some-parameter')
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
yield check_parameters_default_constructible, name, Estimator
self.accessed = False self.modified = False
if self.errors_occurred: if self.is_usable(): self.errors_occurred = False else: self.close() return
assert_raises(ValueError, chi2_kernel, [[0, 1]], [[.2, .2, .6]])
myminion: base: |_ httpd: 2.2.15-29.el6.centos updates: |_ httpd: 2.2.15-30.el6.centos
self.assertEquals(preview.latex_preview('pi'), r'\pi')
pipeline = preprocessing.Pipeline() pipeline.items.append(preprocessing.GlobalContrastNormalization(batch_size=5000)) pipeline.items.append(preprocessing.LeCunLCN((32,32)))
self.assertEqual(response.status_code, 200)
'tcp_keepalive_idle': float,
class_priority = ['video', 'problem']
name = event.get(u'name') return cls.mapping[name](event)
return self.corr(self.shift(lag))
author = super(PoetForm, self).save(commit=False) author.name = "Vladimir Mayakovsky" if commit: author.save() return author
problem_url_name = 'H1P1' self.define_option_problem(problem_url_name) location = InstructorTaskModuleTestCase.problem_location(problem_url_name) descriptor = self.module_store.get_item(location)
self.exp_dirichlet_component_ = np.exp( _dirichlet_expectation_2d(self.components_))
raised = False try: fmt.format(numpy.zeros(10, dtype='float64')) except TypeError: raised = True assert raised
return self.posterior.get_params()
return ( usage_key.block_type in self.block_types or usage_key.block_type in BLOCK_TYPES_WITH_CHILDREN )
key = safe_key('test', '', version)
bitmask = 0xffffffff h = 0
self.state = state
self.assertRaises(KeyError, frame.ix.__getitem__, 3)
_, _, exclude_dictionary = LmsSearchFilterGenerator.generate_field_filters(user=self.user) self.assertNotIn('org', exclude_dictionary)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
wkb_reader_create = GEOSFuncFactory('GEOSWKBReader_create', restype=WKB_READ_PTR) wkb_reader_destroy = GEOSFuncFactory('GEOSWKBReader_destroy', argtypes=[WKB_READ_PTR])
from django.template import RequestContext, TemplateSyntaxError from django.test import RequestFactory, SimpleTestCase, override_settings from django.urls import NoReverseMatch, resolve
mathjax_container = self.q(css="div.problem div.problem-hint .MathJax_SVG") return mathjax_container.visible and mathjax_container.present
y = self._y_orig if isinstance(y, Series): y = y.unstack()
if isinstance(freq, DateOffset): freq = freq.rule_code else: freq = frequencies.get_base_alias(freq)
assertNumProblems(expected_display_name, 1)
section = self.course_outline_page.section(SECTION_NAME) subsection = section.subsection(SUBSECTION_NAME) unit = subsection.expand_subsection().unit(UNIT_NAME) return (section, subsection, unit)
self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_VERIFY)
import inspect import logging import sys
verify_files([logfile], salt_master_user)
self.assertFalse(result['success']) self.assertIn(u"corrupted message regarding your charge", result['error_html'])
pass
LOGGING_LOGGER_CLASS = logging.getLoggerClass()
request = self.rf.options('/') view = PostOnlyView.as_view() response = view(request) self._assert_allows(response, 'POST')
num_certs = 0 for cert in refunded_certs: num_certs += 1 self.assertEqual(num_certs, 2)
iris = datasets.load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
manage.py ... transfer_students -f edX/Open_DemoX/edx_demo_course -t edX/Open_DemoX/new_demoX -c true
courses, failed_export_courses = export_courses_to_output_path(self.temp_dir) self.assertEqual(len(courses), 2) self.assertEqual(len(failed_export_courses), 0)
absent_state = 'cmd_|-listener_test_listening_non_changing_state_|-echo "Only run once"_|-mod_watch' self.assertNotIn(absent_state, state_run)
resp = self.client.get(self.url, HTTP_ACCEPT='application/x-tgz') self._verify_export_succeeded(resp)
col_line.append(columns.names[i])
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): self.assertRaises(AttributeError, lambda: r.F)
boston = datasets.load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
res_val = df.ix["j", 0] self.assertEqual(res_val, exp_val)
from salt.modules import rsync from salt.exceptions import CommandExecutionError, SaltInvocationError
_validate_username(username) _validate_password(password, username) _validate_email(email)
raise ItemNotFoundError(usage_locator)
with tm.ensure_clean() as path: empty_ds.to_stata(path, write_index=False) empty_ds2 = read_stata(path) tm.assert_frame_equal(empty_ds, empty_ds2)
elif compat.PY3 and isinstance(f, compat.BytesIO): from io import TextIOWrapper
self._configure_testshib_provider() super(TestShibIntegrationTest, self).test_register()
return render_to_response('financial-assistance/financial-assistance.html', { 'header_text': FINANCIAL_ASSISTANCE_HEADER })
with remove_ccx(xblock) as (xblock, restore): return restore(self._modulestore.has_published_version(xblock))
test_ssh_host = host test_ssh_port = port
self.assertFalse(linode._validate_name(''))
if isinstance(local_dict, Scope): resolvers += tuple(local_dict.resolvers.maps) self.resolvers = DeepChainMap(*resolvers) self.temps = {}
with salt.utils.fopen(jid_file, 'w+b') as fn_: fn_.write(serial.dumps(jid_dict))
fields = (f for f in fields if f != '?')
if compat.PY3: return self.__unicode__() return self.__bytes__()
if is_float_dtype(left) or is_complex_dtype(left): return ((left == right) | (np.isnan(left) & np.isnan(right))).all()
newnode['hostname'] = vm_['name'] newnode['ostemplate'] = vm_['image']
bad2 = copy(city_mapping) bad2['name'] = 'Nombre'
has_correct_url = self.url.endswith(self.url_path) teams_list_view_present = self.q(css='.teams-main').present return has_correct_url and teams_list_view_present
git_import.add_repo(self.TEST_REPO, repo_dir / 'edx4edx_lite', self.TEST_BRANCH)
if per_example is None: return None
kwargs['size'] = '10'
try: return CourseEmailTemplate.objects.get(name=name) except CourseEmailTemplate.DoesNotExist: log.exception("Attempting to fetch a non-existent course email template") raise
self.assertEqual(AbstractPerson._meta._relation_tree, EMPTY_RELATION_TREE)
simultaneous_sort(dist, ind)
if getattr(data, 'dtype', None) != _TD_DTYPE: data = to_timedelta(data, unit=unit, box=False) elif copy: data = np.array(data, copy=True)
import salt.utils import salt.utils.s3
'datadog',
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.5)
from __future__ import unicode_literals
Article.objects.create(headline='foo', pub_date=datetime.now())
if serialized_block['type'] == 'html': self.assertIn('student_view_multi_device', serialized_block) self.assertTrue(serialized_block['student_view_multi_device'])
return self.type == other.get('type') and name_is_eq
self._make_draft_content_different_from_published()
c = County.objects.get(name=name) self.assertEqual(n, len(c.mpoly))
from pandas.compat import range, zip from pandas import compat import itertools
try: user = User.objects.get(id=user_id) except ObjectDoesNotExist: return None
X = check_array(X, accept_sparse=['csr', 'csc'])
index = frame.index columns = frame.columns
assert self.local.get_params() == [self.filters]
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
s = Series([1]) result = s.item() self.assertEqual(result, 1) self.assertEqual(s.item(), s.iloc[0])
self.selenium.find_element_by_tag_name('form').submit() self.wait_page_loaded()
vm_['instance_id'] = data.id
self.assertIn( err_msg, resp.content )
if keep_symlinks: symlinks = __salt__['cp.list_master_symlinks'](__env__, srcpath) fns_ = process_symlinks(fns_, symlinks) for fn_ in fns_: if not fn_.strip(): continue
X, y = datasets.make_classification(n_samples=100000, n_features=20, n_informative=2, n_redundant=10, random_state=42)
logging.getLogger(__name__).info( 'Loading Saltfile from \'{0}\''.format(self.options.saltfile) )
E = np.random.uniform(0, 0.1, size=(len(iris.data), 20))
child.relabel_aliases(change_map)
'SQUELCH_PII_IN_LOGS': True,
with self.assertRaises(NoReverseMatch): reverse(None)
for item in matching: if name not in ret['create']: break
return [ {k: kwargs[k]} for k in sorted(six.iterkeys(kwargs)) ]
self.assertFalse(self.video.is_spinner_shown)
import integration
_ALL_ONES = (2**IPV4LENGTH) - 1 _DECIMAL_DIGITS = frozenset('0123456789')
return self._create_from_codes(np.delete(self.codes, loc))
parse_string = self._find_string_wrapping_expression(mako_template, expression) if parse_string is None: results.violations.append(ExpressionRuleViolation( Rules.mako_js_missing_quotes, expression ))
return check_question_author(user, Thread(id=content["thread_id"]).to_dict())
self.client.logout() response = self.client.post(reverse('donation')) self.assertEqual(response.status_code, 404)
_min_parts = 3 if len(parts) < _min_parts: msg = "At least %d parts expected in %r" % (_min_parts, ip_str) raise AddressValueError(msg)
if sample_weight is None: base_estimator.fit(X_subset, y_subset) else: base_estimator.fit(X_subset, y_subset, sample_weight=sample_weight[subset_idxs])
instructor = UserFactory() allow_access(self.course, instructor, 'instructor') self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
while(True):
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS + PayAndVerifyView.VERIFICATION_STEPS, PayAndVerifyView.MAKE_PAYMENT_STEP, )
'html5_sources': ['http://www.example.com/source.mp4'], 'data': '',
os.remove(test_database_name)
'max_event_size': int,
if freqstr in _rule_aliases: new = _rule_aliases[freqstr] warnings.warn(_LEGACY_FREQ_WARNING.format(freqstr, new), FutureWarning, stacklevel=3) freqstr = new freqstr = _lite_rule_alias.get(freqstr, freqstr)
clf_balanced = PassiveAggressiveClassifier(C=0.1, n_iter=1000, class_weight="balanced") clf_balanced.fit(X2, y2)
return self._deprecated().plot(*args, **kwargs)
freq, ax_freq = _get_freq(ax, series)
return now.replace(tzinfo=tz) + tz.utcoffset(now)
mako_middleware_process_request(self.request) return views.progress(self.request, course_id=unicode(course.id), student_id=self.user.id).content
if not eventtime: eventtime = str(int(time.time()))
estimators = [("Tree", DecisionTreeRegressor()), ("Bagging(Tree)", BaggingRegressor(DecisionTreeRegressor()))]
tag_sha = tag_obj.target.hex
if mod_key not in functions: continue
config = sconfig.master_config('/etc/salt/master') self.assertEqual(config['log_file'], env_fpath) os.environ.clear() os.environ.update(original_environ)
from __future__ import absolute_import import os
addr_str = str(address) self._ip = self._ip_int_from_string(addr_str)
if (extmath.norm(my_mean - my_old_mean) < stop_thresh or completed_iterations == max_iter): return tuple(my_mean), len(points_within) completed_iterations += 1
#sys.path.append(os.path.abspath('some/directory'))
user = cc.User.from_django_user(request.user) thread = cc.Thread.find(thread_id) user.unfollow(thread) return JsonResponse({})
series = [frame.xs(fidx[0]), frame.xs(fidx[3]), frame.xs(fidx[5]), frame.xs(fidx[7]), frame.xs(fidx[5])[:2]]
assert X.ndim == 4 return T.nnet.softmax(X.reshape((X.shape[0], self.dim)) * self.P)
df = _make_frame(True) df.to_csv(path, tupleize_cols=False)
effort = self.store.get_item(course_key.make_usage_key('about', 'end_date')) self.assertEqual(effort.data, 'TBD')
return self.q(css=self._bounded_selector('.cohorts-state')).selected
if hasattr(self, '_cacher'): del self._cacher
split_table = split_tables[0] __, rendered_height = split_table.wrap(0, 0) split_table.drawOn(self.pdf, table_left_padding, y_pos - rendered_height)
def fit(self, X, y): super(CustomSVR, self).fit(X, y) self.data_type_ = type(X) return self
self.assertEqual( first_request["parameters"]["request_uuid"], second_request["parameters"]["request_uuid"] )
return 0.5 - scores
timeout = -1
self.kwds.setdefault('alpha', 0.5)
__virtualname__ = 'junos'
import logging
scaler_batch = StandardScaler().fit(X)
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
if paramvalues['binddn']: connargs['binddn'] = paramvalues['binddn'] if paramvalues['bindpw']: params['mandatory'].append('bindpw')
if name is None: name = data.name
group_id_to_child = ReferenceValueDict( help=_("Which child module students in a particular group_id should see"), scope=Scope.content )
return type( str(self.name), bases, body, )
self.params['map_options'] = self.map_options()
__virtualname__ = 'mdata'
return self._get_full_name()
cls.supplemental_index_information(modulestore, structure)
from __future__ import unicode_literals
redirect_url = reverse( 'embargo_blocked_message', kwargs={ 'access_point': access_point, 'message_key': 'default' } ) yield redirect_url
doc = _generate_doc(ret)
import scipy.sparse
return self._is_on_tab(tab_name)
return Series(self._rmse_raw, index=self._result_index)
assert all([len(arg) == len(args[0]) for arg in args]) return izip(*args)
level += 1 env = _ensure_scope(level, global_dict=global_dict, local_dict=local_dict, resolvers=resolvers, target=target)
self.assertEquals(preview.latex_preview('log2(3)'), r'\log_2(3)')
LogoutPage(self.browser).visit() self._login_as_a_verified_user() self.courseware_page.visit()
rng = self.mlp.rng if self.irange is None: raise ValueError("Recurrent layer requires an irange value in " "order to initialize its weight matrices")
return DataFrame(self._forecast_std_err_raw(h), index=lrange(1, 1 + h), columns=self._columns)
NAME_CHARS = u'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-' NAME_CHARS_W_UNICODE = NAME_CHARS + u'àĚŘǅΦШΩΣӔ'
if when > data['_when']: data['_when'] = when data['_when_run'] = True
def test_to_datetime_format_integer(self): s = Series([2000, 2001, 2002]) expected = Series([Timestamp(x) for x in s.apply(str)])
setup_test_environment() c = Client() c.get("/no_template_view/") return render(request, 'base.html', {'nested': 'yes'})
self.b.friends.add(self.a)
from __future__ import absolute_import
return self.mode_slug
transform = AdditiveChi2Sampler(sample_steps=4) assert_raises(ValueError, transform.fit, X)
#pylint: disable=E0602
self._update_release_dates(self.date_one, self.date_two, self.date_two) self._verify_release_date_source(self.vertical, self.sequential)
self.assertEqual( self.safe_cookie_data._compute_digest(self.user_id), self.safe_cookie_data._compute_digest(self.user_id), )
del intfs['w']
import salt.loader import salt.utils import salt.utils.cloud import salt.utils.validate.net import salt.config from salt import syspaths from salt.ext.six import string_types
if syndic_min_wait is not None: yield syndic_min_wait chunk_ret = yield self.all_returns(pub_data['jid'], finish_futures=[job_not_running], minions_remaining=minions_remaining, )
user = User.objects.get(pk=user.pk)
encoder=CourseSettingsEncoder
instructor = self.make_instructor() self.assertTrue(CourseInstructorRole(self.course.id).has_user(instructor))
self.collection.database.connection.close()
CertificateGenerationConfiguration.objects.create(enabled=True)
X = np.atleast_2d(np.random.uniform(0, 10.0, size=100)).T X = X.astype(np.float32)
self.assertRaises(ValueError, self.read_csv, StringIO(data), header=[0, 1, 2, 3], index_col=[0, 1], names=['foo', 'bar'], tupleize_cols=False)
RSA_X931_PADDING = 5
if kl > tol or not (kl <= tol): raise AssertionError("KL divergence between two " "equivalent models should be 0 but is "+ str(kl))
modulestore().get_item(usage_key)
wua_session = win32com.client.Dispatch('Microsoft.Update.Session')
log.warning( "Error while previewing chemical formula", exc_info=True) result['error'] = _("Error while rendering preview")
rules_for_course = CountryAccessRule.objects.select_related('country').filter( restricted_course__course_key=course_id )
self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS, PayAndVerifyView.PAYMENT_CONFIRMATION_STEP, )
try: category = json_data['location']['category'] class_ = self.load_block_type(category)
passed_jid = clear_load['jid'] if clear_load.get('jid') else None nocache = extra.get('nocache', False)
** blas_info)
result = jboss7.datasource_exists(name='appDS', jboss_config={}, datasource_properties=datasource_properties, profile=None)
bandwidth = estimate_bandwidth(X, quantile=0.2, n_samples=500)
tbls = [self.get_storer(k) for k in keys] s = self.get_storer(selector)
if len(y) == 0: words = generator.randint(n_features, size=n_words) return words, y
ds = DataSource(os.path.join(TEST_DATA, 'texas.dbf')) feat = ds[0][0] self.assertEqual(676586997978, feat.get('ALAND10'))
return 1.0 / (max_squared_sum + int(fit_intercept) + alpha_scaled)
if not name: raise ValueError(u"{key} must contain at least one underscore".format(key=key))
url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()}) self.assert_request_status_code(200, url)
def __virtual__(): return False
if getattr(self, 'video_speed_optimizations', True) and cdn_url: branding_info = BrandingInfoConfig.get_config().get(self.system.user_location)
if x.count(":"): props.append(x.split(":")) else: props.append(['', ''])
raise NotImplementedError('subclasses of Storage must provide a listdir() method')
exc_info_on_loglevel=logging.DEBUG
self.assertFileContains('test/file.txt', 'STATICFILES_DIRS')
cmap.set(self.answer_id, queuestate=queuestate, correctness='incomplete', msg=msg)
settings.TRACKING_BACKENDS.update({'second': None}) backends = self._reload_backends() self.assertEqual(len(backends), 1)
all_item_keys = self._locations_in_subtree(self) newrelic.agent.add_custom_parameter('seq.num_items', len(all_item_keys))
self.assertIsNone(default_storage.directory_permissions_mode) with self.settings(FILE_UPLOAD_DIRECTORY_PERMISSIONS=0o777): self.assertEqual(default_storage.directory_permissions_mode, 0o777)
if comment_id in self.server.config.get('comments', {}): comment = self.server.config['comments'][comment_id] self.send_json_response(comment)
rng = check_random_state(0)
sample_weight = (sample_weight * compute_sample_weight(self.class_weight, y))
else: ret = _load_result(new, ret)
from __future__ import absolute_import import collections import logging import socket import struct import time from contextlib import contextmanager
ws.send('websocket client ready')
__salt__['cmd.run']('attrib -R "{0}"'.format(notify_path))
on_course_publish(self.course.id) requirements = get_credit_requirements(self.course.id, namespace="reverification") self.assertEqual(len(requirements), 0)
tailless = Gecko.objects.create(has_tail=False) tag = TaggedItem.objects.create(content_object=tailless, tag="lizard") self.assertEqual(tag.content_object, tailless)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
win_path.__salt__ = {}
BlockDepthTransformer.collect(block_structure) BlockNavigationTransformer.collect(block_structure) block_structure._collect_requested_xblock_fields()
with tm.assertRaises(NotImplementedError): pd.isnull(self.index)
return open(file_name)
skip_if_no_data() self.train = OCR(which_set='train') self.valid = OCR(which_set='valid') self.test = OCR(which_set='test')
for n_labels in range(2, 10): y_score = np.ones((1, n_labels))
self.theta0, self.thetaL, self.thetaU = theta0, thetaL, thetaU self.corr = corr self.optimizer = 'Welch' self.verbose = verbose
return unicode(self.id)
return modulestore().get_item(self.xblock_keys[block_index])
self.course_fixture = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
warnings.warn("In future versions of pandas, match will change to" " always return a bool indexer.", FutureWarning, stacklevel=3)
arr = np.random.binomial(n=1, p=.01, size=(1000, 10)) df = DataFrame(arr).to_sparse(fill_value=0)
f = lambda x: x.decode(encoding, errors)
self._check_box_return_type(result, 'dict')
ncols = 8 for i in range(2 ** ncols):
xblocks = list(xblock_descriptor.children) for child in xblock_descriptor.children: xblocks.extend(self._get_nested_xblocks(child)) return xblocks
result = sql.read_sql_query('SELECT * FROM test_nan', self.conn) tm.assert_frame_equal(result, df)
grouped = self.tsframe.groupby([lambda x: x.weekday(), lambda x: x.year ])
result = df.drop_duplicates(['AAA', 'B']) expected = df.iloc[[0, 1, 2, 3, 4, 6]] tm.assert_frame_equal(result, expected)
fit_transform = transform
names = [] ldesc_indexes = sorted([x.index for x in ldesc], key=len) for idxnames in ldesc_indexes: for name in idxnames: if name not in names: names.append(name)
import logging
expected_index = pd.Index(o[::-1]) expected_index.name = None
self.assertTrue('/df2 ' in str(store)) self.assertTrue('/df2/meta/values_block_0/meta' in str(store)) self.assertTrue('/df2/meta/values_block_1/meta' in str(store))
return self.redirect_uri
with tm.assertRaises(ValueError): s.plot(yerr=np.arange(11))
from __future__ import absolute_import
break
env_fail_fast_set = ( 'TESTS_FAIL_FAST' in os.environ and os.environ['TEST_FAIL_FAST'] )
n_clusters_1 = len(set(labels)) - int(-1 in labels) assert_equal(n_clusters_1, n_clusters)
Car.cars.create(name="Corvette", mileage=21, top_speed=180) Car.cars.create(name="Neon", mileage=31, top_speed=100)
p, h = prob_max_pool_c01b(z, (pool_rows, pool_cols), top_down = t) func = function([z, t], [p, h], mode = mode_with_gpu)
self.client.logout()
try: from keystoneclient.apiclient.exceptions import \ Unauthorized as kstone_Unauthorized from glanceclient.exc import \ HTTPUnauthorized as glance_Unauthorized HAS_DEPENDENCIES = True except ImportError: HAS_DEPENDENCIES = False
cummax = self.tsframe.cummax() expected = self.tsframe.apply(Series.cummax) tm.assert_frame_equal(cummax, expected)
query = Item.objects.filter(tags=self.t2).query self.assertNotIn(LOUTER, [x.join_type for x in query.alias_map.values()])
if not organizations_enabled(): return None from organizations import api as organizations_api from organizations.exceptions import InvalidOrganizationException try: return organizations_api.get_organization_by_short_name(organization_short_name) except InvalidOrganizationException: return None
def f(): df.loc[100.0, :] = df.ix[0]
FINANCIAL_REPORTS = ENV_TOKENS.get("FINANCIAL_REPORTS", FINANCIAL_REPORTS)
import salt.ext.six as six
C = np.dot(sample_weight, y * y) * 10 if y_min is not None: y[0] = y_min sample_weight[0] = C if y_max is not None: y[-1] = y_max sample_weight[-1] = C
dashboard = DashboardPage(self.browser) dashboard.wait_for_page() return dashboard
if num_threads is None: num_threads = multiprocessing.cpu_count() self.num_threads = num_threads
return False
if hasattr(self, '_choices'): return self._choices
from __future__ import absolute_import import os import yaml import shutil import tempfile
bookmark_data = self.get_bookmark_data(self.vertical_4) bookmark, __ = Bookmark.create(bookmark_data) bookmark_data['display_name'] = self.vertical_4.display_name_with_default self.assert_bookmark_model_is_valid(bookmark, bookmark_data)
_check_plot_works(df.hist, sharex=True, sharey=True)
return getattr(problem_class, 'human_name', problem_class.__name__)
self.panel = Panel(np.random.rand(5, 5, 5))
parent_model = geo_field.model._meta.concrete_model return self._field_column(compiler, geo_field, parent_model._meta.db_table)
if self._is_field_visible("terms_of_service"): terms_text = _(u"Honor Code")
self.course = CourseFactory.create(org='MITx', course='999', display_name='Robot Super Course')
urllib3_logger = logging.getLogger('urllib3') urllib3_logger.setLevel(logging.WARNING)
continue
if video_list: sub_attr = source_subs_name try: generate_subs_from_source({1: sub_attr}, source_subs_ext, source_subs_filedata, item)
self.values_axes = [] for i, (b, b_items) in enumerate(zip(blocks, blk_items)):
database += token try: if exploded_grant[position_tracker + 1] == '.': phrase = 'tables' except IndexError: break
assert_raises(VerificationException, attempt.approve) assert_raises(VerificationException, attempt.deny)
return self[key]
self.assertEquals(cohorts.get_cohort(user, course.id).name, "AutoGroup")
__virtualname__ = 'pkg'
'cache_sreqs': bool,
allows_auto_pk_0 = True
self.assertQuerysetEqual( Item.objects.filter(created__in=[self.time1, self.time2]), ['<Item: one>', '<Item: two>'] )
self.parse_xml()
def natural_key(self): return (self.name,) natural_key.dependencies = ['fixtures_regress.store']
with translation.override('pl'): result = management.call_command('leave_locale_alone_true', stdout=StringIO()) self.assertEqual(result, "pl")
import salt.ext.six as six
result = OrderedSet(self.parents) for parent in self.parents: for ancestor in parent._meta.get_parent_list(): result.add(ancestor) return list(result)
for verification in candidates: if verification.active_at_datetime(deadline): return verification
result = d['a'].fillna(False) | d['b'] expected = Series([True, True]) assert_series_equal(result, expected)
s = s + record.exc_text.decode(sys.getfilesystemencoding())
clean_me = search.findPackages(None, destructive=destructive, package_names=package_names, time_limit=time_limit, exclude=exclude, pkgdir=search.pkgdir)
result = f.clean('21-12-2010') self.assertEqual(result, date(2010, 12, 21))
callback_url_path = reverse('certificates.views.update_example_certificate')
response_dict = self.request_add_users_to_cohort("", self.cohort1, self.course) self.verify_added_users_to_cohort( response_dict, self.cohort1, self.course, expected_added=[], expected_changed=[], expected_present=[], expected_unknown=[] )
assert_almost_equal(np.abs(np.dot(d2[:2], [0, 1])), 1.0)
__array_priority__ = 1000 _typ = 'categorical'
resources = find_release_resources() sh("i18n_tool transifex pull " + " ".join(resources))
rows = self.selenium.find_elements_by_css_selector( '%s #result_list tbody tr' % form_id) self.assertEqual(len(rows), 1)
ret = __salt__['k8s.label_absent'](name, node, apiserver)
__virtualname__ = 'gnome'
w = rng.randn(num_features)
return ''
_locals[key](*validation_arg)
for func in dir(base): if not func.startswith('process_'): continue
wait_for_problem('Problem 2')
"spec", "spec_helpers",
unbalanced = ImageFile(get_image('unbalanced')) self.assertRaises(ValidationError, validate_badge_image, unbalanced)
correct_error_message_text = 'No playable video sources found.' self.assertIn(correct_error_message_text, self.video.error_message_text)
from __future__ import unicode_literals
selector_query = self.q(css=self._bounded_selector(self.content_group_selector_css)) return [ option.text for option in get_options(selector_query) if option.text != "Not selected" ]
return truncate_name('%s_%s_id' % (model._meta.db_table, field.column), 30)
dma1 = pandas.DataFrame(arr1, idx1, idx2) dma2 = pandas.DataFrame(arr2, idx1[::-1], idx2[::-1])
self._has_valid_tuple(tup)
resp = self._get_preview(usage_key, data) self.assertEqual(resp.status_code, expected_code) if content_contains: self.assertIn(content_contains, resp.content) return resp
problem = new_loncapa_problem(xml_str)
cet = CourseEmailTemplate.objects.get(name=None) self.assertIsNotNone(cet)
try: val = int(ogr_field.value) except ValueError: raise InvalidInteger('Could not construct integer from: %s' % ogr_field.value)
try: subprocess.check_call( script, stdout=sys.stdout, stderr=sys.stderr ) except Exception: os.chdir(cwd) raise
return text
uid = force_text(urlsafe_base64_decode(uidb64)) user = UserModel._default_manager.get(pk=uid)
with self.assert_logged_with_message( "SafeCookieData user at request '{}' does not match user at response: '{}'".format( user_at_request, user_at_response ), log_level=log_level, ): yield
spec = list_filter(request, lookup_params, self.model, self.model_admin)
'user_message': _(u"The ordering {ordering} is not supported").format(ordering=order_by_input),
form = Form() form_set = FormSet(instance=Restaurant())
init_file = os.path.join(migration_dir, "__init__.py") self.assertTrue(os.path.exists(init_file))
from __future__ import absolute_import import logging
import salt.utils
ActionChains(self.browser).move_to_element(self.element).perform() self.wait_for_viewer_visibility() return self
Created Certificate for "DBReplica_No.1": "/etc/pki/my_little/certs/DBReplica_No.1.crt"
old_sys_argv = sys.argv sys.argv = [code_path]
stamp = Timestamp('2012-01-01')
def f(): s[l]
STATIC_ROOT = (TEST_ROOT / "staticfiles" / "cms").abspath()
EmptyPromise( lambda: self.q(css=".action-upload-signature").first.present, 'Signature image upload button available' ).fulfill()
axes = df.ix[:, [0]].plot(kind='kde', color='DodgerBlue', subplots=True) self._check_colors(axes[0].lines, linecolors=['DodgerBlue'])
import os
enrollment = _get_fake_enrollment(student_id, course_id) if enrollment and mode is not None: enrollment['mode'] = mode if enrollment and is_active is not None: enrollment['is_active'] = is_active return enrollment
return self.astype(object).putmask(mask, value)
course_image_asset_key = StaticContent.compute_location(course.id, course.course_image) course_image_content = StaticContent(course_image_asset_key, image_name, 'image/png', image_buff) contentstore().save(course_image_content)
__virtualname__ = 'acl'
os.remove(tmp.name)
import logging log = logging.getLogger(__file__)
base_str = '2014-07-01 11:00:00+02:00' base_dt = datetime.datetime(2014, 7, 1, 9) base_expected = 1404205200000000000
__opts__['test'] = orig_test if errors: __context__['retcode'] = 1 return errors return high_
reg_item = PaidCourseRegistration.add_to_order(cart, course_key) return reg_item
with connection.cursor() as cursor: return connection.introspection.get_constraints(cursor, table)
extra = {} for key, value in six.iteritems(data): if key in expected_extra_kws: continue extra[key] = copy.deepcopy(value)
published_xblock2 = self.store.create_item( self.user_id, self.course.id, 'vertical', block_id='test_vertical' )
return self.q(css='.problem-header').text[0]
if existing['code'] == 200:
XA_checked, XB_checked = check_pairwise_arrays(XA.astype(np.float), XB) assert_equal(XA_checked.dtype, np.float) assert_equal(XB_checked.dtype, np.float)
self.run_function('beacons.delete', ['ps']) self.run_function('beacons.save')
safe = isinstance(value, SafeData) value = value.replace(arg, '') if safe and arg != ';': return mark_safe(value) return value
key = lambda course: course.sorting_score courses = sorted(courses, key=key)
if not iboost == self.n_estimators - 1: sample_weight *= np.exp(estimator_weight * incorrect * ((sample_weight > 0) | (estimator_weight < 0)))
ind2 = self.index.copy() inplace_return = ind2.set_labels(new_labels, inplace=True) self.assertIsNone(inplace_return) assert_matching(ind2.labels, new_labels)
for app_label, migrations in self.migrations.items(): for migration in migrations: migration.operations = MigrationOptimizer().optimize(migration.operations, app_label=app_label)
import logging import salt.utils
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
key.__opts__ = {}
return nodelist_true_output or self.nodelist_true.render(context)
>> makeCustomDataframe(5,3)
self.assertEqual(buffer_e, expected_data) self.assertFalse(term.isalive())
index_title = ugettext_lazy('Site administration')
rng = np.random.RandomState([2012, 10, 9]) batch_size = 5 rows = 10 cols = 9 channels = 3 filter_rows = 4 filter_cols = filter_rows num_filters = 6
_win(kernel32.CreatePipe, wintypes.BOOL,
after = expiration + timedelta(seconds=1) self.assertFalse(attempt.active_at_datetime(after))
META_UNIVERSITIES = {'UTx': ['UTAustinX']}
self.assertIsNot(bad_out, ret_output)
clf.sparsify() assert_array_equal(pred, clf.predict(iris.data)) sp_clf.sparsify() assert_array_equal(pred, sp_clf.predict(iris.data))
response_dict = self._get_page_data(response) self.assertEqual(response_dict['current_step'], expected_current_step) self.assertEqual(expected_steps, [ step['name'] for step in response_dict['display_steps'] ])
response = requests.post(url, data=data, headers=headers, verify=False)
if domain and 'edge.edx.org' in domain: return redirect(reverse("signin_user"))
pass
with self.assertRaises(ImproperlyConfigured): finders.FileSystemFinder()
self.base_extauth_bypass_sending_activation_email(True)
staff = UserFactory() allow_access(self.course, staff, 'staff') self.assertTrue(CourseStaffRole(self.course.id).has_user(staff))
__import__(name) return sys.modules[name]
assert_equal(set(SYMMETRIC_METRICS).union( NOT_SYMMETRIC_METRICS, THRESHOLDED_METRICS, METRIC_UNDEFINED_BINARY_MULTICLASS), set(ALL_METRICS))
response = self.client.get(reverse('django-admindocs-filters')) self.assertContains(response, '<title>Template filters</title>', html=True)
if len(names) == 1: return ret[names[0]] return ret
_set_verification_partitions(course_key, icrv_blocks)
self.assertIn(SESSION_KEY, self.client.session)
return [Attribute('src'), Attribute('height'), Attribute('label', ''), Attribute('width'), ]
url(r'^api/val/v0/', include('edxval.urls')),
return True
last_objective_value = ncut_value rotation = np.dot(Vh.T, U.T)
self.assertAlmostEqual(self.ts.corr(self.ts), 1)
ret = self.run_run_plus(fun='fileserver.empty_dir_list', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
if field_name not in self.fields: raise GDALException('invalid field name: %s' % field_name) return [feat.get(field_name) for feat in self]
expected_status = ( status.HTTP_200_OK if CourseMode.DEFAULT_MODE_SLUG in configured_modes else status.HTTP_400_BAD_REQUEST ) self.assert_enrollment_status( as_server=True, is_active=False, expected_status=expected_status, )
return cls.objects.get_or_create( course_id=course_id, group_type=group_type, name=name )
try: etype = etype.__name__ except AttributeError: pass
try: syncing.remove(name) except KeyError: print( ' {LIGHT_RED}*{ENDC} {0} already synced??? ' '{1}'.format(name, output, **self.colors) )
from __future__ import unicode_literals
from __future__ import absolute_import
if step_score: self.scores_.append(step_score(self.estimator_, features)) self.n_features_ = support_.sum() self.support_ = support_ self.ranking_ = ranking_
if self.parse_dates is not None: data, names = _process_date_conversion( data, self._date_conv, self.parse_dates, self.index_col, self.index_names, names, keep_date_col=self.keep_date_col)
from matplotlib import cm default_colors = self._maybe_unpack_cycler(self.plt.rcParams)
protocol = None
assert_false(hasattr(MLPClassifier(algorithm='l-bfgs'), 'partial_fit'))
D = generator.randn(n_features, n_components) D /= np.sqrt(np.sum((D ** 2), axis=0))
if isinstance(self.is_copy, string_types): t = self.is_copy
seen = set() roots = [] for root in self.edges.get(None, ()): roots.extend(self._nested(root, seen, format_callback)) return roots
for i in range(min(len(start_list), len(path_list))): if start_list[i].lower() != path_list[i].lower(): break else: i += 1
gbq.to_gbq(df_different_schema, destination_table, PROJECT_ID, if_exists='replace')
'show_jid': bool,
url = reverse('verify_student_upgrade_and_verify', kwargs={'course_id': unicode(course_id)}) self.assertRedirects(response, url)
params = pipe.get_params(deep=True) params2 = pipe2.get_params(deep=True)
team = self.post_create_team(data=self.build_team_data( name="New team", course=self.test_course_1, description="Another fantastic team", ), user=user)
from salt.modules import influx
if profiles_config is None: profiles_config = vm_profiles_config(profiles_config_path, providers_config) opts['profiles'] = profiles_config
return False
DATE_INPUT_FORMATS = [
'master_uri_format': str,
from __future__ import unicode_literals
result = {} for key in keys: if key in d: result[key] = d[key] return result
to_del = [] if not full:
rval = X.copy()
rendered = pieces["short"]
self.client.post( url_course2, data=json.dumps(self.certificate_exception), content_type='application/json' )
'ENABLE_MAX_SCORE_CACHE': True,
state = (self._corrupt_switch, self._sample_switch, self._bias_switch)
try: certificate_invalidation_data = parse_request_data(request) certificate = validate_request_data_and_get_certificate(certificate_invalidation_data, course_key) except ValueError as error: return JsonResponse({'message': error.message}, status=400)
x, y, z = repr.get_value(borrow=True).T do_3d_scatter(x, y, z)
raise NotImplementedError(str(self.__class__) + " does not implement " "conditional_expectation.")
import logging import os
_step.given('I edit the component') world.wait_for_ajax_complete() _step.given('I save changes')
self.subscriber.read_async(event_handler)
category_msgs = msg_dict[category] for category_msg in category_msgs: msg.append(message_dict[(category, category_msg)])
return self._block_relations[usage_key].parents if usage_key in self else []
self.assertEqual(correct_map.get_correctness('1_2_1'), 'correct')
return "{group}/meta/{key}/meta".format(group=self.group._v_pathname, key=key)
self.assertEqual(expected, dtime.strftime(fmt.encode('utf8')).decode('utf8'))
records = [] lengths = []
qry = 'CHECK TABLE {0}.{1}'.format(s_name, s_table) _execute(cur, qry) results = cur.fetchall() log.debug(results) return results
f = lambda x: x.replace(1, 0, inplace=True) _check_f(data.copy(), f)
_fh.writelines(rules)
#])
return Packer(default=default, encoding=encoding, unicode_errors=unicode_errors, use_single_float=use_single_float, autoreset=autoreset, use_bin_type=use_bin_type).pack(o)
NO_BOTO_MODULE = True BOTO_NOT_CONFIGURED = True try: import boto NO_BOTO_MODULE = False try: boto.connect_iam() BOTO_NOT_CONFIGURED = False except boto.exception.NoAuthHandlerFound: pass except ImportError: pass
return self.find_css('#staff_lock')[0].is_selected()
rng = np.random.RandomState(0) X = rng.randn(10, 2) connectivity = kneighbors_graph(X, 5, include_self=False)
self.assertEqual(self.factory(lhs), self.factory(rhs))
create_sql = sql.get_schema(self.test_frame1, 'test', 'sqlite') self.assertTrue('CREATE' in create_sql)
rng = np.random.RandomState(0) X, y = make_regression(n_samples=20, n_features=1, random_state=0, noise=4.0, bias=100.0)
TMP = os.path.join(SYS_TMP_DIR, 'salt-tests-tmpdir')
User.objects.filter(username='test').update(is_active=False) self.assertFalse(check_password({}, 'test', 'test'))
import salt.utils.odict from salt.modules import seed from salttesting.helpers import ensure_in_syspath
if _int64_overflow_possible(shape): raise ValueError('cannot deconstruct factorized group indices!')
if srs: self.srs = srs
if 'database' not in kwargs: return False if user_exists(username, **kwargs): return False
if isinstance(member, dict):
resolve('/')
start_date = datetime(2015, 7, 1) end_date = datetime(2015, 7, 1)
self.send_get(self.anonymous_client, expected_status=401) self.send_patch(self.anonymous_client, {}, expected_status=401)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
self.set_time("#due_time", time)
self.children = []
return self.transform(T)
for member in pkg_files: member.uid = uid member.gid = gid member.uname = uname member.gname = gname
import salt.ext.six as six
'shoppingcart',
actual = GroupConfiguration.get_or_create_content_group(self.store, self.course)
__salt__['cmd.run']('attrib -R "{0}"'.format(notify_path))
r = Restaurant.objects.get(pk=self.r1.pk) p = r.place with self.assertNumQueries(0): self.assertEqual(p.restaurant, r)
attempt.status = "must_retry" attempt.system_error("System error") attempt.approve() attempt.status = "must_retry" attempt.deny(DENY_ERROR_MSG)
from __future__ import unicode_literals
unhandled_params = unhandled_params[:-len(defaults)]
pass
iris = load_iris() X = iris.data[:, [0, 2]] y = iris.target X = X[y != 2] y = y[y != 2]
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
def test_no_mlk_before_1984(self): class MLKCalendar(AbstractHolidayCalendar): rules = [USMartinLutherKingJr]
'master_pubkey_signature': str,
self.dashboard_page.visit()
a = Timestamp('3/12/2012') b = Timestamp('3/12/2012', tz=utc)
create_account(self.ALTERNATE_USERNAME, self.OLD_PASSWORD, self.NEW_EMAIL)
if field.primary_key: return True
out.insert(0, head) (head, tail) = os.path.split(head)
from salt.executors import ModuleExecutorBase import salt.utils import salt.syspaths
if kw_overrides_match is None: return profile_match return kw_overrides_match
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
if self.date_field is None: raise ImproperlyConfigured("%s.date_field is required." % self.__class__.__name__) return self.date_field
exc_info_on_loglevel=logging.DEBUG
os.remove(path)
for leaf in np.where(tree.children_left == TREE_LEAF)[0]: self._update_terminal_region(tree, masked_terminal_regions, leaf, X, y, residual, y_pred[:, k], sample_weight)
existing_group_id, _ = cohorts.get_group_info_for_cohort(cohort) if existing_group_id is not None: unlink_cohort_partition_group(cohort)
__func_alias__ = { 'list_nictags': 'list' }
self._loglevel_config_setting_name_, self.config['log_level']
grease = Book.objects.using('other').create(title="Greasemonkey Hacks", published=datetime.date(2005, 11, 1))
@python_2_unicode_compatible class Car(models.Model): make = models.CharField(max_length=20, unique=True, null=True) drivers = models.ManyToManyField('Driver', through='CarDriver')
window = tensor.alloc(0.0, batch, channel, res_r, res_c, pr, pc) window.name = 'unravlled_winodows_' + name
assert mlp_composite.get_input_space() == fl.get_input_space()
def makeStringIndex(k=10, name=None): return Index(rands_array(nchars=10, size=k), name=name)
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
self._nzoom = num_zoom
self.assertRaises(TypeError, store.append, 'df', Series(np.arange(10)))
_RE_WHITESPACE = re.compile(r'[\r\n]+|\s{2,}')
return key
face = sp.face(gray=True)
result = type(message)("")
continue
expected = digits.target[n_samples / 2:] predicted = classifier.predict(data[n_samples / 2:])
from openedx.core.djangoapps.credit.api.eligibility import ( is_credit_course, remove_credit_requirement_status as api_remove_credit_requirement_status )
from salttesting import TestCase, expectedFailure from salttesting.helpers import ensure_in_syspath
datastore_cluster_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.StoragePod, datastore_cluster_name) if datastore_cluster_ref: return {datastore_cluster_name: 'datastore cluster already exists'}
from salt.modules import logadm
shiftedFrame = self.tsframe.shift(5, freq=datetools.BDay()) self.assertEqual(len(shiftedFrame), len(self.tsframe))
download_unittest_reports(opts) if opts.test_without_coverage is False: download_coverage_report(opts)
X = iris.data[:, pair] y = iris.target
from __future__ import absolute_import
break
if s.name == 'values': s.name = None return s
self.assertEqual(item.title, title) self.assertEqual(item.notes, notes)
partitions = self._get_partition_info() self.assertEqual(len(partitions), 1) self.assertEqual(partitions[0]["scheme"], "cohort")
set_course_cohort_settings(course_key=self.course.id, is_cohorted=True) check_cohorted(True)
from datetime import datetime, date, time, MINYEAR
import pandas as pd
pass
def test_read_excel_blank(self): actual = self.get_exceldf('blank', 'Sheet1') tm.assert_frame_equal(actual, DataFrame())
mock_results = MagicMock(return_value=[result_factory(n) for n in range(5)]) with patch.object(StudentModule, 'objects') as patched_manager: patched_manager.filter.return_value = mock_results
ctx = self.cf.option_context(option_name, context_value) self.assertEqual(self.cf.get_option(option_name), original_value)
for fh in (wkt_f, wkb_f): fh.seek(0) pnt = fromfile(fh) self.assertEqual(ref_pnt, pnt)
self.assertSaltTrueReturn(ret)
self.assertTrue('Activate Course Enrollment' in response.content)
import salt.utils from salt.exceptions import SaltException
if values.dtype.fields is not None: values = values[self.cname]
X, y = X[y < 2], y[y < 2]
module = CapaFactory.create(due=self.yesterday_str, done=True) self.assertFalse(module.should_show_save_button())
if not len(w) > 0: raise AssertionError("No warning raised when calling %s" % func.__name__)
raise KeyError(key)
W[0, 1] = .5 W[0, 2] = 1. W[0, 3] = 2.
root = get_or_create_root()
if options is None: options = '' do_matrix = 'matrix' in options do_qubit = 'qubit' in options do_numerical = 'numerical' in options
import pandas as pd import unittest import warnings
if self.is_legacy_event: self._set_legacy_event_type() self.process_legacy_fields() self.process_event() self.dump_payload()
if sig: return __salt__['status.pid'](sig)
return "split_test"
time.sleep(0.5)
f = CharField() self.assertEqual(f.widget_attrs(TextInput()), {}) self.assertEqual(f.widget_attrs(Textarea()), {})
empty = DataFrame() self.assertIsNone(empty.last_valid_index()) self.assertIsNone(empty.first_valid_index())
combined = self._data.combine(blocks, copy=copy) result[dtype] = self._constructor(combined).__finalize__(self)
self.saltRaetKey.status(remote.role, remote.pubber.keyhex, remote.verfer.keyhex)
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
if not m_data: return
all_proba = Parallel(n_jobs=n_jobs, verbose=self.verbose, backend="threading")( delayed(parallel_helper)(e, 'predict_proba', X, check_input=False) for e in self.estimators_)
right = df.copy() right.iloc[1:4, 1:3] *= -2
X = 3 * diabetes.data
SECRET_KEY = ''
self.conn.put_method.return_value = method_ret self.conn.put_integration.return_value = method_integration_ret self.conn.put_method_response.side_effect = ClientError(error_content, 'put_method_response')
min_soft = MAX_OPEN_FILES[limits]['soft_limit'] min_hard = MAX_OPEN_FILES[limits]['hard_limit']
try: from netaddr import all_matching_cidrs HAS_NETADDR = True except ImportError: HAS_NETADDR = False
self.client.login(username=self.coach.username, password="test")
assert_raises(ValueError, cval.KFold, 5, 1.5) assert_raises(ValueError, cval.StratifiedKFold, y, 1.5)
if settings.FEATURES.get('AUTOMATIC_AUTH_FOR_TESTING'): urlpatterns += ( url(r'^auto_auth$', 'student.views.auto_auth'), )
return {"result": "inclusion_no_params_with_context - Expected result (context value: %s)" % context['value']}
res[b][a] = group.sum()
if field_type is None: return errors
if hasattr(arr, '__iter__') and not \ isinstance(arr, string_and_binary_types): arr = [tz_replacer(s) for s in arr] else: arr = tz_replacer(arr)
for i in list(set(self.indices.keys()) - set(restricted)): ind = self.indices[i]
import salt.ext.six as six
self.assertEqual(ONE_TO_ONE_CLASSES, {f.__class__ for f in o2o_type_fields})
with tm.assert_produces_warning(): sql.to_sql(df, "test_frame3_legacy", self.conn, flavor="sqlite", index=False)
self.wait_for_field(field_id) self.make_field_editable(field_id) return self.mode_for_field(field_id) == 'edit'
try: import boto import boto3 from boto.exception import BotoServerError
old_tab_list = course_item.tabs
self.assertFalse(BulkEmailFlag.feature_enabled(course_id))
resp = self.client.get_html(get_url('container_handler', self.vert_loc)) self.assertEqual(resp.status_code, 200)
return SingleBlockManager( [block.make_block_same_class(values, placement=slice(0, len(values)), ndim=1, fastpath=True)], self.axes[1])
target = [-1] * len(JUNK_FOOD_DOCS) + [1] * len(NOTJUNK_FOOD_DOCS)
pass
tic = labels[0][:-1] != labels[0][1:] for lab in labels[1:-1]: tic |= lab[:-1] != lab[1:]
output = self.engine.render_to_string('inheritance35', {'optional': 2}) self.assertEqual(output, '13')
startup.enable_microsites() directories = LOOKUP['main'].directories self.assertEqual(len([directory for directory in directories if 'external_module' in directory]), 1)
course_id = None
if unsafely: exec_fn = codejail_not_safe_exec else: exec_fn = codejail_safe_exec
raise TypeError('Expected sequence or array-like, got ' 'estimator %s' % x)
assert_array_almost_equal(comp_a[:9], comp_r[:9]) assert_array_almost_equal(comp_a[9:], comp_r[9:], decimal=2)
return relative_name
super(ViewsExceptionTestCase, self).setUp()
import salt.config as config import salt.utils.cloud from salt.exceptions import SaltCloudSystemExit, SaltCloudException
actual = grouped_ser.filter(lambda x: len(x) > 1) expected = ser.take(expected_indexes) assert_series_equal(actual, expected)
@ignore_warnings def decorator_no_warning(): _warning_function() _multiple_warning_function()
from salt.modules import poudriere
user_id = abs(hash(username))
with self.assertRaises(Http404): get_object_or_404(a1.article_set, title__contains="Camelot")
course = modulestore().get_course(course_id, depth=2)
regex = r'^\d+'
content = contentstore().find(asset_key, throw_on_not_found=False) self.assertIsNone(content)
a, b = first, second assert a not in b, "%s: %r is in %r" % (msg.format(a, b), a, b)
template_pdf = "certificate-template-{id.org}-{id.course}.pdf".format(id=course_id)
tmp = X - X.max(axis=1)[:, np.newaxis] np.exp(tmp, out=X) X /= X.sum(axis=1)[:, np.newaxis] return X
self.assertEqual(result1.columns.freqstr, 'AS-JAN') self.assertEqual(result2.columns.freqstr, 'AS-JAN')
result = len0pts.resample('A-DEC').mean() self.assertEqual(len(result), 0)
with self.assertRaises(ValueError): str(qs.query)
pofile = os.path.join(proj_dir, 'locale', 'fr', 'LC_MESSAGES', 'django.po')
tasks = instructor_task.api.get_instructor_task_history(course_id, module_state_key, student)
index = self.create_series().index[:0] f = DataFrame(index=index)
time_tuple = (years, months, days, hours, minutes, seconds, 0)
'' if '.' in field_type else 'models.', field_type,
return True
use = zipped[:1]
if raise_error is not None: raise raise_error
cdf_series = cdf.col1 self.assertTrue(isinstance(cdf_series, CustomSeries)) self.assertEqual(cdf_series.custom_series_function(), 'OK')
super(MultinomialSampler, self).__init__(0, *args, **kwargs)
get_blob_service_properties = show_blob_service_properties
return NAMESPACE_CHOICES
if not compat.is_platform_windows(): f('M8[ns]')
from __future__ import absolute_import import logging
def bad_then_good_password(index=[0]): index[0] += 1 if index[0] <= 2: return '1234567890' return 'password'
new_message = ', '.join(str(arg) for arg in new_exc.args)
mode = 'partitions'
import logging
if policy == {}:
regex = r'\d+.\d+'
check(self.zbseries, self.zbseries * 2) check(self.zbseries, self.zbseries2) check(self.ziseries, self.ziseries2)
self.assertEquals( len(self.store.get_items(course_key.for_branch(None), settings={'display_name': display_name})), expected_number )
elif (accepted_count * 4) >= mof_s: level = logging.INFO
return ( context["is_requester_privileged"] or context["cc_requester"]["id"] == cc_content["user_id"] )
cc_thread, context = _get_thread_and_context( request, thread_id, retrieve_kwargs={"user_id": unicode(request.user.id)} ) serializer = ThreadSerializer(cc_thread, context=context) return serializer.data
for alias in repos_cfg.sections(): repo_meta = _get_repo_info(alias, repos_cfg=repos_cfg)
from __future__ import absolute_import import logging import os import re
class A(DataFrame):
with self.assertRaises(xmodule.exceptions.NotFoundError): module.rescore_problem()
course_publish_orphans = self.store.get_orphans(course_locator_publish)
if amount_value < mode_info.min_price: error_msg = _("No selected price or selected price is too low.") return self.get(request, course_id, error=error_msg)
return get_test_system(course_id=self.course.id)
check_is_fitted(self, "classes_") X = check_array(X, accept_sparse='csr') return (safe_sparse_dot(X, self.feature_log_prob_.T) + self.class_log_prior_)
unique_username = 'user' + str(uuid.uuid4().hex)[:12] unique_email = unique_username + "@example.com" return unique_username, unique_email
return [ block for block in modulestore().get_items( course_key, qualifiers={"category": category}, revision=ModuleStoreEnum.RevisionOption.published_only, ) if _is_in_course_tree(block) ]
import integration import salt.utils
course = self._create_course("verified") self._set_contribution("12.34", course.id)
if callable(default): default = default() default = field.get_db_prep_save(default, self.connection) return default
for periodic_cb in six.itervalues(self.periodic_callbacks): periodic_cb.start()
self.assertEqual(len(self.login_failed), 1)
params = self._signed_callback_params(self.order.id, self.COST, self.COST, decision='DECLINE') result = process_postpay_callback(params)
supports_select_for_update_with_limit = False supports_temporal_subtraction = True
rng = check_random_state(0) n_features = 5 n_samples = 50 n_output = 3
if getattr(self.options, 'daemon', False) is True: return
management.call_command("check", stdout=six.StringIO())
class Bunch(dict): def __getattr__(self, name): return self[name]
return tensor.dot(inputs[0], self.wxf)
self.assertTrue(linode._validate_name('foo-bar'))
new_group_2 = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, user_partition) self.assertEqual(new_group, new_group_2)
mgmt_command = -1
from pandas import Index return Index(self).is_monotonic
from __future__ import absolute_import from contextlib import contextmanager
r.META = {'HTTP_ACCEPT_LANGUAGE': 'es-us'} self.assertEqual(g(r), 'es')
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
from salt.states import supervisord
expected_url = _third_party_login_url( backend_name, "login", redirect_url=_finish_auth_url(params), ) self.assertContains(response, expected_url)
tm._skip_if_no_pytz() import pytz
ide_controllers[device.key] = len(device.device)
self.assertIn('Welcome to edX.', self.video.captions_text)
state_run = self.run_function('state.sls', mods='requisites.onfail_in_simple')
import salt.ext.six as six from salt.ext.six.moves import range from salt.config import minion_config
from openpyxl.cell import get_column_letter
import salt.utils.http
changes_needed = True
new_block = self.store.get_item(new_block.location)
'environment': str,
return self.best_estimator_.transform(Xt)
HAS_IMPORTLIB = False
mako_middleware_process_request(self.request)
DATE_INPUT_FORMATS = [
try: from django.conf import settings lib_path = settings.GDAL_LIBRARY_PATH except (AttributeError, EnvironmentError, ImportError, ImproperlyConfigured): lib_path = None
self.assertEqual(w1.choices, [1, 2, 3])
SERVICE_VARIANT = os.environ.get('SERVICE_VARIANT', None)
url(r'^{}/all_sequential_open_distrib$'.format(settings.COURSE_ID_PATTERN), 'class_dashboard.views.all_sequential_open_distrib', name="all_sequential_open_distrib"),
import integration from salt.utils import event
pro = Book.objects.using('default').get(title='Pro Django')
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
param_obj = getattr(self._obj, param, None) if not (callable(param_obj) or isinstance(param_obj, property) or inspect.isgetsetdescriptor(param_obj)): param_obj = None
dummy_mat = dummy_mat[:, 1:] dummy_cols = dummy_cols[1:]
assign_default_role(course_key, user_who_created_course)
self._create_courses_and_enrollments( ("MyOrg", True), ("myorg", True) )
self.assert_enrollment_status()
def assert_series_equal(left, right, check_dtype=True, check_index_type='equiv', check_series_type=True, check_less_precise=False, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, obj='Series'):
self.user_partition.scheme.current_group = groups[1] group2_id = self.partition_service.get_user_group_id_for_partition(user_partition_id) self.assertEqual(group2_id, groups[1].id)
def test_argumented(self): class Test(object): @method_decorator(ClsDec(False)) def method(self): return True
'cache_jobs': bool,
module1.set_state_from_lcp() self.assertEqual(module1.lcp.inputs.keys(), module1.input_state.keys())
self.assertIn( ("migrations", "0001_squashed_0002"), recorder.applied_migrations(), )
for other_label in unique_labels: if other_label != curr_label: other_mask = labels == other_label other_distances = np.mean( current_distances[:, other_mask], axis=1) inter_clust_dists[mask] = np.minimum( inter_clust_dists[mask], other_distances)
return PROCESSOR_MODULE.render_purchase_form_html(cart, **kwargs)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salt.utils import immutabletypes
return getattr(settings, 'SOCIAL_AUTH_OAUTH_SECRETS', {}).get(self.backend_name, '')
np.testing.assert_array_equal(grad_x.data[grad_x.data > 0], grad_y.data[grad_y.data > 0])
if issubclass(self.dtype.type, np.floating): v = float(v) self.values.fill_value = v
for name in SCORERS.keys(): yield check_scorer_memmap, name
self.process_input_line('import matplotlib.pyplot as plt', store_history=False) self._pyplot_imported = True
if settings.COMPREHENSIVE_THEME_DIR: enable_comprehensive_theme(settings.COMPREHENSIVE_THEME_DIR)
s = Series()
dict(safe_zip(range(2), (0.8, 1.3))))
i1 = Index(['a', 'b', 'c']) i2 = Index(['a', 'b', 'c'])
idx = self.create_index()
for key, value in six.iteritems(data): if key in expected_extra_kws: continue ret['kwargs'][key] = value
def ordered_dict_presenter(dumper, data): return dumper.represent_dict(six.iteritems(data)) yaml.add_representer( OrderedDict, ordered_dict_presenter, Dumper=yaml.dumper.SafeDumper)
pass
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
ret['ping_status'] = bool(len(done))
X = np.asarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
result = index.append([]) self.assert_index_equal(result, index)
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'joyent'
for field_name in self.EXTRA_FIELDS: if self._is_field_visible(field_name): self.field_handlers[field_name]( form_desc, required=self._is_field_required(field_name) )
pkginfo = _get_package_info(target, saltenv=saltenv)
def _str_header(self, name, symbol='`'): return ['.. rubric:: ' + name, '']
raise
prefix = prefix or '=' targets.append('{0}{1}{2}'.format(param, prefix, verstr))
import salt.config
import logging import os
if first_octet < 1: return False elif first_octet > 223: return False elif first_octet == 127: return False
args.extend(getattr(operation, 'args', []) or []) keywords.update(getattr(operation, 'keywords', {}) or {}) operation = operation.func
from salt.utils.odict import OrderedDict
self.assertContains(response, checkbox_html, html=True) self.assertContains(response, org_name_string)
if exc.winerror == 2: return target raise
X, y = datasets.make_friedman1(n_samples=1200, random_state=random_state, noise=1.0) X_train, y_train = X[:200], y[:200] X_test, y_test = X[200:], y[200:]
if with_output_activation: output_activation = ACTIVATIONS[self.out_activation_] activations[i + 1] = output_activation(activations[i + 1])
if not cls.is_restricted_course(course_key): return default_path
html_additional_pages = {}
ax1.axvline(x=silhouette_avg, color="red", linestyle="--")
X = [[0]] Y = [[1], [2]] D = euclidean_distances(X, Y) assert_array_almost_equal(D, [[1., 2.]])
chapters = courses2[0].get_children() self.assertEquals(2, len(chapters)) self.assertIn(new_chapter_display_name, [item.display_name for item in chapters])
self.assertContains(resp, 'Robot_Super_Course')
return _get_next_prev(self, date, is_previous=True, period='year')
self.addCleanup(self._mock_paver_needs.stop) self.addCleanup(os.remove, self.f.name)
args.log_file = os.path.realpath(args.log_file)
assert_less(0, 1) _assert_less(0, 1) assert_raises(AssertionError, assert_less, 1, 0) assert_raises(AssertionError, _assert_less, 1, 0)
self.assertFalse(utils.ancestor_has_staff_lock(self.orphan))
if fill_value is None: fill_value = self.fill_value if kind is None: kind = self.kind return SparseArray(self.values, sparse_index=self.sp_index, fill_value=fill_value, kind=kind, copy=copy)
import integration import salt.version from salt import config
log.warning( '{0} remote \'{1}\' is an empty repository and will ' 'be skipped.'.format(self.role, self.id) ) return False
new_f.func_name = f.func_name return new_f
(True, False), (True, True),
return len(tsql_query(query="SELECT name FROM sysusers WHERE name='{0}'".format(username), **kwargs)) == 1
self.assertQuerysetEqual(Place.objects.filter(supplier__name="foo"), []) with self.assertRaises(FieldError): Restaurant.objects.filter(supplier__name="foo")
(32, False, True, u"True"),
return check_sum_of_calls(XBlock, ['__init__'], instantiations, instantiations, include_arguments=False)
super(PresenterTestCase, self).tearDown()
requests.put( '{}/set_config'.format(COMMENTS_STUB_URL), data=self.get_config_data() )
instructor = UserFactory.create(username="instructor", email="instructor@e.com", password="test") role = CourseInstructorRole(self.course_limited.id) role.add_users(instructor)
self.functions['saltutil.sync_all'](saltenv='base')
import salt.utils from salt.modules import ini_manage as ini
continue
if check_dtype: lcd_dtype = frame.values.dtype self.assertEqual(lcd_dtype, result0.dtype) self.assertEqual(lcd_dtype, result1.dtype)
skip_perm_errors = self.options.eauth != ''
from __future__ import absolute_import import logging import os import tempfile
sitemap_url = reverse('django.contrib.sitemaps.views.sitemap')
filter_selected_events = lambda event: event.get('name', '') == 'edx.ui.lms.outline.selected' selected_events = self.wait_for_events(event_filter=filter_selected_events, timeout=2)
elif not yield_descendants_of_unyielded and not any(yield_results[parent] for parent in parents): continue
output = self._run_command(self.TEST_ORG) self._assert_output( output, (self.user, self.courses[0].id, True), expect_pref_datetime=False )
pca.fit(X_digits)
other = Int64Index(np.arange(25, 14, -1))
return self._block.get_values(dtype=object)
return self.set_ordered(False, inplace=inplace)
if isinstance(ff.widget, widgets.RelatedFieldWidgetWrapper): widget = ff.widget.widget else: widget = ff.widget
"xmodule_js", "common_static",
delta -= datetime.timedelta(calendar.leapdays(d.year, now.year))
from course_modes.models import CourseMode
self.generated_operations = {}
cv = list(super(ValidationKFold, self).__iter__()) for train, valid, test in get_k_fold_splits(cv): yield train, valid, test
def clear_counties(): County.objects.all().delete()
import salt.client import salt.utils import salt.utils.virt import salt.utils.cloud import salt.key from salt.utils.odict import OrderedDict as _OrderedDict
try:
SplitModuleTest.modulestore = None
if isinstance(obj, Promise): return force_text(obj) super(LocalizedJSONEncoder, self).default(obj)
FINANCIAL_ASSISTANCE_MIN_LENGTH = 800 FINANCIAL_ASSISTANCE_MAX_LENGTH = 2500
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
def downward_state(self, state): return state def downward_message(self, state): return state
skip_cmds = ('AIX',)
if isinstance(template_name, (list, tuple)): template = select_template(template_name, using=using) else: template = get_template(template_name, using=using) return template.render(context, request)
ssh = salt.client.ssh.SSH(opts)
__virtualname__ = 'network'
level_index = frame._get_axis(axis).levels[level]
pass
y_true, _, probas_pred = make_prediction(binary=True)
try: return self[key] except (KeyError, ValueError, IndexError): return default
return
if len(name) > 255: name, ext = os.path.splitext(name) ext = ext[:255] name = name[:255 - len(ext)] + ext
log.debug('Destroying carbon socket')
] DATETIME_INPUT_FORMATS = [
val = _dmi_cast(key, line.strip(), clean) if val is not None: key_data[1].append(val)
self.click_button('handout_clear')
USFedCal = get_calendar('USFederalHolidayCalendar') holidays0 = USFedCal.holidays(datetime(2015, 7, 3), datetime(
django_user_service = DjangoXBlockUserService(self.anon_user) xb_user = django_user_service.get_current_user() self.assertTrue(xb_user.is_current_user) self.assert_is_anon_xb_user(xb_user)
ret['changes'].pop('diff', None) return _error(ret, 'Parent directory not present')
if subtitles: self.assets.append('subs_{}.srt.sjson'.format(subtitle_id)) self.navigate_to_course_unit()
self.errcheck = check_cs_get dbl_param = POINTER(c_double)
EmptyPromise(self.is_timestamp_visible, 'Timestamp Visible', timeout=30).fulfill()
assert_raises(ValueError, svm.SVC(C=-1).fit, X, Y)
self.assertEqual(len(list(pair.flatten())), 3)
print("Computing random projection") rp = random_projection.SparseRandomProjection(n_components=2, random_state=42) X_projected = rp.fit_transform(X) plot_embedding(X_projected, "Random Projection of the digits")
from __future__ import unicode_literals
response = self.client.get(self.url) self.assert_no_xss(response, '<script>alert("XSS")</script>')
return self._cohort_name( self._get_cohort_options().filter(lambda el: el.is_selected()).first.text[0] )
if dtype == u('datetime64'):
expected = left_f(s_nat, Timestamp('nat')) result = right_f(Timestamp('nat'), s_nat) tm.assert_series_equal(result, expected)
clf = MultinomialNB() assert_raises(ValueError, clf.fit, -X, y2) y_pred = clf.fit(X, y2).predict(X)
CELERY_ALWAYS_EAGER = True
return self.q(css=self.BOOKMARKS_BUTTON_SELECTOR).visible
Registry.enabled = True
if auth_app.User._meta.swapped: return ''
from __future__ import absolute_import
raise AbstractMethodError(self)
if proto == ISQLQuote: return self else: raise Exception('Error implementing psycopg2 protocol. Is psycopg2 installed?')
from __future__ import absolute_import import time
pass
from __future__ import unicode_literals
def check_len(item, name): length_msg = ("Length of '{0}' ({1}) did not match the length of " "the columns being encoded ({2}).")
if average is not None: return np.average(score, weights=average_weight) else: return score
if krel[0] > 5 or (krel[0] == 5 and krel[1] > 0): if not os.path.exists('/usr/sbin/rcctl'): return __virtualname__
self.assertEqual(len(snapshot['country_rules']), len(country_rules))
self.assertEqual(df.set_index('a').to_csv(decimal='^'), expected)
memory_oper = ['read', 'write'] memory_scope = ['local', 'global']
log.info('Starting the Salt Publisher on {0}'.format(pub_uri)) pub_sock.bind(pub_uri)
if 'children' in draft_block.fields: return any( [has_changes_subtree(child_block_id) for child_block_id in draft_block.fields['children']] )
self.assertEqual( res_json['message'], "{user} is not enrolled in this course. Please check your spelling and retry.".format( user=self.certificate_exception['user_name'] ) )
return self.q(css='{} .entrance-exam-task-history-table'.format(self.EE_CONTAINER)).is_present()
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
self.selenium.find_element_by_xpath('//input[@value="Save"]').click() self.wait_page_loaded()
estimator = clone(self.estimator) if self.verbose > 0: print("Fitting estimator with %d features." % np.sum(support_))
return urlparse(self.runtime.handler_url(self.block, 'handler', query=query_string)).query
return self.get_text('.group-configuration-description')
self.assertRaises(ValueError, store.put, 'c', df[10:], append=True)
q = Tag.objects.filter(parent__parent__isnull=False)
s = Series(len(index), index=index) s = s[::-1]
s = get_serializer(format)() s.serialize(queryset, **options) return s.getvalue()
no = models.IntegerField(verbose_name="Number", blank=True, null=True)
components = self.q(css=".edx-notes-wrapper") return [AnnotatableComponent(self.browser, component.get_attribute("id")) for component in components]
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
qs = SouthTexasCity.objects.annotate(perim=Perimeter('point')) for city in qs: self.assertEqual(0, city.perim.m)
int2byte = operator.methodcaller("to_bytes", 1, "big")
__salt__['file.replace']( '/etc/default/locale', '^LANG=.*', 'LANG="{0}"'.format(locale), append_if_not_found=True )
if not name: return 'Required parameter "name" not passed'
ret = self.get_cache_returns(jid) if ret != {}: found.update(set(ret)) yield ret
XA_checked, XB_checked = check_pairwise_arrays(XA, XB.astype(np.float)) assert_equal(XA_checked.dtype, np.float) assert_equal(XB_checked.dtype, np.float)
__virtualname__ = 'ip'
if type == 'source': return ret
log = logging.getLogger(__name__)
lmask = llab == -1 lany = lmask.any() rmask = rlab == -1 rany = rmask.any()
return self.values.data
from __future__ import absolute_import
version = '0.1' release = '0.1'
return __virtualname__
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if compat.PY3: return self.__unicode__() return self.__bytes__()
class OFTString(Field): pass
mock_from_django_user.return_value = Mock()
return self.q(css="button[data-url='accomplishments']").visible
import salt.utils import salt.utils.validate.net from salt.ext.six.moves import range from salt.exceptions import CommandExecutionError
while listening_to_events: print ws.recv()
from __future__ import absolute_import
field_dictionary, filter_dictionary, _ = LmsSearchFilterGenerator.generate_field_filters() self.assertTrue('start_date' in filter_dictionary) self.assertEqual(0, len(field_dictionary['course']))
from __future__ import absolute_import
mean_square_grad = sharedX(param.get_value() * 0.) mean_square_dx = sharedX(param.get_value() * 0.)
est = DummyRegressor() est.fit(X_learn, y_learn) y_pred_learn = est.predict(X_learn) y_pred_test = est.predict(X_test)
mode = 2 if Minv is None: Minv_matvec = get_inv_matvec(M, symmetric=True, tol=tol) else: Minv = _aslinearoperator_with_dtype(Minv) Minv_matvec = Minv.matvec M_matvec = _aslinearoperator_with_dtype(M).matvec
add_url = reverse('admin:admin_views_article_add') response = self.client.get(add_url[:-1]) self.assertRedirects(response, add_url, status_code=301)
resp = self.client.delete(reverse_usage_url('xblock_handler', usage_key)) self.assertEqual(resp.status_code, 204)
from salttesting import skipIf from salttesting.helpers import ( ensure_in_syspath, requires_network ) ensure_in_syspath('../../')
sub_objs = field.bulk_related_objects(new_objs, self.using) self.collect(sub_objs, source=model, nullable=True)
PersonModel = PersonWithHeightAndWidth File = ImageFile
location = models.CharField(max_length=100) villain = models.ForeignKey(Villain, models.CASCADE) def __str__(self): return self.location
from __future__ import absolute_import, print_function import sys import inspect import textwrap import functools
try: CourseTeamIndexer.index(kwargs['instance']) except ElasticSearchConnectionError: pass
if tol > 0.0 and ewa_diff <= tol: if verbose: print('Converged (small centers change) at iteration %d/%d' % (iteration_idx + 1, n_iter)) return True
__salt__
for cline in content.split('\n'): new_file.append(cline + '\n')
dists_m = [3553.30384972258, 1243.18391525602, 2186.15439472242]
obj = (klass, ('HASHED', obj.dtype, obj.shape, obj.strides))
with check_mongo_calls(0): CourseOverview.get_from_id(course.id)
html = module.get_problem_html()
assert len(key) <= 250 return self.cache.get(key)
n_samples = K.shape[0] n_targets = y.shape[1]
FEATURES = { 'DISPLAY_DEBUG_INFO_TO_STAFF': True,
self.xmodule.is_condition_satisfied = lambda: True self.xmodule.descriptor.get_children = lambda: []
s = Series([1, 2, 3]) csv_str = s.to_csv(path=None) self.assertIsInstance(csv_str, str)
from __future__ import unicode_literals
from __future__ import absolute_import from __future__ import print_function import json import time
self.assertRaises(ValueError, Timestamp, min_ts_us - one_us)
children_unstructured = out_unstructured[0] children_structured = out_structured[0]
return ''
if _rule.get('from_port') is None: _rule['from_port'] = -1 if _rule.get('to_port') is None: _rule['to_port'] = -1
return Index(self.group_info[0]).is_monotonic
course_registration_codes = CourseRegistrationCode.objects.filter(order=self.cart)
ActionChains(self.browser).move_to_element(self.element).click().perform() return self
output = self.engine.render_to_string('inheritance17') self.assertEqual(output, '1234')
if not is_mysql_running(): msg = colorize('red', "MySQL is not running locally.") print msg sys.exit(1)
if is_categorical_dtype(dtype): pass elif is_datetimetz(dtype): pass elif issubclass(np.dtype(dtype).type, compat.string_types): dtype = np.object_
return has_studio_write_access(self._user, course_key)
self.assertEqual(len(site_configuration_history), 1)
return self.broadcast_beta(self.beta)
operations = []
return False
(27, True, False, u"False"),
course = Course( validated_data["id"], self._new_course_mode_models(validated_data["modes"]), verification_deadline=validated_data["verification_deadline"] ) course.save() return course
try: ContentType = apps.get_model('contenttypes', 'ContentType') except LookupError: available = False else: if not router.allow_migrate_model(using, ContentType): return available = True
d['description'] = dict([(a.cname, a.typ) for a in self.axes])
try: import memcache HAS_LIBS = True except ImportError: HAS_LIBS = False
ensemble.set_params(n_jobs=1) y1 = ensemble.predict_proba(X_test) ensemble.set_params(n_jobs=2) y2 = ensemble.predict_proba(X_test) assert_array_almost_equal(y1, y2)
response = self.session.post( STUDIO_BASE_URL + '/xblock/', data=json.dumps(create_payload), headers=self.headers, )
self.problem_page.a11y_audit.config.set_scope( include=['div#seq_content'])
ret['result'] = __salt__['file.search']( name, '^[ \t]*{0}'.format(regex.lstrip('^')), multiline=True )
self.signal_handler.send("course_published", course_key=course_id.for_branch(None)) bulk_ops_record.has_publish_item = False
if not isinstance(idx, six.integer_types + (slice,)): raise TypeError return list(self.__iter__())[idx]
resp = ProxyProxyBug.objects.select_related().get( version__icontains='beta' ) self.assertEqual(repr(resp), '<ProxyProxyBug: ProxyProxyBug:fix this>')
x = sp.arange(6).reshape(2, 3) datasets.mldata.urlopen = mock_mldata_urlopen({dataname: {'x': x}})
cherrypy.response.headers['Cache-Control'] = 'private'
X = [X] if isinstance(X, Mapping) else X
super(ExportTestCase, self).setUp() self.url = reverse_course_url('export_handler', self.course.id)
return 'default'
response_element = etree.Element("schematicresponse")
s = df['dt'].copy() s = klass([v for v in s.values] + [pd.NaT])
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
DECIMAL_SEPARATOR = ','
return ( _has_catalog_visibility(courselike, CATALOG_VISIBILITY_CATALOG_AND_ABOUT) or _has_catalog_visibility(courselike, CATALOG_VISIBILITY_ABOUT) or _has_staff_access_to_descriptor(user, courselike, courselike.id) )
import logging
break
self.clear.mminion.returners = {'.prep_jid': lambda x: 1}
from __future__ import absolute_import import sys import re
if com.is_object_dtype(dtype): return self.values.astype(object) return self.values
result = staticfiles.finders.find('images/favicon.ico') self.assertEqual(result, settings.REPO_ROOT / 'lms/static/images/favicon.ico')
var_dict_list = self.randomize_variables(self.samples) try: self.tupleize_answers(answer, var_dict_list) return True except StudentInputError: return False
assert False, "studio_view should produce valid html"
p.mugshot.save("mug", self.file1) self.check_dimensions(p, 4, 8)
groups = self.index.groupby(self.index) exp = dict((key, [key]) for key in self.index) tm.assert_dict_equal(groups, exp)
self.validate_xblock_info_consistency(xblock_info, has_child_info=has_child_info, course_outline=course_outline)
def __getstate__(self): srs = self.srs if srs: srs = srs.wkt else: srs = None return bytes(self.wkb), srs
P3P_HEADER = 'CP="Open EdX does not have a P3P policy."'
ws.close()
certificate.click_edit_certificate_button() certificate.course_title = "Updated Course Title Override 2" self.assertEqual(certificate.get_text('.action-primary'), "Save") certificate.click_save_certificate_button()
s = Series(np.random.randn(10)) tm.assert_almost_equal(s.ravel(order='F'), s.values.ravel(order='F'))
self.resid = np.array(v0, copy=True) info = 1
is_active = getattr(user, 'is_active', None) return is_active or is_active is None
'result': {'start_index': 3, 'end_index': 11, 'quote_length': 1}
indent_next = logical_line.endswith(':')
self.session['foo'] = 'bar' self.session.set_expiry(3600) self.session.save()
if apps is not global_apps: global_apps.get_model('contenttypes', 'ContentType').objects.clear_cache()
clean_warning_registry() with warnings.catch_warnings(): warnings.simplefilter("ignore", self.category) return fn(*args, **kwargs)
internal_result = self.check_formula(ans1, ans2, self.samples) return internal_result == "correct"
if len(names) == 1: return ret[names[0]] return ret
program_config = self.create_programs_config(enabled=False) actual = get_edx_api_data(program_config, self.user, 'programs') self.assertTrue(mock_warning.called) self.assertEqual(actual, [])
if not settings.FEATURES.get('MILESTONES_APP', False): return {} from milestones import api as milestones_api return milestones_api.get_milestone_relationship_types()
P = interpolate.Akima1DInterpolator(xi, yi)
log.warning("get_all_asset_metadata request of XML modulestore - not implemented.") return []
def test_disabled_serving(self): self.assertFileNotFound('test.txt')
permutation = rng.permutation(self.n) ind_test = permutation[:self.n_test] ind_train = permutation[self.n_test:self.n_test + self.n_train] yield ind_train, ind_test
return unicode(obj.course.course_key)
_ = lambda text: text
if 'host' not in payload: payload.update({"host": self.host})
selector = self.get_element_selector(VIDEO_MENUS[menu_name]) return self.q(css=selector).present
pv = PatchViewer(grid_shape, vis_chains.shape[1:3], is_color=vis_chains.shape[-1] == 3) for i in xrange(m): pv.add_patch(vis_chains[i, :], rescale=False) return pv
from salt import exceptions from salt.states.git import _fail, _neutral_test
_from_name_startingMonth = 12 _prefix = 'BQ'
for k in xrange(n_folds): this_blocks = [] for i, layer in enumerate(layers): this_blocks.append(layer[k]) this_stacked_blocks = StackedBlocks(this_blocks) stacked_blocks.append(this_stacked_blocks)
hidden_layer_sizes = self.hidden_layer_sizes if not hasattr(hidden_layer_sizes, "__iter__"): hidden_layer_sizes = [hidden_layer_sizes] hidden_layer_sizes = list(hidden_layer_sizes)
super(GoogleMapSet, self).__init__(**kwargs) self.template = template
from __future__ import absolute_import from __future__ import generators import os import re import sys import glob import time import codecs import logging from copy import deepcopy import types
if support_fraction is None: n_support = int(np.ceil(0.5 * (n_samples + n_features + 1))) else: n_support = int(support_fraction * n_samples)
ret['comment'] = 'Event module not available. Schedule enable job failed.'
if modules_max_memory is True: resource.setrlimit(resource.RLIMIT_AS, old_mem_limit)
return ' ' + x
import contracts contracts.disable_all()
full_plan = self.migration_plan(self.loader.graph.leaf_nodes(), clean_start=True)
self.assertTrue(3.0 in s)
use_in_migrations = True def get_by_natural_key(self, name): return self.get(name=name)
self.validate_preview_html(self.video, STUDENT_VIEW, can_add=False)
from __future__ import absolute_import, print_function import os import sys
out *= .5 np.tanh(out, out) out += 1 out *= .5
from .aws import * import os from django.core.exceptions import ImproperlyConfigured
binner = labels = DatetimeIndex(freq=self.freq, start=first, end=last, tz=tz, name=ax.name)
destroy(vm_['name'])
self.add_child()
html_theme_options = {'oldversion': False, 'collapsiblesidebar': True, 'google_analytics': True, 'surveybanner': False, 'sprintbanner': True}
import integration import salt.utils
output = self.engine.render_to_string('inheritance29') self.assertEqual(output, '!')
key = signature.get_shared_secret_key("asu") sig = signature.signature({}, key) self.assertEqual(sig, "7d70a26b834d9881cc14466eceac8d39188fc5ef5ffad9ab281a8327c2c0d093")
log = logging.getLogger(__name__)
applied = self.frame.apply(np.mean) self.assertEqual(applied['A'], np.mean(self.frame['A']))
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
indices = np.arange(10, 13)
raw_prefix = 'u' if six.PY3 else ''
if not hasattr(self, 'center'): self.center = False if not hasattr(self, 'gcn'): self.gcn = False
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
result = df3[df3.index < 2] expected = df3.iloc[[4]] assert_frame_equal(result, expected)
svc = LinearSVC(random_state=0) multi_class_svc = OneVsRestClassifier(svc) multi_target_svc = MultiOutputClassifier(multi_class_svc)
pass
import logging log = logging.getLogger(__name__)
n_samples = X.shape[0] sample_idxs = np.arange(n_samples)
def get_layer(): ds = DataSource(source.ds) return ds[0]
with six.assertRaisesRegex(self, ImportError, r"No module named.*unexistent"): management.call_command( 'loaddata', 'bad_fixture1.unkn', verbosity=0, )
if ccxs.exists(): return ccxs[0] return None
from salt.modules import publish import salt.crypt import salt.transport from salt.exceptions import SaltReqTimeoutError
SEARCH_ENGINE = "search.elastic.ElasticSearchEngine"
grade_summary['raw_scores'] = raw_scores
if not is_memcache_running(): msg = colorize('red', "Memcache is not running locally.") print msg sys.exit(1)
__virtualname__ = 'raid'
studio_link = None if course.course_edit_method == "Studio": studio_link = get_cms_course_link(course, page) return studio_link
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book])
self.frame.to_excel(path, 'Sheet1') recons = read_excel(path, index_col=0) tm.assert_frame_equal(self.frame, recons)
'a second ago', '%(count)s seconds ago', delta.seconds
_verify_page_names('First', 'Empty')
try: del _prefixes.value except AttributeError: pass
self.page.visit() self.page.wait_until_no_loading_indicator()
state_run = self.run_function('state.sls', mods='requisites.onchanges_multiple')
return subnet
assert_raises(ValueError, auc, [0.0, 0.5, 1.0], [0.1, 0.2])
retcode = 1
if vertical: return '{vertical} {video_element}'.format( vertical=self.get_video_vertical_selector(self.current_video_display_name), video_element=class_name) else: return class_name
kwargs['program'] = self.script
signatory = certificate.signatories[0] signatory.edit()
(deleted_objects, model_count, perms_needed, protected) = get_deleted_objects( [obj], opts, request.user, self.admin_site, using)
self._socket.setsockopt(zmq.IPV4ONLY, 0)
if date.month == 12: return date.replace(year=date.year + 1, month=1, day=1) else: return date.replace(month=date.month + 1, day=1)
df = DataFrame(np.random.randn(1000, 2))
y_true = np.ones((1, n_labels)) assert_equal(lrap_score(y_true, y_score), 1.) assert_equal(lrap_score(y_true, y_score_ties), 1.)
try: dive.authors.set([mark, marty]) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
try: salt_SIGKILL = signal.SIGKILL except AttributeError: salt_SIGKILL = signal.SIGTERM
try: import pyodbc #import psycopg2.extras HAS_ODBC = True except ImportError: HAS_ODBC = False
lookup_name = 'overlaps_above'
output = self.engine.render_to_string('if-tag-shortcircuit01', {'x': TestObj()}) self.assertEqual(output, 'yes')
return self.q(css='input[name=export-ora2-data]')
self.visbiasX = sharedX( numpy.zeros(nvisx), name='vbX', borrow=True )
exif_dict = piexif.load(exif) return exif_dict['0th'].get(piexif.ImageIFD.Orientation)
import salt.utils from salt.exceptions import CommandExecutionError
self.course_dir = self.create_course_xml(self.content_dir, self.truncated_key)
for k, v in zip(x, data): try: counts[k] += v except KeyError: counts[k] = v
def __init__( self, expr ): super(Group,self).__init__( expr ) self.saveAsList = True def postParse( self, instring, loc, tokenlist ): return [ tokenlist ]
self.repo = git.Repo.init(self.cachedir) new = True
err = Exception mock_index_dictionary.return_value = err
mako_middleware_process_request(request)
return None
import logging import os import shutil
with self.assertRaises(ValueError): with transaction.atomic(using='other'): dive.authors.add(marty)
import logging
os.remove(os.path.join(data_file))
if self.grouper.nkeys > 1: return self._python_agg_general(arg, *args, **kwargs) else:
from __future__ import absolute_import import logging
for label_index, weight in enumerate(n_samples_per_label): lightest_fold = np.argmin(n_samples_per_fold) n_samples_per_fold[lightest_fold] += weight label_to_fold[indices[label_index]] = lightest_fold
self.assertFalse(f.has_changed('', None))
return JsonResponse({"error": "Assignment type must be specified."}, 400)
self.cpub = True
import os import re import sys import stat import errno import socket import logging
self.cohort_b_student_username = "cohort_b_student" self.cohort_b_student_email = "cohort_b_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_b_student_username, email=self.cohort_b_student_email, no_login=True ).visit()
import yaml import salt.ext.six as six
if self.context_object_name: return self.context_object_name elif isinstance(obj, models.Model): return obj._meta.model_name else: return None
data_home = get_data_home(data_home=DATA_HOME) assert_equal(data_home, DATA_HOME) assert_true(os.path.exists(data_home))
CourseEnrollmentFactory(user=self.student, course_id=self.course_id)
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
setattr(cls, '_typ', cls.__name__.lower())
import salt.utils HAS_CLOUD = False try:
if not self._is_numeric_dtype: raise TypeError("cannot evaluate a numeric op {opstr} " "for type: {typ}".format( opstr=opstr, typ=type(self)) )
values = self.as_matrix()
result = df.iloc[:, [1, 2, 4, 6]] expected = df.reindex(columns=df.columns[[1, 2, 4, 6]]) assert_frame_equal(result, expected)
'openedx.core.djangoapps.credentials',
if isinstance(self, OFTReal) and self.precision == 0: self.__class__ = OFTInteger self._double = True
self.assertFalse(user.badgeassertion_set.all())
return self._constructor(result, index=new_index, columns=new_columns)._convert(datetime=True, copy=False)
pass
if not download_video_link and self.download_video: if self.source: download_video_link = self.source elif self.html5_sources: download_video_link = self.html5_sources[0]
import salt.runner
develop.run(self)
account_id = models.IntegerField(null=True, db_index=True) @classmethod def get_session_store_class(cls): return SessionStore
df['A'] = df['A'].astype(np.int16) df['B'] = df['B'].astype(np.float64)
ScopeIds(None, node.tag, def_id, usage_id), field_data,
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
super(PipelineRenderTest, cls).setUpClass() call_task('pavelib.assets.update_assets', args=('lms', '--settings=test'))
cache = None storconn = None compconn = None netconn = None webconn = None resconn = None
grade_summary['percent'] = round(grade_summary['percent'] * 100 + 0.05) / 100
processor_reply_dump = models.TextField(blank=True)
elif response.status_code != 200 or not success: if response.status_code == 200: response.status_code = 400 response.content = msg
asset_location = StaticContent.get_location_from_path('/c4x/edX/toy/asset/sample_static.txt') content = contentstore().find(asset_location) self.assertEqual(content.locked, locked)
XBLOCK_MIXINS = (LmsBlockMixin, InheritanceMixin, XModuleMixin, EditInfoMixin)
self.assertEqual(result.value, expected) self.assertEqual(tslib.pydt_to_i8(result), expected)
raise NotImplementedError()
nfs3.__grains__ = {} nfs3.__salt__ = {} nfs3.__context__ = {} nfs3.__opts__ = {}
bulk_write_record = self._get_bulk_ops_record(course_key) if bulk_write_record.active: bulk_write_record.index = updated_index_entry else: self.db_connection.update_course_index(updated_index_entry, course_context=course_key)
if max_depth is None or depth <= max_depth:
if self.activated: self.file.write(raw_data) else: return raw_data
tol = 0.000000001
self.assertNotEqual(naturalday_one, naturalday_two)
self._write()
ret[key] = {'old': '', 'new': new[key]}
from __future__ import absolute_import
X.indptr[m + 2:n] += nz_n - nz_m X.indptr[m + 1] = m_start + nz_n X.indptr[n] = n_stop - nz_m
skip_if_no_sklearn() mapping = {'dataset_iterator': 'DatasetShuffleSplit'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
'rule': Rules.python_interpolate_html
return _get_block_structure_manager(course_key).update_collected()
result = np.empty(values.shape, dtype='O') result.fill(np.nan) return result
log = logging.getLogger(__name__)
ordering = ['country']
self._change_library_content_settings(count=count, capa_type=capa_type) self._auto_auth(self.USERNAME, self.EMAIL, False) self._goto_library_block_page() return self.library_content_page.children_headers
if self.themed(name): base = self.theme_location else: base = self.location path = safe_join(base, name) return os.path.normpath(path)
elif existing['code'] == 404:
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape)
indexer = labels._convert_list_indexer(keyarr, kind=self.name) if indexer is not None: return self.obj.take(indexer, axis=axis)
return partial(op_class, op_symbol, *args, **kwargs)
self.assertTrue(res_json['success']) self.assertEqual( res_json['message'], u"Certificate generation started for white listed students." )
response = self.process_response(secure=True, headers={"x-xss-protection": "foo"}) self.assertEqual(response["x-xss-protection"], "foo")
key = safe_key(key, '', '')
add_users(self.admin, CourseCreatorRole(), self.user)
with transaction.atomic(): list(Person.objects.all().select_for_update(nowait=True)) self.assertTrue(self.has_for_update_sql(connection, nowait=True))
store1 = HDFStore(path) store2 = HDFStore(path)
futures[0].set_result('foo') self.wait()
assertIsInstance(left.sp_index, pd._sparse.SparseIndex, '[SparseIndex]') assertIsInstance(right.sp_index, pd._sparse.SparseIndex, '[SparseIndex]')
if not cached_pkg: log.error('Unable to cache {0}'.format(uninstaller)) ret[target] = {'unable to cache': uninstaller} continue
d = self.frame.index[5] indexer = self.frame.index > d
cmd = ['softwareupdate', '--clear-catalog']
for name, TreeClassifier in CLF_TREES.items(): clf = TreeClassifier(random_state=0) clf.fit(X, y)
return "set([%s])"
return self._parse_excel(sheetname=sheetname, header=header, skiprows=skiprows, names=names, index_col=index_col, has_index_names=has_index_names, parse_cols=parse_cols, parse_dates=parse_dates, date_parser=date_parser, na_values=na_values, thousands=thousands, skip_footer=skip_footer, convert_float=convert_float, converters=converters, squeeze=squeeze, **kwds)
self.close_at = None self.closed_in_transaction = False self.errors_occurred = False
p_shared = sharedX(zv[:,0:rows:pool_rows,0:cols:pool_cols,:]) h_shared = sharedX(zv) z_shared = sharedX(zv)
try: CertificateInvalidation.objects.get( generated_certificate=self.generated_certificate, invalidated_by=self.global_staff, notes=self.notes, active=True, ) except ObjectDoesNotExist: self.fail("The certificate is not invalidated.")
df = pd.DataFrame({'key': ['b'] * 10, 'value': 2})
if self.current_group: return self.current_group groups = user_partition.groups if not groups or len(groups) == 0: return None return groups[0]
raise NotImplementedError()
values = np.array([u'foo', NA, u'fooommm__foo', u'mmm_'], dtype=np.object_) pat = 'mmm[_]+'
if "face_image" not in params: msg = _("Missing required parameter face_image") return None, HttpResponseBadRequest(msg)
self.assertEqual(pq(response.content)(".sts-enrollment").length, 0)
announcement, start, now = sorting_dates(start, advertised_start, announcement)
layout = device.get_result()
indexer = labels._convert_list_indexer(objarr, kind=self.name) if indexer is not None: return indexer
return [s.earned for s in self.get_grade_summary()['totaled_scores']['Homework']]
import salt.pillar import salt.utils.minions
store = self._verify_modulestore_support(None, 'create_library') library = store.create_library(org, library, user_id, fields, **kwargs)
self.series[5:15] = np.NaN
folds_iter = self.iterator(mode="sequential", num_batches=nfolds) folds = list(folds_iter) return folds
try: os.makedirs(PREREQS_STATE_DIR) except OSError: if not os.path.isdir(PREREQS_STATE_DIR): raise
return course.id.org
context[self.var_name] = [] return ''
log.debug('blugger has {0} updates in it'.format(self.install_collection.Count)) if self.install_collection.Count == 0: return {}
if not using_ip_for_id and 'append_domain' in opts: opts['id'] = _append_domain(opts)
scov = np.cov(X, rowvar=0., bias=1.)
with open(CONFIG_ROOT / CONFIG_PREFIX + "auth.json") as auth_file: AUTH_TOKENS = json.load(auth_file)
assert_not_equal(X_fit_transformed.size, 0)
target = GDALRaster(target.name)
if is_mp_logging_listener_configured(): shutdown_multiprocessing_logging_listener()
return tab_dict
return self.load_item(usage_id, for_parent=for_parent)
self.wait_for_ajax() return self.q(css='#u-field-message-account_privacy').text[0]
world.retry_on_exception(lambda: link.click())
ave = elemwise_kl(Y, Y_hat)
with self.assertRaises(transaction.TransactionManagementError): r2.save(force_update=True)
app.add_domain(NumpyPythonDomain) app.add_domain(NumpyCDomain)
self.set_state_from_lcp()
if settings.ROOT_URLCONF != 'lms.urls': raise unittest.SkipTest('Test only valid in lms')
if user1['member_order'] == user2['member_order'] - 1: found = True break
filter_sequence_ui_event = lambda event: event.get('name', '').startswith('edx.ui.lms.sequence.')
assert X.shape == (96 * 96 * 3, 100000) assert X.dtype == 'uint8'
return [CourseEnrollmentFactory(user=self.user, course_id=c) for c in course_ids]
sampling_algorithm["custom-reservoir-sampling"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="reservoir_sampling", random_state=random_state)
from salt.modules import mac_defaults as macdefaults
options = repo_string.strip().split() branch = options[0] repo_location = options[1] root = ''
return {}
_strip_value(value, lookup)
from __future__ import unicode_literals
if iface_type not in ('slave', 'source'): return __salt__['cmd.run'](['ifup', iface]) return None
self.q(css='.create-user-button').first.click() self.wait_for(lambda: self.new_user_form_visible, "Add user form is visible")
if not (stat.S_IWGRP & fmode.st_mode or stat.S_IWOTH & fmode.st_mode): return True
response = self.client.get("%s?age__gt=30" % reverse('admin:admin_views_person_changelist')) self.assertEqual(response.status_code, 200)
self.assertEqual(translate_url('/en/account/register/', 'nl'), '/nl/profiel/registeren/') self.assertEqual(translation.get_language(), 'en')
self.assertEqual(rf2.name, 'new foo') self.assertEqual(rf2.value, 'new bar')
UserSocialAuth._meta.app_label = "default" Nonce._meta.app_label = "default" Association._meta.app_label = "default" Code._meta.app_label = "default"
raise NotImplementedError('subclasses of Operation must provide a database_backwards() method')
assertBadSplit("10:9:8:7:6:5:4:3:42.42.42.42")
return modulestore.get_course(structure_key, depth=None)
return self.values.nbytes
for n_comp in np.arange(1, X.shape[1]): pca = PCA(n_components=n_comp, svd_solver='randomized', random_state=0)
paginator = Paginator([], 2) self.assertEqual(paginator.validate_number(1), 1)
from salt.exceptions import SaltSystemExit import salt.modules.cmdmod import salt.utils
assert_series_equal(actual, expected)
if self.negative_class_index is None: y = T.eq(y, self.positive_class_index)
X = iris.data y = np.array(iris.target) est = GradientBoostingClassifier(n_estimators=20, max_depth=1, random_state=1, init=ZeroEstimator()) est.fit(X, y)
from salt.states import apache_conf
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
from salt.beacons import adb
self.assertEqual(1, len(nullqs)) self.assertEqual('Puerto Rico', nullqs[0].name)
from salt.utils.openstack import pyrax as suop
INSTALLED_APPS += ('openedx.core.djangoapps.api_admin',)
if data is None: data = ''
from __future__ import absolute_import import errno import fnmatch import logging import os import re import time
raise NotImplementedError("Not used")
self.assertEqual(cl.result_count, 1)
self.assertEqual(context['currency'], 'usd') self.assertEqual(context['currency_symbol'], '$')
can_skip = False if is_entrance_exams_enabled(): try: record = EntranceExamConfiguration.objects.get(user=user, course_id=course_key) can_skip = record.skip_entrance_exam except EntranceExamConfiguration.DoesNotExist: can_skip = False return can_skip
srid = None
user_list[0].course_groups.add(*cohort_list) assert_events("added", user_list[:1], cohort_list) mock_tracker.reset_mock()
self._enabled = False
X = diabetes.data Y = np.vstack([diabetes.target, diabetes.target ** 2]).T n_targets = Y.shape[1]
class TimeFormatter(Formatter):
tmp_dir = mkdtemp() try: course_dir = export_course_to_directory(course_key, tmp_dir) compress_directory(course_dir, filename) finally: shutil.rmtree(tmp_dir, ignore_errors=True)
max_date = block_data.edit_info.edited_on max_date_by = block_data.edit_info.edited_by
return False
from __future__ import unicode_literals
type_in_codemirror(self, 0, content)
if app_labels: conflicts = { app_label: conflict for app_label, conflict in iteritems(conflicts) if app_label in app_labels }
clf = QuadraticDiscriminantAnalysis(store_covariances=True).fit(X6, y6) assert_true(hasattr(clf, 'covariances_'))
year = datetime.date.today().year age_limit = settings.PARENTAL_CONSENT_AGE_LIMIT profile.year_of_birth = (year - age_limit) - 1 profile.save()
mylocalrepo: git.config_set: - name: mysection.myattribute - multivar: - foo - bar - baz - repo: /path/to/repo
self._update_head(asset_key.course_key, index_entry, asset_key.branch, new_structure['_id'])
return ups
'ENABLE_INSTRUCTOR_BACKGROUND_TASKS': True,
expr = self.ex('~')
geos_get_srid = GEOSFuncFactory('GEOSGetSRID', argtypes=[GEOM_PTR], restype=c_int) geos_set_srid = GEOSFuncFactory('GEOSSetSRID', argtypes=[GEOM_PTR, c_int])
self.assertEqual(resp.status_code, 200)
offset = QuarterBegin(n=-1, startingMonth=1) self.assertEqual(datetime(2010, 2, 1) + offset, datetime(2010, 1, 1))
try: evaluator(dict(), dict(), answer) return True except (StudentInputError, UndefinedVariable): return False
verify_order(self.html_usage_key, self.seq_usage_key, 2) verify_order(self.seq_usage_key, self.chapter_usage_key, 0)
import salt.utils.error
from salttesting.helpers import ensure_in_syspath
class UserRegistration(Form): username = CharField(max_length=10, help_text='e.g., user@example.com') password = CharField(widget=PasswordInput, help_text='Wählen Sie mit Bedacht.')
[DISPLAY_NAME, 'Video', False], ['Default Video URL', 'https://www.youtube.com/watch?v=3_yD_cEKoCk, , ', False],
skip_if_no_sklearn() mapping = {'dataset_iterator': 'StratifiedDatasetKFold'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
self.assertNotContains(resp, '<section class="university-partners university-partners2x6">')
sh("i18n_tool generate")
from __future__ import absolute_import
if result['requireType'] == 'require': world.wait(1) continue
multi_db = True
if self.read_committed is True: if connection.vendor == 'mysql': cursor = connection.cursor() cursor.execute("SET TRANSACTION ISOLATION LEVEL READ COMMITTED")
'rule': Rules.python_wrap_html
group_a_item_1_delete_index = 1 self.delete_and_verify(group_a_item_1_delete_index, expected_ordering)
name: shortname
if col_type is np.dtype('int64') or col_type is bool: self.frame[col_name] = df_col.astype( col_type, copy=False)
def future_with_timeout_callback(future): if future._future_with_timeout is not None: future._future_with_timeout._done_callback(future)
atomic = False
from pytz.exceptions import AmbiguousTimeError ts = pd.Timestamp('2015-11-1 01:00') self.assertRaises(AmbiguousTimeError, ts.tz_localize, 'US/Pacific', errors='coerce')
self._data[key] = value
self.assertIs(descriptor._unwrapped_field_data, original_field_data) self.assertIsNot(descriptor._unwrapped_field_data, descriptor._field_data)
url = '{0}&order_by=display_name&sort_order=desc'.format(self.list_url_master_course) resp = self.client.get(url, {}, HTTP_AUTHORIZATION=self.auth)
self.auth_page.visit() self.dashboard_page.visit()
perms = self.get_permission_required() return self.request.user.has_perms(perms)
return ( super(FieldOperation, self).reduce(operation, in_between, app_label=app_label) or not operation.references_field(self.model_name, self.new_name, app_label) )
from salt.states import ntp
self.login() self.api_response(expected_response_code=404, username=other.username)
self.assertSetEqual( {block['id'] for block in response.data}, self.non_orphaned_block_usage_keys, )
_enroll_user_in_pending_courses(regs[0].user)
self.assertIn("'position': {}".format(expected_position), rendered_html)
set_input_value(page, css, value).send_keys(Keys.ENTER) page.wait_for_ajax()
second_group = self.user_partition.groups[1] self.user_partition.scheme.current_group = second_group
cls.create_image(prefix, (1, 1), 'red', 'special/{}_unlock.png')
return
if self._wrapped is empty: return '<LazySettings [Unevaluated]>' return '<LazySettings "%(settings_module)s">' % { 'settings_module': self._wrapped.SETTINGS_MODULE, }
if settings.FEATURES['CLASS_DASHBOARD'] and access['staff']: sections.append(_section_metrics(course, access))
import pandas.core.datetools as datetools
return '{}[data-id="{}"] {}'.format( self.BODY_SELECTOR, self.locator, selector )
class VeryLongModelNamezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(models.Model): title = models.CharField(max_length=11)
return self.encode(inputs)
def test_real_user(useless): useless_user = Mock(email='fake@fake.com', id=useless) return useless_user
RateLimitConfiguration.objects.create(enabled=True)
users_state_after_post = self._post_words( ['word1', 'word2', 'word3'])
return str(self)
from __future__ import absolute_import
slug = models.SlugField(max_length=1000, db_index=False)
raise SyntaxError('encoding problem: utf-8')
return self.cursor.execute(query, args)
from __future__ import absolute_import
mode = __salt__['config.manage_mode'](mode)
return 'self' if self.self_paced else 'instructor'
self.assertTrue(mock_audit_log.called)
tokens = [x[1:-1].decode('utf8').replace("&#39;", "'") for x in lexer]
label = self.index[i] if isinstance(label, Index): return self.take(i, axis=axis, convert=True) else: return self._get_val_at(i)
from __future__ import absolute_import
from __future__ import absolute_import
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
with transaction.atomic(): with transaction.atomic(): Reporter.objects.create(id=1, first_name="Tintin")
return bool(value and getattr(value, 'url', False))
rng = pd.date_range('2014', periods=len(self.df)) self.df.index = rng
return response
DOTS = ['&middot;', '*', '\u2022', '&#149;', '&bull;', '&#8226;']
file = File(BytesIO(b'one\ntwo\nthree')) self.assertEqual(list(file), [b'one\n', b'two\n', b'three'])
student_id = AutoAuthPage(self.browser).visit().get_user_id()
import inspect import os
import salt.ext.six as six
raise NotImplementedError('subclasses of BasePasswordHasher must provide a safe_summary() method')
ret = salt.modules.vsphere.system_info(host=host, username=user, password=password)
DATE_INPUT_FORMATS = [
if 'permutation' not in event_info: event_info['permutation'] = {} event_info['permutation'][response.answer_id] = (permutation_option, response.unmask_order())
logistic_classifier = linear_model.LogisticRegression(C=100.0) logistic_classifier.fit(X_train, Y_train)
list_display = ('user', 'course_id')
c(min_periods=1) c(min_periods=1, center=True) c(min_periods=1, center=False)
self.check_ordering_of_field_choices([self.b1, self.b2])
with warnings.catch_warnings(record=True): estimator_1 = Estimator() estimator_2 = Estimator() set_testing_parameters(estimator_1) set_testing_parameters(estimator_2) set_random_state(estimator_1) set_random_state(estimator_2)
names = None
'ORGANIZATIONS_APP': False,
certificates_display_behavior = TextField(null=True) certificates_show_before_end = BooleanField(default=False) cert_html_view_enabled = BooleanField(default=False) has_any_active_web_certificate = BooleanField(default=False) cert_name_short = TextField() cert_name_long = TextField()
list_args = ' '.join(str_args) _validate_ret(parallels._normalize_args(list_args))
saltenv = env
'colors': colors
sheets = list(set(sheets))
self.assertFalse(self.cmap.is_partially_correct('9_2_1'))
self.course_nav.q(css='button.check.Check').click() self.course_nav.wait_for_ajax()
if course_id: return cls.objects.filter(user=user, badge_class__course_id=course_id) return cls.objects.filter(user=user)
import matplotlib.pyplot as plt
GRAINS_CACHE = {} DETAILS = {}
if not modulestore().has_course(course_key): return Response(status=status.HTTP_404_NOT_FOUND)
self.assertFalse(u.has_usable_password())
for value in self.val: bio.write(struct.pack(byteorder + 'i', value))
log = logging.getLogger(__name__)
return policy.get(policy_key(usage_id), {})
class Student(models.Model): character = models.ForeignKey(Character, models.CASCADE) study = models.CharField(max_length=30)
if connector == '^': return 'POW(%s)' % ','.join(sub_expressions) return super(DatabaseOperations, self).combine_expression(connector, sub_expressions)
from __future__ import absolute_import from json import JSONEncoder, loads
from __future__ import absolute_import
class MediaForm(ModelForm): class Meta: model = Media fields = '__all__'
self.r2.article_set.set([self.a2, self.a3])
student_complex = complex(student_complex) instructor_complex = complex(instructor_complex)
form = CourseEmailTemplateForm(form_data) self.assertFalse(form.is_valid())
context = event.get('context', {}) if field in context: event[field] = context[field] del context[field] else: event[field] = default_value
forms = [self._construct_form(i, **self.get_form_kwargs(i)) for i in range(self.total_form_count())] return forms
from __future__ import unicode_literals
text = f.widget.format_value(result) self.assertEqual(text, '01:30:05 PM')
start=datetime.datetime(2012, 2, 3, tzinfo=UTC)
place1.name = "Guido's All New House of Pasta" place1.save_base(raw=True)
AutoAuthPage(self.browser, course_id=self.course_id).visit() self._link_dummy_account() LogoutPage(self.browser).visit()
newLen = len(self) newVals = dict(zip(indexList, valueList))
if v == int(v): v = int(v) result.append("%s.0" % v) result.append(str(v))
return 1
test_user = UserFactory() self.register_with_redemption_code(test_user, course_registration_code.code)
header, data = chunk(data, 122) header = unpack(POSTGIS_HEADER_STRUCTURE, header)
State.objects.create(name='Puerto Rico')
tuned_parameters = [{'shrinkage': shrinkages}] cv = GridSearchCV(ShrunkCovariance(), tuned_parameters) cv.fit(X_train)
assert_raises(ValueError, model.fit, mat) continue
if len(err) == 1: err = np.tile(err, (self.nseries, 1))
config = self.state.document.settings.env.config
call_command('manage_group', TEST_GROUP, '--permissions', 'auth:Group:add_group') self.check_groups([TEST_GROUP]) self.check_permissions(TEST_GROUP, ['add_group'])
output = f(np.transpose(self.image, map_to_another_axes)) output_def = np.array(f_def(self.image)) output = np.transpose(output, map_to_default)
assert isinstance(num_steps, py_integer_types) assert num_steps > 0
response = self.fetch('/login', method='POST', body=urlencode(self.auth_creds), headers={'Content-Type': self.content_type_map['form']})
response = self.client.post(url, { 'unique_student_identifier': self.student.email, })
output = self.engine.render_to_string('inheritance23') self.assertEqual(output, '1&ab3_')
import logging import sys import glob import yaml import jinja2 import re from os.path import isfile, join
return association_response
from __future__ import absolute_import
if not is_correct and not hasher_changed and must_update: hasher.harden_runtime(password, encoded)
col_for_inference = col if col.dtype == 'object': notnulldata = col[~isnull(col)] if len(notnulldata): col_for_inference = notnulldata return lib.infer_dtype(col_for_inference)
minion = { 'master': 'salt', 'log_level': 'info', 'hash_type': 'sha256', }
_maybe_remove(store, 'wp') store.put('wp', wp, format='table') store.select('wp')
if n_useless > 0: X[:, -n_useless:] = generator.randn(n_samples, n_useless)
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) initial_group_id_to_child = split_test.group_id_to_child
if not meta.auto_created: signals.post_save.send(sender=origin, instance=self, created=(not updated), update_fields=update_fields, raw=raw, using=using)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
REPORT_REQUESTED_EVENT_NAME = u'edx.instructor.report.requested'
with tm.assertRaisesRegexp(TypeError, 'list-like'): self.index.set_names(names[0])
for app_label in app_labels: if app_label.startswith('--'): raise CommandError("Sorry, Dave, I can't let you do that.")
import salt.ext.six as six
self.assertEquals(preview.latex_preview('1.618k'), r'1.618\text{k}')
log.error('Detected nodegroup expansion failure of "{0}"'.format(word)) return []
yield check_oob_score, name, csc_matrix(boston.data), boston.target, 50
pkg, ver = re.split('[; ]', line, 1)[0].rsplit('-', 1)
return get_course_topics(self.request, self.course.id)
target = (iris.target > 0).astype(np.intp) target = np.array(["setosa", "not-setosa"])[target]
import salt.minion import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM from salt.ext.six import string_types
all_lists = np.all([not hasattr(v, "rvs") for v in self.param_distributions.values()]) rnd = check_random_state(self.random_state)
if not physical_line.rstrip() and line_number == len(lines): return 0, "W391 blank line at end of file"
self.assertEqual(len(courses), 1)
return cls.objects.get(course_key=course_key, enabled=True)
activations = [X] activations.extend(np.empty((batch_size, n_fan_out)) for n_fan_out in layer_units[1:]) deltas = [np.empty_like(a_layer) for a_layer in activations]
import logging
from salttesting import TestCase, skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath from salttesting.mock import ( MagicMock, NO_MOCK, NO_MOCK_REASON, patch )
MESSAGE = _('git clone or pull failed!')
D = Distance A = Area
_plotting_methods = frozenset(['plot', 'boxplot', 'hist'])
response = self.send_get(client, query_parameters='view=shared') self._verify_private_account_response( response, requires_parental_consent=True, account_privacy=PRIVATE_VISIBILITY )
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
elif zones[avz] != 'available': raise SaltCloudException( 'The specified availability zone isn\'t currently available: ' '{0}\n'.format( avz ) )
messy = MessyBachelorParty.objects.create( name='Bachelor party for Dave') messy.attendees.set([p4]) messy_parent = messy.bachelorparty_ptr
index = int(grader.get('id', len(descriptor.raw_grader))) grader = CourseGradingModel.parse_grader(grader)
alpha_ = 1. / np.var(y) lambda_ = np.ones(n_features)
from __future__ import absolute_import import os
self._goto_problem_page()
from __future__ import absolute_import
connectivity = grid_to_graph(*face.shape)
from salt.utils.odict import OrderedDict from salt.utils import warn_until from salt.state import HighState
module.xml_attributes = xml_attrs
import salt.utils.http
app_configs = apps.get_app_configs() self.assertListEqual( [app_config.name for app_config in app_configs], SOME_INSTALLED_APPS_NAMES)
self.assertEqual( victoria_json, City.objects.annotate( geojson=functions.AsGeoJSON('point', bbox=True) ).get(name='Victoria').geojson )
return dict([(k, getattr(self, k, None)) for k in self._attributes])
'ENABLE_COURSEWARE_SEARCH': False,
from salt.states import hg
instructor_task = self._create_entry() succeeded, message = get_task_completion_info(instructor_task) self.assertFalse(succeeded) self.assertEquals(message, "No status information available")
api.update_credit_request_status(request["parameters"]["request_uuid"], self.PROVIDER_ID, status)
if symbolic: activations[idx] = T.switch(clamp, initial, activations[idx]) else: activations[idx] = np.switch(clamp, initial, activations[idx])
request.url = 'http://testurl/' self.xmodule.verify_oauth_body_sign(request)
privacy_policy = branding_api.get_privacy_url() if privacy_policy != branding_api.EMPTY_URL: data.update({'company_privacy_url': privacy_policy})
for freq in ['D', '2D', '3D']: p = Period('2011-04-01', freq=freq)
AutoAuthPage(self.browser).visit()
self.assertEqual(event.dt.replace(tzinfo=EAT), dt)
self.verify_tag(custom.assignment_no_params, 'assignment_no_params')
if len(ARGS) == 1: argv_prepared = ARGS[0].split() else: argv_prepared = ARGS
log.debug(message) response['status'] = message return JsonResponse(response, status_code)
DEFAULT_MAX_NUM = 1000
course_locations = self.draft_store.get_courses_for_wiki('toy') assert_equals(len(course_locations), 0)
def obj_func(theta, eval_gradient=True): if eval_gradient: lml, grad = self.log_marginal_likelihood( theta, eval_gradient=True) return -lml, -grad else: return -self.log_marginal_likelihood(theta)
rng = np.random.RandomState(1999) n_samples = 100 n_features = 3 X = rng.randn(n_samples, n_features) + 5 * rng.rand(1, n_features)
return self._data.get_values()
resp = self.client.get_html( get_url(handler, course_key, 'course_key_string') ) self.assertEqual(resp.status_code, 200)
self.assertRaises(TypeError, self.frame.reindex, idx, level=0)
pred_entropies = stats.distributions.entropy( lp_model.label_distributions_.T)
df = DataFrame(np.random.randint(0, 5, size=40).reshape((10, 4)))
def from_json(self, values): return [UserPartition.from_json(v) for v in values] def to_json(self, values): return [user_partition.to_json() for user_partition in values]
success = self.success return (bool(success), success)
return self.values.shape
with patch('xmodule.capa_module.CapaModule.get_problem_html') as mock_html: mock_html.return_value = "<div>Test HTML</div>"
from __future__ import unicode_literals
self.assertLess(abs(dt - now), timedelta(seconds=2))
import ioflo.base.deeding from ioflo.aid.odicting import odict
nsqrt = sqrt(n_samples) llconst = n_features * log(2. * np.pi) + n_components var = np.var(X, axis=0)
'master_sign_key_name': str,
self.event[u'old'] = self.event[u'current_tab'] self.event[u'new'] = self.event[u'current_tab'] + self.offset
self.temp_dir2 = tempfile.mkdtemp(suffix='aBc')
return
from __future__ import absolute_import import re import os
predictions = cval.cross_val_predict(clf, X_sparse, X) assert_equal(predictions.shape, (10, 2))
return [profile.strip() for profile in cls.current().video_profiles.split(",") if profile]
return "file://"+urllib.pathname2url(os.path.abspath(filename))
self.sigma_[:, :] -= epsilon
ret = self.run_state('ssh_known_hosts.absent', test=True, **kwargs) self.assertSaltNoneReturn(ret)
return [MockTenants()]
auto_id = self.form.auto_id if auto_id and '%s' in smart_text(auto_id): return smart_text(auto_id) % self.html_name elif auto_id: return self.html_name return ''
files = {} for pid in pids: ppath = '/proc/{0}'.format(pid) try: tids = os.listdir('{0}/task'.format(ppath)) except OSError: continue
DATE_INPUT_FORMATS = [
self.win_installer = self.update_session.CreateUpdateInstaller() self.win_installer.Updates = self.install_collection
geom_ptr = capi.get_feat_geom_ref(self.ptr) return OGRGeometry(geom_api.clone_geom(geom_ptr))
return network
result = patch.get_facecolor()[0]
'rule': None
return self.q(css='.CodeMirror-scroll').present
return get_current(result)
log.error('Failed to read metadata. Giving up on IAM credentials.')
assert_raises(ValueError, clf.partial_fit, X2[:, :-1], y2)
default_name = tpl['BACKEND'].rsplit('.', 2)[-2]
ct_fetched = ContentType.objects.get_for_id(ct.pk) self.assertIsNone(ct_fetched.model_class())
BaseRunserverCommand = Command
self.assertEqual(html, "<div>Test Template HTML</div>")
cp = self.ts.copy() cp.name = 'changed' result = getattr(s, op)(cp) self.assertIsNone(result.name)
import bz2 import copy
self.page.visit() config = self.page.experiment_group_configurations[0] config.toggle() usage = config.usages[0] config.click_unit_anchor()
texas = Country.objects.get(name='Texas')
self.lc_block.refresh_children() self.assertTrue(self.lc_block.validate())
if deadline is None: return candidates[0]
action_failed = False selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)
output = self.engine.render_to_string('inheritance08') self.assertEqual(output, '1235')
return self.q(css='div.discussion-module').attrs('data-discussion-id')[0]
return (security_group, name, description)
epoch_num = 15 termination_criterion = EpochCounter(epoch_num)
from __future__ import absolute_import
if (obj >= self.obj.shape[axis] and not isinstance(labels, MultiIndex)): raise ValueError("cannot set by positional indexing with " "enlargement")
return None
from __future__ import absolute_import import os import tempfile import textwrap
return { 'id': self.id, 'name': self.name, 'query': self.query, 'viewers': self.viewers, }
with open(filename, 'rb') as matlab_file: matlab_dict = io.loadmat(matlab_file, struct_as_record=True)
import salt.utils import salt.fileserver
assert_raises(NotImplementedError, conv_model.cost, Y, Y_hat) assert_raises(NotImplementedError, mlp_model.cost, Y1, Y1_hat)
X_scaled_back = scaler.inverse_transform(X_scaled) assert_true(X_scaled_back is not X) assert_true(X_scaled_back is not X_scaled) assert_array_almost_equal(X_scaled_back, X)
tests = [ (EmptyCharLabelNoneChoiceForm, 'choice_string_w_none', None), (EmptyIntegerLabelChoiceForm, 'choice_integer', None), (EmptyCharLabelChoiceForm, 'choice', ''), ]
from __future__ import absolute_import
df = DataFrame(np.random.randn(5, 3)) cond = df > 0
self.assertEqual(str(lyr[0]['str']), "1")
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
block = modulestore().get_course(course.id, depth=None) for __ in range(depth - 1): children = block.get_children() block = children[-1]
time.sleep((2 ** (RoleRetries - retry)) + (random.randint(0, 1000) / 1000)) continue
daytime = self._get_daytime_flag() businesshours = self._get_business_hours_by_sec() bhdelta = timedelta(seconds=businesshours)
return data.get(name)
return cPickle.loads(s)
import salt.utils.odict as odict
params_without_course_id = get_params_from_user_info_call(False) self.assertNotIn("group_id", params_without_course_id)
bintflist = [intf for iflist in bintf.values() for intf in iflist] result.update(__salt__['sysfs.read'](bintflist, path))
some_range = range(10) joined_range = list(chain(*[some_range[slice] for slice in gen_even_slices(10, 3)])) assert_array_equal(some_range, joined_range)
grain = getattr(filt, '__grain__', 'os_family') if grain not in match_groups: match_groups[grain] = OrderedDict([])
attach_file(filename, sub_path) modal_css = 'div.wrapper-modal-window-assetupload' button_css = '{} .action-upload'.format(modal_css) world.css_click(button_css)
if isinstance(from_space, CompositeSpace): if isinstance(to_space, Conv2DSpace): return (NotImplementedError, "CompositeSpace does not know how to format as " "Conv2DSpace")
if o.values.dtype == 'datetime64[ns]' or isinstance( o, PeriodIndex): values[0:2] = pd.tslib.iNaT else: values[0:2] = null_obj
x = np.arange(plots.shape[1]) x += n_min
msg_format = _("Problem {action} for {succeeded} of {attempted} students")
mgr_shape = list(mgr.shape) for ax, indexer in indexers.items(): mgr_shape[ax] = len(indexer) mgr_shape = tuple(mgr_shape)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
for staged_proba in clf.staged_predict_proba(X_test): assert_equal(y_test.shape[0], staged_proba.shape[0]) assert_equal(2, staged_proba.shape[1])
from __future__ import absolute_import import time import datetime
URLCONF_MODULES = None
dummy2 = _("This is another translatable string.")
if n == 0 and dt_in != cur_cmbegin: n += 1
pd.reset_option('^display.', silent=True)
if 'ORA-22858' in description or 'ORA-22859' in description: self._alter_field_type_workaround(model, old_field, new_field) else: raise
self.assertEqual(cert.status, ExampleCertificate.STATUS_ERROR) self.assertIn(self.ERROR_MSG, cert.error_reason)
decorator `django.utils.decorators.decorator_from_middleware(middleware_class)`
from __future__ import absolute_import import re import string import random
left = stamps.searchsorted( t1.value, side='left') if use_lhs else None right = stamps.searchsorted( t2.value, side='right') if use_rhs else None
return self._data.ndim
log.warning("User [%s] was not authorized to initiate a refund for user [%s] " "upon unenrollment from course [%s]", request_user.id, unenrolled_user.id, course_key_str) return []
ts_irregular[5:].plot(secondary_y=True, ax=ax) ts_irregular[:5].plot(ax=ax)
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
if not name and not pkgs: return 'Must pass a single package or a list of packages'
studentmodule.state = json.dumps(problem_state) studentmodule.save()
return '{}[data-locator="{}"] {}'.format( self.BODY_SELECTOR, self.locator, selector )
is_increasing = assert_warns_message(UserWarning, "interval", check_increasing, x, y)
assert_array_almost_equal( X_dense.astype(dtype), X2_dense, 15) assert_array_almost_equal( y_dense.astype(dtype), y2, 15)
return BACKEND.get_value(val_name, default, **kwargs)
idx = PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], freq='M', name='idx')
cur_mbegin = self.m_offset.rollback(dt_in) cur_cmbegin = self.cbday.rollforward(cur_mbegin)
import salt.payload from salt.utils.odict import OrderedDict import salt.exceptions
self.assert_oauth_status("fooooooooooToken", status.HTTP_401_UNAUTHORIZED)
self.ts.diff()
errors = to_list(errors)
llab, rlab, shape = map(list, zip(* map(fkeys, left_keys, right_keys)))
wait_for( func=lambda _: EC.presence_of_element_located((By.CSS_SELECTOR, css_selector,)), timeout=timeout, timeout_msg="Timed out waiting for {} to be present.".format(css_selector) )
changes[namespace] = { 'new': config, 'old': update_config, } return config
CertificateGenerationCourseSetting.objects.create( course_key=course_key, enabled=is_enabled )
if hex: return Geometry(hex, srid=geo_field.srid) else: return None
capi.band_io(self._ptr, access_flag, offset[0], offset[1], size[0], size[1], byref(data_array), shape[0], shape[1], self.datatype(), 0, 0)
return self._constructor(result, index=self.index, sparse_index=self.sp_index, fill_value=self.fill_value, copy=False).__finalize__(self)
raise NotImplementedError
import salt.utils import logging import re
super(FlatpageFallbackMiddleware, self).__init__(get_response)
points = ax.get_position().get_points() x_set.add(points[0][0]) y_set.add(points[0][1])
X = 15 * rng.rand(100, 1) y = np.sin(X).ravel()
import salt.utils import salt.utils.yast import salt.utils.preseed import salt.utils.kickstart import salt.syspaths from salt.exceptions import SaltInvocationError
new_minor = list(self.panel.minor_axis[:2]) result = self.panel.reindex(minor=new_minor) assert_frame_equal(result['ItemB'], ref.reindex(columns=new_minor))
self.get_data_specs(model)[0].validate(data) return None
task_folder = task_service.GetFolder(location) tasks = task_folder.GetTasks(0)
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
self.assertRaises(Exception, lp2.truncate, wp.major_axis[-2], wp.major_axis[2])
for update in wua_search_result.Updates: if update.IsDownloaded: log.debug(u'To be installed: {0}'.format(update.Title)) wua_install_list.Add(update)
ret = self._run_initscript(init_script, minions, False, 'bogusaction', 2)
self.setup_cohorts(self.course)
self.assertContains(response, 'Select a valid choice.', 0)
additional_handlers = []
return 'present'
log_stdin=None, log_stdin_level='debug', log_stdout=None, log_stdout_level='debug', log_stderr=None, log_stderr_level='debug',
diabetes_X_train = diabetes_X[:-20] diabetes_X_test = diabetes_X[-20:]
self.assertIs(getattr(t, "__frozen"), True)
response = self.client.get(reverse('admin:admin_inlines_titlecollection_add')) self.assertContains(response, '<th class="required">Title1</th>', html=True)
store = HDFStore(hh)
index = MultiIndex(levels=[major_axis, minor_axis], labels=[major_labels, minor_labels])
if isinstance(self, RangeIndex): self = self.values if isinstance(other, RangeIndex): other = other.values
current = set() for wd in wm.watches: current.add(wm.watches[wd].path)
if unicode(val) == student_answers[aid]: return '$' + key
response_data = self.reactivation_email(self.unregisteredUser) self.assertFalse(response_data['success'])
cls.o1 = Order.objects.create(pk=1) cls.o2 = Order.objects.create(pk=2) cls.o3 = Order.objects.create(pk=3)
state_below=dbm.hidden_layers[-2].upward_state(H_hat[-1])))
for field in self.CONTENT_FIELDS + self.SETTINGS_FIELDS + self.CHILDREN_FIELDS: self.assertTrue(new_version.fields[field].is_set_on(new_version))
if oracle: qs = qs.exclude(name='Texas') for country in qs: self.assertTrue(country.mpoly.sym_difference(geom).equals(country.sym_difference))
_repack_pkgs = _namespaced_function(_repack_pkgs, globals())
self.assertEqual(resp.status_code, 200)
call_command('delete_orphans', unicode(published_branch), '--commit')
return
resp = self.client.post(reverse('shoppingcart.views.remove_item', args=[]), {'id': cert_item.id})
__virtualname__ = 'etcd'
from salt.modules import bluez from salt.exceptions import CommandExecutionError import salt.utils.validate.net
result = f.clean('13.30.05') self.assertEqual(result, time(13, 30, 5))
self._cohorted_discussions = json.dumps(value)
rec_check = records[tb_offset:] try: rname = rec_check[0][1] if rname == '<ipython console>' or rname.endswith('<string>'): return rec_check except IndexError: pass
unicode_text = "好 各位同学".decode('utf-8') self.assertIn(unicode_text, self.video.captions_text)
if _is_na_compat(arr, fill_value): arr.fill(fill_value) return arr
import salt.utils.jid import salt.returners
site.register(User, UserAdmin) site.register(Group, GroupAdmin)
from __future__ import absolute_import import json import logging
ret['changes'] = image_update
output = self.engine.render_to_string('autoescape-literals01') self.assertEqual(output, 'this & that')
eligible_certificates = EligibleCertificateManager()
VIDEO_SOURCE_DIR = REPO_ROOT / "test_root" / "data" / "video"
call_command('post_cohort_membership_fix', commit='commit')
if self.models is None: raise AppRegistryNotReady( "Models for app '%s' haven't been imported yet." % self.label)
usage_key = usage_key.replace(course_key=modulestore().fill_in_run(usage_key.course_key))
STATICFILES_STORAGE = 'pipeline.storage.NonPackagingPipelineStorage' STATIC_URL = "/static/"
with self.assertRaises(AttributeError): response.content = "Hello dear" self.assertNotIn('content-type', response)
self.q(css=self._bounded_selector(".annotator-delete")).first.click() self.wait_for_notes_invisibility("Note is removed.") self.wait_for_ajax() return self
can_introspect_autofield = False
return [ Location._from_deprecated_son(course['_id'], course['_id']['name']).course_key for course in courses ]
rng.join(idx, how='outer')
'django.middleware.locale.LocaleMiddleware',
symbol = 'courseware.grades.grade' with patch(symbol) as mock_grade: mock_grade.return_value = {'grade': 'Pass', 'percent': 0.75} yield
course_location_one = locator.CourseLocator('Org1', 'Course1', 'Run1') new_course_one = self._create_course(course_location_one)
self.assertEqual(len(actual), 2) self.assertEqual(actual, expected)
exceptions = [] exc_value = self.exc_value while exc_value: exceptions.append(exc_value) exc_value = explicit_or_implicit_cause(exc_value)
from __future__ import absolute_import import errno import os import locale import logging from distutils.version import LooseVersion
sorted_series = random_order.sort_index(axis=0) assert_series_equal(sorted_series, self.ts)
bigfile.write(b'a' * (10 * 2 ** 20)) bigfile.seek(0)
import salt.ext.six as six
self._assert_enable_certs_button(False)
BULK_EMAIL_FAILURE_ERRORS = (
cheetah.delete() self.assertQuerysetEqual(Comparison.objects.all(), [ "<Comparison: tiger is stronger than None>" ])
layer_below = self.dbm.hidden_layers[i-1]
if iface_type not in ['slave']: return __salt__['cmd.run']('ip link set {0} down'.format(iface)) return None
has_skipped = cls.objects.filter(user_id=user_id, course_id=course_id).exists() return has_skipped
import jinja2 def format_template(template, **kw): return jinja2.Template(template).render(**kw)
self.q(css=self.NOTE_SELECTOR).first.click() return self
from __future__ import absolute_import import salt.utils import time import logging from salt.exceptions import CommandExecutionError
if 'name' in todelete: raise SaltInvocationError('The repo name cannot be deleted')
([], CourseMode.DEFAULT_MODE_SLUG),
self.assertIn('msgctxt "Context wrapped in double quotes"', po_contents) self.assertIn('msgctxt "Context wrapped in single quotes"', po_contents)
FEATURES['ENABLE_FINANCIAL_ASSISTANCE_FORM'] = True
_stdin = sys.stdin try: sys.stdin = None repr(df) finally: sys.stdin = _stdin
'django_nose',
if settings == DEFAULT_SETTINGS: args.append('--skip-collect') call_task('pavelib.assets.update_assets', args=args)
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return [self.forms[i[0]] for i in self._ordering]
reset_time = datetime.now(UTC) + timedelta(seconds=300) with freeze_time(reset_time): response = self.client.get(url) self.assertEquals(response.status_code, 404)
try: ch, escaped = next(pattern_iter) except StopIteration: return [('', [])]
mark.save(using='other') self.assertEqual(mark._state.db, 'other')
has_real_datatype = False supports_subqueries_in_group_by = True supports_bitwise_or = True
self.assertEqual(config['key_logfile'], os.path.join('/', 'key')) self.assertNotEqual(config['key_logfile'], '//key')
pass
return self.find_css("#start_date").first.attrs('value')[0]
stack = []
with self.assertRaises(ValueError): with transaction.atomic(using='other'): dive.authors.set([mark, marty])
assert_almost_equal(loss_interp + 0.5 * (w[-1] ** 2), loss)
if apply_net_settings: try: __salt__['ip.apply_network_settings'](**kwargs) except AttributeError as error: ret['result'] = False ret['comment'] = str(error) return ret
X = check_array(X, accept_sparse='csr', dtype=np.float64) self._check_parameters() self._fit(X)
if item in ['constraint']: if not isinstance(extra_args, (list, tuple)) or '--full' not in extra_args: cmd += ['--full']
self.assertEqual(len(res.context['object_list']), 7)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
import yaml import salt.ext.six as six
import salt.ext.six as six
self.assertEqual(fetched.discussion_id, discussion_item.discussion_id) self.assertEqual(fetched.discussion_id, refetched.discussion_id)
self.certificates_section.add_certificate_exception(self.user_name, '')
Engine(debug=True).from_string('{% include "this_does_not_exist.html" %}')
self.assertTrue(res_json['success'])
self.apps = self.default_apps
isBusinessDay = BDay().onOffset isMonthEnd = MonthEnd().onOffset isBMonthEnd = BMonthEnd().onOffset
gc.collect() gc.collect()
try: from celery import Celery from celery.exceptions import TimeoutError HAS_CELERY = True except ImportError: HAS_CELERY = False
if ret['result'] and not schanged: msg = _format_terse(tcolor, comps, ret, colors, tabular) hstrs.append(msg) continue
return self.forms[:self.initial_form_count()]
return [self.parameter_name]
EDX_PLATFORM_REVISION = 'unknown'
if not SQLALCHEMY_INSTALLED: raise nose.SkipTest('SQLAlchemy not installed')
return floatingip_id
if (i + 1) != (self.n_layers_ - 1): activations[i + 1] = hidden_activation(activations[i + 1])
self._base_test_extauth_auto_activate_user_with_flag(log_user_string="inactive@stanford.edu")
CreditRequirementStatus.add_or_update_requirement_status( username, req_to_update, status=status, reason=reason )
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
('union', FeatureUnion( transformer_list=[
return AppVersionConfig.last_supported_date(platform_name, platform_version) or self.NO_LAST_SUPPORTED_DATE
self._fixture_teardown() call_command.assert_called_with( 'flush', interactive=False, allow_cascade=False, reset_sequences=False, inhibit_post_migrate=True, database='default', verbosity=0, )
self.client.logout() super(TestLibraryAccess, self).tearDown()
return ProfileImageView().post(request, username)
from __future__ import absolute_import import hashlib import logging import sys
(vmin, vmax) = self.axis.get_data_interval()
run_before = []
if hasattr(course, 'syllabus_present') and course.syllabus_present: course.tabs.append(CourseTab.load('syllabus'))
output = self.engine.render_to_string('inheritance37', {'numbers': '123'}) self.assertEqual(output, '_X_X_X_')
self.assertFalse(o is result)
__context__['retcode'] = 0
request = RequestFactory().request() request.user = self.user all_tabs = get_course_tab_list(request, course) return any(tab.type == 'ccx_coach' for tab in all_tabs)
self.ymd.astype(np.int32).unstack()
container.add_missing_groups() self.verify_groups(container, ['alpha', 'gamma'], ['beta'])
httpretty.register_uri( httpretty.POST, '{}/baskets/1/'.format(TEST_API_URL), status=200, body='{}', adding_headers={'Content-Type': JSON} )
index = period_range(start="2012-01-01", end="2012-12-31", freq="M") s = Series(np.random.randn(len(index)), index=index)
depths = [_find_longest_prefix_match(tree, tree_queries, MAX_HASH_SIZE, self._left_mask, self._right_mask) for tree, tree_queries in zip(self.trees_, np.rollaxis(bin_queries, 1))]
def __init__(self, bulk_ops_record_type, **kwargs): super(ActiveBulkThread, self).__init__(**kwargs) self.records = defaultdict(bulk_ops_record_type)
from __future__ import absolute_import import json import logging
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
return self.q(css=self.prefix + " .signatory-details-list, .signatory-edit-list").present
top_idx = set(component.argsort()[-3:][::-1]) assert_true(tuple(sorted(top_idx)) in correct_idx_grps)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertFalse(module.should_show_check_button())
clf = MockClassifier() grid_search = GridSearchCV(clf, {'foo_param': [1]}) grid_search.fit(X, y) assert_true(hasattr(grid_search, "grid_scores_"))
if (axis is None and not all([other._get_axis(i).equals(ax) for i, ax in enumerate(self.axes)])): raise InvalidIndexError
class Point(OGRGeometry):
StudioAutoAuthPage( self.browser, username=self.staff_user["username"], email=self.staff_user["email"] ).visit()
file1 = open(filename) r = HttpResponse(file1) self.assertTrue(file1.closed) r.close()
'AUTOMATIC_AUTH_FOR_TESTING': False,
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
visible_fields = _visible_fields
THRESHOLDED_MULTILABEL_METRICS = [ "log_loss", "unnormalized_log_loss",
from __future__ import unicode_literals
pkg_params = {name: version_num}
if self.s.is_table: if nrows is None: nrows = 0 if start is None: start = 0 if stop is None: stop = nrows stop = min(nrows, stop)
self.client.login(username="jack", password="test") LinkedInAddToProfileConfiguration( company_identifier='0_mC_o2MizqdtZEmkVXjH4eYwMj4DnkCWrZP_D9', enabled=True ).save()
from pandas.compat import range import pandas.util.testing as tm from pandas import read_csv import os
TEST_NON_SERIALIZED_APPS = []
from __future__ import absolute_import import json import logging import os import tempfile
colors = [color_map[y] for y in y_train] plt.scatter(X[:, 0], X[:, 1], c=colors, cmap=plt.cm.Paired)
func_globals.update(overrides)
parent_map = [[] for _ in children_map] for parent, children in enumerate(children_map): for child in children: parent_map[child].append(parent) return parent_map
return {'pythonexecutable': sys.executable}
with check_mongo_calls(0): cached_structure = self._get_structure(self.new_course)
if user: self.q(css='input[id^=sd_fu_]').first.fill(user) self.q(css='section.staff-modal a.staff-debug-reset').click()
dict(safe_zip(range(9), numpy.arange(9) * 5 + 30)),
from salt.modules import mac_group from salt.exceptions import SaltInvocationError, CommandExecutionError
xblocks = (blocks[ref] for ref in refs) return set([xblock.location for xblock in xblocks])
if user: state_object.updated_user = user
response = client.put(self.url, data=json.dumps(json_data), content_type=content_type) self.assertEqual(expected_status, response.status_code) return response
total_pages = int(math.ceil(float(total_students) / MAX_STUDENTS_PER_PAGE_GRADE_BOOK)) or 1
self.q(css="{} .action-close".format(self.TAB_SELECTOR)).first.click()
results.columns = db._results.c.keys() results = results.join(bench['name'], on='checksum').set_index("checksum") return results
self.assertRaises(KeyError, lambda: idxr(s)[3.5])
sample_weight = compute_sample_weight({1: 2, 2: 1}, y) assert_array_almost_equal(sample_weight, [2., 2., 2., 1., 1., 1.])
return self._ic['aic']
FACEBOOK_API_VERSION = AUTH_TOKENS.get("FACEBOOK_API_VERSION") FACEBOOK_APP_SECRET = AUTH_TOKENS.get("FACEBOOK_APP_SECRET") FACEBOOK_APP_ID = AUTH_TOKENS.get("FACEBOOK_APP_ID")
output = StringIO.StringIO() import_log_handler = logging.StreamHandler(output) import_log_handler.setLevel(logging.DEBUG)
self.assertFalse(auth.user_has_role(self.user, CourseCreatorRole()))
if getattr(value, 'empty', None) and (format == 'table' or append): return
return self.mean_h_given_v(v)
class FakeWriter(object): def __init__(self): self.output = ""
problem = self.store.get_item(problem_location) problem.display_name = problem_new_name self.store.update_item(problem, self.user_id)
if to_rep_re and regex_re: raise AssertionError('only one of to_replace and regex can be ' 'regex compilable')
for mode in ('audit', 'honor', 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
return 'column_name'
if not isinstance(data, SparseArray): data = SparseArray(data, sparse_index=sp_index, fill_value=fill_value, copy=False)
alias, driver = driver.split(':')
split_test.add_missing_groups(self.request) split_test = self._assert_children(3) self.assertEqual(group_id_to_child, split_test.group_id_to_child)
SuperWeightDoubling = WeightDoubling
return HttpResponseRedirect(next_page)
course = CourseFactory.create(course_image='', default_store=default_store) self.assertEquals( 'static/test.png', course_image_url(course), )
axes = df.hist(by='D', rot=30) self._check_axes_shape(axes, axes_num=1, layout=(1, 1)) self._check_ticks_props(axes, xrot=30)
class Person(Form): first_name = CharField() last_name = CharField() birthday = DateField()
df = self._rolling_rank() if self._time_effects: df += self._window_time_obs return df[self._valid_indices]
short_name = '.'.join(parts[:(i + 1)]) break
self.set_state_from_lcp()
from salt.exceptions import SaltInvocationError import salt.utils
self.assertEqual(updated_course.display_coursenumber, None)
current_val = request_params.pop('DeveloperProviderName', None) if current_val is None and DeveloperProviderName is not None: request_params['DeveloperProviderName'] = DeveloperProviderName
task_type = 'exec_summary_report' task_class = exec_summary_report_csv task_input = {} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
actual_decorator = user_passes_test( lambda u: u.is_authenticated, login_url=login_url, redirect_field_name=redirect_field_name ) if function: return actual_decorator(function) return actual_decorator
with ensure_clean_store(self.path) as store:
self._create_test_file( 'test_include.xml', '<test>Test include</test>' )
super(StatsEventerTestCase, self).setUp()
dive.delete(using='other')
for algorithm in ALGORITHMS:
pipe = Pipeline([('cls', LinearRegression())])
raise NotImplementedError('subclasses of BaseFinder must provide a list() method')
component.display_name = 'Changed' self.store.update_item(component, edit_user) updated_component = self.store.get_item(component.location)
self._check_legend_labels(ax, labels=['a']) self.assertEqual(len(ax.lines), 1)
return sys.modules[fullname]
import integration from salt.config import cloud_providers_config
while True: self.len_idx = np.mod(self.len_idx+1, len(self.len_unique)) curr_len = self.len_unique[self.len_idx] if self.len_curr_counts[curr_len] > 0: break
for label in [paired_test, 'model_inheritance_same_model_name']: try: test_labels.remove(label) except ValueError: pass
unvisited_children = list(get_children(current_node))
from abc import ABCMeta, abstractmethod
master_config.update(overrides) overrides = master_config
self.assertIn(error_msg, result['success'])
if self.rc > 0 and other.rc <= 0: noc_info = list(self.noc_info) noc_info[3] = -1 return method(tuple(noc_info), other.noc_info)
'syndic_finger': str,
getattr(self, 'error_dict')
('%&', '%&'), ('red&♥ros%#red', 'red&%E2%99%A5ros%#red'),
unknown = [k for k, w in known.items() if not w] known = dict((k, w) for k, w in known.items() if w)
known_vendors = ['nvidia', 'amd', 'ati', 'intel'] gpu_classes = ('vga compatible controller', '3d controller')
self = object.__new__(cls) self._constructor_args = (args, kwargs) return self
return series[notnull(_values_from_object(series))]
FIXTURE_DIRS = []
return random_module.choice(value)
self.assertRaises(TypeError, operator.add, datetime.now(), self.ts)
random = np.random.RandomState(seed=0) E = random.normal(size=(len(X), 2200))
def test_constructor_empty(self): sp = SparseDataFrame() self.assertEqual(len(sp.index), 0) self.assertEqual(len(sp.columns), 0)
data = _dict_compat(data) data = lib.fast_multiget(data, index.astype('O'), default=np.nan)
if n_iter > 0: ss = ((prev_alpha[0] - alpha_min) / (prev_alpha[0] - alpha[0])) coef[:] = prev_coef + ss * (coef - prev_coef) alpha[0] = alpha_min
content = StaticContent('loc', 'name', 'content_type', 'data', None, None, None) self.assertIsNone(content.thumbnail_location)
n_samples = 10000 n_features = 100 n_queries = 30 rng = np.random.RandomState(42)
Book.authors.through.objects.using('default').delete()
managed = False
for dummy in range(6): BadgeAssertionFactory.create()
def f(): df['foo']['one'] = 2 return df
if self.opts['add_proxymodule_to_opts']: self.opts['proxymodule'] = self.proxy
for n_neighbors in [3, 5, 7]: I_computed = _compute_mi(x, y, False, False, n_neighbors) assert_almost_equal(I_computed, I_theory, 1)
mlb = MultiLabelBinarizer(classes=[1, 3, 2]) assert_array_equal(mlb.fit(inp).transform(inp), indicator_mat) assert_array_equal(mlb.classes_, [1, 3, 2])
'ENABLE_MKTG_SITE': False,
return []
for key, value in dict_: self[key] = value
kernel_id = 138
self.assertEqual(len(res.context['object_list']), 7)
skip_if_no_sklearn() mapping = {'dataset_iterator': 'StratifiedDatasetValidationKFold'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
import salt import salt.utils import salt.version import salt.loader import salt.ext.six as six from salt.utils.decorators import depends
endpoint = get_xrds_url('login', request) if not endpoint: return default_render_failure(request, "Invalid OpenID request")
from __future__ import absolute_import import time import logging
response = self.client.post(reverse('donation')) self.assertEqual(response.status_code, 404)
n_samples, n_features, n_classes = 50, 20, 3 X, y = make_classification(n_samples=n_samples, n_features=n_features, n_informative=10, n_classes=n_classes, random_state=0)
if response.cookies: self.cookies.update(response.cookies)
first = pd.DataFrame([[datetime(2016, 1, 1)]]) first[0] = first[0].dt.tz_localize('Europe/London')
user = User.objects.get(username=username)
master.update( salt.config.get_cloud_config_value( 'master', vm_, opts, default={}, search_global=True ) ) return master
self.service.set_credit_requirement_status( self.user.id, no_credit_course.id, 'grade', 'grade' )
if not request.FILES['file_unicode'].name.endswith(UNICODE_FILENAME): return HttpResponseServerError()
return self.conditional.encode_conditional_params(z)
return has_studio_write_access(user, course_key)
from __future__ import absolute_import import os import random import string
context.update(configuration.get('default', {}))
def utcoffset(self, _dt): return timedelta(hours=-3) def dst(self, _dt): return timedelta(0)
with self.assertRaises(TypeError): class ProxyModel(SwappableModel):
return saltstack_version
log = logging.getLogger(__file__)
addr = "camelot" msg = '%r does not appear to be an IPv4 or IPv6 %s' with self.assertCleanError(ValueError, msg, addr, kind): factory(addr)
images = []
X, y = hastie_X, hastie_y ForestEstimator = FOREST_ESTIMATORS[name] clf = ForestEstimator(n_estimators=15, max_depth=3, warm_start=False, random_state=1, bootstrap=True, oob_score=True) clf.fit(X, y)
bridge.__grains__ = {}
many_to_many = False many_to_one = False one_to_many = False one_to_one = True
from __future__ import absolute_import import os
usage_id = unicode(usage_key) bookmarks_cache = self._bookmarks_cache(usage_key.course_key, fetch=True) for bookmark in bookmarks_cache: if bookmark['usage_id'] == usage_id: return True return False
from salt.ext import six
geom2 = OGRGeometry(g.hex) self.assertEqual(geom1, geom2)
return get_test_system(*args, **kwargs)
search = re.search(linere, line) if not search: continue
try: gc.collect(2) if not gc.get_referents(self.is_copy()): self.is_copy = None return except: pass
field_object = self._cache.get(self._cache_key_for_kvs_key(kvs_key)) if field_object is None: return None else: return field_object.modified
json_resp = json.loads(resp.content) self.assertEqual(json_resp.get('total_cost'), self.cart.total_cost)
probas = [c.fit(X, y).predict_proba(X) for c in (clf1, clf2, clf3, eclf)]
pl2_path, = pylearn2.__path__ file_list = _list_files(pl2_path, suffix) return file_list
url('(.+)/security/$', empty_view, name='security'),
for email in ["", "a"]: params["email"] = email assert_email_error("A properly formatted e-mail is required")
tagged_item = TaggedItem.objects.get(tag="salty") self.assertEqual(tagged_item.content_object, self.bacon)
for parent, children in enumerate(children_map): for child in children:
self.assertTrue('success' in result and not result['success'])
STRING_PAYLOAD = 'string_payload'
self._auto_auth({'username': 'test', 'course_id': course_id})
return {}
self._assert_requirements_displayed(response, [ PayAndVerifyView.PHOTO_ID_REQ, PayAndVerifyView.WEBCAM_REQ, ])
module = CapaFactory.create(xml=self.demand_xml)
return sorted(iteritems(d), key=operator.itemgetter(1), reverse=True)
if not self.transcript_language == 'en': return response
pass
return force_text(name.replace('\\', '/'))
self.assertFalse(signal.has_listeners()) self.assertEqual(signal.receivers, [])
request.view_name = view_func.__name__
return Series(self._r2_raw, index=self._result_index)
left = self.rng[:5] right = self.rng[5:10]
d_int32 = astype(a_int32, dtype=np.int32, copy=True) assert_false(np.may_share_memory(d_int32, a_int32))
solution_element.tag = 'targetedfeedback' targetedfeedbackset.append(solution_element)
mix = {'a': lrange(4), 'b': list('ab..')} dfmix = DataFrame(mix)
cmd = 'xar -x -f {0} {1}'.format(pkg, ' '.join(files)) __salt__['cmd.run'](cmd, cwd=temp_dir, output_loglevel='quiet')
multicast_network = IPv6Network('ff00::/8') return self in multicast_network
try: exec_fn( code_prolog + LAZY_IMPORTS + code, globals_dict, python_path=python_path, extra_files=extra_files, slug=slug, ) except SafeExecException as e: emsg = e.message else: emsg = None
s = Series(['A|B|C'])
xi_, yi, swi, idx = dataset._random_py() xi = sp.csr_matrix((xi_), shape=(1, X.shape[1]))
xpath = "//p[@class='status']" self.assert_has_text(xml, xpath, expected_text, exact=False)
assert_series_equal(nat_series_dtype_timedelta * 1.0, nat_series_dtype_timedelta) assert_series_equal(1.0 * nat_series_dtype_timedelta, nat_series_dtype_timedelta)
fig = plt.figure() plt.subplots_adjust(hspace=-.1, wspace=.4, top=.95, bottom=.05)
forecast = self._forecast_raw(h)[:, 0, :] return DataFrame(forecast, index=lrange(1, 1 + h), columns=self._columns)
test_command = 'sysbench --num-threads=16 --test=fileio ' test_command += '--file-num=32 --file-total-size=1G --file-test-mode={0} ' result = None ret_val = {}
with self.assertRaises(IntegrityError): Person.objects.update_or_create(first_name="Tom", last_name="Smith")
wip1 = W_list[i+1] hi_mean += T.dot(samples[i+1], wip1.T) * beta
self.prev_floatX = config.floatX config.floatX = 'float64'
import os import errno import logging import re import string
width = self.ext.config['veoh_width'][0] height = self.ext.config['veoh_height'][0] return flash_object(url, width, height)
assert_series_equal(ts.resample('a-dec').mean(), result) assert_series_equal(ts.resample('a').mean(), result)
generic_relation_base = GenericRelation(Relation)
self.addCleanup(self._mock_paver_needs.stop)
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.add_course_content_milestone(course_id, content_id, relationship, milestone)
INETARRAY_OID = 1041 INETARRAY = psycopg2.extensions.new_array_type( (INETARRAY_OID,), 'INETARRAY', psycopg2.extensions.UNICODE, ) psycopg2.extensions.register_type(INETARRAY)
shutil.rmtree(t_path)
self.assertEqual(context['currency'], 'PKR') self.assertEqual(context['currency_symbol'], 'Rs')
return 'edx.mit.edu'
self.client.logout()
return ' '.join('%f %f' % (coord[1], coord[0]) for coord in coords)
store = self._verify_modulestore_support(location.course_key, 'publish') return store.publish(location, user_id, **kwargs)
from __future__ import absolute_import import os import re import logging
if len(result) > 0: raise nose.SkipTest("Invalid results")
votes = np.round(ovo_decision) normalized_confidences = ovo_decision - votes
timedelta64_instance = np.timedelta64(1, 'D') self.assertEqual( type(timestamp_instance + timedelta64_instance), Timestamp) self.assertEqual( type(timestamp_instance - timedelta64_instance), Timestamp)
fields = dict(self.DEFAULTS, **kwargs) ProgramsApiConfig(**fields).save() return ProgramsApiConfig.current()
from __future__ import absolute_import, unicode_literals
data = dict( logo_src=branding_api.get_logo_url(), logo_url=branding_api.get_base_url(is_secure), ) return data
self.assertFalse(_can_download_report(self.user))
self.course_info_page.visit() self.tab_nav.go_to_tab('Course') self.courseware_page.verify_tooltips_displayed()
from salt.modules import netscaler
sparse_results = sparse_classifier.predict_proba(X_test_sparse) dense_results = dense_classifier.predict_proba(X_test) assert_array_equal(sparse_results, dense_results)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../')
rubric = RubricPage(self.browser) rubric.wait_for_page(timeout=60) return rubric
data.__grains__ = {} data.__salt__ = {} data.__opts__ = {}
fields = getattr(self, 'unmixed_class', self.__class__).fields
from __future__ import unicode_literals
m_log_alphas = -np.log10(model.cv_alphas_)
_base_iterator_cls = None
raise UnserializableContentError("Control characters are not supported in XML 1.0")
n_samples = 12 n_features = 2 n_iter = 10 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features)
(error, msg) = self._send_to_queue(header, body, files_to_upload)
from __future__ import unicode_literals
elif subarr.ndim == 1: if index is not None:
centerer = KernelCenterer() K_fit_centered = np.dot(X_fit_centered, X_fit_centered.T) K_fit_centered2 = centerer.fit_transform(K_fit) assert_array_almost_equal(K_fit_centered, K_fit_centered2)
contribution_amount = request.session.get( 'donation_for_course', {} ).get(unicode(course_key), '')
dquality_dir = (Env.REPORT_DIR / "diff_quality").makedirs_p()
_response = _request("GET", options['url'] + "_all_dbs") if options['db'] not in _response:
with patch_edxnotes_api_settings("http://example.com"): self.assertEqual("http://example.com/some_path/", get_endpoint_function("some_path/"))
from salt.ext.six import exec_ import salt.utils import salt.loader from salt.fileclient import get_file_client from salt.utils.pyobjects import Registry, StateFactory, SaltObject, Map import salt.ext.six as six
EDXNOTES_STUB_URL = os.environ.get('edxnotes_url', 'http://localhost:8042')
sequential_open_distrib = {} for row in db_query: row_loc = course_id.make_usage_key_from_deprecated_string(row['module_state_key']) sequential_open_distrib[row_loc] = row['count_sequential']
self.assertRaises(ValueError, f, axis=2)
import base64 import hashlib import hmac import StringIO
link = reverse('download_transcripts') resp = self.client.get(link, {'locator': 'BAD_LOCATOR'}) self.assertEqual(resp.status_code, 404)
simple_auth_pages = ( '/home/', )
warnings.filterwarnings( 'ignore', '^Module backports was already imported from (.*), but (.*) is being added to sys.path$', UserWarning )
overrides = overrides.copy() if overrides else {} overrides.setdefault("course_id", unicode(self.course.id)) return make_minimal_cs_thread(overrides)
return self.entrance_exam_message_selector.is_present() \ and "You have passed the entrance exam" in self.entrance_exam_message_selector.text[0]
self.mock_programs_api()
{date:%A, %d %B %Y @ %H:%m:%S UTC}.
if params.get('decision') == u'DECLINE': raise CCProcessorUserDeclined()
i = np.array([1, 2, 3]) a = DataFrame(i, index=i) _check_plot_works(a.plot, xerr=a) _check_plot_works(a.plot, yerr=a)
if convert_dates and values.dtype == np.object_:
attempts_left_open = CapaFactory.create(showanswer='past_due', max_attempts="1", attempts="0", due=self.tomorrow_str) self.assertFalse(attempts_left_open.answer_available())
if correct: self.problem_page.click_choice("choice_choice_2") else: self.problem_page.click_choice("choice_choice_1")
log.warning("Could not send email notification for refund.", exc_info=True)
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id) self.client.login(username=self.user.username, password=self.test_password)
task_input = { 'statuses_to_regenerate': [ CertificateStatuses.downloadable, CertificateStatuses.error, CertificateStatuses.generating ] }
lresult = last.value + (offset.nanos - loffset)
self.prob2 = ItemFactory.create( parent_location=self.course.location, category='problem', display_name='untitled problem 2' )
self._pool = None
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
ser = Series(np.random.randn(100), name=0) rep_str = repr(ser) self.assertIn("Name: 0", rep_str)
return (isinstance(obj, slice) and obj.start is None and obj.stop is None and obj.step is None)
continue
res_val = df.at["j", "cats"] self.assertEqual(res_val, exp_val)
gamma = 10. kernel = rbf_kernel(X, Y, gamma=gamma)
return self._is_element_visible("#wmd-input-comment-body-{}".format(response_id))
test_element = rendered_html.find("test") self.assertEqual(test_element.tag, "test") self.assertEqual(test_element.text, "Test include")
from __future__ import absolute_import
settings.apply_settings(self.settings) self.assertEqual([], provider.Registry.enabled())
import integration from salt.cli import daemons
self.assertNotContains(response, checkbox_html, html=True)
template_loc = self.location.replace(category='custom_tag_template', name=template_name)
import fnmatch import os import re import logging
fullname_with_subpath = content_path.replace(static_dir, '') if fullname_with_subpath.startswith('/'): fullname_with_subpath = fullname_with_subpath[1:] asset_key = StaticContent.compute_location(target_id, fullname_with_subpath)
uniques = DatetimeIndex(uniques.astype('M8[ns]')).tz_localize( values.tz)
return ( request.path.startswith('/' + XASSET_LOCATION_TAG + '/') or request.path.startswith('/' + AssetLocator.CANONICAL_NAMESPACE) )
result = pd.concat([s1, s2]) tm.assertIsInstance(result.index, PeriodIndex) self.assertEqual(result.index[0], s1.index[0])
transcripts = Dict(
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
has_force_batch_size = getattr(model, "force_batch_size", False) train_dataset_is_uneven = \ dataset.get_num_examples() % self.batch_size != 0
raise SaltClientError(msg)
X, = data assert X.shape[0] == self.counter_idx + 1 assert X[0,0] == self.counter_idx prereq_counter = self.counter prereq_counter.set_value(prereq_counter.get_value() + 1)
course_module = modulestore().get_course(course_key) if course_module is None: return Response(status=status.HTTP_404_NOT_FOUND) result_filter.update({'course_id': course_key})
self.run_function('cp.get_url', [TEST_PKG_URL, TEST_PKG])
assert_equal(train.union(test), set(range(n_samples)))
self.assertEqual(res.context['next_month'], None) self.assertEqual(res.context['previous_month'], datetime.date(2008, 10, 1))
msg = re.sub('(?ms)<html>(.*)</html>', '\\1', msg)
pca = TruncatedSVD(n_components=2) X_reduced = pca.fit_transform(X_transformed)
return cPickle.dumps(obj, get_pickle_protocol())
spmatrix = spmatrix.asformat(accept_sparse[0]) changed_format = True
cohort = get_cohort(user, course_key, use_cached=use_cached) return None if cohort is None else cohort.id
return self.q(css='body.view-teams').present
args = [name] if tree: args.append('--tree') if snap_name: args.extend(['--id', snap_name])
exit=False)
credit_course = CreditCourse.objects.get(course_key=credit_course.course_key) self.assertTrue(credit_course.enabled)
html_static_path = ['images']
s = Series([Timestamp('20130101 9:01'), Timestamp('20130101 9:02')])
subset = s[:'2012-01-04 06:55']
from salt.states import openstack_config
self.mstore = modulestore()
is_present = self.q(css=selector).present return is_present, is_present
response = self.client.get(changelist_url, {'pub_date__gte': 'foo'}) self.assertRedirects(response, '%s?e=1' % changelist_url)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, MagicMock, patch
self.assertEquals(preview.latex_preview('x', variables=['x']), 'x')
course = self.store.get_course(self.store.make_course_key( 'test_org', 'import_draft_order', 'import_draft_order' )) self.assertIsNotNone(course)
if cls.test_course_key not in [c.id for c in courses]: import_course_from_xml( store, ModuleStoreEnum.UserID.mgmt_command, DATA_DIR, XML_COURSE_DIRS, create_if_not_present=True )
_, timesteps, entities = self._data.values.shape return (timesteps - self._p) * entities
src_dir = os.path.join(sys.prefix, "src") if os.path.isdir(src_dir): files_to_fingerprint.append(src_dir)
from __future__ import absolute_import import sys import types import subprocess
sub_cmd = 'DROP SCHEMA "{0}"'.format(name) _psql_prepare_and_run( ['-c', sub_cmd], runas=user, maintenance_db=dbname, host=db_host, user=db_user, port=db_port, password=db_password)
problem1_content_before_switch = self.problem_page.problem_content
n_folds = 5 n_iter = 1000
self.assertRaises(KeyError, self.cf.describe_option, 'no.such.key')
import glob import logging import os import stat
__virtualname__ = 'sysctl'
class GeometryCollection(OGRGeometry): "The Geometry Collection class."
return thread_local_default_store
if 'repositories' not in excludes: repos = __salt__['pkg.list_repos']() if repos: data['repositories'] = repos
self.assertNotIn('url_name', course_xml.attrib)
for dsc in dscs: afile = os.path.basename(dsc) adist = os.path.join(dest_dir, afile) shutil.copy(dsc, adist)
return 'dval'
mapped = [mapped]
self.map_template = kwargs.pop('map_template', 'gis/google/google-single.js')
self.strategy.session_setdefault('auth_entry', 'login')
with tm.assertRaises(gbq.TableCreationError): gbq.to_gbq(df, destination_table, PROJECT_ID)
phi_aj = phi(a_j) derphi_aj = derphi(a_j)
if srs_type == 'user': self.import_user_input(srs_input) elif srs_type == 'epsg': self.import_epsg(srs_input)
self.assertFalse(self.store.has_changes(new_blocks["about"])) self.assertTrue(published_version_exists(new_blocks["chapter"]))
self.calc_zoom = False if self.polygons or self.polylines or self.markers: if center is None or zoom is None: self.calc_zoom = True
current_cost = 0.5 * residuals + alpha * np.sum(np.abs(code)) errors.append(current_cost)
self.client.ajax_post( self.problem_update_url, data={'publish': 'make_public'} )
pass
self.assertEqual(r.status_code, 200) self.client.get(reverse('admin:logout'))
self.cart, __ = self._create_cart()
Z = Z.reshape(xx.shape) plt.figure() plt.pcolormesh(xx, yy, Z, cmap=cmap_light)
VERSION = 1
target_found = True
self.mixed_frame['H'] = '1.' self.mixed_frame['I'] = '1'
exp_col = pd.Series(cats, index=idx, name='cats')
render_pipe = check_render_pipe_str(line.strip()[2:], renderers, blacklist, whitelist)
from __future__ import absolute_import, print_function
termination_criterion = EpochCounter(5)
import salt.utils from salt.exceptions import CommandExecutionError
config_course_cohorts( course, is_cohorted=True, auto_cohorts=["AutoGroup"] )
CONTRIB_TESTS_TO_APPS = { 'flatpages_tests': 'django.contrib.flatpages', 'redirects_tests': 'django.contrib.redirects', }
EmptyPromise(lambda: self.q(css='.bookmark-button').visible, "Bookmark button visible").fulfill() return True
response = self.client.get('/?clear-lang') self.assert_tag_has_attr(response.content, "html", "lang", site_lang)
ret.update({esxi_host: response})
for course_mode in CourseMode.objects.filter(course_id=self.course.id): course_mode.sku = '' course_mode.save()
return json.loads(self._pre_requisite_courses_json)
cp.__salt__ = {} cp.__opts__ = {} cp.__pillar__ = {} cp.__grains__ = {} cp.__context__ = {}
lm = LayerMapping(County, co_shp, co_mapping, transform=False)
import salt.ext.six as six
self.click(".action-publish") self.page.wait_for_ajax()
import salt.utils.dictupdate as dictupdate from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
self.prev_floatX = config.floatX config.floatX = 'float64'
sls[ks_opts['lang']['lang']] = {'locale': ['system']}
from __future__ import absolute_import import logging
return 'SubtaskStatus<%r>' % (self.to_dict(),)
return self.best_estimator_.transform(X)
df['C'] = idx assert_series_equal(df['C'], Series(idx, name='C'))
address_predefined = 'DJANGO_LIVE_TEST_SERVER_ADDRESS' in os.environ old_address = os.environ.get('DJANGO_LIVE_TEST_SERVER_ADDRESS')
BaseLoader = getattr(yaml, 'CSafeLoader', yaml.SafeLoader) BaseDumper = yaml.SafeDumper if six.PY3 else getattr(yaml, 'CSafeDumper', yaml.SafeDumper)
inference_fn(x)
value = value.encode(charset)
s = Series(list('aabbcde')) with tm.assertRaisesRegexp(AttributeError, "You cannot add any new attribute"): s.str.xlabel = "a"
from __future__ import unicode_literals
self.q(css='.button-view').first.click() self._switch_to_lms()
modulestore = XMLModuleStore(DATA_DIR, source_dirs=['toy']) courses = modulestore.get_courses() self.assertEquals(len(courses), 1) course = courses[0]
idx = pd.Index(list('abc'))
pkginfo = _get_package_info(pkg_name, saltenv=saltenv)
if output_pixel_vals: channel_defaults = [0, 0, 0, 255] else: channel_defaults = [0., 0., 0., 1.]
ret = __salt__['event.fire']({}, 'module_refresh')
return self.q(css=self.selector).present
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, username=username, email=email, staff=staff).visit()
from ._version import get_versions v = get_versions() __version__ = v.get('closest-tag',v['version']) del get_versions, v
if ret['changes']: sys.modules[ __salt__['test.ping'].__module__ ].__context__.pop('pkg._avail', None)
from random import choice characters = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)' SECRET_KEY = ''.join([choice(characters) for i in range(50)])
'ENABLE_PREREQUISITE_COURSES': False,
mac_sysctl.__salt__ = {}
self.create_programs_config(enable_certification=False) self._verify_response(400)
updates = _wua_search(software_updates=software, driver_updates=drivers, skip_installed=not installed)
pass
td = Series([timedelta(days=i) for i in range(3)] + ['foo']) self.assertEqual(td.dtype, 'object')
cert_type=server type_ext=True
self.assertEquals(22, self.response.content.count('grade_F'))
idx = MultiIndex.from_arrays(([1, 2, 3, 1, 2, 3], [1, 1, 1, 1, 2, 2]))
course_overview = CourseOverview.get_from_id(course.id) return self.serializer_class(course_overview, context={'request': self._get_request()}).data
for minion in minion_tracker[queue]['minions']: if minion not in parts: parts[minion] = {} parts[minion]['ret'] = {}
sdf = SparseDataFrame(columns=np.arange(10), index=np.arange(10)) for col, series in compat.iteritems(sdf): tm.assertIsInstance(series, SparseSeries)
return []
cont = ['one', 'two', 'three', 'four', 'five', 'six', 'seven']
log = logging.getLogger(__name__)
for label_index, weight in enumerate(n_samples_per_label): lightest_fold = np.argmin(n_samples_per_fold) n_samples_per_fold[lightest_fold] += weight label_to_fold[indices[label_index]] = lightest_fold
for field in _Swagger.SWAGGER_OBJ_V2_FIELDS_REQUIRED: if field not in self._cfg: raise ValueError('Missing Swagger Object Field: {0}'.format(field))
self.assertIn( settings.MICROSITE_CONFIGURATION['test_microsite']["urls"]['ABOUT'], data['company_about_url'] )
if self.min_weight_fraction_leaf != 0. and sample_weight is not None: min_weight_leaf = (self.min_weight_fraction_leaf * np.sum(sample_weight)) else: min_weight_leaf = 0.
req = self._get_POST_csrf_cookie_request() req2 = CsrfViewMiddleware().process_view(req, csrf_exempt(post_form_view), (), {}) self.assertIsNone(req2)
getkeys = self.ts.keys self.assertIs(getkeys(), self.ts.index)
self._first_chunk = False
cacher = getattr(self, '_cacher', None) if cacher is not None: cacher = cacher[1]() return cacher
s = Series(np.random.randn(5)) cond = s > 0
return course_mode_tuple.slug in cls.CREDIT_MODES
registry2 = CheckRegistry() registry2.register(f) registry2.register(f2, "tag1", "tag2") registry2.register(f3, "tag2", deploy=True)
queryset = (ExampleCertificate.objects).select_related('example_cert_set').filter(example_cert_set=self) for cert in queryset: yield cert
lhs = Series(randint(5, size=5)) expect = -lhs result = pd.eval(expr, engine=self.engine, parser=self.parser) assert_series_equal(expect, result)
solve_triangular_args = {'check_finite': False}
'ADVANCED_SECURITY': True,
if not SignatureValidator(lti_consumer).verify(request): return HttpResponseForbidden()
exc_info_on_loglevel=logging.DEBUG
if scope != Scope.user_state: raise ValueError("Only Scope.user_state is supported") raise NotImplementedError()
return 0
return result.get('payment_data')
if generic_view.uses_datetime_field: if settings.USE_TZ: result = timezone.localtime(result) result = result.date()
print "static_asset_path = {0}".format(course.static_asset_path) self.assertEqual(course.static_asset_path, 'test_import_course')
mat = mgr.as_matrix()
sls[ps_opts['d-i']['kbd-chooser']['method']['argument']] = { 'keyboard': ['system'] }
from salt.exceptions import CommandExecutionError from salt.modules import dockerng as dockerng_mod from salt.states import dockerng as dockerng_state
weights_with_None = [None] * 10 weights_with_None[5] = 0.5 self._compare( o.sample(n=1, axis=0, weights=weights_with_None), o.iloc[5:6])
return LocalFSReportStore.from_config(config_name='GRADES_DOWNLOAD')
latex_domain_indices = False
django.setup()
self._require_pytz() return "django_datetime_trunc('%s', %s, %%s)" % ( lookup_type.lower(), field_name), [tzname]
usage_key, _ = strip_ccx(usage_key) return self._modulestore.has_item(usage_key, **kwargs)
log = logging.getLogger(__name__)
for course_id, store in self.mappings.iteritems(): candidate_key = store.make_course_key(org, course, run) if candidate_key == course_id: return candidate_key
user = User.objects.get(username=username) world.scenario_dict['USER'] = user
response = self.client.get('/permission_protected_method_view/') self.assertRedirects(response, '/accounts/login/?next=/permission_protected_method_view/')
with patch('openedx.core.djangoapps.safe_sessions.middleware.log.' + log_level) as mock_log: yield mock_log.assert_any_call(log_string)
courses = modulestore().get_courses(branch=BRANCH_NAME_DRAFT) self.assertEqual(len(courses), 3)
def f(x): if not isinstance(x, pd.Timestamp): raise ValueError return str(x.tz)
warnings.warn("non-uniform sample weights unsupported for svd, " "forcing usage of eigen") gcv_mode = 'eigen'
if (self._use_relativedelta and set(self.kwds).issubset(relativedelta_fast)):
s = Series(date_range('jan-01-2013', 'jan-05-2013'))
with transaction.atomic(): return wrapped_func(*args, **kwargs)
return number_format_dict['format_code']
maxa = df['A'].max() tm.assertIsInstance(maxa, Timestamp)
self.assertTrue(search_paths[1].endswith(deploy_path))
with tm.assertRaisesRegexp(TypeError, "fillchar must be a character, not str"): result = values.str.center(5, fillchar='XY')
assert_warns(UserWarning, BaggingClassifier(base_estimator=base_estimator, n_estimators=1, bootstrap=True, oob_score=True, random_state=rng).fit, X_train, y_train)
self.assertEqual( df.set_index(['a', 'b']).to_csv(float_format='%.2f'), expected)
Xt = X for name, transform in self.steps[:-1]: Xt = transform.transform(Xt) return self.steps[-1][-1].predict_log_proba(Xt)
self.assertRaises(AssertionError, BlockManager, blocks, axes)
def f(x): if not isinstance(x, pd.Timestamp): raise ValueError return str(x.tz)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
LINKED_USERS = (ALICE_USERNAME, STAFF_USERNAME, ADMIN_USERNAME) PASSWORD = "edx"
res = df.loc[lambda x: 1, lambda x: 'A'] self.assertEqual(res, df.loc[1, 'A'])
DEBUG = True
grid_search.score(X, y) grid_search.predict_proba(X) grid_search.decision_function(X) grid_search.transform(X)
self.assertIs(p.restaurant, r)
from salt.states import kmod
import integration from salt.exceptions import CommandExecutionError
c4 = Category.objects.create(name='Fourth', url='4th') self.assertEqual(f.clean(c4.id).name, 'Fourth')
super(AutoAuthEnabledTestCase, self).setUp() self.url = '/auto_auth' self.client = Client()
_mutable = True _encoding = None
from __future__ import absolute_import
display_name = String(help="Display name for this module", scope=Scope.settings)
date = date.strftime('%Y-%m-%d %H:%M')
return super(MongoBulkOpsMixin, self)._is_in_bulk_operation( course_id.for_branch(None), ignore_case )
request = Mock() request.user = self.instructor return request
from __future__ import absolute_import
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
error_msg = 'Error not available'
CourseEnrollment.enroll(self.user, self.course_key, mode="verified")
providers_config_path = _absolute_path(providers_config_path, config_dir)
if attr == self.ASSET_TYPE_ATTR: value = self.asset_id.asset_type elif attr == self.ASSET_BASENAME_ATTR: value = self.asset_id.path else: value = getattr(self, attr)
xblocks = get_course_blocks(course_key, category) return xblocks
rs = ser.replace({np.nan: -1, 'foo': -2, 'bar': -3})
__virtualname__ = 'augeas'
from __future__ import unicode_literals
selected = block_keys['selected']
if len(User.objects.filter(username=uname)) > 0: return
'grains_dirs': list,
if len(cls.tags) == 0: raise ValueError("No tags specified for class {0}".format(cls.__name__))
if 'emitatstartup' not in config: config['emitatstartup'] = True if 'onchangeonly' not in config: config['onchangeonly'] = False
return json.dumps(self.create_segmentio_event(**kwargs))
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if self.starts_with: flatpages = flatpages.filter( url__startswith=self.starts_with.resolve(context))
RANDOM_SEED = np.random.randint(2 ** 10)
initial_handlers = logging.root.handlers[:]
return [[False]]
expected = np.array([False] * len(idx), dtype=bool) self.assert_numpy_array_equal(idx._isnan, expected) self.assertFalse(idx.hasnans)
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
self.q(css='div.problem button.hint-button').click() self.wait_for_ajax()
cohort_list[0].users.add(*user_list) assert_events("added", user_list, cohort_list[:1]) mock_tracker.reset_mock()
self.assertEqual( chan.getElementsByTagName('atom:link')[0].getAttribute('href'), 'http://example.com/syndication/rss2/' )
self.assertTrue(video_xblocks == 2)
A = A[:30] B = B[:30] C = C[:30]
self.assert_error(params, field, expected_error)
if subtitles: self.assets.append('subs_3_yD_cEKoCk.srt.sjson') self.navigate_to_course_unit()
rng = check_random_state(0) n_features = 5 n_samples = 40 n_output = 4
assert_raises(ValueError, _hc_cut, n_leaves + 1, children, n_leaves)
import ioflo.app.run import salt.ext.six as six
def __init__(self, name, template_name): self.name = name self.template_name = template_name
skiprows = 1 if headers else 0 x = np.loadtxt(test_path, delimiter=delimiter, skiprows=skiprows)
__virtualname__ = 'shadow'
return _check_range_and_return('horizontal shift', label, -5, 5)
DEFAULT_COURSE_ABOUT_IMAGE_URL = ENV_TOKENS.get('DEFAULT_COURSE_ABOUT_IMAGE_URL', DEFAULT_COURSE_ABOUT_IMAGE_URL)
usage_key = usage_key.replace(course_key=store.fill_in_run(usage_key.course_key))
role, instructions = part.split('=') role = role.upper()
self.assertContains(response, 'Base view for admindocs views.')
'auto_accept': bool, 'autosign_timeout': int,
sparse_results = sparse_classifier.decision_function(X_test_sparse) dense_results = dense_classifier.decision_function(X_test) assert_array_equal(sparse_results, dense_results)
W = rng.randn(n_components, n_features) h = rng.randn(n_samples, n_components) noise = rng.gamma(1, size=n_features) * rng.randn(n_samples, n_features)
if not update.IsDownloaded and not update.IsInstalled: results['Available'] += 1
it = TableIterator(self, s, func, where=where, nrows=nrows, start=start, stop=stop, iterator=iterator, chunksize=chunksize, auto_close=auto_close)
self.assertEqual(include(self.url_patterns, 'namespace'), (self.url_patterns, None, 'namespace'))
y_true, _, probas_pred = make_prediction(binary=True) fpr, tpr, thresholds = roc_curve(y_true, probas_pred)
if style_dict.get('font'): font = style_dict['font'] if font.get('bold'): xl_format.set_bold()
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
return None
if not self._verify_auth(): self.redirect('/login') return
response = render_to_response(path, context) response.mako_context = context response.mako_template = path return response
def assertEquals(self, *args, **kwargs): return deprecate('assertEquals', self.assertEqual)(*args, **kwargs)
return self._upsample('pad', limit=limit)
end = datetime(year=2013, month=11, day=2, hour=0, minute=0, tzinfo=dateutil.tz.tzutc())
self._validate_estimator()
if lib.isscalar(arr): arr = [arr]
df3 = df.copy() df3['s'].cat.remove_unused_categories(inplace=True)
super(TestLibraryExport, self).setUp() self.export_page = ExportLibraryPage(self.browser, self.library_key) self.export_page.visit()
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM')
sh_ = '/bin/sh' if os.path.isfile(os.path.join(root, 'bin/bash')): sh_ = '/bin/bash'
ix = date_range('1/1/2000', '1/1/2001', freq='M') tdf = DataFrame(d, index=ix) tdf_err = DataFrame(d_err, index=ix)
values = lib.maybe_convert_objects(values)
return {"result": "inclusion_one_param - Expected result: %s" % arg}
self.assertIn(REG_STR, resp.content)
import logging
if fragment: transformed_url += ('?#' if '?#' in url else '#') + fragment
self.alpha = alpha
if view_html: fragment.add_content(view_html) return fragment
if isinstance(command, dict): plugin = next(six.iterkeys(command)) args = command[plugin] else: plugin = command args = ''
send_mail(subject, message, from_email, [self.email], **kwargs)
self.assertEqual(two_toys.grade_cutoffs['C'], 0.5999)
self.assertTrue(has_expanded_repr(df))
response_dict = json.loads(response.read())
with tm.assert_produces_warning(FutureWarning): df.sort_index(by=['a'])
return np.dot(self._x.values, self._beta_raw)
for sql in self.geometry_sql: self.execute(sql) self.geometry_sql = []
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
mark.save(using='default')
super(ForgotPasswordPageTest, self).setUp() self.user_info = self._create_user() self.reset_password_page = ResetPasswordPage(self.browser)
self.class_names = [array[0].encode('utf-8') for array in test['class_names'][0]]
FEATURES['ENABLE_TEAMS'] = True
setattr(value, self.related.field.get_cache_name(), instance)
return self.is_enabled(self.NEXT_PAGE_BUTTON_CSS)
except ValidationError as err: return Response(err.messages, status=status.HTTP_400_BAD_REQUEST)
dependency_dict = defaultdict(lambda: defaultdict(set))
open.alters_data = True
try: user = c.Win32_UserAccount(Name=name)[0] except IndexError: raise CommandExecutionError('User \'{0}\' does not exist'.format(name))
log = logging.getLogger(__name__)
from salt.states import user
index = Int64Index(iter([-5, 0, 1, 2])) tm.assert_index_equal(index, expected)
self._install_course_fixture() self._navigate_to_course_unit_page()
with patch('os.path.isfile', MagicMock(return_value=False)) as mock: local_cache.clean_old_jobs()
resources = find_release_resources() sh("i18n_tool transifex push " + " ".join(resources))
assert isinstance(doc['Summary'][0], str) assert doc['Summary'][0] == 'öäöäöäöäöåååå'
if isinstance(obj, OpaqueKey): return unicode(obj) return JSONEncoder.default(self, obj)
cls.course_commentable_id = "course_level_commentable"
if record.failure_count >= max_failures_allowed: lockout_period_secs = settings.MAX_FAILED_LOGIN_ATTEMPTS_LOCKOUT_PERIOD_SECS record.lockout_until = datetime.now(UTC) + timedelta(seconds=lockout_period_secs)
assert_raises(ValueError, lambda: GradientBoostingClassifier().feature_importances_)
return make_style('nocolor')
ssh_args.extend([ '-oPasswordAuthentication=no', '-oChallengeResponseAuthentication=no', '-oPubkeyAuthentication=yes', '-oIdentitiesOnly=yes', '-oKbdInteractiveAuthentication=no', '-oIdentityFile={0}'.format(kwargs['key_filename']) ])
return self.filter_by(data, "usage_id", usage_id)
ts = datetime(starting.year, starting.month, starting.day - starting.weekday())
Donation.add_to_order(cart, amount, course_id=course_id)
from __future__ import unicode_literals
if ret: run(name, 'touch \'{0}\''.format(SEED_MARKER), path=path, python_shell=False)
allow_database_queries = True
def __init__(self): self.items = []
index = DatetimeIndex(['1/3/2000']) try: index.get_loc('1/1/2000') except KeyError as e: self.assertIn('2000', str(e))
self.course_info_page.visit() self.tab_nav.go_to_tab('Course')
FIELD_OVERRIDE_PROVIDERS = ()
module_class = RandomizeModule resources_dir = None
return json.dumps(files.split())
input_dict = {'1_2_1': '42'} correct_map = problem.grade_answers(input_dict)
X = X_digits_multi[:10] y = y_digits_multi[:10]
course = CourseFactory.create() item = ItemFactory.create(parent_location=course.location) self.assertIsInstance(item, SequenceDescriptor)
if issubclass(Estimator, ProjectedGradientNMF): with ignore_warnings(): yield check_get_params_invariance, name, Estimator else: yield check_get_params_invariance, name, Estimator
resp = self.create_xblock(parent_usage_key=self.usage_key, category='chapter') self.chapter_usage_key = self.response_usage_key(resp)
call_command("loaddata", "course_email_template.json")
if library_role: library_role(self.lib_key).add_users(self.non_staff_user) if course_role: course_role(course.location.course_key).add_users(self.non_staff_user)
return CourseDetails.fetch_about_attribute(course_overview.id, 'overview')
self.assertTrue(PasswordHistory.is_allowable_password_reuse(user, "test")) self.assertTrue(PasswordHistory.is_allowable_password_reuse(staff, "test"))
from __future__ import unicode_literals
from salt.modules import localemod from salt.exceptions import CommandExecutionError
if not np.prod(result.shape): return trans(result).astype(dtype)
y = [5, 0, 5] for X in ([[5, 0], [0, 5], [10, 10]],
from salt.exceptions import CommandExecutionError
if isinstance(v, six.binary_type):
self._find_within("#comment_{} .wmd-input".format(comment_id)).fill(new_body)
self._layers.append(layer) if self._params is not None: self._params.update(layer._params)
bob = User.objects.db_manager('other').create_user('bob', 'bob@example.com')
for average in ['macro', 'weighted', 'micro']: assert_not_equal(recall_13(average=average), recall_all(average=average))
return timezone.tzname(None)
defaults = {'max_length': self.max_length, 'widget': forms.Textarea} defaults.update(kwargs) return super(TextField, self).formfield(**defaults)
return 0
self._routers = routers
minion = salt.cli.daemons.Minion() minion.start() break
self.q(css="input.no_special_exam").first.click()
user = User.objects.get(email=self.enrolled_student.email) self.assertFalse(CourseEnrollment.is_enrolled(user, self.course.id))
def f(): cat.reorder_categories(["a", "b", "d"])
next_url = None if self.page.has_next(): next_url = replace_query_param(self.base_url, "page", self.page.next_page_number()) return next_url
encoding = _ensure_encoding(encoding) if encoding is not None and len(data):
grade_response = None
import integration import salt.utils
CourseRerunState.objects.failed(course_key=destination_course_key) logging.exception(u'Course Rerun Error') return "duplicate course"
pickle.dumps(x)
break
obj.admin = request.user obj.save()
observer.schedule(self, 'common/lib/xmodule/', recursive=True)
return self.q(css='.choose-file-button').present
assert_in(role, ['instructor', 'staff'])
data = np.asarray(data[skip:skip+trials])[:, 0, :, :]
LogoutPage(self.browser).visit() StudioAutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
userKeys += ['id_rsa', 'id_dsa', 'id_ecdsa', 'id_ed25519']
return self.values.base is not None
from __future__ import unicode_literals
result = get_email_params( self.course, True, course_key=self.course_key, display_name=self.ccx.display_name )
s = Series([1, 3, np.nan, np.nan, np.nan, 11])
if not hasattr(self, '_datasets'): self._datasets = [self._dataset] del self._dataset
raise ItemNotFoundError(course_key)
cmd.extend(packages)
('ALIGN', (2, 0), (4, 0), 'CENTER'),
_('%(class_name)s %(instance)s') % { 'class_name': p._meta.verbose_name, 'instance': p}
clf = BayesianRidge(compute_score=True) clf.fit(X, y)
ret = self.run_function('beacons.enable_beacon', ['ps']) self.assertTrue(ret['result'])
raise CommandError(_( 'Invalid permission option: "{}". Please specify permissions ' 'using the format: app_label:model_name:permission_codename.' ).format(permission))
html = module.get_problem_html(encapsulate=False)
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
return JsonResponse( { 'success': False, 'message': _('Invalid data, generate_for must be "new" or "all".'), }, status=400 )
if pkg: pkg = _cmd_quote(pkg)
time.sleep(10)
return datetime.datetime.utcnow().replace(tzinfo=utc)
resp = self.client.post(reverse('shoppingcart.views.use_code'), {'code': coupon.code}) self.assertEqual(resp.status_code, 200)
(False, True), (False, False),
return 1 / numpy.sin(arg)
if tasks.environment.dry_run: for cmd in cmd_list: tasks.environment.info(cmd) return
super(SupportViewIndexTests, self).setUp() SupportStaffRole().add_users(self.user)
folds = list(cv.split(X)) best_mse = np.inf
for svd_10, svd_20 in svds_10_v_20: assert_array_almost_equal( svd_10.explained_variance_ratio_, svd_20.explained_variance_ratio_[:10], decimal=5, )
check_cuda(str(type(self)))
from salt.utils import get_colors
choice.text = "choice_{0}".format(ind) input_element.append(choice)
module_class = EmptyXModuleWithChildren has_children = True
self._assert_chapter_loaded(self.course, self.chapter)
super(RegisterPage, self).__init__(browser) self._course_id = course_id
result.index.name = 'stat_%d' % len(group)
if module_has_submodule(app_config.module, module_to_search): raise
text = force_text(text) return re_newlines.sub('\n', text)
with self.store.default_store(ModuleStoreEnum.Type.split): resp = self.client.get_html('/c4x/InvalidOrg/InvalidCourse/asset/invalid.png') self.assertEqual(resp.status_code, 404)
nanops.nanmax)
pass
_win(kernel32.DuplicateHandle, wintypes.BOOL,
self.deferred_loading = field_names.difference(existing), False
def test_barycenter_kneighbors_graph(): X = np.array([[0, 1], [1.01, 1.], [2, 0]])
clf.intercept_scaling = 1000 clf.fit(X, y) intercept2 = clf.intercept_ assert_array_almost_equal(intercept1, intercept2, decimal=2)
self.assertTrue(mock_audit_log.called)
return self.func_to_count(param1, param2)
if output: grains['virtual'] = output.lower() break
class FileForm(Form): file1 = FileField()
self.status = None self.__irix_hack = 'irix' in sys.platform.lower()
b = clf.support_vectors_[0] yy_down = a * xx + (b[1] - a * b[0]) b = clf.support_vectors_[-1] yy_up = a * xx + (b[1] - a * b[0])
if server_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'scaleway', server_['profile'], vm_=server_) is False: return False
list_updates = salt.utils.alias_function(list_upgrades, 'list_updates')
self.assertEqual(res.context['next_day'], None) self.assertEqual(res.context['previous_day'], datetime.date(2008, 10, 1))
self.assertIn(d['country_name'], ('Curaçao', 'Curacao'))
obj = OrderedDict([ ('foo', 1), ('bar', 2), ('baz', {'qux': True}) ])
if isinstance(instance, RestrictedCourse): CourseAccessRuleHistory.save_snapshot(instance) elif isinstance(instance, CountryAccessRule): CourseAccessRuleHistory.save_snapshot(instance.restricted_course)
return s
new_info = info(new_name) if new_info: raise CommandExecutionError( 'User \'{0}\' already exists'.format(new_name) )
DATE_INPUT_FORMATS = [
error_msg = _("An error occurred while deleting the score.") return HttpResponse(error_msg, status=500)
DEBUG_TOOLBAR_MONGO_STACKTRACES = False
if block_type == 'html': self.assertElementAttrsSubset(element, {'filename': filename})
get_token(request) return retval
continue
self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')
expected = np.array([1.0e-03, 1.0e-02, 1.0e-01, 1.0e+00])
import collections
stream1 = StringIO() stream2 = StringIO() handler1 = StreamHandler(stream1) handler2 = StreamHandler(stream2)
if ax.is_first_col(): continue if sharey or len(ax.get_shared_y_axes().get_siblings(ax)) > 1: _remove_labels_from_axis(ax.yaxis)
import salt.ext.six as six
dictionary = _update_dict(dictionary, B, A, verbose=verbose, random_state=random_state)
certificate_template_asset.asset = SimpleUploadedFile('picture1.jpg', 'file contents') certificate_template_asset.save() self.assertEqual(certificate_template_asset.asset, 'certificate_template_assets/1/picture1.jpg')
return view_course_access(depth=depth, access_action='load_mobile', check_for_milestones=True)
if os.path.isfile(rtag) and refresh: os.remove(rtag)
tm.assertRaisesRegexp(TypeError, self.mutable_regex, *args, **kwargs)
pythoncom.CoInitialize() c = wmi.WMI(find_classes=0)
def test_infer_tz(self): eastern = self.tz('US/Eastern') utc = pytz.utc
skip_entrance_exam = models.BooleanField(default=True)
bio.write(struct.pack(byteorder + 'i', self.len))
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), list(Book.objects.all().order_by('-id')))
true_path = os.path.realpath(file_path) if not os.path.exists(true_path): continue
python_shell = False if '*.' in cmd: python_shell = True
assert new_axes[0].equals(items) new_axes[0] = items
from __future__ import absolute_import, print_function import copy import fnmatch import json import logging import os import shutil import sys import tarfile import tempfile import time
if re.match(GUID_REGEX, snap_name): return snap_name.strip('{}') else: return snapshot_name_to_id(name, snap_name, strict=True, runas=runas)
self._base_test_extauth_auto_activate_user_with_flag(log_user_string="user.id: 1")
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON
key1 = user_state_key('field_a') key2 = user_state_key('field_b') new_value = 'new value' newer_value = 'newer value' return {key1: new_value, key2: newer_value}
for setting in dir(global_settings): if setting.isupper(): setattr(self, setting, getattr(global_settings, setting))
dset = fetch_mldata(dataname, transpose_data=False, data_home=tmpdir) assert_equal(dset.data.shape, (3, 2))
if link_in_col(first, field_name, cl): table_tag = 'th' if first else 'td' first = False
if self.target_id: assert len(self.xml_module_store.modules) == 1
example_messages = ['test', 'me'] set_cookie_data(storage, example_messages) self.assertEqual(list(storage), example_messages)
for member in val: if fnmatch.fnmatch(str(member).lower(), comps[1].lower()): return True return False
df3 = DataFrame({'col1': [0, 1], 'col2': ['a', 'b']})
args = [ str.lower, {x: x.lower() for x in idx}, Series({x: x.lower() for x in idx}), ]
params = [] params.append(name) for root_dev in layout:
import tornado.ioloop
if deploy: vm_info['key_filename'] = key_filename vm_info['ssh_host'] = ip
from salt.states import bower from salt.exceptions import CommandExecutionError
email_context = {'name': '', 'email': ''} email_context.update(global_email_context)
if 'default' in settings.MICROSITE_CONFIGURATION: self._set_microsite_config('default', subdomain, domain) return
add_course_url = urlparse.urljoin(course.ccx_connector, CCXCON_COURSEXS_URL) resp = oauth_ccxcon.post( url=add_course_url, json=payload, headers=headers, timeout=CCXCON_REQUEST_TIMEOUT )
if isinstance(x, SparseArray): x = x.get_values() x = x.ravel() if axis > 0: x = np.atleast_2d(x) return x
import nose
w = np.zeros(n_features + 1) loss_interp, grad_interp = _logistic_loss_and_grad( w, X, y, alpha=1. ) assert_array_almost_equal(loss, loss_interp)
api.remove_credit_requirement_status("bob", self.course_key, "grade", "grade")
try: content = contentstore().find(self.content_location) contentstore().delete(content.location) except NotFoundError: pass
self.assertEqual(CourseEnrollment.objects.count(), 1) enrollment = CourseEnrollment.objects.get(course_id=course_key) self.assertEqual(enrollment.user.username, "test")
with tm.assert_produces_warning(FutureWarning): result_add = rng + other
import pandas.util.testing from pandas.util.nosetester import NoseTester test = NoseTester().test del NoseTester
response = requests.get(self._get_url("api/v1/annotations"), params={"user": "dummy-user-id"})
LogoutPage(self.browser).visit() self._login_as_a_verified_user() self.courseware_page.visit()
MOCK_SEARCH_BACKING_FILE = ( TEST_ROOT / "index_file.dat" ).abspath()
for key in list(to_cleanup.keys()): instance = to_cleanup.pop(key) del instance
self.local = salt.client.get_local_client( self.opts['_minion_conf_file'], io_loop=self.io_loop) self.local.event.subscribe('')
import integration from salt.config import minion_config
if class_probability is None: class_prob_j = np.empty(shape=classes[j].shape[0]) class_prob_j.fill(1 / classes[j].shape[0]) else: class_prob_j = np.asarray(class_probability[j])
seed = module.seed self.assertTrue(seed is not None)
return self.reset_attempts_button.is_present()
self.assertContains(response, 'MAGIC', status_code=404)
for tablename in tablenames: self.create_table(db, tablename, dry_run)
if not GlobalStaff().has_user(user): course_keys = [course_key for course_key in course_keys if has_access(user, access_type, course_key)]
shim_file += "c"
response = middleware.process_response(request, response) self.assertTrue( response.cookies[settings.SESSION_COOKIE_NAME]['secure'])
grid_search_no_score.fit(X, y)
self.set_many({key: value})
self.assertEqual(xblock_info['is_header_visible'], False) self.assertEqual(xblock_info['display_name'], 'Subsection - Entrance Exam')
value = answers[name] defaults = {"field_value": value} if course_key: defaults['course_key'] = course_key
for definition in bulk_write_record.definitions.values(): definition_id = definition.get('_id') if definition_id in ids: ids.remove(definition_id) definitions.append(definition)
super(PresenterTestCase, self).setUp()
email.to_option = next( ( t_type for t_type in ( target.target_type for target in email.targets.all() ) if t_type in EMAIL_TARGETS ), SEND_TO_MYSELF ) email.save()
'rest_timeout': int,
incxml = etree.XML(ifp.read())
import salt.exceptions import salt.ext.six as six import salt.utils
return self._get_permissions(user_obj, obj, 'group')
self.assertEqual('/%257Eme/places/1/', reverse('places', args=[1]))
return self.conditional.conditional_expectation(theta)
if self.assume_centered: self.location_ = np.zeros(X.shape[1]) else: self.location_ = X.mean(0)
return []
return "str(random.randint(0, 1e9))"
import integration
return super(DatetimeBlock, self)._astype(dtype=dtype, **kwargs)
assert_greater(brier_score_loss(y_test, prob_pos_clf), brier_score_loss(y_test, prob_pos_pc_clf))
def get_attr(self): pass
energy = dbm.energy(V = v_state, hidden = [y_state]) unnormalized_prob = T.exp(-energy) assert unnormalized_prob.ndim == 1 unnormalized_prob = unnormalized_prob[0] unnormalized_prob = function([], unnormalized_prob)
output = self.engine.render_to_string('i18n07', {'number': 1}) self.assertEqual(output, 'singular')
for pn_key, pn_val in run_out['virgo-dummy'].items(): if pn_key == 'source_rpm': continue self.assertEqual(installed['virgo-dummy'][pn_key], pn_val)
from __future__ import absolute_import from contextlib import contextmanager import json import sys
import logging import sys
from salt.modules import cron from salt.ext.six.moves import builtins, StringIO
CMS_SEGMENT_KEY = None
self.events.append(event)
del results[-1] max_exceeded = True
import salt.utils import salt.output from salt.utils.locales import sdecode
CreditProvider.objects.create( provider_id="ASU", enable_integration=True, provider_url="https://credit.example.com/request", )
response.client = self response.request = request
from salt.modules import ipset
knn.fit(X, y_str) y_pred = knn.predict(X[:n_test_pts] + epsilon) assert_array_equal(y_pred, y_str[:n_test_pts])
result = ols(y=y, x=x)
config.toggle()
z = zr.astype(self.tp.upper())
from contextlib import contextmanager import logging
pass
source_lines = list(islice(source_file_obj, first_line - 1, None))
super(TestLibraryContentModuleWithSearchIndex, self).setUp() search_index_mock.search = Mock(side_effect=self._get_search_response)
from salt.states import gnomedesktop
mock_audit_log.reset_mock()
course_email_template = course_email.get_template() try: connection = get_connection() connection.open()
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
params["email"] = "this_email_address_has_76_characters_in_it_so_it_is_unacceptable@example.com" assert_email_error("Email cannot be more than 75 characters long")
super(ProblemTypeTestBase, self).setUp() self.courseware_page.visit() self.problem_page = ProblemPage(self.browser)
result = i.to_series(keep_tz=True) assert_series_equal(result.reset_index(drop=True), expected)
y[::5] += 1 * (0.5 - np.random.rand(8))
log = logging.getLogger(__name__)
self.assertRaises(Exception, grouped['C'].__getitem__, 'D')
course_query = self._course_key_to_son(course_key) self.collection.remove(course_query, multi=True) self.delete_all_asset_metadata(course_key, user_id)
query = self.q(css=SETTINGS_NAME_SELECTOR) return query.attrs('id')
idx = np.arange(X.shape[0]) np.random.seed(13) np.random.shuffle(idx) X = X[idx] y = y[idx]
def test_no_auth(self): self.logout() self.api_response(expected_response_code=401)
from salt.exceptions import CommandExecutionError from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
__virtualname__ = 'virtualenv'
y = [3, 3, -1, -1, 2]
pub_data = self.saltclients['local_async'](*f_call.get('args', ()), **f_call.get('kwargs', {}))
Series([3., 2, 1, 2, 5], dtype='complex128'),
module_dependencies=dependencies)
self.selenium.find_elements_by_css_selector('.field-birthdate .timezonewarning')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
store.append('s3', wp, min_itemsize={'major_axis': 20}) self.assertRaises(ValueError, store.append, 's3', wp2)
self.login(email, password) self.enroll(self.course, verify=True)
result = embargo_api.check_course_access(self.course.id, ip_address='0.0.0.0') self.assertTrue(result)
s = ser.reset_index(drop=True) s2 = ser s2.reset_index(drop=True, inplace=True) assert_series_equal(s, s2)
raise NotImplementedError()
return services[name]
return 'UTC'
course_location = locator.CourseLocator('Org1', 'Course1', 'Run1') self.course, self.enrollment = self._create_course_and_enrollment(course_location)
return self.page.q(css=self.MODAL_SELECTOR).present
y_type = type_of_target(y) if y_type == "multiclass": inversed = _inverse_binarize_multiclass(binarized, classes=classes)
return exe
df = DataFrame({'a': [1, 2, 3]})
help = ''
#pepa_delimiter: ..
self.assertEqual(ser.loc[index[1]], 1)
log_prob_x = logsumexp(jll, axis=1) return jll - np.atleast_2d(log_prob_x).T
mean = np.zeros(2)
report_dir = (Env.REPORT_DIR / system).makedirs_p()
result = f.clean('12/21/2010 13:30:05') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
keys_config['key_logfile'] = os.devnull keys_config['pki_dir'] = self.options.gen_keys_dir
ieee1 = xport1 & 0x00ffffff
return ""
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
import salt.utils from salt.ext.six import string_types
return _xblock_type_and_display_name(find_release_date_source(xblock))
return stdout
if hasattr(func, 'im_func'): func = func.__func__
self.user.is_staff = True self.assertTrue(user_has_role(self.user, CourseCreatorRole()))
if getattr(node, 'due', None): units.append(node) else: for child in node.get_children(): visit(child)
self.assertEqual(response.status_code, 400)
('svc', SVC(kernel='linear')),
if not is_cross_domain_request_allowed(request): log.debug("Could not set cross-domain CSRF cookie.") return response
return auth.get_flow(secrets, self.scope, self.redirect_url)
MODULESTORE_FIELD_OVERRIDE_PROVIDERS = ()
if is_term(left) and is_term(right) and op_type in self.rewrite_map:
run_command = (test_command + 'prepare').format(mode) __salt__['cmd.run'](run_command)
assert_index_equal(left.index, right.index, exact=check_index_type, check_names=check_names, check_less_precise=check_less_precise, check_exact=check_exact, check_categorical=check_categorical, obj='{0}.index'.format(obj))
gmm.fit(X)
self.lc_block.source_library_id = "library-v1:BAD+WOLF" result = self.lc_block.validate()
log = logging.getLogger(__name__)
submission_dict = {'test': 'the_answer'} input_dict = {'1_2_1': json.dumps(submission_dict)} correct_map = problem.grade_answers(input_dict)
if name not in ['max', 'min']: ds = Series(date_range('1/1/2001', periods=10)) self.assertRaises(TypeError, f, ds)
assert_almost_equal(y_std_1d, y_std_2d) assert_almost_equal(y_cov_1d, y_cov_2d)
u'{user}@example.com'.format( user=(u'e' * (EMAIL_MAX_LENGTH - 11)) )
return self._get_element_text(".response-display-count")
super(Person, self).delete() self.data.append("After deletion")
self.assertTrue(self.cohort_management_page.is_category_selected())
resp = self.client.get(self.url) return json.loads(resp.content)
with self.assertRaises(TypeError): poly.__setitem__(0, LineString((1, 1), (2, 2)))
self.assertTrue(other.features.supports_transactions, msg) self.assertTrue(connections_support_transactions(), msg)
raise NotImplementedError()
api_call = lambda: generate_certificates_for_students( self.create_task_request(self.instructor), self.course.id ) self._test_resubmission(api_call)
self._create_course_unit(youtube_stub_config={'youtube_api_blocked': True}) self.assertFalse(self.video.is_button_shown('play'))
bandheader = pack(structure, (pixeltype, band.nodata_value or 0))
self.add_course_to_user_cart(self.course_key) self.assertEquals(self.cart.orderitem_set.count(), 1)
try: if timezone.is_naive(value): default_timezone = timezone.get_default_timezone() value = timezone.make_aware(value, default_timezone) except Exception: return ''
class FieldClassAttributeModel(models.Model): field_class = models.CharField
self.assertRaises(Exception, grouped.aggregate, lambda x: x * 2)
result = df.take(order, axis=1) expected = df.ix[:, ['foo', 'B', 'D']] assert_frame_equal(result, expected)
super(PythonLinter, self).__init__() self._skip_python_dirs = SKIP_DIRS + ('tests', 'test/acceptance')
if isinstance(other, NDFrame): for name in self._metadata: object.__setattr__(self, name, getattr(other, name, None)) return self
'msg': '', 'value': '3', 'params': params, 'display_file': display_file, 'display_class': display_class, 'problem_state': problem_state,
if existing['code'] == 200:
from __future__ import absolute_import import logging import collections import salt.exceptions
assert_equal(grid_search_no_score.best_params_, grid_search.best_params_) assert_equal(grid_search.score(X, y), grid_search_no_score.score(X, y))
from __future__ import absolute_import
if self.runtime.user_is_staff: msg = u"Staff debug info: {tb}".format(tb=cgi.escape(traceback.format_exc()))
pass
days_good_for = settings.VERIFY_STUDENT["DAYS_GOOD_FOR"] return datetime.now(pytz.UTC) - timedelta(days=days_good_for)
from __future__ import absolute_import
primary_key_column_name, column_name, table_name, referenced_table_name, column_name, referenced_column_name, column_name, referenced_column_name, )
transform.fit(X) assert_not_equal(transform.sample_interval_, None)
can_enroll = bool(has_access(request.user, 'enroll', course)) invitation_only = course.invitation_only is_course_full = CourseEnrollment.objects.is_course_full(course)
response = self.client.get('/check_session/') self.assertEqual(response.status_code, 200) self.assertEqual(response.content, b'NO')
course = modulestore().get_course(self.course.id) self.assertNotIn("notes", course.advanced_modules)
for fpath in glob.glob(os.path.join(path, 'distribute-*.tar.gz*')): os.unlink(fpath)
try: from traitlets.config import Config except ImportError: from IPython import Config from IPython import InteractiveShell from IPython.core.profiledir import ProfileDir from IPython.utils import io from IPython.utils.py3compat import PY3
m2m_data = {}
GENERAL_ASSET_TYPE = 'asset'
bulk_record = self._get_bulk_ops_record(location.course_key)
W = rng.uniform(-self.irange, self.irange, (input_dim, self.dim))
pan = web.get_data_yahoo('XOM', '2013-01-01', '2013-12-31', interval='d') self.assertEqual(len(pan), 252)
question = etree.SubElement(root, "p") question.text = question_text
self.dismiss_ui_and_verify(rerun)
self.assertEquals(source_course.wiki_slug, source_wiki_slug)
if options['command']: exec(options['command']) return
'microsite_configuration',
return original_arg
from salt.cloud.clouds import saltify
'python_bin': None, 'user': 'sandbox',
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
call_command('manage_group', TEST_GROUP, '--permissions', 'auth:Group:change_group') self.check_groups([TEST_GROUP]) self.check_permissions(TEST_GROUP, ['change_group'])
using_firefox = (os.environ.get('SELENIUM_BROWSER', 'firefox') == 'firefox') validate_firefox = getattr(options, 'validate_firefox_version', using_firefox)
return True
success, task_message = get_task_completion_info(task) status = _("Complete") if success else _("Incomplete") task_feature_dict['status'] = status task_feature_dict['task_message'] = task_message
self.course_key = course_key
object_id = models.PositiveIntegerField() content_object = GenericForeignKey()
added = self.frame + self.mixed_int _check_mixed_float(added, dtype='float64')
from sklearn.neighbors import kneighbors_graph connectivity = kneighbors_graph(X, n_neighbors=10, include_self=False)
self.refit()
if self.options.verbose: print('checking %s' % filename) fchecker = self.checker_class( filename, lines=lines, options=self.options) return fchecker.check_all(expected=expected, line_offset=line_offset)
try: import M2Crypto HAS_M2 = True except ImportError: HAS_M2 = False
pass
test_invalid_token("AAAAAAAAAAAAAAAAAAAAACpyUxTGIrUjnpuUsNi7mAY=", "username")
INSTALLED_APPS += ('django_extensions',)
self.assert_grade( problem, submission, correctness, msg="{0} should be {1}".format(name, correctness) )
alert = get_modal_alert(self.student_admin_section.browser) alert.dismiss()
atomics = {} for db_name in cls._databases_names(): atomics[db_name] = transaction.atomic(using=db_name) atomics[db_name].__enter__() return atomics
from __future__ import unicode_literals
'search_index_interval': int,
json_result = [] for key in keys: info = block_structure.get_transformer_block_field( key, ContentLibraryTransformer, 'block_analytics_summary' ) json_result.append(info) return json_result
for random_matrix in all_random_matrix: yield check_input_size_random_matrix, random_matrix yield check_size_generated, random_matrix yield check_zero_mean_and_unit_norm, random_matrix
saltenv = env
if os.path.isfile(path_item): with open(path_item, "rb") as file_handle: hasher.update(file_handle.read())
server = Server( name=vm_['name'], ram=vm_size['ram'], cores=vm_size['cores'], create_volumes=[volume] )
from __future__ import absolute_import import integration
adds[k] = Tags[k]
X, y = iris.data, iris.target y_bin = y.copy() y_bin[y_bin == 2] = 0
self.attrs.info = self.info
if not len(self) == len(other): raise ValueError("cannot add indices of unequal length")
self._assert_course_verification_status(VERIFY_STATUS_APPROVED)
assert_equal(ransac_estimator.inlier_mask_.shape[0], n_samples)
if address_predefined: os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS'] = old_address else: del os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS']
return self.country_access_rules(request.user, ip_address, request.path)
packer = Packer(**kwargs) stream.write(packer.pack(o))
import salt.utils import salt.utils.templates import salt.utils.validate.net import salt.utils.odict
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.approve()
self._databases = databases self._connections = local()
self.assertRaises(ValueError, self.read_csv, StringIO(data), header=[0, 1, 2, 3], index_col=[0, 1], as_recarray=True, tupleize_cols=False)
qs = qs.filter(a__f1='foo') self.assertEqual(str(qs.query).count('INNER JOIN'), 1)
this_sample = this_layer.sample(state_below=state_below, state_above=state_above, layer_above=layer_above, theano_rng=theano_rng)
raise TypeError("SparseArray does not support item assignment via " "slices")
if len(inflight_futures) == 0: continue
self.check_event_response_by_http_status( 'edit_resource', self.generate_edit_resource(self.non_existing_resource_id), 400 )
return int(self.position.split(':')[1])
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
try: return StudentModule.objects.get( student=user, course_id=course_key, module_state_key=block_key, state__contains='"selected": [[' ) except StudentModule.DoesNotExist: return None
self.course = CourseFactory.create(emit_signals=True)
pixeltype = POSTGIS_TO_GDAL[pixeltype] pack_type = GDAL_TO_STRUCT[pixeltype] pack_size = 2 * STRUCT_SIZE[pack_type]
idx = PeriodIndex(['2016-05-16', 'NaT', NaT, np.NaN], freq='D')
elidable = False
XBLOCK_REMOVED_HTML_ELEMENTS = [ '<div class="wrap-instructor-info"', ]
log = logging.getLogger(__name__)
pass
from __future__ import absolute_import import sys
if isinstance(input_space, CompositeSpace): return any(find_sequence_space(component) for component in input_space.components) if isinstance(input_space, SequenceDataSpace): return True return False
return freqstr
for item in stat: stat[item] = 0 r_time = s_time
self.enroll_staff(self.staff_user) self.attempt_upload_file_and_verify_result(test_case, 'import_resources', self.initial_configuration)
supports_combined_alters = False
url = force_text(self.success_url)
destroy_geom = void_output(lgdal.OGR_G_DestroyGeometry, [c_void_p], errcheck=False)
provider1 = self.configure_dummy_provider( enabled=True, icon_class='', icon_image=SimpleUploadedFile('icon.svg', '<svg><rect width="50" height="100"/></svg>'), )
try: return len(value) == int(arg) except (ValueError, TypeError): return ''
return self.prior.sample_from_p_z(num_samples, **kwargs)
self.assertEquals(len(audit_log_calls), 0)
cls.objects.create(checkpoint=checkpoint, user_id=user_id, course_id=course_id)
for i, idx in enumerate(indexes): rows[names[i]] = idx
num_tasks = 4 file_name = '__threadpool_reader__.csv' num_rows = 100000
self._state = ModelState()
sign_active = np.empty(max_features, dtype=np.int8) drop = False
from __future__ import absolute_import, print_function import os import pwd import time import signal import optparse import subprocess import random import tempfile import shutil import sys
for i, geom in enumerate(coll): if isinstance(geom, Polygon): coll[i] = self._fix_polygon(geom)
if suffix in ('new',): return
pred = mb_k_means.predict(X) assert_array_equal(mb_k_means.predict(X), mb_k_means.labels_)
response = self.client.get('/lastmod-sitemaps/mixed-descending.xml') self.assertFalse(response.has_header('Last-Modified'))
UserProfileFactory(user=self.user)
if not self.is_user_authorized(request, content, loc): return HttpResponseForbidden('Unauthorized')
self.track_selection_page.visit()
course = get_dummy_course('2012-12-02T12:00') self.assertEqual('', course.end_datetime_text("DATE_TIME"))
for i, (X_train_text, y_train) in enumerate(minibatch_iterators):
verbose = min(verbose, 3)
if cur_retry < 5: update_ccxcon.apply_async( kwargs={'course_id': course_id, 'cur_retry': cur_retry + 1},
if enrollment.is_active and enrollment.created > time_delta
to_xml = string_output(lgdal.OSRExportToXML, [c_void_p, POINTER(c_char_p), c_char_p], offset=-2, decoding='ascii')
ChoiceFormSet = formset_factory(Choice, extra=0, min_num=3)
factors = list(r['factor'](obj)) level = list(r['levels'](obj)) result = [level[index-1] for index in factors] return result
self.instructor = AdminFactory.create() self.client.login(username=self.instructor.username, password="test")
import logging import struct
biggie = DataFrame(np.zeros((200, 4)), columns=lrange(4), index=lrange(200)) repr(biggie)
newFrame = self.frame.reindex(self.frame.index, copy=False) self.assertIs(newFrame.index, self.frame.index)
css = '#tab{tab_index} button[data-category={category_type}] span'.format( tab_index=tab_index, category_type=category_type ) return self.q(css=css).html
exc_info_on_loglevel=logging.DEBUG
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
assert_equal(5, StratifiedKFold(5).get_n_splits(X, y))
import matplotlib.pyplot as plt import numpy as np from time import time
Y = np.dot(U, V)
@python_2_unicode_compatible class Line(models.Model): name = models.CharField(max_length=100)
terminal_regions = tree.apply(X)
self.login_page.visit().login(email=email, password=password)
result = f.clean('12-21-2010') self.assertEqual(result, date(2010, 12, 21))
if output == '': return {'jobs': jobs}
self.output_transaction = migration.atomic
ensemble = BaggingClassifier(base_estimator=Perceptron(), n_estimators=3)
clf = svm.LinearSVC(penalty='l1', loss='squared_hinge', dual=False, random_state=0).fit(X, Y) assert_array_equal(clf.predict(T), true_result)
from salt.states import virt import salt.utils
req = self._get_POST_no_csrf_cookie_request() req2 = CsrfViewMiddleware().process_view(req, post_form_view, (), {}) self.assertEqual(403, req2.status_code)
try: info_module.get_html() except ValueError: self.fail("CourseInfoModule could not parse an invalid date!")
CityAdmin.view_on_site = True
remote_files = set(srv.listdir(path='.'))
ishfts = 1 self.mode = mode self.iparam[0] = ishfts self.iparam[2] = maxiter self.iparam[3] = 1 self.iparam[6] = mode
mock_count.return_value = None with self.assertRaises(BuildFailure): pavelib.quality.run_jshint("")
block_structure = block_structure_cls(root_block_usage_key=0)
import salt.utils from salt.ext.six.moves import range
username = serializers.CharField() email = serializers.CharField()
AutoAuthPage(self.browser).visit() url = BASE_URL + "/course_modes/choose/" + self.course_id self.browser.get(url) self._assert_dashboard_message()
from __future__ import unicode_literals
fig = plt.figure(fignum, figsize=(4, 3)) plt.clf() ax = Axes3D(fig, rect=[0, 0, .95, 1], elev=48, azim=134)
raise AbstractMethodError(self)
pass
__virtualname__ = 'buildout'
import contextlib import textwrap import json try: import dns.query import dns.tsigkeyring HAS_DNS = True except ImportError: HAS_DNS = False
_refresh_db = True
element = etree.fromstring(xml_str) renderer = lookup_tag('math')(test_capa_system(), element) self.assertEqual(renderer.mathstr, mathjax_out)
import salt.utils.cloud
from __future__ import unicode_literals
est = DummyRegressor(strategy='mean') est.fit(X, y)
return []
postfix.__salt__ = {}
if load.get('fun', '') != 'saltutil.find_job': return good
assert_array_equal(np.intersect1d(train, test), [])
users_state = self._get_users_state()
return self(kind='line', **kwds)
with self.assertNumQueries(2): objs = list(qs.all()) self.assertTrue(objs[1].italianrestaurant.serves_gnocchi)
self.assert_grade(problem, "Second", "correct") self.assert_grade(problem, "second", "correct")
user = MockUsers() user.name = name user.password = password user.email = email user.enabled = enabled self.tenant_id = tenant_id return user
self.assertEqual(Person.custom_queryset_custom_manager.init_arg, 'hello')
import salt.utils.jid import salt.returners import salt.ext.six as six
lbound = N.array([kshp[0]-1,kshp[1]-1]) if mode=='valid' else N.zeros(2) ubound = lbound + (inshp[1:]-kshp+1) if mode=='valid' else fulloutshp
if settings.FEATURES.get('AUTOMATIC_AUTH_FOR_TESTING'): urlpatterns += ( url(r'^auto_auth$', 'student.views.auto_auth'), )
from __future__ import absolute_import from uuid import uuid4 as _uuid
modal.release_date = '3/12/1972' modal.release_time = '04:01' modal.due_date = '7/21/2014' modal.due_time = '23:39' modal.policy = 'Lab'
self.assertTrue(self._is_valid_key(key), msg="Failed for unicode character {0}".format(unicode_char))
import salt.utils from salt.exceptions import CommandExecutionError
if Database.version_info < (2, 5, 0): raise ImproperlyConfigured('Only versions of pysqlite 2.5+ are ' 'compatible with SpatiaLite and GeoDjango.')
assert_raises(ValueError, _inverse_binarize_thresholding, y=csr_matrix([[1, 2], [2, 1]]), output_type="foo", classes=[1, 2], threshold=0)
self.recursive_build(source_courselike, courselike, courselike_key, dest_id)
assert len(self.hidden_layers) > 0
{0: 'animal', 1: 'human', 2: 'airplane', 3: 'truck', 4: 'car', 5: 'blank'},
self.assertEqual(302, response.status_code) self.assertEqual('/register', response.get('Location'))
for observer in self.observers: observer.update(event, self)
pipe.set_params(svc__C=0.1) assert_equal(clf.C, 0.1) repr(pipe)
self.assert_no_xss(response, xss_content)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
self._assert_num_requests(2)
from __future__ import absolute_import import time import json import pprint import logging import hmac import uuid import sys import base64 from hashlib import sha1
self.assertContains(response, threepwood.username, count=2) self.assertNotContains(response, marley.username)
value = cache.get('small_value') self.assertTrue(value is None or value == large_value)
from __future__ import absolute_import import os import shutil import tempfile
if entry_needs_updating: instructor_task.task_state = result_state if task_output is not None: instructor_task.task_output = task_output
return u",".join([u'"{}"'.format(val) for val in values])
if user: self.q(css='input[id^=sd_fu_]').fill(user) self.q(css='section.staff-modal a.staff-debug-sdelete').click()
course_honor_mode = CourseMode.mode_for_course(self.course.id, 'honor')
source_rel_name = relpath(source_file_name, setup.confdir) source_rel_dir = os.path.dirname(source_rel_name) while source_rel_dir.startswith(os.path.sep): source_rel_dir = source_rel_dir[1:]
return service
np.seterr(all='ignore')
self.assertEqual( certs_api.get_certificates_for_user(self.student_no_cert.username), [] )
from salt.utils.odict import OrderedDict
VIRTUAL_UNIVERSITIES = []
if self.is_active != is_active and is_active is not None: self.is_active = is_active activation_changed = True
keystone.auth_key: 303802934809284k2j34lkj2l3kj43k
content = map(lambda l: l[:-1].split(', '), content)
self.assertContains(response, '<th class="field-__str__">UnchangeableObject object</th>', html=True)
component = self.store.publish(xblock.location, self.user_id) self.assertFalse(self.store.has_changes(component))
ret['comment'] = 'Event module not available. Beacon enable job failed.'
INSTALLED_APPS = []
valid_input['course_modules'] = None
current_state = __salt__['tuned.active']()
placeholder_rows, param_rows = zip(*sql_and_param_pair_rows)
pd.set_option('display.multi_sparse', False)
def f(): df = orig.copy() df.at["j", "cats"] = "c"
svc = SVC(kernel="linear") rfecv = RFECV(estimator=svc, step=1, cv=StratifiedKFold(2), scoring='accuracy') rfecv.fit(X, y)
self.assertEquals(3, self.response.content.count('grade_C'))
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager from django.db import models
if not ((requester_perms & STUDIO_EDIT_ROLES) or (user.id == request.user.id)): return permissions_error_response
import dateutil yearfirst = dateutil.__version__ >= LooseVersion('2.5.0')
result = f.clean('13:30:05') self.assertEqual(result, time(13, 30, 5))
self.scope_ids = self.scope_ids._replace(user_id=user_id)
cat = Categorical([5, 2, np.nan, 2, np.nan], ordered=True) exp_categories = Index([2, 5])
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
def _failing_new(*args, **kwargs): raise TypeError('Can\'t create another NullSentinel instance')
published_branch = course.id.for_branch( ModuleStoreEnum.BranchName.published )
usage_key = request_params['usage_key'] course_key = request_params['course_key']
def __init__(self, cond_func): self.cond_func = cond_func def __get__(self, instance, cls=None): return self.cond_func()
if socks.get(timer_in) == zmq.POLLIN: sec_event = serial.loads(timer_in.recv())
T = sp.lil_matrix((3, 1)) T[0, 0] = 2 T[1, 0] = 3 T[2, 0] = 4
if self.termination_criterion is None: return True else: return self.termination_criterion.continue_learning(self.model)
from __future__ import unicode_literals
continue
leaf_count = node_counts[node_counts != 0] assert_greater(np.min(leaf_count), 4, "Failed with {0}".format(name))
self.assertEqual(certificate_grades.count('0.0'), 8) self.assertEqual(certificate_grades.count(default_grade), 2)
self.advanced_settings.wait_for_modal_load()
self._configure_message_timeout(10000)
self.Ut = numpy.zeros([self.n_eigen, self.n_dim])
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
response = self._get_page("verify_student_verify_now", course.id) self.assertNotContains(response, "Verification is no longer available")
(['verified', 'audit'], 'course_modes_choose', CourseMode.DEFAULT_MODE_SLUG),
self.thread_page_1.click_and_open_thread(thread_id=self.thread_ids[1]) self.assertTrue(self.thread_page_2.is_browser_on_page())
self._encoding = val if hasattr(self, '_get'): del self._get if hasattr(self, '_post'): del self._post
df = DataFrame(np.random.randn(5, 3), index=['foo', 'foo', 'bar', 'baz', 'bar'])
_typ = 'multiindex' _names = FrozenList() _levels = FrozenList() _labels = FrozenList() _comparables = ['names'] rename = Index.set_names
yes, no, maybe = bits[0], bits[1], bits[1]
from __future__ import absolute_import
self.assertTrue(isinstance(value, (int, compat.long))) self.assertEqual(value, equal)
response = self.send_get( client=self.client, url=reverse('bookmarks'), query_parameters='course_id=invalid' ) bookmarks_data = response.data['results']
if ref is None: del self._cacher else: try: ref._maybe_cache_changed(cacher[0], self) except: pass
return 'xenstore' in __salt__['cmd.run'](__grains__['ps'])
if installer.startswith(('salt:', 'http:', 'https:', 'ftp:')):
from __future__ import absolute_import import os import random import string
log = logging.getLogger(__name__)
random_state = np.random.RandomState(0) n_samples, n_features = X.shape X = np.c_[X, random_state.randn(n_samples, 200 * n_features)]
VerificationDeadline.set_deadline(self.course.id, self.VERIFICATION_DEADLINE)
try: dive.reviews.add(review1) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
from os import environ
self.assertEqual(RestrictedModel.plain_manager.count(), 1)
self.white_label_course = CourseFactory.create() self.white_label_course_mode = CourseModeFactory.create( course_id=self.white_label_course.id, mode_slug=CourseMode.HONOR, min_price=10, suggested_prices='10', )
html_last_updated_fmt = '%b %d, %Y'
exc_info_on_loglevel=logging.DEBUG
state2 = npr.RandomState(10) tm.assert_equal( com._random_state(state2).uniform(), npr.RandomState(10).uniform())
return self.forms[self.initial_form_count():]
import salt.cloud import salt.utils.cloud from salt.exceptions import SaltCloudException, SaltCloudSystemExit import salt.ext.six as six import salt.syspaths as syspaths log = logging.getLogger(__name__)
course_overviews = course_overviews.filter(org__iexact=org)
verbose_name_plural = "Microsite histories"
if refresh: refresh_db()
self.assertIsInstance(response, HttpResponseRedirect)
return self.q(css='span.filter-column').visible
import tornado.ioloop
exp_doc_topic_d = exp_doc_topic[idx_d, :].copy() exp_topic_word_d = exp_topic_word_distr[:, ids]
where = "index <= '%s'" % end_dt results = [s for s in store.select( 'df', where=where, chunksize=chunksize)]
import fnmatch import logging import os import re import time import stat import tempfile
i = index_col if not com.is_list_like(index_col) else max(index_col) return none_fill(row[i]), row[:i] + [''] + row[i + 1:]
assert_true((ovr_clf.predict(iris.data) == cs_clf.predict(iris.data)).mean() > .9)
cache_timeout = 600
STATIC_ROOT = TEST_ROOT / "staticfiles"
super(DashboardSearchTest, self).tearDown() os.remove(self.TEST_INDEX_FILENAME)
if IdentityPoolName is not None and IdentityPoolName != request_params.get('IdentityPoolName'): request_params['IdentityPoolName'] = IdentityPoolName
if not isinstance(data, (list, tuple)): data = list(data)
indexer = _update_indexer(_convert_to_indexer( self._get_level_indexer(k, level=i, indexer=indexer)), indexer=indexer)
return self._intercept or self._entity_effects or self._time_effects
num = 0 def __init__(self, name, regex, next=None): self.id = Tok.num Tok.num += 1 self.name = name self.regex = regex self.next = next
with patch_edxnotes_api_settings("http://example.com/"): self.assertEqual("http://example.com/", get_endpoint_function())
if isinstance(dtype, tuple): return tuple(replace_none_dtypes(d, fallback_dtype) for d in dtype) else: return fallback_dtype if dtype is None else dtype
self._check_percentile(percentiles)
DATE_FORMAT = 'j F Y' TIME_FORMAT = 'H:i' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'j M Y'
with self.assertNumQueries(20): api.set_credit_requirement_status( "bob", self.course_key, requirements[1]["namespace"], requirements[1]["name"] )
return fnd
storage = get_profile_image_storage() for name in profile_image_names.values(): storage.delete(name)
if cache_file and cache_file.startswith('salt:'):
if isinstance(opts['master'], list): conn = False local_masters = copy.copy(opts['master']) last_exc = None
attempt = SoftwareSecurePhotoVerification(user=user, photo_id_key="dummy_photo_id_key") attempt.status = 'approved' attempt.save()
return self.__dict__
dummy_course = CourseFactory.create() GeneratedCertificateFactory.create( user=self.user, course_id=dummy_course.id, status=CertificateStatuses.generating, mode='honor' )
from __future__ import absolute_import import copy
syslog.syslog(facility | level, '{0}'.format(json.dumps(ret)))
safe_update(ups, p_up)
raise NotImplementedError()
import yaml import salt.ext.six as six
from __future__ import unicode_literals
self._remake_table(model, override_indexes=new_index_together)
if not cwd: cwd = os.path.expanduser('~{0}'.format('' if not runas else runas))
def get_fill_value(obj): if isinstance(obj, pd.tseries.base.DatetimeIndexOpsMixin): return obj.asobject.values[0] else: return obj.values[0]
W[0, 1] = .5 W[0, 2] = 1. W[0, 3] = 2.
ts1 = Timestamp('2015-01-01', tz=None) ts2 = Timestamp('2015-01-01', tz='UTC') ts3 = Timestamp('2015-01-01', tz='EST')
args = [_sdecode(name)] args.extend(_normalize_args(command))
from __future__ import absolute_import
from __future__ import unicode_literals
warnings.filterwarnings(
assert len(state) == 2 if isinstance(coeffs, str): coeffs = float(coeffs) assert isinstance(coeffs, float) _, state = state state = [state] coeffs = [coeffs]
if isinstance(arr, ABCSparseArray): from pandas.sparse.series import SparseSeries cls = SparseSeries
if not config.is_certification_enabled: LOGGER.warning( 'Task award_program_certificates cannot be executed when program certification is disabled in API config', ) raise self.retry(countdown=countdown, max_retries=config.max_retries)
if (self.is_model_valid is not None and not self.is_model_valid(base_estimator, X_subset, y_subset)): continue
return self._ip == 0
DATE_FORMAT = 'd F Y' TIME_FORMAT = 'H:i' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'd.m.Y'
step = str(Decimal('1') / 10 ** self.decimal_places).lower()
from course_wiki.plugins.markdownedx.wiki_plugin import ExtendMarkdownPlugin
pass
def __init__(self, alias, col, value): self.alias, self.col, self.value = alias, col, value
p = Post(title="Work on Django 1.1 begins", posted=datetime.date(2008, 9, 3)) p.full_clean()
f, p = f_oneway(X.astype(np.float), y) assert_array_almost_equal(f, fint, decimal=4) assert_array_almost_equal(p, pint, decimal=4)
input_dict = {'1_2_1': '42'} correct_map = problem.grade_answers(input_dict)
class Award(models.Model): name = models.CharField(max_length=30) character = models.ForeignKey(Character, models.SET_NULL, blank=False, null=True)
HOURS_PER_DAY = 24. MIN_PER_HOUR = 60. SEC_PER_MIN = 60.
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, mock_open, call, NO_MOCK, NO_MOCK_REASON )
try: frequencies.to_offset('2h20m') except ValueError: pass else: assert (False)
all_thumbnails = content_store.get_all_content_thumbnails_for_course(course.id) self.assertGreater(len(all_thumbnails), 0)
tm._skip_if_no_scipy()
logging.getLogger().setLevel(logging.ERROR)
self.q(css='.remove-action').filter(lambda el: language_code == el.get_attribute('data-lang')).click()
dr = bdate_range(datetime(2005, 1, 1, tzinfo=pytz.utc), '1/1/2009', tz=pytz.utc)
import logging import salt.utils import salt.utils.http
course_outline_page.q(css='.outline-item.outline-subsection.is-collapsed .ui-toggle-expansion').first.click()
for octet in (second_octet, third_octet, fourth_octet): if (octet < 0) or (octet > 255): return False return True
ps = precision_score(y_true, y_pred, pos_label=1, average='micro') assert_array_almost_equal(ps, 0.53, 2)
with connection.schema_editor() as editor: editor.alter_field(LocalAuthorWithM2M, new_field, new_field)
if min_length > 1: params[field] = "a" assert_extra_field_error()
__virtualname__ = 'sys'
if state == {}: continue
result = sql.read_sql_query('SELECT * FROM test_nan', self.conn) tm.assert_frame_equal(result, df)
VERSION = 0
cp = s.copy() cp.ix[4:10] = 0 self.assertTrue((cp.ix[4:10] == 0).all())
if self.elidable: return [operation] elif operation.elidable: return [self] return False
sources, duration = self.video.sources[0], self.video.duration self.assert_bumper_payload_contains_ids(load_video_event, sources, duration)
from salt.exceptions import SaltSystemExit
course = self.runtime.modulestore.get_course(self.course_id) return course
if matched == ';': return ';;' elif matched == '/': return ';_' else: return matched
original = pd.concat([original[col].astype('category') for col in original], axis=1)
partition.scheme.set_group_for_user(user, partition, group)
import salt.utils from salt.exceptions import CommandExecutionError
signal.signal(signal.SIGINT, self._handle_signals)
self.assertEqual(should_exist, validator_data["storage"].exists(validator_data["filename"]))
from __future__ import absolute_import
y1 = np.array([[0, 1, 1], [1, 0, 1]]) y2 = np.array([[0, 0, 1], [1, 0, 1]])
clf = TreeClassifier(class_weight=1, random_state=0) assert_raises(ValueError, clf.fit, X, _y)
for v in values: if not np.prod(v.shape): return
if self.backward: self.setup_response_backward() return
self.chap_1_handle = 0 self.chap_1_seq_1_handle = 1
check_entrance_exam_problems_for_rescoring(usage_key)
resp = self.client.get(self.urls['course_modes_choose'], follow=True) self.assertRedirects(resp, self.urls['verify_student_start_flow'])
login = self.client.post(login_url, self.super_login) self.assertRedirects(login, self.index_url) self.assertFalse(login.context)
indices = []
self.assertEquals(3, self.response.content.count('grade_C'))
keystone.auth_key: 203802934809284k2j34lkj2l3kj43k
import os import logging
config = DonationConfiguration.current() config.enabled = True config.save()
return ret
self.selenium.find_element_by_id('calendarlink0').click()
for prop in 'cpus', 'disk', 'ip_address', 'nameserver', 'password', 'swap', 'poolid', 'storage':
self.wait_for_closed_captions() closed_captions_selector = self.get_element_selector(CSS_CLASS_NAMES['closed_captions']) subs = self.q(css=closed_captions_selector).html return ' '.join(subs)
return re.compile(r"<([^>]+)>", flags=re.UNICODE).sub(" ", s)
if not salt.utils.is_darwin(): return False, 'Not Darwin'
cached_pkg = cached_pkg.replace('/', '\\') cache_path, _ = os.path.split(cached_pkg)
from __future__ import unicode_literals
extra_data = [ unicode(course_id) if course_id else "", "donation_course" if course_id else "donation_general" ]
return X
result = df.fillna(df.max()) expected = df.fillna(df.max().to_dict()) assert_frame_equal(result, expected)
tiger = Animal.objects.create(common_name="tiger") cheetah = Animal.objects.create(common_name="cheetah") bear = Animal.objects.create(common_name="bear")
if hasattr(self.io, 'close'): self.io.close()
import salt.utils.locales
d = dict([(a, self._get_axis(a)) for a in (axes or self._AXIS_ORDERS)]) d.update(kwargs) return d
response.collapse_body() return request, response
self.setup_logfile_logger() verify_log(self.config)
pyximport = None
s = Series(tslib.iNaT, index=lrange(5)) self.assertFalse(isnull(s).all())
self.engine = engine self._engine = None
if county_feat: qs = CountyFeat.objects.filter(name=name) self.assertEqual(n, qs.count())
self._execute_query() if not connections[self.using].features.can_use_chunked_reads: result = list(self.cursor) else: result = self.cursor return iter(result)
if not cls._meta.abstract:
if isinstance(grouper, (Series, Index)) and name is None: self.name = grouper.name
self.assertEqual(expected_title, unit.release_title) self.assertEqual(expected_date, unit.release_date)
if not os.path.isfile(config): try: with salt.utils.fopen(config, 'w+') as _fh:
def cmp(a, b): tm.assert_almost_equal( np.sort(np.unique(a)), np.sort(np.unique(b)))
conn.get_instance_profile(name) return True
def is_ok(s): return (issubclass(s.dtype.type, (np.integer, np.floating)) and s.dtype != 'uint8')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
y_type = y_type.pop()
property_spec = vmodl.query.PropertyCollector.PropertySpec( type=obj_type, all=True if not property_list else False, pathSet=property_list )
dog_stats_api.increment( DEPRECATION_VSCOMPAT_EVENT, tags=["location:customtag_descriptor_render_template"] )
self.working_dir = rp_
result = mixed[['A', 'B']].min(1) expected = Series([timedelta(days=-1)] * 3) tm.assert_series_equal(result, expected)
image = Image.objects.create() as_file = File.objects.get(pk=image.pk) FooFileProxy.objects.create(my_file=as_file)
from salt.runners import winrepo from salttesting import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
value = value.rstrip('-')
rendered = "0.post%d" % pieces["distance"] if pieces["dirty"]: rendered += ".dev0" rendered += "+g%s" % pieces["short"]
from __future__ import absolute_import
value_repr = 'b' + value_repr
if not header: if __salt__['file.search']( name, salt.utils.build_whitespace_split_regex(chunk), multiline=True): continue
with tm.assert_produces_warning(InvalidColumnName): original.to_stata(path)
show_in_read_only_mode = False
import salt.utils from salt.ext.six import string_types from salt.exceptions import CommandExecutionError
subtask_status_info[current_task_id] = new_subtask_status.to_dict()
self.put = send
salt.utils.gitfs.GitPillar(new_opts)
launch_mcd_on_dataset(500, 1, 100, 0.001, 0.001, 350)
ret['changes']['diff'] = changes_needed comments.append('Container \'{0}\' was replaced'.format(name))
zmq_version()
array_val = request.POST.getlist(key) answers[key] = request.POST[key] if len(array_val) == 0 else ','.join(array_val)
if result != 1: return None return last_arg_byref(cargs)
log.exception( "Indexing error encountered, courseware index may be out of date %s - %r", structure_key, err ) error_list.append(_('General indexing error occurred'))
def from_json(self, value): if value in ("", "true"): return RANDOMIZATION.ALWAYS elif value == "false": return RANDOMIZATION.PER_STUDENT return value to_json = from_json
names = ['Bexar', 'Galveston', 'Harris', 'Honolulu', 'Pueblo']
self.assertEqual('', self.run_function('service.status', ['spongebob']))
big_honeycomb = models.Honeycomb.objects.create(location='Old tree') big_honeycomb.bee_set.create() rel = models.Bee._meta.get_field('honeycomb').remote_field
expected = pd.concat([expected[col].astype('category') for col in expected], axis=1)
normalizers[normalizers < min_divisor] = 1.
X = datasets.make_classification(n_samples, n_features, n_informative=n_features-2, random_state=rng)[0]
if os.path.isdir(tmp_dir): shutil.rmtree(tmp_dir) elif os.path.isfile(tmp_dir): os.remove(tmp_dir)
self.assertEqual(300, self.DEFAULT_TIMEOUT)
"spec", "spec_helpers",
comb = self.frame.combineAdd(self.empty) assert_frame_equal(comb, self.frame)
self.assertAlmostEqual(axis.get_ticklocs()[0], center)
if obj.get("parent") is None: data["parent"] = None
from salttesting import TestCase from salttesting.case import ShellTestCase from salttesting.mixins import CheckShellBinaryNameAndVersionMixIn from salttesting.parser import PNUM, print_header, SaltTestcaseParser from salttesting.helpers import requires_sshd_server from salttesting.helpers import ensure_in_syspath, RedirectStdStreams
return self.design_mat_to_topo_view(design_mat)
("restricted_course", "country")
abstract = True
obj1 = Storage() self.assertEqual(obj1.normal.name, "") with self.assertRaises(ValueError): obj1.normal.size
if len(self.credit_type) > 1: raise LoncapaProblemError('Only one type of partial credit is allowed for Multiple Choice problems.')
import salt.ext.six as six
self._smoothed_batch_duration = 0
response = self.client.get(self.url) expected_html = '<button class="is-disabled" disabled>Enable Student-Generated Certificates</button>' self.assertContains(response, expected_html)
return None
context = {'payment_support_email': microsite.get_value('payment_support_email', settings.PAYMENT_SUPPORT_EMAIL)} return render_to_response("commerce/checkout_cancel.html", context)
if 'enabled' not in repo_opts: repo_opts['enabled'] = int(str(repo_opts.pop('disabled', False)).lower() != 'true')
cache.set("key", "value") self.assertEqual(cache.get("key"), "value")
self.assertRaises(ValueError, s.dropna, axis=1)
self.assertEqual( self.process_response(secure=True)["strict-transport-security"], "max-age=3600")
self.assertFalse(hasattr(Article(), 'reporter'))
from __future__ import absolute_import import json import logging import re import sys
descriptor.bind_for_student = partial(xblock_class.bind_for_student, descriptor)
self.q(css=self.active_problem_selector('.annotation-return')).click()
i = np.argsort(dist2, axis=1) row_ind = np.arange(n_rows)[:, None] dist2 = dist2[row_ind, i] ind2 = ind2[row_ind, i]
return CallableTrue
from salt.pillar import nodegroups
return course_id in [ item.course_id for item in order.orderitem_set.all().select_subclasses("courseregcodeitem") if isinstance(item, cls) ]
'session_inactivity_timeout.middleware.SessionInactivityTimeout',
return 'f_geometry_column'
def __init__(self, location, content_type): self.location = location self.content_type = content_type
try: val = self[key] except KeyError: return default if val == []: return default return val
logentry = LogEntry.objects.get(content_type__model__iexact="article") action_time = logentry.action_time logentry.save() self.assertEqual(logentry.action_time, action_time)
assert x.ndim == 4 axes = self._input_space.axes assert len(axes) == 4
from salt.modules import daemontools from salt.exceptions import CommandExecutionError
settings = _normalize_server_settings(**settings)
urlpatterns += ( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name="404"), )
X = np.array([[1], [2], [3]]) Y = np.array([1, 2, 3]) clf = ARDRegression(compute_score=True) clf.fit(X, Y)
from_hex = BinConstructor('GEOSGeomFromHEX_buf') from_wkb = BinConstructor('GEOSGeomFromWKB_buf') from_wkt = GeomOutput('GEOSGeomFromWKT', [c_char_p])
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.UNPUBLISHED_CHANGES, is_locked=True), self.STAFF_ONLY_WARNING )
if is_protected_type(value): self._current[field.name] = value else: self._current[field.name] = field.value_to_string(obj)
masters = [] for hostage in hostages: external = hostage['external'] internal = hostage['internal'] if external: external = parse_hostname(external, master_port) if not external:
response = self.http_get_for_course(course_id=unicode(self.empty_course.id), HTTP_AUTHORIZATION=auth_header) self.assertEqual(response.status_code, 404)
vmconfig['changed'][prop] = vmconfig['state'][prop]
p.save() self.assertIsNone(p.bestchild)
resolver = get_resolver('urlpatterns_reverse.namespace_urls') sub_resolver = resolver.namespace_dict['test-ns1'][1] self.assertIn('<RegexURLPattern list>', repr(sub_resolver))
self.set_programs_api_configuration() self.dashboard_page.visit() self.assertFalse(self.dashboard_page.is_programs_tab_present()) self.assertFalse(self.dashboard_page.is_new_program_button_present())
_upload_file(en_translation, self.item_descriptor.location, en_translation_filename)
launch_mcd_on_dataset(1700, 5, 800, 0.1, 0.1, 870)
if ' ' in e: first = 1 else: first = -1
return self.sm_ols.rsquared_adj
from __future__ import unicode_literals
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
dist1 = SouthTexasCity.objects.distance(lagrange, field_name='point').order_by('id')
GeoIPRecord_delete(result) return record
temp_storage_dir = tempfile.mkdtemp() temp_storage = FileSystemStorage(temp_storage_dir) temp_upload_to_dir = os.path.join(temp_storage.location, 'tests')
always_cohort_inline_discussions = models.BooleanField(default=True)
if name not in list_tasks(location): return '{0} not found in {1}'.format(name, location)
Person.custom_queryset_custom_manager.manager_only() with self.assertRaises(AttributeError): Person.custom_queryset_custom_manager.all().manager_only()
return prlctl('exec', args, runas=runas)
result = p.select(lambda x: x in ('foo',), axis='items') self.assert_panel4d_equal(result, p.reindex(items=[]))
try: SETUP_DIRNAME = os.path.dirname(__file__) except NameError: SETUP_DIRNAME = os.path.dirname(sys.argv[0])
with super(SingleThreadUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create(discussion_topics={'dummy_discussion_id': {'id': 'dummy_discussion_id'}})
bin_queries = np.asarray([hasher.transform(X)[:, 0] for hasher in self.hash_functions_]) bin_queries = np.rollaxis(bin_queries, 1)
if not isinstance(max_samples, (numbers.Integral, np.integer)): max_samples = int(max_samples * X.shape[0])
self.index = {}
return False
except Exception as err: logger.debug('Error! Ending server side websocket connection. Reason = {0}'.format(str(err))) break
page.browser.execute_script("jQuery.fx.off = true;")
frame1 = DataFrame({'a': [10, 20], 'b': [30, 40], 'c': [50, 60]})
try: Driver(drv_name) except GDALException: return None
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
with self.assert_no_error_logged(): with self.assert_no_warning_logged(): yield
contentstore('trashcan').save(content)
from __future__ import absolute_import import errno import functools import logging import os import re import shutil import time import tempfile
def re_replacer(s): try: return rx.sub(value, s) except TypeError: return s
m.custom_method = custom_method m.list_display = ['id', 'name', 'parent', 'custom_method']
raise nose.SkipTest("doesn't work as in PY3")
self.q(css=self.auto_enroll_upload_button_selector).click()
if val == val and val != %(nan_val)s:
self.run_script( 'salt-call', '-c {0} --output-file={1} -g'.format( self.get_config_dir(), output_file ), catch_stderr=True, with_retcode=True ) stat1 = os.stat(output_file)
name = models.CharField(max_length=255) bool = models.BooleanField(default=True) number = models.IntegerField(default=0, db_column='number_val') objects = OrderedObjectManager()
while (svd_restarts < max_svd_restarts) and not has_converged:
return self.q(css='body.view-team').present and not self.q(css='.ui-loading').present
self.assertRaises(ValueError, lambda: result.to_pandas())
return comdat['stderr']
username = 'jsmith' email = 'jsmith@example.com' user = User.objects.create_user(username, email, 'test123') return (user, username, email)
assert_almost_equal(a.dot(b['1']), expected['1']) assert_almost_equal(a.dot(b2['1']), expected['1'])
return False
if created: return
DATE_FORMAT = 'j. F Y' TIME_FORMAT = 'H:i' YEAR_MONTH_FORMAT = 'F Y' MONTH_DAY_FORMAT = 'j. F' SHORT_DATE_FORMAT = 'j.n.Y'
Number.objects.filter(pk=self.n.pk).update(integer=F('integer').bitor(48))
return ( super(ModelOperation, self).reduce(operation, in_between, app_label=app_label) or not operation.references_model(self.new_name, app_label) )
test_func._overridden_settings = dict( test_func._overridden_settings, **self.options)
err_loc_emp_full[i, j] = np.sum(X.mean(0) ** 2) err_cov_emp_full[i, j] = EmpiricalCovariance().fit(X).error_norm( np.eye(n_features))
return self._shallow_copy(self.values.repeat(n))
return sys.byteorder == 'little'
self.reload_page() self.assertEqual(self.cohort_management_page.get_cohorted_topics_count(key), cohorted_topics)
df = DataFrame({'a': [1]}).dropna() self.assertIsNone(df.is_copy) df['a'] += 1
else:
if hasattr(obj, 'to_dense'): return obj.to_dense() return obj
return True
return redirect_with_get('register_user', request.GET)
linear_loss = y - safe_sparse_dot(X, w) if fit_intercept: linear_loss -= intercept abs_linear_loss = np.abs(linear_loss) outliers_mask = abs_linear_loss > epsilon * sigma
self.X_topo_space = self.view_converter.topo_space assert not contains_nan(self.X)
changes = __salt__['pkg.install'](name, refresh=False, fromrepo=fromrepo, skip_verify=skip_verify, pkgs=targeted_pkgs, **kwargs)
for pool_size in [1, 2, 5]: do_test(pool_size)
url(r'add_users_to_cohorts$', 'instructor.views.api.add_users_to_cohorts', name="add_users_to_cohorts"),
self.assertEqual(certificate_grades.count('0.0'), 5) self.assertEqual(certificate_grades.count(default_grade), 5)
for df in [df, df2]: for gb_target in [dict(by=labels), dict(level=0), dict(by='string')
data = payload.format(score=0.8) return self._send_lti2(data)
train, test = set(train), set(test)
if self._is_in_bulk_operation(course_key, False): self._clear_bulk_ops_record(course_key) self.db_connection.delete_course_index(course_key)
EDXMKTG_LOGGED_IN_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_LOGGED_IN_COOKIE_NAME', EDXMKTG_LOGGED_IN_COOKIE_NAME) EDXMKTG_USER_INFO_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_USER_INFO_COOKIE_NAME', EDXMKTG_USER_INFO_COOKIE_NAME)
for phase in self.run_data.keys(): if phase in ('fake_assets',): continue per_phase = self.run_data[phase] html.add_header(1, phase)
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
action = str(action)
pass
open(self.distribution.salt_version_hardcoded_path, 'w').write( INSTALL_VERSION_TEMPLATE.format( date=DATE, full_version_info=__saltstack_version__.full_info ) )
from tempfile import NamedTemporaryFile import logging import os
if not hasattr(value, 'iteritems'): self._uncomment_if_commented(key)
target = [-1] * len(JUNK_FOOD_DOCS) + [1] * len(NOTJUNK_FOOD_DOCS)
instance.file.delete() instance.delete()
output[asheetname] = DataFrame()
self.runtime.set('location', self.location.to_deprecated_string())
try: export_dir = mkdtemp() yield export_dir finally: rmtree(export_dir, ignore_errors=True)
manager._optin_private_method() with self.assertRaises(AttributeError): manager.optout_public_method()
self.name = name or self.name
if fields: raise NotImplementedError('DISTINCT ON fields is not supported by this database backend') else: return 'DISTINCT'
df = DataFrame(data=[1, 'a']) result = df.applymap(lambda x: x) self.assertEqual(result.dtypes[0], object)
self.assertEqual(len(Image.objects.all()), 0) self.assertEqual(len(File.objects.all()), 0)
response = self.client.get('/login_protected_method_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_method_view/')
from raet import raeting, nacling from raet.lane.stacking import LaneStack from raet.lane.yarding import RemoteYard import salt.config import salt.client import salt.utils import salt.syspaths as syspaths from salt.utils import kinds
from salt.utils.odict import OrderedDict from salt.modules import boto_secgroup
return self.find_css("#start_time").present
return self.file_errors
return super(ChooseModeView, self).dispatch(*args, **kwargs)
if refresh: refresh_db()
import logging logging.basicConfig(filename=TEST_ROOT / "log" / "lms_acceptance.log", level=logging.ERROR)
return None
df = DataFrame({'a': [1, 2]}, dtype='int64') df.to_sql('test_bigintwarning', self.conn, index=False)
from __future__ import absolute_import import re
else: try: func = self.admin_site.get_action(action) except KeyError: return None
if isinstance(args[0], (tuple, list)): self.maps = args[0] else: self.maps = args
get_storage = show_storage
if f.__call__.func_code.co_flags & STAR_ARGS: return f numargs = f.__call__.func_code.co_argcount if hasattr(f.__call__,"im_self"): numargs -= 1
with check_mongo_calls(1): self._run_command()
try: return MultiIndex.from_tuples(new_tuples, names=self.names) except: return Index(new_tuples)
return getattr(settings, format_type)
with warnings.catch_warnings(record=True) as recorded_warnings: raise_named_version_warning() self.assertEqual( 'Deprecation Message!', str(recorded_warnings[0].message) )
from __future__ import absolute_import import logging import os import subprocess
log.debug('SQL Query: {0}'.format(cmd)) cur.execute(cmd) return True
from mpl_toolkits.mplot3d import Axes3D Axes3D
self.q(css=self.COMPONENT_BUTTONS[button_name]).first.click() self.wait_for_ajax()
result = defaultdict(dict) for field in xblock.fields.itervalues(): if field.is_set_on(xblock): result[field.scope][field.name] = field.read_from(xblock) return result
from __future__ import unicode_literals
return connection.ops.get_distance(self, value, lookup_type)
if self.transform: g.transform(self.transform)
return super(ConcatPair, self).as_sql( compiler, connection, function='CONCAT_WS', template="%(function)s('', %(expressions)s)" )
'event_return_blacklist': list,
self.assertTrue(self.video.is_video_rendered('youtube'))
pr_url = os.environ.get('CI_PULL_REQUEST') if not pr_url: exit("not a pull request")
with tm.assert_produces_warning(FutureWarning): result = df.drop_duplicates('A', take_last=True) expected = df.ix[[1, 6, 7]] tm.assert_frame_equal(result, expected)
try: kwargs['initial'] = self.initial_extra[i - self.initial_form_count()] except IndexError: pass
exc = IndexError if _np_version_under1p12 else TypeError
self.assertContentBefore(response, 'Name', 'Colored name')
self.assertRaises(IndexError, self.ts.__getitem__, len(self.ts))
answer_ids = [] for response in self.responders.keys(): results = self.responder_answers[response] answer_ids.append(results.keys()) return answer_ids
return urllib.quote_plus(smart_str(val))
return datetime.now(UTC()) <= self.start
available_version = salt.utils.alias_function(latest_version, 'available_version')
instance.__allow_additional_items__ = True
return user_id in self.context["staff_user_ids"] or user_id in self.context["ta_user_ids"]
epsilon = 1e-9 * np.var(X, axis=0).max()
return dict([(pref.key, pref.value) for pref in user.preferences.all()])
self.assertEqual(self.browse_teams_page.header_name, self.topic['name']) self.assertEqual(self.browse_teams_page.header_description, self.topic['description'])
self.assertEqual(course_mode, enrollment['mode']) self.assertEqual(is_active, enrollment['is_active'])
name = 'elevation' _check_is_integral(name, label) _check_range(name, label, -1, 8) if label == -1: return None else: return label * 5 + 30
if not version: version_num = _get_latest_pkg_version(pkginfo) else: version_num = version
yaml_src_path = os.path.join(os.path.dirname(__file__), 'test_vae_cost_vae_criterion.yaml') train_object = yaml_parse.load_path(yaml_src_path) train_object.main_loop()
_maybe_remove(store, 'wp7')
def __repr__(self): return str(self)
try: return SearchEngine.get_search_engine(index=cls.INDEX_NAME) except ConnectionError as err: logging.error('Error connecting to elasticsearch: %s', err) raise ElasticSearchConnectionError
create_volume = volume_create
raise NotImplementedError()
self._find_within(".load-response-button").click() EmptyPromise( self.is_ajax_finished, "Loading more Responses" ).fulfill()
signal.signal(signal.SIGINT, prev_sigint_handler) signal.signal(signal.SIGTERM, prev_sigterm_handler)
df = sql.read_sql_table("types_test_data", self.conn) check(df.DateColWithTz)
return [self.index, self.columns]
s = ['x%d' % x for x in range(12)]
self.mock_tracker.reset_mock() try: views.server_track(request, str(sentinel.event_type), '{}')
if self.escQuote: ret = ret.replace(self.escQuote, self.endQuoteChar)
self.assertIn('good_cookie', parse_cookie('good_cookie=yes;bad:cookie=yes').keys())
if not isinstance(v, dict):
)
return responses.get(self.status_code, 'Unknown Status Code')
values = self._values if isinstance(values, np.ndarray): return _index.get_value_at(values, i) else: return values[i]
for name, scorer in SCORERS.items(): repr(scorer)
pkginfo = salt.utils.pkg.rpm.pkginfo(**cur) cur = {} if pkginfo is not None: yield pkginfo
comment, passed, retries = _search(quidditch, retries) if not passed: return (comment, str(passed))
self._cacher = (item, weakref.ref(cacher))
pls_ca = pls_.PLSCanonical(n_components=X.shape[1]) pls_ca.fit(X, Y)
mlb = MultiLabelBinarizer() assert_array_equal(mlb.fit_transform(inp), indicator_mat) assert_array_equal(mlb.classes_, classes) assert_array_equal(mlb.inverse_transform(indicator_mat), inp)
if hasattr(self.current_request_configuration, 'cache'): self.current_request_configuration.cache[key] = value
self.release_languages('fa')
for layer, state in safe_izip(dbm.hidden_layers, H_hat): upward_state = layer.upward_state(state) layer.get_output_space().validate(upward_state)
if self.sort: if not self.grouper.ordered:
'ENABLE_CSMH_EXTENDED': False,
self.assertInCourseListing(existent_course_key)
clf = self.factory() assert_raises(ValueError, clf.fit, X2, Y2, intercept_init=np.zeros((1,)))
RegistrationFactory(user=self.user)
if x['subnet_id'] not in subnet_ids and x['subnet_id'] is not None: to_delete.append(x['id'])
response = self.client.get(collector_url) self.assertContains(response, 'name="fancydoodad_set-0-doodad_ptr"')
from __future__ import unicode_literals
GeneratedCertificate.eligible_certificates.create( user=user, course_id=course_key, status=status )
VIDEO_CDN_URL = ENV_TOKENS.get('VIDEO_CDN_URL', {})
g.precisions_init = precisions_bad_shape[covar_type] assert_raise_message(ValueError, "The parameter '%s precision' should have " "the shape of" % covar_type, g.fit, X)
try:
from unit.modules.boto_s3_bucket_test import BotoS3BucketTestCaseMixin
return self.data
self.assertTrue(BulkEmailFlag.feature_enabled(course_id))
assert_greater(clf.score(X_test, y_test), 0.99)
url( r'^reverify/{course_id}/{usage_id}/$'.format( course_id=settings.COURSE_ID_PATTERN, usage_id=settings.USAGE_ID_PATTERN ), views.InCourseReverifyView.as_view(), name="verify_student_incourse_reverify" ),
warnings.warn(premature, RuntimeWarning, stacklevel=3) break
return self.q(css='.actual-course-number .certificate-value').first.text[0]
shim.remove_shim_context(event)
combined = ":".join([key_prefix, version, key])
ll = self.pixel_to_lonlat((px[0] - delta, px[1] - delta), zoom) ur = self.pixel_to_lonlat((px[0] + delta, px[1] + delta), zoom)
tsvd = TruncatedSVD(n_components=52, random_state=42) Xt = tsvd.fit_transform(X) Xinv = tsvd.inverse_transform(Xt) assert_array_almost_equal(Xinv, Xdense, decimal=1)
return "input_" + cls.answer_key(response_num, input_num)
U, mu, V = fbpca.pca(X, n_comps, raw=True, n_iter=n_iter, l=n_oversamples+n_comps) call_time = time() - t0
for max_leaf_nodes, name in product((None, 1000), ALL_TREES.keys()): TreeEstimator = ALL_TREES[name]
self.assertDeserializeEqual('False', 'False') self.assertDeserializeEqual('True', 'True')
import salt.utils import salt.utils.decorators as decorators
response = self.client.get('/nonascii_redirect/') self.assertRedirects(response, self.redirect_target)
return self.def_ms.get_courses()
self.assertIsNone(df.is_copy) df['letters'] = df['letters'].apply(str.lower) self.assertIsNone(df.is_copy)
attr_meta.abstract = False new_class.Meta = attr_meta return new_class
assert_true(np.all(np.diff(distances[0]) >= 0))
complex_value_list = [] v_value = value while isinstance(v_value, dict): v_key = v_value.keys()[0] v_value = v_value.values()[0] complex_value_list.append(v_key)
n_samples = X_diabetes.shape[0]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
return self.check_root()
response = self.api_response() self.assertIn("/courses/{}/".format(self.course.id), response.data['handouts_html'])
resp = self.client.post( '/course/bad/course/key/entrance_exam', {}, http_accept='application/json' ) self.assertEqual(resp.status_code, 400)
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
task_type = 'cohort_students' task_class = cohort_students task_input = {'file_name': file_name} task_key = "" return submit_task(request, task_type, task_class, course_key, task_input, task_key)
from __future__ import unicode_literals
self.course_key = SlashSeparatedCourseKey('edX', 'toy', '2012_Fall')
Microsite.objects.all().delete() microsite.clear() microsite.set_by_domain('unknown') self.assertIsNone(microsite.get_value('platform_name'))
final_df._data = final_df._data.downcast(dtypes='infer')
self.assertRaises(TypeError, lambda: Index(0, 1000))
self.client.login(username=user.username, password="test")
__, encoded_from_addr = forbid_multi_line_headers('from', from_addr, 'utf-8')
return self._categories
def test_persistence(self): self.assertEqual( Book.objects.count(), 1, )
return traverse_topologically( start_node=self.root_block_usage_key, get_parents=self.get_parents, get_children=self.get_children, filter_func=filter_func, yield_descendants_of_unyielded=yield_descendants_of_unyielded, )
PAM_PROMPT_ECHO_OFF = 1 PAM_PROMPT_ECHO_ON = 2 PAM_ERROR_MSG = 3 PAM_TEXT_INFO = 4
(32, False, u"False"),
from __future__ import absolute_import
return { self.fk_field: getattr(obj, self.fk_field), self.ct_field: getattr(obj, self.ct_field), }
cond = df > 0 _check_align(df, cond, (_safe_add(df).values))
schedule_keys = set(data.keys())
self.login_page.click_third_party_dummy_provider()
self.settings_detail.course_pacing = 'Self-Paced' self.settings_detail.save_changes() self.settings_detail.refresh_page() self.assertEqual(self.settings_detail.course_pacing, 'Self-Paced')
return value.time()
if salt.utils.is_windows() and HAS_DEPENDENCIES: return True return (False, "Module win_wua: module has failed dependencies or is not on Windows client")
template_name_suffix = '_archive_week'
reverse_chars = self.exploded[::-1].replace(':', '') return '.'.join(reverse_chars) + '.ip6.arpa'
self.assertIn("Some Rights Reserved", self.lms_courseware.course_license)
reraise_as(IOError("Cannot open " + path + " but can open " + parent + "."))
if not os.path.exists(remote_name): log.error("Error : Specified file %s does not exist" % remote_name) return filename
distribution['no_data'] = profiles.filter( **{feature: None} ).count()
html_short_title = 'scikit-learn'
if not enable_contracts and not edx_args.contracts: contracts.disable_all()
new_data = self[res]
for mode in ('honor', 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
context['script_code'] = all_code context['python_path'] = python_path context['extra_files'] = extra_files or None return context
if use_post: response = self.client.post(url) else: response = self.client.get(url) self.assertEquals(response.status_code, 404)
course_items_table.drawOn(self.pdf, table_left_padding, y_pos - rendered_height)
self.assertRedirects(response, 'http://testserver/permanent_redirect_view/', msg_prefix='abc')
css = {'scss': [resource_string(__name__, 'css/codemirror/codemirror.scss')]} js = {'coffee': [resource_string(__name__, 'js/src/raw/edit/xml.coffee')]} js_module_name = "XMLEditingDescriptor"
series = self.frame.xs('A', axis=1) expected = self.frame['A'] assert_series_equal(series, expected)
max_depth = node_indicator.sum(axis=1).max() assert_less_equal(est.tree_.max_depth, max_depth)
try: return self.store.get_item(location) except ItemNotFoundError: return None
return result
self.assertIsNone(lyr.spatial_filter)
return (retrieve_all, kwargs)
_run_command(['yum', '-y', 'install'] + build_reqs)
'recon_randomize': bool,
try: perms = self.application.opts['external_auth'][token['eauth']][token['name']]
else: script_content = url script_name = '{0}.sh'.format( hashlib.sha1(script_content).hexdigest() )
return get_branch_setting()
self._test_email_address_failures(SESDomainEndsWithDotError(554, "Email address ends with a dot"))
regex = re.compile(r'\s*repository\s*=\s*'+repo+r'/?\s*(#.*)?$')
return self.construct_scalar(node)
] DATETIME_INPUT_FORMATS = [
epoch_num = 5
return self.scope_ids.usage_id.course_key.org
if ':' in item: key, value = item.split(':', 1) setinfo[key] = value[1:]
return self.get_item(xblock.location.for_version(new_id))
if not preview_lang: return
clf = LogisticRegressionCV(cv=precomputed_folds) clf.fit(train, target)
mask = None if (needs_i8_conversion(x) or (not isscalar(y) and needs_i8_conversion(y))):
#html_split_index = False
admin_email_handler.filters = orig_filters
APPEND_SLASH = True
instance._state.db = using or DEFAULT_DB_ALIAS
if settings.FEATURES.get("ENABLE_LTI_PROVIDER"): urlpatterns += ( url(r'^lti_provider/', include('lti_provider.urls')), )
mongo_db = { 'host': 'localhost', 'user': '', 'password': '', 'db': 'xlog', }
badge_class = BadgeClass.get_badge_class( slug='new_slug', issuing_component='new_component', description=None, criteria=None, display_name=None, image_file_handle=None, create=False ) self.assertIsNone(badge_class)
return lxml.html.tostring(self.html, pretty_print=pretty_print)
self.assertEqual(self.loader[self.module_key](), self.count) self.loader.clear() self.assertNotIn(self.module_key, self.loader)
'exclude_paths': get_config_value('exclude_paths', ()),
return salt.utils.which('zfs')
df = DataFrame(np.random.random_sample((20, 5)), columns=list('ABCDE')) expected = df
settings.STATICFILES_DIRS.append( (u'themes/{}'.format(settings.THEME_NAME), theme_root / 'static') )
alpha1 = dual_coef[class2 - 1, sv_locs[class1]:sv_locs[class1 + 1]] alpha2 = dual_coef[class1, sv_locs[class2]:sv_locs[class2 + 1]]
from __future__ import absolute_import import logging import os import os.path import hashlib import re import json import yaml
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, call )
self.__manager = None
if ((X.data if sparse else X) < 0).any(): raise ValueError("Entries of X must be non-negative.")
def __init__(self, baz): self.__dict__ = baz.__dict__ self._baz = baz super(BaseBaz, self).__init__()
mb_k_means = MiniBatchKMeans(init="random", n_clusters=n_clusters, random_state=42, n_init=10).fit(X) _check_fitted_model(mb_k_means)
self.user = user
ddof = 1
config_course_cohorts_legacy( course, discussions=[], cohorted=True, auto_cohort_groups=["AutoGroup"] )
if prewarm == "auto": prewarm = not use_shared_mem forward_reduce_ndarray = ArrayMemmapReducer( max_nbytes, pool_folder, mmap_mode, verbose, prewarm=prewarm) forward_reducers[np.ndarray] = forward_reduce_ndarray forward_reducers[np.memmap] = reduce_memmap
for conn in connections.all(): if conn.vendor == 'sqlite' and conn.is_in_memory_db(conn.settings_dict['NAME']): conn.allow_thread_sharing = False
if form_class is None: form_class = self.get_form_class() return form_class(**self.get_form_kwargs())
result = first.copy() result.update(second) return result
self.query.reset_refcounts(refcounts_before)
from salt.utils import path_join
leaf_count = node_counts[node_counts != 0] assert_greater(np.min(leaf_count), len(X) * 0.25 - 1, "Failed with {0}".format(name))
s1.plot()
from __future__ import unicode_literals
__ = CourseOverview.get_from_id(course.id)
UNENROLL_DONE.send(sender=None, course_enrollment=self.course_enrollment, skip_refund=skip_refund)
if freq != 'infer': freq = to_offset(freq) else: freq_infer = True freq = None
assert_raises(ValueError, GaussianNB().partial_fit, X, y, classes=[0, 1])
topo = self.train.get_batch_topo(1) assert topo.ndim == 4
self.assertIn( deploy_dir_path, default_config['deploy_scripts_search_path'] )
refresh_cache = True break
self._assert_course_verification_status(VERIFY_STATUS_MISSED_DEADLINE)
X = [[2, 1, 2], [9, 1, 1], [6, 1, 2], [0, 1, 2]] y = [0, 1, 2, 2]
def __init__(self, formula, data): pass
parent = None
self.status = 'paying' self.save()
order = [3, 1, 2, 0] for df in [self.frame]:
return Polygon(LinearRing(ll, (ll[0], ur[1]), ur, (ur[0], ll[1]), ll), srid=4326)
with self.assertNumQueries(1): self.field_data_cache = FieldDataCache( [mock_descriptor([mock_field(Scope.user_state, 'a_field')])], course_id, self.user )
self.course_key = course_key self.user_id = user_id self._locations_to_scores = {} self._has_fetched = False
self.assertEqual( self.run_function('shadow.get_login_failed_count', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
with self.assertRaises(ValueError): c(com=-0.5)
preprocessor = GlobalContrastNormalization(subtract_mean=True, sqrt_bias=0.0, use_std=True)
cl.page_num = page_num cl.get_results(request) real_page_range = pagination(cl)['page_range']
lookup_name = 'right'
self._original_iterator = None self._pre_dispatch_amount = 0
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
ipc_server.start(ipc_server_socket_path)
from salt.modules import moosefs
clf = ForestClassifier(random_state=0).fit(X, y)
result = str(thing).decode('utf-8', "replace")
pass
expiration_date = models.DateField(default=None, null=True, blank=True)
survey = self._create_test_survey() self.assertIsNotNone(survey) self.assertEquals(unicode(survey), self.test_survey_name)
assert_raises(ValueError, clf.fit, X6, y4)
self.refresh_cached_metadata_inheritance_tree(xblock.scope_ids.usage_id.course_key, xblock.runtime)
biggie = DataFrame({'A': randn(200), 'B': tm.makeStringIndex(200)}, index=lrange(200))
textvalue = "x^2+2*x+y" if correct else 'x^2' self.problem_page.fill_answer(textvalue)
ret['comment'] = 'User {0} is not present, so it cannot be removed'\ .format(name) return ret
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
else: for prefix, state_pkg_name, version_spec in pkgs_details:
frame2.to_excel(path, 'test1', index=False)
from salt.utils import args from salt.utils.odict import OrderedDict from salt.exceptions import (SaltInvocationError, SaltSystemExit, CommandNotFoundError) from salt import utils
label_key = '%s_label%d' % (key, i) self.write_array(label_key, lab)
with self.assertNumQueries(0): self.assertEqual(obj.name, "first") self.assertEqual(obj.other_value, 0)
data = dict()
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=rank, tail_strength=1.0, random_state=0) assert_equal(X.shape, (n_samples, n_features))
result = s.values self.assertIsInstance(result, np.ndarray) self.assertTrue(result.dtype == 'datetime64[ns]')
vertical.start = self.future modulestore().update_item(vertical, self.dummy_user)
filePaths = [k['Key'] for k in data] ret[bucket] += [k for k in filePaths if not k.endswith('/')]
'address': __ipv4_quad, 'netmask': __ipv4_netmask, 'broadcast': __ipv4_quad, 'metric': __int,
break
qs = Parcel.objects.filter(center1__within=F('border1')) self.assertEqual(1, len(qs)) self.assertEqual('P2', qs[0].name)
import salt.ext.six as six
_config_filename_ = 'minion'
result0 = get_result(arr, 20, min_periods=0) result1 = get_result(arr, 20, min_periods=1) tm.assert_almost_equal(result0, result1)
result = Series([np.nan]).astype('M8[ns]') expected = Series([NaT]) assert_series_equal(result, expected)
link = CourseUserGroupPartitionGroup( course_user_group=cohort, partition_id=partition_id, group_id=group_id, ) link.save() return link
response = self._generate(course_key=self.EXISTED_COURSE_KEY_2) self.assertEqual(response.status_code, 400)
self.assertTrue(self.run_function('softwareupdate.reset_ignored')) self.assertEqual(self.run_function('softwareupdate.list_ignored'), [])
non_editable_metadata_fields = self.lc_block.non_editable_metadata_fields self.assertIn(LibraryContentDescriptor.mode, non_editable_metadata_fields) self.assertNotIn(LibraryContentDescriptor.display_name, non_editable_metadata_fields)
le = LabelEncoder() assert_raises(ValueError, le.transform, []) assert_raises(ValueError, le.inverse_transform, [])
if not connection.ops.geojson: with self.assertRaises(NotImplementedError): Country.objects.all().geojson(field_name='mpoly') return
casted = pd.Series(other, index=self.columns)
TASK_COMPATIBILITY_AT = 0 TASK_COMPATIBILITY_V1 = 1 TASK_COMPATIBILITY_V2 = 2 TASK_COMPATIBILITY_V3 = 3
sections_list = [] for chapter in self.get_progress_summary(): sections_list.extend(chapter['sections'])
TRAILING_PUNCTUATION_RE = re.compile(
remove_master_course_staff_from_ccx(self.course, self.ccx_locator, self.ccx.display_name) self.assertEqual(len(outbox), len(list_staff_master_course) + len(list_instructor_master_course))
blah = DataFrame(np.empty([0, 1]), columns=['A'], index=DatetimeIndex([]))
from .article import Article from .publication import Publication
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
rgxin, rgxout, promptin, promptout = self.setup()
kwargs.update(arg)
data2 = fetch_rcv1(shuffle=True, subset='train', random_state=77, download_if_missing=False) X2, Y2 = data2.data, data2.target s2 = data2.sample_id
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=300, max_depth=1) est.fit(X, y)
patch_extractor = sp_extract_patches(IR, IC, KR, KC, CH, RasterOrders.row_col_channel, RasterOrders.row_col_channel, subsample, border_mode, flip_patches=True).tocsc()
course_fixture.add_children(*[ self._build_fixture(self.UnitState(*state)) for state in itertools.product(*features) ])
import os import re
return []
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'course_info', 'info', '.html' )
with store.branch_setting(ModuleStoreEnum.Branch.draft_preferred): store.delete_item(item_location, ModuleStoreEnum.UserID.test)
from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing ensure_in_syspath('../../')
changes[namespace] = { 'new': config, 'old': update_config, }
problem = self.build_problem(answer="1+1j", tolerance=1e-3) self.assert_grade(problem, '1+j', 'correct')
for name in keyword_only: default = _empty if kwdefaults is not None: default = kwdefaults.get(name, _empty)
pass
__virtualname__ = 'pkg'
result.index = frame.index
return '{}.xml'.format(block_id)
'update_restart_services': list,
salt.utils.fopen(master_config, 'w').write( 'blah: false\n' 'root_dir: {0}\n' 'log_file: {1}\n'.format(tempdir, master_config) )
from __future__ import unicode_literals
ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))
int2byte = operator.methodcaller("to_bytes", 1, "big")
return dateformat.time_format(value, get_format(format or 'TIME_FORMAT', use_l10n=use_l10n))
template = key.lower() if '.' not in template: template = "%s.%s" % (template, settings.STATIC_TEMPLATE_VIEW_DEFAULT_FILE_EXTENSION)
@python_2_unicode_compatible class TagCollection(Tag): tags = models.ManyToManyField(Tag, related_name='tag_collections')
CSRF_COOKIE_NAME = 'csrftoken' CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52 CSRF_COOKIE_DOMAIN = None CSRF_COOKIE_PATH = '/' CSRF_COOKIE_SECURE = False CSRF_COOKIE_HTTPONLY = False CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN' CSRF_TRUSTED_ORIGINS = []
if i >= 1 and current_ndim == 3 and obj.ndim == 2: obj = obj.T
global _format_cache, _format_modules_cache _format_cache = {} _format_modules_cache = {}
self._check_non_staff_light(self.test_course) self._check_non_staff_dark(self.test_course) self._check_staff(self.course)
exit=False)
self.assertIn( column_name, self.get_indexes(BookWithLongName._meta.db_table), )
if not isinstance(ssh_gateway, str): return None
def lazy_wrap(self, wrapped_object): return SimpleLazyObject(lambda: wrapped_object)
grid_indices = [0, ] * 5
if slug is not None and (pk is None or self.query_pk_and_slug): slug_field = self.get_slug_field() queryset = queryset.filter(**{slug_field: slug})
self.send_future_map[message] = future
return None
xpath = "//span[contains(@class,'selected')]/p/b" self.assert_has_text(xml, xpath, 'HTML 2', exact=False)
return strip_tags(value)
path = list() n_alphas = self.alphas inner_verbose = max(0, self.verbose - 1)
args.extend([ 'test' ])
credit_course = CreditCourse.objects.create( course_key=self.course.id, enabled=True, )
if kwargs: for key, value in kwargs.iteritems(): setattr(state_object, key, value)
np.random.seed(12345)
self.assertEqual(self.offset2.rollback(d), datetime(2014, 6, 26, 17))
ret = generate_user_certificates( student, course_key, course=course, insecure=options['insecure'] )
__virtualname__ = 'vmadm'
from datetime import datetime import sys import os import nose import numpy as np
super(MakoTemplateLinter, self).__init__() self.javascript_linter = JavaScriptLinter() self.python_linter = PythonLinter()
return '"%s"' % etag.replace('\\', '\\\\').replace('"', '\\"')
from __future__ import unicode_literals
cwd = str(cwd)
if false_unsets is not True: ret['changes'].update({key: ''})
class Meta(SomeCategoryForm.Meta): exclude = ['url']
from __future__ import absolute_import import os import shutil
test_success = win_mod_reg.delete_value( 'HKEY_LOCAL_MACHINE', subkey, vname ) self.assertTrue(test_success)
self.assertEquals(self.request.COOKIES[settings.SESSION_COOKIE_NAME], session_id)
if not request.user.is_staff: raise Http404 cilset = CourseImportLog.objects.order_by('-created')
from __future__ import absolute_import
plot_gallery = True
fchange = _check_dir_meta(name, user, group, mode) if fchange: changes[name] = fchange if clean: keep = _gen_keep_files(name, require, walk_d)
return self.model.current()
with self.assertRaises(SpecificStudentIdMissingError): generate_certificates_for_students( self.create_task_request(self.instructor), self.course.id, student_set='specific_student', specific_student_id=None )
instance.image.delete(save=False) instance.delete()
supports_add_srs_entry = True supports_geometry_field_introspection = True
wp = self.process_axes(wp, columns=columns)
field_names = list(fields)
return capi.to_json(self.ptr)
__MP_LOGGING_CONFIGURED = True
cc_button_selector = self.get_element_selector(VIDEO_BUTTONS["transcript"]) element_to_hover_over = self.q(css=cc_button_selector).results[0] ActionChains(self.browser).move_to_element(element_to_hover_over).perform()
for mode in ('audit', 'honor', 'verified'): CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
self.m2m_db_table = curry(self._get_m2m_db_table, cls._meta)
AutoAuthPage(self.browser, course_id=self.course_id).visit() self.team_page.visit() self.assertFalse(self.team_page.edit_team_button_present)
score = self.decision_function(X) decisions = self.loss_._score_to_decision(score) return self.classes_.take(decisions, axis=0)
latest_timestamp = datetime.strptime( datetime.strftime(latest_timestamp, dateformat), dateformat ).replace(tzinfo=UTC)
clf = GradientBoostingRegressor(n_estimators=10, random_state=1) clf.fit(boston.data, boston.target)
n_labels = 15 n_samples = 1000 n_folds = 5
resp = self.client.get(reverse('view_survey', args=['NonExisting'])) self.assertEquals(resp.status_code, 302)
value_repr = value_repr[1:]
return False
result = symmath_check(expected_str, input_str, dynamath=[dynamath]) self.assertTrue('ok' in result and result['ok'])
y_pred, y_pred_std = gpr.predict(X2, return_std=True) y_pred = y_mean + y_pred y_pred_norm, y_pred_std_norm = gpr_norm.predict(X2, return_std=True)
response = self.client.get(reverse('admin:admin_views_villain_delete', args=(self.v1.pk,))) self.assertContains(response, should_contain, 1)
stream.unget(chunk[header_end + 4:])
self.assertEqual(num_children, len(reverted_parent.children))
xml_obj = self.split_test_module.definition_to_xml(MemoryFS())
import json
return StaffFactory(course_key=self.course.id)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
super(FakePaymentPage, self).__init__(browser) self._course_id = course_id
job_finished = True
if not self.is_unique and len(indexer): raise ValueError("cannot reindex from a duplicate axis")
regular_values = np.linspace(0, 256, n_clusters + 1) regular_labels = np.searchsorted(regular_values, face) - 1
request_headers = self.request.headers.get('Access-Control-Request-Headers') allowed_headers = request_headers.split(',')
scal_points = new_W / norms.dimshuffle('x',0)
from salt.exceptions import (CommandExecutionError, SaltInvocationError, SaltRenderError) import salt.utils import salt.syspaths from salt.exceptions import MinionError
bandwidth = config.get_cloud_config_value( 'bandwidth', vm_, __opts__, default=1800 ) kwargs['prices'].append({'id': bandwidth})
assert (niter > 1) == (len(dbm.hidden_layers) > 1)
if not is_credit_course(course_key): return
self._check_colors(handles[:len(jet_colors)], linecolors=jet_colors) for h in handles: self.assertEqual(h.get_alpha(), 0.5)
from __future__ import absolute_import
recorder.record_applied("migrations", "3_auto") loader.build_graph() self.assertEqual(num_nodes(), 4)
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 2) self.assertEqual(user_partititons[0].name, 'Name 0')
continue
if os.environ.get('TRAVIS_PYTHON_VERSION', None) is not None: time.sleep(10) else: time.sleep(2)
([CourseMode.VERIFIED, CourseMode.AUDIT], CourseMode.DEFAULT_MODE_SLUG),
import re
self.panel['ItemQ'] = 'foo' self.assertEqual(self.panel['ItemQ'].values.dtype, np.object_)
n_nonzeros = int(opts.ratio_nonzeros * opts.n_features)
form = CFFForm(data={'f': None}) form.save()
self.assertIn(str('Child Subject'), parent_s)
rng = date_range('3/11/2012', '3/12/2012', freq='30T') self.assertRaises(NonExistentTimeError, rng.tz_localize, self.tzstr('US/Eastern'))
callback = self.get_params['callback']
goals_label = _(u"Tell us why you're interested in {platform_name}").format( platform_name=settings.PLATFORM_NAME )
im_path = serial.preprocess(im_path) label_path = serial.preprocess(label_path)
for tab in course.tabs: if tab.type == 'discussion' or tab.type == 'external_discussion': return tab return None
def new_child(self, m=None): if m is None: m = {} return self.__class__(m, *self.maps)
axis = self.view_converter.axes.index('b') return axis
self._load_page(access_point, 'default')
from napalm import get_network_driver HAS_NAPALM = True
private_vertical = self.store.create_item(self.user.id, course_id, 'vertical', self.PRIVATE_VERTICAL) self.assertFalse(self.store.has_published_version(private_vertical))
result.name = None
import logging
dlogz = self.log_mean(log_ais_w)
NEVER = lambda x: False ALWAYS = lambda x: True
unstacked = self.ymd.unstack() unstacked.unstack()
import yaml import msgpack import salt.ext.six as six if salt.utils.is_windows(): import win32api
return False
with self.assertRaises(TypeError): lyr._set_spatial_filter('foo')
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
form.data[form.add_prefix(self.fk.name)] = None
self._assertOptionsValues("%s > option" % selector, values)
X = check_array(X, dtype=np.float64, order='F', copy=self.copy_X and self.fit_intercept) y = check_array(y, dtype=np.float64, ensure_2d=False)
self.close()
a = Article.objects.create( author=self.jane, headline="Nobody remembers the early years", pub_date=datetime(1, 2, 3, 4, 5, 6))
result = s[(x > 0 for x in s)] expected = s[s > 0] assert_series_equal(result, expected)
obj.delete() obj = Storage() self.assertEqual(obj.default.read(), b"default content") obj.default.close()
return _write_styles('.xmodule_display', output_root, _list_modules())
import salt.loader import salt.utils import salt.utils.jid from salt.ext.six.moves import range
cb = self.kwds.pop('colorbar', self.colormap or c_is_column)
return _check_range_and_return('lighting', label, -1, 5, -1)
if self.engine == 'c' and self.low_memory: warning_type = DtypeWarning
self.assertEqual(my_doodad.num_calls, 1)
dir_suffix = ""
unique_rank, inv_rank = np.unique(y_score[i], return_inverse=True) n_ranks = unique_rank.size rank = n_ranks - inv_rank
return self.q(css="a.remove-attempt").present
ex_sls.add(exc)
if ndim is None: if len(self.mgr_locs) != 1: ndim = 1 else: ndim = 2 self.ndim = ndim
return sorted(st_.states)
asset_key = course.id.make_asset_key('asset', course.course_image) content_store.find(asset_key)
DEPRECATED_ADVANCED_COMPONENT_TYPES = []
repos = tuple( x for x, y in six.iteritems(list_repos()) if str(y.get('enabled', '1')) == '1' )
x_s = x2[:,offset:offset+size] xWlist.append( W.lmul( x_s.reshape( (n_rows,)+W.col_shape()), T)) offset += size
self.assertEqual(sysex.exception.args, (1,))
for i in range(i+1,20):
join = salt.utils.alias_function(joined, 'join')
self.assertTrue(are_permissions_roles_seeded(second_course_id))
EmptyPromise( lambda: message in (self.message_for_field(field_id) or ''), "Messsage \"{0}\" is visible.".format(message) ).fulfill()
sql, params = '%s', [val]
xmpp.__salt__ = {} xmpp.__opts__ = {}
if self.is_geometry: self._adapter.prepare(conn)
for kernel in kernels: if not kernel.is_stationary(): continue K = kernel(X, X + 1) assert_almost_equal(K[0, 0], np.diag(K))
return CourseLocator( org=course_info['org'], course=course_info['course'], run=course_info['run'], branch=branch, )
self._set_mock_request_data(mock_request, { "threads_count": threads_count, "comments_count": comments_count, })
from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.modules.dockerng import ( CLIENT_TIMEOUT, STOP_TIMEOUT, VALID_CREATE_OPTS, _validate_input, _get_repo_tag ) import salt.utils import salt.ext.six as six
sparses = [c for c in to_concat if com.is_sparse(c)] fill_values = [c.fill_value for c in sparses] sp_indexes = [c.sp_index for c in sparses]
course_info_page = CourseInfoPage(self.browser, self.course_id) self._make_har_file(course_info_page)
test = [[1], [3], [4]] assert_array_almost_equal(clf.predict(test), [1, 3, 4], 2)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
import salt.utils.network from salt._compat import ipaddress
from dateutil.parser import _timelex
new_fields = chain( new_class._meta.local_fields, new_class._meta.local_many_to_many, new_class._meta.private_fields ) field_names = {f.name for f in new_fields}
self.assertEqual(len(courses_list), 2) self.assertTrue(all(isinstance(course, CourseSummary) for course in courses_list))
url = reverse("verify_student_reverify") return self.client.get(url)
from __future__ import absolute_import import os
if not suffix: url = url.rstrip('/')
with self.connection.cursor() as cursor: cursor.execute("SELECT 1 FROM mysql.time_zone LIMIT 1") return cursor.fetchone() is not None
import hmac import hashlib import binascii import datetime import base64 import msgpack import json import re import decimal
self.course_nav.go_to_vertical('Test Vertical-2') self.video.wait_for_video_player_render()
giturl = "" data_dir = ""
if _ret['result'] is not True and _ret['comment']: add_comment(path, _ret['comment'])
try: record = cls.objects.get(course_id=course_id) return record.embargoed except cls.DoesNotExist: return False
exists_ce = is_active is not None and is_active full_name = user.profile.name
block = modulestore().get_item(locator) pre_def_id = block.definition_locator.definition_id pre_version_guid = block.location.version_guid
pass
s = Series(np.arange(5), index=np.arange(5) * 2.5, dtype=np.int64)
return "one_param - Expected result: %s" % arg
self.distribution.salt_download_windows_dlls = True self.run_command('download-windows-dlls') self.distribution.salt_download_windows_dlls = None
return self.relative_path_to_absolute_uri(self.ACCOUNT_SETTINGS_REFERER)
model = self.model
with assertRaisesRegexp(NotImplementedError, 'column by column'): df.fillna(df.max(1), axis=1)
product = self.batch_size * self.num_batches if product > self._dataset_size: return self.batch_size * (self.num_batches - 1) else: return product
import integration
X, y = make_classification(n_samples=20, n_features=10, shuffle=False, random_state=0)
'transcript': 'http://video.google.com/timedtext?lang=en&v=3_yD_cEKoCk',
return 'assets.{}'.format(asset_type)
try:
y = iris.target
results[guid]['Severity'] = str(update.MsrcSeverity)
self.lcp = self.new_lcp(None)
labels = np.array(labels, copy=True) unique_labels = np.unique(labels) for i in unique_labels: yield labels == i
urls = { 'raw': raw_image_url, 'small': raw_image_url, 'large': raw_image_url, }
def __init__(self, detail): if isinstance(detail, dict): self.detail = detail else: super(_DictAPIException, self).__init__(detail)
assert_raises(ValueError, plot_partial_dependence, clf, X, ['foobar'])
rng = np.random.RandomState(0) n_samples, n_features, n_components = 500, 2, 2
y1 += [0]*n_classes y2 += [0]*n_classes
sql.to_sql(self.test_frame1, 'test_frame', self.conn)
wua_session = win32com.client.Dispatch('Microsoft.Update.Session')
return self._topology(capi.geos_convexhull(self.ptr))
default="images_course_image.jpg"
sparse_matrix_params = { "n_components": opts.n_components, "random_state": opts.random_seed, "density": opts.density, "eps": opts.eps, }
if self._match_pattern(handlers_list): return else: self.send_response(404, content="404 Not Found")
'METADATA_URL': 'www.googleapis.com/youtube/v3/videos/',
from __future__ import absolute_import import itertools import os import json import socket import sys import re import platform import logging import locale import salt.exceptions
init = getattr(estimator.__init__, 'deprecated_original', estimator.__init__)
verification_deadline = datetime(year=2020, month=12, day=31, tzinfo=pytz.utc) expiration_datetime = datetime.now(pytz.utc) response, expected = self._get_update_response_and_expected_data(expiration_datetime, verification_deadline)
if classes is not None: label = label[:, classes]
import integration import salt.utils
DATE_FORMAT = r'Yeko M\re\n d\a' TIME_FORMAT = 'H:i' SHORT_DATE_FORMAT = 'Y M j'
result = a & Series([]) expected = Series([False, False, False], list('bca')) assert_series_equal(result, expected)
filename = traceback.extract_tb(tb)[-1][0]
lr = LogisticRegression(C=1., solver='lbfgs')
self._add_to_relations(self._block_relations, parent_key, child_key)
if self.key_betas is not None and \ ki < len(self.key_betas) and \ bp1 == self.key_betas[ki]:
result = ser.copy() result.loc[index[1]] = 5 expected = pd.Series([0, 5], index=index) assert_series_equal(result, expected)
return np.asarray([clf.predict_proba(X) for clf in self.estimators_])
from salt.exceptions import CommandExecutionError from salt.modules import mac_assistive as assistive
self.request.user = self.user context = user_has_cart_context_processor(self.request) self.assertFalse(context['should_display_shopping_cart_func']())
salt.utils.files.process_read_exception(exc, path)
create_collection_index(self.collection, '_id.revision', background=True)
header = None rows = [] err_rows = [["id", "username", "error_msg"]] current_step = {'step': 'Calculating Grades'}
self.assertEqual(apps.get_model('admin', 'loGentrY'), LogEntry) with self.assertRaises(LookupError): apps.get_model('Admin', 'LogEntry')
import salt.search import salt.ext.six as six
s == s2 s2 == s
self._configure_credit()
self.cohort_management_page.select_discussion_topic(self.inline_key)
nested_args = mapping.nest(theano_args) fixed_var_descr = self.cost.get_fixed_var_descr(model, nested_args) self.on_load_batch = fixed_var_descr.on_load_batch
from __future__ import absolute_import
indexer[indexer < 0] = len(self) from pandas.core.indexing import maybe_convert_indices return maybe_convert_indices(indexer, len(self))
import logging
GitBase.__init__(self, opts, valid_providers=('gitpython', 'pygit2'), cache_root=winrepo_dir)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON
class Alfa(models.Model): name = models.CharField(max_length=10, null=True)
self.assertRaises(ValueError, lambda: self.df2.reindex(['a', 'a']))
n.collect(objs)
if relation == RECURSIVE_RELATIONSHIP_CONSTANT: relation = scope_model
oset.freqstr
self.course_nav.go_to_vertical('Test Vertical-2')
return get_instructions(xmltree)
binner, bins, binlabels = self._get_binner_for_time() bin_grouper = BinGrouper(bins, binlabels) return binner, bin_grouper
log.error('Detected nodegroup expansion failure of "{0}"'.format(word)) return False
values = Series([u'a_b_c', u'c_d_e', NA, u'f_g_h'])
import salt.modules.rvm as rvm
from salt.exceptions import CommandExecutionError import salt.utils import salt.modules.cmdmod
self.assertIn('some_required_info', response.context['adminform'].form.errors)
def f(): cat.reorder_categories(["a", "b", "c", "d"])
return registration.activation_key
colors_hsv = np.ones((n_colors, 3)) colors_hsv[:, 2] *= .75 colors_hsv[:, 0] = colors_hue
thread = cc.Thread.find(thread_id) result = _vote_or_unvote(request, course_id, thread, value) thread_voted.send(sender=None, user=request.user, post=thread) return result
if not all(parent in yield_results for parent in parents): continue
from __future__ import unicode_literals
rw_array = np.eye(10) rw_df = DataFrame(rw_array)
new_data = self._data for axis in sorted(reindexers.keys()): index, indexer = reindexers[axis] baxis = self._get_block_manager_axis(axis)
s = Series(['abc', True])
msg = "Expected \d+ fields in line \d+, saw \d+" with tm.assertRaisesRegexp(ValueError, msg): df = self.read_csv(StringIO(csv))
self.test_cloud_create() ret = self.run_cloud_destroy(INSTANCE_NAME)
def two_pass_var(X): mean = X.mean(axis=0) Y = X.copy() return np.mean((Y - mean)**2, axis=0)
self.assertRaises(IndexError, p.iloc.__getitem__, tuple([10, 5]))
result = self.panel4d.reindex(items=['ItemA', 'ItemB']) assert_frame_equal(result['l2']['ItemB'], ref['ItemB'])
if self.value == '': self.value = 'null'
import logging import subprocess import os
os.environ[JOBLIB_SPAWNED_PROCESS] = '1'
if getattr(xblock, 'is_draft', False): published_xblock_location = as_published(xblock.location) try: xblock.runtime.lookup_item(published_xblock_location) except ItemNotFoundError: return False return True
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
self._check_params(n_samples)
other = Int64Index(np.arange(25, 14, -1))
overview = CourseOverview.get_from_id(course.id) self.assertFalse(hasattr(overview, 'image_set'))
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, with_system_user, skip_if_binaries_missing ) ensure_in_syspath('../../')
course_key_string = request.query_params.get('course_id', None) if not course_key_string: raise ValidationError('course_id is required.')
LogoutPage(self.browser).visit() self._auto_auth("STAFF_TESTER", "staff101@example.com", True) self.course_outline.visit()
naughty_update = { "username": "not_allowed", "gender": "undecided", "email": "not an email address" }
from __future__ import unicode_literals
elif result is None: ret['result'] = None ret['comment'] = out['comment'] return ret
connections['default'].allow_thread_sharing = False exceptions = [] do_thread() self.assertIsInstance(exceptions[0], DatabaseError)
make_asset_xml(num_assets, ASSET_XML_PATH) validate_xml(ASSET_XSD_PATH, ASSET_XML_PATH)
out = salt.utils.fopen(path, 'wb')
dangling_pointer = course.id.make_usage_key('chapter', 'DanglingPointer')
with connection.schema_editor() as editor: editor.create_model(AuthorWithEvenLongerName) editor.create_model(BookWithLongName) column_name = connection.ops.quote_name("author_foreign_key_with_really_long_field_name_id")
self._validate_hyperparameters() if np.any(np.array(hidden_layer_sizes) <= 0): raise ValueError("hidden_layer_sizes must be > 0, got %s." % hidden_layer_sizes)
CourseEnrollment.enroll(user, course_id) self.assertTrue(CourseEnrollment.is_enrolled(user, course_id)) self.assert_enrollment_event_was_emitted(user, course_id)
dict_delitem(self, key) link_prev, link_next, key = self.__map.pop(key) link_prev[1] = link_next link_next[0] = link_prev
for (key, value) in problemtree.items(): tree.set(key, value)
selector = _factor_indexer(shape[1:], labels) mask = np.zeros(np.prod(shape), dtype=bool) mask.put(selector, True)
return label.split(' (')[0]
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
new_state = project_state if preserve: new_state = project_state.clone() for operation in self.operations: operation.state_forwards(self.app_label, new_state) return new_state
proba[proba < np.finfo(proba.dtype).eps] = np.finfo(proba.dtype).eps log_proba = np.log(proba)
self.assertEqual(self.func(None), [E001])
EMAIL_OPTIN_MINIMUM_AGE = PARENTAL_CONSENT_AGE_LIMIT
self.toggle_button('done_0', {}, False) self.toggle_button('done_1', {}, True)
log.warning("Multiple gating milestones found for prereq UsageKey %s", prereq_content_key)
response = self.client.get('/check_session/') self.assertEqual(response.status_code, 200) self.assertEqual(response.content, b'YES')
if hasattr(self._dataset, 'get'): rval = self._next(next_index) else: rval = self._fallback_next(next_index)
self.assertFalse(all_gradesets[student3]) self.assertFalse(all_gradesets[student4])
num_certs = GeneratedCertificate.eligible_certificates.filter(user=self.student).count() self.assertEqual(num_certs, 1)
if request.method == 'POST' and not form_validated and "_saveasnew" in request.POST: context['show_save'] = False context['show_save_and_continue'] = False add = False
assert isinstance(prompt, six.binary_type)
return self.runtime.service(self, "request_cache")
response = self.api_response() self.assertIn("/courses/{}/jump_to_id/".format(self.course.id), response.data['handouts_html'])
rval = np.transpose(rval, tuple(self.axes.index(axis) for axis in ('b', 0, 1, 'c')))
return x
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
languages_data_folder = sys.argv[1] dataset = load_files(languages_data_folder)
TEST_DATA_MONGO_MODULESTORE = functools.partial(mixed_store_config, mkdtemp_clean(), {})
return self.prefix + self.get_valid_name(filename)
X = np.arange(100)[:, np.newaxis] y = np.ones(100) y[:50] = 0.0
#latex_domain_indices = True
if 2 in pdp_lim: Z_level = np.linspace(*pdp_lim[2], num=8)
continue
call = _get_user_defined_method(type(obj), '__call__', 'im_func') if call is not None: sig = signature(call)
return self.enabled and self.enable_learner_issuance
return None
delta = self._tilesize / 2
major_axis = Index(['foo', 'bar', 'baz', 'qux']) minor_axis = Index(['one', 'two'])
if isinstance(subarr, ABCSeries): subarr = subarr._values if subarr.dtype == np.object_: subarr = tools._to_datetime(subarr, box=False)
student = certificate_invalidation.generated_certificate.user instructor_task.api.generate_certificates_for_students( request, course_key, student_set="specific_student", specific_student_id=student.id )
import salt.utils from salt.ext.six import string_types from salt.log.setup import LOG_LEVELS
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
courses2 = import_course_from_xml( self.store, self.user_id, self.export_dir, source_dirs=[top_level_export_dir], static_content_store=contentstore, target_id=dest_course_key2, create_if_not_present=True, raise_on_failure=True, )
return True
success = self.client.login(username=self.SUPPORT_USERNAME, password=self.SUPPORT_PASSWORD) self.assertTrue(success, msg="Couldn't log in as support staff")
return self.name
epub_title = u'getting_started' epub_author = u'EdX Doc Team' epub_publisher = u'EdX Doc Team' epub_copyright = u'2013, EdX Doc Team'
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../')
return 'latex' not in template['template_id'] or course.use_latex_compiler
if not path or not os.path.isfile(path): return ret
tol = 2 if oracle else 5
face = face / 255
self.assertEquals(self.get_about_page_link(), None)
import salt.utils import salt.utils.odict as odict import salt.utils.dictupdate as dictupdate import salt.ext.six as six from salt.ext.six import string_types
return dict(map(get_discussion_id_map_entry, get_accessible_discussion_modules(course, user)))
admin = AdminFactory()
if sys.getwindowsversion().major < 6: raise SaltInvocationError('Symlinks are only supported on Windows Vista or later.')
_ = lambda text: text
df = _make_frame() df.to_csv(path, tupleize_cols=False, index=False) result = read_csv(path, header=[0, 1], tupleize_cols=False) assert_frame_equal(df, result)
world.clear_courses()
return router
s_values = np.array(['foo', 'bar', 'baz'], dtype=object) self.assertRaises(ValueError, lambda: nanops._ensure_numeric(s_values))
f.__name__ = name return f
return course_metadata_utils.may_certify_for_course( self.certificates_display_behavior, self.certificates_show_before_end, self.has_ended() )
self.check_html(self.widget, 'date', '2007-09-17', html=( '<input type="text" name="date" value="2007-09-17" />' ))
lcd = _lcd_dtype(counts[IntBlock]) kinds = set([i.dtype.kind for i in counts[IntBlock]]) if len(kinds) == 1: return lcd
LP_SRC_FORMAT = 'deb http://ppa.launchpad.net/{0}/{1}/ubuntu {2} main' LP_PVT_SRC_FORMAT = 'deb https://{0}private-ppa.launchpad.net/{1}/{2}/ubuntu' \ ' {3} main'
self.assertRaises(ValueError, read_csv, 's3://pandas-test/tips.csv' + ext, compression=comp)
win_system.__salt__ = {} win_system.__opts__ = {}
import sys from collections import namedtuple, Iterable, Sequence, Mapping import logging
return users
if return_bin: return response
request = CreditRequest.objects.get(uuid=uuid) self.assertEqual(request.status, expected_status)
X, y = make_regression(random_state=random_state)
pass
return self.grouper.get_iterator(self.obj, axis=self.axis)
from __future__ import unicode_literals
tds = dts.diff() q = tds.quantile(.25) self.assertEqual(q, pd.to_timedelta('24:00:00'))
if isinstance(obj, XBlock): return _has_access_descriptor(user, action, obj, course_key)
return MockBucket(bucket_name)
for key in kv_dict: self.kvs.set(key, 'test_value')
resp = self.client.get_html('/home/') self.assertContains( resp, '<h1 class="page-header">Studio Home</h1>', status_code=200, html=True )
self.assertEqual(list(storage), example_messages)
try: import win32com.client import pythoncom
self.assertQuerysetEqual( baseqs.filter(birthdate__testyear__lt=2012), [self.a1], lambda x: x)
if result.ndim > 1: result = result.reshape(len(result)) result = self._holder(result).tz_localize(self.values.tz)
readline.set_history_length(300)
return Fragment(self.FRAG_CONTENT)
trainer = yaml_parse.load(design_matrix_yaml % {'filename': filename}) trainer.main_loop()
for lhs, rhs in product(self.lhses, self.rhses): self.check_pow(lhs, '**', rhs)
url(r'^user_api/', include('openedx.core.djangoapps.user_api.legacy_urls')),
for pkg_name, pkg_info in installed.items(): self.assertEqual(installed[pkg_name].get('source'), run_out[pkg_name]['source_rpm'])
print cmd, logfile run_background_process(cmd, out_log=logfile, err_log=logfile, cwd=cwd)
course_object, course_key, error_code, http_status = get_valid_course(course_id, is_ccx) self.check_object_permissions(self.request, course_object) return course_object, course_key, error_code, http_status
vertical = get_and_verify_publish_state('vertical', self.TEST_VERTICAL, True) for child in vertical.get_children(): verify_item_publish_state(child, True)
import salt.utils import salt.utils.mac_utils from salt.exceptions import SaltInvocationError
self.lc_block = store.get_item(self.lc_block.location) self.problem_in_course = store.get_item(self.problem_in_course.location)
import salt.runner import salt.utils import salt.config import salt.syspaths
new_values = algos.diff(self.values, n, axis=axis) return [self.make_block(values=new_values, fastpath=True)]
return models.Application.objects.create( name=name, user=user, client_id=client_id, client_type=models.Application.CLIENT_CONFIDENTIAL, authorization_grant_type=authorization_grant_type, redirect_uris=redirect_uri, )
actual = json.loads(response.content) self.assertEqual(actual, expected)
plt.figure(figsize=(8, 8)) accuracy = plt.subplot(211) timescale = plt.subplot(212)
from django.core.wsgi import get_wsgi_application
self._verify_unit_warning( self.UnitState(is_released=True, publish_state=self.PublishState.PUBLISHED, is_locked=True), self.STAFF_ONLY_WARNING )
return self.data_specs
if not scopes: scopes = ['default'] return ' '.join(scopes)
roc_auc_scorer = make_scorer(roc_auc_score, greater_is_better=True, needs_threshold=True) average_precision_scorer = make_scorer(average_precision_score, needs_threshold=True) precision_scorer = make_scorer(precision_score) recall_scorer = make_scorer(recall_score)
def authenticate(self, username=None, password=None): raise PermissionDenied def has_perm(self, user_obj, perm, obj=None): raise PermissionDenied def has_module_perms(self, user_obj, app_label): raise PermissionDenied
self.add_credit_course() CourseFactory.create(org='edX', number='DemoX', display_name='Demo_Course')
attrs['maxlength'] = str(self.max_length)
return [etag_str]
values = Series([u('fooBAD__barBAD'), NA, u('foo'), u('BAD')])
self.stroke_color, self.stroke_opacity, self.stroke_weight = stroke_color, stroke_opacity, stroke_weight
import salt.ext.six as six
'EMBARGO': False,
exc_info_on_loglevel=logging.DEBUG
from salt.exceptions import CommandExecutionError from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return super(SoftDeleteCouponManager, self).get_queryset()
membership = Membership.objects.create( membership_country_id=self.usa.id, person_id=self.jane.id, group_id=self.cia.id)
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
from salt.runners import cache import salt.utils
salt '*' win_update.install_updates
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
self.q(css='.dismiss-button').click()
__virtualname__ = 'service'
authenticate_lti_user(request, params['user_id'], lti_consumer)
raise NotImplementedError()
if connection.features.interprets_empty_strings_as_nulls: expected_null_imagefield_repr = '' else: expected_null_imagefield_repr = None
EmptyPromise( lambda: self.q(css='div.add-xblock-component').present, 'Wait for the menu of components to be present' ).fulfill()
import logging try: import json5 as json HAS_JSON5 = True except ImportError: HAS_JSON5 = False
import salt.utils from salt.modules import pkg_resource import salt.ext.six as six
from __future__ import unicode_literals
loc_str = unicode(location) max_score = self._max_scores_updates.get(loc_str) if max_score is None: max_score = self._max_scores_cache.get(loc_str) return max_score
self.assertIsInstance(BadgeClass().backend, DummyBackend)
return [('127.0.0.1:11211 (1)', {})]
try: from django.conf import settings lib_path = settings.GEOS_LIBRARY_PATH except (AttributeError, EnvironmentError, ImportError, ImproperlyConfigured): lib_path = None
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
tid = tid + random.choice(string.ascii_lowercase)
transaction.commit()
return len(tup) <= self.lexsort_depth
self.descriptor = self.modulestore.return_value.get_item.return_value
yaml.add_multi_constructor('!obj:', multi_constructor_obj) yaml.add_multi_constructor('!pkl:', multi_constructor_pkl) yaml.add_multi_constructor('!import:', multi_constructor_import)
if salt.utils.is_windows(): return (False, 'The network execution module cannot be loaded on Windows: use win_network instead.') return True
return
from selenium.webdriver.common.by import By from selenium.webdriver.support import expected_conditions as ec self.wait_until( ec.presence_of_element_located((By.CSS_SELECTOR, css_selector)), timeout )
Friendship.objects.create( from_friend_id=self.jane.id, to_friend_id=self.george.id, to_friend_country_id=self.jane.person_country_id, from_friend_country_id=self.george.person_country_id)
dataset = datasets.load_iris()
super(LibraryEditPageTest, self).setUp() self.lib_page = LibraryEditPage(self.browser, self.library_key) self.lib_page.visit() self.lib_page.wait_until_ready()
self.rwork = _aligned_zeros(self.ncv, self.tp.lower())
warnings.filterwarnings( "ignore", "Using a non-integer number instead of an " "integer will result in an error in the future", DeprecationWarning )
with self.assertRaises(DatabaseError): asos.save(force_update=True) with self.assertRaises(DatabaseError): asos.save(update_fields=['pub_date'])
self.connection = connection
results = (course for course in results if course.scope_ids.block_type == 'course')
self.assertIsNone(self.profile.age)
casted = pd.Series(other, index=self.index)
pass
self.nfac = nfac
fake_data_api.add_course(self.COURSE_ID, course_modes=['honor', 'verified', 'audit'])
deploy_scripts_search_path = overrides.get( 'deploy_scripts_search_path', defaults.get('deploy_scripts_search_path', 'cloud.deploy.d') ) if isinstance(deploy_scripts_search_path, string_types): deploy_scripts_search_path = [deploy_scripts_search_path]
need_dash_t = ('CentOS-5',)
for asset in assets: self.assertEquals(asset['displayname'], asset_displayname)
raise nodes.SkipNode
self.access_token.delete() response = self.post_with_bearer_token('/oauth2-test/') self.check_error_codes( response, status_code=status.HTTP_401_UNAUTHORIZED, error_code=authentication.OAUTH2_TOKEN_ERROR_NONEXISTENT )
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
content = json.dumps(data, cls=i4xEncoder) super(JsonResponse, self).__init__(content, content_type='application/json; charset=utf-8')
if exc.errno != errno.EPIPE: raise exc
published_video = self.store.publish(self.video.location, self.user.id) self.validate_preview_html(self.video, STUDENT_VIEW, can_add=False)
CORRECTMAP_PY = inspect.getsource(correctmap)
category_start_date = None for entry in entries: if category_start_date is None or entry["start_date"] < category_start_date: category_start_date = entry["start_date"]
idf = df.set_index(['A', 'B'])
self.save()
(13, True, False, u"False"),
return True
if "default" in kwargs: kwargs["defaultValue"] = kwargs["default"]
locked_toc = self._return_table_of_contents() for toc_section in self.expected_locked_toc: self.assertIn(toc_section, locked_toc)
result = f.clean('21.12.10') self.assertEqual(result, date(2010, 12, 21))
if n == 0 and other != cur_cmend: n += 1
import salt.utils
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
back_uuid = uuid(dev) if back_uuid is not None: result['cache'] = back_uuid
raise nose.SkipTest("skipping for now")
self.assertEqual(len(Tag.objects.order_by('parent__name')), 5)
latex = fname + inner return LatexRendered(latex, tall=children[1].tall)
self.assertNotIn(REG_STR, resp.content)
sections.append(_section_analytics(course, access))
df2 = self.read_csv(StringIO(data2)) tm.assert_frame_equal(df2, df)
self.assertFalse(form.is_valid())
import salt.ext.six as six
regr.fit(diabetes_X_train, diabetes_y_train)
self.frame.to_latex(column_format='ccc')
this_yaml = test_yaml_which_set % {'which_set': 'train'} trainer = yaml_parse.load(this_yaml) trainer.main_loop()
response.resolver_match = SimpleLazyObject(lambda: resolve(request['PATH_INFO']))
argmin = idxmin argmax = idxmax
for _ in range(2): self.assertIsInstance(CourseOverview.get_from_id(course.id), CourseOverview)
n_connected_components, _ = connected_components(graph) return n_connected_components == 1
return any(self.correct_map.is_queued(answer_id) for answer_id in self.correct_map)
requested_tab_id_locators = request.json['tabs']
with self.assertRaises(SearchIndexingError): CoursewareSearchIndexer.do_course_reindex(modulestore(), self.course.id)
_version_info = std_call('GDALVersionInfo') _version_info.argtypes = [c_char_p] _version_info.restype = c_char_p
pkg, ver = line.split(None)[1].rsplit('-', 1)
chunks = self.state.compile_high_data(high)
from __future__ import absolute_import import os import tempfile
tomcat.__salt__ = {} tomcat.__opts__ = {} tomcat.__env__ = {}
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:00")
REQUIREMENTS_DISPLAY_MODES = CourseMode.CREDIT_MODES + [CourseMode.VERIFIED]
ret['comment'] = 'Database {0} is not present, so it cannot be removed'\ .format(name) return ret
([], []),
return self.iterator()
if len(names) == 1: return ret[names[0]] return ret
RestrictedCourse.objects.get(course_key=self.course.id).delete()
self.assertOLXIsDraftOnly(block_list_to_unpublish) with self.assertRaises(ItemNotFoundError): self.unpublish(block_list_to_unpublish)
if lib.isscalar(obj) or not hasattr(obj, 'ndim'): break
response = self._enroll_through_view(self.course) self.assertEqual(response.status_code, 400)
if contains_nan(mu): logger.info('nan found') return X
self.assertFalse(mail.outbox[0].message().is_multipart())
subtask_status.increment(retried_nomax=1, state=RETRY) return _submit_for_retry( entry_id, email_id, to_list, global_email_context, exc, subtask_status, skip_retry_max=True )
log.debug( 'While the userdel exited with code 12, this is a known bug on ' 'debian based distributions. See http://goo.gl/HH3FzT' ) return True
(True, True), (True, False),
class geoip_char_p(c_char_p): pass
from salt.modules import keystone
return self.add_truncation_text(text[:end_index or 0], truncate)
try: output = html5lib.parseFragment(html, treebuilder='lxml', namespaceHTMLElements=False)[0] except IndexError: raise ex
self.navigate_to_video()
obj = queryset.get()
response.content = 'bar' self.assertEqual(response.content, b'bar')
pass
if override_uniques is None: override_uniques = [ [rename_mapping.get(n, n) for n in unique] for unique in model._meta.unique_together ]
clf = SVC() filter1 = SelectKBest(f_classif) pipe = Pipeline([('anova', filter1), ('svc', clf)])
self.handle_file_complete(old_field_name, counters) old_field_name = None
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
self._handouts.append(asset_name)
script_url = _slashes_re.sub(b'/', script_url)
return self._spatial_attribute('mem_size', {}, **kwargs)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
artifact_metadata_url = '{artifactory_url}/{repository}/{group_url}/{artifact_id}/maven-metadata.xml'.format( artifactory_url=artifactory_url, repository=repository, group_url=group_url, artifact_id=artifact_id) log.debug('artifact_metadata_url=%s', artifact_metadata_url) return artifact_metadata_url
'reactor_refresh_interval': int,
merge_cells = True
n_samples = 1500 noise = 0.05 X, _ = make_swiss_roll(n_samples, noise) X[:, 1] *= .5
ir.fit(x, y) ir.out_of_bounds = "xyz" assert_raises(ValueError, ir.transform, x)
provider_url = reverse('openid-provider-xrds') factory = RequestFactory() request = factory.request() abs_provider_url = request.build_absolute_uri(location=provider_url)
IcrvStatusEmailsConfiguration.objects.create(enabled=True) self.create_reverification_xblock()
return
super(CertificatePage, self).__init__(browser) self.user_id = user_id self.course_id = course_id
(['honor', 'verified', 'audit'], 'honor'),
index = np.random.randn(10) s = Series(np.random.randn(10), index=index) self._check_roundtrip(s, tm.assert_series_equal)
config.set_options(ignore_setup_xxx_py=True, assume_default_configuration=True, delegate_options_to_subpackages=True, quiet=True)
block_context.add_blocks(self.blocks)
m_space, m_source = model.get_monitoring_data_specs() spaces.append(m_space) sources.append(m_source)
schema = query_reply['schema']
self.selenium.execute_script("location.reload()") self.wait_page_loaded()
cached_pkg = __salt__['cp.is_cached'](uninstaller) if not cached_pkg: cached_pkg = __salt__['cp.cache_file'](uninstaller)
index_entry = self._get_index_if_valid(course_key, force) structure = self._lookup_course(course_key).structure
import os import hashlib
continue
try: from Crypto.Util import asn1 import OpenSSL HAS_DEPS = True except ImportError: HAS_DEPS = False
pass
self.assertFalse(are_permissions_roles_seeded(self.base_course_key)) call_command('import', self.content_dir, self.good_dir) self.assertTrue(are_permissions_roles_seeded(self.base_course_key))
from salt.minion import Matcher
output = self.engine.render_to_string('inheritance27') self.assertEqual(output, 'no tags')
dataname = mldata_filename(dataname)
while i > 1: p = parts.pop(0) i -= 1 popped.append(p)
raise NotImplementedError("number of dimensions is currently " "limited to 3")
pinv2_args = {'check_finite': False}
wmi = types.ModuleType('wmi') sys.modules['wmi'] = wmi
if not isinstance(result, DataFrame): return self._transform_general(func, *args, **kwargs)
return self.q(css=self._bounded_selector('.visibility-button')).is_present()
self.components_ = np.empty((0, X.shape[1]))
splitted_data = train_test_split(X, y, random_state=42) with TempMemmap(splitted_data) as (X_train, X_test, y_train, y_test): _lars_path_residues(X_train, y_train, X_test, y_test, copy=False)
expr = stripXML(self.mathml_start + expr + self.mathml_end) expected = stripXML(self.mathml_start + expected + self.mathml_end)
ret['comment'] = ('Database {0} is not present, so it cannot be removed' ).format(name) return ret
try: return _unit_map[arg] except: if arg is None: return 'ns' raise ValueError("invalid timedelta unit {0} provided".format(arg))
for k in np.linspace(80, n_samples, 10): k = int(k)
'ajax_url': '{}/xmodule_handler'.format(location.to_deprecated_string()), 'element_id': u'i4x-HarvardX-ER22x-conditional-condone', 'depends': u'i4x-HarvardX-ER22x-problem-choiceprob'
return self._section_scores(chapter_index, section_index)
errstring = "Invalid course_key: 'foo/TestX/TS01/2015_Q7'." with self.assertRaisesRegexp(CommandError, errstring): call_command('delete_course', 'foo/TestX/TS01/2015_Q7')
n_jobs, n_estimators, starts = _partition_estimators(self.n_estimators, self.n_jobs)
for attribute in ABOUT_ATTRIBUTES: if attribute in jsondict: cls.update_about_item(descriptor, attribute, jsondict[attribute], user.id)
'grains': dict,
FEATURES['ENTRANCE_EXAMS'] = True ENTRANCE_EXAM_MIN_SCORE_PCT = 50
super(CapaModule, self).__init__(*args, **kwargs)
return self
from __future__ import unicode_literals
create_xblock( parent_locator=unicode(created_block.location), user=request.user, category='sequential', display_name=_('Entrance Exam - Subsection') ) add_entrance_exam_milestone(course.id, created_block)
index_tab = [] for i in xrange(3): index_tab.extend(repeat(i, set_range[i]))
COMPLEX_OVERRIDE_SETTINGS = {'DATABASES'}
self.created_by = created_by self.created_by_email = created_by_email self.created_on = created_on or now self.fields = fields or {}
sequential.display_name = 'sequential1' sequential = self.store.update_item(sequential, self.user_id) self.assertTrue(self.store.has_published_version(sequential))
assert False, 'type checking should happen without calling model __iter__'
from __future__ import unicode_literals
f = lambda x: x.startswith(pat) return _na_map(f, arr, na, dtype=bool)
sel_fmt = connection.ops.select % sel_fmt
return [('127.0.0.1:11211 (1)', {})]
__, __, re_course = self.load_test_import_course(target_id=course.id, module_store=module_store)
assert_greater(ridge_outlier_score, huber_outlier_score)
import salt.utils
certs_api.set_cert_generation_enabled(self.COURSE_KEY, True) self._assert_enabled_for_course(self.COURSE_KEY, True)
self.assertTrue(self._has_changes(published_xblock.location))
connection = connections[options['database']]
current_users_state = self._get_users_state() self._check_response(users_state_before_fail, current_users_state)
begin = Timestamp('2011/1/1', tz='US/Eastern') end = Timestamp('2014/1/1', tz='US/Eastern')
with self.assertNumQueries(0): ObjectB.objects.filter(objecta__in=ObjectA.objects.all())
from salt.modules import postgres
self.assertFalse(CourseInstructorRole(self.course.id).has_user(nonstaff_user)) self.assertTrue(CourseStaffRole(self.course.id).has_user(nonstaff_user))
pkgutil.__salt__ = {} pkgutil.__context__ = {}
try: latest = cls.objects.filter(course_key=course_key).latest() except cls.DoesNotExist: return False else: return latest.enabled
self.assertTrue(chemical_equations_equal('H2 + O2 -> H2O2', 'O2 + H2 -> H2O2', exact=True))
c = SimpleCookie() c.load("name=val") c['name']['httponly'] = True self.assertTrue(c['name']['httponly'])
if not is_dictlike(to_replace) and not is_dictlike(regex): to_replace = [to_replace]
if key.field_name in self._fields: del self._fields[key.field_name]
def f(): df_multi.loc[('2013-06-19', 'ACCT1', 'ABC')]
salt.utils.verify.check_path_traversal(self.opts['cachedir'], key_user, self.skip_perm_errors)
xpath = "//option[@value='option_2_dummy_default']" self.assert_has_xpath(xml, xpath, self.context)
if __grains__['os'] in ['MacOS', 'Darwin'] and config == '/etc/fstab': config = "/etc/auto_salt"
'master_alive_interval': int,
if used_ids is None: used_ids = [] cid = random.randint(minimum, maximum) while cid in used_ids: cid = random.randint(minimum, maximum) return cid
raise RedirectCycleError("Too many redirects.", last_response=response)
from __future__ import absolute_import
anova_filter = SelectKBest(f_regression, k=3) clf = svm.SVC(kernel='linear')
model1 = clf.fit(X, Y[:, 0]).coef_ model2 = clf.fit(X, Y[:, :1]).coef_ assert_array_almost_equal(model1, model2)
obj = models.VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ.objects.create() rel_obj = models.Person.objects.create(first_name='Django', last_name='Reinhardt') obj.m2m_also_quite_long_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.add(rel_obj)
rast = GDALRaster(json.loads(JSON_RASTER)) stx_pnt = GEOSGeometry('POINT (-95.370401017314293 29.704867409475465)', 4326) stx_pnt.transform(3086)
from __future__ import absolute_import from datetime import tzinfo, datetime, timedelta import uuid import logging import json
return self.rescore_submission_button.is_present()
self.n_unique_specs = 0
count = DiscoverRunner().build_suite( ["test_discovery_sample.empty"], ).countTestCases() self.assertEqual(count, 0)
if not properties: properties = {}
self.assertEqual(victoria_json, City.objects.geojson(bbox=True).get(name='Victoria').geojson)
return tuple(Commit.iter_items( repo, "{start}..{end}".format(start=start_ref, end=end_ref), first_parent=True, no_merges=True, ))
from __future__ import unicode_literals
rs2 = ser.replace([np.nan, 'foo', 'bar'], [-1, -2, -3]) tm.assert_series_equal(rs, rs2)
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] h1_state = layer_to_state[h1] h2_state = layer_to_state[h2]
if propindexes: for a in orig_t.axes: if a.is_indexed: self.assertTrue(new_t[a.name].is_indexed)
r = StreamingHttpResponse(iter(['hello', 'world'])) with self.assertRaises(Exception): r.write('!')
exit=False)
return self.example_cert_set.course_key
if generate_translation: for lang, filename in item.transcripts.items(): item.transcripts[lang] = os.path.split(filename)[-1]
ssh_gateway_config['ssh_gateway_key'] = config.get_cloud_config_value( 'ssh_gateway_private_key', vm_, __opts__, default=None, search_global=False )
import salt.utils from salt.transport.client import ReqChannel
if is_categorical_dtype(key): c = key
get_user_credentials(self.user)
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON ensure_in_syspath('../..')
name = models.CharField(max_length=255)
self._run_command(course_key_list=[ unicode(self.courses[0].id), unicode(self.courses[1].id) ])
raise NotImplementedError( str(type(self)) + " does not implement " + "continue_learning.")
from __future__ import absolute_import
return os.path.join('/sys/block/', dev)
self.cohort_management_page.select_discussion_topic(self.inline_key)
output = self.engine.render_to_string('if-tag-shortcircuit02', {'x': TestObj()}) self.assertEqual(output, 'no')
response, __ = self._get_update_response_and_expected_data(None, None) self.assertEqual(response.status_code, 200)
self.SETTINGS_MODULE = settings_module
last_valid_score = self.validation_scores_[-1]
statement = cursor.statement
output = self.engine.render_to_string('legacyi18n04', {'anton': b'\xc3\x85'}) self.assertEqual(output, 'å')
breadcrumbs = self._breadcrumb(num_units=num_units, modified_name=modified_name) breadcrumbs.reverse() self.assertEqual(bookmarked_breadcrumbs, breadcrumbs)
fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
for student in students[:3]: CertificateWhitelistFactory.create( user=student, course_id=self.course.id, whitelist=True )
name = name.split('.')[0]
if LooseVersion(version) < '0.16.0': tm.assert_series_equal(result, expected, check_categorical=False) else: tm.assert_series_equal(result, expected)
req = django_to_webob_request(request) try: resp = instance.handle(handler, req, suffix)
base_estimator = LinearSVC(random_state=0)
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
for k, prec in enumerate(precisions): prec = _check_precision_matrix(prec, covariance_type)
qs = RasterModel.objects.filter(rast__dwithin=(rast, 40)) self.assertEqual(qs.count(), 1)
self._has_valid_type(key, axis) return self._get_label(key, axis=axis)
if kwargs.get('verbose', False): for c_id in ret: ret[c_id]['Info'] = inspect_container(c_id)
default=_("Blank Advanced Problem")
return LibraryLocator.from_string(self.source_library_id)
return list(self.asobject)
PREPEND_WWW = False
self._update_feature_log_prob() self._update_class_log_prior(class_prior=class_prior) return self
return django.get_version()
os.unlink(output_file)
result = obj.groupby( self.grouper, axis=self.axis).aggregate(how, **kwargs)
ptr_type = c_void_p
from __future__ import unicode_literals
self._session_key = '' self._session_cache = {} self.modified = True
new_class = 'CachedStaticFilesStorage' new_storage = 'django.contrib.staticfiles.storage.' + new_class with self.settings(STATICFILES_STORAGE=new_storage): self.assertEqual(staticfiles_storage.__class__.__name__, new_class)
wait_for( func=lambda _: EC.element_to_be_clickable((By.CSS_SELECTOR, css_selector,)), timeout=timeout, timeout_msg="Timed out waiting for {} to be clickable.".format(css_selector) )
RESO_US = US_RESO RESO_MS = MS_RESO RESO_SEC = S_RESO RESO_MIN = T_RESO RESO_HR = H_RESO RESO_DAY = D_RESO
local_cache.clean_old_jobs()
sw = np.ones(6) clf = GaussianNB().fit(X, y) clf_sw = GaussianNB().fit(X, y, sw)
_config_filename_ = 'master'
accounts = self.service.management().accounts().list().execute() return _get_match(accounts, name, id, **kwargs)
actual_events = self.wait_for_events(event_filter={'event_type': event_type}, number_of_matches=1) self.assert_events_match(event_data, actual_events)
path = key.split('.')
check_results_order()
from __future__ import unicode_literals
poly = fromstr(p.wkt) cs = poly.exterior_ring.coord_seq
raise MultiPartParserError("Invalid content length: %r" % content_length)
result = obj.rename_axis(arg, axis=axis) expected = obj.copy() setattr(expected, axis, list('abcd')) self._compare(result, expected)
learn_rates = [annealed * self.learning_rates[p] for p in self.params]
from __future__ import absolute_import
expected_calls = expected_calls[:1]
raise SkipTest("Test too slow.")
attrs = self._get_data_as_items() if self.name is not None: attrs.append(('name', ibase.default_pprint(self.name))) return attrs
SessionMiddleware().process_request(req) CsrfViewMiddleware().process_view(req, login_view, (), {})
from salt.modules import riak
self.verify_success_on_file_content( 'username,email,cohort\rfoo_username,bar_email,baz_cohort', mock_store_upload, mock_cohort_task )
b.delete()
if session_status[courselike_string] != 4: _save_request_status(request, courselike_string, -abs(session_status[courselike_string]))
return
clusterer = KMeans(n_clusters=n_clusters, random_state=10) cluster_labels = clusterer.fit_predict(X)
with tm.assert_produces_warning(FutureWarning): df.sort_index(by='a')
models_dict.pop(next_model) for model, dep_list in models_dict.iteritems(): if next_model in dep_list: dep_list.remove(next_model)
__salt__['cmd.run'](['attrib', '-R', cache_file], python_shell=False)
rexp = re.compile('(?m)^Conf '
if norm(grad * np.logical_or(grad < 0, H > 0)) < tol: break
mask = label_counts > 1 n_samples = np.sum(mask) label_counts = label_counts[mask] k_all = k_all[mask] c = c[mask] radius = radius[mask]
self.non_lin_name = "rectifier" self.left_slope = left_slope
course_wide_entries = discussion_category_map.pop('entries')
path = urlparse.urlparse(url).path resolver = resolve(path) ccx_key = resolver.kwargs['course_id']
from __future__ import unicode_literals
keystone.region_name: 'RegionOne'
self.assert_requirement_status(grade, due_date, 'satisfied')
from salt.modules import cmdmod from salt.exceptions import CommandExecutionError from salt.log import LOG_LEVELS
self.assertIn(html, html_encapsulated)
task_definition = task_service.NewTask(0)
self.send_future_map = {}
if use_svd: U = svd(Gi, full_matrices=0)[0] else: Ci = np.dot(Gi, Gi.T) U = eigh(Ci)[1][:, ::-1]
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) all_estimators = [GradientBoostingRegressor, GradientBoostingClassifier]
if 'chapters' in textbook: for entry in textbook['chapters']: entry['url'] = remap_static_url(entry['url'], course)
chunksize = 1e4
#html_static_path.append('source/_static')
core.__salt__ = {}
azure.get_blob( storage_conn=storage_conn, container=env, name=blob, local_path=file_name, )
ret = self.run_run_plus(fun='fileserver.update', args=['backend="roots"']) self.assertTrue(ret['fun'])
unfreeze(name, path=path)
return strip_key_collection(retval)
pass
grouped = df.groupby(['name', 'name2']) grouped.apply(lambda x: x.sort_values('value', inplace=True))
exc_info_on_loglevel=logging.DEBUG
if not settings.FEATURES.get('MILESTONES_APP', False): return [] from milestones import api as milestones_api return milestones_api.get_course_content_milestones(course_id, content_id, relationship)
cv_iter = list(cv_iter) scorer = check_scoring(estimator, scoring=scoring)
if items is None: items = Index(sorted(frames.keys())) items = _ensure_index(items)
url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()}) self.assert_request_status_code(200, url)
for _ in xrange(30): response = self.client.post('/admin/login/', post_params) self.assertEquals(response.status_code, 200)
pass
config = cls.current() if not config.enabled: return () return config.disabled_blocks.split()
assert isinstance(reference, UsageKey) if source_course_id == reference.course_key: return reference.map_into_course(dest_course_id) else: return reference
try: return sorted(value, key=_property_resolver(arg)) except (TypeError, VariableDoesNotExist): return ''
try: list_ = super(MultiValueDict, self).__getitem__(key) except KeyError: raise MultiValueDictKeyError(repr(key)) try: return list_[-1] except IndexError: return []
self._check_double_roundtrip(df, tm.assert_frame_equal, compression=False, check_frame_type=True)
if not settings.FEATURES['ADVANCED_SECURITY']: return False min_diff_pw = settings.ADVANCED_SECURITY_CONFIG.get( 'MIN_DIFFERENT_STAFF_PASSWORDS_BEFORE_REUSE', 0 ) return min_diff_pw > 0
with self.store.bulk_operations(course.id, emit_signals=False):
from __future__ import absolute_import
self.create_programs_config()
pred = km.fit_predict(X) assert_array_equal(pred, km.labels_)
import logging
import integration from salt.exceptions import CommandExecutionError
'SHOW_BUMPER_PERIODICITY': 7 * 24 * 3600,
msg = "Item must have length equal to number of levels" with assertRaisesRegexp(ValueError, msg): self.index.insert(0, ('foo2', ))
warn("Setting 'ordered' directly is deprecated, use 'set_ordered'", FutureWarning, stacklevel=2) self.set_ordered(value, inplace=True)
_associate_eip_with_interface(eni_id, associate_public_ip, vm_=vm_)
self.certificates_section.fill_certificate_invalidation_user_name_field(invalid_user) self.certificates_section.click_invalidate_certificate_button() self.certificates_section.wait_for_ajax()
def f(): df = orig.copy() df.iloc[2, :] = ["c", 2]
#latex_logo = 'images/snake_theta2-trans.png' latex_logo = None
draft_only = 'rev-opt-draft-only'
self.assertTrue(np.isnan(result.values[:11]).all()) self.assertFalse(np.isnan(result.values[11:]).any())
if self.is_time_limited: view_html = self._time_limited_student_view(context)
if valid_users: if partner not in valid_users: target_room.message('{0} not authorized to run Salt commands'.format(partner)) return
class Recipe(models.Model): rname = models.CharField(max_length=20, unique=True)
return CoursewareSearchIndexer.do_course_reindex(store, self.course.id)
import salt.utils from salt.exceptions import CommandExecutionError
return True
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
pass
('refunded', 'refunded'),
return super(SplitMongoKVS, self).default(key)
self.assertEqual('/something/', resolve_url('/something/'))
tooltip = { 'type': 'subsection', 'num_students': num_students, 'subsection_num': c_subsection, 'subsection_name': subsection_name }
credit_state = self.service.get_credit_state(self.user.id, self.course.id) self.assertEqual(credit_state['credit_requirement_status'][0]['status'], None)
'CERTIFICATES_INSTRUCTOR_GENERATION': False,
}
if languages: language = languages[0] if language in locales_map: return FakeTranslations(locales_map[language]) return gettext.NullTranslations()
s = Series([Timestamp('20130101') + timedelta(seconds=i * i) for i in range(10)]) td = s.diff()
sys.exit(0)
return 'Software definition {0} not found'.format(name)
return capi.get_ds_ysize(self._ptr)
pass
7: np.dtype('int64'), 'category': 'category' }
y_true, y_pred, _ = make_prediction(binary=False)
sh("coverage combine --rcfile={}".format(rcfile))
return generic.NDFrame._update_inplace(self, result, **kwargs)
PLATFORM_CLASSES = {IOS.NAME: IOS, Android.NAME: Android}
return { key: value[0] if len(value) == 1 else value for key, value in urlparse.parse_qs(query).items() }
test_invalid_token(self.tokens[self.user][:-4], "aes")
self.assertEqual(context[context_key], 'test latin1 Ó é ñ'.decode('utf8'))
extra_context = {"platform_name": microsite.get_value('platform_name', settings.PLATFORM_NAME)}
y_true *= 2 y_pred *= 2 loss = log_loss(y_true, y_pred, normalize=False) assert_almost_equal(loss, 0.6904911 * 6, decimal=6)
return _AssertTemplateNotUsedContext(self, context_mgr_template)
sequential = self.store.create_child( self.user_id, chapter.location, 'sequential', block_id='subsection_one' ) self.store.publish(sequential.location, self.user_id)
html = descriptor.get_html() rendered_content = descriptor.render(STUDIO_VIEW).content self.assertEqual(html, rendered_content)
alice, created = dive.authors.get_or_create(name='Alice') self.assertEqual(alice._state.db, 'default')
return list(key)
while True: data = result.fetchmany(chunksize) if not data: break else: yield _wrap_result(data, columns, index_col=index_col, coerce_float=coerce_float, parse_dates=parse_dates)
return word.strip().lower()
self._block_data_map = defaultdict(_BlockData)
import integration from salt.config import cloud_providers_config
if '@' not in snapshot: ret['result'] = False ret['comment'] = 'invalid snapshot name: {0}'.format(snapshot)
self.choices = list(choices)
assert np.allclose(dt.mean(dtype='float64'), 0) assert np.allclose(dt.std(dtype='float64'), 1.)
Season.objects.create(year=2012, gt=None) self.assertQuerysetEqual(Season.objects.filter(gt__regex=r'^$'), [])
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM')
verification_good_until = self._verification_valid_until(request.user)
from salt.ext.six import string_types import salt.utils import salt.ext.six as six
pass
hashed_files[self.hash_key(name)] = hashed_name yield name, hashed_name, processed
import os import logging
from salttesting import skipIf, TestCase from salttesting.helpers import destructiveTest, ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, call, mock_open, patch)
return self._validation_paragraph('warning').present
from __future__ import absolute_import
res = df.iloc[lambda x: [1, 3]] tm.assert_frame_equal(res, df.iloc[[1, 3]])
qs = self.root_queryset for filter_spec in self.filter_specs: new_qs = filter_spec.queryset(request, qs) if new_qs is not None: qs = new_qs
state_run = self.run_function('state.sls', mods='requisites.onchanges_simple')
else: (indexer, missing) = labels.get_indexer_non_unique(objarr) check = indexer
super(AboutWithCappedEnrollmentsTestCase, self).setUp()
from salt.utils import warn_until, kwargs_warn_until from salt.version import SaltStackVersion
return self.save_asset_metadata_list([asset_metadata, ], user_id, import_only)
fd = None if body is not None: h['content-length'] = '{0}'.format(len(body)) fd = StringIO(body)
self._set_group_access({0: [1]}) expected[0]["groups"][1]["selected"] = True self.assertEqual(self._get_partition_info(), expected)
ExampleCertificateSet.objects.all().delete()
s2 = s.copy()
text_document = self._white_spaces.sub(" ", text_document)
USE_THOUSAND_SEPARATOR = False
buf.getvalue()
return False
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
result = SparseSeries(sparse, name='x') tm.assert_sp_series_equal(result, sparse, check_names=False) self.assertEqual(result.name, 'x')
self.assertEquals( preview.latex_preview('f(3)', functions=['f']), r'\text{f}(3)' )
mp = OGRGeometry('MultiPolygon') pnt = OGRGeometry('POINT(5 23)') with self.assertRaises(GDALException): mp.add(pnt)
resp = self.create_xblock(parent_usage_key=self.chapter_usage_key, category='sequential') self.seq_usage_key = self.response_usage_key(resp)
backward_reduce_ndarray = ArrayMemmapReducer( None, pool_folder, mmap_mode, verbose) backward_reducers[np.ndarray] = backward_reduce_ndarray backward_reducers[np.memmap] = reduce_memmap
from __future__ import absolute_import import os import sys import copy import site import fnmatch import logging import datetime import traceback import re
import salt.pillar.git_pillar import salt.utils.gitfs from salt.exceptions import SaltRunnerError from salt.ext import six
from __future__ import absolute_import, print_function, generators import os import copy import glob import time import signal import logging import traceback import multiprocessing import sys from itertools import groupby
result = df.set_index(['a', 'x']) repr(result)
xblock, fields = (block, block.fields)
if 'topo_space' not in self.__dict__: self._update_topo_space()
response = organizations_helpers.get_organization_by_short_name(self.organization['short_name']) self.assertIsNone(response)
self.X_memmap_info = None self.y_memmap_info = None
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
if minion.schedule.loop_interval < loop_interval: loop_interval = minion.schedule.loop_interval log.debug( 'Overriding loop_interval because of scheduled jobs.' )
def get_queryset(self, request): return super(ShortMessageAdmin, self).get_queryset(request).defer('timestamp')
pass
return Response(status=503, headers={'Retry-After': '120'})
if swapped and swapped == to_string: return model._meta.swappable if model._meta.swappable and model._meta.label == to_string: return model._meta.swappable
elif isinstance(file, FieldFile) and not hasattr(file, 'field'): file.instance = instance file.field = self.field file.storage = self.field.storage
from salt.modules import bridge
precision = [1.] recall = [0.] tp = 0 fp = 0 fn = len(pos_scores) count = fn
return type( str('RelatedObjectDoesNotExist'), (self.field.remote_field.model.DoesNotExist, AttributeError), {} )
df = orig.copy() df.iloc[2:4, :] = [["b", 2], ["b", 2]] tm.assert_frame_equal(df, exp_multi_row)
result = self.frame.ix[:4] expected = self.frame[:4] assert_frame_equal(result, expected)
return _can_enroll_courselike(user, courselike)
return self.q(css=MODAL_SELECTOR).present
context['document_banner'] = _("{platform_name} acknowledges the following student accomplishment").format( platform_name=platform_name )
start_index = expression.end_index
for honor_code in ["", "false", "not_boolean"]: params["honor_code"] = honor_code assert_honor_code_error("To enroll, you must follow the honor code.")
file_name = '{artifact_id}-{version}{classifier}.{packaging}'.format( artifact_id=artifact_id, version=version, packaging=packaging, classifier=__get_classifier_url(classifier))
raise nose.SkipTest('unreliable test, receive partial components back for nasdaq_100')
UserPartition.scheme_extensions = None
self.wait_for_field('image') default_links = self.q(css='.image-frame').attrs('src') return 'profiles/default' in default_links[0] if default_links else False
self._fit(X, compute_sources=False) return self
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
p = subprocess.Popen([c] + args, cwd=cwd, stdout=subprocess.PIPE, stderr=(subprocess.PIPE if hide_stderr else None)) break
warnings.simplefilter('error') try: df = DataFrame(np.random.randn(100, 4)) df.plot(subplots=True, layout=(3, 2))
self.update_masquerade(role='student') self.verify_staff_debug_present(False)
update_course_structure(unicode(self.course.id))
if self._selection is None: slice_axis = self._selected_obj.items else: slice_axis = self._selection_list slicer = lambda x: self._selected_obj[x]
self.assertFalse(payload.get('success')) self.assertIn('incorrect', payload.get('value'))
if getattr(other, 'tz', None) is not None: other = other.tz_localize(None).asi8 else: other = other.asi8
import salt.utils from salt.exceptions import SaltInvocationError
def item_title(self): return "Not in a template"
set_input_value(self, self._bounded_selector(self.NAME_INPUT_SELECTOR), new_name)
if driver: data['driver'] = driver
plt.scatter(X[:, 0], X[:, 1], c=targets_train, cmap=plt.cm.Paired)
self.assertFalse(re.match(r"memory usage: [^+]+\+", res[-1]))
return {'stdout': _cmd_run_values[' '.join(key)], 'stderr': '', 'retcode': 0, 'pid': 12345}
clean_conv = {}
return [os.path.join(app.path, 'locale') for app in app_configs]
raise
def __init__(self): self.cmds = Mockcmds()
pass
s = s.apply(str) s[2] = 'nat' result = to_datetime(s, format='%Y%m%d') assert_series_equal(result, expected)
list_item = nodes.list_item() list_item['classes'] = ['lit-item']
self.assertNotIn(self.module_key, self.loader)
def f(): s[l] = 0
if hasattr(self, 'usesTime') and self.usesTime(): record.asctime = self.formatTime(record, self.datefmt)
for section in self.sections(): if section.is_collapsed: section.expand_subsection() for subsection in section.subsections(): if subsection.is_collapsed: subsection.expand_subsection()
covars_tied = np.array([x for x in covars_diag]).mean(axis=0) precs_tied = np.diag(np.sqrt(1. / covars_tied))
f.__name__ = name f.__qualname__ = '{klass}.{name}'.format( klass=cls.__name__, name=name) f.__module__ = cls.__module__ return f
import integration
data = {'a': (1, 2, 3), 'b': (4, 5, 6)}
if not filter_tabs: filtered_list.remove("tabs")
if hasattr(self, 'scale_'): del self.scale_ del self.n_samples_seen_ del self.mean_ del self.var_
handler = self.static_handler(_MediaFilesHandler(WSGIHandler()))
summary += line.rstrip() + space2 + '...' line = space2
assert_greater_equal(w[0], 0)
self.wait_for_first_certificate_button() self.q(css=self.certficate_css + " .new-button").first.click()
with self.assertRaises(auth_models.User.DoesNotExist): self.get_user_by_email(strategy, email)
self.assertFalse(chemical_equations_equal('H2 + O2 -> H2O2', 'O2 + H2 -> 2H2O2'))
faces_centered -= faces_centered.mean(axis=1).reshape(n_samples, -1)
self.chapter = ItemFactory.create( parent_location=self.course.location, category='chapter', display_name='untitled chapter' )
def func1(): raise ValueError("[.*x+]y?")
boston = load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
user_list[0].course_groups.add(non_cohort) user_list[0].course_groups.clear() self.assertFalse(mock_tracker.emit.called)
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
from __future__ import unicode_literals
INVOICE_CORP_ADDRESS = ENV_TOKENS.get('INVOICE_CORP_ADDRESS', INVOICE_CORP_ADDRESS) INVOICE_PAYMENT_INSTRUCTIONS = ENV_TOKENS.get('INVOICE_PAYMENT_INSTRUCTIONS', INVOICE_PAYMENT_INSTRUCTIONS)
raise NotImplementedError
unit = self.store.create_child(self.user_id, subsection.location, 'vertical') signal_handler.send.assert_not_called()
creq_in = context.socket(zmq.REP) creq_in.setsockopt(zmq.LINGER, 100) creq_in.bind('ipc://' + self.cache_sock)
mask = isnull(val) if dropna: inc[idx] = 1 inc[mask] = 0 else: inc[mask & np.r_[False, mask[:-1]]] = 0 inc[idx] = 1
salt '*' vsphere.get_service_running my.esxi.host root bad-password 'ssh'
my_memcached_config: memcached.host: 127.0.0.1 memcached.port: 11211
from __future__ import absolute_import import os
if has_expected: break
week = week_of_months[0] + 1 wd = _weekday_rule_aliases[weekdays[0]]
result = s.reorder_levels(['L0', 'L1', 'L2']) assert_series_equal(s, result)
clf_unconstrained = LassoCV(n_alphas=3, eps=1e-1, max_iter=max_iter, cv=2, n_jobs=1) clf_unconstrained.fit(X, y) assert_true(min(clf_unconstrained.coef_) < 0)
model = WriterProfile fields = '__all__'
if self.is_multi_index: filt = filt.union(Index(self.levels))
func = 'modjk.{0}'.format(cmd) args = [worker, lbn, profile] response = __salt__['publish.publish'](target, func, args, expr_form)
from salt import exceptions
result = self.cat.describe() self.assertEqual(len(result.columns), 1)
from __future__ import unicode_literals
if isinstance(context, Context): return t.render(context) else: return t.render(Context(context))
for a in self._AXIS_ORDERS: if not len(self._get_axis(a)): return self
__virtualname__ = 'grub'
modes = CourseMode.modes_for_course(self.course_key) self.assertEqual([CourseMode.DEFAULT_MODE], modes)
key = RSA.importKey(rsa_pub_key_str) cipher = PKCS1_OAEP.new(key) encrypted_data = cipher.encrypt(data) return encrypted_data
df = DataFrame({'aBBa': [1, 2], 'BBaBB': [1, 2], 'aCCa': [1, 2], 'aCCaBB': [1, 2]})
course = CourseFactory.create(mobile_available=True, default_store=modulestore_type) course_overview_1 = CourseOverview.get_from_id(course.id) self.assertTrue(course_overview_1.mobile_available)
self.extra = extra
mi = MultiIndex.from_tuples([[1, 1, 3], [1, 1, 1]], names=list('ABC')) df = DataFrame([[1, 2], [3, 4]], mi)
try: dive.authors.add(marty) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
self.assertEqual(form.instance.price, Decimal('6.00')) self.assertIsNone(form.instance.quantity) self.assertIsNone(form.instance.pk)
offsets = [pd.offsets.Hour(2), timedelta(hours=2), np.timedelta64(2, 'h'), Timedelta(hours=2)]
def _check_cast(df, v): self.assertEqual( list(set([s.dtype.name for _, s in compat.iteritems(df)]))[0], v)
self.assertEqual(seed, module.seed)
super(LineString, self).__init__(self._init_func(cs.ptr), srid=srid)
self.course_outline.visit()
redismod.__grains__ = {} redismod.__salt__ = {} redismod.__context__ = {} redismod.__opts__ = {}
__salt__['macpackage.unmount'](mount_point)
self.metadata = [ c.name for c in self.values_axes if c.metadata is not None]
return key and len(key) >= 8
self.update_masquerade(role='student') self.verify_show_answer_present(False)
if enrollment_mode is None: self.assertFalse(CourseEnrollment.is_enrolled(self.user, self.course.id))
if self.filter is not None: f = list(self.filter) f[1] = self.generate_filter_op(invert=True) self.filter = tuple(f) return self
param_grid = [param_grid]
shutil.rmtree(path) os.makedirs(path)
assert isinstance(location, (NoneType, UsageKey)) if location is None: return None return super(UsageKeyField, self).to_mongo(location.to_deprecated_string())
delete = self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME)) ret_str = ' shutting-down'
with self.assertRaises(GEOSException): GEOSGeometry(six.memoryview(b'0'))
self.assertIn('Welcome to edX.', self.video.captions_text)
tm.assert_frame_equal(lexsorted_df, not_lexsorted_df)
from __future__ import absolute_import import random import string from salt.ext.six.moves import range
__virtualname__ = 'win_iis'
with tm.assertRaises(UndefinedVariableError): df.query('df > 0', engine=self.engine, parser=self.parser)
new_block_info = copy.deepcopy(source_block_info) existing_block_info = dest_structure['blocks'].get(new_block_key, BlockData()) new_block_info.defaults = new_block_info.fields
self.q(css='button.signatory-panel-save').click() self.mode = 'details' self.wait_for_ajax() self.wait_for_signatory_detail_view()
X_composite = mlp_composite.get_input_space().make_theano_batch() X_first_part = mlp_first_part.get_input_space().make_theano_batch() X_second_part = mlp_second_part.get_input_space().make_theano_batch()
from salt.states import grafana_datasource
'log_datefmt_logfile': str,
sp_indices = sp_indices[1:] dummy_cols = dummy_cols[1:]
def __init__(self, message, error_list): super(SearchIndexingError, self).__init__(message) self.error_list = error_list
raise ValueError('can only convert an array of size 1 to a ' 'Python scalar')
from __future__ import absolute_import
stamp = long(1337299200000000000)
return self.page.q(css=self._bounded_selector(selector))
self.assertIn("Password Reset Email Sent", self.reset_password_page.get_success_message())
def f(): result[8] = 0. self.assertRaises(com.SettingWithCopyError, f) self.assertTrue((df[8] == 0).all())
ret['hash_type'] = __opts__['hash_type']
ret = {} for name in names: ret[name] = ''
if self.hasnans: if convert: result = result.astype(convert) if fill_value is None: fill_value = np.nan result[self._isnan] = fill_value return result
if self.closed == 'right': binner = binner[1:] else: binner = binner[:-1] return binner
expected_redirect = reverse( 'instructor_dashboard', kwargs={'course_id': unicode(self.course.id)} ) expected_redirect += '#view-certificates' self.assertRedirects(response, expected_redirect)
self.get_session_storage(storage)._get = None
X = check_array(X, accept_sparse=['csr', 'csc'])
self.assertIs(r1.article_set.__class__, r2.article_set.__class__)
ForestClassifier = FOREST_CLASSIFIERS[name] _y = np.vstack((y, np.array(y) * 2)).T
self.assertEqual(self.selenium.find_element_by_id('id_main_band').get_attribute('value'), '')
VISIBLE_CONTENT = [ ['class=&#34;problems-wrapper'], ['Some HTML for group 1'] ]
for parent_ref in parents: parent_block = modulestore().get_item(block_map[parent_ref].location) parent_block.children.append(block_key) block_map[parent_ref] = update_block(parent_block)
assert_equal(v_measure_score(true_labels, labels), 1.0) assert_greater(inertia, 0.0)
if len(self) == 0: return None return self.index[self.count(1) > 0][0]
perf_test = True
if not (self.n_jobs == 1 or self.n_jobs is None): path_params['copy_X'] = False
tmp_dir = mkdtemp() try: course_dir = export_course_to_directory(course_key, tmp_dir) compress_directory(course_dir, filename) finally: shutil.rmtree(tmp_dir, ignore_errors=True)
return self.q(css='input[name=calculate-grades-csv]')
while True: emptydirs = _list_emptydirs(mod_dir) if not emptydirs: break for emptydir in emptydirs: touched = True shutil.rmtree(emptydir, ignore_errors=True)
with self.assertRaises(LookupError): LayerMapping(City, city_shp, city_mapping, encoding='foobar')
config.add_subpackage('linear_model') config.add_subpackage('utils')
log = logging.getLogger(__name__)
self.assertEqual(res.context['next_year'], None) self.assertEqual(res.context['previous_year'], datetime.date(2006, 1, 1))
total_amount = PaidCourseRegistration.get_total_amount_of_purchased_item(self.course_key) self.assertEqual(total_amount, 36)
self.client = self.client_class() mail.outbox = []
import salt.utils
params = self._signed_callback_params(self.order.id, self.COST, "abcd") result = process_postpay_callback(params)
cluster_ref = salt.utils.vmware.get_mor_by_property(_get_si(), vim.ClusterComputeResource, cluster_name) if cluster_ref: return {cluster_name: 'cluster already exists'}
for key in locations: self.assertFalse(self._has_changes(locations[key]))
if host_ref is None: host_ref = search_index.FindByIp(ip=host, vmSearch=False)
path = "" self.assertRaises(IOError, read_hdf, path, 'df')
authentication_classes = (OAuth2Authentication, SessionAuthentication) permission_classes = (permissions.IsAuthenticated,) serializer_class = CourseTeamSerializer
distances = np.sqrt(2. * distances) return children, n_components, n_leaves, parent, distances
log = logging.getLogger(__name__)
X = [[0], [0]] Y = [[1], [2]] D = paired_euclidean_distances(X, Y) assert_array_almost_equal(D, [1., 2.])
result = rast.bands[0].data() if numpy: result = result.flatten().tolist()
correct_map = problem.grade_answers({'1_2_1': 'choice_0'}) self.assertAlmostEqual(correct_map.get_npoints('1_2_1'), 1)
self.course_fixture._update_xblock(component.locator, {'metadata': metadata}) self.browser.refresh() self.container_page.wait_for_page()
X = sp.csr_matrix(X, dtype=np.float64, copy=copy)
data_y = data_y[MNISTPlus.idx[which_set]]
return ( 'change_date', 'changed_by', 'enabled', 'entity_id', 'org_info_str', 'key_summary', )
cmd = 'Get-PSRepository "{0}"'.format(name) no_ret = _pshell(cmd) return name not in list_modules()
return os.sep.join(folders_list_in_path)
return RequestFactory( SERVER_NAME=parsed_url.hostname, SERVER_PORT=parsed_url.port or 80, ).get("/")
ds_input['nr_of_bands'] = len(self.bands)
z *= 2
if mode == 'connectivity': A_data = np.ones(n_samples1 * n_neighbors) A_ind = self.kneighbors(X, n_neighbors, return_distance=False)
if response is None:
columns = [col[astype(mask, bool, copy=False)] for col, mask in zip(columns_all, mask_valids)]
salt 'global_zone' pkg.install sources='[{"SMClgcc346": "/var/spool/pkg/gcc-3.4.6-sol10-sparc-local.pkg"}]' current_zone_only=True
return len(self.object_list)
details = pipeline_kwargs.get('details')
optimizer = MigrationOptimizer() return optimizer.optimize(operations), optimizer._iterations
return do_translate(message, 'gettext')
self._action_btn_for_xblock_id(xblock_id, "duplicate").click() wait_for_notification(self) self.wait_for_ajax()
rel_opts = self.remote_field.model._meta rel_is_hidden = self.remote_field.is_hidden()
path = urlparse.urlparse(self.path).path if path.endswith('/'): return path[:-1] else: return path
log.exception( u'Unable to emit {event} event for user {user} and order {order}'.format( event=event_name, user=self.user.id, order=self.id) )
service = _get_service(name) path = service['file_path']
LOGGER.debug('Starting service on port {0}'.format(self.port))
self._make_eligible() self._purchase_credit() self._initiate_request()
y = np.array([[y_i] for y_i in y]) assert min(y) == 0 assert max(y) == 2
while n_features > 2: sfm.threshold += 0.1 X_transform = sfm.transform(X) n_features = X_transform.shape[1]
if self._fields is not None: return True return check_rel_lookup_compatibility(self.model, opts, field)
TEST_DATA = None
self.assertRaises(Exception, func, p1, tp)
class BandAdmin(ModelAdmin): fields = ['name']
self.assertEqual(correct_map.get_overall_message(), "Overall message")
'statici18n',
uri = resolve_target(domain, info) if not uri: continue
self.settings_page.wait_for_ajax() self.settings_page.wait_for_jquery_value('input#course-name:text', 'test_run')
from __future__ import absolute_import try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False import copy import logging
puppet.__salt__ = {}
if com.is_bool_dtype(result): return result return Index(result)
from django.core.wsgi import get_wsgi_application application = get_wsgi_application()
super(AdaBoostRegressor, self)._validate_estimator( default=DecisionTreeRegressor(max_depth=3))
from __future__ import absolute_import from __future__ import unicode_literals import sys import logging
def __call__(self, result=None): with self.assertNumQueries(0): super(SkippingExtraTests, self).__call__(result)
target_org = org or microsite_org courses = CourseOverview.get_all_courses(org=target_org, filter_=filter_)
AA = 1. / np.sqrt(np.sum(least_squares * sign_active[:n_active]))
self.wait_for_add_certificate_button() self.q(css=self.certficate_css + " .action-add").first.click()
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
if not run_diff_quality( violations_type="jshint", prefix=pythonpath_prefix, reports=jshint_reports, percentage_string=percentage_string, branch_string=compare_branch_string, dquality_dir=dquality_dir ): diff_quality_percentage_pass = False
if 'form' not in kwargs: kwargs['form'] = self.get_form() return super(FormMixin, self).get_context_data(**kwargs)
module = CapaFactory.create(max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(module.closed())
self.assert_series_equal(with_format, no_infer) self.assert_series_equal(no_infer, yes_infer)
sql, _ = compiler.compile(value) return placeholder % sql
DEFAULT_USER_MESSAGE = ugettext_noop(u'An error has occurred. Please try again.')
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
axes = self.input_space.axes assert len(axes) == 4
self.check_ordering_of_field_choices([self.b2, self.b1])
result = df.drop_duplicates('AAA') expected = df.iloc[[0, 1, 2, 6]] tm.assert_frame_equal(result, expected)
import contextlib import functools import glob import logging import os import re import tempfile
self.assertEqual( HardbackBook.objects.aggregate(n_pages=Sum('book_ptr__pages')), {'n_pages': 2078} )
try: from yaml import CSafeLoader as SafeLoader from yaml import CSafeDumper as SafeDumper except ImportError: from yaml import SafeLoader, SafeDumper
if needs_i8_conversion(self) and needs_i8_conversion(other): return self._evaluate_compare(other, op)
if not db_exists(name, **connection_args): log.info('DB \'{0}\' does not exist'.format(name)) return False
dspace.np_validate(batch) return batch
loader = self.engine.template_loaders[0] source, name = loader.load_template('index.html') self.assertEqual(template.origin.template_name, 'index.html')
file1 = open(filename) r = StreamingHttpResponse(file1) self.assertFalse(file1.closed) r.close() self.assertTrue(file1.closed)
self.label_suffix = label_suffix if label_suffix is not None else _(':') self.empty_permitted = empty_permitted
new_data = self._data.add_prefix(prefix) return self._constructor(new_data).__finalize__(self)
repr(df)
self._find_within(".forum-thread-expand").first.click() EmptyPromise( lambda: bool(self.get_response_total_text()), "Thread expanded" ).fulfill()
response = super(Client, self).post(path, data=data, content_type=content_type, secure=secure, **extra) if follow: response = self._handle_redirects(response, **extra) return response
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
u'\xa0': u' ', u'\u2013': u'-',
from __future__ import absolute_import try: import grp except ImportError: pass
return path.startswith(self.base_url[2]) and not self.base_url[1]
allow_access(course_ccx, instructor, 'instructor')
return obj
return ipsecpolicy
from __future__ import absolute_import
system = -4
lxc_init_interface['clone_from'] = _cloud_get(clone_from, None) if lxc_init_interface['clone_from'] is not None: break
return DebugNode()
self.assertChildNodeContent(chan, { 'title': 'My blog', 'link': 'http://example.com/blog/', })
a.gender = '' self.assertEqual(a.get_gender_display(), '')
return self.q(css=self.PAGINATION_HEADER_TEXT_CSS).text[0]
label = _(u"I agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
return bool(capi.isgeographic(self.ptr))
time.sleep(0.2)
ret.update(set( [x for x in _get_sysv_services() if not _sysv_enabled(x)] )) return sorted(ret)
import os import logging import json
return HttpResponse(json.dumps(request.META))
child.display_name = 'Changed Display Name' self.store.update_item(child, user_id=self.user_id)
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
def __init__(self, callable_setting): self._wrapped = callable_setting def __repr__(self): return repr(self._wrapped)
if self.axis == 0: new_axes[0], new_axes[1] = new_axes[1], self.grouper.result_index else: new_axes[self.axis] = self.grouper.result_index
if act_func is not None: activations[i] = act_func(activations[i])
try: import pwd except ImportError: pass
num_bytes_read = 0 num_post_keys = 0 read_size = None
desired_upstream = None remote_rev_type = 'sha1'
def f(): df = orig.copy() df.ix["j", 0] = "c"
self._assert_about(AboutTemplateView.as_view()(self.rf.get('/about/')))
comb = self.frame.combine_first(self.empty) assert_frame_equal(comb, self.frame)
self._auto_publish_no_children(item.location, item.location.category, user_id, **kwargs) self._auto_publish_no_children(parent_usage_key, item.location.category, user_id, **kwargs) return item
prefix = self.lti_consumer_key + ":" return self.backend_name == social_auth.provider and social_auth.uid.startswith(prefix)
return self.q(css='div.csh_hint_text').text
self.fed.append(data)
('cancelled', 'cancelled')
def __init__(self, course_key): detail = _('[{course_key}] is not a valid course key.').format(course_key=course_key) super(InvalidCourseKey, self).__init__(detail)
{ u'description': 'Test description', u'version': CERTIFICATE_SCHEMA_VERSION },
context = {'payment_support_email': microsite.get_value('payment_support_email', settings.PAYMENT_SUPPORT_EMAIL)} return render_to_response("commerce/checkout_error.html", context)
return BACKEND.has_override_value(val_name)
help=_("What format this module is in (used for deciding which " "grader to apply, and what to show in the TOC)"), scope=Scope.settings,
if vm_['profile'] and config.is_profile_configured( __opts__, __active_provider_name__ or 'dimensiondata', vm_['profile']) is False: return False
cache.clear()
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
LETTUCE_SELENIUM_CLIENT = os.environ.get('LETTUCE_SELENIUM_CLIENT', 'local')
embargoed = models.BooleanField(default=False)
result = ols(y=y, x=x, window_type='rolling', window=10) print(result.beta)
est = TreeEstimator() y2 = y[:-1] assert_raises(ValueError, est.fit, X, y2)
self.extra_context = extra_context or {} if name: self.extra_context[name] = var
self.assertEqual(len(mail.outbox), 1) self.assertEqual("Verification photos received", mail.outbox[0].subject)
response = self.client.get('/jsi18n_admin/?language=de') self.assertContains(response, '\\x04')
return related.related_model._base_manager.using(self.using).filter( **{"%s__in" % related.field.name: objs} )
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
delta = 2000 - year off = 6 * (delta // 100 + delta // 400) year = year + off
if last_touch: time_since_last_activity = utc_now - last_touch
try: section_content = about_information.get_value(**about_context)
call_task('pavelib.assets.watch_assets', options={'background': True})
supports_foreign_keys = True
return False
self.pipe = None
grouping_tag = grouping_tags[test_conditions['input_type']] self.assert_no_xpath(xml, "//{0}[@class='choicetextgroup_incorrect']".format(grouping_tag), self.context)
left_indexer = left_indexer[counts[0]:] new_labels = [lab[left_indexer] for lab in new_labels]
sql, params = field.get_placeholder(val, self, self.connection), [val]
X -= self.x_mean_ X /= self.x_std_ Ypred = np.dot(X, self.coef_) return Ypred + self.y_mean_
self.last_time = time.time()
import salt.utils.http
result = func(idx) exp = Index(func(idx.values), name=idx.name) self.assert_index_equal(result, exp) self.assertIsInstance(result, pd.Float64Index)
settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] = [ path for path in settings.DEFAULT_TEMPLATE_ENGINE['DIRS'] if path != settings.MICROSITE_ROOT_DIR ]
exc_info_on_loglevel=logging.DEBUG
if __opts__['test']: ret['result'] = None ret['comment'] = 'Group {0} set to be added'.format(name) return ret
dog_stats_api.start(**options)
raise TerminalException('Password authentication failed')
iterator = super(HDF5DatasetDeprecated, self).iterator(*args, **kwargs) iterator.__class__ = HDF5DatasetIterator return iterator
salt -L 'kevin,stewart,dave' system.reboot && \\ salt-run state.event 'salt/minion/*/start' count=3 quiet=True && \\ salt -L 'kevin,stewart,dave' state.highstate
self.assertRaises(Exception, self.panel4d.minor_xs, 'E')
settings.ALLOWED_HOSTS = ["the_valid_website.com"] with self.assertRaises(SuspiciousOperation): safe_get_host(request)
plt.subplot(2, 2, i + 1) plt.subplots_adjust(wspace=0.4, hspace=0.4)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
import collections from datetime import datetime, timedelta import re
self.teardown()
OGRException = GDALException
self._global_clustering() return self
expected_info = [ 'created', 'sent_to', 'email', 'number_sent', 'requester', ] return {info: None for info in expected_info}
context_dict = self.response_post_params(request.user) return render_to_response("verify_student/test/fake_softwaresecure_response.html", context_dict)
clf = LinearDiscriminantAnalysis(priors=[0.5, 0.5]) clf.fit(X, y)
with self.assertRaises(ValueError): mock_strftime_localized(test_datetime, 'BAD_FORMAT_SPECIFIER')
add_message(request, constants.DEBUG, message, extra_tags=extra_tags, fail_silently=fail_silently)
FEATURES['AUTOMATIC_VERIFY_STUDENT_IDENTITY_FOR_TESTING'] = True
tmp *= 1 - damping R *= damping R += tmp
module = CapaFactory.create(attempts=1)
AccessTestData(partition_groups={1: 1, 2: 2}, xblock_access={1: [3]}, merged_parents_list=[{1: {1}}]), AccessTestData(partition_groups={1: 1, 2: 2}, xblock_access={1: [2]}, merged_parents_list=[{1: {1}}]),
for a in self.axes: a.validate_and_set(self, append)
self.assertEqual(self.author1.books.count(), 2)
return hasattr(self, '_has_answerpool')
self.download_collection = win32com.client.Dispatch('Microsoft.Update.UpdateColl')
plt.scatter(diabetes_X_test, diabetes_y_test, color='black') plt.plot(diabetes_X_test, regr.predict(diabetes_X_test), color='blue', linewidth=3)
del apps._pending_operations[('migrations', 'tribble')]
import salt.ext.six as six
from __future__ import print_function import os import collections import hashlib import time import logging import random import getpass from salt.ext.six.moves import input
for num in np.linspace(1., 2., num=500): text = 'a\n{0:.25}'.format(num)
return self.rescore_submission_button.click()
survey = None exists = SurveyForm.objects.filter(name=name).exists() if exists: survey = SurveyForm.objects.get(name=name) elif throw_if_not_found: raise SurveyFormNotFound() return survey
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:05")
sys.stdout.write("{0}\ndeploy\n".format(OPTIONS.delimiter)) sys.exit(EX_THIN_DEPLOY)
pw = ParzenWindows(MNIST(which_set='test').X, .20) print(pw.get_ll(history))
n_samples = self.X.shape[0] D = self.D ij = self.ij F = self.F
_ = lambda text: text
if hasattr(f, 'readline'): self._make_reader(f) else: self.data = f
course.set_grading_policy(course.grading_policy) grade_summary = course.grader.grade(totaled_scores, generate_random_scores=settings.GENERATE_PROFILE_SCORES)
self.seq_1_vert_1_handle = 2 self.seq_1_vert_2_handle = 3 self.chap_1_seq_2_handle = 4
'milestones',
retc = ret.copy()
if isnull(value): value = tslib.iNaT
process_config_dir._mixin_prio_ = ConfigDirMixIn._mixin_prio_
session = self.client.session session["donation_for_course"] = { unicode(course_id): amount } session.save()
owner['user'] = 'SYSTEM' owner['user_domain'] = 'NT AUTHORITY'
self.assertEqual(response.status_code, 404)
if lti_key in lti_params and lti_params[lti_key]: details[details_key] = lti_params[lti_key]
try: return index.get_level_values(index.names[i]) except KeyError: return index.get_level_values(i)
number_suffix = MatchFirst(Literal(k) for k in SUFFIXES.keys())
class metaclass(meta):
try: course = get_course_with_access(request.user, 'load', course_key, check_if_enrolled=check_if_enrolled) except UserNotEnrolled: raise Http404("Course not found.")
>>> puts = aapl.get_put_data()
self._install_masquerade(self.course_staff) self.assertEqual( 'student', access.get_user_role(self.course_staff, self.course_key) )
salt.log.setup.shutdown_multiprocessing_logging()
__context__[contextkey] = 'docker-exec'
if not self.test_spec: test_spec = self.test_dir else: test_spec = self.test_dir / self.test_spec
return self.conditional.get_params()
self.cmap.set_overall_message("Test message")
from __future__ import unicode_literals
return reverse( 'verify_student_incourse_reverify', kwargs={ "course_id": unicode(course_key), "usage_id": checkpoint_location } )
providers_string = _("{first_provider} and {second_provider}").format( first_provider=providers[0], second_provider=providers[1] )
answers = List(help="Poll answers from xml", scope=Scope.content, default=[])
clf_invalid_method = CalibratedClassifierCV(clf, method="foo") assert_raises(ValueError, clf_invalid_method.fit, X_train, y_train)
with self.assertRaises(AttributeError): Book.objects
return { 'is_cohorted': True, 'always_cohort_inline_discussions': True, 'cohorted_inline_discussions': [], 'cohorted_course_wide_discussions': [], 'id': 1 }
self.assertContains(response, msg) self.assertEqual(Subscriber.objects.count(), 2)
def __init__(self): self.val_record = []
return HttpResponseBadRequest('Requested page must be numeric')
cov = EmpiricalCovariance(assume_centered=True) cov.fit(X) assert_array_equal(cov.location_, np.zeros(X.shape[1]))
self.locations = self._build_kml_sources(locations)
s = Series([1], dtype='float32') result = s._convert(datetime=True, coerce=True) assert_series_equal(result, s)
ndim_5 = np.ones(self.frame.shape + (3, 4, 5)) with assertRaisesRegexp(ValueError, 'shape'): f(self.frame, ndim_5)
httpretty.register_uri(httpretty.POST, urljoin(ZENDESK_URL, '/api/v2/tickets.json'), status=status, body='{}', content_type=JSON)
if request is not None and hasattr(request, 'META'): return get_ip(request) else: return default
from salt.exceptions import SaltInvocationError import salt.utils
updates_by_type = {} for asset_type, assets in assets_by_type.iteritems(): updates_by_type[self._make_mongo_asset_key(asset_type)] = assets.as_list()
self.assertEqual(user_info["version"], settings.EDXMKTG_USER_INFO_COOKIE_VERSION)
from scipy.sparse import csc_matrix
self.creation_counter = BaseManager.creation_counter BaseManager.creation_counter += 1
self.tracker = DjangoTracker() tracker.register_tracker(self.tracker)
ext = kwargs.pop('ext', 'shp') self.ds = get_ds_file(name, ext) super(TestDS, self).__init__(**kwargs)
pass
self.assertAlmostEqual(c1[0] + xfac, c2[0], 5) self.assertAlmostEqual(c1[1] + yfac, c2[1], 5)
update = True
for item in mask.split(','): if item not in _MASK_TYPES: return 'Invalid mask type: {0}' . format(item)
self.assertEqual(len(exceptions), 0)
self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN))
if xblock.category == 'vertical': if parent_xblock is None: parent_xblock = get_parent_xblock(xblock) parent_category = parent_xblock.category if parent_xblock else None return parent_category == 'sequential' return False
request = self.create_request( data=self.create_segmentio_event_json(**kwargs), content_type='application/json' ) segmentio.track_segmentio_event(request)
target[model] = {f.attname for f in fields}
if compat.PY3: try: text = compat.bytes_to_str( text, encoding=(kwargs.get('encoding') or get_option('display.encoding')) ) except: pass
if not fnmatch.fnmatch(repo['url'], six.text_type(remote)): continue
patch_stack = patches.reshape((B*OR*OC, KR*KC*CH))
if step_score: self.scores_.append(step_score(estimator, features)) support_[features[ranks][:threshold]] = False ranking_[np.logical_not(support_)] += 1
key_salt = 'django.contrib.messages' return salted_hmac(key_salt, value).hexdigest()
can_introspect_time_field = True
ts = _simple_pts('1990', '1992', freq='A-JUN')
self.presence_events = True
i = len(os.path.commonprefix([start_list, path_list]))
super(EmailMultiAlternatives, self).__init__( subject, body, from_email, to, bcc, connection, attachments, headers, cc, reply_to, ) self.alternatives = alternatives or []
if self[0] <= other[0]: left, right = self, other else: left, right = other, self
with salt.utils.fopen(target_cache_file, 'rb') as fp_: target_cache_data = salt.payload.Serial(__opts__).load(fp_) self.assertDictEqual(__context__, target_cache_data)
self.user_preference.delete() self.assert_user_setting_event_emitted(setting=self.TEST_KEY, old=self.TEST_VALUE, new=None)
self.assertEqual(ugettext("Title"), "Title")
_city = None _country = None
return self.q(css=self._bounded_selector('.xblock-author_view'))[0].text
identify_epsg = void_output(lgdal.OSRAutoIdentifyEPSG, [c_void_p])
'ipv6': bool,
from __future__ import absolute_import import os import time
loc = lev.searchsorted(lab, side=side) if side == 'right' and loc >= 0: loc -= 1 return start + section.searchsorted(loc, side=side)
continue
self._get_penalty_type(self.penalty) self._get_learning_rate_type(self.learning_rate)
import salt.ext.six as six
from __future__ import absolute_import
from __future__ import absolute_import
return Series(self._std_err_raw, index=self.beta.index)
import salt.utils import salt.utils.decorators as decorators
self._data.set(item, value, check=pd._np_version_under1p8)
return self._geomgen(capi.geom_intersection, other)
return self._folds[0].get_params()
raise Exception("Impossible arguments to GFK.get_content_type!")
for dirs in six.itervalues(_find_dirs(metadata[saltenv])): dirs = _trim_env_off_path(dirs, saltenv, trim_slash=True) ret += [_f for _f in dirs if _f]
return ModuleStoreEnum.Type.mongo
assert_array_almost_equal(np.sum(tf, axis=1), [1.0] * n_train)
self.instructor_dashboard_page = InstructorDashboardPage(self.browser, self.course_id) self.instructor_dashboard_page.visit() self.cohort_management_page = self.instructor_dashboard_page.select_cohort_management()
return ( 'name', 'enabled', 'lti_consumer_key', 'lti_max_timestamp_age', 'change_date', 'changed_by', 'edit_link', )
class ReplaceField(forms.ModelForm): url = forms.BooleanField()
return X
rate = '40/minute' def allow_request(self, request, view): return self.has_api_key_permissions(request) or super(EnrollmentUserThrottle, self).allow_request(request, view)
project = 'Django' copyright = 'Django Software Foundation and contributors'
return False
return Template(template_code, engine=self)
EmptyPromise( lambda: self.is_focused_on_element(selector), "Focus is on other element" ).fulfill()
if not hasattr(view_converter, 'topo_space'): raise NotImplementedError("Not able to get a topo_space " "from this converter: %s" % view_converter)
if not assume_centered: X = X - X.mean(0)
return self.q(css="body.discussion .forum-nav-sort-control").present
return len(self.q(css=self.BOOKMARKED_ITEMS_SELECTOR).results)
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM")
reviewing_service = models.CharField(blank=True, max_length=255)
get_request_dict = {CapaFactory.input_key(): '0'} result = module.check_problem(get_request_dict)
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
reorderable_items = set() if view_name == 'reorderable_container_child_preview': reorderable_items.add(xblock.location)
self.upload_asset(handout_filename)
raise SaltCloudSystemExit( 'The wait_for_instance action must be called with -a or --action.' )
return convert_indexer(start.start, stop.stop, step)
state = __salt__['{0}.state'.format(container_type)]
res = dfmix.replace(re.compile(r'\s*\.\s*'), nan, regex=True) assert_frame_equal(dfmix, res.fillna('.'))
NEVER_PUBLISHED = 1 UNPUBLISHED_CHANGES = 2 PUBLISHED = 3 VALUES = [NEVER_PUBLISHED, UNPUBLISHED_CHANGES, PUBLISHED]
from __future__ import unicode_literals
salt '*' schedule.list show_all=True
import salt.utils
self.last_submission_time = datetime.datetime.now(UTC())
module_location = module.location.map_into_course(target_id) _update_module_location(module, module_location.replace(revision=MongoRevisionKey.draft))
pass
AutoAuthPage(self.browser, course_id=self.course_id).visit()
from salttesting import TestCase
self.assertUgettext('Date/time', 'Datum/Zeit')
self.verify_expected_team_id(new_teams[0], 'the-best-team') self.verify_expected_team_id(new_teams[1], 'the-best-team') self.assertNotEqual(new_teams[0]['id'], new_teams[1]['id'])
level_strs = self.df.index.format(sparsify=True, adjoin=False, names=False) level_lengths = _get_level_lengths(level_strs)
serializer.save(changed_by=self.request.user)
dist_matrix = np.dot(self.centroids_, subcluster.centroid_) dist_matrix *= -2. dist_matrix += self.squared_norm_ closest_index = np.argmin(dist_matrix) closest_subcluster = self.subclusters_[closest_index]
_, setting = self._get_setting_entry(field_name) return self._verify_setting_entry(setting, field_name, field_value)
tuple_args = tuple(list_args) _validate_ret(parallels._normalize_args(tuple_args))
result = df.reindex(lrange(15)) self.assertTrue(np.isnan(result.values[-5:]).all())
msg = 'Failed to verify package(s)' if out['stderr']: msg += ': {0}'.format(out['stderr']) raise CommandExecutionError(msg)
return _offset_to_period_map.get(offset_str, None)
elif is_categorical_dtype(self.grouper):
if len(out) == 1 and 'restore status' in out[0].lower(): return {'restore_status': out[0]}
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]]
return np.prod([i.cvalues.shape[0] for i in self.index_axes])
self.assertIn(str(verified_course_audit_track), response.content) for course in ( non_verified_course, verified_course_verified_track, verified_course_deadline_passed, unenrolled_course ): self.assertNotIn(str(course), response.content)
provider_str = CONFIG_NAME providers = self.run_cloud('--list-providers') log.debug("providers: %s", providers)
self.assertFalse(self.user.is_active)
def _complete_linkage(*args, **kwargs): kwargs['linkage'] = 'complete' return linkage_tree(*args, **kwargs)
extra = kwargs.get('extra', {})
fields = {}
self.assertEqual(response.status_code, status_code) self.assertDictEqual(response.data, {'detail': msg})
if is_list_like_indexer(value) and np.iterable( value) and lplane_indexer != len(value):
], ROOT_URLCONF='flatpages_tests.urls', TEMPLATES=FLATPAGES_TEMPLATES, SITE_ID=1,
testit('T', lambda x: 'm')
CourseModeFactory.create(mode_slug=mode, course_id=self.course.id, min_price=1)
__virtualname__ = 'whoosh'
rp2 = RandomProjection(random_state=0, eps=0.5) projected_3 = rp2.fit_transform(data) assert_array_equal(projected_1, projected_3)
def __init__(self, opts, io_loop=None): pass
xgrid, ygrid = construct_grids(data)
return {'pythonversion': list(sys.version_info)}
DATE_INPUT_FORMATS = [
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
x = np.arange(3) assert_array_equal(x[:, np.newaxis], cartesian((x,)))
for student in students[2:7]: CertificateWhitelistFactory.create(user=student, course_id=self.course.id, whitelist=True)
BILATERAL = 'bilateral'
file_to_upload = 'image.jpg' self.settings_page.upload_image('#upload-course-image', file_to_upload) self.assertIn(file_to_upload, self.settings_page.get_uploaded_image_path('#course-image'))
log = logging.getLogger(__name__)
html=True
return read_stata(file, convert_dates=True)
lazy.invalidate(library_descriptor, '_unwrapped_field_data') library_descriptor._field_data = inheriting_field_data(InheritanceKeyValueStore(init_dict))
request = Request.blank('/translation/uk') response = self.item.transcript(request=request, dispatch='translation/uk') self.assertEqual(response.status, '404 Not Found')
__outputter__ = { 'items': 'nested', 'item': 'nested', 'setval': 'nested', }
try: record = cls.objects.get(course_id=course_id) return record.email_enabled except cls.DoesNotExist: return False
time = {} n_samples = np.linspace(start=0, stop=opts.n_population, num=opts.n_steps).astype(np.int)
import integration
row = a.ix[0].values
'course_modes',
matcher = Matcher.return_value matcher.confirm_top.return_value = True
return CourseTeam.objects.all()
store = HDFStore(path, mode='w') store.append('df', df)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
assert_array_equal(mb_k_means.predict(X), mb_k_means.labels_)
attempt = self.create_and_submit() assert_equals(attempt.status, "submitted")
indices = lrange(ndim) indices.remove(self.axis)
if name not in list_folders(location): return '{0} not found in {1}'.format(name, location)
def load_newobj_ex(self): kwargs = self.stack.pop() args = self.stack.pop() cls = self.stack.pop()
success = convnet_compile() if success: convnet_available.compiled = True else: convnet_available.compile_error = False _logger.debug('compilation success: %s', success)
self.assertEqual(certificate_exception['user_email'], self.user.email) self.assertEqual(certificate_exception['user_name'], self.user.username)
if fit_intercept: grad[-1] = z0.sum()
if spatialite or oracle: qs = qs.exclude(name='Texas')
if not clean: dmi.append(record) continue
xblock.children = children
contact_info = self._latest_history()['contact_info'] for key, value in kwargs.iteritems(): self.assertEqual(contact_info[key], value)
good_lines = [line for line in text.split('\n') if not _QUOTE_RE.search(line)] return '\n'.join(good_lines)
if __opts__['test']: ret['result'] = None return ret
num_to_add = max_count - len(selected)
return super_getitem(key)
result = self.ymd.unstack(0).stack(-2) expected = self.ymd.unstack(0).stack(0)
na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True,
self.assertEqual(str(df2).splitlines()[0].split(), ['red'])
def __init__(self, *args): self.args = args
with warnings.catch_warnings(record=True): test_bins = get_bin_seeds(X, 0.01, 1) assert_array_equal(test_bins, X)
for i in range(3):
return request.POST.get('client_id')
'splash',
self.q(css='.add-xblock-component-button[data-type={}]'.format(category_type)).first.click() return self.q(css='.{}-type-tabs>li>a'.format(category_type)).text
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
default_headers = { 'HTTP_AUTHORIZATION': 'Bearer ' + self.access_token } default_headers.update(headers) response = self.client.get(uri, follow=True, **default_headers) return response
url = self.browser.current_url fragment_index = url.find('#') if fragment_index >= 0: url = url[0:fragment_index]
if not change_password(username, password, uid): log.warning('unable to set user password') delete_user(username, uid) return False
widget = CheckboxInput( check_test=lambda value: value.startswith('hello'), ) with self.assertRaises(AttributeError): widget.render('greeting', True)
if (isinstance(original_arg, six.string_types) and not original_arg.startswith('{')): return original_arg else: return arg
super(IsCommentableCohortedTestCase, self).setUp() self.toy_course_key = ToyCourseFactory.create().id
for parent in path.split(os.path.sep): try: tree = self.repo.get_object(tree[parent][1]) except (KeyError, TypeError): return None return tree
self.assertContains(response, '<h3 id="flatpages-get_flatpages">get_flatpages</h3>', html=True) self.assertContains(response, '<li><a href="#flatpages-get_flatpages">get_flatpages</a></li>', html=True)
min_dist_inds = dists.argmin(axis=1)
cursor.execute("SHOW TIMEZONE") tz = cursor.fetchone()[0] self.assertEqual(new_tz, tz)
user = UserFactory.create() self.assert_user_has_object_permission(user, False)
max_scores_cache.fetch_from_remote(field_data_cache.scorable_locations)
Formset = generic_inlineformset_factory(TaggedItem, TaggedItemForm) form = Formset().forms[0] self.assertIsInstance(form['tag'].field.widget, CustomWidget)
return self.q(css="#prereq").visible
X = rng.random_sample((10, 3))
other = RangeIndex(25, 14, -1)
from __future__ import absolute_import
register_tests(NaturalKeySerializerTests, 'test_%s_natural_key_serializer', natural_key_serializer_test) register_tests(NaturalKeySerializerTests, 'test_%s_serializer_natural_keys', natural_key_test)
from __future__ import absolute_import, print_function import os
return self.data.tzinfo.tzname(self.data) or ""
return (region, service_id, publicurl, adminurl, internalurl)
self.lift = 1 if -1 in self.index.labels[self.level] else 0
ret['result'] = None
host_c = salt.utils.fopen('/etc/hosts', 'r').readlines()
if dataset.y is not None: dataset.y = numpy.repeat(dataset.y, num_patches / X.shape[0])
affiliate_id = 'test-partner' self.client.cookies[settings.AFFILIATE_COOKIE_NAME] = affiliate_id user = self.create_account_and_fetch_profile().user self.assertEqual(UserAttribute.get_user_attribute(user, settings.AFFILIATE_COOKIE_NAME), affiliate_id)
keys = [keys]
set_tsign = sub(set_limit, flo(div(set_sizes, set_batch))) set_tsize = mul(set_tsign, flo(div(set_range, set_limit)))
"download_url": ( cert.download_url or get_certificate_url(cert.user.id, cert.course_id) if cert.status == CertificateStatuses.downloadable else None ),
from __future__ import absolute_import
from __future__ import absolute_import import os
with self.temporary_migration_module(module="migrations.test_migrations_no_changes"): call_command("makemigrations", "migrations", merge=False, verbosity=0)
with self.settings(DATA_DIR='/not/the/data/dir'): try_tar(self._edx_platform_tar())
chisq = f_obs chisq -= f_exp chisq **= 2 chisq /= f_exp chisq = chisq.sum(axis=0) return chisq, special.chdtrc(k - 1, chisq)
import datetime import pytz
def allow_migrate(self, db, app_label, **hints): return False
by_columns = df.reset_index().groupby(idx_names).mean()
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21 13:30:05')
df_empty = DataFrame(columns=list('ABC')) store.append('df', df_empty) self.assertRaises(KeyError, store.select, 'df')
go_to_section("data_download")
if design_batch.ndim != 2: design_batch = dataset.get_design_matrix(design_batch) mapped_batch_design = dataset.mapback_for_viewer(design_batch) mapped_batch = dataset.get_topological_view(mapped_batch_design) return mapped_batch
all_checks_points = cls.objects.filter( user_id=user_id, checkpoint__course_id=course_key ) check_points = {} for check in all_checks_points: check_points[check.checkpoint.checkpoint_location] = check.status return check_points
df["cc"] = 0.0
mode = 'create' group_attr = __salt__['postgres.role_get']( name, return_password=not refresh_password, **db_args) if group_attr is not None: mode = 'update'
metadata = _refresh_buckets_cache_file(cache_file)
pagerduty.__opts__ = {} pagerduty.__salt__ = { 'config.option': MagicMock(return_value=None) }
self.enrollment.delete()
with self.assertRaisesMessage(ValidationError, "'Enter a valid URL.'"): f.clean('http://%s' % ("X" * 200,))
result = RangeIndex.from_range(range(5, 1)) expected = RangeIndex(0, 0, 1) self.assert_index_equal(result, expected, exact=True)
stats = celery.control.inspect().stats() or {} return HttpResponse(json.dumps(stats, indent=4), content_type="application/json")
self.setDataFrame(dataFrame)
response = self.client.get( reverse('admin:generic_inline_admin_episode_change', args=(self.episode_pk,)) ) self.assertEqual(response.status_code, 200)
migration.mutate_state(state, preserve=False) applied_migrations.remove(migration)
if len(P.shape) == 2: P = squareform(P) kl_divergence = 2.0 * np.dot(P, np.log(P / Q))
return self._send_lti2(payload)
raise ItemNotFoundError(definition_locator)
transformers = Parallel(n_jobs=self.n_jobs)( delayed(_fit_one_transformer)(trans, X, y) for name, trans in self.transformer_list) self._update_transformer_list(transformers) return self
from salt.modules import win_license as license
return is_list_like(key) and not (isinstance(key, tuple) and type(key) is not tuple)
super(CourseRole, self).__init__(role, course_key.org, course_key)
try: return self._prefix_from_ip_int(ip_int) except ValueError: pass
return self.q(css='.form-actions .action-edit-team').present
self.assertEqual( self.run_function('xattr.delete', [NO_FILE, 'spongebob']), 'ERROR: File not found: {0}'.format(NO_FILE))
return False
import integration import salt.utils import salt.utils.find
self.assertEqual(request.read(13), b'--boundary\r\nC') self.assertEqual(request.POST, {'name': ['value']})
if self.kind == 'period': return self.groupby._get_time_period_bins(self.ax) return self.groupby._get_time_bins(self.ax)
from salttesting import skipIf from salttesting.helpers import destructiveTest, ensure_in_syspath ensure_in_syspath('../../')
if value is None: value = [] elif not isinstance(value, list): value = [value] return value
if func_supports_parameter(self.get_template_sources, 'template_dirs'): args.append(template_dirs)
if mod_opts.get('websockets', False): from . import saltnado_websockets
state = models.TextField(null=True, blank=True)
VerificationCheckpoint.get_or_create_verification_checkpoint(course_key, related_assessment_location)
self.config.pop('log_fmt_logfile', None)
check_ortho(pls_ca.x_weights_, "x weights are not orthogonal") check_ortho(pls_ca.y_weights_, "y weights are not orthogonal")
with self.assertRaises(UnsupportedRevisionError): self.store.has_item(self.fake_location, revision=ModuleStoreEnum.RevisionOption.draft_preferred)
return { "id": self.id, "name": self.name, "version": Group.VERSION }
from nose.plugins.skip import SkipTest from theano import config from theano import function from theano.sandbox import cuda from theano import tensor as T
return __salt__['cmd.run'](cmd, runas=runas)
if scipy.sparse.issparse(train): idx = label.sum(axis=1).nonzero()[0] return (train[idx], label[idx])
cert = GeneratedCertificate.eligible_certificates.get(user=user, course_id=course_key) self.assertEqual(cert.status, expected_status)
user = User.objects.get(email=self.user.email) self.assertFalse(auth.user_has_role(user, CourseStaffRole(self.course.id)))
rng = np.random.RandomState(42) X = rng.randn(4, 5)
return copy.copy(self.rng)
version = self.postgis_lib_version() m = self.version_regex.match(version)
import salt.defaults.exitcodes import salt.utils import salt.utils.systemd from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext import six
entry = module.default_app_config
if model_field.__class__ not in self.FIELD_TYPES: raise LayerMapError('Django field type "%s" has no OGR mapping (yet).' % fld_name)
ret['comment'] = 'Event module not available. Beacon add failed.'
accuracy.plot([64, 64], [0.7, 1], label="n_features")
executor.migrate([("lookuperror_a", None)])
video = self.store.get_item(child_to_move_location)
Book.authors.through.objects.using('default').delete()
self.assertIsInstance( self.run_function('softwareupdate.update_all'), dict)
return (right_start == left_end + freq) or right_start in left
if not self.env_is_exposed(tgt_env): return None
df.index = df.index.set_names([ None if self._re_levels.search(l) else l for l in df.index.names ])
ssh_gateway_password: ExamplePasswordHere
self.code = None answer = None try: answer = xml.xpath('//*[@id=$id]//answer', id=xml.get('id'))[0] except IndexError:
self.assertEqual(map(str.strip, result.splitlines()), self.OVERRIDES_JS)
index = _get_index() result = DataFrame(values, index=index).stack() result.name = self.name return result
vectorizer = HashingVectorizer(decode_error='ignore', n_features=2 ** 18, non_negative=True)
cs_getsize = CsInt('GEOSCoordSeq_getSize') cs_getdims = CsInt('GEOSCoordSeq_getDimensions')
from __future__ import unicode_literals
iris = datasets.load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
return sorted(set(enabled + available))
for scaling in [2, 0.3]: assert_almost_equal( weighted_score, metric(y1, y2, sample_weight=sample_weight * scaling), err_msg="%s sample_weight is not invariant " "under scaling" % name)
self.assert_no_xpath(xml, "//label[@class='choicetextgroup_incorrect']", self.context)
optima = [(self._constrained_optimization(obj_func, self.kernel_.theta, self.kernel_.bounds))]
salt '*' vsphere.service_restart my.esxi.host root bad-password 'ntpd'
if subnet_names: for i in subnet_names: r = __salt__['boto_vpc.get_resource_id']('subnet', name=i, region=region, key=key, keyid=keyid, profile=profile)
block = list(range(100, 104)) packed_block = struct.pack('<' + 'B B B B', *block)
EX_AGGREGATE = 20
notes = deepcopy(notes[start:end])
expected = f.sum(axis=0) result = f.sum(axis='index') assert_series_equal(result, expected)
buf = c_char_p(b'') srs = capi.new_srs(buf)
about_location = self.make_course_key(org, course, run).make_usage_key('about', 'overview')
f.title = mark_safe(f.title) f.content = mark_safe(f.content)
import salt.utils
return y
from __future__ import absolute_import
source_encoding = 'utf-8'
return False
for kernel in kernels: K_call_diag = np.diag(kernel(X)) K_diag = kernel.diag(X) assert_almost_equal(K_call_diag, K_diag, 5)
self._block_relations = defaultdict(_BlockRelations)
path = salt.utils.url.unescape(path)
from __future__ import unicode_literals
import signals import exceptions
if not properties: properties = {}
return ItemFactory.create( category='library_content', parent_location=course.location, user_id=self.user.id, publish_item=False, source_library_id=unicode(library_key), **(other_settings or {}) )
ms = ModelState.from_model(FooBar) with self.assertRaises(InvalidBasesError): ms.render(apps)
children = np.array(children)[:, ::-1]
_keys = {} for key in keys: if keys[key]: _keys[key] = keys[key] return _keys
for terms_of_service in ["", "false", "not_boolean"]: params["terms_of_service"] = terms_of_service assert_terms_of_service_error("You must accept the terms of service.")
from __future__ import absolute_import import re import os import logging import tarfile from contextlib import closing
lib1 = LibraryFactory.create()
ret.update(difference)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
import integration
return (None, None)
import salt.config import salt.loader from salt.modules import boto_iot
self.assertFalse( self.run_function('pkgutil.is_installed', [TEST_PKG_NAME]))
request_context = get_template_request_context() if request_context: for item in request_context: context_dictionary.update(item) for item in context_instance: context_dictionary.update(item) if context: context_dictionary.update(context)
#response = conn.verifyOrder(kwargs)
return self.get_selector('div.running-tasks-container')
return self.has_key(key)
response = self.post_with_bearer_token('/oauth2-test/', token=self.refresh_token.token) self.check_error_codes( response, status_code=status.HTTP_401_UNAUTHORIZED, error_code=authentication.OAUTH2_TOKEN_ERROR_NONEXISTENT )
from __future__ import absolute_import import os import re import uuid import logging
res_rev = cat_rev > cat_rev_base exp_rev = np.array([True, False, False]) self.assert_numpy_array_equal(res_rev, exp_rev)
self.assertQuerysetEqual(Reporter.objects.all(), [])
result = sparse[orig % 2 == 1] exp = orig[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
return column_or_1d(y, warn=True)
return np.array([self._frames[item].values for item in self.items])
return (user_id, role_id, tenant_id)
return self._num_batches
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
lgdal = CDLL(lib_path)
if self.user is not None and self.user.username == username: user = self.user else: user = User.objects.get(username=username)
pred = mb_k_means.predict(mb_k_means.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
from __future__ import absolute_import import functools import logging import os.path import os import re import time
all_times = self.q(css=selector).text[0]
TASK_LOG.info(u'%s, Task type: %s, Finalizing grade task', task_info_string, action_name) return task_progress.update_task_state(extra_meta=current_step)
if __grains__['os_family'] == 'RedHat': if not salt.utils.is_true(sanitizedkwargs[kwarg]): needs_update = True else: needs_update = True
self._assert_course_verification_status(VERIFY_STATUS_SUBMITTED)
from __future__ import absolute_import
s = Series(date_range('1/1/2000', periods=10))
__virtualname__ = 'couchbase'
return self.lti_consumer.consumer_secret
return ""
pass
self.assertRaises(ValueError, ct, '- 1days, 00')
self.assertRaises(NotImplementedError, self.encode_decode, obj)
updates[mean_square_grad] = new_mean_squared_grad updates[param] = param + delta_x_t
self.assertEqual(old_email, response.data["email"]) self.assertEqual("change my email", response.data["goals"])
raise NotImplementedError('subclasses of BaseDatabaseWrapper may require a get_new_connection() method')
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if login_when_done: user = authenticate(username=username, password=password) login(request, user)
indexed_count = { "count": 0 }
([TestTransformer1(), UnregisteredTestTransformer3()], [UnregisteredTestTransformer3.name()]),
res = df.loc[lambda x: x.A > 2] tm.assert_frame_equal(res, df.loc[df.A > 2])
qs = Parcel.objects.filter(center2__within=F('border1')) self.assertEqual(1, len(qs)) self.assertEqual('P2', qs[0].name)
X, y = datasets.make_friedman3(n_samples=1200, random_state=random_state) X_train, y_train = X[:200], y[:200] X_test, y_test = X[200:], y[200:]
if not self.value and self.xml.text: self.value = self.xml.text.strip()
with patch('capa.correctmap.CorrectMap.is_correct') as mock_is_correct: mock_is_correct.return_value = False
if recursive:
before = self.make_project_state([]) after = self.make_project_state([address, tenant]) autodetector = MigrationAutodetector(before, after) changes = autodetector._detect_changes()
pkg_params = {name: version_num}
self.q(css="#next_step_button").click() next_page_object.wait_for_page()
self.assert_index_equal(c.categories, Index([4, 3, 2, 1]))
from __future__ import unicode_literals
return True
force = True stats_args.insert(2, c_int(force)) func = capi.get_band_statistics
if issubclass(cls, Index): obj = object.__new__(cls) else: obj = cls.__new__(cls, *args, **kwargs) self.append(obj)
self.assertEqual(self.export_page.header_text, 'Library Export')
applied = self.empty.apply(np.sqrt) self.assertTrue(applied.empty)
with self.assertRaises(forms.ValidationError): f.clean('13:30:05')
cases = [Series([]), Series([np.nan, np.nan])]
a = Timestamp('3/12/2012') b = Timestamp('3/12/2012', tz=utc)
super(HtmlResponse, self).__init__(html, content_type='text/plain')
Ioinits = { 'road_stack': '.salt.road.manor.stack', }
self.components_ = self.random_state_.gamma( init_gamma, init_var, (self.n_topics, n_features))
__, __, course = self.load_test_import_course(target_id=course_id, module_store=module_store)
ext_ring = args[0] init_holes = args[1:] n_holes = len(init_holes)
ret = {'name': name, 'result': None, 'comment': '', 'changes': {},
self.post_process(root, export_fs)
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
import salt.ext.six as six
cache.delete(key)
X = T.matrix() Y = T.nnet.sigmoid(X) Z = arg_of_sigmoid(Y) assert X is Z
for backend_path in settings.AUTHENTICATION_BACKENDS: backend = auth.load_backend(backend_path) if backend.get_user(user.id): return backend_path
response = other_view(request, '15') self.assertEqual(response.content, b'Hello World 15')
users_state_before_fail = self._get_users_state()
EDXMKTG_LOGGED_IN_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_LOGGED_IN_COOKIE_NAME', EDXMKTG_LOGGED_IN_COOKIE_NAME) EDXMKTG_USER_INFO_COOKIE_NAME = ENV_TOKENS.get('EDXMKTG_USER_INFO_COOKIE_NAME', EDXMKTG_USER_INFO_COOKIE_NAME)
u_flipped_with_transpose, _, v_flipped_with_transpose = randomized_svd( mat, 3, flip_sign=True, transpose=True) u_based, v_based = max_loading_is_positive( u_flipped_with_transpose, v_flipped_with_transpose) assert_true(u_based) assert_false(v_based)
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
response = self.client.post(self.url, data) self.assertHttpBadRequest(response)
if not _np_version_under1p9: raise nose.SkipTest("Numpy version is greater than 1.9")
_check_align(self.ts[:0], self.ts[:-5], how=kind) _check_align(self.ts[:0], self.ts[:-5], how=kind, fill=-1)
from __future__ import absolute_import import re import logging try: import pwd HAS_PWD = True except ImportError: HAS_PWD = False
for element in self.q(css=self._bounded_selector(selector)): note = EdxNoteHighlight(self.browser, element, self.item_id) note.show().remove()
from __future__ import absolute_import
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
key = str(socket_path)
elif (self.is_datetime_lhs and (self.is_timedelta_rhs or self.is_offset_rhs)):
import copy import re import logging
selector = '{} .acid-block {} .pass'.format(self.context_selector, test_selector) return bool(self.q(css=selector).results)
exp_in.index = exp_in.index.astype(object)
pairwise = True if pairwise is None else pairwise
proc.sendline(phrase)
self.set_select_value(self.SCORED_LABEL, str(scored)) EmptyPromise(lambda: self.scored == scored, "scored is updated in modal.").fulfill()
self.__clear_hosts() f = salt.utils.fopen(HFN, 'w') f.close()
return [url for url in super(ActionAdmin, self).get_urls() if url.name != name]
self.assertContains(response, '<td class="field-url">') self.assertContains(response, '<td class="field-posted">')
self.assertEqual(list(storage), [])
from salttesting import TestCase from salttesting.mock import MagicMock, patch from salttesting.helpers import ensure_in_syspath, TestsLoggingHandler from salt.exceptions import CommandExecutionError
self.course = self.store.publish(self.course.location, self.user_id)
raise NotImplementedError
with self.assertRaises(ValueError): InvalidModelForm()
with make_uploaded_file( dimensions=(1, 1), extension=".png", content_type="image/png", force_size=upload_size ) as uploaded_file: self.check_validation_result(uploaded_file, expected_failure_message)
if dt: return JSONEncoder().default(dt) return None
return BACKEND.is_request_in_microsite()
from salt.exceptions import SaltRenderError import salt.utils.templates
items = self.store.get_items(course_key) self.assertIn(orphan, [item.location for item in items]) self.assertEqual(len(items), 3)
nn = NearestNeighbors(metric='chebyshev', n_neighbors=n_neighbors)
self.assertEqual(formset.is_valid(), False) self.assertEqual(Poet.objects.count(), 1)
values = Series([u('aafootwo'), u('aabartwo'), NA, u('aabazqux')])
df += int(self.smooth_idf) n_samples += int(self.smooth_idf)
user2 = UserFactory.create() SkippedReverification.add_skipped_reverification_attempt( checkpoint=self.checkpoint, user_id=user2.id, course_id=unicode(self.course.id) )
while f1 != f2: f1=f2 (f2,ext)=os.path.splitext(f1)
LibraryExportManager(modulestore, contentstore, library_key, root_dir, library_dir).export()
continue
return functools.partial(self.cache, ignore=ignore, verbose=verbose, mmap_mode=mmap_mode)
return quote(force_bytes(path).replace(b"\\", b"/"), safe=b"/~!*()'")
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
old_roles.add(role)
from salt.modules import archive from salt.exceptions import CommandNotFoundError from salt.utils import which_bin
with tm.assert_produces_warning(FutureWarning): ind.order()
series = pd.Series(1, index=pd.period_range(start='2000', periods=100)) result = series.resample('M').count()
pass
raise NotImplementedError('subclasses of BaseCommand must provide a handle() method')
current_provider = provider.Registry.get_from_pipeline({'backend': backend.name, 'kwargs': kwargs}) return current_provider and current_provider.skip_email_verification
try: return sorted(value, key=_property_resolver(arg), reverse=True) except (TypeError, VariableDoesNotExist): return ''
group = RandomUserPartitionScheme.get_group_for_user( self.MOCK_COURSE_ID, self.user, self.user_partition, assign=False )
td[2] = np.nan result = td.ffill() expected = td.fillna(0) expected[0] = np.nan assert_series_equal(result, expected)
super(VectorSpace, self)._validate_impl(is_numeric, batch)
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
error_msg = ('Invalid parameter %s for estimator %s. ' 'Check the list of available parameters ' 'with `estimator.get_params().keys()`.')
field_errors = {}
return deserialize_count_specs(self.courses_enrolled)
from salt.states import mongodb_user
git_refnames = " (HEAD -> master)" git_full = "fcd73ad2e7482414b61d47056c6c9c220b11702c" keywords = {"refnames": git_refnames, "full": git_full} return keywords
import doctest doctest.master = None
return getattr(_active, "value", get_default_timezone())
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
items_index = []
if not user_obj.is_active: return False for perm in self.get_all_permissions(user_obj): if perm[:perm.index('.')] == app_label: return True return False
specified_address = os.environ.get( 'DJANGO_LIVE_TEST_SERVER_ADDRESS', 'localhost:8081-8179')
connection.close()
clf3 = MultinomialNB() clf3.partial_fit(X, y2, classes=np.unique(y2))
return {k: repr(v) for k, v in module.__dict__.items() if not omittable(k)}
self.execute(self.sql_delete_table % { "table": self.quote_name(model._meta.db_table), })
self.assertEqual( Author.objects.none().aggregate(Avg('age')), {'age__avg': None} )
return u"{course}, {provider}, {status}".format( course=self.course.course_key, provider=self.provider.provider_id, status=self.status, )
self.assertFileNotFound('test/nonascii.css') self.assertFileContains('test/.hidden', 'should be ignored')
cache.clear()
result4 = (DataFrame.from_records(lists, columns=columns) .reindex(columns=df.columns))
mask = np.tile(mask, list(self._selected_obj.shape[1:]) + [1]).T
response = ( _visible_to_nonstaff_users(courselike) and _can_access_descriptor_with_start_date(user, courselike, courselike.id) ) return ( ACCESS_GRANTED if (response or _has_staff_access_to_descriptor(user, courselike, courselike.id)) else response )
assert_array_almost_equal(clf_lda_svd.explained_variance_ratio_, clf_lda_eigen.explained_variance_ratio_[:tested_length])
from __future__ import absolute_import from contextlib import closing import errno import logging import os import re import shutil import subprocess import tarfile import tempfile
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
COURSES_WITH_UNSAFE_CODE = []
pygments_style = 'sphinx'
import salt.ext.six as six
if val_video_data: encoded_videos = val_video_data.get('profiles', {})
try: length = len(line.decode('utf-8')) except UnicodeError: pass
content_type_concrete = models.ForeignKey(ContentType, models.CASCADE, related_name='+') object_id_concrete = models.PositiveIntegerField() content_object_concrete = GenericForeignKey('content_type_concrete', 'object_id_concrete')
'user': str,
def f(): Categorical([1, 2], [1, 2, 2])
responses = self.xml.xpath('//stringresponse[@id=$id]', id=self.id) if responses: response = responses[0]
alice_profile = UserProfile.objects.using('default').create(user=alice, flavor='chocolate') with self.assertRaises(ValueError): bob.userprofile = alice_profile
if self.exc_info: exc_info = self.exc_info self.exc_info = None six.reraise(*exc_info)
return self.form_class
np.subtract(S, Y[:, None], tmp) tmp[ind, I] = S[ind, I] - Y2
task_id = entry.task_id course_id = entry.course_id task_input = json.loads(entry.task_input)
target_names = np.array(['a', 'b', 'c']) y = target_names[y_idx]
if not set(session_key).issubset(set(VALID_KEY_CHARS)): raise InvalidSessionKey( "Invalid characters in session key")
import salt.ext.six as six from jinja2 import BaseLoader, Markup, TemplateNotFound, nodes from jinja2.environment import TemplateModule from jinja2.ext import Extension from jinja2.exceptions import TemplateRuntimeError import jinja2 import yaml
UserModel().set_password(password)
choice, answers = choice_answers_pair
return has_access(requesting_user, CourseStaffRole.ROLE, course_key)
resp = self.client.delete('/course/bad/course/key/entrance_exam') self.assertEqual(resp.status_code, 400)
self.assertEqual(self.func(None), [base.W001])
p = Photo.objects.get() p.image.delete(save=False)
ForestEstimator = FOREST_ESTIMATORS[name]
pass
current_keys = set(current.keys()) state_keys = set(state.keys())
frame.ix[5:10] = np.nan frame.ix[15:20, -2:] = np.nan
urlpatterns += ( url(r'^404$', handler404), url(r'^500$', handler500), )
df.fillna(np.nan)
if offset.isdigit(): offset = int(offset) else: offset = 0
return self.to_storable() == edit_info.to_storable()
from edx_oauth2_provider.tests import IDTokenTestCase, UserInfoTestCase
kwargs.setdefault('c', plt.rcParams['patch.facecolor'])
if not settings.FEATURES.get('ENABLE_EDXNOTES'): filtered_list.append('edxnotes')
import salt.config import salt.loader from salt.modules import boto_cognitoidentity
mpoly[i] = poly
plot_calibration_curve(LinearSVC(), "SVC", 2)
import theano from theano import tensor try: from theano.sparse import SparseType except ImportError: warnings.warn("Could not import theano.sparse.SparseType") from theano.compile.mode import get_default_mode
ret[minion] = data['full_ret']
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath
__context__.pop('pkg.list_pkgs', None) new = list_pkgs() ret = salt.utils.compare_dicts(old, new)
request.grant_type = None
return ff
return replace(path, pattern, '', flags=flags, bufsize=bufsize, dry_run=True, search_only=True, show_changes=False, ignore_if_missing=ignore_if_missing)
if access_key != settings.VERIFY_STUDENT["SOFTWARE_SECURE"]["API_ACCESS_KEY"]: return HttpResponseBadRequest("Access key invalid")
D, E = pairwise_distances_argmin_min(X, Y, metric=minkowski, metric_kwargs={"p": 2}) assert_array_almost_equal(D, [0, 1]) assert_array_almost_equal(E, [1., 1.])
test = [[1], [3], [4]] assert_array_almost_equal(clf.predict(test), [1, 3, 4], 2)
cumprod = self.tsframe.cumprod(axis=1) expected = self.tsframe.apply(Series.cumprod, axis=1) tm.assert_frame_equal(cumprod, expected)
re.MULTILINE)
#html_show_copyright = True
for stream in (self.stdout, self.stderr): stream.flush()
empty_array = self._is_empty_array(value.shape) transposed = False
stack.extendleft(children)
str(qs.query)
log_likelihood_gradient_dims = \ 0.5 * np.einsum("ijl,ijk->kl", tmp, K_gradient) log_likelihood_gradient = log_likelihood_gradient_dims.sum(-1)
self._prefixlen = self._prefix_from_prefix_string(addr[1])
_porttree().dbapi.settings.reset() _porttree().dbapi.settings.lock() return use, use_expand_hidden, usemask, useforce
inline_topics = self.q(css=self._bounded_selector('.check-discussion-subcategory-inline')) return all(topic.get_attribute('disabled') == 'true' for topic in inline_topics)
send_admin_notification = Signal(providing_args=["user"])
continue
df = pd.DataFrame({'X': [1, 2, 3, 4], 'Y': list('aabb')}, index=list('ABCD'))
if cache: if not stop(): return False elif not _wipe(cache): return False
from salt.utils.schema import (Schema, StringItem, IntegerItem, SecretItem, PortItem, BooleanItem, RequirementsItem, DictItem, AnyOfItem ) from salt.config.schemas.minion import MinionConfiguration
from __future__ import absolute_import
self.validate_xblock_info_consistency(xblock_info)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
nodes = query('get', 'nodes')
self.xmodule_runtime.xmodule_instance = None
import salt.utils.boto3 import salt.utils.compat import salt.utils from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
AutoAuthPage( self.browser, username=self.student_name, email=self.student_email, course_id=self.course_id, ).visit()
try: SimpleView(key='value').as_view() self.fail('Should not be able to instantiate a view') except AttributeError: pass
add_lookup('main', '', package=__name__) self.assertEqual(utils.render_mustache('test.mustache', {}), 'Testing 1 2 3.\n')
return login_required(inner)
import salt.ext.six as six
for data in generated_certificates: data['report_run_date'] = report_run_date
try: result = get_result(other)
fake_data_api.add_course(self.COURSE_ID, course_modes=['honor']) api.update_enrollment(self.USERNAME, self.COURSE_ID, mode='honor', is_active=False)
return cls.current().cache_ttl
import integration import salt.utils
@property def geom_type(self): "Returns a string representing the Geometry type, e.g. 'Polygon'" return capi.geos_type(self.ptr).decode()
self.assertIsInstance(result_dict['task_id'], unicode) self.assertIsInstance(result_dict['time'], float) self.assertTrue(result_dict['time'] > 0.0)
rendered_html = etree.XML(problem.get_html())
os.makedirs(fn_)
self.assertEqual(private_student.school, private_school)
template_name_suffix = '_archive_year'
assert_equals(out.count("But it is "), 1)
U, V = svd_flip(U, V, u_based_decision=False)
for X in (X_dense, X_sparse_pruned, X_sparse_unpruned):
))
if other is None: result = not func.__name__ == 'eq'
config.floatX = self.prev_floatX
return not self.q(css=CSS_CLASS_NAMES['video_spinner']).visible
s = Series(range(5)) s2 = Series(date_range('20010101', periods=5))
context["autoSubmitRegForm"] = True
upload_start_time = datetime.utcnow().replace(microsecond=0, second=0) self.import_page.upload_tarball(self.tarball_name) self.import_page.wait_for_upload()
name = pprint_thing(self.__class__.__name__) if self._is_single_block:
import salt.ext.six as six
self.assertEqual( second_group.id, ps_uncached.get_user_group_id_for_partition(user_partition_id) )
user_environment = win32profile.CreateEnvironmentBlock(token, False)
value = compat.long(value) if value < 2147483648 else float(value) self._str = self.MISSING_VALUES[value]
major_axis = lrange(70000) minor_axis = lrange(10)
return obj
if should_force_account_creation(): return dispatch_to_register() return dispatch_to_login()
if filter is not None: filt = o.index if isinstance(o, Series) else o if not filter(filt): continue
return False
self.selenium.get(self.live_server_url + reverse('admin:admin_widgets_member_add'))
cursor.execute("SELECT CURRVAL(pg_get_serial_sequence('%s','%s'))" % ( self.quote_name(table_name), pk_name)) return cursor.fetchone()[0]
if (start != int(start) or stop != int(stop) or step != int(step)): return super_getitem(key)
o = ts.utcoffset() return (o.days * 24 * 3600 + o.seconds) / 3600.0
data_parser = struct.Struct('LHHHHHHL') ReparseTag, ReparseDataLength, Reserved, SubstituteNameOffset, \ SubstituteNameLength, PrintNameOffset, \ PrintNameLength, Flags = data_parser.unpack(reparse_data[:data_parser.size])
pipe.recv()
self.the_input.capa_system.render_template = lambda *args: "<aaa" with self.assertRaises(etree.XMLSyntaxError): self.the_input.get_html()
self.assertTrue(check_password('letmein', encoded, setter, 'bcrypt')) self.assertTrue(state['upgraded'])
return self.child_at(index)
self.frame['A'][:5] = nan self.frame['B'][:10] = nan cov = self.frame.cov()
self.labels = np.array(labels, copy=True) self.unique_labels = np.unique(labels) self.n_unique_labels = len(self.unique_labels)
from __future__ import unicode_literals
self.browser.refresh() self.wait_for_page()
for state in READY_STATES: instructor_tasks = instructor_tasks.exclude(task_state=state) return instructor_tasks.order_by('-id')
if os.path.exists(venv_path): shutil.rmtree(venv_path) if os.path.exists(requirements_file_path): os.unlink(requirements_file_path)
for field_name in self.DEFAULT_FIELDS: self.field_handlers[field_name](form_desc, required=True)
allowable_chars = string.ascii_letters + string.digits username = '' for _index in range(30): username = username + random.SystemRandom().choice(allowable_chars) return username
def f(): df.loc['A1', (slice(None), 'foo')]
pass
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
def f(): s.set_categories([4, 3, 2, 1])
w = rhs.where.clone() w.relabel_aliases(change_map) self.where.add(w, connector)
LOGGER.exception('Failed to award certificate for program %s to user %s', program_id, username) retry = True
valid_get_dict = MultiDict({'input_1[]': 'test'}) result = CapaModule.make_dict_of_responses(valid_get_dict) self.assertEqual(result['1'], ['test'])
return aside_id.aside_type
self._assert_courses_in_overview(self.course_key_1, self.course_key_2)
self.assertQuerysetEqual(Reporter.objects.filter(article__reporter=self.r).distinct(), john_smith)
self.panel4d['strings'] = 'foo' result = self.panel4d.xs('D', axis=3) self.assertIsNotNone(result.is_copy)
X_dense[3, :] = 0.0
source_videos = list(get_videos_for_course(source_course.id)) target_videos = list(get_videos_for_course(destination_course_key)) self.assertEqual(1, len(source_videos)) self.assertEqual(source_videos, target_videos)
with tm.assertRaises(AttributeError): plotting.grouped_hist(df.A, by=df.C, foo='bar')
creds_map = {}
ADVANCED_SECURITY_CONFIG = {}
start, stop, stride = index.indices(self.num_feat) return [self._make_feature(fid) for fid in range(start, stop, stride)]
arnorm = alfa * beta if arnorm == 0: print(msg[0]) return x, istop, itn, r1norm, r2norm, anorm, acond, arnorm, xnorm, var
self.set_attrs()
_format_cache = {} _format_modules_cache = {}
permissions = set() for backend in auth.get_backends(): if hasattr(backend, "get_group_permissions"): permissions.update(backend.get_group_permissions(self, obj)) return permissions
return self.get_courses(**kwargs)
if self.op in (_cmp_ops_syms + _bool_ops_syms): return np.bool_ return _result_type_many(*(term.type for term in com.flatten(self)))
try: return request.user.pk except AttributeError: return ''
val = Decimal("{0:.2f}".format(Decimal(self.percentage_discount / 100.00) * cost)) return cost - val
key = RSA.importKey(rsa_priv_key_str) cipher = PKCS1_OAEP.new(key) return cipher.decrypt(data)
return self.incr_version(key, -delta, version)
nonzero = dists != 0 dists = dists[nonzero]
for i in range(10):
data = { "form-TOTAL_FORMS": "1", "form-INITIAL_FORMS": "1", "form-MAX_NUM_FORMS": "0",
result = df.set_index('C') result_nodrop = df.set_index('C', drop=False)
self.assertNotIn('proctoring', section_actual)
data = { "form-TOTAL_FORMS": "4", "form-INITIAL_FORMS": "4", "form-MAX_NUM_FORMS": "0",
s = Series(randn(8), None)
from __future__ import absolute_import import os
SEARCH_ENGINE = "search.elastic.ElasticSearchEngine"
return models.Application.objects.get(**filters)
encoded_messages = json.loads(encoded_messages) for obj in encoded_messages: obj.pop(1) encoded_messages = json.dumps(encoded_messages, separators=(',', ':'))
email_body = mail.outbox[0].body result = re.search(r'(?P<url>https?://[^\s]+)', email_body) self.assertIsNot(result, None)
self.data[col_loc] = col
return etree.Element("annotationresponse")
connections_dict = {} connection.cursor() connections_dict[id(connection)] = connection
if self.failed_only: opts += "--failed"
old_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition) self.assertIn(old_group.id, [0, 1])
ret['comment'] = "Label {0} already set".format(name)
sentinel = com.sentinel_factory() levels = frame.index.format(sparsify=sentinel, adjoin=False, names=False)
middleware.RequestCache.clear_request_cache()
to_concat, name = self._ensure_compat_append(other) attribs = self._get_attributes_dict() attribs['name'] = name return self._shallow_copy_with_infer( np.concatenate(to_concat), **attribs)
pass
for conn in connections_dict.values(): if conn is not connection: conn.close()
keys1 = list(dict1.keys()) keys2 = list(dict2.keys()) result = {} for key1 in keys1: result[key1] = dict1[key1] for key2 in keys2: result[key2] = dict2[key2] return result
self.assertFalse(ApiAccessRequest.objects.all().exists()) response = self.client.post(self.url, VALID_DATA) self._assert_post_success(response)
if hasattr(client, 'create_user'): client.create_user(name, passwd) return True
store.get_items(SlashSeparatedCourseKey('a', 'b', 'c'), qualifiers={'category': 'vertical'})
self.client.logout() resp = self.client.get(self.url_unlocked) self.assertEqual(resp.status_code, 200)
if func_code.co_flags & 0x04: name = arg_names[pos_count + keyword_only_count] annotation = annotations.get(name, _empty) parameters.append(Parameter(name, annotation=annotation, kind=_VAR_POSITIONAL))
decrypt = salt.loader.render( self.opts, {}).get(self._pillar_enc)
from salt.exceptions import CommandExecutionError
try: return getattr(self._module_system, name) except AttributeError: return getattr(self._descriptor_system, name)
try: data = data.astype('float64') result = True except: pass
from __future__ import unicode_literals
self.assertEqual(from_lisa_select_option.get_attribute('title'), from_lisa_select_option.get_attribute('text'))
class Unmanaged2(models.Model): mm = models.ManyToManyField(Unmanaged1)
self._raise_unless_scope_is_allowed(key)
destroy(vm_['name'])
_max_parts = self._HEXTET_COUNT + 1 if len(parts) > _max_parts: msg = "At most %d colons permitted in %r" % (_max_parts-1, ip_str) raise AddressValueError(msg)
self.assertEquals( value, request.META.get('HTTP_ACCEPT_LANGUAGE', UNSET) )
model = model_id
expected = Series([np.nan, 2, 3])
self._requested_xblock_fields = set()
else: method = ".apply(<func>)"
update_creator_state = Signal(providing_args=["caller", "user", "state"])
qs = Book.objects.annotate(avg_price=Avg('price')).aggregate( publisher_awards=Sum('publisher__num_awards') ) self.assertEqual(qs['publisher_awards'], 30)
if key in ['freq', 'index_name']: ws = attribute_conflict_doc % (key, existing_value, value) warnings.warn(ws, AttributeConflictWarning, stacklevel=6)
course.cohort_config = {} self.assertFalse(course.is_cohorted)
from pandas.compat import range
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if fexpect == fsym: return {'ok': True, 'msg': msg}
export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_export')
ts = tm.makeTimeSeries()[:20] ts_irregular = ts[[1, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 17, 18]]
if key.values.size and not com.is_bool_dtype(key.values): raise TypeError('Must pass DataFrame with boolean values only')
#
self.lc_block = self._add_library_content_block(self.course, self.lib_key)
if name in _plotting_methods: return self.apply(curried)
sysbench.__salt__ = {}
XBLOCK_MIXINS = ( LmsBlockMixin, InheritanceMixin, XModuleMixin, EditInfoMixin, AuthoringMixin, )
self.submit_rescore_all_student_answers('instructor', problem_url_name)
microsite.set_by_domain(self.microsite_subdomain) self.assertTrue(microsite.has_override_value('platform_name'))
raise NotImplementedError('subclasses of BaseSpatialOperations must provide a geo_db_placeholder() method')
from __future__ import unicode_literals
ret = {'pid': PId}
@override_settings(DEBUG=True, ROOT_URLCONF='generic_inline_admin.urls') class GenericAdminViewTest(TestDataMixin, TestCase):
cache_add.return_value = False self.assertEqual(cache.get_or_set('key', 'default'), 'default')
__virtualname__ = 'disk'
named_ids = [] for snap_id in snap_ids: if snapshot_id_to_name(name, snap_id, runas=runas) == snap_name: named_ids.append(snap_id)
log = logging.getLogger(__name__)
name = ('A', 'B') ind.rename(name, inplace=True) self.assertEqual(ind.name, name) self.assertEqual(ind.names, [name])
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
df = DataFrame({ 'Date': [pd.NaT, Timestamp("2014-1-1")], 'Date2': [Timestamp("2013-1-1"), pd.NaT] })
m = l[0].dtype for x in l[1:]: if x.dtype.itemsize > m.itemsize: m = x.dtype return m
"_saveasnew" in request.POST and self.save_as_continue and self.has_change_permission(request, obj)
comps = name.split('}') name = comps[1]
import salt.utils.jid import salt.returners
h_mean = self.mean_h_given_v(v) h_mean_shape = (batch_size, self.nhid) h_sample = rng.binomial(size=h_mean_shape, n = 1, p = h_mean, dtype = h_mean.dtype)
__virtualname__ = 'pkg'
return result.decode()
from __future__ import absolute_import
from __future__ import unicode_literals
from __future__ import absolute_import import os
h5file, node = self.init_hdf5(h_file_n, ([sizes[which_set], image_size], [sizes[which_set], 1]), title="SVHN Dataset", y_dtype='int')
try: arg.default_alias except (AttributeError, TypeError): raise TypeError("Complex aggregates require an alias") kwargs[arg.default_alias] = arg
from salt.utils import fopen, is_darwin, vt
from itertools import product
self.client.login(username=self.username, password=self.password)
with patch( 'openedx.core.lib.block_structure.transformer_registry.TransformerRegistry.get_registered_transformers' ) as mock_available_transforms: mock_available_transforms.return_value = {transformer for transformer in transformers} yield
user_profile = UserProfile.objects.get(user=user) self.assertEqual(user_profile.name, "Robot Name")
break
from salt.modules import munin
frame.columns = frame.columns.get_level_values(col_level)
error_msg = _(u"You must agree to the {platform_name} {terms_of_service}.").format( platform_name=get_themed_value("PLATFORM_NAME", settings.PLATFORM_NAME), terms_of_service=terms_link )
return "http://fake-edx-s3.edx.org/"
from __future__ import absolute_import
SESSION_COOKIE_NAME = str(SESSION_COOKIE_NAME)
continue
response = self.client.get(reverse("dashboard")) self.assertHttpOK(response)
assert_array_almost_equal(dist1, dist2)
idx = pd.CategoricalIndex(values, name='xxx') tm.assert_series_equal(idx.value_counts(), exp)
new_communities = get_community_names() failed_communities = dict()
import ioflo.base.deeding
self.assert_matching_events_were_emitted( event_filter={'name': u'edx.instructor.report.downloaded', 'report_url': report_url} )
win_dns_client.__salt__ = {} win_dns_client.__opts__ = {}
response_file = response_obj["files"][i] self.assertEqual(response_file["file_name"], file_info["file_name"]) self.assertEqual(response_file["upload_url"], mock_key_instance.generate_url())
bins = lib.generate_bins_dt64( ax_values, bin_edges, self.closed, hasnans=ax.hasnans)
self.course = self.store.get_course(self.course.id)
print(file=ex_file) print('Examples using ``%s``' % backref, file=ex_file) print('%s--' % ('-' * len(backref)), file=ex_file) print(file=ex_file)
response = self._regenerate()
'django_countries',
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
query = self._qs(self.browser.current_url) return 'access_denied' in query['error']
from __future__ import absolute_import import os
self.assertEqual(modal.release_date, u'1/1/1970')
else: cat = self.grouper.unique() self.grouper = self.grouper.reorder_categories( cat.categories)
elif existing['code'] == 404:
kwargs[field_name] = val
paramvalues['binddn'] = _render_template(paramvalues['binddn'], username) paramvalues['binddn'] = ldap.filter.escape_filter_chars(paramvalues['binddn'])
return num_saved, num_feat
other = Int64Index(np.arange(25, 14, -1))
visbias_a = visbias
self.assertFalse(glusterfs.delete_volume('Newvolume1', False)) self.assertFalse(mock_run.called) self.assertFalse(mock_stop_volume.called)
else:
cmd += ' seek={0}'.format((size/1024**2) - blocks) endres += _run_all(cmd, 'warn', wipe_failmsg)
obj = self._construct(shape=0) self.assertRaises(ValueError, lambda: bool(obj))
eval_frame_add_all_threads = \ Benchmark("pd.eval('df + df2 + df3 + df4')", common_setup, name='eval_frame_add_all_threads', start_date=datetime(2013, 7, 21))
sequential = get_and_verify_publish_state('sequential', self.SEQUENTIAL, True) self.assertFalse(getattr(sequential, "is_draft", False))
super(DBCacheTests, self).tearDown() self.drop_table()
errstring = "Invalid course_key: 'InvalidCourseID'." with self.assertRaisesRegexp(CommandError, errstring): call_command('export', "InvalidCourseID", self.temp_dir_1)
self.check_test = boolean_check if check_test is None else check_test
self.correct_responses[name] = expect self.incorrect_responses[name] = self.CUSTOM_RESPONSE_INCORRECT
CCX_MAX_STUDENTS_ALLOWED = 200
raise ImportError("Oops")
with cls.store.bulk_operations(course.id, emit_signals=False):
DEFAULT_ATTACHMENT_MIME_TYPE = 'application/octet-stream'
else: def _spawn(self): self.pid, self.child_fd, self.child_fde = self.__fork_ptys()
scenario.steps = [] return
if solution_element is None: continue
return self._nobs - self._df_raw
import salt.utils
selector = self.get_element_selector(VIDEO_MENUS['transcript-skip']) return self.q(css=selector).visible
with self.assertRaises(TemplateSyntaxError): self.engine.get_template('filter-syntax06')
if isinstance(data, Panel): return data return Panel.fromDict(data)
results.append((code_piece, images))
svc = svm.SVC(kernel='linear', C=0.1, decision_function_shape='ovo') clf = svc.fit(iris.data, iris.target)
result = Timestamp('20080101') + offset self.assertIsInstance(result, Timestamp)
ide_spec = _add_new_ide_controller_helper(ide_controller_label, None, bus_number) device_specs.append(ide_spec) bus_number += 1
y_pred_grd = grd.predict_proba(X_test)[:, 1] fpr_grd, tpr_grd, _ = roc_curve(y_test, y_pred_grd)
try:
import salt.ext.six as six
import errno import logging import os import shutil
response = self.client.get(url) email_section = '<div class="vert-left send-email" id="section-send-email">' self.assertIn(email_section, response.content)
series = self.series.copy() series.index = np.arange(len(series)) tm.assertIsInstance(series.index, Index)
return (('Could not run the query', ), (str(e), ))
alt_editor = models.ForeignKey(Editor, models.SET_NULL, blank=True, null=True) title = models.CharField(max_length=100)
X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
continue
try: return CourseRegCodeItemAnnotation.objects.get(course_id=self.course_id).annotation except CourseRegCodeItemAnnotation.DoesNotExist: return u""
transcripts_utils.download_youtube_subs(good_youtube_sub, self.course, settings)
valid_file.seek(0) test_file.seek(0)
modulestore().get_item(usage_key)
if not (has_forum_admin or has_instructor_access): return HttpResponseBadRequest( "Operation requires staff & forum admin or instructor access" )
__func_alias__ = { 'set_': 'set' }
module = CapaFactory.create() self.assertTrue(module.should_show_check_button())
if self._is_anonymous(obj) or obj["user_id"] is None: return None else: user_id = int(obj["user_id"]) return self._get_user_label(user_id)
try:
os.setegid(uinfo['gid']) os.seteuid(uinfo['uid'])
import os import logging import smtplib import StringIO from email.utils import formatdate
assert_equal(neighbors.shape[1], n_neighbors)
consultor1 = models.Advisor.objects.create(name='Rockstar Techie')
if not os.path.exists(config): error = '{0} not found.'.format(config) log.error(error) raise CommandExecutionError(error)
fred, created = book.authors.get_or_create(name="Fred") self.assertTrue(created)
class Mocked(PasswordResetTokenGenerator): def __init__(self, today): self._today_val = today
ret['comment'] = _format_comments(actions) return ret
is_int_index = labels.is_integer() is_int_positional = is_integer(obj) and not is_int_index
self.course_nav.go_to_vertical('Test Vertical-1') self.video.wait_for_video_player_render() self.video.speed = '0.50'
continue
from __future__ import unicode_literals
lresult = last.value
__virtualname__ = 'pecl'
return '%s(%s(%%s,%s), %s)' % (self.transform, self.from_text, value.srid, f.srid)
else: yield enrollment
truncates_names = False
if 'unknown' in out: return '3' else: return out.split()[1]
subject = render_to_string(subject_template, param_dict) message = render_to_string(message_template, param_dict) return subject, message
try: content_length = int(META.get('CONTENT_LENGTH', 0)) except (ValueError, TypeError): content_length = 0
from __future__ import absolute_import import time import pprint import logging
only_courses = [self.courses[0].id, self.courses[1].id] self._run_command(self.TEST_ORG, only_courses=only_courses)
import salt.loader import salt.utils import salt.utils.event from salt.exceptions import SaltInvocationError
admin = AdminFactory()
AUTH_TOKENS = convert_tokens(AUTH_TOKENS)
wtf_numpy = np.zeros((pool_size_1,)) for i in xrange(pool_size_1): wtf_numpy[i] = on_probs[i] on_probs = wtf_numpy
lkey, rkey, count = _factorize_keys(lkey, rkey, sort=sort)
df_size = df.memory_usage().sum() exp_size = len(dtypes) * n * 8 + df.index.nbytes self.assertEqual(df_size, exp_size)
return HttpResponse(get_edxnotes_id_token(request.user), content_type='text/plain')
self.tsframe.to_csv(path, index=False) recons = DataFrame.from_csv(path, index_col=None) assert_almost_equal(self.tsframe.values, recons.values)
if subarr.ndim == 0:
angle = np.arctan2(w[0][1], w[0][0])
raise
time.sleep(30) raise UserWarning("Unable to connect to room {0}".format(room))
headers = {"Content-Type": request.META['CONTENT_TYPE']} result, __ = self.endpoint.validate_request(url, method, body, headers) return result
major_axis = Index(lrange(4)) minor_axis = Index(lrange(2))
class TestManager(models.Manager): def get_by_natural_key(self, key): return self.get(name=key)
self.cohort_management_page.select_cohort_some_inline_discussion()
log.warning('Unable to find group named %s for Zendesk ticket with ID %s.', group_name, ticket_id)
os.remove(filename)
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
return MembershipPageAutoEnrollSection(self.browser)
response = self._send_bad_redirection_login() self.assertEquals(response.status_code, 302)
self.user = UserFactory.create(username=self.USERNAME, password=self.PASSWORD) self.user.profile.name = self.USER_FULL_NAME self.user.profile.save()
for username in userlist: self.check_state(username, descriptor, 0, 1, 2)
if isinstance(instances, str) or isinstance(instances, six.text_type): instances = [instances] conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)
dup_gr_nbrs = np.all(sample_mask, axis=1) sample_mask[:, 0][dup_gr_nbrs] = False
self.assertIsNone(getattr(self.request, 'session', None)) self.assertIsNone(getattr(self.request, 'safe_cookie_verified_user_id', None))
ApiAccessConfig(enabled=False).save() response = self.client.post(self.url) self.assertEqual(response.status_code, 404)
elif inferred_type in ['mixed']:
from salt.states import quota
get_connection(using).rollback()
self.dashboard_page.visit() self.assertTrue(self.dashboard_page.has_course( org=new_org, number=self.course_number, run=self.course_run ))
main(args=[])
return do_timezone(value, timezone.utc)
self._assert_redirects_to_instructor_dash(response)
cached_hash_file = __salt__['cp.cache_file'](source_hash, saltenv)
super(CustomSVC, self).fit(X, y, sample_weight=sample_weight) self.data_type_ = type(X) return self
C = np.dot(A.T, A) C_ = fast_dot(A.T, A) assert_almost_equal(C, C_, decimal=5)
run = problem_key.run if not run: problem_key = course_key.make_usage_key_from_deprecated_string(problem_location) if problem_key.course_key != course_key: raise InvalidKeyError(type(problem_key), problem_key)
self.assertFalse(self.cohort_management_page.is_category_selected())
from __future__ import absolute_import import sys
K.flat[::n_samples + 1] -= alpha[0]
diff = y - activations[-1] deltas[last] = -diff
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
__virtualname__ = 'odbc'
pass
message=string_concat( SimpleLazyObject(lambda: prefix % params), SimpleLazyObject(lambda: error.message % error_params), ), code=code, params=dict(error_params, **params),
nkfd_form = unicodedata.normalize('NFKD', s) return nkfd_form.encode('ASCII', 'ignore').decode('ASCII')
instance_map = weakref.WeakKeyDictionary()
codes = self.categories.get_loc(key) if (codes == -1): raise KeyError(key) return self._engine.get_loc(codes)
if address_predefined: os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS'] = old_address else: del os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS']
return self._get_element_text(".load-response-button")
return cache_and_return(Location._from_deprecated_son(found_id, location.course_key.run))
from __future__ import absolute_import
'ENABLE_OAUTH2_PROVIDER': False,
from __future__ import absolute_import
try: self._spawn()
inter_clust_dists = np.inf * intra_clust_dists
for app in ADDL_INSTALLED_APPS: INSTALLED_APPS += (app,)
from salt.modules import rh_ip import jinja2.exceptions import os
try: select = Select(query.first.results[0]) select.select_by_visible_text(value) return True except StaleElementReferenceException: return False
valid_file = TemporaryFile() test_file = TemporaryFile()
self.assertTrue(module_has_submodule(egg_module, 'bad_module')) with self.assertRaises(ImportError): import_module('egg_module.sub1.sub2.bad_module')
client_cache = None event_user = 'Reactor'
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
copy = self.get_json(obj["url"]) self.assertEqual(obj, copy)
y[::5] += 3 * (0.5 - np.random.rand(8))
xblock_info = create_xblock_info(xblock, include_ancestor_info=is_unit_page)
self.dashboard_page.visit()
permutation = _find_permutation(sample_id_bis, sample_id) y = y[permutation, :]
v = v.tostring() return ExtType(0, blosc.compress(v, typesize=dtype.itemsize))
THIRD_PARTY_AUTH_CUSTOM_AUTH_FORMS = AUTH_TOKENS.get('THIRD_PARTY_AUTH_CUSTOM_AUTH_FORMS', {})
cache.delete(VerificationDeadline.ALL_DEADLINES_CACHE_KEY)
space = CompositeSpace((self.get_input_space(), self.get_target_space())) source = (self.get_input_source(), self.get_target_source()) return (space, source)
return self.lcp.get_max_score()
dropped = self.index.drop(index, errors='ignore') expected = self.index[[0, 1, 2, 3, 4, 5]] self.assert_index_equal(dropped, expected)
__func_alias__ = { 'list_': 'list' }
REQUIRE_DEBUG = False
X_whitened = pca.fit_transform(X_.copy()) assert_equal(X_whitened.shape, (n_samples, n_components)) X_whitened2 = pca.transform(X_) assert_array_almost_equal(X_whitened, X_whitened2)
photo_id_key = data_dict["PhotoIDKey"].decode("base64") user_photo_key = data_dict["UserPhotoKey"].decode("base64")
self.sequential.children = [self.vertical.location] self.sequential = self.store.update_item(self.sequential, ModuleStoreEnum.UserID.test)
if not lazy: descendent_definitions = self.get_definitions( course_key, [ block.definition for block in new_module_data.itervalues() ] ) definitions = {definition['_id']: definition for definition in descendent_definitions}
if self.binner is None: self.binner, self.grouper = self._get_binner()
if 'minimum_grade_credit' in request.json: update_credit_course_requirements.delay(unicode(course_key))
return security_group_rule_id
figure_list = []
timed_exams = [ timed_exam for timed_exam in _timed_exams if is_item_in_course_tree(timed_exam) ]
return get_connection(using).set_autocommit(autocommit)
pass
from salt.modules import sqlite3 import salt
return self
source_suffix = '.txt'
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if hasattr(value, 'deconstruct'): return DeconstructableSerializer(value)
AND = 'AND' OR = 'OR' default = AND
self.assertEqual(self.func(None), [])
left = self.rng[:10] right = self.rng[5:10]
self.assertEqual(ts.asof(ts.index[3]), ts[3])
_NS = slice(None, None)
rendered_html = etree.XML(problem.get_html())
from __future__ import unicode_literals
from __future__ import absolute_import
new_mixed_setting = convert_module_store_setting_if_needed(copy.deepcopy(old_setting))
if self.escChar: ret = re.sub(self.escCharReplacePattern,"\g<1>",ret)
indexer = _update_indexer(None, indexer=indexer)
sub_match_dict = dict(match.groupdict(), **self.default_kwargs) sub_match_dict.update(sub_match.kwargs)
convnet_available.compiled = False convnet_available.compile_error = False
self.assertFalse([ requirement for requirement in requirements if requirement['namespace'] == 'proctored_exam' ])
self.set_many({kvs_key: value})
from __future__ import unicode_literals
if not is_request_in_microsite(): return relative_path return TEMPLATES_BACKEND.get_template_path(relative_path, **kwargs)
meta_dict = json.loads(profile.meta) if profile.meta else {} for meta_feature, meta_key in meta_features: student_dict[meta_feature] = meta_dict.get(meta_key)
return Int64Index
if self.optimizer == 'Welch' and self.theta0.size == 1: self.optimizer = 'fmin_cobyla'
means = rand_data.means g.means_init = means g.fit(X) assert_array_equal(means, g.means_init)
AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
clf = NearestCentroid() clf.fit(X_csr.tocoo(), y) assert_array_equal(clf.predict(T_csr.tolil()), true_result)
if existing['code'] == 200:
USE_I18N = True
cls._set_block_values(block_structure, cls.collect_data_key) cls.collect_call_count += 1
startup_time = stats_line[:14] startup_time = time.strptime(startup_time, '%Y%m%d%H%M%S') startup_time = datetime.datetime(*startup_time[:6])
if remaining_iterations == 0: if verbose: print('Maximum number of iterations reached') results = location, covariance, det, support, dist
cherrypy.config.update(conf['global'])
import logging
self.assertEqual(self.func(None), [base.W005])
raise SkipTest
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
return ACCESS_GRANTED if descriptor.mobile_available else MobileAvailabilityError()
get_envelope = env_func(lgdal.OGR_G_GetEnvelope, [c_void_p, POINTER(OGREnvelope)])
return self._rank_raw
new_course_id = self.store.make_course_key('anotherX', 'anotherToy', 'Someday') self.check_import(root_dir, content_store, new_course_id) self.assertCoursesEqual(course_id, new_course_id)
tm.assert_frame_equal(written_and_read_again.set_index('index'), original, check_index_type=False)
import yaml import salt.ext.six as six
certs_api.set_cert_generation_enabled(self.course.id, True)
self.assertEqual(auth_settings._SOCIAL_AUTH_LOGIN_REDIRECT_URL, response.get('Location'))
self.assertQuerysetEqual(Article.objects.filter(pk__in=[self.a.id]), ["<Article: Swallow programs in Python>"])
self.assertEqual(resp.status_code, 400)
index = world.get_setting_entry_index(DISPLAY_NAME) world.set_field_value(index, "<script>alert('test')</script>") verify_modified_display_name_with_html() world.save_component()
'openedx.core.djangoapps.credit',
return self.get_text('.title')
return self.db_connection.mongo_wire_version
ret = yield _do_transfer()
raise NotImplementedError()
out += 1. continue
warnings.warn("Overriding setting %s can lead to unexpected behavior." % kwargs['setting'], stacklevel=5)
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
is_author_mode = True
fstats_orig = os.stat(path_test)
courseware_page = CoursewarePage(self.browser, self.course_id) self.publish_unit_and_verify_groups_in_lms(courseware_page, [u'Group A', u'Group B', u'Group C'])
df = DataFrame( np.random.randn(10, 4), index=list('abcdefghij'), columns=list('ABCD'))
self.assertRedirects(response, '/circular_redirect_2/', status_code=302, target_status_code=302) self.assertEqual(len(response.redirect_chain), 4)
import integration import salt.config from salt.state import HighState from salt.utils.odict import OrderedDict, DefaultOrderedDict
self.assertEqual(repr(idx), expected)
with self.assertNumQueries(2): lst1 = self.traverse_qs( Person.objects.prefetch_related('houses'), [['houses']] )
return self.q(css='.new-library-button').present
import salt.utils import salt.utils.compat import salt.ext.six as six from salt.exceptions import SaltInvocationError, CommandExecutionError
response = confirm_email_change(self.request, self.key) self.assertEquals( mock_render_to_response(expected_template, expected_context).content, response.content )
from __future__ import absolute_import import signal import logging
self.q(css="input[name=cancel]").click()
self.thread_cache = threading.local()
self.Xt = numpy.zeros([self.n_eigen + self.minibatch_size, self.n_dim])
new_major = list(self.panel.major_axis[:10]) result = self.panel.reindex(major=new_major) assert_frame_equal(result['ItemB'], ref.reindex(index=new_major))
return True
from __future__ import absolute_import
#
curr_batch_size = np.minimum(self._batch_size, self.len_curr_counts[curr_len]) curr_pos = self.len_indices_pos[curr_len]
username: user@example.com password: secretpassword datacenter_id: <UUID> ssh_private_key: /path/to/private.key ssh_public_key: /path/to/public.key
raise
assert_array_equal(unique_labels(np.array([[0, 0, 1], [1, 0, 1], [0, 0, 0]])), np.arange(3))
ret = self.run_function( 'state.sls', mods='pip-installed-weird-install' ) self.assertSaltTrueReturn(ret)
return self.permission_denied_message
return self.enabled and self.enable_studio_authoring
m = DynamicListDisplayChildAdmin(Child, custom_site) request = self._mocked_authenticated_request('/child/', user_parents) response = m.changelist_view(request) self.assertContains(response, 'Parent object')
if role_arn is None: access_key_id, secret_access_key, token = creds(prov_dict) else: access_key_id, secret_access_key, token = assumed_creds(prov_dict, role_arn, location=location)
@contextlib.contextmanager def altered_table_name(model, temporary_table_name): original_table_name = model._meta.db_table model._meta.db_table = temporary_table_name yield model._meta.db_table = original_table_name
return self.q(css='.create-team.wrapper-msg .copy')[0].text
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug='honor') CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug='verified')
self.argtypes = [CS_PTR, c_uint, c_uint, dbl_param]
if is_staff is not None: user.is_staff = (is_staff == "true") user.save()
expressions = self._find_unescaped_expressions(underscore_template) for expression in expressions: if not self._is_safe_unescaped_expression(expression): results.violations.append(ExpressionRuleViolation( Rules.underscore_not_escaped, expression ))
assert_raises(VerificationException, attempt.submit) assert_raises(VerificationException, attempt.approve) assert_raises(VerificationException, attempt.deny)
pass
return self.q(css=self._bounded_selector('.xblock-student_view'))[0].text
W, U, b = self._params if self.weight_noise: W = self.add_noise(W) U = self.add_noise(U)
self.assertEqual(to_locale('en-us'), 'en_US') self.assertEqual(to_locale('sr-lat'), 'sr_Lat')
with self.store.bulk_operations(dest_id): source_courselike, courselike, data_path = self.get_courselike(courselike_key, runtime, dest_id)
response = requests.Response() response.status_code = 400 return response
packages_sources={} installed_packages_list={}
self.create_programs_config() self.mock_programs_api(data={'results': []}) actual = utils.get_programs_for_dashboard(self.user, self.COURSE_KEYS) self.assertEqual(actual, {})
q.bestchild = c q.save() q.delete()
self._lock = threading.Lock()
win_shadow.__salt__ = {}
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
element = self.q(css="#content .container-footer .course-license") if element.is_present(): return element.text[0] return None
alias, driver = driver.split(':')
site_url = '/'
self.cohort_management_page.select_always_inline_discussion()
assert_greater(1, 0) _assert_greater(1, 0) assert_raises(AssertionError, assert_greater, 0, 1) assert_raises(AssertionError, _assert_greater, 0, 1)
return vm_result
os.remove(filename)
self.q(css='.nav-item .new-button').click()
return model in self._registry
ax.set_xlim('1:30', '5:00')
'recordedYoutubeIsAvailable': self.youtube_is_available,
result = ts.resample('10S', loffset='1s').size()
store = self._verify_modulestore_support(None, 'create_course') course = store.create_course(org, course, run, user_id, **kwargs)
if self.teams_configuration: return len(self.teams_configuration.get('topics', [])) > 0 return False
course_email = CourseEmail.create( self.course.id, self.instructor, [SEND_TO_MYSELF, SEND_TO_STAFF, SEND_TO_LEARNERS], "Test Subject", "<p>This is a test message</p>" ) return course_email.id
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
X = [[1., 2.], [3., 4.]]
if is_object_dtype(args[0]): raise TypeError(e) raise
p = Place.objects.get(name="Joe's Chickens") with self.assertRaises(Restaurant.DoesNotExist): p.restaurant
return etree.parse(file_object, parser=EDX_XML_PARSER).getroot()
LogoutPage(self.browser).visit()
p = T.tanh(linear_response) return p
assert_raises(ValueError, rp.transform, data[:, 1:5])
import logging
split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True) self.assertEqual(partition_id, split_test.user_partition_id) return split_test
return self.q(css='.prompt.error').visible
if service_name not in valid_services: ret.update({host_name: {'Error': '{0} is not a valid service name.'.format(service_name)}}) return ret
datasetCache = cache.datasetCache im_path = datasetCache.cache_file(im_path) label_path = datasetCache.cache_file(label_path)
return self.q(css=TEAMS_HEADER_CSS + ' .page-description')[0].text
import argparse import atexit import copy import os import shutil import subprocess import sys import tempfile import warnings
monitoring_dataset = DenseDesignMatrix(X=X)
return TagCategories.objects.all()
resp = self.client.get_html(url) self.assertEquals(resp.status_code, 404)
self.assertTrue(ax1._shared_y_axes.joined(ax1, ax2)) self.assertTrue(ax2._shared_y_axes.joined(ax1, ax2))
zone = tslib.get_timezone(tz) if zone is None: zone = tslib.tot_seconds(tz.utcoffset()) return zone
'ENABLE_COMBINED_LOGIN_REGISTRATION': False,
return self.pacing_css + ':checked'
try: from salt.ext import ssl_match_hostname HAS_SSL_MATCH_HOSTNAME = True except ImportError: HAS_SSL_MATCH_HOSTNAME = False
from salttesting.case import TestCase
objects = [] instance_count = {} for (func, pk, klass, datum) in test_data: with connection.constraint_checks_disabled(): objects.extend(func[0](pk, klass, datum))
quotechar = None
if exc.winerror == 1332: return '' else: raise
self.assert_grade(problem, "Other String", "incorrect")
elif video_descriptor.html5_sources: video_url = video_descriptor.html5_sources[0] else: video_url = video_descriptor.source
self.depart_literal_block(node)
child_id_regex = None child_type = None if child_types_ids: child_type = child_types_ids[0][0] child_id_regex = '|'.join([child[1] for child in child_types_ids])
self._test_create_model("test_mltdb_crmo3", should_run=True)
from salt.modules.cmdmod import _parse_env import salt.utils from salt.exceptions import ( CommandExecutionError, MinionError, SaltInvocationError )
if before is None and after is None and not match: match = content
lars_broken = linear_model.LassoLarsIC('<unknown>') assert_raises(ValueError, lars_broken.fit, X, y)
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=False).visit()
if (self.nobs == 0) and (nrows is None): self._can_read_value_labels = True self._data_read = True return DataFrame(columns=self.varlist)
opts_pkg['id'] = self.id
iso = manifold.Isomap(n_components, 2) X_iso = iso.fit_transform(X)
self.logout() self.login(self.instructor_user) self.assertTrue(self.enroll(self.course))
assert_array_equal(labels, labels_csr) assert_array_almost_equal(new_centers, new_centers_csr) assert_almost_equal(incremental_diff, incremental_diff_csr) assert_almost_equal(old_inertia, old_inertia_csr) assert_almost_equal(new_inertia, new_inertia_csr)
self.assertEqual(buffer_o, expected_data) self.assertFalse(term.isalive())
os.remove(destdir) os.makedirs(destdir)
raise exc
get_management_certificate = show_management_certificate
if not username: username = request.user.username if username != request.user.username and not has_api_key_permissions: return Response(status=status.HTTP_404_NOT_FOUND)
self.assertFalse(CourseMode.objects.filter(id=self.course_mode.id).exists())
max_fd = resource.getrlimit(resource.RLIMIT_NOFILE) try: os.closerange(pty.STDERR_FILENO + 1, max_fd[0]) except OSError: pass
self.assertEqual(self.offset1.rollback(d), datetime(2014, 6, 27, 17))
self.assertIn("copyright", json_data)
result = self.frame.applymap(lambda x: (x, x)) tm.assertIsInstance(result['A'][0], tuple)
__virtualname__ = 'pkg'
drag(container, first_handle + 3, first_handle, 40) drag(container, first_handle + 2, first_handle, 40)
success = False num_attempts = 0 while (not success) and num_attempts < MAX_VALID_BROWSER_ATTEMPTS:
if self.opts.get('permissive_pki_access', False) and stat.S_IWGRP & fmode.st_mode: return True elif stat.S_IWGRP & fmode.st_mode: return False
self.client.logout()
np.random.seed(0) X = np.zeros((n_samples, 2)) step = 4. * np.pi / n_samples
return self.q(css='.page-content-secondary .team-capacity :last-child').text[0]
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
from salt.modules import hg
__virtualname__ = 'sysctl'
s = Series([1., 2, 3], index=[0, 1, 2]) result = s.combine_first(Series([], index=[])) assert_series_equal(s, result)
self.client.force_login(self.u2, backend='django.contrib.auth.backends.AllowAllUsersModelBackend')
return self.q(css=CLASS_SELECTORS['video_controls']).visible
_active.value = gettext_module.NullTranslations() _active.value.to_language = lambda *args: None
obj = NearestCentroid() obj.fit(iris.data, iris.target) score = obj.score(iris.data, iris.target) s = pickle.dumps(obj)
self.ymd['E'] = 'foo' self.ymd['F'] = 2
self.rule = rule self.full_path = '' self.is_disabled = False
from __future__ import absolute_import import os
cmd_str = ( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str)
response = requests.get(self._get_url("api/v1/annotations"), params={ "user": "dummy-user-id", "page": 2, "page_size": 3 })
if vb_machine_exists(INSTANCE_NAME): vb_destroy_machine(INSTANCE_NAME)
return self.best_estimator_.transform(X)
self.lock = threading.Lock()
os.environ.update(DPKG_ENV_VARS)
csv_file = open(path, 'r')
return [self.modulestore.get_item(child) for child in self.children]
ind = res.argsort() res = res.take(ind) lidx = lidx.take(ind) ridx = ridx.take(ind)
import salt.modules.win_status as status
self.assertEqual(new_draft_version, new_published_version)
if any(k is None for k in key): return self._get_values(key)
if val == val: nobs[lab, 0] += 1 sumx[lab, 0] += val
output = self._run_command(self.TEST_ORG) self._assert_output(output, (self.user, self.courses[0].id, opt_in_pref))
self.q(css="body.discussion .forum-nav-sort-control option[value='{0}']".format(sort_by)).click()
ip_address = "192.168.10.20" IPFilter.objects.create( blacklist=ip_address, enabled=True )
self.values_select = []
pass
cp = self.ts[:10].copy() cp[:] = np.nan self.assertTrue(isnull(cp.corr(cp)))
from pandas.core.index import MultiIndex MultiIndex.from_product([range(5), ['a', 'b', 'c']])
content.pop('group_id', None)
settings.apply_settings(self.settings) self.assertFalse(self.settings.SOCIAL_AUTH_RAISE_EXCEPTIONS)
return [b'x' * (MAX_SOCKET_CHUNK_SIZE + MAX_SOCKET_CHUNK_SIZE // 2)]
log.error('Lane Router Received message without share: {0}'.format(msg)) return
from salttesting.helpers import ensure_in_syspath
y = [["ham", "spam"][i] for i in LabelEncoder().fit_transform(Y)] clf.fit(X[:, :-1], y)
meter = utils.ProgramProgressMeter(self.user, []) self._assert_progress(meter)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
'ENABLE_TEAMS': True,
if receivers is NO_RECEIVERS: return []
effective_diff = np.sum((new_centers - old_centers) ** 2) assert_almost_equal(incremental_diff, effective_diff)
self.assertEqual(self._get_enrollments(), [])
self.assertRaises(Exception, BlockIndex, 10, [5], [10])
if not self._whiten and can_fit: assert proc_var[0] > orig_var.max()
if issubclass(cls, Index): obj = object.__new__(cls) else: obj = cls.__new__(cls, *args)
whitelist = self.cleaned_data["whitelist"] return self._valid_ip_addresses(whitelist)
request.META.update({ "CSRF_COOKIE_USED": True, "CSRF_COOKIE": _get_new_csrf_token(), }) request.csrf_cookie_needs_reset = True
self.setUpTestData() return super(TestCase, self)._fixture_setup()
def is_browser_on_page(self): return self.q(css='body.view-subsection').present
return key_checker(['type'])(tab_dict, raise_error)
def g_test(x): return x ** 3, (3 * x ** 2).mean(axis=-1)
import salt.ext.six as six
warnings.warn("irow(i) is deprecated. Please use .nth(i)", FutureWarning, stacklevel=2) return self.nth(i)
xmin, xmax = plt.xlim() ymin, ymax = plt.ylim() coef = clf.coef_ intercept = clf.intercept_
from salt.exceptions import CommandExecutionError from salt.ext import six
strs = 'google', 'wikimedia', 'wikipedia', 'wikitravel' ds = Series(strs)
import os.path import msgpack
patch_stack = patches.reshape((B*OR*OC, KR*KC*CH))
Membership.objects.create( membership_country_id=self.soviet_union.id, person_id=self.bob.id, group_id=self.republican.id)
template_context['js_init_parameters'] = json.dumps(frag.json_init_args).replace("/", r"\/")
panel4d = Panel4D(self.panel4d._data) self.assertIs(panel4d._data, self.panel4d._data)
assert_raises(ValueError, lambda X, y: GradientBoostingClassifier( loss='deviance').fit(X, y), X, [0, 0, 0, 0])
response = requests.get(self._get_url("api/v1/annotations")) self.assertEqual(response.status_code, 400)
assert_index_equal(left.columns, right.columns, exact=check_column_type, check_names=check_names, check_less_precise=check_less_precise, check_exact=check_exact, check_categorical=check_categorical, obj='{0}.columns'.format(obj))
Worker.objects.filter(department__lte=0)
}
return self._df_model_raw
self._create_block_hierarchy() self.store.publish(self.course.location, self.user_id)
legacy_profile = UserProfile.objects.get(id=self.user.id) name_change_info = legacy_profile.get_meta()["old_names"] self.assertEqual(expected_entries, len(name_change_info)) return name_change_info
course_file = StringIO(xml_data.encode('ascii', 'ignore')) xml_obj = etree.parse(course_file, parser=edx_xml_parser).getroot()
return cls.current().base_url
CourseStaffRole(self.course.id).add_users(self.instructor) self.test_send_to_all()
try: remove_all_instructors(course_key) except Exception as err: log.error("Error in deleting course groups for {0}: {1}".format(course_key, err))
self.assertIn(self.test_form, resp.content)
with warnings.catch_warnings(): warnings.filterwarnings("ignore", message=".*incomparable objects.*", category=RuntimeWarning)
if self.closed == 'right': binner = binner[1:] else: binner = binner[:-1]
filtered = self.panel.to_frame() expected = self.panel.to_frame().dropna(how='any') assert_frame_equal(filtered, expected)
monitoring_dataset = DenseDesignMatrix(X=X, y=Y)
self._each_parens('[x+y]', 'x+y', '[')
ret['result'] = False ret['comment'] = 'Failed to create data pipeline {0}: {1}'.format( name, result_pipeline_definition['error']) return ret
generic_relation_concrete = GenericRelation(Relation)
return self.get_displayable_field_names() + ['edit_link']
yml_obj = obj.copy()
slices = gen_even_slices(10, -1) assert_raises_regex(ValueError, "gen_even_slices got n_packs=-1, must be" " >=1", next, slices)
expected = Timestamp('3/11/2012 05:00', tz=self.tz('US/Eastern'))
import integration
course_modes = CourseMode.modes_for_course( obj.id, include_expired=self.include_expired, only_selectable=False ) return [ ModeSerializer(mode).data for mode in course_modes ]
state_client.set( username=admin.username, block_key=usage_key, state={'field_a': 'x', 'field_b': 'y'} )
self.find_css('.actions .delete').first.click() confirm_prompt(self.page)
other_result = s.interpolate(method='values')
if key.scope not in self.VALID_SCOPES: return False
decision_only = OneVsRestClassifier(svm.SVR()).fit(X_train, Y_train) assert_raises(AttributeError, decision_only.predict_proba, X_test)
ms = MeanShift() assert_false(hasattr(ms, "cluster_centers_")) assert_false(hasattr(ms, "labels_"))
if is_completed: msg = Messages.ORDER_COMPLETED.format(order_number=TEST_ORDER_NUMBER) self.assertResponseMessage(response, msg) else: self.assertResponsePaymentData(response)
continue
set_crontab(
pass
if len(types) == 1: return ret[types[0]] else: for key in ret.keys(): if key not in types: del ret[key]
from __future__ import absolute_import import os import sys import stat import time import uuid import pprint import logging import yaml
error = ValidationError(error)
self.assertEqual( self.run_function('xattr.read', [NO_FILE, 'spongebob']), 'ERROR: File not found: {0}'.format(NO_FILE))
for db_alias in self.dbs.keys(): sh("cp {db} {db_cache}".format(db_cache=self.db_caches[db_alias], db=self.dbs[db_alias]))
log.error('Pillar data could not be refreshed. ' 'One or more masters may be down!')
from __future__ import unicode_literals
curr_minion = {} curr_minion.update(minion_info) curr_minion.update({'id': minion}) minions[minion] = curr_minion
if not child_class: child_class = self.CHILD_CLASS return self.children(child_class)[index]
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
course_policy_dir_name = courselike.url_name
result = store.select('df2', start=5, stop=10) expected = df[5:10] tm.assert_frame_equal(result, expected)
is_movable = True
AutoAuthPage(self.browser, course_id=self.course_id).visit()
iterator=False, chunksize=None,
course = modulestore().get_course(course_id, depth=4)
return (router, subnet)
self.events.append({"event": event, "event_type": event_type}) old_publish(block, event_type, event)
for op in ['max', 'min']: for klass in [Index, Series]:
ws.close()
try: model.add_polyak_channels(self._worker.param_to_mean, algorithm.monitoring_dataset) except AttributeError: pass
extend(state('.start').stateconf.require(stateconf='xxx::goal'))
return {"username": settings.SAUCE.get('USERNAME'), "access-key": settings.SAUCE.get('ACCESS_ID')}
time.sleep(1) return info(name).get('uid') == uid
try: marty.edited.add(dive, bulk=False) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
test_data = state_run['cmd_|-test_non_failing_state_|-echo "Should not run"_|-run']['comment'] expected_result = 'State was not run because onfail req did not change' self.assertIn(expected_result, test_data)
if self.subsample < 1.0: self.oob_improvement_ = np.zeros((self.n_estimators), dtype=np.float64)
if data_columns is None: data_columns = d[selector]
key = Timestamp(key, tz=self.tz) return Index.get_loc(self, key, method, tolerance)
return [x for x in cmd['stdout'].split('\n') if check_ip(x)]
return numpy.arcsinh(1. / val)
self._consolidate_inplace() return len(self.blocks) > 1
instance.image.delete() instance.delete()
self.creation_counter = Field.creation_counter Field.creation_counter += 1
from __future__ import unicode_literals
stop = 0 for k, centroid in enumerate(centroids): start, stop = stop, stop + n_samples_per_cluster[k]
with override_settings(LANGUAGE_CODE=language_code, USE_L10N=True):
self.assertEqual( [len(courses_list), len(courses_list_by_groups), len(courses_summary_list)], [0, 0, 0] )
response = explicit_default_view(request, '13') self.assertEqual(response.content, b'Hello World 1')
child = descriptor.get_children()[0] self.assertEqual(child.due, None)
if name: cmd = '{0} {1}'.format(cmd, name)
(13, True, u"False"),
from salttesting.helpers import ensure_in_syspath
from ._scipy_sparse_lsqr_backport import lsqr as sparse_lsqr
sparse_results = sparse_classifier.predict(X_test_sparse) dense_results = dense_classifier.predict(X_test) assert_array_equal(sparse_results, dense_results)
log = logging.getLogger(__file__)
import calendar self.assertEqual(calendar.timegm(base_dt.timetuple()) * 1000000000, base_expected)
mock_get.return_value.content = json.dumps({"1": 2}) self.assertRaises(EdxNotesParseError, helpers.get_notes, self.request, self.course)
if text_message is None: text_message = html_to_text(html_message)
'result': {'start_index': 2, 'end_index': 16, 'quote_length': 3}
self.add_to_cart() self.request.user = self.user context = user_has_cart_context_processor(self.request) self.assertFalse(context['should_display_shopping_cart_func']())
return chapter_titles.index(title.lower()) + 1
rs = ser.replace([np.nan, 'foo', 'bar'], -1)
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
idx = np.arange(X.shape[0]) np.random.seed(RANDOM_SEED) np.random.shuffle(idx) X = X[idx] y = y[idx]
return value.encode(ISO_8859_1) if six.PY3 else value
from __future__ import absolute_import import copy import logging import re import os.path
owner = batch.owner assert 'Subtensor' in str(owner.op) batch = owner.inputs[0]
return [child.tag for child in elem]
redirect_url = request.GET.get('redirect_url') return view_student_survey(request.user, survey_name, redirect_url=redirect_url)
shrinkages = np.logspace(-2, 0, 30) negative_logliks = [-ShrunkCovariance(shrinkage=s).fit(X_train).score(X_test) for s in shrinkages]
df = DataFrame(data=np.random.randn(100, 50))
for option in self._find_options(inputfield): if option['choice'] == choice: return option
expected = DataFrame(comb, columns=names, index=[1, 2]) result = DataFrame(mrecs, index=[1, 2]) assert_fr_equal(result, expected)
result = grouped['A'].agg('std') expected = grouped['A'].std() assert_series_equal(result, expected)
new_sum_squared_grad = ( sum_square_grad + T.sqr(grads[param]) )
exc_info_on_loglevel=logging.DEBUG
return year - year_of_birth - 1
log.warning('Cannot get projects, you may need to update libcloud to 0.15 or later') return False
__BACKUP_ATTRIBUTE_NAME = '__monkey_patch'
return self._get_field('nanoseconds')
assert len(str(e))
non_editable_fields = super(VerticalBlock, self).non_editable_metadata_fields non_editable_fields.extend([ self.fields['due'], ]) return non_editable_fields
self.track_selection_page.enroll('verified')
from __future__ import absolute_import import re
accepts_logins = False
from __future__ import unicode_literals
etree.fromstring(etree.tostring(root), self.xmlparser)
sampling_algorithm["custom-auto"] = \ lambda n_population, n_samples, random_state=None: \ sample_without_replacement(n_population, n_samples, method="auto", random_state=random_state)
self.connection.close()
outfile = os.path.relpath(os.path.join(savefig_dir,filename), source_dir)
grains['virtual_subtype'] = 'Xen Dom0'
import salt.ext.six as six
self.assertTrue(self.settings_detail.entrance_exam_field)
self.assertEqual(self.export_page.header_text, 'Course Export')
response = self.fetch('/', headers={'Accept': self.content_type_map['xml']}) self.assertEqual(response.code, 406)
df.loc[0]['z'].iloc[0] = 1. result = df.loc[(0, 0), 'z'] self.assertEqual(result, 1)
m = re.search(br'<a href="([^"]*)"[^>]* id="lookup_id_defendant1"', response.content)
X, y = make_blobs(n_samples=80, centers=4) brc = Birch(threshold=0.5, n_clusters=None) brc.fit(X) check_threshold(brc, 0.5)
if ax is None: import matplotlib.pyplot as plt ax = plt.gca()
import integration import salt.utils
return self.q(css='body.view-library').present
link_cohort_to_partition_group( cohort, self.user_partition.id, self.groups[0].id, )
value = str(value).lower()
return result
def __setstate__(self, state): self._is_child = True self.__init__(state['opts'], log_queue=state['log_queue'])
log.debug("children of randomize module (should be only 1): %s", self.child)
X = X[:5, :] y = y[:5] clf.fit(X, y) assert_array_equal(np.diff(clf.scores_) > 0, True)
usage_key_string = json.loads(resp.content).get('locator') return UsageKey.from_string(usage_key_string)
config_course_cohorts( course, is_cohorted=True, auto_cohorts=["AutoGroup"] )
self.assertNotEqual(t1.render(Context({})), t2.render(Context({})))
embargo_redirect = embargo_api.redirect_if_blocked( course.id, user=request.user, ip_address=get_ip(request), url=request.path ) if embargo_redirect is not None: return redirect(embargo_redirect)
world.wait(1) continue
wes_timer = timeit.Timer(stmt='_tseries.fast_unique(arr)', setup=setup % sz)
if valid_commands: if cmd not in valid_commands: channel.send_message('Using {0} is not allowed.'.format(cmd)) return
non_draft_loc = as_published(location)
import salt.utils import salt.utils.mac_utils from salt.exceptions import CommandExecutionError
import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm from sklearn.neighbors import KernelDensity
from __future__ import unicode_literals
_check_case([0], [5], [], [], [], []) _check_case([], [], [], [], [], [])
wkb_r = WKBReader()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.store.revert_to_published(component.location, self.user_id) component = self.store.get_item(component.location) self.assertFalse(self.store.has_changes(component))
with self.assertRaises(TypeError): microsite.get_backend('microsite_configuration.microsite.get_backend', BaseMicrositeBackend)
kwargs.pop('freq', None) return MultiIndex.from_tuples(values, **kwargs)
from __future__ import absolute_import
df = tm.makeDataFrame() store.append('df', df)
from __future__ import absolute_import, print_function import os import copy import math import random import logging import operator import collections import json from functools import reduce
try: final_grade = CreditRequirementStatus.objects.get( username=username, requirement__namespace="grade", requirement__name="grade", requirement__course__course_key=course_key, status="satisfied" ).reason["final_grade"]
for n in range(10): for s, i in self.d.items(): i_rec = self.encode_decode(i) assert_series_equal(i, i_rec)
self.page.q(css=input_selector).fill(time) self.page.q(css=input_selector).results[0].send_keys(Keys.ENTER)
cmd.extend(args)
if len(self.classes_) == 2: return dec_func[:, 1] - dec_func[:, 0] return dec_func
url = reverse('dashboard')
refund_cutoff_date = self.refund_cutoff_date() if refund_cutoff_date and datetime.now(UTC) > refund_cutoff_date: return False
import salt.ext.six as six
Xt = np.array(X).T
with self.assertNumQueries(24): self.client.get(self.teams_url)
import functools import glob import json import logging import os import shutil import subprocess import sys import time import traceback import base64 from salt.utils import vt
kf = cval.KFold(300, 3) check_cv_coverage(kf, expected_n_iter=3, n_samples=300)
EmptyPromise( lambda: self.find_css('.actions .delete.action-icon').present, 'Certificate delete button is displayed' ).fulfill()
result = f.clean('1:30 PM') self.assertEqual(result, time(13, 30, 0))
test_file = File.objects.get(pk=test_image.pk) foo_file = FooFile(my_file=test_file) foo_file.save()
django_settings.SOCIAL_AUTH_PROTECTED_USER_FIELDS = ['email']
self.assertNotIn(self.notes_tab, self.course.tabs)
self._assert_num_attempts(students, initial_attempts) self._test_run_with_task(reset_problem_attempts, 'reset', 0, expected_num_skipped=num_students) self._assert_num_attempts(students, 0)
self._validate(is_numeric, batch) return 0
for key in cli_config: setattr(self.options, key, cli_config[key])
ret = self.process_request("get", "/insecure/page") self.assertEqual(ret, None)
df = _make_mixed_dtypes_df('int') _check_mixed_dtypes(df)
cp = salt.utils.alias_function(copy_from, 'cp')
from __future__ import unicode_literals
if self.is_offset_lhs: lvalues = to_timedelta(lvalues, box=False) if self.is_offset_rhs: rvalues = to_timedelta(rvalues, box=False)
self.selenium.implicitly_wait(0) try: yield finally: self.selenium.implicitly_wait(self.implicit_wait)
from salt.states import pecl
self.field_exclusions.add((usage_id, field_name))
neigh_ind = neigh_ind[ sample_range, np.argsort(dist[sample_range, neigh_ind])]
self.execute_check_function(idset, submission)
numpy_f = lambda: numpy_roundtrip(filename_numpy, arr, arr) numpy_time = timeit(numpy_f, iterations) / iterations
if kwargs['using'] == MIGRATE_DATABASE: self.call_counter = self.call_counter + 1 self.call_args = kwargs self.signal.disconnect(self, sender=APP_CONFIG)
from __future__ import absolute_import import re
FOOTER_OPENEDX_URL = "http://open.edx.org"
fields = ((f[1:] if f.startswith('-') else f) for f in fields)
attachment = MIMEBase(basetype, subtype) attachment.set_payload(content) Encoders.encode_base64(attachment)
if hasattr(self, 'target_source'): return self.target_source else: return 'targets'
X = check_array(X) if X.ndim == 1: X = X[:, np.newaxis]
with ensure_clean_store(self.path) as store:
with tm.assert_produces_warning(UserWarning): Categorical([0, 1], name="a")
self.setup_logfile_logger() verify_log(self.config) profiling_enabled = self.options.profiling_enabled
td_as_int = [1, 2, 3, 4]
import salt.utils
with self.settings(DEBUG=True): self.verify_unsafe_response(sensitive_view, check_for_vars=False) with self.settings(DEBUG=False): self.verify_safe_response(sensitive_view, check_for_vars=False)
self._make_eligible()
return aside_id.aside_type
lookup_name = 'overlaps_right'
self.coach = coach = AdminFactory.create() self.client.login(username=coach.username, password="test")
from __future__ import absolute_import, print_function
from __future__ import absolute_import
from __future__ import absolute_import import os
return self._div_for_xblock_id(xblock_id)[0].find_element_by_css_selector( '.header-actions .{action}-button.action-button'.format(action=action) )
n_jobs, n_estimators, starts = _partition_estimators(self.n_estimators, self.n_jobs)
last_el = self.table_of_contents[-1] while last_el.getchildren(): last_el = last_el[-1]
if self.instance and self.instance.get("pinned") is None: self.instance["pinned"] = False
'AUTOPLAY_VIDEOS': False,
__virtualname__ = 'buildout' log = logging.getLogger(__name__)
query = self.q(css='.u-field-{}'.format(field_id)) return query.text[0] if query.present else None
b = Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16)) p = Person.objects.create(name="Marty Alchin")
status = VerificationStatus.get_user_status_at_checkpoint( self.user, self.course_key, self.reverification_location ) self.assertEqual(status, "submitted")
from __future__ import absolute_import import json
input_dict = {'1_2_1': '21'} correct_map = problem.grade_answers(input_dict)
return
self.set(key, _DELETED_SENTINEL)
if module.has_children: new_children = [] for child_loc in module.children: child_loc = child_loc.map_into_course(dest_course_id) new_children.append(child_loc)
pd.concat([df1, df2_obj])
sampling_algorithm["numpy-permutation"] = \ lambda n_population, n_sample: \ np.random.permutation(n_population)[:n_sample]
X, y = make_blobs(random_state=1) for Model in [DPGMM, VBGMM]: dpgmm = Model(n_components=10, random_state=1, alpha=20, n_iter=50, verbose=1)
df1 = DataFrame(columns=['a', 'b'], data=[[1, 11], [0, 22]])
return other in self.children
bkdir = os.path.join(bkroot, parent_dir[1:])
self.assertEqual(copy.names, original.names) self.assertIsNot(copy.names, original.names)
port: 8000 address: 0.0.0.0 backlog: 128 ssl_crt: /etc/pki/api/certs/server.crt ssl_key: /etc/pki/api/certs/server.key debug: False disable_ssl: False webhook_disable_auth: False cors_origin: null
result = self.read_table(path, encoding='utf-16') self.assertEqual(len(result), 50)
result = self.index.difference(self.index.sortlevel(1)[0]) self.assertEqual(len(result), 0)
empty = self.index[:2] & self.index[2:] expected = self.index[:0] self.assertTrue(empty.equals(expected))
self.assertEqual(result['success'], 'incorrect')
assert_array_equal(est.oob_improvement_[-10:] == 0.0, np.zeros(10, dtype=np.bool))
from __future__ import absolute_import import os import random import string from distutils.version import LooseVersion
super(BadImplementationAbstractEnrollmentReportProvider, self).get_payment_info(user, course_id)
return self._geomset_attribute('difference', geom, **kwargs)
__virtualname__ = 'ip'
self.assertEqual(len(second_chunk.strip()), 1449)
self.old_level_tags = base.LEVEL_TAGS base.LEVEL_TAGS = utils.get_level_tags()
if hasattr(self, "doc"): doc = self.doc else: doc = None
log.warning('Authentication failure of type "eauth" occurred.') return ''
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
def __call__(self, event): context = event.get('context', {}) course_id = context.get('course_id')
return sorted(set(estimators), key=itemgetter(0))
if salt.utils.is_windows(): return (False, 'The mount module cannot be loaded: not a POSIX-like system.') return True
pass
runtime = SubFactory(ContainerDescriptorRuntimeFactory) children = range(3)
dr = date_range(datetime(2011, 11, 6, 1, 30), periods=3, freq=datetools.Hour()) self.assertRaises(pytz.AmbiguousTimeError, dr.tz_localize, tz)
return environ.get(key)
if not result.columns.equals(obj.columns): return self._transform_general(func, *args, **kwargs)
'interface': str,
'syndic_wait': int,
if idx.equals(df.index) and cols.equals(df.columns): return df.copy()._values
last = row[0] for i in range(1, len(row)): if row[i] == '' or row[i] is None: row[i] = last else: last = row[i] return row
key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))
import salt.ext.six as six try: import git HAS_GITPYTHON = True except ImportError: HAS_GITPYTHON = False
if page_refresh: self.browser.refresh() return self.q(css='{} .section-name'.format(parent_css)).text
from __future__ import absolute_import, print_function
import os import errno import logging
pkg_resource.__grains__ = {} pkg_resource.__salt__ = {}
if not GlobalStaff().has_user(request.user): raise PermissionDenied()
MAX_ATTEMPTS = 30 for i in range(MAX_ATTEMPTS): if exists( table_name, region, key, keyid, profile ): return True else:
if missing_vms: return ret
PIPELINE_CSS_COMPRESSOR = None PIPELINE_JS_COMPRESSOR = None
return valid_type.__name__
__func_alias__ = { 'list_': 'list' }
tm.assertIsInstance(res, np.ndarray)
assert_almost_equal(dists[1], 1 - np.cos(np.pi / 4))
self.cart.purchase() resp = self.client.get(instructor_dashboard) self.assertEqual(resp.status_code, 200)
self.answer_problem(correct=False) self.problem_page.click_check() self.wait_for_status('incorrect')
_MIXED_MODULESTORE = None
response = self.client.get(reverse('branding.views.courses')) self.assertEqual(response.status_code, 200)
self.assertFalse(res_json['success'])
request = mock.Mock() with self.assertRaises(Throttled): self.view.check_throttles(request)
keys = list(keys)
leaf_weights = node_weights[node_weights != 0] assert_greater_equal( np.min(leaf_weights), total_weight * est.min_weight_fraction_leaf, "Failed with {0} " "min_weight_fraction_leaf={1}".format( name, est.min_weight_fraction_leaf))
from __future__ import unicode_literals
from_xmodule = [entry_point for entry_point in entry_points if entry_point.dist.key == 'xmodule'] if from_xmodule: return default_select(identifier, from_xmodule) else: return default_select(identifier, entry_points)
import salt.utils.cloud
res = self.client.get('/dates/books/2008/week/12/') self.assertEqual(res.status_code, 404)
try: d = _deprecated_options[key] except KeyError: return None else: return d
self.b.friends.remove(self.a)
try: float(tokens[i]) return None except ValueError: pass
return mode_slug in cls.VERIFIED_MODES
attempt_2 = SoftwareSecurePhotoVerification(user=user) attempt_2.mark_ready() assert_equals(attempt_2, SoftwareSecurePhotoVerification.active_for_user(user))
try: imp.find_module(app_name) except ImportError: try: __import__(app_name) except ImportError: continue INSTALLED_APPS += (app_name,)
has_children = True field1 = String(default="something", scope=Scope.user_state) field2 = Integer(scope=Scope.user_state)
user_name = 'SYSTEM'
at.__grains__ = {} at.__salt__ = {}
DATE_INPUT_FORMATS = [
self.user = UserFactory.create( username="inactive", email="inactive@example.com", password=self.PASSWORD, is_active=True )
from distutils.version import LooseVersion from sklearn.utils.extmath import svd_flip
_address_class = IPv6Address
start = stop = level_index.slice_indexer(key.start, key.stop, key.step, kind='loc') step = start.step
return super(NullBackend, self).is_request_in_microsite()
X = np.sqrt(fac) * (Xc / std) U, S, V = linalg.svd(X, full_matrices=False)
for_update_sql = tested_connection.ops.for_update_sql(nowait) sql = tested_connection.queries[-1]['sql'] return bool(sql.find(for_update_sql) > -1)
changed = [] for target in pkg_params:
request_uuid = self._create_credit_request_and_get_uuid() response = self._credit_provider_callback(request_uuid, 'approved', timestamp=timestamp) self.assertEqual(response.status_code, 400)
df.columns = list('aaaa') result = df.iloc[3:5, 0:2] str(result) result.dtypes
import logging import socket import json from distutils.version import LooseVersion
conditional_probs = T.nnet.sigmoid(conditional_params[0]) return self.theano_rng.uniform( size=(num_samples, self.ndim), dtype=theano.config.floatX ) < conditional_probs
mcd = MinCovDet().fit(X) err_loc_mcd[i, j] = np.sum(mcd.location_ ** 2) err_cov_mcd[i, j] = mcd.error_norm(np.eye(n_features))
'parse_dates': False, 'keep_date_col': False, 'dayfirst': False, 'date_parser': None,
if directory is None and action != 'selfupdate': raise SaltInvocationError( 'The \'directory\' argument is required for composer.{0}'.format(action) )
from __future__ import unicode_literals
inv = not callable(kernel)
msg_format += _(" (skipping {skipped})")
options.c = 1 self.assertEqual(len(holder), 1)
fifth = -(e.count('.'))
if not hasattr(self, 'mask_weights'): self.mask_weights = None
self.assert_redirect_to_provider_looks_correct(self.client.get( pipeline.get_login_url(self.provider.provider_id, pipeline.AUTH_ENTRY_LOGIN)))
import salt.ext.six as six from salt.ext.six.moves.urllib.parse import urlparse as _urlparse try: import msgpack except ImportError: import msgpack_pure as msgpack
import json import logging import requests
'jinja_trim_blocks': bool,
class SongAdmin(admin.ModelAdmin): pass site.register(Song, SongAdmin)
pattern=r'^((\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})|([A-Za-z0-9][A-Za-z0-9\.\-]{1,255}))$', min_length=1, required=True)
from salt.exceptions import CommandExecutionError from salt.modules import parted
from salt.utils.odict import OrderedDict
if settings.FEATURES.get('ENABLE_THIRD_PARTY_AUTH', False): enable_third_party_auth()
PLATFORM_TWITTER_ACCOUNT = ENV_TOKENS.get('PLATFORM_TWITTER_ACCOUNT', PLATFORM_TWITTER_ACCOUNT) PLATFORM_FACEBOOK_ACCOUNT = ENV_TOKENS.get('PLATFORM_FACEBOOK_ACCOUNT', PLATFORM_FACEBOOK_ACCOUNT)
self.freeze_set = self.freeze_set.union(parameter_set)
cache.delete(CreditProvider.CREDIT_PROVIDERS_CACHE_KEY)
return
result = f.clean('13:30') self.assertEqual(result, time(13, 30, 0))
with self.assertRaises(InvalidDecimal): lm = LayerMapping(Interstate, inter_shp, inter_mapping) lm.save(silent=True, strict=True) Interstate.objects.all().delete()
user2 = UserFactory() with self.assertRaises(PermissionDenied): reindex_course_and_check_access(self.course.id, user2)
from __future__ import absolute_import
output = self.engine.render_to_string('i18n12') self.assertEqual(output, 'de')
self.user_partition = UserPartition( self.TEST_ID, self.TEST_NAME, self.TEST_DESCRIPTION, self.TEST_GROUPS, extensions[0].plugin, self.TEST_PARAMETERS, )
return do_ntranslate(singular, plural, number, 'ungettext')
param_grid = ParameterGrid(self.param_distributions) grid_size = len(param_grid)
self.cfunc = getattr(lgeos, func_name) self.threaded = False
resp = self.create_xblock(category='vertical', parent_usage_key=parent_usage_key) self.assertEqual(resp.status_code, 200) return self.response_usage_key(resp)
self.cache.set(key, compressed_pickled_data, None)
for n_neighbors in [3, 5, 7]: I_computed = _compute_mi(x, y, True, False, n_neighbors) assert_almost_equal(I_computed, I_theory, 1)
__virtualname__ = 'json5'
import integration
elif level >= self.nlevels: raise IndexError('Too many levels: Index has only %d levels, ' 'not %d' % (self.nlevels, level + 1))
all_folds[te2] = 1
if not self.is_cohorted: return False return bool(self.cohort_config.get( "auto_cohort", False))
from salttesting import TestCase, skipIf from salt.exceptions import SaltInvocationError from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, mock_open, NO_MOCK, NO_MOCK_REASON )
level_to_sort = _convert_level_number(0, this.columns) this = this.sortlevel(level_to_sort, axis=1)
self.page = _Page(page_num, num_pages) self.base_url = request.build_absolute_uri() self.count = result_count super(DiscussionAPIPagination, self).__init__()
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
f = lambda x: x.strip() converter = {0: f} df = self.read_csv(StringIO(data), header=None, converters=converter) self.assertEqual(df[0].dtype, object)
import salt.utils.http
axes = self.input_axes assert len(axes) == 4
logreg.fit(X, Y)
return self.references_model(model_name, app_label)
if acl_name == '': _search_name = __current_perms[name].get('comment').get(_acl_type) else: _search_name = acl_name
argv = self.opts['argv']
FEATURES['ORGANIZATIONS_APP'] = True
offset1 = CDay() offset2 = CDay() self.assertFalse(offset1 != offset2)
result = f.clean('12.21.2010') self.assertEqual(result, date(2010, 12, 21))
self.assertDeserializeEqual('"false"', '"false"') self.assertDeserializeNonString()
pass
relations = {}
title = None
self.app_configs = OrderedDict()
log = logging.getLogger(__name__)
pass
split_test = self.get_item_from_modulestore(self.split_test_usage_key, True) self.assertEqual(expected_number, len(split_test.children)) return split_test
super(MyFetcher, self).__init__() self.client = client
values = self.values if deep: values = values.copy() return self.make_block_same_class(values)
return self.used_parameters.get(self.parameter_name)
dt = datetime(2015, 10, 25, 2, 30, 0)
self.assertTrue(self.run_function('pkgutil.forget', [TEST_PKG_NAME]))
existing_answers = survey.get_answers(user=user).get(user.id, {})
__virtualname__ = 'lvm'
functions = list(reversed(functions))
with self.assertNumQueries(4): self.client.get('/dates/books/2008/reverse/')
a, b = first, second assert a in b, "%s: %r is not in %r" % (msg.format(a, b), a, b)
continue
return JsonResponse(result, encoder=EdxJSONEncoder)
from __future__ import absolute_import import os import tempfile import logging import shutil
import salt.utils
params = { 'enrollment_action': 'enroll', 'course_id': unicode(self.course.id) } self.client.post(reverse('change_enrollment'), params)
return _AssertTemplateUsedContext(self, context_mgr_template)
import logging import os
def test_split(): skip_if_no_data() n_train = 100 n_valid = 200 n_test = 300
return line.endswith('\n' if isinstance(line, six.text_type) else b'\n')
HOSTNAME_MODULESTORE_DEFAULT_MAPPINGS = { 'preview\.': 'draft-preferred' }
should_yield_node = filter_func(current_node) if should_yield_node: yield current_node
import copy import fnmatch import logging import os import signal import sys
G = neighbors.kneighbors_graph(X, n_neighbors, mode='distance').toarray()
response['X-XRDS-Location'] = get_xrds_url('xrds', request) return response
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
def __new__(self, value, setting_name): return str.__new__(self, value) def __init__(self, value, setting_name): self.setting_name = setting_name
if self._selection is None: return self.obj.name else: return self._selection
try: import win32api import win32file import win32security import win32con from pywintypes import error as pywinerror HAS_WINDOWS_MODULES = True except ImportError: HAS_WINDOWS_MODULES = False
self.go_to_tab_and_assert_problem(1, self.problem1_name) problem1_content_after_coming_back = self.problem_page.problem_content self.assertEqual(problem1_content_before_switch, problem1_content_after_coming_back)
import salt.fileserver import salt.utils from salt.utils.event import tagify import salt.ext.six as six
del channel
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
__virtualname__ = 'docker_events'
video = ItemFactory.create(parent_location=child_vertical.location, category="video", display_name="My Video") self.assertIsNone(xblock_studio_url(video))
selector = slice(None, None)
return self._maybe_mask_results(1e-9 * self.asi8)
comment = str(ret['comment']) comment = comment.strip().replace( u'\n', u'\n' + u' ' * 14)
import integration from salt.config import cloud_providers_config, vm_profiles_config from utils.virtualbox import vb_xpcom_to_attribute_dict, vb_clone_vm, vb_destroy_machine, vb_create_machine, \ vb_get_box, vb_machine_exists, XPCOM_ATTRIBUTES, vb_start_vm, vb_stop_vm, \ vb_get_network_addresses, vb_wait_for_network_address, machine_get_machinestate_str
add_info = self.run_function('group.info', [ADD_GROUP]) if add_info: self.run_function('group.delete', [ADD_GROUP])
self.template_name = 'admin_doc/missing_docutils.html' return self.render_to_response(admin.site.each_context(request))
dt = datetime(2011, 4, 16, 0, 0) ts = Timestamp.fromordinal(dt.toordinal()) self.assertEqual(ts.to_pydatetime(), dt)
response = searcher.search(field_dictionary={"library": library_search_key}) self.assertEqual(response["total"], 2)
self.refresh_course()
self.cert.mode = 'audit' self.cert.status = status self.cert.save()
subject = render_to_string('emails/activation_email_subject.txt', context) subject = ''.join(subject.splitlines()) message = render_to_string('emails/activation_email.txt', context)
for ds in dataset: for prop in properties.keys():
rows = [[1, 1, 3, 4], [1, 2, 3, 4], [2, 1, 3, 4], [2, 2, 3, 4]]
self.factory(alpha=0, learning_rate="optimal")
for page in self.pages: page.visit()
for item in ret: self.assertSaltTrueReturn(item)
values = _ensure_datetimelike_to_i8(self)
help_text=_( u"Badge images must be square PNG files. The file size should be under 250KB." ), upload_to='course_complete_badges', validators=[validate_badge_image]
self.dashboard_page.visit() self.assertTrue(self.dashboard_page.has_library(name=name, org=org, number=number))
return {"result": "inclusion_no_params_from_template - Expected result"}
self.assertTrue(self._is_valid_key(key), msg="Failed for unicode character {0}".format(unicode_char))
print("{}: {}".format(self.full_path, self.rule.rule_id), file=out)
return stdout, stderr
self.assertRaises(NotImplementedError, s.any, bool_only=True, level=0) self.assertRaises(NotImplementedError, s.all, bool_only=True, level=0)
return super(AdaBoostClassifier, self).fit(X, y, sample_weight)
return [force_text(capi.get_field_name(capi.get_field_defn(self._ldefn, i)), self._ds.encoding, strings_only=True) for i in range(self.num_fields)]
if case_sensitive: casify = lambda x: x else:
self._check_linkedin_visibility(False)
from scipy import misc face = misc.face(gray=True)
colors_ = cycle(colors.cnames.keys())
self.assertTrue(issubclass(df.BoolCol.dtype.type, np.integer), "BoolCol loaded with incorrect type")
if os.path.isfile(cache_file): os.remove(cache_file)
from sklearn.externals.six.moves import cStringIO as StringIO import sys
self.validate_version(where)
return nan_idxs
with self.assertNumQueries(1): with self.assertRaises(ObjectDoesNotExist): api.get_bookmark(user=self.other_user, usage_key=self.vertical_1.location)
return u'grades'
import yaml import salt.ext.six as six
restricted = Value42()
super(TestCohorts, self).setUp() self.toy_course_key = ToyCourseFactory.create().id
return self.model( session_key=self._get_or_create_session_key(), session_data=self.encode(data), expire_date=self.get_expiry_date(), )
reqs = CreditRequirement.get_course_requirements(course_key)
with override(None): return force_text(self.verbose_name)
return False
tm.assert_frame_equal(frame1, frame3)
self.assertFalse(hasattr(course_overview, 'image_set'))
monitoring_dataset = DenseDesignMatrix(X=X)
import salt.returners
staff = set(CourseStaffRole(course_key).users_with_role()).union(instructors)
df = SparseDataFrame({'A': [nan, 0, 1]})
response = self._regenerate( course_key=self.CERT_COURSE_KEY, username=self.STUDENT_USERNAME ) self.assertEqual(response.status_code, 200)
geom_transform = void_output(lgdal.OGR_G_Transform, [c_void_p, c_void_p]) geom_transform_to = void_output(lgdal.OGR_G_TransformTo, [c_void_p, c_void_p])
model.tag[self._tag_key]['best_cost'] = self.best_cost
with option_context('display.unicode.east_asian_width', True):
if group is not None and not append: self._handle.remove_node(group, recursive=True) group = None
opts = Article._meta
faces_centered = faces - faces.mean(axis=0)
from __future__ import unicode_literals
assert not any([key in rval for key in contrib]) assert all([key in params for key in contrib])
self._feat = feat self._index = index
self.assertEqual(df['key'].dtype, 'object')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
result = sparse.loc[orig.x % 2 == 1] exp = orig.loc[orig.x % 2 == 1].to_sparse() tm.assert_sp_frame_equal(result, exp)
expected = to_datetime(['2012'])[0] result = to_datetime('2012') self.assertEqual(result, expected)
if which_set != 'unlabeled': data_y = data['labs_ex'][set_indices] data_y = data_y[ex_range] - 1
a = 10000000000000000 b = a + 1 s = Series([a, b])
#pylint: disable=E0602
self.__setup_signals()
return
return tuple(tuple(ot) for ot in option_together)
self.assertFalse(Index(['a', 'b', 'c']).equals(Index(['a', 'b'])))
self.assertOLXIsDraftOnly(block_list_to_revert) self.publish(block_list_to_revert) self.assertOLXIsPublishedOnly(block_list_to_revert)
continue
user = cc.User.from_django_user(request.user) commentable = cc.Commentable.find(commentable_id) user.follow(commentable) return JsonResponse({})
draft_items_locations = {item.location for item in draft_items} return [ item for item in base_get_items(MongoRevisionKey.published) if item.location not in draft_items_locations ]
X = np.cast['float32'](train['X'])
__virtualname__ = 'cisconso'
self.course_nav.go_to_section('Test Section 2', 'Test Subsection 2')
test = SVHN('test', path=local_path) check_dtype(test) test.apply_preprocessor(pipeline, can_fit=False)
return np.empty(0, dtype=np.int), np.empty(0, dtype=float)
desc = ET.SubElement(content, 'description') desc.text = config.get_cloud_config_value( 'desc', vm_, __opts__, default=vm_['name'], search_global=False )
return redirect(AUTH_DISPATCH_URLS[AUTH_ENTRY_REGISTER])
del params["honor_code"] assert_honor_code_error("To enroll, you must follow the honor code.")
import salt.utils import os.path from salt.modules import key
kwargs['choice_type'] = 'multiple' return ResponseXMLFactory.choicegroup_input_xml(**kwargs)
mkn = max_kernel_norm dn = detector_normalization on = output_normalization
if copy: subarr = subarr.copy()
from __future__ import absolute_import
test_command = 'sysbench --num-threads=64 --test=threads ' test_command += '--thread-yields={0} --thread-locks={1} run ' result = None ret_val = {}
if HAS_GEOMETRY_COLUMNS: self.assertGeometryColumnsCount(2)
from string import ascii_letters as letters
return True
self.assertEqual(response.status_code, 403)
template = self.system.render_template('lti_form.html', self.get_context()) return Response(template, content_type='text/html')
active_tab = self._active_sequence_tab return active_tab and previous_tab_id != active_tab.attrs('data-id')[0]
self.distribution.salt_installing_pycrypto_windows = True self.run_command('install-pycrypto-windows') self.distribution.salt_installing_pycrypto_windows = None
return super(PythonSerializer, self).getvalue()
self.courseware_page.click_next_button_on_top() self.assert_navigation_state('Test Section 2', 'Test Subsection 2,1', 0, next_enabled=False, prev_enabled=True)
self._random_read = self.test_capability(b'RandomRead')
ridge.fit(X, y, sample_weight=np.ones(n_samples)) assert_greater(ridge.score(X, y), 0.9)
required.append(item_name)
import integration from salt import fileclient
if 'debconf.show' not in __salt__: return False
responsibilities = np.zeros((X.shape[0], self.n_components))
return False
try: import etcd from urllib3.exceptions import ReadTimeoutError, MaxRetryError HAS_LIBS = True except ImportError: HAS_LIBS = False
num_incorrect = num_pool - 1 num_incorrect = min(num_incorrect, len(incorrect_choices))
UserFactory.create(username=self.USERNAME, email=self.EMAIL, password=self.PASSWORD)
if instance in vmconfig['state'] and vmconfig['state'][instance] is not None: for state_cfg in vmconfig['state'][instance]: if vmconfig_type['instance'][instance] not in state_cfg: continue
log.info("background task (%s), state %s: result: %s", task_id, result_state, returned_result) task_output = InstructorTask.create_output_for_success(returned_result)
from salttesting.helpers import ensure_in_syspath, destructiveTest from salt.ext.six.moves import range ensure_in_syspath('../../')
batch_size = v.shape[0]
if expanded_nodegroup or not first_call: return ret else: log.debug('No nested nodegroups detected. ' 'Using original nodegroup definition: {0}' .format(nodegroups[nodegroup])) return nodegroups[nodegroup]
footer_el = footer_nav.find_element_by_xpath('..') return 'hidden' not in footer_el.get_attribute('class').split()
service = _get_service(name) label = service['plist']['Label']
cc_rendered_selector = self.get_element_selector(CSS_CLASS_NAMES['closed_captions']) self.wait_for_element_visibility(cc_rendered_selector, 'Closed captions rendered')
assert_true(id1, id2)
from esky import bdist_esky import bbfreeze HAS_ESKY = True
self.assertEqual(MANY_TO_MANY_CLASSES, {f.__class__ for f in m2m_type_fields})
import os import time import calendar import logging import math import binascii import salt.utils from salt._compat import string_types from salt.ext.six.moves import range as _range from datetime import datetime
if isinstance(data, (np.ndarray, Index, Series)):
course = self._create_course("verified") self._enroll(course.id, "verified") response = self._get_page('verify_student_verify_now', course.id)
return
module = CapaFactory.create(attempts=attempts - 2, max_attempts=attempts) self.assertEqual(module.check_button_name(), "Check")
assert_raises(ValueError, load_svmlight_file, datafile, n_features=20)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, call )
nargs = len(args) nreq = self._AXIS_LEN + 1
startup_info = STARTUPINFO(dwFlags=win32con.STARTF_USESTDHANDLES, hStdInput=dupin, hStdOutput=c2pwrite, hStdError=errwrite)
import salt.loader import salt.syspaths
def inner(x): if type(x) != _type: raise ValueError("Value must have type '%s'" % str(_type)) return inner
DEBUG = False USE_TZ = True SESSION_COOKIE_SECURE = False SESSION_SAVE_EVERY_REQUEST = False SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
self.assertEqual(cl.result_count, 1)
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course.id))
X_embedded = 1e-4 * random_state.randn(n_samples, self.n_components)
raise NotImplementedError
age = forms.IntegerField() class Meta: model = Person fields = ('name', 'no-field')
if not is_mongo_running(): msg = colorize('red', "Mongo is not running locally.") print msg sys.exit(1)
if not self.user_can_access_course(user, course): raise Http404
EmptyResultSet = sql.EmptyResultSet
return next((tab for tab in tab_list if tab.tab_id == tab_id), None)
raise NotImplementedError('subclasses of FileUploadHandler must provide a file_complete() method')
oa = OAS(store_precision=False) oa.fit(X) assert_almost_equal(oa.score(X), score_, 4) assert(oa.precision_ is None)
if get_option('display.latex.repr'): return self.to_latex() else: return None
float_items = [] complex_items = [] int_items = [] bool_items = [] object_items = [] sparse_items = [] datetime_items = [] datetime_tz_items = [] cat_items = [] extra_locs = []
log = logging.getLogger(__name__)
self.assertIn("Payment Form", resp.content)
ret = {'name': name, 'result': True, 'changes': {}, 'comment': ''}
raise NotImplementedError('subclasses of BaseSpatialOperations must provide a geo_db_type() method')
def func(cond, values, other): if cond.ravel().all(): return values
return self(kind='kde', **kwds)
if hasattr(response, 'render') and callable(response.render) and not response.is_rendered: response.render()
with self.assertRaises(forms.ValidationError): f.clean('13:30:05 21.12.2010')
classifier = svm.SVC(gamma=0.001)
raise SaltCloudSystemExit( 'The request_instance action must be called with -a or --action.' )
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: error_msg = u"Superterrible error happened: ☠" mock_grade.side_effect = Exception(error_msg)
kwargs = {'course_id': self.course_id.to_deprecated_string(), 'note_id': str(self.pk)} return reverse('notes_api_note', kwargs=kwargs)
_response = _request("PUT", options['url'] + options['db'])
Membership.objects.create( membership_country_id=self.soviet_union.id, person_id=self.george.id, group_id=self.cia.id, date_joined=timemark + timedelta)
key_list = [] key_list = _traverse_registry_tree(hkey, key_path, key_list, access_mask) key_list.append(r'{0}'.format(key_path))
if self.fitted: self.fit()
rs = mi_labels.loc[:, 'j'] xp = mi_labels.ix[:, 'j'] assert_frame_equal(rs, xp)
return VisibilityState.needs_attention
world.staff = StaffFactory(course_key=world.course_key) world.enroll_user(world.staff, world.course_key)
providers = OAuth2ProviderConfig.objects.all() self.assertEquals(len(providers), pcount + 2) self.assertEquals(providers[pcount].id, provider1.id) provider2 = providers[pcount + 1]
raise NotImplementedError
if self.child_fd: fd_flags = fcntl.fcntl(self.child_fd, fcntl.F_GETFL) if self.child_fde: fde_flags = fcntl.fcntl(self.child_fde, fcntl.F_GETFL)
if name is None: name = content.name
if N == 0: return
self.add_team_configuration(max_team_size=4, topics=[self.make_topic()]) self.assertTrue(self.course.teams_enabled)
self.code = self.capa_system.filestore.open('src/' + answer_src).read()
estimators = all_estimators(include_meta_estimators=True)
self.assertIn('tag', ret) ret.pop('tag')
titles = ['SVC with linear kernel', 'LinearSVC (linear kernel)', 'SVC with RBF kernel', 'SVC with polynomial (degree 3) kernel']
self.create_programs_config(program_details_enabled=False) response = self.client.get(self.details_page) self.assertEquals(response.status_code, 404)
X_, y_ = make_classification(n_samples=200, n_features=100, random_state=0)
tagger.sample_rate = 1 return None
man = salt.utils.which('man') if not man: return False
transformer = Conv2D(filters=filters, batch_size=len(input), input_space=input_space, border_mode='full') sum_sqr_XX = transformer.lmul(X ** 2)
if 'load' in msg: role = self.road_stack.value.nameRemotes[sender].role
return [c for c in data_columns if c in axis_labels]
return [n._v_pathname for n in self.groups()]
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
if self.status == "approved": return
match = re.search(__opts__['stateconf_end_marker'], sls_templ) if match: process_sls_data(sls_templ[:match.start()], extract=True)
return False
elem = self.get_setting_element(label) if elem: select = Select(elem) return select.first_selected_option.text else: return None
from sklearn.ensemble import RandomForestClassifier from sklearn.svm import SVC
from __future__ import absolute_import
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
request = RequestFactory().post('unused_url') request.user = self.user request.META['HTTP_HOST'] = "aGenericValidHostName" self.append_allowed_hosts("aGenericValidHostName")
assert isinstance(course_key, CourseKey) store = self._get_modulestore_for_courselike(course_key) return store.make_course_usage_key(course_key)
from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import integer_types
self.mock_module = MagicMock() self.mock_module.id = 1 self.dispatch = 'score_update'
wait_for( func=lambda _: EC.invisibility_of_element_located((By.CSS_SELECTOR, css_selector,)), timeout=timeout, timeout_msg="Timed out waiting for {} to be invisible.".format(css_selector) )
return datetime.datetime.strptime(date_input.strip(), "%Y-%m-%d").replace(tzinfo=pytz.UTC)
continue_learning = (self.model.continue_learning() and extension_continue) assert continue_learning in [True, False, 0, 1] while continue_learning: if self.exceeded_time_budget(t0, time_budget): break
with self.assertRaises(TemplateDoesNotExist): self.engine.render_to_string('exception01')
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
from salt.modules import mac_user from salt.exceptions import SaltInvocationError, CommandExecutionError
return []
partitions += _other_partitions(verified_partitions, partitions, course_key) course.set_user_partitions_for_scheme(partitions, scheme) modulestore().update_item(course, ModuleStoreEnum.UserID.system)
self.assertEqual(e.__class__, ValueError)
data = {'title': 'Testing'} files = {"image": SimpleUploadedFile('test.png', img, 'image/png')}
self.track_selection_page.enroll('verified')
alternate_course = self.create_course(course='mobile', mobile_available=True)
points = cartesian_product(planes)
search = re.search(linere, line) if not search: continue
with self.assertRaises(TemplateDoesNotExist): self.client.get('/render_no_template/')
from __future__ import absolute_import
try: return self[key] except KeyError: return default
expected = self.course actual = self.ccx.course self.assertEqual(expected, actual)
virtualenv_mod.__salt__ = {'cmd.which_bin': lambda _: 'pyvenv'}
self.user.password = u'new password' with self.assertRaises(IntegrityError): self.user.save() self.assert_no_events_were_emitted()
self.assert_function_values('abs', [-1, 0, 1, 'j'], [1, 0, 1, 1])
return []
if self.verbose: self._print(error_message) else: raise StreamingInsertError(error_message + '\nEnable verbose logging to ' 'see all errors')
rmtree(fs_root, ignore_errors=True)
with remove_ccx(xblock) as (xblock, restore): return restore(self._modulestore.has_changes(xblock))
if value is self.Empty: return return super(OpaqueKeyField, self).run_validators(value)
objs = tuple(objs)
block = self.store.get_item(block_location) self.assertEqual(block.merged_group_access, expected_dict)
import salt.utils
can_clone_databases = False
ctype='create'
return self.q(css="div.modal div.modal-header").present and self._are_all_assets_present()
if obj.ndim < current_ndim:
self.close()
import salt.utils
response = client2.post(self.url, creds) self._assert_response(response, success=True)
course = modulestore().get_course(course_id) if course is None: return None return course.enrollment_domain
EmptyPromise(self.is_filename_error_showing, 'Upload Error Displayed', timeout=30).fulfill()
import salt.utils from salt.exceptions import SaltInvocationError, CommandExecutionError
with mock_create_refund(status=200, response=[1, 2, 3]): self.send_signal() self.assertTrue(mock_send_notification.called) self.assertTrue(mock_log_warning.called)
__virtualname__ = 'pam'
self.assertEqual(six.memoryview(a2b_hex(hexewkb_2d)), pnt_2d.ewkb) self.assertEqual(six.memoryview(a2b_hex(hexewkb_3d)), pnt_3d.ewkb)
self.assertRaises(ValueError, sql.to_sql, frame=df_if_exists_1, con=self.conn, name=table_name, flavor='sqlite', if_exists='notvalidvalue') clean_up(table_name)
def_key = AsideDefinitionKeyV1(definition_id, aside_type) usage_key = AsideUsageKeyV1(usage_id, aside_type) return (def_key, usage_key)
out_file = os.path.join(conn['formula_path'], new_name)
from yaml import Loader, SafeLoader
self.assertIn( "No user with the provided email address exists.", self.login_page.wait_for_errors() )
self.assert_correct_filter_response(self.url, 'asset_type', 'OTHER')
pass
kf = cval.KFold(300, 3, shuffle=True, random_state=0) ind = np.arange(300)
exp = f.copy() ix[5:10].values[:] = 5 exp.values[5:10] = 5 assert_frame_equal(f, exp)
tm.assert_series_equal(df['col1'].round(1), expected_rounded['col1'])
if completed: return 'is-complete', "'{}' is marked complete" else: return 'is-not-started', "'{}' is in not-yet-started status"
if all_students and student: return HttpResponseBadRequest( "all_students and unique_student_identifier are mutually exclusive." ) if all_students and delete_module: return HttpResponseBadRequest( "all_students and delete_module are mutually exclusive." )
self.assertEquals(self.request.safe_cookie_verified_user_id, self.user.id)
log = logger.getLogger(__name__)
self.assertEqual(module.attempts, 1)
pass
ip_blacklist_url = reverse( 'embargo_blocked_message', kwargs={ 'access_point': 'courseware', 'message_key': 'embargo' } ) return redirect(ip_blacklist_url)
self.assertEqual( self.run_function( 'git.rev_parse', [self.repo, 'HEAD'], opts='--abbrev-ref' ), 'master' )
LOGGING_CONFIG = 'logging.config.dictConfig'
break
self.assertRegexpMatches( without_new_lines, r'<targetedfeedbackset.*?>.*?explanation-id="feedback1".*?</targetedfeedbackset>.*' + r'<targetedfeedbackset.*?>\s*</targetedfeedbackset>' )
X_varied, y_varied = make_blobs(n_samples=n_samples, cluster_std=[1.0, 2.5, 0.5], random_state=random_state) y_pred = KMeans(n_clusters=3, random_state=random_state).fit_predict(X_varied)
cmd = 'which zfs'
if cols is not None:
instructor_dashboard_page = self.visit_instructor_dashboard() allowance_section = instructor_dashboard_page.select_special_exams().select_allowance_section()
from __future__ import absolute_import
block_structure.request_xblock_fields(*cls.FIELDS_TO_COLLECT) cls._collect_max_scores(block_structure)
assert_raises(ValueError, cv.fit, K_train.tolist(), y_train)
w = [e for e in w if e.category is not np.VisibleDeprecationWarning]
REQUIRE_DEBUG = DEBUG
return False
try: self.assertIn( 'True', [i.strip() for i in self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))] ) except AssertionError: raise
message = 'foo: bar="baz", qux="quux"' self.assertTrue(mock_log.info.called_with(message))
self.n_iter_final = it
self.assertEqual( deploy_dir_path, default_config['deploy_scripts_search_path'][0] )
self.assertNotContains(response, 'release_date__day=') for date in DATES: self.assert_contains_month_link(response, date) self.assert_non_localized_year(response, 2000)
State.objects.bulk_create([ State(name='Colorado'), State(name='Hawaii'), State(name='Texas') ])
_cleanup()
setattr(node._v_attrs, '%s_name%d' % (key, i), name)
__virtualname__ = 'pkg'
stream1 = StringIO() stream2 = StringIO() handler1 = StreamHandler(stream1) handler2 = StreamHandler(stream2)
PROFILE = logging.PROFILE = 15 TRACE = logging.TRACE = 5 GARBAGE = logging.GARBAGE = 1 QUIET = logging.QUIET = 1000
QUERYFORMAT = '%{NAME}_|-%{EPOCH}_|-%{VERSION}_|-%{RELEASE}_|-%{ARCH}_|-%{REPOID}'
dx = manhattan_distances(X, Y=self.X, sum_over_features=False) f = self.regr(X) r = self.corr(self.theta_, dx).reshape(n_eval, n_samples)
settings.ALLOWED_HOSTS = [request.META['HTTP_HOST']] self.assertEqual(safe_get_host(request), request.META['HTTP_HOST'])
max_scores_cache.set(self.locations[0], 1) self.assertEqual(max_scores_cache.num_cached_updates(), 1)
if raw: self.set_raw_content(content) else: self.set_content(content) self.save()
if values.ndim > 1: if notempty: return _wrap_results( np.apply_along_axis(get_median, axis, values), dtype)
exp_fancy = df.iloc[[2]]
if 'last_update' in from_index: query['last_update'] = from_index['last_update']
if not isinstance(k, compat.string_types): k = str(k) if level == 0: newkey = k else: newkey = prefix + '.' + k
from __future__ import absolute_import import json import os
for child in xblock.get_children():
self.assertAssetsEqual(self.LOCKED_ASSET_KEY, self.LOCKED_ASSET_KEY.course_key, course_id)
p, r, f, s = precision_recall_fscore_support(y_true, y_pred, pos_label=None, average='weighted')
return os.path.dirname(self._get_module_path(module))
else: return False
if not self.warm_start: self._clear_state()
@python_2_unicode_compatible class Poet(models.Model): name = models.CharField(max_length=100)
path = os.path.realpath(os.path.expanduser(path))
from .tasks import update_course_structure
return None
import datetime import json import logging import os import re import traceback import shutil import types
X, y = datasets.samples_generator.make_s_curve(n_samples, random_state=0)
supports_distances_lookups = True supports_left_right_lookups = False
Timestamp(Timestamp.min)
group_id, user_partition_id = get_masquerading_group_info(self.test_user, self.course.id) self.assertIsNone(group_id) self.assertIsNone(user_partition_id)
my_pca_preprocessor.apply(training_set, can_fit = True) my_pca_preprocessor.apply(test_set, can_fit = False)
self.asset_collection.insert(dest_assets)
setattr(self.__class__, 'has_%s_method' % method, property(partial(BaseSpatialFeatures.has_ops_method, method=method)))
self.user.is_staff = True self.user.save()
U, V = svd_flip(U, V)
with warnings.catch_warnings(): warnings.filterwarnings("ignore", message=".*(empty slice|0 for slice).*", category=RuntimeWarning)
if not isinstance(config, dict): return False, ('Configuration for sh beacon must be a dictionary.') return True, 'Valid beacon configuration'
ssh_gateway_config['ssh_gateway_port'] = config.get_cloud_config_value( 'ssh_gateway_port', vm_, __opts__, default=None, search_global=False )
from salt.ext.six import string_types
return True
pieces["distance"] = int(mo.group(2))
if not self.infer_axes(): return False
if self._reader: self._reader.close()
continue
request = Request.blank('') response = self.item_descriptor.studio_transcript(request=request, dispatch='translation') self.assertEqual(response.status, '400 Bad Request')
query = X[rng.randint(0, n_samples)].reshape(1, -1)
self.no_labels = Attribute('no_labels', default="False").parse_from_xml(self.xml)
return self.q(css=self._bounded_selector(self.OPTION_SELECTOR)).results
with ensure_clean('__tmp_to_csv_from_csv5__') as path:
import salt.client import salt.config import salt.loader import salt.output import salt.pillar import salt.runner
self.estimators_[i, k] = tree
from salt.modules import oracle import os
sequential_position_css = '#sequence-list #tab_{0}'.format(sequential_position - 1) self.q(css=sequential_position_css).first.click()
for instance in vmconfig_type['instance']: if instance in vmconfig_type['create_only']: continue
DATE_FORMAT = 'j F, Y' TIME_FORMAT = 'g:i A' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'j M, Y'
problem = new_loncapa_problem(xml_str) rendered_html = etree.XML(problem.get_html())
try: access_group = Group.objects.get(name=settings.PAYMENT_REPORT_GENERATOR_GROUP) except Group.DoesNotExist: return False return access_group in user.groups.all()
import json import logging
import salt.crypt import salt.utils import salt.client import salt.exceptions import salt.utils.event import salt.daemons.masterapi from salt.utils import kinds from salt.utils.event import tagify
hwaddr = salt.utils.alias_function(hw_addr, 'hwaddr')
if text[-1] in SUFFIXES: return float(text[:-1]) * SUFFIXES[text[-1]] else: return float(text)
time.sleep(2)
pythoncom.CoInitialize()
display_headers.append(enrollment_report_headers.get(header_element, header_element))
df = DataFrame(np.random.randn(10, 4)) s = df.iloc[:, 0]
exc_info_on_loglevel=logging.DEBUG
enrollment = CourseEnrollment.objects.get( user=user, course_id=source_key )
assert not isinstance(x, theano.gof.Variable) return 1. / (1. + np.exp(-x))
'key_logfile': str,
config = cloud_providers_config( os.path.join( integration.FILES, 'conf', 'cloud.providers.d', PROVIDER_NAME + '.conf' ) )
parents = block_structure.get_parents(block_key)
self._create_search_index() super(StudioLibraryContainerCapaFilterTest, self).setUp()
other = other.__class__('%s/%s' % (other.network_address, other.prefixlen))
return self._get_dated_items(datetime.date.today())
ret[key] = {'old': old[key], 'new': new[key]}
saltenv = env
kwargs['user'] = str(kwargs['user']) return
return self.srs.srid
self.new_connection.rollback() self.new_connection.set_autocommit(True)
return self.as_sql(compiler, connection, template='%(expressions)s::%(db_type)s')
if existing['code'] == 200:
import salt.utils from salt.exceptions import CommandExecutionError
from __future__ import absolute_import
num_braces = 0
self.client.login(username=username, password="password")
ax = _check_plot_works(self.ts.plot, subplots=True) self._check_axes_shape(ax, axes_num=1, layout=(1, 1))
pass
if existing['code'] == 200:
self._configure_message_timeout(10000) DonationConfiguration(enabled=True).save()
pythonpath = os.environ.get('PYTHONPATH', '') pythonpath = throot + ':' + pythonpath os.environ['PYTHONPATH'] = pythonpath
if cache in self.cache_options: self._cache = cache else: raise GeoIP2Exception('Invalid GeoIP caching option: %s' % cache)
import salt.ext.six as six
frame = self.frame.copy() expected = self.frame.copy()
self.assertEqual(result['order'].status, 'purchased') self.assert_dump_recorded(result['order'])
if k.start == 0 and k.stop == len(self): k = slice(None, None)
response = self._load_dashboard() self.assertContains(response, "credit-request-pending-msg")
header_end = chunk.find(b'\r\n\r\n')
self._update_release_dates(self.date_one, self.date_two, self.date_two) self._verify_release_date_source(self.sequential, self.sequential)
try: for link in listdir: path = dirpath + link readlink = os.readlink(path) filenames = []
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
for trainer in self.trainers: for extension in trainer.extensions: extension.on_save(trainer.model, trainer.dataset, trainer.algorithm)
X = np.arange(200)[:, np.newaxis] y = np.zeros(200) y[50:100] = 1 y[100:200] = 2 X[100:200, 0] = 200
if self._is_training_data(X): return 2. - float(self.train_sizes) / self.n_max_train_sizes else: return float(self.train_sizes) / self.n_max_train_sizes
if not self.blank and value is self.Empty: raise ValidationError(self.error_messages['blank']) else: return super(OpaqueKeyField, self).validate(value, model_instance)
self.assertTrue(all(isinstance(course, CourseSummary) for course in course_summaries))
class Model(models.Model): field = models.AutoField(primary_key=False)
csv_file.seek(0) csv_data = csv_file.read() csv_file.seek(0) csv_file.truncate() return csv_data
return self._engine_type(lambda: self.codes.astype('i8'), len(self))
#html_title = None
rnd = np.random.RandomState(0) X = rnd.normal(size=(3, 1)) mcd = MinCovDet() mcd.fit(X)
self._seek_variable_labels = self._get_seek_variable_labels()
if course_key is not None: CourseEnrollment.enroll(user, course_key, mode=enrollment_mode)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
idx = int(rng.rand(1) * n_samples) entry = X[idx] seen.add(idx)
MAXSIZE = int((1 << 31) - 1)
self.client.login(username=self.user.username, password="password")
import os import stat import logging
allowance_section.submit_allowance_form('10', self.USERNAME)
autosummary_generate = True
with ensure_clean_store(self.path) as store:
if not hasattr(self, 'n_samples_seen_'): self.n_samples_seen_ = X.shape[0] else: max_abs = np.maximum(self.max_abs_, max_abs) self.n_samples_seen_ += X.shape[0]
_check_align(self.ts[:0], self.ts[:-5], how=kind, method=meth) _check_align(self.ts[:0], self.ts[:-5], how=kind, method=meth, limit=1)
self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
remote_ref_type = 'ref' if len(ref) <= 40 \ and all(x in string.hexdigits for x in ref): ref = ref.lower() remote_ref_type = 'hash'
return get_connection(using).get_rollback()
self.assertFileNotFound('test/test.ignoreme')
segment_event_name = segment_properties['name'] disallowed_substring_names = [ a.lower() for a in getattr(settings, 'TRACKING_SEGMENTIO_DISALLOWED_SUBSTRING_NAMES', []) ]
from tornado import gen from tornado import ioloop from tornado import netutil
self.socket.sendall(bytes_)
log.info('Spot instance status: {0}'.format( data[0]['status']['message'] )) return None
assert_in('attempts', seq.xml_attributes)
cache_key = get_cache_key(request, self.key_prefix, 'GET', cache=self.cache) if cache_key is None: request._cache_update_cache = True
from win32file import ReadFile, WriteFile from win32pipe import PeekNamedPipe import msvcrt import win32api import win32con import win32process
error_message=_('Expected a <choice> or <compoundhint> tag; got {given_tag} instead').format( given_tag=choice.tag )
if 'id' not in item: item['id'] = item['name'] ret[item['name']] = item
from salt.states import postgres_database
result = ts["1990-01-02"] expected = ts[24:48] assert_series_equal(result, expected)
module = module + '.' if not module.endswith('.') else module
if (isinstance(section, ABCDataFrame) and i > 0 and len(new_key) == 2): a, b = new_key new_key = b, a
modes = cls.modes_for_course(course_id) return min(mode.min_price for mode in modes if mode.currency.lower() == currency.lower())
raise NotImplementedError('subclasses of Operation must provide a state_forwards() method')
expected = ix[5:11] result = ix[f.index[5]:f.index[10]] assert_frame_equal(expected, result)
if existing['code'] == 200:
#epub_post_files = []
if check_names: assert_attr_equal('name', left, right, obj=obj)
block = self.course
return 'NOTPROVIDED'
if GeoIP_delete is None: return if self._country: GeoIP_delete(self._country) if self._city: GeoIP_delete(self._city)
_, created = ed.books.get_or_create(name='The Great Book of Ed', publisher_id=p.id) self.assertFalse(created)
if self.ndim == 1: index = self.obj.index new_index = index.insert(len(index), indexer)
self.middleware.process_request(self.request) self.assertNotIn(LANGUAGE_SESSION_KEY, self.request.session)
ranks0 = self.frame.rank(na_option='top', ascending=False) ranks1 = self.frame.rank(1, na_option='top', ascending=False)
if is_float_dtype(dtype): result = result.astype(dtype) return _wrap_results(result, values.dtype)
content = loader.render_to_string(template_name, context, request, using=using) return HttpResponse(content, content_type, status)
packed = struct.pack('@P', id(obj)) return ''.join(map(_replacer, packed))
_params = [sharedX(rng.randn(5)), sharedX(rng.randn(5, 3)), sharedX(rng.randn(4, 4, 4))]
X_train, X_train_lr, y_train, y_train_lr = train_test_split(X_train, y_train, test_size=0.5)
import salt.utils
if isinstance(ind, MultiIndex): continue
response = self.client.get('/syndication/no_pubdate/') self.assertFalse(response.has_header('Last-Modified'))
img[:, ring_w:ring_w + inner_h, ring_w:ring_w + inner_w] = inner_img
'salt_event_pub_hwm': int, 'event_publisher_pub_hwm': int,
def __init__(self): pass
preserve_names = not hasattr(target, 'names')
html = self.get_page_html(xblock) self.assertIn(expected_section_tag, html) self.assertRegexpMatches(html, expected_breadcrumbs)
return self.q(css='.join-team .action-primary').present
pass
return True
d0 = "a", "b", "c", "d" d1 = np.arange(4, dtype='int64') others = "e", 10
XDOMAIN_PROXY_CACHE_TIMEOUT = 60 * 15
draft, split = range(2)
if should_recompile(): _logger.debug('recompiling')
response_dict = {(answer_key_prefix + k): v for k, v in responses.items()} resp = self.client.post(modx_url, response_dict)
cost = sum(costs) model_terms = sum([param.sum() for param in model.get_params()]) cost = cost * model_terms return cost
add_instructor(new_course.id, user, user)
self._change_enrollment('enroll', email_opt_in=email_opt_in)
self.add_course_to_user_cart(self.xss_course_key) self.assertEquals(self.cart.orderitem_set.count(), 1)
for status in ["created", "ready", "denied"]: attempt.status = status attempt.save() assert_false(SoftwareSecurePhotoVerification.user_has_valid_or_pending(user), status)
for database_name in DATABASES: DATABASES[database_name]['ATOMIC_REQUESTS'] = False
if not organizations_enabled(): return None from organizations import api as organizations_api return organizations_api.add_organization(organization_data=organization_data)
url = xblock_studio_url(xblock) self.assertIsNotNone(url) resp = self.client.get_html(url) self.assertEqual(resp.status_code, 200) return resp.content
download_packages(opts)
return self.q(css=' '.join([self.PAGE_SELECTOR, css_selector]))
mailing_address_label = _(u"Mailing address")
offset1 = BMonthBegin() offset2 = BMonthBegin() self.assertFalse(offset1 != offset2)
serialized_course_team['content'] = { 'text': self.content_text() }
self.configuration = kwargs.pop('configuration', None) if not self.configuration: self.configuration = settings.ACCOUNT_VISIBILITY_CONFIGURATION
child = self.store.get_item(locations['child']) child.display_name = 'Changed Display Name' self.store.update_item(child, self.user_id)
try: api.regenerate_user_certificates(params["user"], params["course_key"], course=course)
result = self.read_csv(StringIO(data), index_col='time', squeeze=True) self.assertFalse(result._is_view)
if retry_on_rate_limit and 'Throttling' == e.code: log.debug('Throttled by AWS API.') time.sleep(2) rate_limit_retries -= 1
CourseEnrollment.enroll(user, course_id, "honor") self.assert_no_events_were_emitted()
if method == 'linear': index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax))) else: index = _maybe_transposed_self._get_axis(alt_ax)
with store.bulk_operations(xblock.location.course_key):
source_suffix = '.rst'
dataset = fetch_olivetti_faces(shuffle=True, random_state=rng) faces = dataset.data
uniques = Index(uniques).values
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
return self._getitem_axis(tup, axis=0)
addr = _split_optional_netmask(address) self.network_address = IPv4Address(self._ip_int_from_string(addr[0]))
xgrid = np.arange(xmin, xmax, batch.grid_size) ygrid = np.arange(ymin, ymax, batch.grid_size)
index = self.index[7:10:2] expected = Index(np.array([14, 18]), name='foo') self.assert_index_equal(index, expected)
test_modules = get_test_modules()
return table
return self._r2_adj_raw
import salt.ext.six as six
DEFAULT_SHOPPINGCART_MODE_SLUG = HONOR DEFAULT_SHOPPINGCART_MODE = Mode(HONOR, _('Honor'), 0, '', 'usd', None, None, None, None)
if is_verified: self.assertTrue(CourseMode.is_verified_slug(mode_slug)) else: self.assertFalse(CourseMode.is_verified_slug(mode_slug))
related_fields_match_type = False allow_sliced_subqueries = True has_select_for_update = False has_select_for_update_nowait = False
new = list_pkgs(saltenv=saltenv) tries = 0 difference = salt.utils.compare_dicts(old, new)
return {'id': self.id, 'expires': self.expires, 'user_id': self.user_id, 'tenant_id': self.tenant_id}
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON
raise NotImplementedError
xs = self.panel.minor_xs(self.panel.minor_axis[0]) result = func(xs, axis='minor')
self.assertEqual(self.func(None), [csrf.W017])
if hasattr(self, 'has_targeted'): return
if '-N' not in cmd and '--forward' not in cmd: cmd.append('--forward')
'course_action_state',
with assertRaises(KeyError): df_swap.loc['2016-01-01']
pieces["short"] = mo.group(3)
self.wait_for_page()
kwargs['related_name'] = '+' kwargs['unique'] = True super(CurrentTranslation, self).__init__(to, on_delete, from_fields, to_fields, **kwargs)
'session_inactivity_timeout.middleware.SessionInactivityTimeout',
if 'admin_source' not in kwargs: os.unlink(adminfile)
return mapping[key]
def __init__(self, developer_message, user_message=None): self.developer_message = developer_message self.user_message = user_message
if guid is None: return 'No GUID Specified'
DataFrame._metadata = _metadata DataFrame.__finalize__ = _finalize
for f in ['to_frame', 'to_excel', 'to_sparse', 'groupby', 'join', 'filter', 'dropna', 'shift']:
integer_field_ranges = dict( BaseDatabaseOperations.integer_field_ranges, PositiveSmallIntegerField=(0, 65535), PositiveIntegerField=(0, 4294967295), )
non_staff_client, _ = self.create_non_staff_authed_user_client() response = non_staff_client.delete(outline_url, {}, HTTP_ACCEPT='application/json') self.assertEqual(response.status_code, 403)
if symtab: varset = symtab else: varset = { 'p': sympy.Symbol('p'), 'g': sympy.Symbol('g'),
self.cohort_management_page.select_discussion_topic(self.inline_key)
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
if not file and not force: return
from __future__ import absolute_import import os import random
return json.loads(reactivation_email_for_user(user).content)
log = logging.getLogger(__name__)
ave = kl(Y, Y_hat, 1)
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return len(self.q(css=".forum-nav-thread").results) == thread_count
super(LearnerProfilePage, self).__init__(browser) self.username = username
url = reverse('team_membership_detail', args=[team_id, username]) + '?admin=true' return self.make_call(url, expected_status, 'delete', **kwargs)
parse_coverage( Env.BOK_CHOY_REPORT_DIR, Env.BOK_CHOY_COVERAGERC )
gc.collect()
img.thumbnail((width_sc, height_sc), Image.ANTIALIAS)
counts[to_reassign] = np.min(counts[~to_reassign])
__virtualname__ = 'pkg'
keys, counts = _value_counts_arraylike(values, dropna=dropna)
import sqlite3 create_sql_indexes = True
warnings.filterwarnings( 'ignore', category=tables.NaturalNameWarning) store['node())'] = tm.makeDataFrame() self.assertIn('node())', store)
from __future__ import absolute_import import os import copy import logging
DarkLangConfig( released_languages=('es-419, es, es-es'), changed_by=self.user, enabled=True ).save() self.assertAcceptEquals( expected, self.process_request(accept=accept_header) )
progress = _progress_summary(student, request, course, field_data_cache, scores_client) if progress: return progress.chapters else: return None
s = f.read(4) s_array = numpy.fromstring(s, dtype='int32') return s_array.item()
self.current_view.close() self.current_view = self.MAPPING["recent"](self.browser)
return wrapped
rng.join(idx, how='outer')
if 'username' in ret and not ret['username']: ret['username'] = salt.utils.get_user()
rng = date_range('1/1/1990', periods=N, freq='H', tz='America/New_York') ts = Series(np.random.randn(N), index=rng)
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(choose_track_url)
from __future__ import unicode_literals
empty = DataFrame({})
MULTIOUTPUT_METRICS = [ "mean_absolute_error", "mean_squared_error", "r2_score", "explained_variance_score" ]
self.assertFalse(api.is_user_eligible_for_credit("bob", self.course_key))
from __future__ import absolute_import import datetime
return username.split('@')[0]
expected = df[df.A >= df.A[3]] result = store.select('df_tz', where=Term('A>=df.A[3]')) self._compare_with_tz(result, expected)
for handler in handlers: result = handler.handle_raw_input(self._input_data, self._meta, self._content_length, self._boundary, encoding) if result is not None: return result[0], result[1]
self.assertEqual(self.import_page.header_text, 'Course Import')
delattr(tp, self.name) return result
clf = ElasticNet() brc3 = Birch(n_clusters=clf) assert_raises(ValueError, brc3.fit, X)
x = self._x.values betas = self._beta_matrix(lag=1) return (betas * x).sum(1)
if self.n >= 0: nb_offset = 1 else: nb_offset = -1 self.next_bday = BusinessDay(n=nb_offset)
pk = self.kwargs.get(self.pk_url_kwarg) slug = self.kwargs.get(self.slug_url_kwarg) if pk is not None: queryset = queryset.filter(pk=pk)
try:
target = iris.target_names[iris.target] clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(iris.data, target)
return nanops.nanargmax(self.values)
self.coefs_ = self._best_coefs self.intercepts_ = self._best_intercepts
return {key: val for key, val in self.session.cookies.items()}
self.get_session_storage(storage)._get = None
return name in _get_svc_list(name, 'ENABLED')
import salt.utils
CourseOverview.objects.filter(id=course_key).delete() CourseOverview.load_from_module_store(course_key)
CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] ).install()
return get_endpoint(settings.EDXNOTES_INTERNAL_API, path)
import salt.utils
UserCourseTagFactory( user=self.student, course_id=self.course.id, key='xblock.partition_service.partition_{0}'.format(self.partition.id), value=str(user_tag) )
dispatch[type(len)] = save_global dispatch[type(object)] = save_global dispatch[type(Pickler)] = save_global dispatch[type(pickle.dump)] = save_global
to_concat = [x.astype('object') for x in to_concat]
neighbors.kneighbors_graph = ignore_warnings(neighbors.kneighbors_graph) neighbors.radius_neighbors_graph = ignore_warnings( neighbors.radius_neighbors_graph)
proba = all_proba[0]
enrollment_message = _create_recent_enrollment_message( course_enrollments, course_modes_by_course )
if 'provider' in details: details['driver'] = details.pop('provider')
raise TypeError("Index can't be updated inplace")
return { 'username': user.username, 'email': user.email, 'first_name': user.first_name, 'last_name': user.last_name, }
if exc.errno != errno.EEXIST: raise else: ret['comment'] = 'File {0} exists and cannot be overwritten'.format(name)
return len(self._max_scores_cache)
self.suffix_map['.pyx'] = tuple()
vec = vec.astype(int)
hashed_files = OrderedDict()
raise DeprecationWarning( '`salt.utils.cloud.deploy_script now only accepts ' 'dictionaries for it\'s `master_conf` parameter. ' 'Loading from YAML ...' )
name = os.path.join(name, os.path.basename(source))
self.assertEqual(self.func(None), [sessions.W012])
course_modes = CourseMode.objects.filter(course_id=course.id) actual = [course_mode.mode_display_name for course_mode in course_modes] self.assertListEqual(actual, ['Verified Certificate', 'Honor Certificate'])
u'{"@type": "Result", "resultScore": 0.1}',
name = name or action.__name__ self._actions[name] = action self._global_actions[name] = action
if answer_id in self.cmap: return self.cmap[answer_id]['correctness'] in ['correct', 'partially-correct'] return None
end_idx = num_assets
self.q(css=".contribution-option > input").first.click() self.q(css="input[name='verified_mode']").click()
cond = (df >= 0)[1:] _check_set(df, cond)
raise NotImplementedError( "subclasses of BaseEngine should provide " "a from_string() method")
UNKNOWN_TASK_ID = 'unknown-task_id' FILTERED_OUT_ROLES = ['staff', 'instructor', 'finance_admin', 'sales_admin'] UPDATE_STATUS_SUCCEEDED = 'succeeded' UPDATE_STATUS_FAILED = 'failed' UPDATE_STATUS_SKIPPED = 'skipped'
field_list = lookup.split(LOOKUP_SEP)
return u'<div class="{0}">{1}{2}</div>'.format(style, label_wrap, hints_wrap)
self.assertIn(d['country_name'], ('Curaçao', 'Curacao'))
with store.branch_setting(ModuleStoreEnum.Branch.draft_preferred): store.update_item(item, ModuleStoreEnum.UserID.test)
with ensure_clean_store(self.path) as store:
projected_distances = projected_distances[non_identical]
'providers': dict,
if self._connecting_future.done(): self._connecting_future = self.connect() yield self._connecting_future
child_pids = p1_group.get_children(recursive=True)
self.assertNumQueries(5, s.delete) self.assertFalse(S.objects.exists())
from .overrides import get_override_for_ccx return get_override_for_ccx(self, self.course, 'max_student_enrollments_allowed')
return any(x == 0 for x in shape)
dtype_orig = None
singular_ind = np.arange(n, dtype=np.float64)
return self._geomgen(capi.geom_sym_diff, other)
pass
import grp
url(r'^search/', include('search.urls')),
msg = "Input has different freq from PeriodIndex(freq={0})" raise IncompatibleFrequency(msg.format(self.freqstr))
from .views import nested_view self.assertEqual(reverse(nested_view), '/includes/nested_path/')
full_name = UserProfile.objects.get(user=user).name
for _ in range(2): utils.get_programs(staff_user)
master_course_object, master_course_key, _, _ = get_valid_course(unicode(ccx_course_object.course_id))
"payment_params": get_signed_purchase_params( cart, callback_url=callback_url, extra_data=extra_data ),
stores = [{'NAME': name, 'ENGINE': 'This space deliberately left blank'} for name in names]
termination_criterion = EpochCounter(5)
from salt.ext.six import binary_type, string_types, text_type from salt.ext.six.moves import cStringIO, StringIO
try: username, password = find_credentials(host) except SaltSystemExit as err: log.critical('Error: {0}'.format(err)) return False
report_name = u"ORA_data" self.data_download_section.generate_ora2_response_report_button.click() self.data_download_section.wait_for_available_report() self.verify_report_download(report_name)
if use in colors: for color in colors: if color == 'ENDC': continue colors[color] = colors[use]
repo_dir = os.path.abspath(git_export_utils.GIT_REPO_EXPORT_DIR) os.mkdir(repo_dir) self.addCleanup(shutil.rmtree, repo_dir)
idx = pd.IndexSlice
#pylint: disable=E0602
self._transformer_data = defaultdict(dict)
StudentModuleHistory( id=initial_id, course_key=None, usage_key=None, username="", version="", created=datetime.datetime.now(), ).save()
FROM_ABOUT_INFO = from_about_dictionary FROM_COURSE_PROPERTY = from_course_property FROM_COURSE_MODE = from_course_mode
with tm.assertRaises(NotImplementedError): pd.read_excel(os.path.join(self.dirpath, 'test1' + self.ext), chunksize=100)
if not isinstance(user_exists, bool): ret['comment'] = user_exists ret['result'] = False return ret
scores = cross_val_score(MultinomialNB(alpha=10), X, y, cv=10) assert_greater(scores.mean(), 0.86)
module.system.DEBUG = True
import salt.utils import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudNotFound, SaltCloudSystemExit
if mail: self.assertEqual(user.email, mail) self.assertEqual(list(User.objects.filter(email=postvars['email'])), [])
CourseUserGroupPartitionGroup( course_user_group=cohort, partition_id=partition_id, group_id=group_id, ).save()
lookup_name = 'overlaps_below'
col_type = self._get_dtype(sql_col.type)
value = value.toPyObject()
idf = np.log(float(n_samples) / df) + 1.0 self._idf_diag = sp.spdiags(idf, diags=0, m=n_features, n=n_features)
vm_size = override_size(vm_)
provider_url = reverse('openid-provider-login') factory = RequestFactory() request = factory.request() abs_provider_url = request.build_absolute_uri(location=provider_url)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
from django.conf.urls import url
if not enabled(name): return False
import salt.ext.six as six
pass
if not os.path.exists(device): msg = "Device {0} doesn't exist!" raise CommandExecutionError(msg.format(device))
from __future__ import absolute_import import json import logging
from __future__ import unicode_literals
for i in range(self.n_layers_ - 1): end = start + layer_units[i + 1] self._intercept_indptr.append((start, end)) start = end
with self.assertRaises(ImproperlyConfigured): AppConfig('label', Stub(__path__=[]))
EXPECTED_SECTIONS = { 'Test Section': ['Test Subsection'], 'Test Section 2': ['Test Subsection 2', 'Test Subsection 3'] }
self.settings_detail.refresh_page() self.settings_detail.wait_for_prerequisite_course_options() self.assertTrue(is_option_value_selected( browser_query=self.settings_detail.pre_requisite_course_options, value='' ))
return self.values
no_courses = get_courses(user, org=primary) self.assertEqual(no_courses, [])
from __future__ import absolute_import
for feat in self: if feat.fid == feat_id: return feat
self.assertTrue( self.thread_page_1.check_threads_rendered_successfully(thread_count=self.thread_count) )
return all([ self.child_test_passed('.child-counts-match'), self.child_test_passed('.child-values-match') ])
key = Timedelta(key)
with tm.assert_produces_warnings(FutureWarning): df.eval('c = a + b')
SUB_EVENT = set([ 'state.highstate', 'state.sls', ])
url_to_enroll = reverse(course_about, args=[course_id]) if settings.FEATURES.get('ENABLE_MKTG_SITE'): url_to_enroll = marketing_link('COURSES')
locales = tm.get_locales() self.assertTrue(len(locales) >= 1)
self.assertEqual(ax.patches[0].get_x(), -0.5) self.assertEqual(ax.patches[-1].get_x(), 3.5)
m = map(lambda x: x, range(10))
iterator = itertools.islice(iterator, pre_dispatch)
#latex_appendices = []
df3.cov() df3.corr()
self._remake_table(model, alter_fields=[(old_field, new_field)])
with transaction.atomic(): people = list( Person.objects.all().select_for_update(nowait=nowait) ) people[0].name = 'Fred' people[0].save()
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
from __future__ import absolute_import import socket import logging
obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')
item = SimpleItem.objects.create(name='first', value=47) feature = Feature.objects.create(item=item) SpecialFeature.objects.create(feature=feature)
return self.q(css='.breadcrumb').present
total = (self.stored_cookie_messages_count(storage, response) + self.stored_session_messages_count(storage, response)) return total
kwargs['volumes_from'] = str(kwargs['volumes_from'])
from edxmako.shortcuts import render_to_response from mako.exceptions import TopLevelLookupException from django.http import HttpResponseNotFound
else:
BaseLoader = getattr(yaml, 'CSafeLoader', yaml.SafeLoader) BaseDumper = getattr(yaml, 'CSafeDumper', yaml.SafeDumper)
managed = True
msg = Messages.ORDER_COMPLETED.format(order_number=response_data['order']['number']) log.debug(msg) response = DetailResponse(msg)
content = content.replace(' ', '') self.assertIn('dependencies=[\n]', content) self.assertIn('operations=[\n]', content)
course_orphans = self.store.get_orphans(course_locator) self.assertEqual(len(course_orphans), 0)
api.update_credit_request_status(request["parameters"]["request_uuid"], self.PROVIDER_ID, status) self._assert_credit_status(status)
china = np.array(china, dtype=np.float64) / 255
self.assertIn(self.SUCCESSFUL_RESPONSE, response.content) self.assertEqual(response.status_code, 200)
assertIsInstance(left, DataFrame, '[DataFrame] ') assertIsInstance(right, DataFrame, '[DataFrame] ')
self.user.is_active = False self.user.save() verify_get_own_information(9)
for ignore in list(_STATE_INTERNAL_KEYWORDS) + ['listen_in', 'preqrequired']: kwargs.pop(ignore, None)
with self.assertRaises(TemplateSyntaxError): self.engine.get_template('exception03')
#modindex_common_prefix = []
from __future__ import absolute_import
top_level_logger.setLevel(logging.NOTSET)
info_log.assert_called_with('email sent to new created user at %s', 'test_student@example.com')
cmd = ['pkg', 'update', '-v', '--accept'] out = __salt__['cmd.run_all'](cmd, output_loglevel='trace', python_shell=False)
groups_single_key = test.groupby("cat") res = groups_single_key.agg('mean')
self.patched_settings = self.settings(STATIC_ROOT=temp_dir) self.patched_settings.enable() self.run_collectstatic() self.addCleanup(shutil.rmtree, six.text_type(temp_dir))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../')
pass
for k, v in webresponse.headers.iteritems(): http_response[k] = v
if problemtree in self.responders: overall_msg = self.correct_map.get_overall_message() return self.responders[problemtree].render_html( self._extract_html, response_msg=overall_msg )
sensors.__salt__ = {}
fg1 = FakeGeom1() fg2 = FakeGeom2()
output = self.engine.render_to_string('basic-syntax09', {'var': SomeClass()}) self.assertEqual(output, 'SomeClass.method')
self.server.config['test_1'] = {'response': True} self.server.config['test_2'] = {'response': False}
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
grinfo = next(iter(x for x in grp.getgrall() if x.gr_name == name))
if hasattr(self.current_request_configuration, 'cache'): return self.current_request_configuration.cache.get(key)
with with_edx_domain_context(is_edx_domain): response = self.client.get(reverse(url_name), params)
log = logging.getLogger(__name__)
from salt.states import aptpkg
interprets_empty_strings_as_nulls = False
with self.assertNumQueries(3): self._assert_group_assignment(user, VerificationPartitionScheme.DENY)
action = request.POST.get("enrollment_action") if 'course_id' not in request.POST: return HttpResponseBadRequest(_("Course id not specified"))
self.clear.publish(self.valid_clear_load) self.assertEqual(fire_event_mock.call_args[0][0]['fun'], 'test.ping')
self.user.is_active = False self.user.save()
print(descriptor, descriptor._field_data) self.assertEqual(descriptor.due, ImportTestCase.date.from_json(from_date_string))
FEATURES['ENABLE_EDXNOTES'] = True
pred = km.predict(km.cluster_centers_) assert_array_equal(pred, np.arange(n_clusters))
self._each_parens(r'\{x+y\}', 'x+y', '{')
world.css_click(subsection_css)
self.assertNotContains(resp, 'Hidden_course')
from salt.ext.six import string_types, text_type from salt.ext.six.moves import range from salt.ext.six.moves.urllib.request import urlopen as _urlopen
num_queries = 1
cls.num += 1 return cls.num
self.assertTrue(t == (tstart.tz_convert('UTC') + offset ).tz_convert('US/Pacific'))
raise NotImplementedError("number of dimensions is currently " "limited to 3")
attrs = ['mean_beta', 'std_beta', 't_stat'] for attr in attrs: getattr(result, attr)
_config_filename_ = 'master' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _setup_mp_logging_listener_ = True
list_check = lambda x: isinstance(x, list) clf = CheckingClassifier(check_X=list_check) predictions = cross_val_predict(clf, X.tolist(), y.tolist())
xblock, fields = (None, block.__dict__)
courses, in_process_course_actions = _accessible_courses_summary_list(request)
executor.loader.build_graph()
idx = TimedeltaIndex([1e14, 'NaT', pd.NaT, np.NaN])
import sys del pip if 'pip' in sys.modules: del sys.modules['pip']
MAX_MESSAGE_LENGTH = 1000
out = np.empty(len(list_of_arrays), dtype=object) out[:] = list_of_arrays return out
for block in blocks: for field in fields: self.assertIsNone(block_structure.get_xblock_field(block.location, field))
return self.search_fields
cache.set(cache_key, [], cache_timeout) return _generate_cache_key(request, request.method, [], key_prefix)
request.special_path = request.path return render(request, 'request_context.html')
theta = self.theta_
return (self.is_dtype_equal(other) and np.array_equal(self._codes, other._codes))
assert False
LANGUAGES = ( ('en', u'English'), ('rtl', u'Right-to-Left Test Language'),
proc = Process(target=event_stream, args=(handler, child_pipe)) proc.start()
return {'idp': self.idp_slug}
return realpath(abspath(rpath))
p = self.PersonModel(name='Joe') p.mugshot = self.file1 self.check_dimensions(p, 4, 8)
if callable(field): class_name = field.__name__ if field.__name__ != '<lambda>' else '' else: class_name = field
self.create_programs_config(program_listing_enabled=False) response = self.client.get(path=self.view_path) self.assertContains(response, '<li class="item nav-global-01">')
self.assertAlmostEqual(1.41421356237, pnt.distance(Point(1, 1)), 11)
clf = self.factory(alpha=0.01, n_iter=5, shuffle=False) clf.fit(X, Y) assert_true(hasattr(clf, "coef_"))
minion.setup() _minions.append(minion)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
if re.match(pattern, path): return False
[n.raise_error() for n in self.node_map.values() if isinstance(n, DummyNode)]
with tm.assert_produces_warning(FutureWarning): df.sort_index(by=['a', 'b'])
def _topology(self, gptr): "Helper routine to return Geometry from the given pointer." return GEOSGeometry(gptr, srid=self.srid)
return cls.objects.filter(order__isnull=False, course_id=course_id)
pass
'edxval',
class BaseReverseFormSet(BaseFormSet): def __iter__(self): return reversed(self.forms)
from salt.modules import win_autoruns
from salt.returners import smtp_return as smtp
self._cache.delete(key)
indexers = ['items', 'major_axis', 'minor_axis']
ica = FastICA(n_components=3)
from __future__ import absolute_import, print_function import os import sys import copy import time import hmac import base64 import hashlib import logging import stat import traceback import binascii import weakref import getpass
self.assertEqual(self.func(None), [base.W018])
resp = self.client.get_html(self.url) self.assertEquals(resp.status_code, 200) self.assertContains(resp, "Export My Course Content")
CourseFinanceAdminRole(self.course.id).remove_users(self.instructor)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
pro = Book.objects.using('other').create(pk=1, title="Pro Django", published=datetime.date(2008, 12, 16))
if not _is_url(self.io): r = fromstring(self.io, parser=parser)
args.outdf = os.path.realpath(args.outdf)
from __future__ import absolute_import import contextlib
from __future__ import absolute_import
module_type = BlockTypeKeyField(max_length=64, db_index=True)
assert_array_equal(np.argmin(samme_proba, axis=1), [2, 0, 0, 2]) assert_array_equal(np.argmax(samme_proba, axis=1), [0, 1, 1, 1])
self.assertNotEqual(id(boto_ec2_conn), id(boto3_ec2_conn))
raise NotImplementedError("%s doesn't implement make_symbolic_state" % type(self))
ts = self.ts[::2] self.assertRaises(Exception, ts.reindex, self.ts.index, method='foo')
mp = int(os.environ.get('JOBLIB_MULTIPROCESSING', 1)) or None if mp: try: import multiprocessing as mp import multiprocessing.pool except ImportError: mp = None
lines = dropwhile(len, pot_lines)
cohort = cohorts.get_cohort_by_id(course_key, int(cohort_id))
class DataSource(GDALBase): "Wraps an OGR Data Source object."
ssh_gateway_config['ssh_gateway_user'] = config.get_cloud_config_value( 'ssh_gateway_username', vm_, __opts__, default=None, search_global=False )
'django_comment_client', 'django_comment_common', 'discussion_api', 'notes',
for a in self.axes: if c == a.name: return a return None
import salt.utils from salt.utils.locales import sdecode as _sdecode from salt.exceptions import SaltInvocationError
n, p, k = 10, 5, 3 rng = np.random.RandomState(0)
assert not is_local and not self.has_resolvers return self.scope[key]
crypt_salt = secure_password(8, use_random=False)
self.store.unpublish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertFalse(self.store.has_published_version(item))
if callable(self.remote_field.limit_choices_to): return self.remote_field.limit_choices_to() return self.remote_field.limit_choices_to
disabled_create_block_types = XBlockDisableConfig.disabled_create_block_types() return [c_type for c_type in ADVANCED_COMPONENT_TYPES if c_type not in disabled_create_block_types]
self.values = np.delete(self.values, loc, 0) self.mgr_locs = self.mgr_locs.delete(loc)
self.attempt_upload_file_and_verify_result(test_case, 'upload_screenshot')
FEATURES['ENABLE_OPENBADGES'] = True
lookup_name = 'bboverlaps'
Xt = X for name, transform in self.steps[:-1]: Xt = transform.transform(Xt) return self.steps[-1][-1].decision_function(Xt)
store._handle.create_group(store._handle.root, 'bah')
from salt.states import htpasswd
time.sleep(0.025)
result = MultiIndex.from_arrays([range(10 ** 6), range(10 ** 6)]) assert (not (10 ** 6, 0) in result)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
visible_reqs = api.get_credit_requirements(self.course_key) self.assertEqual(len(visible_reqs), 1) self.assertEqual(visible_reqs[0]["namespace"], "grade")
if not token or token['eauth'] not in self.opts['external_auth']: log.warning('Authentication failure of type "token" occurred.') return ''
try: configuration = json.loads(json_string) except ValueError: raise GroupConfigurationsValidationError(_("invalid JSON")) configuration["version"] = UserPartition.VERSION return configuration
self.course_info['number'] = self.unique_id[0:6]
row_levels = [ss.index._get_level_number(x) for x in row_levels] column_levels = [ss.index._get_level_number(x) for x in column_levels]
from __future__ import unicode_literals
MAXSIZE = int((1 << 31) - 1)
other_user = UserFactory() self.assertFalse(ApiAccessRequest.has_api_access(other_user))
methods = ['standard', 'ltsa', 'hessian', 'modified'] labels = ['LLE', 'LTSA', 'Hessian LLE', 'Modified LLE']
import yaml from yaml.nodes import MappingNode, SequenceNode from yaml.constructor import ConstructorError try: yaml.Loader = yaml.CLoader yaml.Dumper = yaml.CDumper except Exception: pass
major_labels = inds % N minor_labels = inds // N
settings.WIKI_ENABLED = False self.assertIsNone(self.get_wiki_tab(self.user, self.course)) self.assertIsNone(self.get_wiki_tab(self.instructor, self.course))
storage = self.get_storage() response = self.get_response() storage.add(constants.INFO, 'test') for m in storage:
for type_list in valid_types: if r in type_list: return True if int(r / 10.) in type_list and (r % 10) == 0: return True
opts['open_mode'] = opts['open_mode'] is True opts['auto_accept'] = opts['auto_accept'] is True opts['file_roots'] = _validate_file_roots(opts)
return self._engine.is_monotonic_increasing
'cachedir': str,
with tm.assert_produces_warning(FutureWarning): pd.SparseTimeSeries(1, index=pd.date_range('20130101', periods=3))
if 'DJANGO_AUTO_COMPLETE' not in os.environ: return
for ax in axarr: if ax.is_last_row(): continue if sharex or len(ax.get_shared_x_axes() .get_siblings(ax)) > 1: _remove_labels_from_axis(ax.xaxis)
n_samples = len(digits.data) data = digits.data / 16. data -= data.mean(axis=0)
from salt.modules import memcached from salt.exceptions import CommandExecutionError, SaltInvocationError from salt.ext.six import integer_types
range = xrange zip = itertools.izip filter = itertools.ifilter map = itertools.imap reduce = reduce long = long unichr = unichr
score_subset = base_estimator.score(X_inlier_subset, y_inlier_subset)
return force_text(value)
if dtype is None: dtype, value = _infer_dtype_from_scalar(value) else: value = _possibly_cast_to_datetime(value, dtype)
result = sparse.loc[orig % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
cls.objects.filter(user=user, name=name).delete() cls.objects.create(user=user, name=name, value=value)
import logging import os import inspect import zipfile from tempfile import TemporaryFile
return self.submit_question_answer( self.problem_display_name, {'2_1': response1, '2_2': response2} )
if patterns is None: patterns = [] for pattern in patterns: if fnmatch.fnmatchcase(path, pattern): return True return False
from salt.ext.six.moves.urllib.parse import urlencode as _urlencode
self.options.saltfile = os.environ.get('SALT_SALTFILE', None)
return self.q(css='.prompt.{dialog_type} .message'.format(dialog_type=dialog_type)).text[0]
self.page = IndexPage(self.browser)
if self.is_transposed: obj = obj.transpose( *tuple(Series(self.data_orientation).argsort()))
last_sat = datetime(2013, 8, 31) next_sat = datetime(2013, 9, 28) offset_sat = LastWeekOfMonth(n=1, weekday=5)
self.assertEqual(response.context['user'], user) self.assertEqual(user, response.context['user'])
total_n_estimators = self.n_estimators if total_n_estimators < self.estimators_.shape[0]: raise ValueError('resize with smaller n_estimators %d < %d' % (total_n_estimators, self.estimators_[0]))
assert_true(X_scaled is not X)
return os.sep.join(folders_list_in_path)
tasks = instructor_task.api.get_instructor_task_history(course_id, task_type=task_type)
response = requests.get(self._get_url("api/v1/search")) self.assertEqual(response.status_code, 400)
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
return self._create_user(username, email, is_staff=True)
self.assertEquals(imported_word_cloud.data, '')
LogoutPage(self.browser).visit() AutoAuthPage(self.browser, course_id=self.course_id, staff=True).visit()
text = f.widget.format_value(result) self.assertEqual(text, '21.12.2010')
internal_use_only = False def __init__(self, exception): self.exception = exception def __call__(self, *args, **kwargs): raise self.exception
non_editable_fields = super(HtmlDescriptor, self).non_editable_metadata_fields non_editable_fields.append(HtmlDescriptor.use_latex_compiler) return non_editable_fields
notification_url = reverse_course_url('course_notifications_handler', self.course.id, kwargs={ 'action_state_id': 1, })
if not allow_future: if generic_view.uses_datetime_field: now = timezone.now() else: now = timezone_today() lookup['%s__lte' % date_field] = now
if not _latest_version == _version: _refresh_db = True
import salt.utils import salt.utils.dictupdate from salt.exceptions import SaltException
def is_int(v): return v is None or is_integer(v)
self.assertFalse(self.post.called) self.assertTrue(logger.error.called)
tmp *= 1 - damping A *= damping A -= tmp
try: os.unlink(filename_numpy) except: pass try: os.unlink(filename_larry) except: pass
if tab_types: return [{'tab_type': tab_type} for tab_type in tab_types.split(',')] else: return []
item_labels = self.obj._get_axis(info_axis)
import salt.ext.six as six
for _ in range(300): prev_log_likelihood = current_log_likelihood try: current_log_likelihood = gmm.fit(X).score(X) except ConvergenceWarning: pass assert_greater_equal(current_log_likelihood, prev_log_likelihood)
self.assertIn('\\xfa\\xf1\\xed\\xa9\\xf3\\xf0\\xe9 \\xb5\\xf3\\xf0\\xe9\\xf8', content) self.assertIn('\\xfa\\xf1\\xed\\xa9\\xf3\\xf0\\xe9 \\xb5\\xf3\\xf0\\xe9\\xf8\\xdf', content)
def __init__(self, connection): self.connection = connection def check(self, **kwargs): return [] def check_field(self, field, **kwargs): return []
X = 3 * diabetes.data
import salt.utils import salt.utils.decorators as decorators from salt.ext import six from salt.exceptions import CommandExecutionError from salt.utils import locales
leaf_weights = node_weights[node_weights != 0] assert_greater_equal( np.min(leaf_weights), total_weight * est.min_weight_fraction_leaf, "Failed with {0} " "min_weight_fraction_leaf={1}".format( name, est.min_weight_fraction_leaf))
if keep_blank_values: nv.append('') else: continue
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
MOBILE_STORE_URLS = ENV_TOKENS.get('MOBILE_STORE_URLS', MOBILE_STORE_URLS)
XA_checked, XB_checked = check_pairwise_arrays(XA, XB) assert_equal(XA_checked.dtype, np.float32) assert_equal(XB_checked.dtype, np.float32)
from __future__ import absolute_import import json import logging import os
exc_info_on_loglevel=logging.DEBUG
cat = [False, False, False] _check_one_hot(X, X2, cat, 3)
iris = datasets.load_iris() X = iris.data y = iris.target
models.VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ.objects.create()
self.assertCourseSummaryFields(course_summaries)
pass
ret['result'] = True ret['comment'] = 'vm {0} already running'.format(name)
raise NotImplementedError(str(self.__class__) + " does not " + "implement kl_divergence")
f = function([X, y], [gradients[W].sum(), clipped_gradients[W].sum()], allow_input_downcast=True)
from salt.modules import hadoop
cummin_xs = self.tsframe.cummin(axis=1) self.assertEqual(np.shape(cummin_xs), np.shape(self.tsframe))
bulk_write_record.index = copy.deepcopy(bulk_write_record.initial_index) bulk_write_record.course_key = course_key
EmptyPromise( lambda: self.q(css=create_ccx_button).present, "Create a new Custom Course for edX" ).fulfill() self.q(css=create_ccx_button).click()
AutoAuthPage(self.browser, username=self.USERNAME, email=self.EMAIL, course_id=self.course_id, staff=True).visit()
indices = np.array(indices, dtype=int) indices.shape = (-1, 2) return indices
log.error( 'Top function {0} failed with error {1} for minion ' '{2}'.format( fun, exc, load['id'] ) )
import salt.utils from salt.exceptions import SaltInvocationError
return _("{profile_name} URL").format(profile_name=profile)
self.assertRaises(NotImplementedError, lambda: pd.Categorical(np.array([list('abcd')])))
if not self.hyperparameter_length_scale.fixed: length_scale_gradient = \ 4 / self.length_scale**2 * sin_of_arg**2 * K length_scale_gradient = length_scale_gradient[:, :, np.newaxis]
import salt.netapi
return TransformPoint(self, 'origin')
initialize_permissions(destination_course_key, User.objects.get(id=user_id))
mako_middleware_process_request(self.request) self.request.user = self.user
form = PasswordResetFormNoActive({'email': email})
category_strs = [x.strip() for x in category_strs] return category_strs
d1 = DenseDesignMatrix(topo_view=topo_view) slice_d = from_dataset(d1, 5) assert slice_d.X.shape[1] == d1.X.shape[1] assert slice_d.X.shape[0] == 5
self.assertEqual( actual_url, 'http://example-storage.com/profile-images/{name}_{size}.jpg?v={version}'.format( name=expected_name, size=expected_pixels, version=expected_version ) )
idx = self.create_index() expected = np.array([4, 0, 1, 5, 2, 3])
present = _if_str_then_list(present) checks[None] = present boolean = _if_str_then_list(boolean) checks[bool] = boolean
self.assertNotIn('hello', request.session.load())
k3 = 0.66**2 \ * RationalQuadratic(length_scale=1.2, alpha=0.78) k4 = 0.18**2 * RBF(length_scale=0.134) \
return xmodule_instance_args.get('xqueue_callback_url_prefix', '') if xmodule_instance_args is not None else ''
servicename = 'foo'
CHECKPOINT_PATTERN = r'(?P<checkpoint_name>[^/]+)'
self.modulestore = modulestore self.course_key = course_key self.definition_locator = DefinitionLocator(block_type, definition_id) self.field_converter = field_converter
h_date1 = Period(freq='H', year=2007, month=1, day=1, hour=0) h_date2 = Period(freq='2H', year=2007, month=1, day=1, hour=0)
import tornado import tornado.gen import tornado.concurrent
if birth_year: self.set_birth_year(birth_year)
#)
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
return
c1 = Categorical(["a", "b", "c", "a"]) c2 = Categorical(c1) tm.assert_categorical_equal(c1, c2)
cputime_percent = (1.0e-7 * cputime / host_cpus) / vcpus
self.course.enable_subsection_gating = True self.save_course()
from __future__ import absolute_import import logging import salt.utils.vault
self.assertTrue(cp.index.identical(self.frame.index))
from __future__ import unicode_literals
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Find courses") self.assertNotContains(response, "Schools & Partners")
AT_xT = self.rmul_T(self.transpose_left(x, False)) rval = self.transpose_right(AT_xT, True) return rval
import datetime
columns_index = [8, 7, 2, 3, 4, 5, 6, 1, 0] cal_housing = cal_housing[:, columns_index] joblib.dump(cal_housing, filepath, compress=6)
AFFILIATE_COOKIE_NAME = 'affiliate_id'
with self.assertRaises(ValueError): setattr(p, 'restaurant', p)
request.session[LANGUAGE_SESSION_KEY] = preview_lang
_win(kernel32.CloseHandle, wintypes.BOOL,
if self._convert_dates is not None: for key in self._convert_dates: self.fmtlist[key] = self._convert_dates[key]
offset = BDay() offset2 = BDay() offset2.normalize = True self.assertEqual(offset, offset2)
retc["timestamp"] = time.time()
if is_caller_html_or_text is False: self.results.violations.append(ExpressionRuleViolation( Rules.python_requires_html_or_text, self.node_to_expression(node.func) ))
if 'grains' not in __opts__ or not __opts__['grains']: __opts__['grains'] = salt.loader.grains(__opts__)
super(VectorSequenceSpace, self)._validate_impl(is_numeric, batch)
self.assertTrue(hasattr(course_overview, 'image_set')) self.assertEqual(course_overview.image_set.small_url, '') self.assertEqual(course_overview.image_set.large_url, '')
if line.lstrip().startswith('#') or line.isspace(): continue if line.startswith('iface'): sline = line.split()
powerpath.__salt__ = {}
try: return cls.objects.get(Q(invoice_id=invoice_id), Q(status='completed') | Q(status='refunded')) except InvoiceTransaction.DoesNotExist: return None
g[['A', 'C']]
from __future__ import absolute_import
add_geom = void_output(lgdal.OGR_G_AddGeometry, [c_void_p, c_void_p]) import_wkt = void_output(lgdal.OGR_G_ImportFromWkt, [c_void_p, POINTER(c_char_p)])
return page.q(css='.wrapper-notification-mini.is-shown').present
return _check_stop_list(self.stop_words)
rows = [] rows.append([datetime(2010, 1, 1), 1])
self.wait_for_ajax() super(LibraryEditPage, self).wait_until_ready()
X = np.asfortranarray(iris.data.astype(tree._tree.DTYPE)) y = iris.target
space, source = data_specs if isinstance(space, CompositeSpace): sub_spaces = space.components sub_sources = source else: sub_spaces = (space,) sub_sources = (source,)
resp = self.create_xblock(category='vertical') usage_key = self.response_usage_key(resp)
if isinstance(value, Series):
time.sleep(1) continue
return json.dumps({'message': 'Task revoked before running'})
'WHAT_IS_VERIFIED_CERT': 'verified-certificate',
inlineformset_factory(Parent, Child, fk_name='mother', fields="__all__") inlineformset_factory(Parent, Child, fk_name='father', fields="__all__")
delete = salt.utils.alias_function(remove, 'delete') purge = salt.utils.alias_function(remove, 'purge')
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
xblocks = self.course_fixture.get_nested_xblocks(category="vertical") for index in range(num_units): self._bookmark_unit(xblocks[index].locator)
states = [] def __init__(self, opts): pass
message = _('This student (%s) is already allowed to skip the entrance exam.') % self.student.email self.assertContains(response, message)
if on_rtd: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms' else: os.environ['DJANGO_SETTINGS_MODULE'] = 'lms'
return self.q(css='input[name=problem-grade-report]')
self.dashboard_page.visit() self.assertFalse(self.dashboard_page.pre_requisite_message_displayed())
for partition in self.course_partitions: if partition.id == user_partition_id: return partition return None
self.set_user_partitions(self.vertical_location, [split_test_partition, self.animal_partition]) self.check_access(self.red_cat, self.vertical_location, False)
return getattr(_urlconfs, "value", default)
resp_params = PaymentFakeView.response_post_params(post_params) self.assertEqual(resp_params.get('decision'), 'ACCEPT')
from __future__ import absolute_import
return utils.CursorWrapper(cursor, self)
content = String(default="content", scope=Scope.content)
if (v1 is not None and v2 is None) or \ (v1 is None and v2 is not None): match = False else: match = (v1 == v2)
self.assertEqual(self.index[2], ('bar', 'one'))
import logging
result = df.assign(C=lambda x: x.B / x.A) assert_frame_equal(result, expected)
cursor.close()
self.send_delete(self.client, expected_status=404)
f = lambda x: x.replace(1, 0, inplace=True) _check_f(d.copy(), f)
return ip_str
link_cohort_to_partition_group( test_cohort, self.user_partition.id, self.groups[0].id, ) self.assert_student_in_group(self.groups[0])
from __future__ import absolute_import import logging
cv = np.tile(covars, (means.shape[0], 1, 1)) return _log_multivariate_normal_density_full(X, means, cv)
self.assertEqual([], os.listdir(TMP_JID_DIR))
return int(self.get_setting_element(self.COUNT_LABEL).get_attribute('value'))
self.repo.git.tag('-d', ref.name[10:])
from __future__ import absolute_import import os import string import random
course_enrollment.mode = u'verified' course_enrollment.save() self.assertEqual(course_enrollment.mode, u'verified')
ret = {} for row in _response['rows']: jid = row['id'] if not salt.utils.jid.is_jid(jid): continue
get_version = { 'Linux': linux_cpuinfo, 'FreeBSD': freebsd_cpuinfo, }
return -np.sum((pi / pi_sum) * (np.log(pi) - log(pi_sum)))
from unit.modules.boto_elasticsearch_domain_test import BotoElasticsearchDomainTestCaseMixin
import integration
for item in cls.__dict__: if item[0] == '_': continue
from __future__ import absolute_import import pprint import logging import time import urllib
self._epochs_seen += 1
try: import raven from raven.handlers.logging import SentryHandler HAS_RAVEN = True except ImportError: HAS_RAVEN = False
s = Series(date_range('20130101', periods=5, tz='US/Eastern'), name='xxx') for prop in ok_for_dt:
return [FakeEmail.FakeTarget()]
self.assert_grade(problem, "Other String", "incorrect") self.assert_grade(problem, "second", "incorrect")
sql, params = self.compile(val)
assert hasattr(self, 'shape')
return val - timedelta(microseconds=val.microsecond)
COURSE_ABOUT_VISIBILITY_PERMISSION = 'see_exists'
ks = State.objects.get(poly__contains=lawrence.point) self.assertEqual('Kansas', ks.name)
microsite.enable_microsites_pre_startup(log)
context.render_context[self] = itertools_cycle(self.cyclevars)
assert X.ndim == 2 return T.nnet.softmax(X*self.P)
from __future__ import division import numpy as np import scipy.sparse as sp import operator import array
other_session2 = self.backend() other_session2['foo'] = 'bar' other_session2.save()
if span <= periodspermonth: day_start = period_break(dates_, 'day') month_start = period_break(dates_, 'month')
EmptyPromise( lambda: cohort_name == cohort_management_page.get_selected_cohort(), "Waiting for new cohort" ).fulfill() cohort_management_page.add_students_to_selected_cohort([student])
>>> get_to_timestamp_base(get_freq_code('D')[0]) 6000 >>> get_to_timestamp_base(get_freq_code('W')[0]) 6000 >>> get_to_timestamp_base(get_freq_code('M')[0]) 6000
from distutils.version import LooseVersion try:
import subprocess
if position == "denominator": latex += render_frac(numerator, denominator) else: num_latex = r"\cdot ".join(k.latex for k in numerator) latex += num_latex
mean_tpr /= n_classes
from __future__ import absolute_import import os import os.path import time import logging import pprint import base64 import salt.cache import salt.config as config import salt.utils.cloud from salt.exceptions import SaltCloudSystemExit
return self.clone()
user = User.objects.get(email=EMAIL) self.assertEqual(user.username, EDX_USER_ID)
euclidean_pkl = pickle.loads(pickle.dumps(euclidean)) pyfunc_pkl = pickle.loads(pickle.dumps(pyfunc))
K_test = np.dot(X_[180:], X_[:180].T) y_test = y_[180:]
return self._maybe_cast_indexer(label)
if actual_data != data: ret.update({item: {'old': actual_data, 'new': data}})
import salt.utils from salt.utils import files as util_files
self.assertEqual(resp.status_code, 200)
self.assertUgettext('Date/time', 'Datum/Zeit (APP)')
for _ in range(100): response = self.client.post(self.url, data=payload) if response.status_code == 403: break
_EAW_MAP = {'Na': 1, 'N': 1, 'W': 2, 'F': 2, 'H': 1}
org = models.CharField(max_length=64, db_index=True, blank=True) course_id = CourseKeyField(max_length=255, db_index=True, blank=True) role = models.CharField(max_length=64, db_index=True)
new_io = StringIO() management.call_command('migrate', interactive=False, stdout=new_io)
Form(instance=None) FormSet(instance=None)
X, y = samples_generator.make_classification( n_features=20, n_informative=3, n_redundant=0, n_classes=4, n_clusters_per_class=2)
shutil.rmtree(root_dir)
ASSET_XSD_FILE = 'assets.xsd'
"xmodule_js",
csv_file = open(path, 'r')
pass
'pillar_roots': dict,
deleted = [] valid = [] for enrollment in enrollments: if enrollment.get("course_details") is not None: valid.append(enrollment) else: deleted.append(enrollment)
def item_enclosure_url(self, item): return 'http://example.com' def item_enclosure_size(self, item): return 0 def item_mime_type(self, item): return 'image/png'
self._check_verticals([self.vert_loc])
n_iter_ = max(n_iter_) if n_iter_ >= max_iter and verbose > 0: warnings.warn("Liblinear failed to converge, increase " "the number of iterations.", ConvergenceWarning)
choose_track_url = reverse('course_modes_choose', args=[unicode(self.course.id)]) self.client.post(choose_track_url, self.POST_PARAMS_FOR_COURSE_MODE['verified'])
staticfiles.finders.get_finder.cache_clear()
res_col = df.loc[:, "cats"] tm.assert_series_equal(res_col, exp_col) self.assertTrue(com.is_categorical_dtype(res_col))
if not name.startswith('_'): doc['Traits'].append((name, trait, comment.splitlines()))
if not self.has_course(source_course_id): raise ItemNotFoundError("Cannot find a course at {0}. Aborting".format(source_course_id))
for child in children_map[block_to_remove]: for parent in parents_map[block_to_remove]: removed_children_map[parent].append(child)
return self.q(css='.wrapper-create-library').visible
if isinstance(val, np.ndarray): if val.ndim != 0: raise ValueError( "invalid ndarray passed to _infer_dtype_from_scalar")
ravel = lambda i: i.ravel() if isinstance(i, np.ndarray) else i indexer = tuple(map(ravel, indexer))
n_topics, X = _build_sparse_mtx() prior = 1. / n_topics lda_1 = LatentDirichletAllocation(n_topics=n_topics, doc_topic_prior=prior, topic_word_prior=prior, random_state=0) lda_2 = LatentDirichletAllocation(n_topics=n_topics, random_state=0)
import salt.crypt import salt.utils import salt.utils.cloud import salt.config import salt.syspaths import uuid
return next((tab for tab in tab_list if tab.get('url_slug') == url_slug), None)
def f(self, *args, **kwargs): raise NotImplementedError("{0!r} nodes are not " "implemented".format(node_name)) return f
except self.LibraryValueNotFoundException: val = None if val is None: raise ValueError("Key '%s' not found" % key) return val
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
if obj: return self.readonly_fields + ('status', 'checkpoint', 'user', 'response', 'error') return self.readonly_fields
import salt.utils.jid import salt.returners import salt.ext.six as six
res = self.client.get('/dates/books/2000/jan/1/') self.assertEqual(res.status_code, 404)
css_class = 'start-date' title = ugettext_lazy('Course Starts') @property def date(self): return self.course.start
t1 = Timestamp((1352934390 * 1000000000) + 1000000 + 1000 + 1) idx = DatetimeIndex([t1])
mark.delete(using='other')
return cls._freq_reso_map.get(freq, 'day')
pass
expected = '<video url_name="SampleProblem" download_video="false"/>\n' self.assertEquals(expected, etree.tostring(xml, pretty_print=True))
self.run_function('beacons.save')
assert_raises(ValueError, next, KFold(4).split(X1))
concat(DataFrame(np.random.rand(5, 5)) for _ in range(3))
trainset = ToyDataset() testset = ToyDataset() return trainset, testset
if not self.onOffset(dt): if self.n >= 0: return self._next_opening_time(dt) else: return self._prev_opening_time(dt) return dt
dt = Timestamp('20130101 09:10:11') result = dt.floor('D') expected = Timestamp('20130101') self.assertEqual(result, expected)
new_user = authenticate(username=user.username, password=params['password']) login(request, new_user) request.session.set_expiry(0)
ALLOWED_HOSTS = []
self.assertTrue(self.video.select_language('zh'))
data["children"] = obj["children"]
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0, noise=10)
query = "SELECT * FROM raw_query_author" authors = Author.objects.all() self.assertSuccessfulRawQuery(Author, query, authors)
rng = np.random.RandomState(1999) n, p = 50, 3
target = [-1] * len(JUNK_FOOD_DOCS) + [1] * len(NOTJUNK_FOOD_DOCS)
maxscore = 0 for responder in self.responders.values(): maxscore += responder.get_max_score() return maxscore
id: wFGEwgregeqw3435gDger key: GDE43t43REGTrkilg43934t34qT43t4dgegerGEgg location: cn-qingdao driver: aliyun
if rolename not in [FORUM_ROLE_ADMINISTRATOR, FORUM_ROLE_MODERATOR, FORUM_ROLE_COMMUNITY_TA]: return HttpResponseBadRequest(strip_tags( "Unrecognized rolename '{}'.".format(rolename) ))
from __future__ import absolute_import
self.assertEqual(len(mail.outbox), 0) user_status = VerificationStatus.objects.filter(user=self.user).count() self.assertEqual(user_status, 0)
from __future__ import absolute_import import os
clipboard_get = paste clipboard_set = copy
'ENABLE_COURSEWARE_INDEX': False,
super(TestHeaderMenu, self).setUp()
request_uuid = self._create_credit_request_and_get_uuid()
html5_ids = [x.split('/')[-1].rsplit('.', 1)[0] for x in html5_sources] return html5_ids
with self.assertNumQueries(1): mtv = ModelToValidate(number=10, name='Some Name', id=123) setattr(mtv, '_adding', True) mtv.full_clean()
python_suite = suites.PythonTestSuite('Python Tests', **opts) js_suite = suites.JsTestSuite('JS Tests', mode='run', with_coverage=True)
names_t_actual = sel.transform([feature_names]) assert_array_equal(feature_names_t, names_t_actual.ravel())
continue
from __future__ import absolute_import
raise NotImplementedError( 'subclasses of BaseDatabaseWrapper may require a ' '_start_transaction_under_autocommit() method' )
self.q(css=self._bounded_selector('.remove-admin-role')).click() wait_for_ajax_or_reload(self.browser)
clear_url_caches()
saltenv = env
clf = NearestCentroid() clf.fit(X_csr, y) assert_array_equal(clf.predict(T), true_result)
import uuid SECRET_KEY = uuid.uuid4().hex
def __enter__(self): return self
self.create_axes(axes=axes, obj=obj, validate=append, min_itemsize=min_itemsize, **kwargs)
return JsonResponse( {"error": "If group_id is specified, user_partition_id must also be specified."}, 400 )
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'aliyun', vm_['profile'], vm_=vm_) is False: return False
score_css = 'div.problem-progress' expected_text = '({})'.format(score) world.wait_for(lambda _: world.css_has_text(score_css, expected_text))
for a in args: if isinstance(a, theano.Variable): return True return False
self.assertTrue(self.client.login(username=requesting_user.username, password=TEST_PASSWORD)) if make_inactive: requesting_user.is_active = False requesting_user.save()
object_list = get_mors_with_properties(service_instance, object_type, property_list=[property_name], container_ref=container_ref)
expected_repr = '2013-05-01 07:15:45.123456789' expected_value = 1367392545123456789 self.assertEqual(ts.value, expected_value) self.assertIn(expected_repr, repr(ts))
result1 = s.loc[2:5] result2 = s.ix[2:5] result3 = s[2:5]
_win(kernel32.WaitForSingleObject, DWORD_IDV,
from __future__ import absolute_import import logging
pass
self.payment_and_verification_flow.proceed_to_payment()
self.store.convert_to_draft(self.vertical_x1a, self.user_id) self.store.convert_to_draft(self.vertical_y1a, self.user_id)
apache: pkg: - installed - name: httpd service: - running - enable: True - name: httpd
self.assertTrue(modal.has_release_date()) self.assertFalse(modal.has_due_date()) self.assertFalse(modal.has_policy())
clean_lines = [] in_docstring = False for line in func_lines: line = line.strip() if in_docstring and _is_triplequote(line): in_docstring = False continue
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
try:
response = self.client.get(show_url) for msg in data['messages']: self.assertNotContains(response, msg)
self.enable_saml() response = self.client.get(self.LOGIN_URL) self.assertEqual(response.status_code, 302)
_groupby = _algos.groupby_object _arrmap = _algos.arrmap_object _left_indexer_unique = _algos.left_join_indexer_unique_object _left_indexer = _algos.left_join_indexer_object _inner_indexer = _algos.inner_join_indexer_object _outer_indexer = _algos.outer_join_indexer_object _box_scalars = False
e = np.zeros((n_samples, convergence_iter))
X = random_state.rand(n_samples * n_components) X = X.reshape((n_samples, n_components))
pass
from pylearn2.space import (SimplyTypedSpace, VectorSpace, Conv2DSpace, CompositeSpace, VectorSequenceSpace, IndexSequenceSpace, IndexSpace, NullSpace, is_symbolic_batch) from pylearn2.utils import function, safe_zip
if isinstance(value, bytes): return bytes(value) if isinstance(value, six.text_type): return bytes(value.encode(self.charset))
return self.background_task_history_button.is_present()
result = process_postpay_callback(params) self.assertTrue(result['success']) self.assert_dump_recorded(result['order'])
try: orig_name = orig_name.encode('utf-8') except: pass converted_names.append( '{0} -> {1}'.format(orig_name, name))
for student in students[:4]: self.assertIn( GeneratedCertificate.certificate_for_student(student, self.course.id).status, CertificateStatuses.PASSED_STATUSES )
self.client.login(username=self.white_label_course_instructor.username, password='test')
elif request.method == 'DELETE': return delete_entrance_exam(request, course_key)
from django.contrib.gis.utils import LayerMapping
for handler in self._upload_handlers: if hasattr(handler, 'file'): handler.file.close()
with salt.utils.fopen(full, 'w') as _fh: _fh.writelines(lines)
RSTR_RE = r'(?:^|\r?\n)' + RSTR + '(?:\r?\n|$)'
return xblock._edit_info.get('subtree_edited_on')
'AUTOMATIC_VERIFY_STUDENT_IDENTITY_FOR_TESTING': False,
df = orig.copy() df.ix["j", :] = ["b", 2] tm.assert_frame_equal(df, exp_single_row)
initial_handlers_count = len(logging.root.handlers)
deadline = course_deadlines.get(enrollment.course_id)
'STUDIO_REQUEST_EMAIL': '',
courses = ['toy', 'simple', 'simple_with_draft', 'test_unicode']
raise ValueError('sp_index must be a SparseIndex')
if force: SEMAPHORE_MAP[path].assured_path = True
result = Series(i) assert_series_equal(result, expected)
i18n = self.runtime.service(self, "i18n") return course_metadata_utils.course_start_datetime_text( self.start, self.advertised_start, format_string, i18n.ugettext, i18n.strftime )
nova.__grains__ = {} nova.__salt__ = {} nova.__context__ = {} nova.__opts__ = {}
return True
expanded_cached_pkg = str(os.path.expandvars(cached_pkg))
CourseEnrollment.unenroll(self.user, course_key)
self.verify_discussion_topics_after_reload(self.inline_key, cohorted_topics_after)
return reverse_course_url('group_configurations_list_handler', self.course.id)
indices = self.lambdas_.argsort()[::-1] self.lambdas_ = self.lambdas_[indices] self.alphas_ = self.alphas_[:, indices]
self.assertEqual(middleware.cache_timeout, 30) self.assertEqual(middleware.key_prefix, 'middlewareprefix') self.assertEqual(middleware.cache_alias, 'other')
return ''
import salt.config import salt.loader
lookup_name = 'exactly' def get_rhs_op(self, connection, rhs): return connection.operators['exact'] % rhs
from __future__ import unicode_literals
assert_equal(len(data2cats.filenames), len(data2cats.target)) assert_equal(len(data2cats.filenames), len(data2cats.data))
if axis is not None: axis = self._get_axis_number(axis)
import logging import os
return SurveyForm.get_field_names_from_html(self.form)
from salt.modules import glusterfs from salt.exceptions import SaltInvocationError
return self.q(css='{} .section-name input'.format(parent_css)).present
with self.assertRaises(InvalidSessionKey): self.backend()._key_to_file("a/b/c")
with tm.assertRaises(ValueError): df.sample(n=1, axis=1, weights=[0.5] * 10)
ChoiceFormSet = formset_factory(Choice)
return ewkb_w(dim=3 if self.hasz else 2).write_hex(self)
REPR_OUTPUT_SIZE = 20
return timezone.zone
response = self.send_patch(self.client, {field_name: ""}) self.assertIsNone(response.data[field_name])
locator = BlockUsageLocator(course_locator, block_type='chapter', block_id='chapter1') self.assertTrue( modulestore().has_item(locator), "couldn't find chapter1" )
xblock = modulestore().get_item(location) xblock.display_name = display_name self.store.update_item(xblock, self.user.id)
filterwarnings('ignore', message='No request passed to the backend, unable to rate-limit')
p, h = max_pool_c01b(z, (pool_rows, pool_cols) ) func = function([z], [p, h], mode = mode_without_gpu)
self.q(css=self.PAGE_NUMBER_INPUT_CSS).results[0].send_keys(unicode(page_number), Keys.ENTER) self.wait_for_ajax()
FILE_UPLOAD_STORAGE_BUCKET_NAME = ENV_TOKENS.get('FILE_UPLOAD_STORAGE_BUCKET_NAME', FILE_UPLOAD_STORAGE_BUCKET_NAME) FILE_UPLOAD_STORAGE_PREFIX = ENV_TOKENS.get('FILE_UPLOAD_STORAGE_PREFIX', FILE_UPLOAD_STORAGE_PREFIX)
self.assertEqual(self.func(None), [])
self.unit_page.xblocks[1].save_settings()
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
from __future__ import absolute_import import tornado.stack_context import tornado.gen from tornado.testing import AsyncTestCase, gen_test import threading import time
self.client.login(username=self.coach.username, password="test")
unused_char = self._stream.read(1) if not unused_char: raise InputStreamExhausted() self._stream.unget(unused_char)
return utils.format_number(value, max_digits, decimal_places)
rvals, _ = scan( armijo, outputs_info=states, n_steps=n_iters, name='armijo', mode=theano.Mode(linker='cvm'), profile=profile)
Comparison.objects.create( first_obj=cheetah, other_obj=tiger, comparative="faster" ) Comparison.objects.create( first_obj=tiger, other_obj=cheetah, comparative="cooler" )
self.navigate_to_video()
self.vert1 = ItemFactory.create( parent_location=self.seq1.location, category='vertical', display_name='untitled vertical 1' )
documents.append({'order_id': 10, 'quantity': 5})
'Content-Type': content_type,
init = cls.__init__
assert_true(hasattr(InheritanceMixin, attribute))
self.server.cleanup() self.respond()
space = [self.spaces[s] for s in self._get_sources] return space[0] if len(space) == 1 else tuple(space)
if self.xml.get('inline', ''): tree.set('class', 'inline')
if field == axis_name:
from random import choice from string import letters, digits, punctuation RANDOM_SHARED_SECRET = ''.join( choice(letters + digits + punctuation) for x in range(250) )
return self._constructor(result, index=self.index, copy=False).__finalize__(self)
self.proxy = salt.loader.proxy(self.opts)
prior = DummyPrior() vae = DummyVAE() prior.set_vae(vae) prior.set_vae(vae)
self._create_a_timed_exam_and_attempt()
self.assertEqual(s.dropna().values.item(), 'l')
self.q(css=TEAMS_LINK_CSS).filter( text='View Teams in the {topic_name} Topic'.format(topic_name=topic_name) )[0].click() self.wait_for_ajax()
task_folder = task_service.GetFolder(location) folders = task_folder.GetFolders(0)
PAID_COURSE_REGISTRATION_CURRENCY = ['usd', '$']
for param_name, param in self.parameters.items(): if (param._partial_kwarg and param_name not in kwargs): kwargs[param_name] = param.default
result_list_with_tz_support = result_list[:] assert result_list_with_tz_support[-4] == '2\xa0days, 6\xa0hours from now' result_list_with_tz_support[-4] == '2\xa0days, 5\xa0hours from now'
author = self.get_object() context = {'custom_' + self.get_context_object_name(author): author} return self.render_to_response(context)
f_init = compile_f_init() f_step = compile_f_step() self._compiled_cache = (state, indices, f_init, f_step) return self._compiled_cache[2:]
self.wait_for_ajax() return self.q(css='.join-team .join-team-message').text[0]
return self.__language
course_outline = self.api_response().data course_outline[0]['summary'].pop("id") self.assertEqual(course_outline[0]['summary'], expected_output)
from salt.exceptions import SaltException from salt.modules import grains as grainsmod from salt.utils import dictupdate
raise NotImplementedError()
class_mapping = defaultdict(int) class_mapping.default_factory = class_mapping.__len__ yt = self._transform(y, class_mapping)
with self.assertNumQueries(1): bookmarks = api.get_bookmarks(user=self.user, course_key=course.id, serialized=False) self.assertEqual(len(bookmarks), count)
is_doctest = contains_doctest(code) if 'format' in options: if options['format'] == 'python': is_doctest = False else: is_doctest = True
for i, hyperparameter in enumerate(kernel.hyperparameters): theta[i] = np.log(42) kernel.theta = theta assert_almost_equal(getattr(kernel, hyperparameter.name), 42)
continue
return {'name': name, 'changes': {}, 'result': True, 'comment': ''}
import salt.syspaths import salt.utils import salt.utils.event import salt.ext.six as six from salt.ext.six import string_types
if ac_only is not None: task_definition.Settings.DisallowStartIfOnBatteries = ac_only if stop_if_on_batteries is not None: task_definition.Settings.StopIfGoingOnBatteries = stop_if_on_batteries if wake_to_run is not None: task_definition.Settings.WakeToRun = wake_to_run
text = f.widget.format_value(result) self.assertEqual(text, '01:30:05 PM 21/12/2010')
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
if kw_overrides_match is _marker: return profile_match return kw_overrides_match
num_braces = 0
self.q(css='nav.%s * .previous-page-link' % position)[0].click() self.wait_until_ready()
CourseRerunState.objects.initiated(source_course_key, destination_course_key, request.user, fields['display_name'])
response = self.ajax_request('bad_answer', {}) self.assertDictEqual(response, {'error': 'Unknown Command!'})
with salt.utils.fopen(path, 'r') as fp_: return fp_.read()
self.cohort_name = "OnlyCohort" self.setup_cohort_config(self.course_fixture) self.cohort_id = self.add_manual_cohort(self.course_fixture, self.cohort_name)
attempt.status = "submitted" attempt.deny(DENY_ERROR_MSG) attempt.status = "submitted" attempt.approve()
self.assertEqual(self.cudnn2d.get_params(), [self.filters])
if '.' in val: val = float(val) else: val = int(val) data[plugin][key] = val
termination_criterion = EpochCounter(5)
self.assertEqual(holidays, [datetime(1986, 1, 20, 0, 0), datetime( 1987, 1, 19, 0, 0)])
return course_metadata_utils.clean_course_key(self.location.course_key, padding_char)
import salt.utils import integration from salt.utils.verify import ( check_user, verify_env, verify_socket, zmq_version, check_max_open_files, valid_id )
DEPRECATED_SETTINGS = ["CSS Class for Course Reruns", "Hide Progress Tab", "XQA Key"]
column = info[0].index('LoadPercentage')
resource = {"id": self.resource_id, 'event': test_case['event']} self.check_event_response_by_key('handle_vote', resource, 'newVotes', test_case['new_votes'])
cc_rendered_selector = self.get_element_selector(CSS_CLASS_NAMES['closed_captions']) self.wait_for_element_invisibility(cc_rendered_selector, 'Closed captions hidden')
raise
self.assertEqual(iri_to_uri(iri_to_uri(iri)), uri)
for entry in entries: self.assertChildNodes(entry, ['title', 'link', 'id', 'summary', 'georss:point'])
good_hosts = list(settings.CSRF_TRUSTED_ORIGINS) good_hosts.append(good_referer)
cat = pd.Categorical([1, 2, 3, np.nan], categories=[1, 2, 3]) self.assertTrue(com.is_integer_dtype(cat.categories))
import salt.config as config
user_not_added = User.objects.create_user('testuser2', 'test+courses2@edx.org', 'foo2') self.assertFalse(user_has_role(user_not_added, CourseCreatorRole()))
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
self.q(css=selector)[0].send_keys(value)
'jinja_lstrip_blocks': bool,
todelete = [] for key in repo_opts: if repo_opts[key] != 0 and not repo_opts[key]: del repo_opts[key] todelete.append(key)
final_template, final_locals = process_template(template, _globals) _globals.update(final_locals)
cPickle.dumps(x)
return 0
DATE_INPUT_FORMATS = [
tag = match.group(0) if ( ALLOWED_BASIC_TAG_PATTERN.match(tag) or ALLOWED_A_PATTERN.match(tag) or ALLOWED_IMG_PATTERN.match(tag) ): return tag else: return ""
indexer = convert_to_index_sliceable(self, key) if indexer is not None: return self._getitem_slice(indexer)
if not snapshot: ret['error'] = 'one or more snapshots must be specified'
break
people = Person.objects.all().select_for_update() with self.assertRaises(transaction.TransactionManagementError): list(people)
_mapping = {}
mod = import_module(mod_path) try: cls = getattr(mod, cls_name) except AttributeError: if module is None: import_module(entry) else: raise
if func_supports_parameter(loader.get_template_sources, 'template_dirs'): args.append(template_dirs) for origin in loader.get_template_sources(*args): yield origin
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
mock_create.return_value = None
buckets = 10 bucket_width = 1. / float(buckets) for i in xrange(buckets): lower_lim = i * bucket_width upper_lim = (i+1) * bucket_width
offset = CDay() offset2 = CDay() offset2.normalize = True self.assertEqual(offset, offset2)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
html.add_header(2, title_map[table_type]) html.add_to_body(phase_table.table)
nbrs_X = neighbors.NearestNeighbors(n_neighbors=3) nbrs_X.fit(X) dist_X, ind_X = getattr(nbrs_X, method)(Y)
return { "result": "inclusion_only_unlimited_args - Expected result: %s" % ( ', '.join(six.text_type(arg) for arg in args) ) }
from datetime cimport *
ret = self.run_state('ssh_known_hosts.absent', test=True, **kwargs) self.assertSaltTrueReturn(ret)
with extend_sys_path(self.base_location, self.other_location): with self.assertRaises(ImproperlyConfigured): with self.settings(INSTALLED_APPS=['nsapp']): pass
tm.set_testing_mode()
def default(obj): return msgpack.ExtType(78, obj)
from salt.modules import system
ir = IsotonicRegression(increasing='auto', out_of_bounds="raise") ir.fit(x, y)
if indexer is None: indexer = np.arange(len(labels))
self.assert_grade(problem, 'choice_3', 'incorrect')
super(BadImplementationAbstractEnrollmentReportProvider, self).get_user_profile(user_id)
return - T.nnet.sigmoid(self.G(X, model))
assert_array_equal(reg.predict([[0.2, -1.0]]), np.array([-1]))
instructor_task = _reserve_task(course_key, task_type, task_key, task_input, request.user)
if len(set(current_domains).intersection(bypass_domains)) != len(bypass_domains): changes_needed = True
ks = State.objects.get(name='Kansas') self.assertEqual('Lawrence', City.objects.get(point__relate=(ks.poly, within_mask)).name)
if not cls._meta.abstract: signals.post_init.connect(self.update_dimension_fields, sender=cls)
STUDIO_BASE_URL = os.environ.get('studio_url', 'http://localhost:8031')
result2 = func(np.arange(50), span=10) self.assertEqual(result2.dtype, np.float_)
def get(self, _key): return None def set(self, key, value, timeout=None): pass
self.assertEqual(ls.wkt, LineString(*tuple(Point(tup) for tup in ls.tuple)).wkt) if numpy:
category = xblock.category if category == 'course': return 'chapter' elif category == 'chapter': return 'sequential' elif category == 'sequential': return 'vertical' return None
import copy import threading import collections from contextlib import contextmanager
'SHOW_LANGUAGE_SELECTOR': False,
PIPELINE_COMPILE_INPLACE = True
with self.assertRaises(transaction.TransactionManagementError): list(Person.objects.all().select_for_update())
return a * b / fr.gcd(a, b)
storage = getattr(request, '_messages', default_storage(request)) return storage.level
from __future__ import unicode_literals
if weights is not None:
self.assertEquals(serializer.data['root'], unicode(self.block_structure.root_block_usage_key))
RateLimitConfiguration.objects.create(enabled=False)
from __future__ import absolute_import, print_function import logging import os
assert_raises(ValueError, lshf.partial_fit, np.random.randn(n_samples_partial_fit, n_features - 1))
self._ddog_histogram(evt_time, 'set_many.fields_in', len(state))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON)
if self._session_expired: raise ForceRetryError("Retry on session loss at top")
return slug in [cls.PROFESSIONAL, cls.NO_ID_PROFESSIONAL_MODE]
self.assertTrue(check_password('letmein', encoded, setter)) self.assertFalse(state['upgraded'])
from __future__ import absolute_import import logging import os import time import re
likelihood = np.exp(values - values.max(axis=1)[:, np.newaxis]) return likelihood / likelihood.sum(axis=1)[:, np.newaxis]
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
return (NullSpace(), '')
from __future__ import absolute_import
action_name = ugettext_noop('generated') task_fn = partial(upload_problem_responses_csv, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
return len(self._data)
_options = dict( _options_browser( cfg, ret_config, defaults, virtualname, attrs, ) )
return cache_and_return(None)
import json import pprint import logging
pass
return AccountLegacyProfileSerializer.convert_empty_to_None(value)
if isinstance(precompute, six.string_types) and precompute == 'auto': precompute = (n_samples > n_features)
return False
self.assertIs(VerificationDeadline.deadline_for_course(self.course.id), None)
metadata_to_inherit = self.cached_metadata.get(unicode(non_draft_loc), {}) inherit_metadata(module, metadata_to_inherit)
css_classes.append('xmodule_edit')
return self.wrap_xblock(block, view_name, Fragment(), context)
'AUTH_USE_OPENID': False, 'AUTH_USE_CERTIFICATES': False, 'AUTH_USE_OPENID_PROVIDER': False, 'AUTH_USE_SHIB': False, 'AUTH_USE_CAS': False,
import salt.ext.six as six
if not expires: self.cookies[key]['expires'] = cookie_date(time.time() + max_age)
msg = etree.tostring(fromstring_bs(msg, convertEntities=None), pretty_print=True)
import salt.utils from salt.utils import which as _which from salt.exceptions import SaltInvocationError
return self.badgeassertion_set.filter(user=user)
SignalHandler.pre_publish.disconnect(receiver=on_pre_publish) self.addCleanup(SignalHandler.pre_publish.connect, receiver=on_pre_publish)
actual = grouped_df.pid.transform(len) assert_series_equal(actual, expected)
self.assertEqual(w.render('mydate', '2010-02-30').count('selected="selected"'), 3)
return force_bytes(query)
self._auto_auth(self.USERNAME, self.EMAIL, False) self.dashboard.visit()
lat = models.CharField(max_length=100) lon = models.CharField(max_length=100)
vmconfig['changed']['remove_{0}'.format(collection)].append(prop)
if self.typ is None: self.typ = getattr(self.description, self.cname, None)
available = list(_available_services().keys())
tm.assertIsInstance(s, Series)
pass
msg = "Error in problem xml include: %s" % ( etree.tostring(next_include, pretty_print=True)) system.error_tracker(msg)
#epub_uid = ''
reindexed = self.empty.reindex(self.ts.index, method='pad')
return self.browser.execute_script("return $('{}').is(':focus')".format(selector))
EmptyPromise( lambda: self.q(css=".current-signature-image .signature-image").present, 'Signature image available' ).fulfill()
splitter = self._get_splitter(data, axis=axis) keys = self._get_group_keys() for key, (i, group) in zip(keys, splitter): yield key, group
self.assert_student_in_group(self.groups[0])
X = -np.ones((5, 10)) lda = LatentDirichletAllocation() regex = r"^Negative values in data passed" assert_raises_regexp(ValueError, regex, lda.fit, X)
self.logout_page.visit() AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
response = default_view(request, '2') self.assertEqual(response.content, b'Hello World 1')
if isinstance(space, CompositeSpace): return tuple(make_dtype_tree(dtype, component) for component in space.components) else: return super_self._clean_dtype_arg(dtype)
CourseExportManager(modulestore, contentstore, course_key, root_dir, course_dir).export()
with tm.assert_produces_warning(FutureWarning): s.iget(1)
else: ret['comment'] = 'Datasource updated.'
SECRET_KEY = 'dev key'
(child_to_delete_location, old_parent_location, ModuleStoreEnum.RevisionOption.draft_preferred), (child_to_delete_location, old_parent_location, ModuleStoreEnum.RevisionOption.published_only),
B, IR, IC, C = ishp4 K, KR, KC, CH = kshp4
return value
return predictions[np.arange(X.shape[0]), median_estimators]
username_placeholder = _(u"JaneDoe")
test_data = state_run['cmd_|-test_failing_state_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
history = HistoricalRecords()
CUR_MONTH = dt.datetime.now().month CUR_YEAR = dt.datetime.now().year CUR_DAY = dt.datetime.now().day
clf = ForestClassifier(class_weight=[{-1: 0.5, 1: 1.}], random_state=0) assert_raises(ValueError, clf.fit, X, _y)
lw = LedoitWolf() loglik_lw = lw.fit(X_train).score(X_test)
#html_style = 'default.css' html_theme = 'solar' html_theme_path = ["./themes"]
@property def _is_v1(self): return False
ip_same1 = ip_same2 = ipaddress.IPv4Network('1.1.1.1/32') self.assertEqual(list(ipaddress.collapse_addresses( [ip_same1, ip_same2])), [ip_same1])
indices = indices[::-1] maybe_slice = lib.maybe_indices_to_slice(indices, len(target)) self.assertTrue(isinstance(maybe_slice, slice)) self.assert_numpy_array_equal(target[indices], target[maybe_slice])
group_auth_match = False for group_config in group_perm_keys: group_config = group_config.rstrip('%') for group in groups: if group == group_config: group_auth_match = True
import integration
return self.get_text('.name')
return binascii.unhexlify((hex_format_string % x).encode('ascii'))
return iri_to_uri(get_script_prefix().rstrip('/') + self.url)
import salt.utils.dictupdate as dictupdate import salt.utils from salt.exceptions import SaltInvocationError from salt.ext.six import string_types
self.counters['logical lines'] += 1
ogc_hex = b'01010000000000000000000000000000000000F03F' ogc_hex_3d = b'01010000800000000000000000000000000000F03F0000000000000040' hexewkb_2d = b'0101000020E61000000000000000000000000000000000F03F' hexewkb_3d = b'01010000A0E61000000000000000000000000000000000F03F0000000000000040'
def __init__(self, **kwargs): for key, value in kwargs.items(): setattr(self, key, value)
b_time = int(psutil.boot_time())
salt '*' win_path.add 'c:\\python27' 0
from __future__ import absolute_import import os
import salt.ext.six as six try: import zmq except ImportError: pass
from __future__ import absolute_import
if self.hintmode == 'always': self.msg = self.hint + ('<br/>' if self.msg else '') + self.msg
salt --async '*' splay.splay pkg.install cowsay version=3.03-8.el6
debian_ip.__grains__ = {} debian_ip.__salt__ = {}
(status, ring, pending, node) = line.split()
cmd = '{0} {1}'.format(cmd, name)
return (super(ExternalDiscussionCourseTab, cls).validate(tab_dict, raise_error) and key_checker(['link'])(tab_dict, raise_error))
#html_theme_path = []
list_escalation_policies = salt.utils.alias_function(list_policies, 'list_escalation_policies')
frame_iteritems = Benchmark('f()', setup, start_date=datetime(2010, 6, 1))
df = DataFrame({"B": [1, 2], "A": ["x", "y"]})
field.clean([1, None], None)
procedure_args = {'function': func}
if virtual_ret is not True: self.missing_modules[module_name] = virtual_err self.missing_modules[name] = virtual_err return False
class_priority = ['video', 'problem']
return []
if op in ['+', '*']: result = getattr(df, op)(m) assert_frame_equal(result, expected)
pass
for db in connections: loader.check_consistent_history(connections[db])
n_samples_per_center = 100 grid_size = 3 scale = 0.1 n_clusters = grid_size ** 2
result = middleware.process_request(request) self.assertIsNotNone(result) self.assertEqual(result.content, b'Hello World 1')
pro.authors.set([marty]) dive.authors.set([mark])
if (self._ip >> 96) != 0x20010000: return None return (IPv4Address((self._ip >> 64) & 0xFFFFFFFF), IPv4Address(~self._ip & 0xFFFFFFFF))
PAID_COURSE_REGISTRATION_CURRENCY = ENV_TOKENS.get('PAID_COURSE_REGISTRATION_CURRENCY', PAID_COURSE_REGISTRATION_CURRENCY)
wmi = types.ModuleType('wmi') sys.modules['wmi'] = wmi
from __future__ import absolute_import
self.certificates_section.wait_for_certificate_exceptions_section()
return
if existing['code'] == 200:
context_dict.setdefault("STATIC_URL", "/dummy-static/") try: xml_str = self.template.render_unicode(**context_dict) except: raise TemplateError(exceptions.text_error_template().render())
s1 = make_dtnat_arr(chunksize + 5) s2 = make_dtnat_arr(chunksize + 5, 0)
expected = Series([np.nan, 0.2, np.nan], index=[3, 2, 3]) result = ser.loc[[3, 2, 3]] assert_series_equal(result, expected, check_index_type=True)
return False
__bool__ = __nonzero__
'expect': self.expect,
if instance.module_type in StudentModuleHistoryExtended.HISTORY_SAVING_TYPES: history_entry = StudentModuleHistoryExtended(student_module=instance, version=None, created=instance.modified, state=instance.state, grade=instance.grade, max_grade=instance.max_grade) history_entry.save()
provider = CreditProvider.objects.get() provider.active = False provider.save()
assert_index_equal(idx1, idx2, check_exact=False)
return self._get_bulk_ops_record(course_key, ignore_case).active
X, y = datasets.make_hastie_10_2(n_samples=100, random_state=1) for Cls in [GradientBoostingRegressor, GradientBoostingClassifier]: est = Cls(n_estimators=100, max_depth=1) est.fit(X, y)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
return self._geomset_attribute('sym_difference', geom, **kwargs)
s = Series([-1, 0, 1])
scores = cross_val_score(BernoulliNB(alpha=10), X > 4, y, cv=10) assert_greater(scores.mean(), 0.83)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
out = salt.utils.fopen(path, 'wb')
self.dismiss_ui_and_verify(rerun)
return has_studio_read_access(self._user, course_key)
return self.adjust_for_viewer(X)
msg = "'This field is required.'" with self.assertRaisesMessage(ValidationError, msg): self.field.clean(['some text', ['JP']])
payload = {self._pattern: json.dumps(self._response_dict)} response = requests.put(url, data=payload)
from __future__ import absolute_import, print_function import os import sys import pprint
if not self.event.connect_pub(timeout=timeout): raise SaltReqTimeoutError() payload = channel.send(payload_kwargs, timeout=timeout)
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
raise NotImplementedError('subclasses of ListFilter must provide an expected_parameters() method')
import numpy as np import pandas as pd import pandas.util.testing as tm
if bucket_size is None: bucket_size = _size_map(_fssys('bucket_size'))
return self.q(css='.wrapper-content ' + prefix + ' .no-content')
import logging
inlineformset_factory( Parent, Child, exclude=['school'], fk_name='mother' )
pkg_info = self._pkgdb_fun('info', package, self.db_conn) if pkg_info is None: raise SPMInvocationError('Package {0} not installed'.format(package))
cet = CourseEmailTemplate.objects.get(name='foo') self.assertIsNotNone(cet)
_city = None _country = None
options = _get_options(ret=None)
for arrow in ARROWS: left, a, right = eq.partition(arrow) if a != '': return left, a, right
dt = datetime(2009, 5, 16, microsecond=123) self.assertEqual(dateformat.format(dt, 'u'), '000123')
item.video_bumper["transcripts"][lang] = filename
return frozenset(child.display_name for child in self.library_fixture.children)
return True
pro = Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16)) marty = Person.objects.create(name="Marty Alchin")
self.assertEqual(k_args, tuple()) self.assertEqual( k_kwargs.get('url'), urlparse.urljoin(self.course.ccx_connector, ccxconapi.CCXCON_COURSEXS_URL) )
assert_array_equal(np.sort(s1[:23149]), np.sort(s2))
assert name not in self.temps self.temps[name] = value assert name in self.temps
return int(self.q(css=self.TOTAL_PAGES_CSS).text[0])
for x in range(1, 3): self.update_module() self.loader.clear() self.assertEqual(self.loader[self.module_key](), self.count)
import yaml try: yaml.Loader = yaml.CLoader yaml.Dumper = yaml.CDumper except Exception: pass
html_use_modindex = True
if text == "There was a problem with the staff answer to this problem.": text = "TRANSLATED!" return text
self.save() self.runtime.modulestore.update_item(self, user.id)
import salt.utils
from salt.modules import raet_publish import salt.transport from salt.exceptions import SaltReqTimeoutError
self.bracketname = '[%-17s]' % self.name self.bracketlevel = '[%-8s]' % self.levelname self.bracketprocess = '[%5s]' % self.process
for i in range(current_page, 0, -1): _check_page() if current_page > 1: page.click_on_page(current_page - 1) current_page -= 1
after_jump = []
if salt.utils.is_windows(): return (False, 'The file execution module cannot be loaded: only available on non-Windows systems - use win_file instead.') return True
mask = mask.T
result.update(_merge_data(summary_data, fault_data))
self.assertEqual(item.name, old_name) item.change_name(new_name) self.assertFalse(item.in_editable_form()) self.assertEqual(item.name, expected_name)
return { field: course['metadata'][field] for field in CourseSummary.course_info_fields if field in course['metadata'] }
return stdout
all_assets = SortedAssetList(iterable=[], key=key_func) for asset_type, val in course_assets.iteritems(): all_assets.update(val)
co_border = State.objects.get(name='Colorado').poly ks_border = State.objects.get(name='Kansas').poly
pass
comb = self.frame.combineAdd(self.frame) assert_frame_equal(comb, self.frame * 2)
idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]] inc = np.r_[1, val[1:] != val[:-1]]
url = 'something' def __str__(self): return self.url
attempt.upload_face_image(face_image)
import salt.utils
state_below=dbm.hidden_layers[-2].upward_state(H_hat[-1])))
__doc__ = DatetimeProperties.__doc__
user_id = user_service.get_current_user().opt_attrs.get('edx-platform.user_id', None)
limiter = BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning("Rate limit exceeded in password_reset") return HttpResponseForbidden()
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_key): assertProblemNameEquals(problem_new_name)
self.skipTest( 'You don\'t have the required permissions to run this test' )
self.assertEqual(source.driver, str(ds.driver))
html_module_location = course_key.make_usage_key('html', 'nonportable_link') html_module = self.store.get_item(html_module_location) self.assertIn('/jump_to_id/nonportable_link', html_module.data)
exhaust(self._input_data)
oh = OneHotEncoder(handle_unknown='42') oh.fit(X) assert_raises(ValueError, oh.transform, y)
import salt.ext.six as six if six.PY3: import ipaddress else: import salt.ext.ipaddress as ipaddress HAS_RANGE = False try:
return self.date_list_period
from __future__ import unicode_literals
new_minions = set(minions_detected) - set(curr_minions)
import salt.utils.virt
from __future__ import absolute_import
from __future__ import absolute_import import copy import os import collections import logging import tornado.gen
if not timestamp: return False try: parse_datetime(timestamp) except ValueError: return False else: return True
return super(PandasObject, self).__sizeof__()
df = DataFrame( {'col1': [1.123, 2.123, 3.123], 'col2': [1.234, 2.234, 3.234]})
with current_ioloop(self.io_loop): ret = attr(*args, **kwargs) if isinstance(ret, tornado.concurrent.Future): ret = self._block_future(ret) return ret
return self.scope_ids.usage_id
get_connection(using).savepoint_rollback(sid)
masks = [] if dropna:
space, source = model.get_monitoring_data_specs()
class _OFFSET(Structure): _fields_ = [ ('Offset', DWORD), ('OffsetHigh', DWORD)]
cmd = 'cmd /c {0}'.format(cmd)
self._assert_redirects_to_instructor_dash(response)
current_grant_by_default = _get_wmi_setting('IIsIPSecuritySetting', 'GrantByDefault', server)
raise TypeError("'%s' does not support mutable operations." % self.__class__)
ind = rng.randint(0, X.shape[0], 20) sample_weight = np.bincount(ind, minlength=X.shape[0])
class MyModelAdmin(admin.ModelAdmin): pass for k in admin_overrides: setattr(MyModelAdmin, k, admin_overrides[k])
_ = lambda text: text
if name == 'core': return "django.core" else: return "django.contrib-%s" % name
return urlparse(handler_url(self.block, handler_name, suffix=suffix)).path
values = _ensure_index(getattr(obj, field).values) filt = _ensure_index(filt)
from __future__ import absolute_import import logging import time
fit_params = fit_params if fit_params is not None else {} fit_params = dict([(k, _index_param_value(X, v, train)) for k, v in fit_params.items()])
data = BytesIO(self._body)
unstacked = self.ymd.unstack(['year', 'month'])
connectivity = np.eye(5)
if service.key == service_name: service_key = service.key elif service_name == 'ssh' or service_name == 'SSH': if service.key == 'TSM-SSH': service_key = 'TSM-SSH'
task_folder = task_service.GetFolder(location)
client = DjangoTestClient() response1 = client.get(path='/shib-login/', data={}, follow=False, **identity) postvars = {'email': u'post_email@stanford.edu',
if is_whitelisted: LOGGER.info( u"Student %s is whitelisted in '%s'", student.id, unicode(course_id) ) passing = True else: passing = False
result = merge(df1, df2, how='outer') self.assertTrue(len(result) == 2000)
from_addr = course_email.from_addr if course_email.from_addr else \ _get_source_address(course_email.course_id, course_title)
if self.find_css('.collection-edit').present: return 'edit' elif self.find_css('.collection').present: return 'details'
conditional_content_removal(request, response)
resp = self.client.get(reverse('shoppingcart.views.show_receipt', args=[self.cart.id])) self.assertEqual(resp.status_code, 200)
SECRET_KEY = 'dev key'
return sel
state_run = self.run_function('state.sls', mods='requisites.onchanges_in_simple')
for library in store.get_libraries(**kwargs): library_id = self._clean_locator_for_mapping(library.location) if library_id not in libraries: libraries[library_id] = library
from __future__ import absolute_import
connection.timezone del connection.timezone connection.timezone_name del connection.timezone_name
EMAIL_MIN_LENGTH = 3 EMAIL_MAX_LENGTH = 254
warnings.simplefilter('ignore', _NonBLASDotWarning)
f = lambda x: x.endswith(pat) return _na_map(f, arr, na, dtype=bool)
self.make_course() url = self.make_url('pdf_book', book_index=0, chapter=1) response = self.client.get(url) self.assertEqual(response.status_code, 404)
import salt.utils
b = b.reindex(columns=b.columns[::-1], index=b.index[::-1][10:]) del b['B']
} track_created_event(request, event_name, course, thread, event_data)
for tab_type in CourseTabPluginManager.get_tab_types(): if not tab_type.is_dynamic and tab_type.is_default: tab_enabled = tab_type.is_enabled(course_module, user=request.user) update_tab(course_tabs, tab_type, tab_enabled)
open_jids.add(jinfo['jid'])
LOCK_EX = LOCK_SH = LOCK_NB = 0
raise NotImplementedError
if isinstance(state, dict): super(TimedeltaIndex, self).__setstate__(state) else: raise Exception("invalid pickle state")
return format_html('<ul{}>\n{}\n</ul>', flatatt(self.attrs), format_html_join('\n', '<li>{}</li>', ((force_text(w),) for w in self)))
formset = media_inline.get_formset(request, max_num=100, can_order=True) self.assertEqual(formset.max_num, 100) self.assertEqual(formset.can_order, True)
return
answer = event_info.get('answers', {}).get(response.answer_id) if answer is not None: event_info['answers'][response.answer_id] = response.unmask_name(answer)
path = os.path.expanduser(path)
self.assertEqual( self.run_function('shadow.get_account_created', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
MY_NAME = 'test_ext_pillar_opts'
from __future__ import absolute_import
cmd = list2cmdline(['wmic', 'cpu']) info = __salt__['cmd.run'](cmd).split('\r\n')
if hasattr(text, '__html__'): return text.__html__() else: return escape(text)
profile_path = reverse('learner_profile', kwargs={'username': "no_such_user"}) response = self.client.get(path=profile_path) self.assertEqual(404, response.status_code)
return courselike
ls = LineString((0, 0), (1, 1)) self.assertAlmostEqual(1.41421356237, ls.length, 11)
clf = svm.SVC(kernel='precomputed') assert_raises(ValueError, clf.fit, X, Y)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
Z = Z.reshape(xx.shape) ax.contourf(xx, yy, Z, cmap=cm, alpha=.8)
DATE_FORMAT = 'j F Y' TIME_FORMAT = 'G:i' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'd.m.Y'
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
return previous_workday(nearest_workday(dt))
random_state = check_random_state(0) tsne = TSNE(verbose=2) X = random_state.randn(5, 2)
'openedx.core.djangoapps.programs',
if 'custom_checking' in self.text_customization: return self.text_customization.get('custom_checking')
data = {'artist': None, 'song': ''} form = SongForm(data, empty_permitted=True) self.assertTrue(form.is_valid())
if not sp.issparse(X) or hasattr(init, '__array__'): X_mean = X.mean(axis=0) if not sp.issparse(X): X -= X_mean
"payment_url": get_purchase_endpoint(),
return redirect(request.GET.get('next', 'dashboard'))
EmptyPromise( lambda: unit.is_browser_on_page(), "loaded page {!r}".format(unit), timeout=30 ).fulfill()
y_pred3 = clf.fit(X, y3).predict(X) assert_true(np.any(y_pred3 != y3), 'solver %s' % solver)
CourseOverview.get_from_id(params["course_key"])
course = self.store.get_course(course_id) self.assertGreater(len(course.textbooks), 0)
page.wait_for_element_visibility('.new-component-advanced', 'Advanced component menu is visible')
CourseEnrollmentFactory(user=self.moderator, course_id=self.course.id) self.moderator.roles.add(Role.objects.get(name="Moderator", course_id=self.course.id))
SupportedFieldType(StudentViewTransformer.STUDENT_VIEW_DATA, StudentViewTransformer), SupportedFieldType(StudentViewTransformer.STUDENT_VIEW_MULTI_DEVICE, StudentViewTransformer),
return (self.start_line, self.start_column, self.rule.rule_id)
course_key = CourseKey.from_string(course_id) CourseMode.objects.get_or_create(course_id=course_key, **PARAMETERS)
f = DecimalField(localize=True) self.assertWidgetRendersTo(f, '<input id="id_f" name="f" type="text" required />')
update_wrapper(view, cls, updated=())
df = DataFrame(dict( A=Series(lrange(3), index=date_range('2000-1-1', periods=3, freq='H'))))
self.course_id = course_id self._doc_id = doc_id self.asset_md = asset_md
import re from datetime import datetime
'ENABLE_READING_FROM_MULTIPLE_HISTORY_TABLES': True,
sr = SpatialReference('WGS84') mpoly = OGRGeometry(mp.wkt, sr) self.assertEqual(sr.wkt, mpoly.srs.wkt)
REQUIRE_BASE_URL = "./"
import os import yaml import salt.ext.six as six
new_indexer = np.arange(len(indexer)) new_indexer[cur_indexer] = np.arange(len(cur_labels)) new_indexer[missing_indexer] = -1
self.wait_for(lambda: self.speed == expected_speed, "Video speed changed")
outp = Index(ujson.decode(ujson.encode(i)), name='index') tm.assert_index_equal(i, outp)
ret['changes'] = { 'testing': { 'old': 'Unchanged', 'new': 'Something pretended to change' } }
'openedx.core.djangoapps.bookmarks',
try: WindowsError except NameError: WindowsError = None
log = logging.getLogger(__name__)
if not self.loaded: self._load_all() return len(self._dict)
assert_raises(ValueError, sel.transform, np.array([[1], [2]]))
group_id, user_partition_id = get_masquerading_group_info(self.test_user, self.course.id) self.assertEqual(group_id, 1) self.assertEqual(user_partition_id, 0)
cert = GeneratedCertificate.eligible_certificates.get(user=self.student, course_id=self.course.id) self.assertEqual(cert.status, CertificateStatuses.downloadable)
text = f.widget.format_value(result) self.assertEqual(text, "13:30:00")
__virtualname__ = 'carbon'
import copy import logging import json
self.assertFalse(f.has_changed('resume.txt', None))
_, labels_no_copy = affinity_propagation(S, preference=preference, copy=False) assert_array_equal(labels, labels_no_copy)
if axis is not None: self._get_axis_number(axis)
def __setstate__(self, state): self._is_child = True self.__init__(state['hopts'], log_queue=state['log_queue'])
import salt.config import salt.utils try: import salt.utils.cloud HAS_CLOUD = True except ImportError: HAS_CLOUD = False
from pandas import *
if np.any(classes != sorted_class): indices = np.searchsorted(sorted_class, classes) Y = Y[:, indices]
log = logging.getLogger(__name__)
self.assert_json_success_response_looks_correct(student_views.login_user(strategy.request))
return self.get_values()[slicer]
template_name = 'api_admin/terms_of_service.html'
result = self.ts[:0].to_string() self.assertEqual(result, 'Series([], Freq: B)')
d = dict([(col, series.resid) for (col, series) in compat.iteritems(self.ols_results)]) return DataFrame(d, index=self._index)
if reduce: values = self.values
varname = tokens[0][0] self.functions_used.add(varname)
task_entry = self._create_input_entry() with self.assertRaises(ItemNotFoundError): self._run_task_with_mock_celery(task_class, task_entry.id, task_entry.task_id)
return cls.read_data_file('{}.pub'.format(key_name))
store = modulestore() with store.default_store('split'): store.clone_course(source_course_key, destination_course_key, user_id, fields=fields)
custom_colors = ['#F00', '#00F', '#FF0', '#000', '#FFF'] _check_plot_works(df.plot, color=custom_colors)
tm.assert_index_equal(s.index, ds.index)
sql_params.insert(1, lookup.lhs.output_field._spheroid)
if not clone_type and power: task = new_vm_ref.PowerOn() salt.utils.vmware.wait_for_task(task, vm_name, 'power', 5, 'info')
if not DarkLangConfig.current().enabled: return self._clean_accept_headers(request) self._activate_preview_language(request)
pass
from __future__ import absolute_import import logging
null_index = Index([]) self.assert_index_equal(Index(['a']), null_index.insert(0, 'a'))
git_describe = describe_out
result = DataFrame([DataFrame([])]) self.assertEqual(result.shape, (1, 0))
super(TeamManagementPage, self).__init__(browser, course_id) self.topic = topic self.url_path = "teams/#topics/{topic_id}/create-team".format(topic_id=self.topic['id'])
from __future__ import absolute_import import collections import itertools import functools import logging import json import StringIO import tarfile import time from multiprocessing import Process, Pipe
if shift is None: shift = (2 * generator.rand(n_features) - 1) * class_sep X += shift
import salt.config import salt.payload import salt.utils.dictupdate
return self._spatial_attribute('num_points', {}, **kwargs)
return _transform_selected(X, self._fit_transform, self.categorical_features, copy=True)
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.5)
__salt__
self.input_space = input_space
self._password = None self.save(update_fields=["password"])
iter_labels = labels if self.multi_class == 'multinomial': iter_labels = [None]
return self._block.values[loc]
for comb in itertools.combinations(arrays, 3): names, data = zip(*comb) mrecs = mrecords.fromarrays(data, names=names)
return sorted(ret)
wait_for( func=lambda _: css_visible(css_selector, index), timeout=timeout, timeout_msg="Timed out waiting for {} to be visible.".format(css_selector) )
if is_iterator(key): raise InvalidIndexError(key) else: raise e1
feature_names=feature_names[:-1], DESCR=descr_text)
self.assertEquals(destination_course.wiki_slug, destination_wiki_slug)
stream1 = StringIO() stream2 = StringIO() handler1 = StreamHandler(stream1) handler2 = StreamHandler(stream2)
n_components = 100 n_features = 500
retval = self.service.set_credit_requirement_status( 0, self.course.id, 'grade', 'grade' ) self.assertIsNone(retval)
wkb_writer_create = GEOSFuncFactory('GEOSWKBWriter_create', restype=WKB_WRITE_PTR) wkb_writer_destroy = GEOSFuncFactory('GEOSWKBWriter_destroy', argtypes=[WKB_WRITE_PTR])
return self.as_widget(self.field.hidden_widget(), attrs, **kwargs)
enrolled_students = enrolled_students[offset: offset + MAX_STUDENTS_PER_PAGE_GRADE_BOOK]
self._export_import_course_round_trip( self.store, contentstore, source_course_key, self.export_dir )
return ikepolicy
result = Timestamp(0) expected = to_datetime(0) self.assertEqual(result, expected)
used_all_attempts = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="1", due=self.tomorrow_str) self.assertTrue(used_all_attempts.answer_available())
email_label = _(u"Email")
data[s].ndim = len(data[s].shape)
self.assertContains(self.response, "<p>Get the full name of the person</p>")
d = self
self.source_expressions[2] = Value(geo_field._spheroid)
np.argsort(np.array([[1, 2], [1, 3], [1, 2]], dtype='i')) np.argsort(items2, kind='mergesort')
self.clear_subs_content()
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch from salttesting.helpers import ensure_in_syspath
import lettuce.django
example_input[1, 3] = 0.0 example_input[1, 4] = 1.0
fulfill_course_milestone(pre_requisite_course.id, user) self.assertTrue(access._has_access_course(user, 'view_courseware_with_prerequisites', course))
self.module_system.process_xml = Mock()
return None
edx_user = User(username=self.edx_user_id) edx_user.save() lti_user = LtiUser( lti_consumer=self.lti_consumer, lti_user_id=self.lti_user_id, edx_user=edx_user ) lti_user.save() return lti_user
if self.chapter: return self._find_block(self.chapter, self.section_url_name, 'section')
local_branch = local_rev = None
if (n_inliers_best >= self.stop_n_inliers or score_best >= self.stop_score or self.n_trials_ >= _dynamic_max_trials(n_inliers_best, n_samples, min_samples, self.stop_probability)): break
if opts['master_sign_pubkey']:
iris = self._make_iris_table_metadata()
self.context['return_to_annotation'] = True xml = self.render_to_xml(self.context) self.assert_has_xpath(xml, xpath, self.context)
self.import_page.upload_tarball('funny_cat_video.mp4') self.import_page.wait_for_filename_error()
from __future__ import absolute_import
if settings.FEATURES.get('ENABLE_READING_FROM_MULTIPLE_HISTORY_TABLES'): history_entries += StudentModuleHistory.objects.prefetch_related('student_module').filter( student_module__in=student_modules ).order_by('-id')
response = None
cov = pca.get_covariance() precision = pca.get_precision() assert_array_almost_equal(np.dot(cov, precision), np.eye(d), 12)
df.plot(subplots=True, ax=axes)
course_key = 'non/existing/keyone' error_msg = u"Course {} does not exist.".format(course_key) with self.assertRaisesRegexp(serializers.ValidationError, error_msg): validate_course_id(course_key)
import salt.utils.url from salt.serializers.yamlex import deserialize
pass
one_class = np.array([0, 0, 0, 0]) lb = LabelBinarizer().fit(one_class)
want_root = first_node(parseString(want)) got_root = first_node(parseString(got))
probas_ = self.predict_proba(X) return np.log(probas_)
instance.__flatten__ = True
has_dimension_fields = self.width_field or self.height_field if not has_dimension_fields: return
class AbstractArticle(models.Model): class Meta: abstract = True ordering = ('title',)
from __future__ import absolute_import import datetime import os import re import copy
for name, profile in create_list: make_minion = salt.config.get_cloud_config_value( 'make_minion', profile, self.opts, default=True ) if make_minion is False: continue
self.assertEqual( feedgenerator.rfc3339_date(datetime.datetime(2008, 11, 14, 13, 37, 0)), "2008-11-14T13:37:00Z" )
default_error_messages = { 'invalid_choice': _('Select a valid choice. That choice is not one of' ' the available choices.'), }
files = request.FILES or {} error_msg = _check_files_limits(files) if error_msg: return JsonResponse({'success': error_msg}, status=413)
bytes = bytearray
registration_price = CourseMode.min_course_price_for_currency( course_key, settings.PAID_COURSE_REGISTRATION_CURRENCY[0] ) course_price = get_cosmetic_display_price(course, registration_price) can_add_course_to_cart = _is_shopping_cart_enabled and registration_price
Number.objects.filter(pk=self.n.pk).update(integer=F('integer') % 20)
err_msg = colorize( 'red', "No coverage info found. Run `paver test` before running " "`paver coverage`.\n" ) sys.stderr.write(err_msg) return
elif not len(sl - set(compat.iterkeys(arg))):
return {"library": unicode(self.library.location.library_key.replace(version_guid=None, branch=None))}
from __future__ import absolute_import
assert_almost_equal(X_unwhitened.std(axis=0).std(), 74.1, 1)
return [(t, t) for t in tokens]
return not self.q(css='div.ui-loading').visible
return value.replace(" ", "\xa0")
self.assertIsNone(VerificationDeadline.deadline_for_course(self.course.id))
return self.render_to_response(self.get_context_data(form=form))
new_client.__singleton_init__(io_loop=io_loop, socket_path=socket_path) loop_instance_map[key] = new_client
from __future__ import absolute_import
for text in self.txt: bio.write(self._encode(text + null_string))
X_FRAME_OPTIONS = 'SAMEORIGIN'
exc_info_on_loglevel=logging.DEBUG
train.algorithm.termination_criterion = EpochCounter(max_epochs=1) train.extensions.pop(0) train.save_freq = 0 train.main_loop()
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
cat = Categorical(["a", "b", "c", "a"], ordered=True)
if USERA in user_list: self.run_function('user.delete', [USERA], remove=True) #need to exit cherypy engine cherrypy.engine.exit()
saltenv = env
course_outline_page = CourseOutlinePage( self.browser, new_org, self.course_number, self.course_run ) course_outline_page.visit() course_outline_page.wait_for_page()
for (func, pk, klass, datum) in test_data: func[1](self, pk, klass, datum)
penalty = penalty + abs(var ** self.p).sum()
predictions = cval.cross_val_predict(clf, X_sparse, X) assert_array_equal(predictions.shape, (10, 2))
output = self.engine.render_to_string('inheritance33', {'optional': 1}) self.assertEqual(output, '123')
result_key = f.generate_filename(None, key) self.assertEqual(result_key, expected_key)
self.assertFalse(EmbargoedCourse.is_embargoed(course_id))
self.assertEquals(7, self.response.content.count('grade_Pass'))
entries = {} for name, overrides in six.iteritems(mapped): overrides.setdefault('name', name) entries[name] = overrides map_[profile] = entries continue
config = DashboardConfiguration(recent_enrollment_time_delta=timeout) config.save()
if case_sensitive: casify = lambda x: x else:
if self._is_series:
model = self.get_queryset().model
self.assertEqual(len(v_data['course_modes']), 2)
braces = '}' * num_braces + "\n" rval = (basic_setup + setup_nv_images + setup_nv_targets + setup_nv_denoms + do_normalize + braces) rval = rval % locals() return rval
return self.set_levels([i._to_safe_for_reshape() for i in self.levels])
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]]
connection_persists_old_columns = False
return "simple_unlimited_args - Expected result: %s" % ( ', '.join(six.text_type(arg) for arg in [one, two] + list(args)) )
this_file = __file__ if this_file.endswith(".pyc"):
class ChildModel1Inline(admin.TabularInline): model = ChildModel1
parameters = { 'vect__max_df': (0.5, 0.75, 1.0), #'vect__max_features': (None, 5000, 10000, 50000),
import salt.utils.cloud import salt.config as config from salt.exceptions import ( SaltCloudNotFound, SaltCloudSystemExit, SaltCloudExecutionFailure, SaltCloudExecutionTimeout )
check('fixed', tm.makePeriodIndex)
return _get_array_element('category', label, ('animal', 'human', 'airplane', 'truck', 'car', 'blank'))
try: expected = df.ix[key] except KeyError: self.assertRaises(KeyError, lambda: df.loc[key]) continue
return np.log(self.predict_proba(X))
self._consolidate_inplace() return self.combine([b for b in self.blocks if b.is_bool], copy)
self.assertTrue(MakeMessagesCommand.leave_locale_alone)
X, y = hastie_X, hastie_y ForestEstimator = FOREST_ESTIMATORS[name] clf = ForestEstimator(n_estimators=5, max_depth=1, warm_start=False, random_state=1) clf.fit(X, y)
ml_cost = (model.free_energy(pos_v).mean() - model.free_energy(neg_v).mean())
return self.statistics()[3]
AWS_QUERYSTRING_AUTH = AUTH_TOKENS.get('AWS_QUERYSTRING_AUTH', True) AWS_S3_CUSTOM_DOMAIN = AUTH_TOKENS.get('AWS_S3_CUSTOM_DOMAIN', 'edxuploads.s3.amazonaws.com')
return instance.__dict__[self.field.name]
'ENABLE_DEBUG_RUN_PYTHON': False,
mix_clf_format = product(EXAMPLES["multilabel-indicator"], EXAMPLES["multiclass"] + EXAMPLES["binary"])
errstring = "Invalid course_id" with self.assertRaisesRegexp(CommandError, errstring): call_command('export_olx', 'x/y/z')
if isinstance(how, compat.string_types): method = "{0}()".format(how)
response = self._get_page(payment_flow, course.id) self._assert_steps_displayed( response, PayAndVerifyView.PAYMENT_STEPS, PayAndVerifyView.MAKE_PAYMENT_STEP ) self._assert_requirements_displayed(response, [])
return getattr(request, 'is_from_logout', False)
course.certificates['certificates'].pop(index) store.update_item(course, request.user.id) break
td = df.dt - df.dt + timedelta(1) td = klass(td, name='dt')
self.staff_user = User.objects.create_user( "patty", "patty@fake.edx.org", ) self.staff_user.is_staff = True
localemod.__context__ = {} localemod.__grains__ = {} localemod.__salt__ = {}
from __future__ import unicode_literals
return self.apps.app_configs.get(self.app_label)
self._update_head(usage_locator.course_key, index_entry, usage_locator.branch, new_id) result = usage_locator.course_key.for_version(new_id)
ORA2_FILE_PREFIX = ENV_TOKENS.get("ORA2_FILE_PREFIX", ORA2_FILE_PREFIX)
if user_enrollment_mode not in CourseMode.VERIFIED_MODES: return 'N/A' user_is_verified = cls.user_is_verified(user) if not user_is_verified: return 'Not ID Verified' else: return 'ID Verified'
the_int = self.index.intersection(self.index) self.assertIs(the_int, self.index)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
return self.q(css="#report-downloads-table .file-download-link>a")
num_certs = GeneratedCertificate.eligible_certificates.filter(user=self.student).count() self.assertEqual(num_certs, 1)
yield check_estimators_nan_inf
def fit(self, X, y): super(CustomSVC, self).fit(X, y) self.data_type_ = type(X) return self
HAS_MYSQLDB = False
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit() attempt.deny("error") self._assert_can_reverify()
vm_['password'] = get_password(vm_)
AccessTestData(partition_groups={1: 3, 2: 3}, xblock_access={1: [1, 2], 2: [1, 2]}),
self.cpush = True
self.assertEqual(len(self.library.children), 2)
kwargs = {} if cls.grading_policy is not None: kwargs['grading_policy'] = cls.grading_policy cls.course = CourseFactory.create(**kwargs)
members = models.ManyToManyField(Person, through=Membership) user_members = models.ManyToManyField(User, through='UserMembership')
_win(kernel32.GetExitCodeProcess, wintypes.BOOL,
problem = new_loncapa_problem(xml_str) problem.done = True
return SoftwareSecurePhotoVerification.user_status(self.user)[0]
self.stub_api() self.auth(enroll=False) self.listing_page.visit() self.assertTrue(self.listing_page.is_sidebar_present) self.assertFalse(self.listing_page.are_cards_present)
self.assertTrue(tab.validate(dict_tab)) if invalid_dict_tab: with self.assertRaises(xmodule_tabs.InvalidTabsException): tab.validate(invalid_dict_tab)
kwargs['w'] = 1
return self._rmse_raw
elif isinstance(file, FieldFile) and instance is not file.instance: file.instance = instance
return False
if kwargs: xpath_expr += _build_xpath_expr(kwargs)
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010 13:30:00")
migration_loader = MigrationLoader(connection) self.assertEqual(migration_loader.migrated_apps, set()) self.assertEqual(migration_loader.unmigrated_apps, {'migrated_app'})
y_train = np.copy(y) y_train[unlabeled_set] = -1
supports_select_for_update_with_limit = True
#today = '' today_fmt = '%B %d, %Y'
user_course_ids = random.sample(range(TOTAL_COURSES_COUNT), USER_COURSES_COUNT)
return OrderedDict()
pass
filtered = fcopy.filter(regex='[A]+') self.assertEqual(len(filtered.columns), 2) self.assertIn('AA', filtered)
raise
from salt.modules import win_powercfg as powercfg
self.assertEqual(tab.tab_id, expected_tab_id)
ma = MyModelAdmin(model, admin.site) ff = ma.formfield_for_dbfield(model._meta.get_field(fieldname), request=None)
new_target = self._shallow_copy(new_target)
if ttl is None: ttl = 60 status = _zone.add_record(_type, name, _value, ttl, identifier) return _wait_for_sync(status.id, conn, wait_for_sync)
digits = load_digits() X = digits.images.reshape((len(digits.images), -1)) y = digits.target
self.client.handler.load_middleware() response = self.client.get('/middleware_exceptions/exception_in_render/') self.assertEqual(response.content, b'Exception caught')
if close_bracket and not hang_closing: yield (start, "E123 closing bracket does not match " "indentation of opening bracket's line") hangs[depth] = hang
return self.q(css='ul.listing-courses')
team_list = self.get_teams_list(user=user, expected_status=200, data=course_one_data) self.assertEqual(team_list['count'], 1)
_skip_if_has_locale()
plt.figure(fignum, figsize=(9, 10))
compare_branch = getattr(options, 'compare_branch', None) compare_branch_string = u'' if compare_branch: compare_branch_string = u'--compare-branch={0}'.format(compare_branch)
import copy import logging import time
config_key = microsite.get_value('cybersource_config_key') if config_key: config = config['microsites'][config_key]
else: if is_existing['retcode'] in [0]: item_create_required = False
ofile.writelines(lines)
_default_encoding = 'UTF-8'
group_vpc = conn.create_security_group(name=group_name, description=group_description, vpc_id=vpc_id) retrieved_group_id = boto_secgroup.get_group_id(group_name, group_vpc, **conn_parameters) self.assertEqual(group_vpc.id, retrieved_group_id)
def __add__(self, other): if not isinstance(other, int): return NotImplemented return self.__class__(int(self) + other)
rewritten_url = cdn_base_url.rstrip("/") + "/" + parsed.path.lstrip("/") validator = URLValidator()
values = Index(self.values, dtype='object').to_native_types()
resp = self.client.post( '/shoppingcart/payment_fake', dict(post_params) )
if is_empty: raise TypeError('Empty {0!r}: no numeric data to ' 'plot'.format(numeric_data.__class__.__name__))
user = BetaTesterFactory(course_key=course_descriptor.id) normal_student = UserFactory() instructor = InstructorFactory(course_key=course_descriptor.id)
windows = world.browser.windows assert_equal(len(windows), 2)
Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16))
return serve(request, self.file_path(request.path), insecure=True)
req_kwargs = {}
if not os.path.exists(filename): os.makedirs(filename)
from __future__ import absolute_import
pass
wkb_w.byteorder = 1
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
self.assertEquals( preview.latex_preview('f(3^2)', functions=['f']), r'\text{f}\left(3^{2}\right)' )
if not isinstance(obj, cls): err_msg = "{0}Expected type {1}, found {2} instead" raise AssertionError(err_msg.format(msg, cls, type(obj)))
params['signature'] = signature if signature is not None else self._signature(params) return params
return (name, admin_state_up, router_ext, network_type, physical_network, segmentation_id, shared)
return self.q(css='.wrapper-last-publish').first.text[0]
stochastic = None
from __future__ import absolute_import import sys import copy import types
mono_shape = shape[:s_index] + (1, ) + shape[(s_index + 1):]
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertFalse(module.should_show_save_button())
from __future__ import unicode_literals
import logging import salt.utils
self._set_gender(None) self.assertIsNone(self.profile.gender_display)
with self._mock_geoip(ip_country): result = embargo_api.check_course_access(self.course.id, user=self.user, ip_address='0.0.0.0')
with tornado.stack_context.StackContext(self.functions.context_dict.clone): data['return'] = self.functions[fun](*args, **kwargs) data['success'] = True
#latex_logo = None
pass
return [ v[-1][0] for v in self.__tokdict.values() ]
if not issubclass(clz, APIView): msg = ( u"{clz} is not a Django Rest Framework APIView subclass." ).format(clz=clz) LOGGER.warning(msg) return clz
img = circle1 + circle2 + circle3 + circle4
req = self._get_GET_csrf_cookie_request() CsrfViewMiddleware().process_view(req, token_view, (), {}) resp = token_view(req) self._check_token_present(resp)
self.assertQuerysetEqual( Tag.objects.filter(id__in=Tag.objects.filter(id__in=[])), [] )
exc_str = exc_str_prefix + _nested_output(self.info)
mylocalrepo: git.config_unset: - name: foo.bar - all: True
config.delete() self.assertEqual(len(self.page.experiment_group_configurations), 1)
#html_file_suffix = None
from datetime import datetime from pandas.compat import range, lrange import operator import nose
super(SSLClientTest, self).setUp() self.client = Client() self.factory = RequestFactory() self.mock = Mock()
if not courses: raise CommandError( u"No courses found for orgs: {orgs}".format( orgs=", ".join(org_list) ) )
import salt.client from salt.ext import six from salt.ext.six.moves import zip
self.assertContains(resp, "super-ugly") self.assertContains(resp, "This file is only for demonstration, and is horrendous!")
self._studio_add_content(1)
if not salt.utils.cloud.wait_for_port(ip_address, port=445, timeout=ssh_connect_timeout): raise SaltCloudSystemExit( 'Failed to connect to remote windows host' )
return False
self.assertEqual(self.func(None), [E001])
def first_non_None_value(values): try: v = next(v for v in values if v is not None) except StopIteration: return None return v
current_log_likelihood = None self.converged_ = False
for param in sensitive_post_parameters: if param in cleansed: cleansed[param] = CLEANSED_SUBSTITUTE return cleansed
return bool(STUDIO_VIEW_CONTENT & get_user_permissions(user, course_key))
values = _concat._concat_compat([b.values for b in blocks])
self._add_simple_content_block() with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
reindex_course_and_check_access(self.course.id, self.user)
tol = 2 * np.finfo(M.dtype).eps
clf = PassiveAggressiveClassifier(C=0.1, n_iter=100, class_weight={1: 0.001}, random_state=100) clf.fit(X2, y2)
grains = {'virtual': 'physical'}
idx = Index(list('abcd')) self.assertTrue('str' in dir(idx))
start_time = time.time() yield execution_time = time.time() - start_time LOGGER.info(u"Execution time: {time} seconds".format(time=execution_time))
return
AccessTestData(partition_groups={1: 1, 2: 2}, merged_parents_list=[{1: {1}}], expected_access=True),
return u"Course '{}' is {}Embargoed".format(self.course_id.to_deprecated_string(), not_em)
ret = {'pid': process_info.dwProcessId}
tfidf_test2 = tv.transform(test_data).toarray() assert_array_almost_equal(tfidf_test, tfidf_test2)
self.assertEqual(response.status_code, 200) self.assertIn('Financial Assistance Application', response.content)
self.assertEqual(len(httpretty.httpretty.latest_requests), 1)
return self.build_problem( choices=choices, type=in_type, script=script )
vm_['gateway'] = get_ssh_gateway_config(vm_)
panel = Panel(np.random.rand(3, 3, 3)) with assert_produces_warning(): panel.major_xs(1, copy=False)
df2 = df.copy() df2.set_index(['A', 'B'], inplace=True) assert_frame_equal(df2, expected)
return self.q(css=TEAMS_HEADER_CSS + ' .page-title')[0].text
SITE_ID = 1 SITE_NAME = "example.com" HTTPS = 'on' ROOT_URLCONF = 'lms.urls'
mount.__grains__ = {} mount.__salt__ = {} mount.__context__ = {}
key = "my-key" value = "my-value" cache = caches[DEFAULT_CACHE_ALIAS] cache.set(key, value) cache_key = cache.make_key(key) self.assertIsNotNone(cache._expire_info[cache_key])
self.assert_no_events_emitted() try: response = segmentio.segmentio_event(request) self.assertEquals(response.status_code, 200)
TEST_RUNNER = 'django.test.runner.DiscoverRunner'
),
defaults = DEFAULT_MASTER_OPTS defaults.update(DEFAULT_API_OPTS)
old_value = tab[key] new_value = 'New Value' tab[key] = new_value self.assertEquals(tab[key], new_value) tab[key] = old_value self.assertEquals(tab[key], old_value)
from __future__ import unicode_literals
structure_json = models.TextField(verbose_name='Structure JSON', blank=True, null=True)
if cls.USE_PLUGIN_MANAGER: return set(cls.get_available_plugins().itervalues()) else: return set()
if (children_left[node_id] != children_right[node_id]): stack.append((children_left[node_id], parent_depth + 1)) stack.append((children_right[node_id], parent_depth + 1)) else: is_leaves[node_id] = True
return cls.objects.filter(order__status='purchased', coupon__course_id=course_id).aggregate(Count('coupon'))
FEATURES['ENABLE_COURSEWARE_SEARCH'] = True
return set_system_date_time(years=int(dt_obj.strftime('%Y')), months=int(dt_obj.strftime('%m')), days=int(dt_obj.strftime('%d')))
newaliases = _which('newaliases') if newaliases is not None: __salt__['cmd.run'](newaliases)
app.connect('build-finished', embed_code_links)
key = hashlib.sha1(key_salt + secret).digest()
self.assertTrue(glusterfs.delete_volume('Newvolume1')) self.assertTrue(mock_run.called) self.assertTrue(mock_stop_volume.called)
import salt.key import salt.crypt
_list = self.run_function('beacons.list', return_yaml=False) self.assertTrue(_list['ps']['enabled'])
if os.path.isdir(SCIKIT_LEARN_DATA): shutil.rmtree(SCIKIT_LEARN_DATA) if os.path.isdir(SCIKIT_LEARN_EMPTY_DATA): shutil.rmtree(SCIKIT_LEARN_EMPTY_DATA)
order = [2, 1, -1] for df in [self.frame]:
n_samples = 100 x = np.random.uniform(size=n_samples) > 0.5
result = f.clean('12.21.2010') self.assertEqual(result, date(2010, 12, 21))
import salt.minion import salt.utils.verify import salt.utils.jid from salt.utils.event import tagify
tab_content = get_static_tab_contents(request, course, tab) self.assertIn(self.course.id.to_deprecated_string(), tab_content) self.assertIn('static_tab', tab_content)
result = self.bseries + self.bseries.to_dense() tm.assert_sp_series_equal(result, self.bseries + self.bseries)
with Timer() as iteration_over_courses_time_1: courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
self.assertEqual(fire_event_mock.call_args[0][0]['fun'], 'test.echo')
import salt.ext.six.moves.http_client from salt.exceptions import CommandExecutionError
X_FRAME_OPTIONS = 'ALLOW'
if self.day_deltas == [1, 3]: return 'B'
with salt.utils.flopen(filename, 'rb') as _fp: _contents = _fp.read() result = gpg.encrypt(_contents, recipients, passphrase=gpg_passphrase, output=output)
frame = DataFrame(empty((0, 3))) self.assertEqual(len(frame.index), 0)
lm = LayerMapping(Interstate, inter_shp, inter_mapping) lm.save(silent=True)
return
import integration from salt.config import cloud_providers_config from salt.ext.six.moves import range
response = self.client.get(reverse('admin:admin_views_parent_add')) self.assertEqual(response.status_code, 200)
self.assertFalse(UserPreference.objects.filter(user=user, key=NOTIFICATION_PREF_KEY)) request = self.request_factory.get("dummy") request.user = AnonymousUser()
user: myuser password: mypassword url: https://api.cloud.xmission.com:4465/paci/v1.0/ driver: parallels
self.assertTrue(hasattr(user, 'profile'))
__remove_temp_logging_handler()
assert_equal(10 + 9, n_lines)
return self.statistics()[1]
site = AdminSite()
rs = mi_int.iloc[2, 2] xp = mi_int.ix[:, 2].ix[2] self.assertEqual(rs, xp)
alice = dive.authors.create(name='Alice') self.assertEqual(alice._state.db, 'default')
self.wait_for( lambda: self.team_capacity_text == self.format_capacity_text(num_members, max_size), description="Team capacity text is not correct" )
ret.setdefault('updated branches', {})[ref_name] = \ {'old': old_sha, 'new': new_sha}
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
block_structure = BlockStructureModulestoreData(root_block_usage_key=0) for block in blocks: block_structure._add_xblock(block.location, block)
if index is None: index = extract_index(arrays) else: index = _ensure_index(index)
export_fs.makeopendir('policies')
return self._library_key
import logging
cmd = 'cmd /c {0}'.format(cmd)
url = self.homework.location.to_deprecated_string() found_unit = tools.find_unit(self.course, url) self.assertEqual(found_unit.location, self.homework.location)
kinds = tuple(list(compat.string_types) + [ABCSeries, np.ndarray, Index, list]) if isinstance(slice_, kinds): slice_ = IndexSlice[:, slice_]
alphas = np.tile(np.sort(alphas)[::-1], (n_l1_ratio, 1))
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
raise NotImplementedError('subclasses of SessionBase must provide a delete() method')
added_to_index = self.reindex_course(store) self.assertEqual(added_to_index, 3) response = self.search() self.assertEqual(response["total"], 3)
f = File(BytesIO(b'one\r\ntwo\r\nthree')) self.assertEqual(list(f), [b'one\r\n', b'two\r\n', b'three'])
selector = self.get_element_selector(VIDEO_BUTTONS[button_id]) return self.q(css=selector).visible
self.assertQuerysetEqual(X.objects.all(), []) self.assertQuerysetEqual(X.objects.select_related(), [])
_ret = {}
skip_if_no_data() data = stl10.STL10(which_set='train') data = stl10.STL10(which_set='test')
response = self.api_response()
new_doc = {} new_doc['views'] = get_valid_salt_views() new_doc['language'] = "javascript"
comparator = "compare_{typ}_{dt}".format(typ=typ, dt=dt) comparator = getattr(self, comparator, self.compare_element) comparator(result, expected, typ, version)
if not np.any(Y_ == i): continue plt.scatter(X[Y_ == i, 0], X[Y_ == i, 1], .8, color=color)
_update_organization_context(context, course)
if fastpath:
yield self.auth.authenticate() ret = yield self.message_client.send( self._package_load(self.auth.crypticle.dumps(load)), timeout=timeout, tries=tries, )
from __future__ import absolute_import import os import threading import platform import time
self.assertEqual(col[1], Timestamp( '2000-06-01 07:00:00', tz='UTC'))
self.assertIn( 'is not available', self.run_function('runtests_decorators.booldependsFalse' ) )
from __future__ import absolute_import import logging
pass
students = 'all_whitelisted'
if ret in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
return None, None, None
n_samples_values = np.logspace(np.log10(n_samples_min), np.log10(n_samples_max), n_steps).astype(np.int)
assert_raises(ValueError, precision_recall_curve, [0, 1, 2], [[0.0], [1.0], [1.0]])
return "%s: %s" % (self.__class__.__name__, self._constructor_args)
self._send_handler_response("DELETE")
last = self.n_layers_ - 2
val = '\n'.join([v for v in val.split('\n') if not v.startswith('#')])
return nanops.nanmin(self.values)
cls.raises_exception('blahblahblah:8081', socket.error)
return self._get_field('days')
PARENTAL_CONSENT_AGE_LIMIT = 13
from __future__ import absolute_import
'edxmako.shortcuts.marketing_link_context_processor',
try: list_(name=name, runas=runas) return True except CommandExecutionError: return False
return _get_enabled_disabled("false")
plt.figure()
project_state = ProjectState() project_state.add_model(ModelState.from_model(A)) project_state.add_model(ModelState.from_model(B)) old_state = project_state.clone()
self.masterapi._minion_event(load) self._handle_minion_event(load)
response_gone_class = http.HttpResponseForbidden response_redirect_class = http.HttpResponseRedirect
return reverse_course_url( 'textbooks_detail_handler', self.course.id, kwargs={'textbook_id': textbook_id} )
data_dir = string_utils.preprocess('${PYLEARN2_DATA_PATH}') info['filename'] = os.path.join(data_dir, info['filename'])
assert_raises(ValueError, plot_partial_dependence, {}, X, [0])
resp = self.create_xblock(parent_usage_key=chap_usage_key, category='sequential') self.seq_usage_key = self.response_usage_key(resp) self.seq_update_url = reverse_usage_url("xblock_handler", self.seq_usage_key)
key = unichr(unicode_char)
tm._skip_if_no_scipy()
values = Series(['fooBAD__barBAD', NA, 'foo'])
class WKTWriter(IOBase): _constructor = wkt_writer_create _destructor = wkt_writer_destroy ptr_type = WKT_WRITE_PTR
self.track_selection_page.enroll('verified')
from __future__ import absolute_import import os import logging
return (name, network, device_id, admin_state_up)
response = self.client.post(self.url, { "email": self.EMAIL, "password": "invalid" }) self.assertHttpForbidden(response)
self.assertEqual(source.nfld, layer.num_fields) self.assertEqual(source.nfld, len(layer.fields))
if callable(value): value = CallableChoiceIterator(value) else: value = list(value)
course_page.set_staff_view_mode_specific_student(student_b_username) verify_expected_problem_visibility(self, course_page, [self.beta_text, self.everyone_text])
for method in SimpleView.http_method_names: kwargs = dict(((method, "value"),)) with self.assertRaises(TypeError): SimpleView.as_view(**kwargs)
self._update_staff_locks(False, False, False) self.assertIsNone(utils.find_staff_lock_source(self.vertical))
coupon = Coupon( code='test_code', description='test_description', course_id=self.course.id, percentage_discount='10', created_by=self.instructor, is_active=True ) coupon.save()
return str(key)
request.session['attempting_upgrade'] = (message == self.UPGRADE_MSG)
f = lambda x: x.encode(encoding, errors)
msg = "AttributeError or ValueError not raised by predict" assert_raises_regex(AssertionError, msg, check_estimators_unfitted, "estimator", NoSparseClassifier)
self.assertEqual(len(mail.outbox), 0)
{key_field: 'fake'}, {key_field: getattr(locator, key_field) + 'X'}, {key_field: 'X' + getattr(locator, key_field)},
patcher = mock.patch('terrain.stubs.xqueue.post') self.post = patcher.start() self.addCleanup(patcher.stop)
if self.dtype is not None: dtype = _ensure_decoded(self.dtype)
class Person(): pass PersonWithHeight = PersonWithHeightAndWidth = PersonDimensionsFirst = Person PersonTwoImages = Person
dir_mode = __salt__['config.manage_mode'](dir_mode) file_mode = __salt__['config.manage_mode'](file_mode)
face_compressed = np.choose(labels, values) face_compressed.shape = face.shape
return BadgrBackend()
return DataFrame()
new_index = self.index.insert(0, ('abc', 'three'))
if value is None: return None if timezone.is_aware(value): raise ValueError("Django does not support timezone-aware times.") return six.text_type(value)
sparse = self.dense1.to_sparse(fill_value=0) sparse2 = self.dense2.to_sparse(fill_value=0)
BOK_CHOY_MONGO_DATABASE = "test" BOK_CHOY_CACHE = memcache.Client(['0.0.0.0:11211'], debug=0)
try_quick = True if hasattr(other, 'align'):
return "RELEASE SAVEPOINT %s" % self.quote_name(sid)
data_csv = pd.read_csv(self.file02.replace(".xpt", ".csv")) numeric_as_float(data_csv)
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]] y = [1, 1, 1, 1, 1, 1]
if stdout is None and stderr is None: self.assertFalse(term.isalive())
return __proxy__(args, kw)
from __future__ import unicode_literals
component = self.store.get_item(xblock.location) component.display_name = 'Changed Display Name'
fast_forward = None
if format not in serializers.get_public_serializer_formats(): try: serializers.get_serializer(format) except serializers.SerializerDoesNotExist: pass
import salt.utils from salt.exceptions import CommandExecutionError, SaltInvocationError
optional = [ 'InstanceName', 'InternetChargeType', 'InternetMaxBandwidthIn', 'InternetMaxBandwidthOut', 'HostName', 'Password', 'SystemDisk.Category', ]
return False
'sign_pub_messages': bool,
FEATURES['MILESTONES_APP'] = True
self.assert_oauth_status(self.dot_access_token, status.HTTP_200_OK)
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
from __future__ import absolute_import
rng = np.random.RandomState(0) n_samples = 100 n_features = 10
return self.initial.copy()
block = modulestore().get_item(block_location) block.group_access = access_dict modulestore().update_item(block, 1)
return HttpResponse(status=406)
sorted_active_contents = sorted(active_contents, key=itemgetter('group_name')) sorted_inactive_contents = sorted(inactive_contents, key=itemgetter('group_name'))
self.unit_page = self.outline.section('Test Section').subsection('Test Subsection').expand_subsection().unit( 'Test Unit').go_to()
lshf = LSHForest(min_hash_match=32) ignore_warnings(lshf.fit)(X_train)
res = self._combine_const(other, func, raise_on_error=False) return res.fillna(True).astype(bool)
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
with self.assertRaises(FieldError): TaggedItem.objects.filter(vegetable__isnull=True)
s = Series(range(10)).astype(float) s[8] = None result = s[8] self.assertTrue(isnull(result))
__virtualname__ = 'sqlite'
for config_key in ('log_file', 'key_logfile'): if urlparse(opts.get(config_key, '')).scheme == '': prepend_root_dirs.append(config_key)
output = self.engine.render_to_string('basic-syntax02', {'headline': 'Success'}) self.assertEqual(output, 'Success')
return self.q(css='section.banner-user')
__virtualname__ = 'jail'
nearest_center, inertia = _labels_inertia(X, x_squared_norms, centers, distances=distances)
with tm.assertRaises(Exception): func(idx)
else: if self.exprs: raise maxException else: raise ParseException(instring, loc, "no defined alternatives to match", self)
if not bool(role): log.info( '{0} \'{1}\' could not be found'.format(typ_.capitalize(), name) ) return False
self.make_course(textbooks=[IMAGE_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('book', book_index='fooey')
return json.loads(value, cls=MessageDecoder)
if getattr(e, 'winerror', 0) != 32 and getattr(e, 'errno', 0) != 13: raise
ItemFactory.create(parent=self.verticals[3], category='edx-reverification-block') with check_mongo_calls_range(max_finds=6, max_sends=3): self._update_partitions(reload_items=False)
if self.act_enc is None: act_enc = lambda x: x else: act_enc = self.act_enc return act_enc(self._mappings(inputs))
import salt.ext.six as six
try: return value[0] except IndexError: return ''
self.assertQuerysetEqual( self.jane.groups.all(), [] )
return contentstore().find(Transcript.asset_location(location, filename))
>>> aapl.calls
import sys import logging
self.assertEqual(res.context['next_week'], None) self.assertEqual(res.context['previous_week'], datetime.date(2006, 4, 30))
'id': course_id, 'name': course_overview.display_name, 'number': course_overview.display_number_with_default, 'org': course_overview.display_org_with_default,
if is_categorical_dtype(dtype): dtype = gt.CategoricalDtype() elif is_datetime64tz_dtype(dtype): dtype = gt.DatetimeTZDtype(dtype) else: dtype = np.dtype(dtype) return dtype
driver_supports_timedelta_args = False
proxy = Proxy.objects.create(name="proxy", value=42)
self.the_cmathml = self.GetContentMathML(self.asciimath, pmathml) return self.the_cmathml
if self.find_css('.collection-edit').present: return 'edit' elif self.find_css('.collection').present: return 'details'
if batch is None or (isinstance(batch, tuple) and len(batch) == 0): return True
self.update_structure(usage_locator.course_key, new_structure)
self.video.wait_for_video_player_render() self.assertIn(self.video.state, ['playing', 'buffering', 'finished'])
stack = deque([start_node])
self.photo_id_key = rsa_encrypted_aes_key.encode('base64') self.save()
self.assertEqual(Article.objects.order_by('id').earliest(), a1)
self.assertContains(response, 'This is a test')
return self.get_item(item_loc)
ret['comment'] = 'Tablespace {0} is not present, so it cannot ' \ 'be removed'.format(name) return ret
clf = svm.LinearSVC(random_state=0).fit(X, Y)
'django.middleware.clickjacking.XFrameOptionsMiddleware',
url_path = embargo_api.message_url_path(self.course.id, 'courseware') self.assertEqual(url_path, '/embargo/blocked-message/courseware/default/')
self.assertTrue(np.array_equal(rng.asi8, rng_eastern.asi8))
instructor_task = InstructorTask.objects.get(id=instructor_task.id) instructor_task.task_state = PROGRESS instructor_task.save()
rbm1.random_state = 42 d_score = rbm1.score_samples(X) rbm1.random_state = 42 s_score = rbm1.score_samples(lil_matrix(X)) assert_almost_equal(d_score, s_score)
data = create_series() + create_dataframes()
p = subprocess.Popen([c] + args, cwd=cwd, stdout=subprocess.PIPE, stderr=(subprocess.PIPE if hide_stderr else None)) break
from __future__ import absolute_import import os import logging import hashlib import glob import random import ctypes import tempfile import yaml import re import datetime import ast
run = problem_key.run if not run: problem_key = course_key.make_usage_key_from_deprecated_string(problem_location) if problem_key.course_key != course_key: return []
if thirdparty: scheme = "https" if settings.HTTPS == "on" else "http" url = '{scheme}://{host}{path}'.format( scheme=scheme, host=settings.SITE_NAME, path=url )
import salt.utils.event
lm = LayerMapping(Point3D, vrt_file, point_mapping, transform=False) lm.save() self.assertEqual(3, Point3D.objects.count())
rng = np.random.RandomState(42) S = rng.standard_t(1.5, size=(20000, 2)) S[:, 0] *= 2.
return self.__tokdict.keys()
from __future__ import unicode_literals
UserFactory.create(email=self.new_email) self.assertEqual(self.do_email_validation(self.new_email), 'An account with this e-mail already exists.')
self.check('[50,40]', 35, 25)
self.password = make_password(None)
X_test = np.array([[0, 1, 1, 0, 0, 1]])
if context is not None: return nested(self._capture_assertion_errors(), context)
call_command(self.cmd, addrport="deadbeef:7654") self.assertServerSettings('deadbeef', '7654')
import salt.utils from salt.exceptions import ( CommandExecutionError, MinionError)
all_variables, all_functions = add_defaults(variables, functions, case_sensitive)
packages_really_to_remove.append(this_package)
pass
self.inputs[input_id] = input_type_cls(self.capa_system, problemtree, state) return self.inputs[input_id].get_html()
md.inlinePatterns.add('mathjax', MathJaxPattern(), '<escape')
idx1 = Index(lrange(10) + lrange(10)) idx2 = Index(lrange(20))
from __future__ import absolute_import
ret = {}
err = SearchIndexingError mock_index_dictionary.return_value = err
pass
cauth = CourseAuthorization(course_id=self.course.id, email_enabled=True) cauth.save()
return _LDAPConnection(**connargs).ldap
if not os.path.isdir(sourcepath): _LOG.error('Path is not present: %s', sourcepath) return False
pass
if item in ['constraint']: extra_args = extra_args + ['id={0}'.format(item_id)] cmd += extra_args
if "Subprocess return code: 1" not in error_message: return False else: return True
from __future__ import absolute_import
clf = Pipeline([ ('vec', vectorizer), ('clf', Perceptron()), ])
response = default_view(request, '1') self.assertEqual(response.content, b'Hello World 1')
if index.step is None: self._assign_simple_slice(start, stop, valueList) else: self._assign_extended_slice(start, stop, step, valueList)
zbcop = self.zbseries.copy() zicop = self.ziseries.copy()
b.authors.add(p) b.authors.remove(p) b.authors.clear() b.authors.set([p]) b.delete()
a2 = A02.objects.all()[0] self.assertIsInstance(a2, A02) self.assertEqual(a2.f_a, "foo")
__SKLEARN_SETUP__
_skip_if_no_xlrd()
if self.remove_zero_eig or self.n_components is None: self.alphas_ = self.alphas_[:, self.lambdas_ > 0] self.lambdas_ = self.lambdas_[self.lambdas_ > 0]
submitted = self._unpack(student_answer) option_ids = submitted['options_value'] if len(option_ids) == 1: return option_ids[0] return None
user.is_staff = False user.save()
params, response = self._validate_parameters(request, bool(initial_verification)) if response is not None: return response
from __future__ import absolute_import import os import yaml import shutil
return user_id
updates, layer_to_chains = model.get_sampling_updates( layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps, return_layer_to_updated=True)
actions.do_complete(backend, social_views._do_login, user=unlinked_user)
result = df.iloc[np.array([True] * len(mask), dtype=bool)] assert_frame_equal(result, df)
self._verify_split_test_import( 'split_test_copy_with_draft', 'split_test_module_draft', 'fb34c21fe64941999eaead421a8711b8', {"0": '9f0941d021414798836ef140fb5f6841', "1": '0faf29473cf1497baa33fcc828b179cd'}, )
for ext in self.extensions: ext.setup(self.model, self.dataset, self.algorithm)
for i, file_path in enumerate(file_paths): if i % 1000 == 0: logger.info("Loading face #%05d / %05d", i + 1, n_faces)
FEATURES['ENABLE_SERVICE_STATUS'] = True
for i, n_outliers in enumerate(range_n_outliers): for j in range(repeat):
if all(conn.features.can_clone_databases for conn in connections.all()): return default_test_processes() else: return 1
assert_array_equal(X_trans, [[0., 1., 0., 1., 1.], [1., 0., 1., 0., 1.]])
rng = np.random.RandomState(0) n, p = 50, 3
names = list(self.orig_names) names = self._maybe_dedup_names(names)
import matplotlib.pyplot as plt
geo_context = {'LANGUAGE_BIDI': translation.get_language_bidi()} logger = logging.getLogger('django.contrib.gis')
return self.list_filter
return {"result": "inclusion_no_params - Expected result"}
if sorted(append_axis) == sorted(exist_axis): append_axis = exist_axis
kde = KernelDensity(bandwidth, kernel=kernel).fit(X) samp = kde.sample(100) assert_equal(X.shape, samp.shape)
self._verify_masquerade_for_all_groups()
index = list('bca')
return self.event[u'current_tab'] == 1
self.cursor().execute('SET foreign_key_checks=0') return True
'ENABLE_CREATOR_GROUP': False,
if not addresses: addresses = dict() _LOG.debug('Empty %s specified.', setting)
self.assertEquals(preview.latex_preview('3.1415'), '3.1415')
self._check_grid_settings(Series([1, 2, 3]), plotting._series_kinds + plotting._common_kinds)
while block.parent: block = block.get_parent() return block
mono_shape = shape[:s_index] + (1, ) + shape[(s_index + 1):]
drbd.__grains__ = {} drbd.__salt__ = {} drbd.__context__ = {}
test_routers = (object(),) with self.settings(DATABASE_ROUTERS=test_routers): self.assertSequenceEqual(router.routers, test_routers)
if self.conn.queue_exists(qname): return True return False
self.assertEqual(form.cleaned_data['p'].srid, 4326)
cache_key = self._cache_key_for_kvs_key(kvs_key) if cache_key not in self._cache: raise KeyError(kvs_key.field_name) return self._cache[cache_key][kvs_key.field_name]
EmptyPromise( lambda: self.find_css('a.detail-toggle.hide-details').present, 'Certificate details are expanded' ).fulfill()
content_type.model = old_model
self.assertFalse(zendesk_mock_class.return_value.mock_calls) self.assertFalse(datadog_mock.mock_calls)
if callable(action): func = action action = action.__name__
raise parser.error_class( "Not expecting '%s' in this position in if tag." % self.id )
res_r = int(numpy.floor(last_pool_r/rs)) + 1 res_c = int(numpy.floor(last_pool_c/cs)) + 1
raise NotImplementedError('subclasses of BaseDatabaseWrapper may require a get_connection_params() method')
for key in ['xqueue_header', 'xqueue_body']: if key not in data: raise Http404
self.check_discussion( tab_list=self.tabs_with_discussion, expected_discussion_link="default_discussion_link", expected_can_display_value=True, )
self.assertEqual(len(encoded_unexpected_from_addr), 318) self.assertEqual(len(escaped_encoded_unexpected_from_addr), 324) self.assertEqual(len(unexpected_from_addr), 137)
pythoncom.CoInitialize()
self._check_params()
y = 0.5 * X.ravel()
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 ephemeral: - size: 100 format: <swap/ext4>
import salt.utils.http
if os.path.isdir(dest): salt.utils.rm_rf(dest) fn_ = salt.utils.fopen(dest, 'wb+')
SparsePanel._add_aggregate_operations(use_numexpr=False) ops.add_special_arithmetic_methods(SparsePanel, use_numexpr=False, ** ops.panel_special_funcs) SparseWidePanel = SparsePanel
mylocalrepo: git.config_unset: - name: 'foo\..+' - all: True
block_structure.remove_block_if( lambda block_key: block_key.block_type == 'split_test', keep_descendants=True, )
cm = confusion_matrix(y_true, y_pred) assert_array_equal(cm, [[19, 4, 1], [4, 3, 24], [0, 2, 18]])
if not date_time: msg = '[{}] is not a valid timestamp'.format(value) log.warning(msg) raise serializers.ValidationError(msg)
self.assertTrue((self.index == self.index).all())
'ping_interval': int,
CreditProvider.objects.create( provider_id="ASU", enable_integration=True, provider_url="https://credit.example.com/request", )
im = im.convert('RGB')
self._capture_basic_metrics()
for sort in [False, True]: merged1 = self.data.merge(self.to_join, left_on=['key1', 'key2'], right_index=True, how='left', sort=sort)
zero_length = self.tsframe.reindex([]) result = zero_length.asfreq('BM') self.assertIsNot(result, zero_length)
try: x = np.array(x, dtype=self.dtype) except TypeError: x = np.array(x, dtype='datetime64[ns]')
return self.error_msg
DEPRECATED_BLOCK_TYPES = ['poll', 'survey']
event = self.handle_callback_and_get_context_info(mock_tracker, problem_display_name) return event['module']
result = list(self.values)
self._auto_auth(self.STAFF_USERNAME, self.STAFF_EMAIL, True) self.course_outline.visit() self.course_outline.start_reindex() self.course_outline.wait_for_ajax()
try: import cherrypy
kwargs_for_reverse = {key_name: unicode(key_value)} if key_name else None if kwargs: kwargs_for_reverse.update(kwargs) return reverse('contentstore.views.' + handler_name, kwargs=kwargs_for_reverse)
self.browser.execute_script("jQuery.fx.off = true;")
res = dfmix.replace(r'\s*\.\s*', nan, regex=True) assert_frame_equal(dfmix, res.fillna('.'))
from django.contrib import admin from django.db import models
email, password = self._create_unique_user()
self.q(css='.wrapper-create-library .new-library-save').click()
from __future__ import print_function from __future__ import absolute_import
result = ser.copy() result.loc[sel] = 1 expected = pd.Series(1, index=index) assert_series_equal(result, expected)
for index, (name, label, (x, y)) in enumerate( zip(names, labels, embedding.T)):
return fnd
import re import os import logging
if len(list_item.children) == 2: enum.append(list_item) list_item = nodes.list_item() list_item['classes'] = ['lit-item']
ASSET_AMOUNT_PER_TEST = (0, 1, 10, 100, 1000, 10000)
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.create_xblock( runtime, course_key, block_type, block_id=block_id, fields=fields, **kwargs ))
METRIC_UNDEFINED_BINARY_MULTICLASS = set(METRIC_UNDEFINED_BINARY).union( set(METRIC_UNDEFINED_MULTICLASS))
def _get_freq(self): return self.offset
self.wait_until(lambda d: len(d.window_handles) == num_windows, timeout)
self._check_staff(self.course) self._check_staff(self.test_course)
return 'problem'
self.assertTrue('Activate Course Enrollment' in response.content)
import integration
course_id = CourseKeyField(max_length=255, db_index=True)
from napalm import get_network_driver HAS_NAPALM = True
'django.contrib.auth.hashers.SHA1PasswordHasher', 'django.contrib.auth.hashers.MD5PasswordHasher',
self.prepare_new_page() totals_table.drawOn(self.pdf, self.margin + left_padding, self.second_page_start_y_pos - rendered_height) return self.second_page_start_y_pos - rendered_height - self.min_clearance
return _algos.arrmap_object(rvalues, lambda x: op(lvalues, x))
result = get_result(arr, 20, min_periods=15) self.assertTrue(np.isnan(result[23])) self.assertFalse(np.isnan(result[24]))
enabled = get_enabled(runas=runas)
deadline = models.DateTimeField( default=default_deadline_for_credit_eligibility, help_text=ugettext_lazy("Deadline for purchasing and requesting credit.") )
self.assertEqual( self.client.session.get_expire_at_browser_close(), expire_at_browser_close )
plt.figure(2, figsize=(3, 2.2)) plt.imshow(face_compressed, cmap=plt.cm.gray, vmin=vmin, vmax=vmax)
parent_ids.sort(key=lambda parent: (parent.type, parent.id)) return BlockUsageLocator.make_relative( locator, block_type=parent_ids[0].type, block_id=parent_ids[0].id, )
func.argtypes = argtypes
registration.activate()
contents = path_or_buf.read() try: contents = contents.encode(self._default_encoding) except: pass self.path_or_buf = BytesIO(contents)
if is_categorical(value): return True elif is_sparse(value): return True elif is_datetimetz(value): return True return False
self.assertIn("2015-JULY-17", text)
return []
gc2 = GeometryCollection(*tuple(g for g in gc1))
return resolve_iterator_class(mode).uniform_batch_size
host = name
return xblock_local_resource_url(block, uri)
logging.getLogger().setLevel(logging.ERROR)
self._studio_reindex()
_, region, _, _ = _get_profile(service, region, None, None, profile) return region
return False
if 'X-Edx-Api-Key' in self.headers: response = self.server._response_str logger.debug("Comment Service: sending response %s", json.dumps(response))
import logging
resp = self.client.get_html(get_url('course_handler', course_key, 'course_key_string')) return resp
for line in response: splt = line.split(':', 1) splt[0] = splt[0].strip() splt[1] = splt[1].strip()
raise Exception( "invalid combinate of [%s] on appending data [%s] vs " "current table [%s]" % (c, sv, ov))
X, y = make_classification(n_samples=20, n_classes=2, random_state=0)
upper_name = name.upper()
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
current_log_likelihood = None self.converged_ = False
self.literal = float(var)
initial_file = os.path.join(migration_dir, "0001_initial.py") self.assertTrue(os.path.exists(initial_file))
self.comp_func = lambda obj: ( obj.tag, obj.content_type.model_class(), obj.object_id )
y = y[:m]
from __future__ import unicode_literals
running = (volinfo[target]['status'] == '1')
self.contentstore = MongoContentStore(HOST, DB, port=PORT)
import integration import salt.utils
if self.default and CourseCompleteImageConfiguration.objects.filter(default=True).exclude(id=self.id): raise ValidationError(_(u"There can be only one default image."))
real_answers = problem.get_question_answers()
user.masquerade_settings = { self.course_key: CourseMasquerade(self.course_key, role=role) }
store = self._verify_modulestore_support(xblock.location.course_key, 'update_item') return store.update_item(xblock, user_id, allow_not_found, **kwargs)
add_problem_to_course(world.scenario_dict['COURSE'].number, problem_type, problem_settings)
rows_broadcastable = False cols_broadcastable = False
kf = KFold(3) kf2 = KFold(3, shuffle=True, random_state=0) kf3 = KFold(3, shuffle=True, random_state=1)
df = DataFrame({1: [1., 2., 3.], 2: [3, 4, 5]}) self.assertTrue(df._is_mixed_type)
if isinstance(account_ou, str): account_ou = account_ou.split('\\') account_ou = ''.join(account_ou)
return ( 'split_test' in ADVANCED_COMPONENT_TYPES and 'split_test' in course.advanced_modules )
from __future__ import absolute_import
self.assertNumQueries(2, f.delete)
import salt.utils from salt.exceptions import CommandExecutionError, CommandNotFoundError
values = to_timedelta(values, errors='coerce', box=False)
import salt.ext.six as six
natural_key.dependencies = ["fixtures_regress.M2MComplexCircular2A"]
pass
self.assert_social_auth_does_not_exist_for_user(created_user, strategy)
state_label = _(u"State/Province/Region")
stream = LazyStream(ChunkIter(self._input_data, self._chunk_size))
course = get_course_and_check_access(course_key, user)
self.assertRaises(KeyError, store.select_column, 'df', 'foo')
grid = GridSearchCV(clf, refit=False, param_grid=param_grid, cv=ShuffleSplit(train_size=train_size, n_iter=250, random_state=1)) grid.fit(X, y) scores = [x[1] for x in grid.grid_scores_]
cookies[settings.SESSION_COOKIE_NAME] = unicode(safe_cookie_data)
self.assertEqual(-1, split_test.user_partition_id) self.assertEqual(0, len(split_test.children))
self.assertFalse(args['plan'][0][1]) self.assertIsInstance(args['apps'], migrations.state.StateApps)
return do_ifequal(parser, token, True)
'job_cache': bool,
self.assertEqual(userreport['city'], "None") self.assertEqual(userreport['country'], "")
simultaneous_sort(dist, ind)
MAX_BOOKMARKS_PER_COURSE = 100
self.client.logout()
output = self.engine.render_to_string('inheritance14') self.assertEqual(output, '1&3_')
proc.start()
raise ValueError("Invalid value for test_size: %r" % test_size)
if (self._num_days(self._today()) - ts) > settings.PASSWORD_RESET_TIMEOUT_DAYS: return False
class MessageForm(Form): when = SplitDateTimeField()
if self.mode != mode and mode is not None: self.mode = mode mode_changed = True
__virtualname__ = 'firewall'
if 'matrices_save_path' not in state: state['matrices_save_path'] = None
from __future__ import unicode_literals
if isinstance(o, PeriodIndex):
result_map = {} for key in key_list: index = self._get_index_of(key) val = get_codemirror_value(self, index) result_map[key] = val return result_map
result2 = DataFrame(p.values.astype('float64') % 0, index=p.index, columns=p.columns) assert_frame_equal(result2, expected)
import salt.ext.six as six
return False
xml = self.xml cxml = xml.xpath('//*[@id=$id]//choice', id=xml.get('id'))
cmd = ['softwareupdate', '--set-catalog', url]
has_saltcloud = False
k1 = orig.clone() k2 = k1.transform(trans.srid, clone=True) self.assertEqual(k1, orig) self.assertNotEqual(k1, k2)
take_1d_%(name)s_%(dest)s_memview(values, indexer, out, fill_value=fill_value) return
keys = list(_binary_ops_dict.keys()) raise ValueError('Invalid binary operator {0!r}, valid' ' operators are {1}'.format(op, keys))
visible_layer = BinaryVector(nvis=100) hidden_layer = BinaryVectorMaxPool(detector_layer_dim=500, pool_size=1, layer_name='h', irange=0.05, init_bias=-2.0) model = DBM(visible_layer=visible_layer, hidden_layers=[hidden_layer], batch_size=100, niter=1)
if not len(groups): groups = [0]
raise NotImplementedError("Applications must monkey-patch this function before using local_resource_url for studio_view")
remove_user_from_cohort(cohorts[cohort_index], self.user.username)
Axes3D
def _helper_csv(self, writer, na_rep=None, cols=None, header=True, index=True, index_label=None, float_format=None, date_format=None): if cols is None: cols = self.columns
__virtualname__ = 'django'
request = RequestFactory().request() request.user = user all_tabs = get_course_tab_list(request, self.course) return any(tab.type == 'discussion' for tab in all_tabs)
output = _cmd('at', '-d', ' '.join(opts)) if output is None: return '\'at.atrm\' is not available.'
self.assertFalse(caches['prefix'].has_key('somekey'))
if callback is not None: callback(locals())
no_steps = (upper_limit - self._start) // abs(self._step) return self._start + abs(self._step) * no_steps
obj = super(klass, cls).__new__(cls) obj._constructor_args = (args, kwargs) return obj
module = CapaFactory.create(done=False)
add_trigger(task_definition=task_definition, **kwargs)
if not model._meta.can_migrate(connection_alias): return False return router.allow_migrate_model(connection_alias, model)
self.block.group_access = group_access self.block = self.store.update_item(self.block, ModuleStoreEnum.UserID.test)
return
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
return Fragment(content=u"<div>Nothing here. Move along.</div>")
ts['2001'] = 1 expected = ts['2001'] expected.name = 'A'
from __future__ import absolute_import import os
combined = series.combine_first(series_copy)
for pool_size in [1, 2, 5]: n = num_pools * pool_size
from __future__ import absolute_import
self.course_outline.visit() self.course_outline.open_subsection_settings_dialog(0) self.course_outline.select_access_tab() self.course_outline.make_gating_prerequisite()
self.check_toggle_tab_visiblity('wiki', True) self.check_toggle_tab_visiblity('wiki', False)
authorization_header = ( '{0} Credential={1}/{2}, SignedHeaders={3}, Signature={4}' ).format( algorithm, access_key_id, credential_scope, signed_headers, signature, )
old_STATIC_URL = TEST_SETTINGS['STATIC_URL'] TEST_SETTINGS['STATIC_URL'] = None cls.raises_exception('localhost:8081', ImproperlyConfigured) TEST_SETTINGS['STATIC_URL'] = old_STATIC_URL
cost = SumOfCosts([SumOfOneHalfParamsSquared(), (0., DummyCost())])
'auth_safemode': bool,
template = engine.get_template('other-recursive.html') output = template.render(Context({})) self.assertEqual(output.strip(), 'fs3/recursive fs2/recursive fs/recursive')
time.sleep(1) return info(name).get('gid') == gid
if vmconfig['hostname'] in __salt__['vmadm.list'](order='hostname'): ret['result'] = True
land_reference = data.coverages[6]
return _block2d_to_blocknd(values=self.get_values().T, placement=self.mgr_locs, shape=shape, labels=labels, ref_items=ref_items)
if has_time_rule: win = 25 minp = 10
pipe_results = False if filename == '-': filename = mktemp() pipe_results = True
def test_user_role(): return 'staff'
y = np.ravel(y)
query = self.q(css='.search-team-descriptions') if query.present: query.first.click() self.wait_for_ajax()
assert world.is_css_present('.error_message', wait_time=0)
msg = 'Error occurred while evaluating CustomResponse' log.warning(msg, exc_info=True)
if not hasattr(self.user, '_roles'): self.user._roles = RoleCache(self.user)
pass
self._enable_cohorting() self._create_verified_cohort() self._create_named_random_cohort("Random 1") self._create_named_random_cohort("Random 2") self._enable_verified_track_cohorting()
resp_asset = post_asset_update(False, course) self.assertFalse(resp_asset['locked']) verify_asset_locked_state(False)
node_dict = show_instance(node_data.name, 'action')
self.course_ids = [unicode(e.course_id) for e in enrollments]
class Post(models.Model): primary_lines = models.ManyToManyField(Line, related_name='+') secondary_lines = models.ManyToManyField(Line, related_name='+')
if create_after_overview: self.set_config(enabled=False)
ccx = CustomCourseForEdX.objects.get() course_enrollments = get_override_for_ccx(ccx, self.course, 'max_student_enrollments_allowed') self.assertEqual(course_enrollments, settings.CCX_MAX_STUDENTS_ALLOWED)
results['Total'] += 1
authentication_classes = []
certs_api.set_cert_generation_enabled(self.COURSE_KEY, False) self._assert_enabled_for_course(self.COURSE_KEY, False)
for embedded in (x for x in data if isinstance(x, dict)): try: data = embedded[each] embed_match = True break except KeyError: pass if not embed_match: return default
from __future__ import absolute_import import logging
other_course_key = CourseKey.from_string("edX/other/2015") self._configure_credit(course_key=other_course_key) second_request = api.create_credit_request(other_course_key, self.PROVIDER_ID, self.USER_INFO["username"])
if __name__ == '__main__':
extend(state('.goal').stateconf.require_in(stateconf='yyy::start'))
self.assertTrue(has_expanded_repr(df)) self.assertTrue(has_vertically_truncated_repr(df))
if 'width' not in ds_input or 'height' not in ds_input: raise GDALException('Specify width and height attributes for JSON or dict input.')
info_log.assert_called_with( u"user already exists with username '%s' and email '%s'", 'test_student_1', 'test_student@example.com' )
image_shape = (64, 64)
msg += _('Failed in authenticating {username}, error {error}\n').format( username=euser, error=err ) continue
self.navigate_to_video()
self._original = dict((data, _zero_pad( data.get_topological_view().astype('float32'), self._pad_randomized)) for data in randomize_now)
response = self.client.get(self.url) self.assertNotIn(self.email_modal_link, response.content)
for certificate in certificates: certificate['is_active'] = is_active break
rabbitmq_cluster.__salt__ = {} rabbitmq_cluster.__opts__ = {}
client.set( '/'.join((path, 'minions', ret['id'])), ret['jid'], ttl=ttl, )
if dtype is None: dtype = theano.config.floatX return theano.shared(theano._asarray(value, dtype=dtype), name=name, borrow=borrow)
#log_level: debug
if not channel.startswith('#'): channel = '#{0}'.format(channel)
expected_response = { "enabled": False } self._verify_cohort_settings_response(expected_response)
self.assertTrue(user(email).is_active)
results = [] for option in self.all_options: button = option.find_element_by_css_selector('input.input') if button.is_selected(): results.append(option) return results
def get_queryset(self, request): qs = super(UserLimitedAdmin, self).get_queryset(request) return qs.filter(is_superuser=False)
self.assertTrue( self.run_function('softwareupdate.schedule_enable', [True])) self.assertTrue(self.run_function('softwareupdate.schedule_enabled'))
for offset in offsets: self.assertRaises(TypeError, lambda: rng * offset)
input_dict = {'1_2_1': '-1', '1_2_2': '2', '1_2_3': '3'} correct_map = problem.grade_answers(input_dict)
num_braces = 0
if cursor.query is not None: return cursor.query.decode('utf-8') return None
with open(self.TEST_INDEX_FILENAME, "w+") as index_file: json.dump({}, index_file)
if not is_list_like(new_values) or self.ndim == 1: return _maybe_box_datetimelike(new_values)
def __init__(self, *args, **kwargs): super(OrgInstructorRole, self).__init__('instructor', *args, **kwargs)
@property def _can_hold_na(self): return self._data._can_hold_na
log = logging.getLogger(__name__)
for tag in open_tags: out += '</%s>' % tag return out
_update_social_context(request, context, course, user, user_certificate, platform_name)
import salt.ext.six as six
self.xblock.save()
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM 21/12/2010')
if self.request_cache is None: return None return self.request_cache.data.setdefault('course_cache', {}).get(course_version_guid)
apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
category_name = "problem" return world.ItemFactory.create( parent_location=section_location(course), category=category_name, display_name=str(problem_type), data=problem_xml, metadata=metadata )
X0 = np.array([[10000, 9999, 9998], [1, 1, 1]]) y = [0, 1]
BROKER_HEARTBEAT = 10.0 BROKER_HEARTBEAT_CHECKRATE = 2
self.file_mapping[f_noext] = (fpath, ext)
super(CourseRerunTest, self).setUp(is_staff=True) self.dashboard_page = DashboardPage(self.browser)
self.assertTrue( 'ERROR' not in self.run_function( 'git.add', [self.repo, filename] ) )
html_use_index = False
entered_passwords = ["password", "not password", "password2", "password2"]
for blkno, indexer in lib.get_blkno_indexers(blknos, group): yield blkno, BlockPlacement(indexer)
store.select('df2', typ='legacy_frame')
return min(self.cleaned_data.get("page_size") or 10, 100)
config.save() self.assertEqual(config.mode, 'edit') self.assertEqual(message, config.validation_message)
fig, (ax1, ax2) = plt.subplots(1, 2) fig.set_size_inches(18, 7)
course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
skip_if_no_sklearn() mapping = {'dataset_iterator': 'DatasetValidationShuffleSplit'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
if array.size > 0: mode = stats.mode(array) most_frequent_value = mode[0][0] most_frequent_count = mode[1][0] else: most_frequent_value = 0 most_frequent_count = 0
S = -euclidean_distances(X, squared=True) preference = np.median(S) * 10 cluster_centers_indices, labels = affinity_propagation( S, preference=preference)
store = self._get_modulestore_for_courselike(asset_key.course_key) return store.find_asset_metadata(asset_key, **kwargs)
from __future__ import absolute_import import os import shutil
obj_pk = model._meta.pk.to_python(n.getAttribute('pk'))
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
raise SaltClientError( 'The salt master could not be contacted. Is master running?' )
return self.get_text('.message-status.error')
mock_ip.return_value = 'IR'
return self(kind='area', **kwds)
from __future__ import absolute_import
resp = self.client.get('/') self.assertEquals(resp['X-Frame-Options'], 'DENY')
return render_to_response(*args, **kwargs)
target_srs = SpatialReference(srid)
if type(field_type) is tuple: field_type, new_params = field_type field_params.update(new_params)
store = self._verify_modulestore_support(location.course_key, 'delete_item') return store.delete_item(location, user_id=user_id, **kwargs)
config = settings.CC_PROCESSOR.get( settings.CC_PROCESSOR_NAME, {} )
with mock_order_endpoint(order_number=self.ORDER_NUMBER, exception=exceptions.HttpNotFoundError): response = self.client.get(self.path) self.assertEqual(response.status_code, 404)
url(r'^edit/artists/create/$', views.ArtistCreate.as_view()), url(r'^edit/artists/(?P<pk>[0-9]+)/update/$', views.ArtistUpdate.as_view()),
self.store.delete_item(self.problem_x1a_1, self.user_id) self.assertTrue(self._has_changes(self.vertical_x1a))
raise NotImplementedError("Package resources do not support URLs")
for block_key_string, serialized_block in serializer.data['blocks'].iteritems(): self.assertEquals(serialized_block['id'], block_key_string) self.assert_basic_block(block_key_string, serialized_block)
cls.objects.create( invoice=invoice, snapshot=json.dumps(invoice.snapshot()) )
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
dst_path = os.path.dirname(os.path.abspath(dst_filename)) dst_temp_filename=os.tempnam(dst_path);
tup = '(' + ', '.join("'%s'" % column_to_field_name[c] for c in columns) + ')' unique_together.append(tup)
import jinja2.exceptions
return service
preferences_api.set_user_preference(user, LANGUAGE_KEY, get_language())
def __init__(self, url): super(Redirect, self).__init__() self.url = url
self.source = DataFrame({'MergedA': data['A'], 'MergedD': data['D']}, index=data['C'])
if hasattr(modulestore, '_drop_database'):
self.assertEqual(mail.outbox[-1].to[0], 'finance@example.com')
from salt.log import setup_console_logger from salt.serializers import DeserializationError, SerializationError
from salt.modules import environ import os
self.assertTrue(idx[0:4].equals(result.insert(0, idx[0])))
ax = df.plot.hexbin(x='A', y='B') self.assertEqual(ax.collections[0].cmap.name, 'BuGn')
def check(nlevels, with_nulls): labels = np.tile(np.arange(500), 2) level = np.arange(500)
import_course_from_xml( source_store, 'test_user', TEST_DATA_DIR, source_dirs=['manual-testing-complete'], static_content_store=source_content, target_id=source_course_key, create_if_not_present=True, raise_on_failure=True, )
return cls.objects.filter(microsite_id=microsite_pk).values_list('organization', flat=True)
check_estimator(AdaBoostClassifier) check_estimator(MultiTaskElasticNet)
active_reg_button = not(registered or is_course_full or not can_enroll)
return self.q(css='{} input[name=delete-entrance-exam-state]'.format(self.EE_CONTAINER))
validate_badge_image(get_image('good'))
pkgs = [x for x in targets if x not in list_pkgs()] if not pkgs: return {}
self.assertEqual(len(paths[milestone_key]), 0)
self.wait_for_ajax() return self.q(css='#u-field-message-account_privacy').visible
need_space = (prev_end, start != prev_end)
tail['A'][:10] = 0 combined = tail.combine_first(head) self.assertTrue((combined['A'][:10] == 0).all())
import integration
self.course_outline.change_problem_release_date()
data['check-1-DELETE'] = '' formset = CheckFormSet(data, prefix='check') self.assertFalse(formset.is_valid())
raise ItemNotFoundError(usage_key)
self.set_team_configuration({u"max_team_size": 10, u"topics": []}) self.verify_teams_present(False)
retval = self.service.remove_credit_requirement_status( 0, self.course.id, 'grade', 'grade' ) self.assertIsNone(retval)
DonationConfiguration(enabled=True).save()
self.assertFalse(u.has_usable_password())
with patch('student.views.get_credit_provider_display_names') as mock_method: mock_method.return_value = providers_list response = self._load_dashboard()
import salt.utils.cloud import salt.config as config
attempt2 = SoftwareSecurePhotoVerification(user=user) attempt2.status = 'denied' attempt2.error_msg = '[{"photoIdReasons": ["Not provided"]}]' attempt2.save()
return Series(self._p_value_raw, index=self.beta.index)
LINEAR_CHILDREN_MAP = [[1], [2], [3], []]
convergence_context = {}
Client:
tag = gettag(xml)
self.video.show_captions()
if values and "" in values: raise ValidationError("This field cannot be empty.")
time_isoformat.split('+')[0], "%Y-%m-%dT%H:%M:%S.%f"
subscription['endpoint'] = _endpoint
'ENABLE_FEEDBACK_SUBMISSION': False,
return attrs
new_user_partition = UserPartition(
result = sparse.loc[sparse.x % 2 == 1] exp = orig.loc[orig.x % 2 == 1].to_sparse() tm.assert_sp_frame_equal(result, exp)
dis_flat_w = dis_flat[sim_flat != 0]
rows_broadcastable = False cols_broadcastable = False
exception_type = _mk_exception(exception.etype)[0] exception = exception_type(report)
from salt import minion from salt.utils import event from salt.exceptions import SaltSystemExit import salt.syspaths
self.outline.visit() subsection = self.outline.section(section_name).subsection(subsection_name) return subsection.expand_subsection().unit(unit_name).go_to()
frame = self.frame.copy() frame2 = self.frame.copy()
warnings.warn("Do you really want to regularize the detector units to be more active than the pooling units?")
self.assertEqual(csv.replace('\r\n', '\n').strip(), self.CORRECT_REFUND_REPORT_CSV.strip())
_policy = _policy.get_role_policy_response.policy_document _policy = _unquote(_policy) _policy = json.loads(_policy, object_pairs_hook=odict.OrderedDict) return _policy
response = self.client.get('/simple/') self.assertEqual(response.content, b'Yes')
if nentries == 1: index = Index(tuples[0], name=names[0]) else: index = MultiIndex.from_tuples(tuples, names=names) return index
self.q( css='#paging-header-select option[value={sort_order}]'.format(sort_order=sort_order) ).click() self.wait_for_ajax()
if e.args[0] in self.codes_for_integrityerror: six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2]) raise
is_a_tty = hasattr(sys.stdout, 'isatty') and sys.stdout.isatty() if not supported_platform or not is_a_tty: return False return True
return np.empty(0, dtype=np.int_)
X2 = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]
reconstruction_error = np.linalg.norm(K - K_iso) / Npts assert_almost_equal(reconstruction_error, clf.reconstruction_error())
question_element = rendered_html.find("p") self.assertEqual(question_element.text, "Test question")
from cPickle import loads from cPickle import dumps
return self._shallow_copy(np.delete(self._data, loc))
from pylearn2.blocks import Block, StackedBlocks from pylearn2.models import Model from pylearn2.utils import sharedX from pylearn2.utils.theano_graph import is_pure_elemwise from pylearn2.utils.rng import make_np_rng, make_theano_rng from pylearn2.space import VectorSpace
y_subsample = y[indices, k] classes_subsample = np.unique(y_subsample)
dt = as_timestamp(dt) if not self.onOffset(dt): dt = dt + self.__class__(1, normalize=self.normalize, **self.kwds) return dt
s1 = self.backend() s1['test_data'] = 'value1' s1.save(must_create=True)
return block_structure.get_transformer_block_field( block_key, cls, cls.MERGED_START_DATE, False )
for item in labels: setter(item, value)
return u"grades.MaxScores.{}___{}".format(self.cache_prefix, unicode(location))
CONTEXT_EXTRA_FIELDS = 'context_extra_fields'
return getattr(cls.Meta, 'read_only_fields', '') + getattr(cls.Meta, 'explicit_read_only_fields', '')
from salttesting import skipIf, TestCase from salttesting.mock import ( MagicMock, NO_MOCK, NO_MOCK_REASON, patch)
call_command('post_cohort_membership_fix')
return '{path}?username={username}&course_key={course_key}'.format( path=reverse(self.view_name), username=eligibility.username, course_key=eligibility.course.course_key )
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import patch, NO_MOCK, NO_MOCK_REASON, mock_open
assert_true(world.css_has_value(css, date_or_time))
EMPTY_VALUES = (None, '', [], (), {})
imported_objects = {}
))
from sklearn import datasets datasets.mldata.urlopen = mock_mldata_urlopen(mock_datasets)
return salt.utils.is_proxy() and 'proxy' in __opts__
import os import os.path import time import logging
with self.assertRaises(Error):
self.assertEqual(len(mail.outbox), 1) self.assertEqual(mail.outbox[0].subject, 'Greetings from a function action')
time.sleep(2 + randint(1, 10)) rlogger = logging.getLogger() for handler in rlogger.handlers: rlogger.removeHandler(handler) logging.basicConfig()
for block_key in self.post_order_traversal(): if block_key in old_block_relations: self._add_block(pruned_block_relations, block_key)
with self.assertRaises(FieldError): Book.objects.annotate(mean_age=Avg('authors__age')).annotate(Avg('mean_age'))
regr_1 = DecisionTreeRegressor(max_depth=2) regr_2 = DecisionTreeRegressor(max_depth=5) regr_1.fit(X, y) regr_2.fit(X, y)
self.processes = 0
product = partial(reduce, operator.mul) return sum(product(len(v) for v in p.values()) if p else 1 for p in self.param_grid)
upload_csv_to_report_store(rows, 'enrollment_report', course_id, start_date, config_name='FINANCIAL_REPORTS')
text = f.widget.format_value(result) self.assertEqual(text, '01:30:05 PM')
tuple_index = long_index._tuple_index
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(len(courses_list_by_groups), 1)
values = self._data.iget(i)
assert_raise_message(ValueError, msg, check_X_y, X, y, ensure_min_features=3, allow_nd=True)
self.course.start = _LAST_WEEK self.assertTrue(self.course.has_started()) self.course.start = _NEXT_WEEK self.assertFalse(self.course.has_started())
assert_raises(ValueError, clf.predict, X2[:, :-1])
MyUserForm({})
from __future__ import absolute_import
import salt.utils from salt.modules import puppet from salt.exceptions import CommandExecutionError
is_microsite.return_value = True is_enabled = EcommerceService().is_enabled(self.user) self.assertTrue(is_enabled)
STATICFILES_FINDERS = [ 'django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder', ]
if answer_script: answer_element = etree.SubElement(response_element, "answer") answer_element.set("type", "loncapa/python") answer_element.text = str(answer_script)
X_inf = np.arange(4).reshape(2, 2).astype(np.float) X_inf[0, 0] = np.inf assert_raises(ValueError, check_array, X_inf)
'description',
return tslib.get_timezone(self.tzinfo)
course_enrollment = CourseEnrollment.get_enrollment(user, course_key) enrollment_date = course_enrollment.created if course_enrollment else ""
return ret
response = searcher.search( doc_type=CoursewareSearchIndexer.DOCUMENT_TYPE, field_dictionary={"course": unicode(self.course.id)} ) self.assertEqual(response["total"], 3)
msg = "get_offset_name(offset) is deprecated. Use offset.freqstr instead" warnings.warn(msg, FutureWarning, stacklevel=2) return offset.freqstr
cv = list(super(StratifiedValidationKFold, self).__iter__()) for train, valid, test in get_k_fold_splits(cv): yield train, valid, test
style.ERROR_OUTPUT = style.ERROR
return self.teams_configuration.get('max_team_size', None)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, mock_open, patch)
with patch('capa.capa_problem.LoncapaProblem.get_html') as mock_html: mock_html.return_value = "<div>Test Problem HTML</div>"
self.first_checkpoint.add_verification_attempt(SoftwareSecurePhotoVerification.objects.create(user=self.user))
testing_mode = os.environ.get('PANDAS_TESTING_MODE', 'None') if 'deprecate' in testing_mode:
data = fetch_olivetti_faces() targets = data.target
students_to_gradesets = {} students_to_errors = {} for student, gradeset, err_msg in iterate_grades_for(course_id, students): students_to_gradesets[student] = gradeset if err_msg: students_to_errors[student] = err_msg return students_to_gradesets, students_to_errors
AutoAuthPage( self.browser, username="testcert", email="cert@example.com", password="testuser", course_id=self.course_id ).visit()
courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), 1)
delegate = self.Delegate(self.Delegator()) sys.getsizeof(delegate)
#)
return datetime.datetime.now(pytz.UTC) + datetime.timedelta( days=getattr(settings, "CREDIT_ELIGIBILITY_EXPIRATION_DAYS", 365) )
friends = models.ManyToManyField( 'self', symmetrical=True, through="Relationship", through_fields=('first', 'second'), )
if k in ['boolIndex', 'tuples', 'empty']: continue
y_pred = KMeans(n_clusters=2, random_state=random_state).fit_predict(X)
if len(all_assets) > 0: self.store.save_asset_metadata_list(all_assets, all_assets[0].edited_by, import_only=True)
is_x_old_in_X = int(mask.sum() < X.shape[0])
still_in_grace = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="0", due=self.yesterday_str, graceperiod=self.two_day_delta_str) self.assertFalse(still_in_grace.answer_available())
for course_dir in source_dirs: _err_cnt, _warn_cnt = validate_data_source_paths(path(data_dir), course_dir) err_cnt += _err_cnt warn_cnt += _warn_cnt
self.assertEqual( terminal.getwinsize(), (24, cols) ) terminal.wait() terminal.close()
raise AbstractMethodError(self)
model_channels = model.get_monitoring_channels(nested_ipt[-1]) channels = {} for name in model_channels: channels[name] = (model_channels[name], nested_ipt[-1], (spaces[-1], sources[-1])) custom_channels.update(channels)
from salt.log import setup as saltlog from salt.log.handlers import StreamHandler
expected[:] = np.nan assert_equal(corr_x_x, expected)
tm._skip_if_no_pytz()
remove_entrance_exam_graders(course_key, request.user)
return self.MODE_TO_CERT_NAME.get( cert_mode, _(u"{platform_name} Certificate for {course_name}") ).format( platform_name=microsite.get_value('platform_name', settings.PLATFORM_NAME), course_name=course_name )
clf = NearestCentroid() clf.fit(X_csr, y) assert_array_equal(clf.predict(T_csr), true_result)
homework_grader = graders.AssignmentFormatGrader("Homework", 12, 2) homework_grader2 = graders.grader_from_conf(homework_grader)
return 'RANDOM()'
from __future__ import absolute_import import os import re
from salt.states import nftables
self.options.log_file = self._default_logging_logfile_
self.run_commit_hooks_on_set_autocommit_on = False
parent = np.arange(n_nodes, dtype=np.intp) used_node = np.ones(n_nodes, dtype=bool) children = [] if return_distance: distances = np.empty(n_nodes - n_samples)
comments.append( 'Container \'{0}\' is already configured as specified' .format(name) )
_moved_attributes = []
config_course_cohorts(course, is_cohorted=True)
shutil.rmtree(self._output_dir, ignore_errors=True)
import logging log = logging.getLogger(__name__)
self.previous_version = self.update_version = self.definition_locator = None self.xmodule_runtime = None
ret['changes'] = { 'old': current_state, 'new': new_state, }
idx = 0 start_idx = end_idx for rd in rings: start_idx = downsample_ring(img, idx, rd, output, start_idx) idx += rd
world.scenario_dict['COURSE'] = world.CourseFactory.create( org='edx', number=course, display_name='Test Course', metadata=metadata, grading_policy=grading_policy, )
result = str(s2.index) self.assertTrue('NaT' in result)
icrv_status_emails = IcrvStatusEmailsConfiguration.current() if icrv_status_emails.enabled and checkpoints: user_id = attempt.user.id course_key = checkpoints[0].course_id related_assessment_location = checkpoints[0].checkpoint_location
return (key.block_scope_id, key.field_name)
from __future__ import unicode_literals
for a in self.axes: a.set_info(self.info) a.convert(values, nan_rep=self.nan_rep, encoding=self.encoding)
from __future__ import unicode_literals
if spatialite: qs = qs.exclude(name='Texas') else: qs = qs.intersection(geom)
pairs, target, target_names = load_func( index_file_path, data_folder_path, resize=resize, color=color, slice_=slice_)
return microsite.get_value('platform_name', settings.PLATFORM_NAME)
data = { "email": self.EMAIL, "name": self.NAME, "username": self.USERNAME, "password": self.PASSWORD, }
if start_type == 2: win32service.ChangeServiceConfig2( handle_svc, win32service.SERVICE_CONFIG_DELAYED_AUTO_START_INFO, start_delayed)
if not isinstance(config, dict): return False, ('Configuration for service beacon must be a dictionary.') return True, 'Valid beacon configuration'
index_1 = [1, 2, 3, 4] index_2 = [5, 6, 7, 8] s1 = Series(1, index=index_1) s2 = Series(2, index=index_2)
return None
time.sleep(0.5) return event_ret
if y is None: return self.fit(X, **fit_params).transform(X) else: return self.fit(X, y, **fit_params).transform(X)
self.track_selection_page.visit()
attrs.append(node.id) self.accessed_names.add('.'.join(reversed(attrs)))
handler = cherrypy.request.ws_handler
if __grains__['os_family'] == 'RedHat': output = _cmd('at', '-l') else: output = _cmd('atq')
params = params.copy() backend = params.pop('BACKEND') engine_cls = import_string(backend) engine = engine_cls(params)
filters = {'course_id': course_key, 'user': request.user} if uri != '': filters['uri'] = uri
outliers = abs_linear_loss[outliers_mask] num_outliers = np.count_nonzero(outliers_mask) n_non_outliers = X.shape[0] - num_outliers
gid_list = _list_gids() if str(gid) in gid_list: raise CommandExecutionError( 'gid \'{0}\' already exists'.format(gid) )
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book])
import collections
html_domain_indices = False
rel = models.Inventory._meta.get_field('parent').remote_field w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)
if entrance_exam_url: problems = get_problems_in_section(entrance_exam_url) usage_keys = [UsageKey.from_string(location) for location in problems.keys()]
vix = DataReader("VIXCLS", "fred")
enc.fit([[0], [1]]) assert_raises(ValueError, enc.transform, [[0], [-1]])
self.validate(batch)
output_base = output_base.replace('.', '-')
from salt.states import lvm
self.annealed = sharedX(base_lr, 'annealed')
assert_raises(Exception, getattr(delegator, method), delegator_data.fit_args[0])
try: validate_email(identifier) except ValidationError: return False return True
return any(is_marketing_link_set(name) for name in names)
L = np.zeros((max_features, max_features), dtype=X.dtype)
self.page.create_experiment_group_configuration()
self._setup_mp_logging_listener()
glusterfs.__salt__ = {}
raise NotImplementedError(str(self.__class__) + " does not implement " "_get_default_output_layer")
if obj.ndim > 1: dtype = obj.values.dtype else: dtype = obj.dtype if not lib.isscalar(result): result = _possibly_downcast_to_dtype(result, dtype) return result
diff[key] = changes_needed[key]
px = self.lonlat_to_pixel(lonlat, zoom)
if not isinstance(err, ImportError): log.error('Import pygit2 failed: {0}'.format(err))
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
return capi.geos_overlaps(self.ptr, other.ptr)
if ADD_PKG in pkg_list: self.run_function('pkg.remove', [ADD_PKG]) if DEL_PKG in pkg_list: self.run_function('pkg.remove', [DEL_PKG])
clf = pickle.loads(pickle.dumps(clf)) assert_true(sp.issparse(clf.coef_)) pred = clf.predict(X) assert_array_equal(pred, Y)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return list(list_display)[:1]
rs = read_csv(filename, compression="bz2", index_col=0) assert_frame_equal(df, rs)
from salt.runners.winrepo import ( genrepo as _genrepo, update_git_repos as _update_git_repos, PER_REMOTE_OVERRIDES ) from salt.ext import six try: import msgpack except ImportError:
from salt.modules import win_path
mi1.set_levels(levels2, inplace=True) assert_almost_equal(mi1.values, vals2)
return __MP_LOGGING_QUEUE
self.addCleanup(YouTubeStubConfig.reset)
mode = 1 M_matvec = None Minv_matvec = None if Minv is not None: raise ValueError("Minv should not be " "specified with M = None.")
return super(NullBackend, self).has_override_value(val_name)
('arg', [1234]), ('kwarg', {'ext_source': 'redis'}),
pipeline = Pipeline([ ('vect', TfidfVectorizer(min_df=3, max_df=0.95)), ('clf', LinearSVC(C=1000)), ])
n_features = X.shape[1] if self.n_features_to_select is None: n_features_to_select = n_features // 2 else: n_features_to_select = self.n_features_to_select
cart = Order.get_cart_for_user(user=student) CertificateItem.add_to_order(cart, course_id, 50, 'verified') cart.purchase()
return iter(self.get_values())
self.selenium.switch_to.window(main_window) self.wait_for_value('#id_supporting_bands', '42,98')
required_boto3_version = '1.2.1'
self.skipTest('\'timelib\' is not installed')
return self.status_message == 'Contains staff only content' if self.has_status_message else False
for fg in (fg1, fg2): with self.assertRaises(GEOSException): fg._get_ptr()
from pandas.core.window import RollingGroupby return RollingGroupby(self, *args, **kwargs)
list(n_list) self.assertEqual(ExtraInfo.objects.filter(note__in=n_list)[0].info, 'good')
if user is None: user = self.honor_user request = Request(self.request_factory.get('/')) request.user = user return request
role = MockRoles() role.user_id = user role.tenant_id = tenant return [role]
_write_metric(metrics_str, metrics_report) sh("cat {metrics_report}".format(metrics_report=metrics_report), ignore_error=True)
self.assertEqual(views.get_cosmetic_display_price(self.course, registration_price), "$10")
model = self.model
StudentModuleHistoryExtended.objects.filter(student_module=instance).all().delete()
geohash = False geojson = False gml = False kml = False svg = False
from __future__ import absolute_import import logging
img = imread(file_path) if img.ndim is 0: raise RuntimeError("Failed to read the image file %s, " "Please make sure that libjpeg is installed" % file_path)
braces = '}' * num_braces rval = basic_setup + \ setup_nv_images + \ setup_nv_filters + \ setup_nv_targets + \ do_convolution + \ braces rval = rval % locals() return rval
result = self.enroll(self.course) self.assertFalse(result)
monthsSince = monthsSince - 3
if isinstance(val, string_types): if val.lower() == 'true': val = True elif val.lower() == 'false': val = False ret[key] = val
train_obj = pylearn2.config.yaml_parse.load(final_yaml_str)
check(4, False) check(4, True)
pass
df = DataFrame([[True]]) self.assertTrue(df.bool())
import salt.utils
#modindex_common_prefix = []
self.assertEqual(self.server.config, {})
course_data_path = path(self.data_dir) / source_courselike.data_dir
access_role(library2_key).add_users(self.non_staff_user)
from salt.modules import composer from salt.exceptions import CommandExecutionError, CommandNotFoundError, SaltInvocationError
remove_all_instructors(action_state.course_key)
try: self.assertIn(ret_str, delete) except AssertionError: raise
set_limits = False if prev_soft < min_soft: soft = min_soft set_limits = True else: soft = prev_soft
#except:
from __future__ import absolute_import import unittest import logging
available_version = salt.utils.alias_function(latest_version, 'available_version')
return self.values.itemsize
from __future__ import absolute_import
def no_oracle(func): return no_backend(func, 'oracle')
if axis == 0: values = self._data.iget(i) return self._box_item_values(key, values)
try: connection.commit() except DatabaseError: try: connection.rollback() except Error: connection.close() raise
__remove_null_logging_handler()
if self._course_id is not None: url += "?{params}".format( params=urlencode({ "course_id": self._course_id, "enrollment_action": "enroll" }) )
called_save = [] called_write_cells = []
self.user = User.objects.create_user(uname, email, self.user_password)
result = self.panel.truncate(before=None, after=None, axis='items')
DATE_INPUT_FORMATS = [
self.course_outline_page.visit() self.assertEquals(self.course_outline_page.expand_collapse_link_state, ExpandCollapseLinkState.MISSING)
return self.retrieve(request, *args, **kwargs)
mean = X.mean(axis=0) mean_matrix = csr_matrix(mean.repeat(n).reshape((d, n))).T X = X - mean_matrix
def __init__( self, parseElementList ): self.parseElementTrace = parseElementList def __str__( self ): return "RecursiveGrammarException: %s" % self.parseElementTrace
response = self.client.get(self.url, params)
MEDIA_ROOT = '/edx/var/edxapp/media/' MEDIA_URL = '/media/'
current_len += 1 if current_len == truncate_len: end_text_pos = pos continue
clf_isotonic = CalibratedClassifierCV(clf, cv=2, method='isotonic') clf_isotonic.fit(X_train, y_train, sw_train) prob_pos_isotonic = clf_isotonic.predict_proba(X_test)[:, 1]
self.check_anonymous_request_rejected('post') self.assertFalse(mock_log.info.called)
return ContainerPage(self.browser, self.locator).visit()
result = s1.astype("timedelta64[{0}]".format(unit)) assert_series_equal(result, expected)
if retcodes.count(0) < len(retcodes): sys.stderr.write('ERROR: Minions returned with non-zero exit code\n') sys.exit(11)
df2.columns = ['key1', 'foo', 'foo'] self.assertRaises(ValueError, merge, df, df2)
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath ) ensure_in_syspath('../../')
raise CertificateError( "too many wildcards in certificate DNS name: " + repr(dn))
response = self.post_with_bearer_token('/oauth2-test/') self.assertEqual(response.status_code, status.HTTP_200_OK)
raise NotImplementedError("Specific Modulestores must provide implementations of create_usage")
import salt.ext.six as six
try: import certifi HAS_CERTIFI = True except ImportError: HAS_CERTIFI = False
for key in layer2.aes.keys(): if layer2.aes[key] is None: layer2.aes[key] = layer1.aes[key]
a.update({'a': 1}) self.assertNotEqual(a, b)
self.publish(block_list_parents_to_publish)
initializable_fields = updatable_fields + ['thread_type', 'context']
if save_definition: return _save_task_definition(name=name, task_folder=task_folder, task_definition=task_definition, user_name=user_name, password=password, logon_type=task_definition.Principal.LogonType)
from salt.ext import six
updates.update(dict(safe_zip(params, [param - learning_rate * lr_scalers.get(param, 1.) * grads[param] for param in params])))
copy_or_rename_transcript(video_name, sub_attr, item, user=request.user)
module = CapaFactory.create(max_attempts="2", attempts="1") self.assertFalse(module.closed())
if self._is_rendered: callback(self) else: self._post_render_callbacks.append(callback)
assert self.conv2d.get_params() == [self.filters]
AFFILIATE_COOKIE_NAME = ENV_TOKENS.get('AFFILIATE_COOKIE_NAME', AFFILIATE_COOKIE_NAME)
different_index = -index different = df2.set_index(different_index) self.assertFalse(df1.equals(different))
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, with_system_user_and_group )
self.assertNumContains(sql, 'tbl_tbsp', 3)
listener_state = 'cmd_|-listener_test_listening_change_state_|-echo "Listening State"_|-mod_watch' self.assertIn(listener_state, state_run)
GRADES_DOWNLOAD_ROUTING_KEY = HIGH_MEM_QUEUE
from salttesting.unit import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
scalar = Series(0.5) self.assertNotIsInstance(scalar, float)
if job.startswith('__') and not show_all: del schedule[job] continue
return self.store.get_modulestore_type(self.course.id) == ModuleStoreEnum.Type.mongo
minion_timeouts = {}
youtube_str = '1.00:p2Q6BrNhdh8' youtube_str_hack = '1.0:p2Q6BrNhdh8' self.assertEqual( VideoDescriptor._parse_youtube(youtube_str), VideoDescriptor._parse_youtube(youtube_str_hack) )
pass
self.assertTrue(self.video.is_aligned(False))
new_ct = srs_output(std_call('OCTNewCoordinateTransformation'), [c_void_p, c_void_p]) destroy_ct = void_output(std_call('OCTDestroyCoordinateTransformation'), [c_void_p], errcheck=False)
error_msg = models.TextField(blank=True)
return unicode(repr(self))
if not isnull(y): y = bool(y) result = lib.scalar_binop(x, y, op)
series = pd.Series(range(3), index=pd.period_range( start='2000', periods=3, freq='M')) expected = series
return [ destination_course.make_usage_key(*k) for k in dest_structure['blocks'][block_key].fields['children'] ]
indices, indptr, spmat_shape, sptype, outshp = \ convolution_indices.conv_eval(imgshp, maxpoolshp, maxpoolshp, mode='valid')
pass
if "Generated by Cython" not in first_line.decode('utf-8'): hash.update(first_line) hash.update(f.read()) return hash.hexdigest()
self.assertFalse(self.signal_fired) self.assertTrue(skip_refund) self.signal_fired = True
for module in module_store.modules[course_id].itervalues(): if module.location.category == parent_category: parents.append(module)
raise NotImplementedError
from __future__ import unicode_literals
return getattr(obj, methodname)(*args, **kwargs)
from __future__ import absolute_import
if make_new: self.filters = tables.Filters(complib='blosc', complevel=5) self.make_data(which_set, path)
if len(tup) > self.ndim: result = self._handle_lowerdim_multi_index_axis0(tup) if result is not None: return result
func_name = inspect.stack()[1][3] names = next(six.itervalues(yaml.load(getattr(self, func_name).__doc__)))
if node_ids: if labels: node_string += 'node ' node_string += characters[0] + str(node_id) + characters[4]
idx = pd.IndexSlice
pass
answer_map = dict() for response in self.responders.keys(): results = self.responder_answers[response] answer_map.update(results)
org_list = list(set(org_list) | set(course.org for course in courses))
import salt.ext.six as six from salt.exceptions import SaltSystemExit
from contextlib import contextmanager import sys import json import logging
self.wait_for_field(field_id) query = self.q(css='.u-field-{} .u-field-title'.format(field_id)) return query.text[0] if query.present else None
if hasattr(self, 'scale_'): del self.scale_ del self.n_samples_seen_ del self.max_abs_
if d_yard in self.lane_stack.value.nameRemotes: self.lane_stack.value.transmit(msg, self.lane_stack.value.nameRemotes[d_yard].uid) return return
filemod.replace(self.tfile.name, r'Etiam', 'Salticus', flags=['MULTILINE', 'ignorecase'])
w = widgets.RelatedFieldWidgetWrapper(w, rel, widget_admin_site) self.assertFalse(w.can_add_related)
self.setup_inference_procedure() return self.inference_procedure.mf(*args, **kwargs)
return random.randint(1, 100000000)
__func_alias__ = { 'list_vms': 'list' }
logging_config_func = import_string(logging_config)
import salt.config import salt.defaults.exitcodes import salt.output import salt.utils from salt.utils import parsers from salt.utils.verify import check_user, verify_env, verify_files, verify_log
proxyperson = models.ForeignKey(ProxyPerson, models.CASCADE, related_name='relating_proxyperson') proxyperson_hidden = models.ForeignKey(ProxyPerson, models.CASCADE, related_name='relating_proxyperson_hidden+')
lib_key = LibraryLocator(org=org, library=library) if lib_key in self.mappings: raise DuplicateCourseError(lib_key, lib_key)
from __future__ import absolute_import
_config_filename_ = 'master'
from __future__ import absolute_import
self.assertFalse(has_expanded_repr(df10)) self.assertTrue(has_vertically_truncated_repr(df10))
result = sparse.loc[sparse % 2 == 1] exp = orig.loc[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch )
arr = np.array(self.strIndex) index = Index(arr) tm.assert_contains_all(arr, index) tm.assert_index_equal(self.strIndex, index)
return _dismiss_notification(request, action_state_id)
response = self.client.get(reverse(url_name)) self.assertRedirects(response, reverse("dashboard"))
if self.closed() or submitted_without_reset: return False else: return True
'tcp_keepalive_intvl': float,
url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'),
utf8_comment = b("It is true that\n\xc2\xbd\xc2\xb2 = \xc2\xbc") f = BytesIO() assert_raises(UnicodeDecodeError, dump_svmlight_file, X, y, f, comment=utf8_comment)
import salt.utils import salt.utils.url import salt.fileserver from salt.utils.event import tagify
from __future__ import absolute_import import logging import os import os.path import json
X, y = datasets.make_hastie_10_2(n_samples=12000, random_state=1) _, n_features = X.shape
return datetime
return True
assert config.mode == "DEBUG_MODE" config.mode = orig_mode
self.account_settings_page = AccountSettingsPage(self.browser) self.account_settings_page.visit() self.account_settings_page.wait_for_ajax()
if 'root' not in repo_conf: repo_conf['root'] = ''
clf = RandomForestClassifier(n_estimators=25) clf.fit(X_train_valid, y_train_valid) clf_probs = clf.predict_proba(X_test) score = log_loss(y_test, clf_probs)
edit_button = self.q(css='.fa-pencil') edit_button.click()
'ENABLE_VIDEO_BUMPER': False,
import salt.loader import salt.utils.process
response.set_cookie_wrapped_func = response.set_cookie response.set_cookie = _set_cookie_wrapper
signal_handler.send.assert_called_with('course_deleted', course_key=course_key)
if is_verbatim: self.process_input_line('')
if label in self.index: loc = self.index.get_loc(label) return self._get_val_at(loc) else: return default
self.X_min_, self.X_max_ = np.min(X), np.max(X)
CELERYD_PREFETCH_MULTIPLIER = 1
AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=True).visit()
calls = 0 def encode(self, *args, **kwargs): type(self).calls += 1 return super(CountingMD5PasswordHasher, self).encode(*args, **kwargs)
resp = self.create_xblock(parent_usage_key=self.chapter_usage_key, category='sequential') self.seq_usage_key = self.response_usage_key(resp)
return self.func(*args)
self.user = UserFactory(password=self.password, is_staff=True) self.client.login(username=self.user.username, password=self.password)
try: from mpl_toolkits.basemap import Basemap basemap = True except ImportError: basemap = False
leftside = grouped.agg(aggf) rightside = getattr(self.series, op)(level=level, skipna=skipna) assert_series_equal(leftside, rightside)
self._create_courses_and_enrollments( (self.TEST_ORG, True), ("other_org", True) )
import logging import warnings
self._check_underscore_expressions(underscore_template, results) results.prepare_results(underscore_template)
self.check_event_response_by_key('flag_resource', resource, 'reason', '')
FEATURES['ENABLE_MKTG_SITE'] = True FEATURES['USE_MICROSITES'] = True
raw = read_stata(self.dta_encoding) encoded = read_stata(self.dta_encoding, encoding="latin-1") result = encoded.kreis1849[0]
set_user_preference(user, key, value) pref = UserPreference.get_value(user, key) self.assertEqual(pref, value)
verify_name(self.seq_usage_key, self.chapter_usage_key, "Duplicate of sequential")
reverse = self.frame.reindex(columns=self.frame.columns[::-1])
v = v.reindex(index, copy=False)
return self.q(css='h1.page-header')[0].text.split('\n')[-1]
return self.values.size
continue
the_html = problem.get_html() self.assertRegexpMatches(the_html, r"<div>\s+</div>")
merge_cells = False
options_str = ",".join(options)
if optname == 'proto' and valuestr == 'none': valuestr = 'static'
first_checkpoint.add_verification_attempt(SoftwareSecurePhotoVerification.objects.create(user=self.user)) self.assertEqual(first_checkpoint.photo_verification.count(), 2)
class Meta(object): app_label = "courseware" unique_together = (('student', 'field_name'),) student = models.ForeignKey(User, db_index=True)
raise ValueError("The constant target value must be " "present in training data")
check_results_order(ascending=True)
self.base_extauth_bypass_sending_activation_email(True)
def normal_view(request): pass login_required(normal_view)
old = list_pkgs()
n_queries = 5 queries = X[rng.randint(0, n_samples, n_queries)] distances, neighbors = lshf.radius_neighbors(queries, return_distance=True)
self.request.user = self.anonymous_user self.assertFalse(user_has_passed_entrance_exam(self.request, self.course))
orig[minion_tgt] = self._check_state_return( orig[minion_tgt] )
salt.utils.cloud.fire_event( 'event', 'requesting instance', 'salt/cloud/{0}/requesting'.format(vm_['name']), {'kwargs': newnode}, )
[a1, a2, a3, a4], lambda x: x)
raise NotImplementedError
X = [[1], [2]] Y = [1, 2]
lr = LogisticRegression() gnb = GaussianNB() svc = LinearSVC(C=1.0) rfc = RandomForestClassifier(n_estimators=100)
self._auto_publish_no_children(item.location, item.location.category, user_id, **kwargs)
self.client.ajax_post( self.seq1_url, data={'isPrereq': True} ) mock_add_prereq.assert_called_with(self.course.id, self.seq1.location)
tags_found = _git_tag_points_at(cwd, wt_ptr['HEAD'], user) if tags_found: wt_ptr['tags'] = tags_found
return redirect(reverse('cas-login'))
result = f.clean('2010-12-21 13:30:05') self.assertEqual(result, datetime(2010, 12, 21, 13, 30, 5))
with self.settings(PIPELINE_ENABLED=False): js_include = compressed_js('base_application') self.assertIn(u'/static/js/src/logger.js', js_include)
for param in ('path', 'image', 'vgname', 'template'): kwargs.pop(param, None)
kwargs['base_url'] = os.environ.get('DOCKER_HOST')
#latex_preamble = ''
self.assertIn(self.provider.name, response.content)
self.assertQuerysetEqual( Cover.objects.all(), ['<Cover: first>', '<Cover: second>'] )
self.clear_child_cache()
return self._forward_fields_map[field_name]
#source_encoding = 'utf-8'
return self.q(css='.join-team .join-team-message').present
assert_raises(ValueError, _inverse_binarize_thresholding, y=csr_matrix([[1, 2], [2, 1]]), output_type="foo", classes=[1, 2, 3], threshold=0)
from collections import namedtuple import datetime BlockInfo = namedtuple('BlockInfo', 'block_id, category, fields, sub_tree')
self.orig_names = list(self.columns)
if old == '*': return True
result = df.loc[10, :] expected = df.ix[10, :] assert_frame_equal(result, expected)
indices = self.get_indices(i) return tuple(len(i) for i in indices)
self.models_module = None
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
__ = source_store.find_asset_metadata(asset_key)
self.assertNotIn(REG_STR, resp.content)
super(IndexSpace, self)._validate_impl(is_numeric, batch)
def _get_coef(self): return (self.feature_log_prob_[1:] if len(self.classes_) == 2 else self.feature_log_prob_)
self.assertIn("Welcome to edX.", self.video.captions_text)
try: self.path_or_buf.close() except IOError: pass
return self.get_text('.message-status.error')
if 'freq' in kwargs: kwargs['freq'] = None self.values = Index(values, **kwargs)
self.assertEqual(response.status_code, 200)
if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern
self.problem_page.click_choice('choice_choice_1') self.problem_page.click_check() self.problem_page.wait_for_expected_status('label.choicegroup_incorrect', 'incorrect')
self.assertRaises(TypeError, lambda: Timedelta(11, unit='d') // 2)
if isinstance(cherrypy.serving.request.lowstate, list): creds = cherrypy.serving.request.lowstate[0] else: creds = cherrypy.serving.request.lowstate
from __future__ import unicode_literals
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
BOK_CHOY_STUB_DIR = REPO_ROOT / "common" / "djangoapps" / "terrain"
arr = np.array([None], dtype='O') result = lib.infer_dtype(arr) self.assertEqual(result, 'mixed')
available_version = latest_version
self.login_and_enroll(course_id)
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
return self.conditional.sample_from_conditional( conditional_params=theta, num_samples=num_samples )
K_train = np.dot(X_[:180], X_[:180].T) y_train = y_[:180]
os.remove(layer0_filename) os.remove(layer1_filename)
if self.skiprows: new_rows = [row for i, row in enumerate(new_rows) if i + self.pos not in self.skiprows]
self.verify_content_existence(self.store, root_dir, course_id, 'about', 'about', '.html')
start = datetime.now(UTC) first_block = self.add_icrv_xblock(related_assessment_name="Midterm Start Date")
if dtype.kind == result.dtype.kind: if (result.dtype.itemsize <= dtype.itemsize and np.prod(result.shape)): return result
return self.metric in ["rbf"]
with Timer() as iteration_over_courses_time_2: courses_list, __ = _accessible_courses_list(self.request) self.assertEqual(len(courses_list), USER_COURSES_COUNT)
test = __opts__.get('test', False) instance = __salt__['cloud.action'](fun='show_instance', names=names) __opts__['test'] = test return instance
return len(self._info_axis)
from salt.states import hipchat
return self.redirect_field_name
('BACKGROUND', (1, 2), (1, 2), '#EEEEEE'),
if existing['code'] == 200:
eigvals, eigvec = eigsh(XH_X, k=k, tol=tol ** 2, maxiter=maxiter, ncv=ncv, which=which, v0=v0)
return False
return Select(select_browser_query.first.results[0]).options
self.blank_lines += 1 del self.tokens[0]
import logging
the_union = self.index.union(self.index) self.assertIs(the_union, self.index)
try: expiry = kwargs['expiry'] except KeyError: expiry = self.get('_session_expiry')
d = self.ts.index[0] - datetools.bday self.assertTrue(np.isnan(self.ts.asof(d)))
orig2 = orig.ix[:, ['A', 'B', 'C']].copy()
fallback_url = settings.STATIC_URL + settings.DEFAULT_COURSE_ABOUT_IMAGE_URL course_overview = self._assert_image_urls_all_default(modulestore_type, course_image, fallback_url)
response, _ = self._login_response('test@edx.org', 'test_password') self._assert_response(response, success=True)
compile(text, '<string>', 'exec') return False
return self.q(css="#prereq_min_score").visible
current_time = datetime.datetime.now(UTC()) if override_time is not False: current_time = override_time
error_msg = u"Superterrible error happened: ☠" module.lcp.get_html = Mock(side_effect=Exception(error_msg))
from integration import TMP_CONF_DIR from salttesting import TestCase
import logging
dates_as_str = ['1984-02-19', '1988-11-06', '1989-12-03', '1990-03-15']
path = path[:-5] + ("0" * 4) + path[-1]
try:
templates_path = ['_templates', '_templates/autosummary']
if fnmatch.fnmatch(chunk['__sls__'], req_val): if requisite == 'prereq': chunk['__prereq__'] = True reqs.append(chunk) found = True continue
from pandas.tseries.common import (CombinedDatetimelikeProperties, DatetimeProperties) self.assertIs(Series.dt, CombinedDatetimelikeProperties)
if country not in cls.ALL_COUNTRIES: return True
import salt.master import integration from salt import auth
self.set_header('Access-Control-Allow-Headers', ','.join(allowed_headers))
new_key = self.index._convert_scalar_indexer(key, kind='getitem') if type(new_key) != type(key): return self.__getitem__(new_key) raise
import logging
arr = np.arange(15, dtype=np.float64) arr[7:12] = nan arr[-1:] = nan
import salt.utils
object_results = map(ordered_objects, search_queryset_pks) paged_results.object_list = object_results
ROLE = 'ccx_coach' def __init__(self, *args, **kwargs): super(CourseCcxCoachRole, self).__init__(self.ROLE, *args, **kwargs)
pass
return 'latex' not in template['template_id'] or course.use_latex_compiler
VERSION_1_SCHEME = "random"
assert_page_correct( page=3, page_size=4, expected_start=8, expected_stop=10, expected_next=None, expected_prev=2 )
result = self.get_team_detail(self.solar_team.team_id, 200, {'expand': 'user'}) self.verify_expanded_private_user(result['membership'][0]['user'])
return []
sparse = self.dense1.to_sparse() sparse2 = self.dense2.to_sparse()
if method == 'indexer': method = 'ix' key = obj._get_axis(axis)[key]
return self.width * self.height
with tm.assert_produces_warning(FutureWarning): s.iget_value(1)
pass
self.assertEqual(len(Event.objects.select_related('screening__movie')), 2)
xf.XMODULE_FACTORY_LOCK.enable()
try: os.kill(int(open(pidfile).read().strip()), 0) sys.exit(1) except Exception as ex: pass
return super(Expression, self).as_sql(compiler, connection)
ct_out_map = ( ('application/json', json.dumps), ('application/x-yaml', functools.partial( yaml.safe_dump, default_flow_style=False)), )
self.kwds['color'] = [self.kwds['color']]
else: course_path = "/".join((static_asset_path or data_directory, rest))
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return self.list_display
labels = km.predict(X) assert_equal(v_measure_score(true_labels, labels), 1.0)
return self.client.patch( self.url, json.dumps(request_data), content_type="application/merge-patch+json" )
for app_config in apps.get_app_configs(): if module_has_submodule(app_config.module, "management"): import_module('.management', app_config.name)
self.assertEqual(safe_key(1, 'prefix', 'version'), 'prefix:version:1')
self.check_index_and_outline(self.client)
self.assertIsInstance( microsite.get_backend( 'microsite_configuration.backends.database.DatabaseMicrositeBackend', BaseMicrositeBackend ), DatabaseMicrositeBackend )
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'azure' PROFILE_NAME = 'azure-test' REQUIRED_AZURE = '0.11.1'
y_pred = - clf.decision_function(X_test)
return vb_machinestate_to_tuple(machinestate)[1]
return result.T
upper_name = name.upper()
u = User.objects.get(email='staffmember@example.com') self.assertTrue(not u.check_password("anewpassword"))
(32768, 'Q'),
return survey_link.format(UNIQUE_ID=unique_id_for_user(user))
values = set(values.split(',')) if values else set()
raise NotImplementedError(str(self.__class__) + " does not implement " "initialize_parameters")
if auth_user: set_user_preference(request.user, DARK_LANGUAGE_KEY, preview_lang)
linux_lvm.__salt__ = {}
pear_group = self.notes_page.tag_groups[group_index] self.assertEqual(tag_name + " (3)", pear_group.title) self.assertTrue(pear_group.scrolled_to_top(group_index))
ret = _set_tz(ret, getattr(attrs, 'tz', None), coerce=True)
self.wait_for_element_visibility( '#pre-requisite-course', 'Prerequisite course element is available' ) return self.get_elements('#pre-requisite-course')
rng = date_range('1/1/2000', '1/31/2000') ts = DataFrame(np.random.randn(len(rng), 3), index=rng)
self.assertEqual(NaT.isoformat(), 'NaT')
__virtualname__ = 'pgjsonb'
version_guids, id_version_map = self.collect_ids_from_matching_indexes(branch, **kwargs) if not version_guids: return for entry in self.find_course_blocks_by_id(version_guids): for course_index in id_version_map[entry['_id']]: yield entry, course_index
return self(kind='barh', **kwds)
example_messages = [str(i) for i in range(5)] set_cookie_data(cookie_storage, example_messages[:4] + [CookieStorage.not_finished]) set_session_data(session_storage, example_messages[4:])
chapter = self.store.create_item( self.user_id, test_course.id, 'chapter', block_id='vertical_container' )
time.sleep(0.2)
attr_class = FieldFile
instance.course_user_group.users.remove(instance.user) instance.course_user_group.save()
Series(Series(["a", "c", "b"]).unique()).sort_values()
if len(returned_minions) < 1: return {} end_loop = True
pkg = next(iter(configuration)) conf_ptr = configuration[pkg]
std = Xc.std(axis=0) std[std == 0] = 1. fac = 1. / (n_samples - n_classes)
all_images.extend(conn.list_images())
on_saltstack = 'SALT_ON_SALTSTACK' in os.environ
from __future__ import absolute_import import os import copy import tempfile import json import datetime import pprint
from openpyxl.cell import get_column_letter
self.go_to_tab_and_assert_problem(1, self.problem1_name)
MASQUERADE_DATA_KEY = 'masquerade_data'
plt.figure(figsize=(10, 6)) plt.subplots_adjust(left=0.02, right=0.98)
import salt.config import salt.loader from salt.modules import boto_vpc from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.modules.boto_vpc import _maybe_set_name_tag, _maybe_set_tags from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
([UnregisteredTestTransformer3()], [UnregisteredTestTransformer3.name()]),
self.store.publish(locations['parent'], self.user_id)
if retval.ndim < self.ndim: axis -= 1
from __future__ import absolute_import
result = f.clean('13.30 12-21-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
r = HttpResponse() self.assertEqual(r.get('test'), None)
ModeCreationPage(self.browser, self.course_id).visit()
lsfh = LSHForest(min_hash_match=0, n_candidates=n_points).fit(X)
_default = None
if self.orientation == 'vertical': self.sharex = False else: self.sharey = False
self.assertFalse(section.due_date) self.assertFalse(section.policy)
left = self.rng[:5] right = self.rng[5:10]
pass
management.call_command( 'loaddata', 'sequence_extra_xml', ignore=True, verbosity=0, ) self.assertEqual(Animal.specimens.all()[0].name, 'Wolf')
unavailable_certificates = \ [cert for cert in generated_certificates if cert.status == CertificateStatuses.unavailable and cert.grade == default_grade]
offset = timedelta(**kwds_no_nanos)
del results[-1] max_exceeded = True
arr = Index([1, 2, 3, 4], dtype=object) tm.assertIsInstance(arr, Index)
add_user_with_status_unrequested(self.admin) self.assertIsNone(get_course_creator_status(self.admin))
blocks_visited.add(xblock.location)
disabled_ret = ('first second third | wc -l ; export SALTY_VARIABLE=saltines ' '&& echo $SALTY_VARIABLE ; echo duh &> /dev/null') ret_key = 'test_|-shell_enabled_|-{0}_|-configurable_test_state'.format(disabled_ret)
self.login_page.visit() self.assertScreenshot('#login .login-providers', 'login-providers-{}'.format(self.browser.name))
X = [np.nan, 5, 6, 7, 8] assert_raises_regex(ValueError, "Input contains NaN, infinity or a value too large", scale, X)
for klass in instance_count: instance_count[klass] = klass.objects.count()
context['company_privacy_urltext'] = _("Privacy Policy")
language = language or settings.LANGUAGE_CODE with override_language(language): return get_subject_and_message(subject_template, message_template, param_dict)
response = render_to_response('provider_login.html', { 'error': error, 'return_to': return_to })
__virtualname__ = 'pkg'
s = Series(rng) s_expt = Series(expt, index=[0, 1]) tm.assert_series_equal(s.dt.total_seconds(), s_expt)
cert.set_version(kwargs['version'] - 1)
if com.is_categorical(arr): return arr.take_nd(indexer, fill_value=fill_value, allow_fill=allow_fill) elif com.is_datetimetz(arr): return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)
element = self.q(css=".is-empty").first if element: return element.text[0] else: return None
return XBlockFixtureDesc( 'problem', self.problem_name, data=self.factory.build_xml(**self.factory_kwargs), metadata={'rerandomize': 'always'} )
pass
self.base_loader = base_loader
EmptyPromise( lambda: "login" not in self.browser.current_url, "redirected from the login page" ).fulfill()
self.assertEqual( str(w.message), 'copying data after decompressing; this may mean that' ' decompress is caching its result', )
r, _ = _maybe_upcast(result, fill_value=other, copy=True) np.place(r, mask, other)
return ( isinstance(field, GenericForeignKey) and field.ct_field == self.content_type_field_name and field.fk_field == self.object_id_field_name )
import logging
def tile_columns(self, **kwargs): raise NotImplementedError('override me')
CREDIT_TASK_MAX_RETRIES = 5
import integration
if type(self) == DateOffset or isinstance(self, Tick): return True
i = np.random.choice(len(left), n) right = concat([right, right, left.iloc[i]], ignore_index=True)
comment, passed, retries = _install(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
from __future__ import absolute_import import os import random import string
transformers = BlockStructureTransformers() if user is not None: transformers += COURSE_BLOCK_ACCESS_TRANSFORMERS + [ProctoredExamTransformer()] transformers += [ BlocksAPITransformer( block_counts, student_view_data, depth, nav_depth ) ]
self._load_data(which_set, context_len, data_mode)
from salt.version import __version_info__ return {'saltversioninfo': list(__version_info__)}
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
return self._decision_function(X)
return course_mode_tuple.slug in [cls.PROFESSIONAL, cls.NO_ID_PROFESSIONAL_MODE] if course_mode_tuple else False
if progress: if progress is True or not isinstance(progress, int): progress_interval = 1000 else: progress_interval = progress
query = self.q(css=self._bounded_selector('.copy-error')) if query.visible: return query.text[0] return ''
for cookie in ['csrftoken', 'sessionid']:
params[u'oauth_signature'] = urllib.unquote(params[u'oauth_signature']).decode('utf8')
field, field_list_filter_class = list_filter, FieldListFilter.create
self.assertEqual(self.cmap.get_overall_message(), "Test message")
return hasattr(self.__get_module(fullname), "__path__")
errors = self.errors return (bool(errors), errors)
connargs['bindpw'] = password
trimmed = False if (len(binner) > 2 and binner[-2] == last and self.closed == 'right'):
self.client.logout() response = self.client.get(self.path) self.assertEqual(response.status_code, 401)
yield assert_slice_ok, mgr, ax, [] yield assert_slice_ok, mgr, ax, lrange(mgr.shape[ax])
self.assertEqual(len(mail.outbox), 0)
s = pd.Series([1., 2., 3.]) result = s.interpolate(limit=1) expected = s assert_series_equal(result, expected)
if not url: return url
k1 = orig.clone() k2 = k1.transform(trans.srid, clone=True) self.assertEqual(k1, orig) self.assertNotEqual(k1, k2)
ret = self.run_run_plus(fun='fileserver.envs', args=['backend="roots"']) self.assertIsInstance(ret['fun'], list)
rst_file = document.attributes['source'] rst_dir = os.path.dirname(rst_file)
cols = self.beta.columns return DataFrame(self._p_value_raw, columns=cols, index=self._result_index)
if __opts__.get('requests_lib', False): from requests.exceptions import HTTPError else: from urllib2 import HTTPError
self.assertFalse(auth.user_has_role(self.user, CourseCreatorRole()))
label_measure = metric(y_true, y_pred, average=None) assert_array_almost_equal(label_measure, [metric(y_true_binarize[:, i], y_pred_binarize[:, i]) for i in range(n_classes)])
serialized['required'] = required
self.assertCoursesEqual(source_library1_key, source_library2_key)
except KeyError: self.send_error(401) return
return ( self.q(css="#new-url-input-field-message.has-error").visible and self.q(css="#new-url-desc-input-field-message.has-error").visible )
from django.core.urlresolvers import reverse from django.test import TestCase import mock from edx_oauth2_provider.tests.factories import AccessTokenFactory, ClientFactory
if values.ndim < ndim: if shape is None: shape = values.shape values = values.reshape(tuple((1, ) + shape)) return values
return re.sub(r'(;;|;_)', _unquote_slashes, text)
width = self.ext.config['youtube_width'][0] height = self.ext.config['youtube_height'][0] return flash_object(url, width, height)
self.verify_end_date("edX/test_end/2012_Fall", "Sep 17, 2015")
from salt.modules import pecl
with self.store.branch_setting(ModuleStoreEnum.Branch.published_only, course_key): assertProblemNameEquals(problem_new_name) assertNumProblems(problem_original_name, 0)
return '.cohort-management {}'.format(selector)
data = '1,2,3\n4,5,6'
_ = lambda text: text
rsp_msg = rsqt_msg.get_response()
self.assertEqual( descriptor._xmodule.get_html(), descriptor.render(STUDENT_VIEW).content )
raise NotImplementedError(_("Problem's definition does not support rescoring."))
if itemsize is None: itemsize = lib.max_len_string_array(com._ensure_object(data.ravel()))
ret['comment'] = 'Event module not available. Schedule add failed.'
pass
rng = make_np_rng(None, 322, which_method="shuffle")
choice_id = "1_2_1_choiceinput_{index}bc".format(index=index) choice_value = "choiceinput_{index}".format(index=index) answer_dict[choice_id] = choice_value
operation.state_forwards("something", project_state)
@property def dimension(self): "Returns 0 for points, 1 for lines, and 2 for surfaces." return capi.get_dims(self.ptr)
module = CapaFactory.create(attempts=attempts, max_attempts=attempts, done=True) self.assertFalse(module.should_show_reset_button())
e = Episode.objects.get(name='This Week in Django') formset = inline_formset(instance=e) self.assertTrue(formset.get_queryset().ordered)
if len(comps) == 1: op = self.translate_In(ops[0]) binop = ast.BinOp(op=op, left=node.left, right=comps[0]) return self.visit(binop)
self.store.delete_course(course_id, self.user.id)
tm._skip_if_no_scipy() result = df.interpolate(axis=1, method='values') assert_frame_equal(result, expected)
import os import re import plistlib from distutils.version import LooseVersion
import salt.ext.six as six
attr_dict = {key: getattr(self, key) for key in self.FEATURES} attr_dict['created'] = attr_dict['created'].isoformat() return attr_dict
return handle_node(self.tree)
self._assert_course_verification_status(VERIFY_STATUS_MISSED_DEADLINE)
int_payload['topic_lst'] = match_ids
'engines': list,
from __future__ import unicode_literals
subject = '/'
clf = cls() clf.partial_fit(X2, y2, classes=np.unique(y2)) assert_raises(ValueError, clf.partial_fit, X2, y2, classes=np.arange(42))
_write_test_file(file_name, "This is an arbitrary file for testing uploads")
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
self._get_axis_number(axis) if numeric_only: raise NotImplementedError('Series.{0} does not implement ' 'numeric_only.'.format(name)) return op(delegate, skipna=skipna, **kwds)
defaults.__grains__ = {} defaults.__salt__ = {} defaults.__opts__ = {}
ret.update(difference)
pass
return self._cds.local_modules[usage_id].scope_ids.def_id
result = f.clean('2010-12-21') self.assertEqual(result, date(2010, 12, 21))
ax = df.plot.bar(stacked=True, linewidth=2) for r in ax.patches: self.assertEqual(r.get_linewidth(), 2)
if self.system.resources_fs is None: self.syllabus_present = False else: self.syllabus_present = self.system.resources_fs.exists(path('syllabus'))
self._pid = os.getpid() self._sigterm_handler = signal.getsignal(signal.SIGTERM) self._restart_processes = True
assert_true(X_scaled is not X)
LOGGING = {}
with self.assertRaises(forms.ValidationError): f.clean('13:30:05')
template = self.cleaned_data["plain_template"] self._validate_template(template) return template
defaults = _load(namespace)
return self._cache_key_for_kvs_key(kvs_key) in self._cache
from __future__ import absolute_import import logging from copy import copy
IS_RDP = rdp.__virtual__()
deployed = _wget('deploy', opts, url, timeout=timeout) res = '\n'.join(deployed['msg'])
if not cls.driver_count(): vcapi.register_all() rcapi.register_all()
response = self._add_edx4edx() self.assertIn(GitImportErrorNoDir(settings.GIT_REPO_DIR).message, response.content.decode('UTF-8'))
download_template_deps = ('dist', 'release', 'arch')
return False
import os from os.path import join
EXAMPLE_SLUG = '15bb687e0c59ef2f0a49f6838f511bf4ca6c566dd45da6293cabbd9369390e1a'
bestchild = models.ForeignKey("Child", models.SET_NULL, null=True, related_name="favored_by")
from salt.states import mysql_query import os
next_offset = offset + MAX_STUDENTS_PER_PAGE_GRADE_BOOK previous_offset = offset - MAX_STUDENTS_PER_PAGE_GRADE_BOOK
wtf_numpy = np.zeros((pool_size_1,)) for i in xrange(pool_size_1): wtf_numpy[i] = on_probs[i] on_probs = wtf_numpy
clf = IsolationForest(random_state=rng, contamination=0.25) clf.fit(X) decision_func = - clf.decision_function(X) pred = clf.predict(X)
qs = Book.objects.prefetch_related('first_time_authors') self.assertIn(qs[0], qs)
for attr in template_attrs: with self.assertRaises(AttributeError): getattr(unpickled_response, attr)
else:
super(XMLParsingSystem, self).__init__(**kwargs) self.process_xml = process_xml
return ret
self.assert_field_type(load_video_event, 'time', datetime.datetime) del load_video_event['time']
options.ignore = ('',) if options.select else tuple(options.ignore)
return self._generate_cert(cert, course, student, grade_contents, template_pdf, generate_pdf)
if getattr(self, '_cache', None) is None: return if key is None: self._cache.clear() else: self._cache.pop(key, None)
mappings = inspect_container(name).get('NetworkSettings', {}).get( 'Ports', {}) if not mappings: return {}
homework_1_score = 1.0 / 2 homework_2_score = 1.0 / 1 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
vector = np.zeros_like(grad) vector[1] = 1 hess_col = hess(vector)
CELERY_ALWAYS_EAGER = True
return module.seed
from __future__ import absolute_import import time
update_subtask_status(entry_id, task_id, subtask_status)
from __future__ import division import warnings import numpy as np
from lms.envs.dev import (WIKI_ENABLED)
self._check_grade_response(callback_url, expected_header, json.dumps(response_content))
from __future__ import generators from __future__ import absolute_import import logging import socket
res = df.query('index < b', engine=engine, parser=parser) expec = df[df.index < df.b] assert_frame_equal(res, expec)
del pillar
raise CommandError(e)
if err == 'usage:': break ret[csnap][ctag] = res['stderr']
overview_v10.version = 9 overview_v10.save()
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
import salt.ext.six as six
import salt.config as config import salt.utils.cloud from salt.exceptions import ( SaltCloudConfigError, SaltCloudSystemExit )
return True
SCORE_CHANGED.send( sender=None, points_possible=event['max_value'], points_earned=event['value'], user_id=user_id, course_id=unicode(course_id), usage_id=unicode(descriptor.location) )
actual = grouped_ser.filter(lambda x: len(x) > 1) expected = ser.take(expected_indexes) assert_series_equal(actual, expected)
exc_info_on_loglevel=logging.DEBUG
ASSIGN_CMD = 'net.inet.icmp.icmplim' CONFIG = '/etc/sysctl.conf'
([], 'honor'),
from __future__ import absolute_import
return
- alarms: UnHealthyHostCount: attributes: threshold: 2.0
elif "+" not in argument: if argument.endswith('.el') or argument.endswith('.$el'): return True return False
if msg:
return {"course": unicode(normalized_structure_key), "org": normalized_structure_key.org}
vm_['private_key'] = key_filename
return course.cert_html_view_enabled if course else False
if not s3_meta: continue
mask = np.ones((size, size), dtype=np.int16) A = grid_to_graph(n_x=size, n_y=size, n_z=size, mask=mask) assert_true(connected_components(A)[0] == 1)
self._set_block_values(block_structure, self.transform_data_key)
verify_date_or_time(COURSE_START_DATE_CSS, '12/20/2013') verify_date_or_time(COURSE_START_TIME_CSS, DUMMY_TIME)
response = self.client.get('/reset/123456/1-1/') self.assertContains(response, "The password reset link was invalid")
pass
task_type = 'rescore_problem' task_class = rescore_problem task_input, task_key = encode_entrance_exam_and_student_input(usage_key, student) return submit_task(request, task_type, task_class, usage_key.course_key, task_input, task_key)
return self.block.values
import copy import logging import re
t = super(SafeText, self).__add__(rhs) if isinstance(rhs, SafeData): return SafeText(t) return t
self.assertEqual(id(self.ts.index), id(derived.index))
return self._assertPoLocComment(False, po_filename, line_number, *comment_parts)
clf = svm.LinearSVC(random_state=0).fit(X, Y) sp_clf = svm.LinearSVC(random_state=0).fit(X_sp, Y)
raise TypeError('Cannot cast datetime64 to %s' % dtype)
return { "has_access": self.has_access, "error_code": self.error_code, "developer_message": self.developer_message, "user_message": self.user_message }
import salt.ext.six as six
runner = salt.runner.RunnerClient(__opts__['__master_opts__']) return runner.cmd(fun, arg)
dt -= timedelta(days=1)
content_store.set_attr(self.LOCKED_ASSET_KEY, 'locked', True)
from __future__ import absolute_import import os from os.path import join from shutil import rmtree from tempfile import mkdtemp
self.certificates_section.refresh()
PyDateTime_IMPORT
return capi.geos_equalsexact(self.ptr, other.ptr, float(tolerance))
self.store.delete_item( self.icrv.location, ModuleStoreEnum.UserID.test, revision=ModuleStoreEnum.RevisionOption.published_only ) self._update_partitions()
req_to_remove = CreditRequirement.get_course_requirements(course_key, namespace=req_namespace, name=req_name)
ofile.write(line.strip() + os.linesep)
from salttesting.helpers import ensure_in_syspath, skip_if_binaries_missing import salt.utils ensure_in_syspath('../../')
self._npy_counter = 1 if protocol is None: protocol = (pickle.DEFAULT_PROTOCOL if PY3_OR_LATER else pickle.HIGHEST_PROTOCOL)
Form = modelform_factory(Person, fields="__all__", widgets={'name': widget}) self.assertEqual(Form.base_fields['name'].widget.__class__, forms.Textarea)
if 'gateway' in vm_: deploy_kwargs.update({'gateway': vm_['gateway']})
builtin_deploy_dir = os.path.join( os.path.dirname(__file__), 'deploy' )
try: res[field.attname] = field except AttributeError: pass
n_inliers_best = n_inliers_subset score_best = score_subset inlier_mask_best = inlier_mask_subset X_inlier_best = X_inlier_subset y_inlier_best = y_inlier_subset
self.assertEqual(df.iloc[0:1, :].testattr, 'XXX')
qs._prefetch_done = True obj._prefetched_objects_cache[cache_name] = qs
return self.apply(Series.value_counts, normalize=normalize, sort=sort, ascending=ascending, bins=bins)
self.variables = variables self.p = p
self.assertLess(ordered_sigs.index('s3'), ordered_sigs.index('s1'))
clf_multi_loss = log_loss(y, clf_multi.predict_proba(X)) clf_wrong_loss = log_loss(y, clf_multi._predict_proba_lr(X)) assert_greater(clf_wrong_loss, clf_multi_loss)
import pprint import logging
DATE_FORMAT = 'j F, Y' TIME_FORMAT = 'g:i A' YEAR_MONTH_FORMAT = 'F Y' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'j M, Y'
'processors': get_config_value('processors'),
return SPF(domain, 'TXT', nameserver)
if isinstance(item, compat.string_types): return self.asobject.insert(loc, item) raise TypeError( "cannot insert TimedeltaIndex with incompatible label")
sites.models.SITE_CACHE.clear()
if data_type == 'subsection': for tooltip_dict in tooltips[index]: num_students = tooltip_dict['num_students'] subsection = tooltip_dict['subsection_name'] results.append(['', subsection, num_students])
ret['changes']['home'] = ''
chunk = self._read_limited(size - len(self.buffer))
if on_saltstack: html_search_template = 'googlesearch.html' else: html_search_template = 'searchbox.html'
data = self.data._data
return self.cleaned_data.get("page") or 1
log.info('Created node {0}'.format(vm_['name']))
begin = Timestamp('2011/1/1', tz='UTC') end = Timestamp('2014/1/1', tz='UTC')
except Exception: return __salt__['cmd.run']( '{0} vcpu-pin {1} {2} {3}'.format(_get_xtool(), vm_, vcpu, cpus), python_shell=False)
self.index_axes = [ index_axes_map[a].set_pos(j).update_info(self.info) for j, a in enumerate(axes) ] j = len(self.index_axes)
self._data = SingleBlockManager(data, index, fastpath=True) self._index = index self.name = name
before = self.make_project_state([]) after = self.make_project_state([address, tenant]) autodetector = MigrationAutodetector(before, after) changes = autodetector._detect_changes()
before = attempt.created_at - timedelta(seconds=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(before, query) self.assertIs(result, None)
obj = self.copy(deep=copy) obj.set_axis(axis, _transform_index(self.axes[axis], mapper)) return obj
LOGGER.info('Retrying task to award failed certificates to user %s', username) raise self.retry(countdown=countdown, max_retries=config.max_retries)
repr(self.rng)
exp = f.copy() exp.values[5] = 4 ix[5][:] = 4 assert_frame_equal(exp, f)
return None
self.t_ = None
return InstructorTask.create(course_id, task_type, task_key, task_input, requester)
ret['comment'] = 'Event module not available. Schedule add failed.'
self._handle_usecols([names], names) columns = [names] num_original_columns = ncols
PIPELINE_JS_COMPRESSOR = None
if self.serversonly: return ""
module = CapaFactory.create(max_attempts=0) self.assertFalse(module.should_show_check_button())
return _write_js(output_root, _list_descriptors())
def __getslice__(self, i, j): return self.__class__(super(FrozenList, self).__getslice__(i, j))
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index=0, chapter='xyzzy')
for __ in range(int(num_inputs)): input_element = self.create_input_element(**kwargs) if not None == input_element: response_element.append(input_element)
past_due_date = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="0", due=self.yesterday_str) self.assertTrue(past_due_date.answer_available())
features_in_first_mlp = 5 features_in_second_mlp = 10 targets_in_first_mlp = 2 targets_in_second_mlp = 2
if var.endswith('.'): raise ValueError
if hasattr(to, 'get_absolute_url'): return to.get_absolute_url()
if not mask_all: left_indexer = mask.nonzero()[0][left_indexer]
action_name = ugettext_noop('generated') task_fn = partial(upload_students_csv, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
from __future__ import absolute_import import salt.ext.six.moves.http_client as http_client
result = self.ts[[slice(None, 5)]] expected = self.ts[:5] assert_series_equal(result, expected)
sampling_algorithm["python-core-sample"] = \ lambda n_population, n_sample: \ random.sample(xrange(n_population), n_sample)
course_listing = self.q(css=".course").filter(lambda el: course_name in el.text).results
exp = pd.Series([9, 8], name='xxx', dtype=object) tm.assert_series_equal(p - s, exp) tm.assert_series_equal(s - p, -exp)
ind = self.index.set_names(new_names, level=[0, 1]) self.assertEqual(self.index.names, self.index_names) self.assertEqual(ind.names, new_names)
result = self[self.notnull()] if isnull(result.categories).any(): result = result.remove_categories([np.nan]) return result
n_dtypes = 2 old_nchannels = shape[2] shape[2] = old_nchannels / 2 assert shape[2] * 2 == old_nchannels, \
email_opt_in = request.data['email_opt_in'].lower() == 'true' update_email_opt_in(request.user, org, email_opt_in) return HttpResponse(status=status.HTTP_200_OK)
return True
default="images_course_image.jpg"
log = logging.getLogger(__name__)
super(BaseVisitor, self).__init__() self.file_contents = file_contents self.lines = StringLines(self.file_contents) self.results = results
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
from __future__ import unicode_literals
VS_batch = VS.make_theano_batch() new_CS_batch = VS.format_as(VS_batch, CS) new_VS_batch = VS.undo_format_as(new_CS_batch, CS) assert new_VS_batch is VS_batch
SECRET_KEY = 'dev key'
return ewkb_w(3 if self.hasz else 2).write(self)
X_sparse_test = X_sparse_test.copy()
'name': get_config_value('name'),
padding_len = AES.block_size - len(input_str) % AES.block_size return input_str + padding_len * chr(padding_len)
self.assertQuerysetEqual( qs.order_by('-second_extra').values_list('first', flat=True), ['a', 'a'], lambda x: x)
if sub_sampling: doc_ratio = float(self.total_samples) / n_samples score *= doc_ratio
if len(locs) != n: return False hit = np.zeros(n, bool) hit[locs] = True if not np.all(hit): return False return True
parameters["signature"] = signature(parameters, shared_secret_key)
import json import logging
clf_random = ElasticNet(selection='invalid') assert_raises(ValueError, clf_random.fit, X, y)
self.assertQuerysetEqual( Person.objects.get_fun_people(), [ "Bugs Bunny" ], six.text_type )
self.assertQuerysetEqual( Order.objects.exclude(~Q(items__status=1)).distinct(), ['<Order: 1>'])
continue
if key in data: data[key].add(value) else: data[key] = {value}
key = '{prefix}level_{i}'.format(prefix=prefix, i=i) level = i
import salt.utils.error
ssh_gateway: gateway.example.com
self.mock_programs_api() self.mock_credentials_api(self.student, data=self.CREDENTIALS_API_RESPONSE, reset_url=False)
return usage_key.block_type in self.block_types_affecting_grading
ws.send('websocket client ready')
if len(state) == 2: nd_state, own_state = state data = np.empty(nd_state[1], dtype=nd_state[2]) np.ndarray.__setstate__(data, nd_state)
def clone(self): "Clones this coordinate sequence." return GEOSCoordSeq(capi.cs_clone(self.ptr), self.hasz)
elif strategy == "most_frequent": most_frequent = np.empty(len(columns))
print_filename = True
set_user_preference(self.user, ACCOUNT_VISIBILITY_PREF_KEY, preference_visibility) self.create_mock_profile(self.user) response = self.send_get(client)
if 'provider' in provider_config: provider_config['driver'] = provider_config.pop('provider')
import salt.utils import salt.exceptions
self.check_tab_equality(tab, dict_tab)
return self._get_cohort_messages("confirmations", wait_for_messages)
for p_type in pkgtypes: ret[p_type].update(set(expanded[p_type]))
for X, y in classification_datasets: X = X y = y mlp = MLPClassifier(algorithm='sgd', max_iter=100, random_state=1, tol=0, alpha=1e-5, learning_rate_init=0.2)
elif isinstance(indexer, slice):
return False
self.get_session_storage(storage)._store = None
responder.update_score(score_msg, cmap, queuekey)
self._has_staff_access = None
if not labels.is_lexsorted(): labels = MultiIndex.from_tuples(labels.values)
a = Article.objects.get(pk=a.pk) self.assertEqual(a.misc_data, '') self.assertIs(type(a.misc_data), six.text_type)
import os
tm._skip_if_no_dateutil() import dateutil
ordering.extend(queryset.query.order_by)
import msgpack if msgpack.loads(msgpack.dumps([1, 2, 3]), use_list=True) is None: raise ImportError available = True
split_test = self._update_partition_id(0)
usage_id = LocationKeyField(max_length=255, db_index=True)
self.assertTrue(is_survey_required_for_course(self.course))
out += ['.. autosummary::', ''] out += autosum
output = assets._get_asset_json("my_file", content_type, upload_date, location, thumbnail_location, True)
continue
if func_code.co_flags & 0x08: index = pos_count + keyword_only_count if func_code.co_flags & 0x04: index += 1
from __future__ import absolute_import import yaml
latex_documents = [ ( 'index', 'getting_started.tex', u'edX Studio Documentation', u'EdX Doc Team', 'manual', ), ]
if not whitelist_countries: whitelist_countries = cls.ALL_COUNTRIES
instructor_task = api_call() instructor_task = InstructorTask.objects.get(id=instructor_task.id) instructor_task.task_state = PROGRESS instructor_task.save() with self.assertRaises(AlreadyRunningError): api_call()
return y - expit(pred.ravel())
'provider', 'provider.oauth2', 'edx_oauth2_provider',
for parent_desc_list in parents_descendants_list: if parent_desc_list is not None: parent_desc_list.items.append(unicode(block_key))
if is_datetimelike_v_numeric(a, b): result = False
self.assertTrue(ax1._shared_x_axes.joined(ax1, ax2)) self.assertTrue(ax2._shared_x_axes.joined(ax1, ax2))
title = getattr(node, 'display_name', None) if not title: title = node.location.to_deprecated_string() return title
if not log_format: log_format = '[%(levelname)-8s] %(message)s' if not date_format: date_format = '%H:%M:%S'
self.assertTrue(self.creator_admin.has_change_permission(self.request)) self.request.user = self.user self.assertFalse(self.creator_admin.has_change_permission(self.request))
pathname = name_to_pathname(self.url_name) filepath = u'{category}/{pathname}.html'.format( category=self.category, pathname=pathname )
courses_list[course_key] = course
raise TypeError
_skip_console_logging_config_ = True _logfile_config_setting_name_ = 'key_logfile' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'key')
'ENABLE_SPECIAL_EXAMS': False,
return prlctl('snapshot', args, runas=runas)
if blocked and unsatisfied: ret['blocked'] = blocked
self.consolidate(inplace=True) return self._chunks[0]
from salt.states import at
msg = "Cannot resolve keyword 'attached_comment_set' into field." with self.assertRaisesMessage(FieldError, msg): Post.objects.filter(attached_comment_set__is_spam=True)
msg = ('\nSetting NaNs in `categories` is deprecated and ' 'will be removed in a future version of pandas.') warn(msg, FutureWarning, stacklevel=3)
res_row = df.iloc[2, :] tm.assert_series_equal(res_row, exp_row) tm.assertIsInstance(res_row["cats"], compat.string_types)
self.assertEqual(col[0], Timestamp( '2000-01-01 08:00:00', tz='UTC'))
IPFilter.objects.create( blacklist="192.168.10.20", enabled=True )
PYTHON_COVERAGERC = REPO_ROOT / ".coveragerc"
return self.connectable.execute(*args, **kwargs)
assert_almost_equal(clf.coef_, clf_weighted.coef_, decimal=2) assert_almost_equal(clf.coef_, clf_balanced.coef_, decimal=2)
enrollment_exists = CourseEnrollment.objects.filter( user=self.user, course_id=self.course.id ).exists() self.assertFalse(enrollment_exists)
self.assertDictContainsSubset({'attempted': 2, 'succeeded': 2, 'failed': 0}, task_result)
self.find_css('.collection-name-input').first.fill(value)
self._do_create_preferences_test(False)
self.key = key if not isinstance(delta, integer_types): raise SaltInvocationError('Delta value must be an integer') return key
raise InvalidMigrationPlan( "Migration plans with both forwards and backwards migrations " "are not supported. Please split your migration process into " "separate plans of only forwards OR backwards migrations.", plan )
self.assertTrue(formset.is_valid())
sup_cls = super(cls, self) try: base = sup_cls.media except AttributeError: base = Media()
if len(unicode(final_grade)) > 7: final_grade = u'{:.5f}'.format(final_grade) else: final_grade = unicode(final_grade)
with warnings.catch_warnings(record=True): estimator = Estimator()
v = TfidfVectorizer(binary=True, use_idf=False, norm=None) assert_true(v.binary)
idx2 = TimedeltaIndex(['1 days', np.nan, '3 days', 'NaT']) self.assertFalse(idx2.is_monotonic)
try: from libcloud.compute.drivers.cloudstack import CloudStackNetwork import libcloud.security libcloud.security.CA_CERTS_PATH.append('/etc/ssl/certs/YaST-CA.pem') HAS_LIBS = True except ImportError: HAS_LIBS = False
self.assertIsNotNone(account_settings['date_joined']) del account_settings['date_joined']
import salt.utils.jid import salt.returners from salt.utils.decorators import memoize
a2 = A() self.assertNotEqual(a.value, a2.value)
response = urllib2.urlopen(req)
df = DataFrame(np.random.randn(3, 4)) df2 = DataFrame(np.random.randn(4, 4))
with with_edx_domain_context(is_edx_domain): response = self.client.get(reverse(url_name), params)
col_0 d e f row_0 a 1 0 0 b 0 1 0 c 0 0 0
self.assertEqual(ParkingLot3._meta.get_ancestor_link(Place).name, "parent")
from __future__ import absolute_import import random import string from copy import deepcopy
self.assertSetEqual( set(course_action_state.course_key for course_action_state in expected), set(course_action_state.course_key for course_action_state in found))
with self.assertRaisesRegexp(Exception, 'Unknown parenthesis'): preview.LatexRendered('x^2', parens='not parens')
self.assertEqual(block.edited_by, "testassist@edx.org") self.assertDictEqual( block.grade_cutoffs, {"Pass": 0.45}, )
with self.assertRaises(Exception): self.client.get(test_url)
result = self.store.get_library(LibraryLocator("non", "existent")) self.assertEqual(result, None)
def __init__(self, *args, **kwargs): super(OrgStaffRole, self).__init__('staff', *args, **kwargs)
filter_out_source_path_option(reclass_opts)
for name, penalty in (('unreg', 1), ('reg', 0.05)):
grandkids = [] for descendant in descendants: grandkids.extend(descendant.children)
assert_raises(ValueError, ForestEstimator(oob_score=True, bootstrap=False).fit, X, y)
return np.int64(key.value).view(_TD_DTYPE)
pass
if other_names is None: other_names = []
for injected in injected_func_globals: del func_globals[injected]
self.assertFalse(element_has_text( page=course_outline_page, css_selector='.add-item a.button-new', text='New Subsection' ))
students_to_generate_certs_for = students_to_generate_certs_for.filter( certificatewhitelist__course_id=course_id, certificatewhitelist__whitelist=True )
clf = GradientBoostingClassifier(n_estimators=100, random_state=1)
'gating.apps.GatingConfig',
df.describe()
return override_settings(**kwargs)
from __future__ import absolute_import try: import pwd except ImportError: pass
self.user.set_password('test') self.user.save()
os.environ['REQUIRE_BUILD_PROFILE_OPTIMIZE'] = 'none'
def etag(etag_func): return condition(etag_func=etag_func)
pass
line_number = self.index_to_line_number(index) return self.line_number_to_end_index(line_number)
cls.url = reverse('instructor_dashboard', kwargs={'course_id': cls.course_key.to_deprecated_string()}) cls.email_link = '<a href="" data-section="send_email">Email</a>'
def __init__(self, *vargs): pass
import integration import salt.utils from salt.modules.virtualenv_mod import KNOWN_BINARY_NAMES
cls.driver = None
retval = self.obj for i, key in enumerate(tup): if i >= self.obj.ndim: raise IndexingError('Too many indexers')
while k < maxiter: fgrad, fhess_p = grad_hess(xk, *args)
layout = np.zeros((nrows + 1, ncols + 1), dtype=np.bool) for ax in axarr: layout[ax.rowNum, ax.colNum] = ax.get_visible()
self.kvs = kvs self.session = session self.session_data = session.setdefault(MASQUERADE_DATA_KEY, {})
return Series([], name=self.name, index=keys)
print('Cloud configuration files provisioned via pillar.')
import os
grad[:n_features] += alpha * 2. * w
self.client.logout() response = self.client.get(self.url) self.assertEqual(response.status_code, 302)
ret = {'result': False, 'comment': None}
chunksize = self.chunksize chunks = int(nrows / chunksize) + 1
if not reparse_data: return False
from __future__ import unicode_literals
self.video.hide_closed_captions() self.video.wait_for_closed_captions_to_be_hidden() self.video.reload_page() self.video.wait_for_closed_captions_to_be_hidden()
s = Series(list('abc'))
from __future__ import unicode_literals
indexer = indexer._values indexer[~check] = 0
with self.assertNumQueries(6): override_field_for_ccx(self.ccx, chapter, 'start', ccx_start)
self.assertTrue( self.run_function('system.set_disable_keyboard_on_lock', [True])) self.assertTrue( self.run_function('system.get_disable_keyboard_on_lock'))
tm.assert_series_equal(s.transpose(), s)
django_settings.SOCIAL_AUTH_LOGIN_ERROR_URL = '/'
elif can_do_equal_len(): setter(labels[0], value)
response = self.client.post( '/i18n/setlang/', data={'language': 'en'}, follow=True, HTTP_REFERER='/nl/vertaald/' ) self.assertRedirects(response, '/en/translated/')
lines = StringLines(data['string']) self.assertEqual(lines.line_number_to_line(data['line_number']), data['line'])
self.assertEqual(Tag.objects.filter(name__in=()).update(name="foo"), 0)
log = logging.getLogger(__name__)
use_svd = (n_neighbors > d_in)
class Author(models.Model): name = models.CharField(max_length=150)
import salt.utils from salt.exceptions import CommandExecutionError, MinionError import salt.ext.six as six
return launchctl('list', return_stdout=True, output_loglevel='trace', runas=runas)
try: do_email_change_request(user, email, activation_key) except ValueError as err: return err.message
return 'datetime64'
self.cmap.set_overall_message(None) self.assertEqual(self.cmap.get_overall_message(), "")
_logger.info('loading file %s' % datasets['test_batch']) data = serial.load(datasets['test_batch'])
from salt.modules import drac
else: return None
assert_array_almost_equal(x_loadings_sign_flip, x_weights_sign_flip, 4) assert_array_almost_equal(np.abs(x_loadings_sign_flip), 1, 4) assert_array_almost_equal(np.abs(x_weights_sign_flip), 1, 4)
'env_order': list,
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
from __future__ import absolute_import import logging
ret = self.run_function('shadow.info', [TEST_USER]) self.assertEqual(ret['name'], TEST_USER)
assert k in _offset_map self.assertEqual(k, (get_offset(k) * 3).rule_code)
if not kwargs: cmd += ' '
import os import logging
nmi = State.objects.create(name='Northern Mariana Islands', poly=None) self.assertEqual(nmi.poly, None)
EmptyPromise( lambda: self.find_css('.signatory-panel-body .signatory-name-input').present, 'On signatory edit view' ).fulfill()
export_extra_content( export_fs, self.modulestore, self.courselike_key, xml_centric_courselike_key, 'about', 'about', '.html' )
pos_class = classes[1]
if queryset is None: queryset = self.get_queryset()
extract_dir_relative = path.relpath(extract_dir, settings.DATA_DIR)
mixed = Series(['aBAD_BAD', NA, 'BAD_b_BAD', True, datetime.today(), 'foo', None, 1, 2.])
if not connection.ops.geojson: with self.assertRaises(NotImplementedError): list(Country.objects.annotate(json=functions.AsGeoJSON('mpoly'))) return
partitions_service = self.runtime.service(self, 'partitions') if not partitions_service: return None return partitions_service.get_user_group_id_for_partition(self.user_partition_id)
if 'python' in self.arguments: content = self.content self.content = self.shell.process_pure_python(content)
from __future__ import unicode_literals
cell = read_worksheet.cell('B2')
index._cleanup()
add_message(request, constants.WARNING, message, extra_tags=extra_tags, fail_silently=fail_silently)
self.certificates_section.fill_certificate_invalidation_user_name_field("") self.certificates_section.click_invalidate_certificate_button() self.certificates_section.wait_for_ajax()
_maybe_remove(store, 'f2') store.put('f2', df) self.assertRaises(TypeError, store.create_table_index, 'f2')
self.assertEqual('django', six.text_type(string_concat("dja", "ngo")))
import logging import socket import time
score = score * self.weight / total total = self.weight
super(SendMsgBot, self).__init__(jid, password)
problem_vertical = ItemFactory.create( parent_location=self.problem_section.location, category='vertical', display_name='Problem Unit' )
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
acceptable_dtypes = [np.float32, np.float_] _cast_inplace(com.flatten(self), acceptable_dtypes, np.float_)
enrollment_mode = self.dashboard_page.get_enrollment_mode(self.course_info["display_name"]) self.assertEqual(enrollment_mode, 'honor')
X_train = check_array(X_train, 'csc', dtype=dtype, order=X_order) alphas, coefs, _ = path(X_train, y_train, **path_params) del X_train, y_train
self.user = UserFactory.create() self.client.login(username=self.user.username, password='test') CourseEnrollmentFactory.create(user=self.user, course_id=self.course_key)
return RawQuerySet( self.raw_query, model=self.model, query=self.query.clone(using=alias), params=self.params, translations=self.translations, using=alias, )
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0)
assert correctness in ['correct', 'incorrect'] assert problem_type in PROBLEM_DICT answer_problem(world.scenario_dict['COURSE'].number, problem_type, correctness)
codeparam = self.xml.find('codeparam') assert codeparam is not None, "Unsupported old format! <coderesponse> without <codeparam>" self._parse_coderesponse_xml(codeparam)
self.data = data self.aes = make_aes(**kwds) self.legend = {}
conn = ' %s ' % connector return conn.join(sub_expressions)
ioloop.install()
def wrapped_view(*args, **kwargs): return view_func(*args, **kwargs) wrapped_view.csrf_exempt = True return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)
ext_user = User.objects.get(email=self.ext_user.email) self.assertTrue(auth.user_has_role(ext_user, CourseInstructorRole(self.course.id)))
if bits[-2] != 'as': raise template.TemplateSyntaxError(syntax_message) context_name = bits[-1]
return True
from __future__ import unicode_literals
('/%E2%99%A5%E2%99%A5/', '/♥♥/'), ('/%E2%99%A5%E2%99%A5/?utf8=%E2%9C%93', '/♥♥/?utf8=✓'),
if remove: __salt__['file.remove'](info(name)['home'])
if isinstance(item, compat.string_types): return self.asobject.insert(loc, item) raise TypeError( "cannot insert DatetimeIndex with incompatible label")
self.reset_tracker()
zfs.__salt__ = {}
self.assertEqual(ax.collections[0].colorbar._label, 'z')
('geography', ('GeometryField', {'geography': True})),
self.assertEqual(3, City.objects.count())
date = datetime_safe.new_datetime(date) time_str = date.strftime('%Y-%m-%dT%H:%M:%S')
TASK_STATE_UNKNOWN = 0 TASK_STATE_DISABLED = 1 TASK_STATE_QUEUED = 2 TASK_STATE_READY = 3 TASK_STATE_RUNNING = 4
current = stack[-1]
pass
return self._codes.ndim
self.assertIsNone(check_password({}, 'unknown', ''))
self.save_and_verify_discussion_topics(key=self.inline_key)
import salt.ext.six as six
is_stopped = False for proc in all_processes: if proc.startswith(name) \ and _is_stopped_state(all_processes[proc]['state']): is_stopped = True break
_mock_counts.return_value = {'total': 0} call_task('pavelib.quality.run_safelint')
y_i_all_argmax = np.flatnonzero(y_data_repeated_max == y.data)
grid_search = GridSearchCV(pipeline, parameters, n_jobs=1)
req = self._get_GET_csrf_cookie_request() resp = requires_csrf_token(token_view)(req) self._check_token_present(resp)
X_train, X_test = X[:n_samples_train], X[n_samples_train:] y_train, y_test = y[:n_samples_train], y[n_samples_train:]
msg = "Input has different freq=4M from PeriodIndex" with tm.assertRaisesRegexp(period.IncompatibleFrequency, msg): base <= Period('2011', freq='4M')
return get_members(mailchimp, list_id, 'subscribed')
from salt.states import powerpath
if sp.issparse(coef): coef.data.flags.writeable = False else: coef.flags.writeable = False return coef
if schedule[job]['_seconds'] > 0: schedule[job]['seconds'] = schedule[job]['_seconds'] elif 'seconds' in schedule[job]: del schedule[job]['seconds']
reader = ExcelFile(path) frame3 = read_excel(reader, 'test1')
class TestPlain(object): @myattr_dec_m @myattr2_dec_m def method(self): "A method" pass
self.assertTrue(issubclass(df.BoolCol.dtype.type, np.integer), "BoolCol loaded with incorrect type")
properties_update = [] for prop in properties: if prop not in properties_current: continue
from __future__ import absolute_import import logging
mock_get_request_user.return_value = AnonymousUser() mock_refund_seat.reset_mock() self.send_signal() self.assertFalse(mock_refund_seat.called)
from salt.modules import modjk
cherrypy.response.headers['Content-Type'] = best out = cherrypy.response.processors[best] return out(ret)
pass
jll = self._joint_log_likelihood(X) return self.classes_[np.argmax(jll, axis=1)]
with super(UserProfileUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
preds2 = np.zeros_like(y) for train, test in cv: est.fit(X[train], y[train]) preds2[test] = est.predict(X[test])
if not len(info): raise SaltInvocationError( u'No snapshots for VM "{0}" have ID "{1}"'.format(name, snap_id) )
self.X_topo_space = self.view_converter.topo_space
checks = (get_pending_update, get_pending_file_rename, get_pending_servermanager, get_pending_component_servicing, get_pending_computer_name, get_pending_domain_join)
if name in ret['changes']: ret['changes'][name]['new']['status'] = image['status']
visited = set()
with self.assertRaises(ValueError): review1.content_object = dive
url(r'^choose/{}/$'.format(settings.COURSE_ID_PATTERN), views.ChooseModeView.as_view(), name='course_modes_choose'),
for field in obj._meta.fields: if hasattr(field, 'geom_type'): self.geometry_field = field.name break
pass
self.assertEqual(my_doodad.num_calls, 0)
profile_str = 'gce-config:' provider = 'gce' providers = self.run_cloud('--list-providers') self.INSTANCE_NAME = _random_name()
application: 6789012345 directory: 3456789012
time.sleep(1) continue
if field_decorator is None: self.field_decorator = lambda x: x else: self.field_decorator = field_decorator
np.testing.assert_equal(list(cv), list(wrapped_old_skf.split()))
new_values = algos.take_1d(self.get_values(), indexer) return self._constructor(new_values, index=new_index)
'bootstrap_delay': int,
kwargs['client_flag'] = CLIENT.FOUND_ROWS kwargs.update(settings_dict['OPTIONS']) return kwargs
from salt.states import apache import salt.utils
with tm.assertRaises(KeyError): df.sample(n=3, weights='not_a_real_column_name')
from django.utils.six.moves import cPickle import pickle
def __sub__(self, other): "Return the difference this Geometry and the other." return self.difference(other)
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
eps = 0.8 min_samples = 10 metric = 'euclidean' core_samples, labels = dbscan(X, metric=metric, eps=eps, min_samples=min_samples)
BlockDepthTransformer().transform(usage_info=None, block_structure=block_structure) BlockNavigationTransformer(0).transform(usage_info=None, block_structure=block_structure) block_structure._prune_unreachable()
try: validate_email(eamap.external_email) context['ask_for_email'] = False except ValidationError: context['ask_for_email'] = True
"_save": "Save",
batch_names = ['monitoring_%s' % s for s in self._flat_data_specs[1]] theano_args = self._flat_data_specs[0].make_theano_batch(batch_names)
from __future__ import unicode_literals
if node_string[-2:] == '\\n': node_string = node_string[:-2] if node_string[-5:] == '<br/>': node_string = node_string[:-5]
self.assertEqual(match[0], func) self.assertEqual(match[1], args) self.assertEqual(match[2], kwargs)
self.current_block.add(string, start, end, line)
self._donate(self.DONATION_AMOUNT, course_id=self.course.id)
if not language: language = settings.LANGUAGE_CODE
if name not in ['sum', 'min', 'max']: self.assertRaises(TypeError, f, Series(list('abc')))
s = Series(lrange(5)) del s[0]
msg = colorize('green', "Confirming servers are running...") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc)
BRANCH_PREFIX = "PR_TOOL"
self.dbm = dbm
import integration from salt.modules import mysql as mysqlmod
response.data["current_page"] = self.page.number
from __future__ import absolute_import
lengths.append(len(recs))
response = perform_search( "unique", user=self.user, size=10, from_=0, course_id=unicode(self.course.id)) self.assertEqual(response['total'], 1)
if __grains__['os_family'] == 'RedHat': network_c = salt.utils.fopen('/etc/sysconfig/network', 'r').readlines()
try: tags = literal_eval(t)
lhs = DataFrame(randn(5, 2)) expect = -lhs result = pd.eval(expr, engine=self.engine, parser=self.parser) assert_frame_equal(expect, result)
rexp = re.compile('(?m)^ ["]?' r'([^,|\s].*[^"|\n|,])[,|"]?')
self.assertIn(REG_STR, resp.content)
from __future__ import unicode_literals
for pos, expr in enumerate( self.source_expressions[self.geom_param_pos + 1:], start=self.geom_param_pos + 1): if isinstance(expr, GeomValue): expr.geography = True
self._consolidate_inplace() new_data = self._data.xs(i, axis=axis, copy=True, takeable=True) return self._construct_return_type(new_data)
ax = df.plot.scatter(x='x', y='y', c='z', colorbar=False) self.assertIs(ax.collections[0].colorbar, None)
link_tgt = self.repo[tree[path].oid].data path = os.path.normpath( os.path.join(os.path.dirname(path), link_tgt) )
clone = self._clone() clone.query.standard_ordering = not clone.query.standard_ordering return clone
endpoint: myendpoint.example.com:1138/services/Cloud
update_wrapper(view, cls.dispatch, assigned=()) return view
'API': 'https://www.youtube.com/iframe_api',
if 'beacons' not in opts: opts['beacons'] = {}
timeseries_custom_bmonthend_incr = \ Benchmark("date + cme",setup)
self.assertIsInstance(form._errors, forms.ErrorDict)
import salt.config import salt.client.raet
LETTUCE_SERVER_PORT = 8003 XQUEUE_PORT = 8040 YOUTUBE_PORT = 8031 LTI_PORT = 8765 VIDEO_SOURCE_PORT = 8777
axes = axarr.reshape(nrows, ncols)
if request.status_code == 204: return True
return course_metadata_utils.course_end_datetime_text( self.end, format_string, self.runtime.service(self, "i18n").strftime )
ranks0 = self.frame.rank(na_option='top') ranks1 = self.frame.rank(1, na_option='top')
with self.assertNumQueries(2): avatar.delete()
movie_id = models.AutoField(primary_key=True) name = models.CharField(max_length=60)
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
return None
return self._possibly_eval(res, self.binary_ops)
self.assertTrue('Activate Course Enrollment' in resp.content)
module = CapaFactory.create(rerandomize=RANDOMIZATION.NEVER, max_attempts=0, done=True, correct=True) self.assertFalse(module.should_show_reset_button())
if isinstance(current, BaseContext) and getattr(type(current), bit): raise AttributeError current = getattr(current, bit)
clf.set_params(scale=True) X_score, Y_score = clf.fit_transform(X_s, Y_s) assert_array_almost_equal(X_s_score, X_score) assert_array_almost_equal(Y_s_score, Y_score)
return usage_id
return self.ebm.free_energy(X)
char_unpacked[0] = ord(b'b')
if not self.remote_field.is_hidden() and not related.related_model._meta.swapped: setattr(cls, related.get_accessor_name(), ManyToManyDescriptor(self.remote_field, reverse=True))
available_version = salt.utils.alias_function(latest_version, 'available_version')
return SurveyAnswer.do_survey_answers_exist(self, user)
test_gmbh = Company.objects.get(name="Test GmbH")
frame = DataFrame.from_records(data, columns=columns, coerce_float=coerce_float) _parse_date_columns(frame, parse_dates) if index_col is not None: frame.set_index(index_col, inplace=True) return frame
ret[minion] = data yield {minion: data}
multi_db = True
return self.q(css='#fileupload .error-block').visible
field_data_cache = FieldDataCache([], course.id, request.user) about_module = get_module( request.user, request, loc, field_data_cache, log_if_not_found=False, wrap_xmodule_display=False, static_asset_path=course.static_asset_path, course=course )
try: o.head() except (NotImplementedError): raise nose.SkipTest('not implemented on {0}'.format( o.__class__.__name__))
exclude_patterns = []
pass
from textwrap import dedent
if getattr(response, 'xframe_options_exempt', False): return response
self.assertFalse(mgr2._is_consolidated) self.assertFalse(mgr2._known_consolidated)
self.courseware_page.a11y_audit.config.set_scope( include=['div.sequence-nav']) self.courseware_page.a11y_audit.check_for_accessibility_errors()
z,zz = 0,0
frame = self.mframe
if np_version < (1, 7, 1): _ravel = np.ravel else: _ravel = partial(np.ravel, order='K')
self.conn2.rollback() self.conn2.close()
wp = self.panel.to_panel() new_index = wp.major_axis[::5]
parents = self.collection.find(query, {'_id': True}, sort=[SORT_REVISION_FAVOR_DRAFT])
s = Series([1, 2, 3, None, 5]) f(s)
for field in ('traits', 'integrations', 'userAgent'): if field in context['client']: del context['client'][field]
self.log('Adding intercept') x = x_regressor = add_intercept(x) x_filtered = add_intercept(x_filtered) y_regressor = y
for field in model._meta.local_many_to_many: if field.remote_field.through._meta.auto_created: self.delete_model(field.remote_field.through)
suffix = hex(hash(for_name)).upper()[1:] return self.normalize_name(for_name + "_" + suffix)
DATA_DIR = MODULE_DIR.parent.parent.parent.parent / "test" / "data"
self.assertRaises(ValueError, lambda: df == (2, 2)) self.assertRaises(ValueError, lambda: df == [2, 2])
self.login_page.visit()
self._make_eligible() self._purchase_credit() request_uuid = self._initiate_request() self._set_request_status(request_uuid, "approved")
self.store.publish(locations['parent_sibling'], self.user_id) self.store.publish(locations['parent'], self.user_id)
return _get_timezone_name(get_default_timezone())
log.info( 'Failed to get mtime on {0}, ' 'dangling symlink ?'.format(file_path)) continue
set_credit_requirements(self.course.id, requirements)
missing_course_key = CourseKey.from_string('course-v1:FakeOrganization+CN999+CR-FALL99') self.assertIsNone(ccxconapi.course_info_to_ccxcon(missing_course_key)) self.assertEqual(mock_post.call_count, 0)
from __future__ import unicode_literals
np.random.seed(0)
'CUSTOM_COURSE_URLS': False
actions = OrderedDict( (name, (func, name, desc)) for func, name, desc in actions )
return self.allow_empty
cache.set('future_foo', 'bar') self.assertEqual(cache.get('future_foo'), 'bar')
arr[0] = val self.assertNotEqual(new_index[0], val)
if not _is_na_compat(v, nn[0]): raise ValueError
with self.assertRaisesMessage(AssertionError, "Negative indexing is not supported."): Article.objects.all()[-1]
opts.fields = None
if self.forms: return self.forms[0].media else: return self.empty_form.media
state.marked[state.marked == 2] = 0 return _step3
self.set_group_access(self.chapter_location, {self.animal_partition.id: [self.dog_group.id]}) self.check_access(self.red_cat, self.vertical_location, False)
if isinstance(space, CompositeSpace): return all(specifies_all_dtypes(subspace) for subspace in space.components) else: return space.dtype is not None
from yaml.constructor import ConstructorError from salt.utils.yamlloader import SaltYamlSafeLoader import salt.utils
if versions_dict is None or master_branch not in versions_dict: definition_id = self.create_definition_from_data(locator, definition_fields, root_category, user_id).definition_id
self.store.create_child( self.user_id, self.course.location, 'static_tab' )
if x_auth: cherrypy.request.cookie['session_id'] = x_auth
rng = date_range('6/1/2000', '6/15/2000', freq='T') result = rng[0:0].intersection(rng) self.assertEqual(len(result), 0)
from track.backends.django import TrackingLog
from Crypto.PublicKey import RSA import salt.ext.six as six from salt.ext.six.moves import range
from salttesting.helpers import ensure_in_syspath, expensiveTest
self._X_ = X = unique_X self._y_ = y = isotonic_regression(unique_y, unique_sample_weight, self.y_min, self.y_max, increasing=self.increasing_)
res[i] = '_%02X' % ord(c)
'event_return_queue': int,
self.assertLess(old_edited_on, updated_component.edited_on) self.assertEqual(updated_component.edited_by, edit_user)
elif existing['code'] == 404: ret['comment'] = 'A pool with this name was not found.' else: ret = _load_result(existing, ret)
the_int = rng[:10].intersection(rng[10:]) expected = DatetimeIndex([]) self.assert_index_equal(the_int, expected)
if not isinstance(value, six.text_type): if not isinstance(value, (set, list, dict)): value = str(value) values[key] = value
skip_if_no_sklearn() mapping = {'dataset_iterator': 'DatasetKFold'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
self.user = user self.role = role
self.test_init_database()
self.assertRaises(ValueError, store.put, 'b', df, format='fixed', complib='zlib')
class AsyncHTTPTestCase(object): pass
return HttpResponse(content="")
ind = res.argsort() res = res.take(ind) lidx = lidx.take(ind) ridx = ridx.take(ind)
super(TFD, self).__init__(X=data_x, y=data_y, y_labels=y_labels, view_converter=view_converter)
exc_info_on_loglevel=logging.DEBUG
url(r'^(?:foo|bar)(\w+)/$', empty_view, name="disjunction"),
Number.objects.filter(pk=self.n.pk).update(integer=F('integer') / 2, float=F('float') / 42.7)
self.series[5:15] = np.NaN
thumbnail_content = StaticContent(thumbnail_file_location, thumbnail_name, 'image/jpeg', thumbnail_file)
y_true, y_pred, _ = make_prediction(binary=False)
self.q(css='div.problem button.reset').click() self.wait_for_ajax()
with self.assertNumQueries(2): self.client.get('/dates/books/reverse/')
s = StringIO() self.write(s, encoding) return s.getvalue()
saveload_fstr = '{0}.save_load'.format(self.opts['master_job_cache']) self.mminion.returners[saveload_fstr](load['jid'], load)
self.assertIn('Activate Course Enrollment', response.content)
return prlctl('list', args, runas=runas)
from __future__ import absolute_import import logging
from salt.modules import win_service
df = DataFrame([[0, 0]]) df.iloc[0] = np.nan expected = DataFrame([[np.nan, np.nan]]) assert_frame_equal(df, expected)
self._bias_switch = True
data = self.select_dtypes(include=[np.number])
course_id = self.course.id self.assertRaises(ValueError, update_course_structure, course_id)
self.assert_has_xpath(xml_root, xpath, context_dict, exact_num=0)
class Third(models.Model): name = models.CharField(max_length=20) third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')
return [thing.get(x,default) for x in fields]
value = np.zeros_like(X.data)
from django.contrib.sessions.models import Session return Session
return InheritingFieldData( inheritable_names=InheritanceMixin.fields.keys(), kvs=kvs, )
import re
from selenium.webdriver.common.by import By from selenium.webdriver.support import expected_conditions as ec self.wait_until( ec.invisibility_of_element_located((By.CSS_SELECTOR, css_selector)), timeout )
res = cat.reorder_categories(["c", "b", "a"], inplace=True) self.assertIsNone(res) self.assert_categorical_equal(cat, new)
JINJA = jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'debian_ip') ) )
with self.assertRaisesMessage(CommandError, "No fixture named 'unknown' found."): management.call_command("loaddata", "unknown.json", verbosity=0)
link_href = self._find_within(".post-body p a").attrs('href') return link_href[0] if link_href else None
course_org_filter = microsite.get_value('course_org_filter')
from __future__ import absolute_import import json import salt.utils.http import logging
return self.q(css="div.problems-wrapper").text[0]
problem_item.display_name = 'Problem_Item1' problem_item = self.store.update_item(problem_item, self.user_id) self.assertFalse(self.store.has_published_version(problem_item))
cls.audit_course = CourseFactory.create() CourseModeFactory.create(course_id=cls.audit_course.id, mode_slug=CourseMode.AUDIT)
getitem = self._data.__getitem__ promote = self._shallow_copy
review3 = Review(source="Python Daily") self.assertEqual(review3._state.db, None)
self.test_loader._top_level_dir = None
url(r'^get_proctored_exam_results$', 'instructor.views.api.get_proctored_exam_results', name="get_proctored_exam_results"),
set_crontab(
milestones_api.add_course_milestone(prerequisite_course_key, 'fulfills', milestone)
else: eligibility_status = "partial_eligible"
QualityControl.objects.create( headline="Problems in Django", pub_date=datetime.datetime.now(), quality=10, assignee="adrian")
raise NotImplementedError()
self.assertFalse(course.is_cohorted)
return ['Test Section {}'.format(index), 'Test Subsection {}'.format(index), 'Test Problem {}'.format(index)]
cmd = 'grep "^LANG=" /etc/default/locale'
return get_members(mailchimp, list_id, 'unsubscribed')
__virtualname__ = 'file'
X = Xboston y = yboston
return values
cmd = 'Uninstall-Module "{0}"'.format(name) no_ret = _pshell(cmd) return name not in list_modules()
for n_comp in np.arange(1, d): pca = PCA(n_components=n_comp, svd_solver='arpack', random_state=0)
with self.assertRaises(RequestAlreadyCompleted): api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO['username'])
if salt_params: for key, value in six.iteritems(params): params_from_salt[key] = value params_to_use = params_from_salt else: params_to_use = params
return total / coeff_sum
arr = np.array(list('abc'), dtype='S1') self.assertEqual(pd.lib.infer_dtype(arr), compare)
if len(names) == 1: return ret[names[0]] return ret
pass
self.refresh_cached_metadata_inheritance_tree(location.course_key)
self.assertEqual(authenticate(**self.user_credentials), self.user) self.user.is_active = False self.user.save() self.assertIsNone(authenticate(**self.user_credentials))
self.profile.gender = "unknown" with self.assertRaises(IntegrityError): self.profile.save() self.assert_no_events_were_emitted()
from __future__ import unicode_literals
is_increasing = assert_no_warnings(check_increasing, x, y) assert_false(is_increasing)
return create_xblock_info( modulestore().get_item(location), include_child_info=True, include_children_predicate=ALWAYS, course_outline=True )
for (suffix, mode, kind) in SUFFIXES: self.suffix_map[suffix] = (suffix, mode, kind) suffix_order.append(suffix)
while field.remote_field is not None: field = field.remote_field.get_related_field() return field.to_python
url = AUTH_BASE_URL + "/auto_auth" query_str = urllib.urlencode(self._params) if query_str: url += "?" + query_str return url
assert_raises(ValueError, _SigmoidCalibration().fit, np.vstack((exF, exF)), exY)
self.assertOLXIsPublishedOnly(block_list_publish) self.assertOLXIsDraftOnly(block_list_untouched)
except Exception: log.critical('Unexpected error while polling master events', exc_info=True) return None
self.assertTrue(glusterfs.create_volume('newvolume', 'host1:/brick')) self.assertFalse(mock_start_volume.called)
lp_model = label_propagation.LabelSpreading(gamma=0.25, max_iter=5) lp_model.fit(X, y_train) predicted_labels = lp_model.transduction_[unlabeled_set] true_labels = y[unlabeled_set]
self._pydsl_all_decls = {}
params.pop('svc') params.pop('anova') params2.pop('svc') params2.pop('anova') assert_equal(params, params2)
import integration import salt.utils
world.ItemFactory.create( parent_location=parent_location, category='problem', display_name=display_name, data=problem_xml )
management.get_system_username = lambda: 'J\xfalia' self.assertEqual(management.get_default_username(), 'julia')
from salt.states import influxdb_user
self.verify_lists_expected_cohorts([])
for _id in bulk_write_record.structures.viewkeys() - bulk_write_record.structures_in_db: dirty = True
if not os.path.isdir(GPG_KEYDIR): os.makedirs(GPG_KEYDIR)
with self.assertRaisesRegexp(CommandError, ".* requires one or more arguments.*"): call_command('reindex_course_team')
status_headings = sorted( set([status for course in cert_data for status in cert_data[course]]) )
loss_l = self.loss.lower()
if 0 in classes_k: class_prior_k[classes_k == 0] += zeros_samp_weight_sum
while True: rows = cursor.fetchmany(self.QUERY_INTERVAL) if not rows: break for row in rows: yield row
fields.update({ 'language': getattr(settings, 'DEFAULT_COURSE_LANGUAGE', 'en'), 'cert_html_view_enabled': True, })
logger.debug( "Comment Service received PUT request {0} to path {1}" .format(json.dumps(post_dict), self.path) )
if settings.USE_TZ: tz = timezone.get_default_timezone() return timezone.make_aware(dt, tz).astimezone(timezone.utc) else: return dt
_DELETED_SENTINEL = object()
return None
return unicode(obj)
self.assertRaises(Exception, func, p1, tp)
valid_repr = numpy.floor((valid_repr / valid_repr.max())*999) test_repr = numpy.floor((test_repr / test_repr.max())*999)
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON
expected = left_f(df, Timestamp('20010109')) result = right_f(Timestamp('20010109'), df) assert_frame_equal(result, expected)
alias = _weekday_rule_aliases[self.rep_stamp.weekday()] return _maybe_add_count('W-%s' % alias, days / 7)
return {}
class MyForm(forms.Form): text = forms.CharField(label=mark_safe('<i>text</i>')) cb = forms.BooleanField(label=mark_safe('<i>cb</i>'))
easy_weight_list = [0] * 3 easy_weight_list[2] = 1
for cookie_name in [settings.EDXMKTG_LOGGED_IN_COOKIE_NAME, settings.EDXMKTG_USER_INFO_COOKIE_NAME]: response.delete_cookie( cookie_name.encode('utf-8'), path='/', domain=settings.SESSION_COOKIE_DOMAIN ) return response
url(r'^site_media/(?P<path>.*)$', static.serve, {'document_root': media_dir}),
return b64encode(force_bytes(self.value_from_object(obj))).decode('ascii')
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
error_code = 'course_id_not_provided' if not is_ccx: log.info('Master course ID not provided') error_code = 'master_course_id_not_provided'
(ok_, err, sl_) = _unify_sources_and_hashes(source=source, source_hash=source_hash, sources=sources, source_hashes=source_hashes) if not ok_: return _error(ret, err)
return assertIsNot(expr, None, msg)
self._assert_course_verification_status(VERIFY_STATUS_APPROVED)
continue
header_parser = struct.Struct('L') ReparseTag, = header_parser.unpack(reparse_data[:header_parser.size]) if not ReparseTag & 0xA000FFFF == 0xA000000C: return False else: return True
DELAY = 0.5
output = self._run_command(self.TEST_ORG, query_interval=4)
#pylint: disable=E0602
data = "A;B\n1;2\n3;4"
import salt.state import salt.payload from salt.exceptions import SaltRenderError
setattr(instance, self.cache_name, value)
if (value is not None and value == value and method is None and limit is None): self._default_fill_value = value
exp_val = "b"
django_settings.FIELDS_STORED_IN_SESSION = _FIELDS_STORED_IN_SESSION
from __future__ import unicode_literals
if "the 'axes' parameter is not supported" in msg: msg += " for {klass} instances".format(klass=klass)
self.conn.create_stage.side_effect = ClientError(error_content, 'create_stage') self.conn.create_deployment.side_effect = ClientError(error_content, 'create_deployment')
correct = ['unknown'] * len(idset) messages = [''] * len(idset) overall_message = ""
indexer = indexer['key']
gs = GridSearchCV(clf, [{'parameter': [0, 1, 2]}], scoring='accuracy', refit=False, error_score='raise')
return unicode(self.course_key)
{% from "doc1.sls" import var1, var2 as local2 %} {{ var1.foo }} {{ local2.bar }}
return not isinstance(obj, six.string_types) and isinstance(obj, Iterable)
with check_mongo_calls(max_find.pop(0), max_send): self.assertFalse(self.store.has_item(self.fake_location))
self.get_user_mock = self.setup_patch('courseware.models.user_by_anonymous_id', None) submissions_score_set_handler(None, **SUBMISSION_SET_KWARGS) self.signal_mock.assert_not_called()
return (self._x.values * self._beta_matrix(lag=0)).sum(1)
assert np.allclose(X, np.dot(S_, A_.T) + ica.mean_)
self.assertEqual(repr(idx), expected)
from salt.states import mysql_user import salt
return string.rstrip(','), imports
return StackedBlocks(layers)
from salt.ext.six import string_types
self.assertEqual(response.status_code, 200) result = json.loads(response.content)
_version = "2.0"
oa = OAS() loglik_oa = oa.fit(X_train).score(X_test)
data = BytesIO(data) for chunk in iter(lambda: data.read(MAX_SOCKET_CHUNK_SIZE), b''): self._write(chunk) self._flush()
return frequencies.Resolution.get_str(self._resolution)
from django.contrib.gis.utils import ogrinspect shp_file = 'data/mapping_hacks/world_borders.shp' model_name = 'WorldBorders'
@override_settings(DEBUG=True) class SelectForUpdateTests(TransactionTestCase):
n_samples = 12 n_features = 2 n_iter = 10 rng = np.random.RandomState(42) X = rng.rand(n_samples, n_features)
data = ['0', '1', '2'] self.assertRaises(TypeError, Int64Index, data)
return self.headline
x, new_x = x._values.astype('i8'), new_x.astype('i8')
self.q(css='.dropdown-menu li a').nth(1).click()
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index=0, page='xyzzy')
assert_array_almost_equal(coef_unsorted.toarray(), coef_sorted.toarray()) assert_array_almost_equal(sparse_svc.predict_proba(X_test_unsorted), sparse_svc.predict_proba(X_test))
ret = _psql_prepare_and_run(['-c', query], user=user, host=host, port=port, maintenance_db=maintenance_db, password=password, runas=runas) return ret['retcode'] == 0
Y = rng.random_sample((3, 4)) assert_raises(ValueError, paired_distances, X, Y)
raise NotImplementedError
self.assertEqual( feedgenerator.rfc3339_date(datetime.date(2008, 11, 14)), "2008-11-14T00:00:00Z" )
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21')
'pidfile': str,
def __init__(self, custom_optional_arg=None, model=None, query=None, using=None, hints=None): super(CustomInitQuerySet, self).__init__(model=model, query=query, using=using, hints=hints)
self.modulestore.cache_items(self, [block_key], course_key, lazy=self.lazy) json_data = self.module_data.get(block_key) if json_data is None: raise ItemNotFoundError(block_key)
ticket_url = self._zendesk_instance.create_ticket(data=ticket) return zendesk.get_id_from_url(ticket_url)
import salt.utils.reactor import salt.syspaths import salt.utils.event import salt.utils.process from salt.ext.six import string_types
from pylearn2.costs.mlp import L1WeightDecay as _L1WD from pylearn2.costs.mlp import WeightDecay as _WD
course_key = CourseLocator(org="mockx", course="100", run="2015") return BlockUsageLocator(course_key, block_type='mock_type', block_id="mock_id")
partial( wrap_xblock, 'PreviewRuntime', display_name_only=display_name_only, usage_id_serializer=unicode, request_token=request_token(request) ),
resp = self.client.ajax_post( self.url, data={'tabs': [{'tab_id': tab_id} for tab_id in invalid_tab_ids]}, ) self.check_invalid_tab_id_response(resp)
unstacked = self.ymd.unstack() restacked = unstacked.stack() assert_frame_equal(restacked, self.ymd)
if has_wildcard: match_list = set(atom) else: match_list = set(_porttree().dbapi.xmatch("match-all", atom))
cases = [0.5, 'xxx'] methods = [idx.intersection, idx.union, idx.difference, idx.symmetric_difference]
from scipy import misc face = misc.face(gray=True)
try: master, self.pub_channel = yield self.eval_master( opts=self.opts, failed=True) except SaltClientError: pass
return (isinstance(batch, np.ndarray) or scipy.sparse.issparse(batch) or str(type(batch)) == "<type 'CudaNdarray'>")
import salt.utils.jid import salt.returners import salt.loader from salt.template import compile_template
if bypass_activation_email: self.assertFalse(mock_send_mail.called) else: self.assertTrue(mock_send_mail.called)
from django.core import management
if axis == 1 and self._is_mixed_type and self._is_datelike_mixed_type: numeric_only = True
import logging
from __future__ import unicode_literals
from __future__ import absolute_import import logging from copy import copy
def ordered_dict_presenter(dumper, data): return dumper.represent_dict(list(data.items()))
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 0)
return launchctl('list', label, return_stdout=True, output_loglevel='trace', runas=runas)
from __future__ import unicode_literals
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.go_to_tab_and_assert_problem(1, self.problem1_name)
([]),
first_transaction.delete() second_transaction.delete() self._assert_history_transactions([])
os.environ[str("DJANGO_COLORS")] = str("nocolor")
from salt.config.schemas import ssh as ssh_schemas from salt.config.schemas.minion import MinionConfiguration
import integration
return xblock._edit_info.get('published_by')
message = "<script>alert('XSS');</script>" x = "<string>{}</strong>".format(message)
user = User.objects.get(username='testclient') form_for_data = UserChangeForm(instance=user) post_data = form_for_data.initial
self.initialize_course( course_factory_kwargs={ 'user_partitions': [user_partition] } )
'log_fmt_console': str,
setattr(hasher, attr, old_value)
return 'Error: table_type hook and priority required'
from __future__ import absolute_import from datetime import datetime from dateutil.relativedelta import relativedelta import json import pprint import tempfile
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
BASE_URL = os.environ.get('test_url', 'http://localhost:8003')
return (self.network_address.is_unspecified and self.broadcast_address.is_unspecified)
self.assertEqual( RasterModel._meta.get_field('rast').verbose_name, 'A Verbose Raster Name' )
supports_raster = False
from __future__ import absolute_import
}, index=range(3))
from __future__ import absolute_import
__module__ = 'A'
notes = deepcopy(self.notes) notes.reverse() return notes
return self.provider.provider_id + '_unlink_form'
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
i, j = np.triu_indices(X.shape[0], k=1) X = X[i, j]
htmlhelp_basename = 'scikit-learndoc'
return iter(sorted(self._stacks.keys(), key=lambda stack: (self.stack_calls(stack), stack), reverse=True))
rng = np.random.RandomState(0)
with check_mongo_calls(1): self._run_command()
read_data = "".join(textwrap.dedent(c) for c in content) return patch.object(pavelib.i18n, 'open', create=True, new=mock_open(read_data=read_data))
from salt.states import postgres_cluster
max_squared_sum = 4 + 9 + 16 max_squared_sum_ = row_norms(X, squared=True).max() assert_almost_equal(max_squared_sum, max_squared_sum_, decimal=4)
with pd.option_context('max_rows', None):
target = ibase._ensure_index(target) if isinstance(target, CategoricalIndex): target = target.categories codes = self.categories.get_indexer(target) return self._engine.get_indexer_non_unique(codes)
if v[-1] < (1. - self.prop_decrease) * self.best_value: self.countdown = self.N else: self.countdown = self.countdown - 1
if not isinstance(obj.save_on_top, bool): return must_be('a boolean', option='save_on_top', obj=obj, id='admin.E102') else: return []
msg = "Manager isn't available; AbstractBase1 is abstract" with self.assertRaisesMessage(AttributeError, msg): AbstractBase1.objects.all()
self.q(css=BROWSE_BUTTON_CSS).click()
queryset = changelist.get_queryset(request) self.assertEqual(list(queryset), [self.bio_book])
raise NotImplementedError('subclasses of ListFilter must provide a queryset() method')
f = TypedMultipleChoiceField(choices=[(1, "+1"), (-1, "-1")], coerce=int, required=False) self.assertEqual([], f.clean([]))
if 'enabled' not in kwargs: schedule[name]['enabled'] = True
from salt.states import sysctl
class TestObject:
continue
MESSAGE = _('The specified remote branch is not available.')
colors_hsv = colors_hsv.reshape((1, )+colors_hsv.shape) colors_rgb = matplotlib.colors.hsv_to_rgb(colors_hsv) colors_rgb = colors_rgb[0]
return (0., 0., 0., 0)
click_css(self, 'a.duplicate-button', source_index)
self.login() response = self.client.get('/logout/next_page/') self.assertEqual(response.status_code, 302) self.assertURLEqual(response.url, '/somewhere/')
if not is_credit_course(course_key): return
self.navigate_to_video()
return {"result": "inclusion_one_param_from_template - Expected result: %s" % arg}
template_name_suffix = '_archive_month'
#texinfo_no_detailmenu = False
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch
expected = (-96.8016128540039, 29.7633724212646, -95.3631439208984, 32.782058715820)
newnode['hostname'] = vm_['name'] newnode['ostemplate'] = vm_['image']
SignatureValidator.verify = MagicMock(return_value=True) self.consumer = models.LtiConsumer( consumer_name='consumer', consumer_key=LTI_DEFAULT_PARAMS['oauth_consumer_key'], consumer_secret='secret' ) self.consumer.save()
log = logging.getLogger(__name__)
df["bb"]
ints = subarr.view('i8') subarr = tslib.tz_localize_to_utc(ints, tz, ambiguous=ambiguous)
'oauth2_provider',
return not re.search(r'manufacturer|to be filled|available|asset|^no(ne|t)', val, flags=re.IGNORECASE)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.service.set_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' )
import salt.utils
if size is None: size = self._chunksize return self.read(nrows=size)
raise NotImplementedError
self.assertEqual(event.dt, dt.replace(microsecond=0))
options = _get_options(ret=None)
grains['virtual_subtype'] = 'Xen PV DomU'
time_step = 5 return np.zeros((time_step, batch_size, self.dim), dtype=dtype)
django_settings.SOCIAL_AUTH_LOGIN_REDIRECT_URL = _SOCIAL_AUTH_LOGIN_REDIRECT_URL
return None
continue
self.run_function('pkg.remove', [DEL_PKG]) del_list = self.run_function('pkg.list_pkgs') try: self.assertNotIn(DEL_PKG, del_list) except AssertionError: raise
Z = Z.reshape(xx.shape) plt.contourf(xx, yy, Z, cmap=plt.cm.Paired, alpha=0.8)
from __future__ import absolute_import import os import random import string import time
page.wait_for_ajax()
destroy(vm_['name'])
>>> cut_calls = aapl.get_near_stock_price(call=True, above_below=3)
self.assertEqual(self.ts.ix[d1], self.ts[d1]) self.assertEqual(self.ts.ix[d2], self.ts[d2])
data = 'a,b,c\n4,5,6\n ' result = self.read_csv(StringIO(data)) tm.assert_frame_equal(result, expected)
bytes_to_pad = AES.block_size - len(data) % AES.block_size return data + (bytes_to_pad * chr(bytes_to_pad))
mine.__salt__ = {} mine.__opts__ = {}
problem_location = self.problem_location(problem_url_name) modx_url = self.modx_url(problem_location, 'problem_reset') resp = self.client.post(modx_url) return resp
self.assertRaises(ValueError, read_csv, 's3://pandas-test/tips.csv' + ext, compression=comp)
from salt.ext.six import string_types import salt.utils
return self._modulestore._get_modulestore_for_courselike(locator)
unser.index = [str(i) for i in unser.index] unser.columns = [str(i) for i in unser.columns]
if BulkEmailFlag.feature_enabled(course_key): sections.append(_section_send_email(course, access))
def test_deprecation(self): with tm.assert_produces_warning(FutureWarning): SparsePanel()
from email.headerregistry import Address from email.errors import InvalidHeaderDefect, NonASCIILocalPartDefect
def _run_parallel_map_providers_query(*args, **kw): return communicator(run_parallel_map_providers_query)(*args[0], **kw)
self._enable_cohorting() self._create_verified_cohort() self._enable_verified_track_cohorting() self.assertTrue(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(self.course.id)) self._enroll_in_course()
index = rng.randint(0, len(correct_choices) - 1) correct_choice = correct_choices[index] solution_id = correct_choice.get('explanation-id')
self._assure_grouper() return self.grouper.groups
course_key = CourseKey.from_string(course_id) self.assertTrue(CreditCourse.objects.filter(course_key=course_key, enabled=enabled).exists())
PROFILE_IMAGE_MAX_BYTES = 1000 PROFILE_IMAGE_MIN_BYTES = 1000
for gfk in gfks: if gfk.ct_field == obj.ct_field and gfk.fk_field == obj.ct_fk_field: return []
return False
user = data['user'] profile = UserProfile.objects.get(user=user) return profile.name
if os.path.isfile(testfile): os.unlink(testfile)
from . import signals
order = 'C'
warn("'labels' is deprecated. Use 'codes' instead", FutureWarning, stacklevel=2) return self.codes
assert start >= 0 assert stop > start assert stop <= X.shape[0] X = X[start:stop, :] y = y[start:stop, :] assert X.shape[0] == y.shape[0]
ct = self.get(pk=id) self._add_to_cache(self.db, ct)
return self._get_fields_cache[cache_key]
time.sleep(1) if groups: chgroups(name, groups) return True
if __opts__['test']: ret['result'] = None ret['changes'] = {'reg': {'Will add': add_change}} return ret
from __future__ import absolute_import import copy import logging
if force_must_retry: attempt.status = 'must_retry'
if not dataset: ret['error'] = 'one or more snapshots must be specified'
if self._content_length == 0: return QueryDict(encoding=self._encoding), MultiValueDict()
class DraftReorderTestCase(ModuleStoreTestCase):
self.assertRaises(SaltInvocationError, parallels.snapshot_id_to_name, name, '{8-4-4-4-12}')
def __init__(self, rng): self.rng = rng
self.assertRaises(KeyError, lambda: df.resample('H')[0])
self.check_assertion_structure(assertion, response['results'][0])
relative_url = url[len(self.base_url[2]):] return url2pathname(relative_url)
from __future__ import absolute_import import logging import json import yaml
new_blocks = [] if self.ndim > 1: for i, ref_loc in enumerate(self.mgr_locs): m = mask[i] v = new_values[i]
if resolver.urlconf_module is None: six.reraise(*exc_info) callback, param_dict = resolver.resolve_error_handler(500) return callback(request, **param_dict)
window = tensor.alloc(0.0, batch, channel, res_r, res_c, pr, pc) window.name = 'unravlled_winodows_' + name
arrays = _homogenize(arrays, index, dtype)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.connection.close()
boston = datasets.load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
result.append(".")
from __future__ import absolute_import
deploy_d_from_syspaths = os.path.join( syspaths.CONFIG_DIR, 'cloud.deploy.d' )
rval = shared(obj.get_value()) obj.__getstate__ = None
X = iris.data y = iris.target
self.assertEqual( len(Author.objects.annotate(Avg('friends__age')).values()), 9 )
rh_service.__salt__ = {}
for f in files: i = _get_pkg_id_from_pkginfo(os.path.join(temp_dir, f)) if len(i): package_ids.extend(i)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=True) self.assertTrue(module.should_show_reset_button())
minor_labels = np.repeat(np.arange(len(frame.columns)), lengths)
self.assertAlmostEqual(axis.get_ticklocs()[0], edge)
text += trail trail = ''
return self.map.get(key, default)
super(CrowdsourcehinterProblemPage, self).__init__(browser)
output = self.engine.render_to_string('inheritance16') self.assertEqual(output, '12out3_')
sample_silhouette_values = silhouette_samples(X, cluster_labels)
self.assertEqual(req_status[1]["status"], None) self.assertEqual(req_status[1]["order"], 1)
self.cleaned_data['requested_fields'] |= {'field1', 'field2', 'student_view_data', 'block_counts'} self.assert_equals_cleaned_data()
if self.display_organization: return self.display_organization return self.org
course_mode_info = { enrollment.course_id: complete_course_mode_info( enrollment.course_id, enrollment, modes=course_modes_by_course[enrollment.course_id] ) for enrollment in course_enrollments }
os.chmod(path, stat.S_IWUSR) func(path)
if metric == 'precomputed' and sparse.issparse(X): neighborhoods = np.empty(X.shape[0], dtype=object)
self.assertIsNone(utils.find_staff_lock_source(self.orphan))
raise NotImplementedError("Not supported for type %s" % type(self).__name__)
expected = df.copy()
vm_['pub_key'] = None vm_['priv_key'] = None
value = loader.construct_scalar(node) if '.' not in value: raise yaml.YAMLError("import tag suffix contains no '.'") return try_to_import(value)
id2 = models.AutoField(primary_key=True) name2 = models.CharField(max_length=50)
alert_ids = get_alert_config(deployment_id, api_key=api_key, profile=profile)
_ = lambda text: text
self.configure_google_provider(enabled=True) self.configure_facebook_provider(enabled=True)
grains['os_family'] = _OS_FAMILY_MAP.get(grains['os'], grains['os'])
super(AdminCourseModeFormTest, self).setUp() self.course = CourseFactory.create()
try: import pythoncom import wmi import win32net import win32api import win32con import pywintypes from ctypes import windll HAS_WIN32NET_MODS = True except ImportError: HAS_WIN32NET_MODS = False
response = self.client.get(collector_url) self.assertContains(response, 'name="doohickey_set-0-code"')
LTI_USER_EMAIL_DOMAIN = 'lti.example.com'
store['a'] = ts store['b'] = df del store['a'] del store['b'] self.assertEqual(len(store), 0)
netapi = salt.netapi.NetapiClient(__opts__) if not netapi._is_master_running(): raise salt.exceptions.SaltDaemonNotRunning( 'Salt Master must be running.')
value = str(Header(value, 'utf-8', maxlinelen=sys.maxsize).encode())
axes = ['b', 0, 1, 'c'] random.shuffle(axes) axes = tuple(axes) print('axes:', axes)
return cls(entry, module)
res2 = DataFrame() i = 0 sizes = [5, 5, 5, 5, 2]
m = "'init' must be 'pca', 'random' or a NumPy array" assert_raises_regexp(ValueError, m, TSNE, init="not available")
assert V is orig_V assert drop_mask is orig_drop_mask
pieces["distance"] = int(mo.group(2))
pass
import salt.utils.jid import salt.returners
required_boto3_version = '1.2.1'
self.assertRolledBack() self.assertFalse(email_user.called)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
self.system.error_tracker(msg) return 'Oops, couldn't load grommet'
return cls( model._meta.app_label, model._meta.object_name, fields, options, bases, managers, )
prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups) self._prefetch_done = True
if PY3: coerce = lambda x: x else: coerce = unicode
return None if value == "" else value
JoblibException.__init__(self, message, etype) self.message = message self.etype = etype
self.video.show_captions()
self.assertQuerysetEqual(Valid.objects.all(), [])
result = df.iloc[0, 0] self.assertTrue(isnull(result))
result = self.frame.applymap(lambda x: x * 2) tm.assertIsInstance(result, SparseDataFrame)
self.logout() self.login(self.global_staff_user) self.assertTrue(self.enroll(self.course))
sparse_classifier = BaggingClassifier( base_estimator=CustomSVC(decision_function_shape='ovr'), random_state=1, **params ).fit(X_train_sparse, y_train) sparse_results = getattr(sparse_classifier, f)(X_test_sparse)
return iter(self._iterable_class(self))
options = {'statsd': True}
if None in distribution:
thumbnail_location=asset['thumbnail_location'], import_path=asset['import_path'], locked=asset.get('locked', False)
rng = np.random.RandomState(0) n_samples, n_features = 10, 5
if not issubclass(obj.formset, BaseModelFormSet): return must_inherit_from(parent='BaseModelFormSet', option='formset', obj=obj, id='admin.E206') else: return []
manage.py ... transfer_students -f edX/Open_DemoX/edx_demo_course -t edX/Open_DemoX/new_demoX,edX/Open_DemoX/edX_Insider
except self.LibraryValueNotFoundException: val = None if val is None: raise ValueError("Key '%s' not found" % key) return val
def makeFloatSeries(name=None): index = makeStringIndex(N) return Series(randn(N), index=index, name=name)
#pylint: disable=E0602
self.now = datetime.datetime.now()
content = list(lib.to_object_array(data).T)
cache[cache.keys()[0]] = (None, {'a': 17})
key = safe_key('key', 'prefix', 'a' * 300) self.assertTrue(self._is_valid_key(key))
grads = coef_grads + intercept_grads self._optimizer.update_params(grads)
kwargs.update(signing_policy)
assert_raises(ValueError, cval.cross_val_score, svm, linear_kernel.tolist(), y)
return
if index.is_unique: new_indexer = index.get_indexer([new_index[-1]]) if (new_indexer != -1).any(): return self._setitem_with_indexer(new_indexer, value)
cache.delete(CreditCourse.CREDIT_COURSES_CACHE_KEY)
del installed_packages_list[package.name]
super(TemporaryFileUploadHandler, self).new_file(*args, **kwargs) self.file = TemporaryUploadedFile(self.file_name, self.content_type, 0, self.charset, self.content_type_extra)
compressor = None
continue
xl_format = self.book.add_format()
self.assertEqual(response_obj['return'][0]['minion']['id'], 'minion')
if existing['code'] == 200:
self.wait_for_ajax() self.wait_for_element_presence(MODAL_SELECTOR, 'Validation Modal is present')
rep = partial(np.repeat, repeats=np.add.reduceat(inc, idx))
y = check_array(y, accept_sparse='csr', ensure_2d=False, dtype=None)
df = tm.makeTimeDataFrame().reindex(columns=['A']) tm.assert_series_equal(df.squeeze(), df['A'])
return self._queryset_class(model=self.model, using=self._db, hints=self._hints)
if isinstance(self._selected_obj, pd.Series): return 'series' return 'dataframe'
for l in [slice(3.0, 4), slice(3, 4.0), slice(3.0, 4.0)]:
import salt.output import salt.minion
assert_raises(ValueError, enc.fit, [[0], [-1]])
a, b = first, second assert a is b, "%s: %r is not %r" % (msg.format(a, b), a, b)
course = CourseFactory.create(display_name="Test Course")
proc.wait()
continue
print("Estimated coefficients (true, normal, RANSAC):") print(coef, model.coef_, model_ransac.estimator_.coef_)
self.assertFalse(has_access(self.normal_student, 'load', self.content, self.course.id))
self.assertEquals(self.get_about_page_link(), "//localhost:8000/courses/mitX/101/test/about")
from __future__ import print_function
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
r = self.series.resample('20min') g = self.series.groupby(pd.Grouper(freq='20min'))
for cls, fields_list in class_dict.items(): for fields in fields_list: yield (cls, fields)
try: if not fnmatch.fnmatch(repo.url, remote): continue except TypeError: if not fnmatch.fnmatch(repo.url, six.text_type(remote)): continue
if not settings.FEATURES.get('CERTIFICATES_HTML_VIEW', False): return False
self._test_visible_to_students(True, 'public_released', self.past, publish=True)
for vertical in verticals: self.assertEqual(course.xqa_key, vertical.xqa_key) self.assertEqual(course.start, vertical.start)
estimator.set_params(k=1)
self.assertEqual(poly, OGRGeometry(p.wkt)) self.assertNotEqual(poly, prev)
raise NotImplementedError
self.hash_functions_ = [] self.trees_ = [] self.original_indices_ = []
result = self.panel.reindex(items=self.panel.items, major=self.panel.major_axis, minor=self.panel.minor_axis, copy=False)
#========================================================================== #smtp inet n - n - - smtpd if private == 'y': private = '-'
found_rerun = CourseRerunState.objects.find_first(course_key=self.course_key) found_rerun_state = {key: getattr(found_rerun, key) for key in self.expected_rerun_state} self.assertDictEqual(found_rerun_state, self.expected_rerun_state) return found_rerun
old_center_buffer = np.zeros(n_features, np.double)
'sudo_user': str,
if original_author_id is not None and user.id != original_author_id: return if getattr(post, "context", "course") == TEAM_DISCUSSION_CONTEXT: CourseTeamMembership.update_last_activity(user, post.commentable_id)
self.assertEquals(block_counts_for_course['chapter'], 2)
self.assertEqual(sql_for_table(Article), sql_for_table(ArticleRef))
@decorators.memoize def __detect_os(): return salt.utils.which('ipvsadm')
from __future__ import absolute_import
response = self._get_page(payment_flow, course.id) self._assert_contribution_amount(response, "12.34")
wua_searcher = wua_session.CreateUpdateSearcher() wua_download_list = win32com.client.Dispatch('Microsoft.Update.UpdateColl') wua_downloader = wua_session.CreateUpdateDownloader()
__ = CourseOverview.get_from_id(self.course.id)
return True
sh("i18n_tool generate --strict")
user_profile = UserFactory(username=user.username, email=user.email).profile user_profile.allow_certificate = not is_embargoed user_profile.save()
self.assertIs(form['name'], name)
random_state = check_random_state(random_state) r = random_state.randint(0, n_samples_abnormal, 3377) abnormal_samples = abnormal_samples[r] abnormal_targets = abnormal_targets[r]
der = asn1.DerSequence() der.decode(cert_asn1)
if (isinstance(e, AttributeError) and not isinstance(current, BaseContext) and bit in dir(current)): raise
continue
from __future__ import unicode_literals
return obj
structure['blocks'][block_key] = content
ext_user = User.objects.get(email=self.ext_user.email) self.assertFalse(auth.user_has_role(ext_user, CourseStaffRole(self.course.id)))
return parent.template
if generate_translation: old_langs = set(old_metadata.get('transcripts', {})) if old_metadata else set() new_langs = set(item.transcripts)
for logger in loggers: logger.setLevel(logging.NOTSET) logger.removeHandler(import_log_handler)
src_estate, src_yard, src_share = msg['route']['src'] salt.transport.jobber_estate_name = src_estate salt.transport.jobber_yard_name = src_yard
CourseFinanceAdminRole(self.course.id).add_users(self.instructor)
return {'default_impl': True}
all_ = kwargs.pop('all', False)
'milestones',
course_key = SlashSeparatedCourseKey('mitX', '101', 'test') return utils.get_lms_link_for_about_page(course_key)
if sp.issparse(X): centers = _k_means._centers_sparse(X, labels, n_clusters, distances) else: centers = _k_means._centers_dense(X, labels, n_clusters, distances)
super(XBlockAcidBase, self).setUp()
first_request = api.create_credit_request(self.course_key, self.PROVIDER_ID, self.USER_INFO["username"])
cls._assert_block_values(block_structure, cls.collect_data_key)
return func(self, other)
from __future__ import absolute_import import re
bindvolumes = volumes
result = df.drop_duplicates('A') expected = df.iloc[[0, 2, 3, 5, 7]] tm.assert_frame_equal(result, expected)
file = SimpleUploadedFile("mode_test.txt", b"content") self.assertFalse(hasattr(file, 'mode')) gzip.GzipFile(fileobj=file)
if self._convert_dates: for c, o in zip(columns, original_columns): if c != o: self._convert_dates[c] = self._convert_dates[o] del self._convert_dates[o]
rerun_state = CourseRerunState.objects.update_state( course_key=self.course.id, new_state=state, allow_not_found=True ) CourseRerunState.objects.update_should_display( entry_id=rerun_state.id, user=UserFactory(), should_display=should_display )
if open_jids: for jid in open_jids: self.event.unsubscribe(jid)
plt.figure() for i in xrange(self.n_colors): plt.plot(x, plots[i], color=self.colors_rgb[i], alpha=.5)
fields = self.q(css='div.problem div.capa_inputtype.textline input') fields = fields.nth(input_num) if input_num is not None else fields fields.fill(text)
paid_course = CourseMode.is_white_label(self.course_id) if paid_course or CourseMode.is_professional_slug(self.mode): return True return False
mask = left_mask ^ right_mask left[left_mask & mask] = fill_value right[right_mask & mask] = fill_value
from __future__ import unicode_literals
self.assertFalse(module_has_submodule(test_module, 'no_such_module')) with self.assertRaises(ImportError): import_module('utils_tests.test_module.no_such_module')
add_action(task_definition=task_definition, **kwargs)
additional_noise[np.abs(additional_noise) < .997] = 0
expected = ts[1:]
import salt.utils from salt.exceptions import SaltRenderError
from __future__ import absolute_import
X = JUNK_FOOD_DOCS
self.attempt_login(403, return_to="http://apps.cs50.edx.or")
attempts_left_open = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="0", due=self.tomorrow_str) self.assertFalse(attempts_left_open.answer_available())
for app_label, migrations in self.migrations.items(): for migration in migrations: migration.dependencies = list(set(migration.dependencies))
#html_split_index = False
if self.list_path: self.path = reverse(self.list_path)
row = self.n_eigen + self.minibatch_index self.Xt[row] = x
pass
self._create_library() self._create_xblock_children(self.library_location, self.children) return self
'mobile_api', 'social.apps.django_app.default',
self.assertTrue(num_orig_tabs >= 5)
kwargs = {'script': script, 'cfn': 'check_func'} xml_str = CustomResponseXMLFactory().build_xml(**kwargs)
self.assertEqual(request.get_port(), '8080')
def rval(): X, y = self.dataset.get_batch_design(self.batch_size, include_labels=True) self.y_cache = y return X return rval
import salt.utils import salt.utils.locales import salt.utils.systemd import salt.ext.six as six from salt.exceptions import CommandExecutionError
return list(itertools.chain(self.default_validators, self._validators))
coffee_file_path = os.path.dirname(__file__) + "/test_files/js/*.coffee" os.system("node_modules/.bin/coffee -c %s" % (coffee_file_path))
submissions_score_reset_handler(None, **SUBMISSION_RESET_KWARGS) self.get_user_mock.assert_called_once_with('anonymous_id')
used_all_attempts = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="1", due=self.tomorrow_str) self.assertTrue(used_all_attempts.answer_available())
drop_idx = [active.pop(ii) for ii in idx]
import salt.utils import salt.utils.fsutils from salt.exceptions import CommandExecutionError
text = f.widget.format_value(result) self.assertEqual(text, "01:30:05 PM")
elif is_datetimelike_v_numeric(left, right): return False
async_pub = self._gen_async_pub() ret = self._proc_function(self.opts['fun'], low, user, async_pub['tag'], async_pub['jid'],
the_html2 = problem.get_html() self.assertEquals(the_html, the_html2)
response = self.client.get(course_one_teams_url) self.assertIn('"teams": {"count": 1', response.content)
self.assertContains(response, k, status_code=500)
with patch('capa.capa_problem.LoncapaProblem.grade_answers') as mock_grade: mock_grade.side_effect = exception_class('test error')
if e.errno != errno.ENOENT: raise
ds = DataSource(source.ds)
if not self.check_enough_space(remote_name, local_name): log.warning(common_msg + "File %s not cached: Not enough free space" % remote_name) self.release_writelock() return filename
import logging import re import socket
if self.signal_handler: self.signal_handler.send("item_deleted", usage_key=usage_key, user_id=user_id)
result = Index(['b', 'c', 'd'])
org_filter_out_set = microsite.get_all_orgs()
self._setup_mode_and_enrollment(self.PAST, "verified")
uncertainty_index = np.argsort(pred_entropies)[-10:]
self.values = SparseArray(v, sparse_index=self.sp_index, kind=self.kind, dtype=v.dtype, fill_value=self.values.fill_value, copy=False)
if not login_url: login_url = settings.LOGIN_URL login_url = resolve_url(login_url) return logout(request, login_url, extra_context=extra_context)
argtypes = [WKB_READ_PTR, c_char_p, c_size_t] restype = GEOM_PTR errcheck = staticmethod(check_geom)
assert_equal(len(lars.alphas_), 7)
field_data['attempts'] = int(attempts)
url_path = "course_team"
if need_space is not True and not need_space[1]: yield (need_space[0], "E225 missing whitespace around operator") need_space = False
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( patch, MagicMock, NO_MOCK, NO_MOCK_REASON )
with context.push(var=output): return self.filter_expr.resolve(context)
user_answer = flat_user_answer(user_answer)
try: from libcloud.compute.base import NodeState HAS_LIBCLOUD = True except ImportError: HAS_LIBCLOUD = False
if self.kind == 'period' and not isinstance(result.index, PeriodIndex): result.index = result.index.to_period(self.freq) return result
is_compressed = False
for app in ENV_TOKENS.get('ADDL_INSTALLED_APPS', []): INSTALLED_APPS += (app,)
_y = np.vstack((y, np.array(y) * 2)).T clf = ForestClassifier(random_state=0).fit(X, _y)
from __future__ import absolute_import
import salt.ext.six as six
self.access = accesskey self.user_id = userid return True
aggs = City.objects.aggregate(Extent('location__point'))
return (self.network_address.is_loopback and self.broadcast_address.is_loopback)
_, sap, _ = randomized_svd(X, k, power_iteration_normalizer=normalizer, random_state=0)
scores = cval.cross_val_score(clf, X, y) assert_array_equal(scores, clf.score(X, y))
self.auth_page.visit() self.user_info = self.auth_page.user_info self.course_info_page.visit() self.tab_nav.go_to_tab('Course')
pro = Book.objects.create(title="Pro Django", published=datetime.date(2008, 12, 16))
for minion in minions: minion.shutdown()
(False, "en", "lms-footer.css"), (False, "ar", "lms-footer-rtl.css"),
selected = [td for td in tds if td.get_attribute('class') == 'selected']
self.client.logout()
expected_classes = ['Different persons', 'Same person'] assert_array_equal(lfw_pairs_train.target_names, expected_classes)
readonly_fields = ('sender',)
try: user_preferences = get_user_preferences(request.user, username=username) except UserNotAuthorized: return Response(status=status.HTTP_403_FORBIDDEN) except UserNotFound: return Response(status=status.HTTP_404_NOT_FOUND) return Response(user_preferences)
self.q(css=self._bounded_selector('a.action-view')).first.click()
import salt.ext.six as six HAS_NEUTRON = False try: from neutronclient.v2_0 import client from neutronclient.shell import NeutronShell
train_data, test_data, target_train, target_test = train_test_split( data, target, test_size=.1, random_state=0)
U = rng.randn(self.dim, self.dim) U, _ = scipy.linalg.qr(U)
self.assertRaises(ValueError, ser.replace, [1, 2, 3], [np.nan, 0])
self.assertEqual(params['override_custom_receipt_page'], self.CALLBACK_URL)
self.assertEqual(len(httpretty.httpretty.latest_requests), 3)
student_module = StudentModule.objects.filter( course_id=self.course.id, student=self.student_user ) baseline = BaseStudentModuleHistory.get_history(student_module) self.assertEqual(len(baseline), 3)
pass
self.base_extauth_bypass_sending_activation_email(False)
results[guid]['Categories'] = [] for category in update.Categories: results[guid]['Categories'].append(category.Name)
from __future__ import absolute_import from __future__ import print_function import logging
app_config = apps.get_containing_app_config(module)
from salttesting.helpers import ensure_in_syspath, destructiveTest ensure_in_syspath('../../')
func = wrapper
kwargs.setdefault("name", "Dummy") kwargs.setdefault("backend_name", "dummy") return cls.configure_oauth_provider(**kwargs)
is_enrolled = CourseEnrollment.is_enrolled(self.user, self.course.id) self.assertFalse(is_enrolled)
self.run_on_commit.append((set(self.savepoint_ids), func))
p.mugshot = None self.check_dimensions(p, None, None)
from __future__ import unicode_literals
def infer(x): return lib.map_infer(x.asobject, func)
return course_mode_tuple.slug in cls.VERIFIED_MODES
if com.is_categorical_dtype(x.dtype): return x.get_values() return x.ravel()
flops = kerns[1] * kerns[2] * 2 #nb flops by output image flops *= out[1] * out[2] flops *= images[0] * kerns[3] * images[3] return flops
from __future__ import absolute_import import logging import re
return (name, ipsecpolicy, ikepolicy, vpnservice, peer_cidrs, peer_address, peer_id, psk, admin_state_up, kwargs)
getx = pnt_func(lgdal.OGR_G_GetX) gety = pnt_func(lgdal.OGR_G_GetY) getz = pnt_func(lgdal.OGR_G_GetZ)
return ItemFactory.create( category="html", parent_location=self.library.location, user_id=self.user.id, publish_item=False )
try: return content and not content['closed'] except KeyError: return False
new_lr = self._base_lr / (self.decay_factor ** self._count) if new_lr <= self.min_lr: self._min_reached = True new_lr = self.min_lr
self.frame[col_name] = df_col.astype(col_type, copy=False)
from numpy.random import randint, choice, randn cols = ['jim', 'joe', 'jolie', 'joline', 'jolia']
score = self._init_decision_function(X) predict_stages(self.estimators_, X, self.learning_rate, score) return score
from __future__ import absolute_import import os import tempfile
assert_equal( self.components_.shape, (self.n_components_, n_features), err_msg=('An error has occurred the self.components_ matrix has ' ' not the proper shape.'))
if isinstance(v, dict): is_nested_renamer = True
continue
self.task_input = "THIS IS INVALID JSON"
form_descriptions = _get_form_descriptions(request)
self.q(css="button.js-reset").click()
import salt.modules.gem as gem
info = salt.utils.alias_function(version, 'info')
is_from_cdn = StaticContentServer.is_cdn_request(request) newrelic.agent.add_custom_parameter('contentserver.from_cdn', is_from_cdn)
if 'enabled' in kwargs: return _enabled_used_error(ret)
if os_family == 'FreeBSD': return
if isinstance(other, np.datetime64): other = Timestamp(other) vzone = tslib.get_timezone(getattr(other, 'tzinfo', '__no_tz__')) return zzone == vzone
VerificationCheckpoint.objects.create(course_id=self.course.id, checkpoint_location=self.checkpoint_midterm)
for setting in settings: settings[setting] = str(settings[setting])
__virtualname__ = 'cassandra'
from salt.states import layman
result = expr._can_use_numexpr(operator.add, None, self.frame, self.frame, 'evaluate') self.assertFalse(result)
parent_link = parent._meta.get_ancestor_link(ancestor) if parent_link: return self.parents[parent] or parent_link
from sphinx.ext.autodoc import FunctionDocumenter as FunctionDocumenter
cmd = '{0} | ConvertTo-Json -Depth 32'.format(cmd)
self.check_response('done_0', 'done-unmarked') self.check_response('done_1', 'done-marked')
all_modes = CourseMode.modes_for_course_dict(self.course_key, only_selectable=False) self.assertItemsEqual(all_modes.keys(), available_modes)
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
return re.split(r'[\s,]+', cstr)
rvalues.flat[imask] = np.array([Timedelta(val)._repr_base(format='all') for val in values.ravel()[imask]], dtype=object) return rvalues
train_sizes_abs = _translate_train_sizes(train_sizes, n_max_training_samples) n_unique_ticks = train_sizes_abs.shape[0] if verbose > 0: print("[learning_curve] Training set sizes: " + str(train_sizes_abs))
orphan = course_key.make_usage_key('chapter', 'OrphanChapter') self.store.create_item(self.user_id, orphan.course_key, orphan.block_type, block_id=orphan.block_id)
preprocessor = ZCA(filter_bias=0.0, n_drop_components=2) preprocessed_X = self.get_preprocessed_data(preprocessor) assert_allclose(zca_truncated_X, preprocessed_X, rtol=1e-3)
classifier.fit(data[:n_samples / 2], digits.target[:n_samples / 2])
exc_info_on_loglevel=logging.DEBUG
iris = datasets.load_iris() perm = rng.permutation(iris.target.size) iris.data, iris.target = shuffle(iris.data, iris.target, random_state=rng)
if (self.index_label and isinstance(self.index_label, (list, tuple, np.ndarray, Index))): index_labels = self.index_label
df = DataFrame({'x': [1, 2, 3], 'y': [3, 4, 5]})
import salt.utils.cloud import salt.config as config from salt.exceptions import SaltCloudSystemExit
obj.delete()
tfp.add(base, arcname=os.path.join('py{0}'.format(py_ver), base)) continue
batch_unsubscribe = mailchimp.listBatchUnsubscribe result = batch_unsubscribe(id=list_id, emails=emails, send_goodbye=False, delete_member=False) log.debug(result)
certificates = Dict( display_name=_("Certificate Configuration"), help=_("Enter course-specific configuration information here (JSON format)"), scope=Scope.settings, )
url = "{base}/course_modes/choose/{course_id}/".format( base=BASE_URL, course_id=self._course_id ) return url
mixed = Series(['aafootwo', NA, 'aabartwo', True, datetime.today(), None, 1, 2.])
class OFTIntegerList(Field): pass
self.assertDone([1, 3])
cidx3 = CategoricalIndex(list('aabbb'), categories=list('abc')) idx3 = Index(list('aabbb'))
if dt.weekday() == 5: return dt + timedelta(2) elif dt.weekday() == 6: return dt + timedelta(1) return dt
status = InstructorTaskModuleTestCase.get_task_status(instructor_task.task_id) self.assertEqual(status['message'], expected_message)
raise TypeError('Cannot convert tz-naive timestamps, use ' 'tz_localize to localize')
pass
return None
p.mugshot.save("mug", self.file2) self.check_dimensions(p, 8, 4)
user = User.objects.get(email=email)
connection = mail.get_connection('django.core.mail.backends.smtp.EmailBackend') self.assertEqual(connection.timeout, None)
[arrayfuncs.cholesky_delete(L[:n_active, :n_active], ii) for ii in idx]
return Series(self._y_fitted_raw[self._valid_obs_labels], index=self._result_index)
m = Memory(cachedir=lfw_home, compress=6, verbose=0) load_func = m.cache(_fetch_lfw_people)
try: from pyamg import smoothed_aggregation_solver except ImportError: raise SkipTest("pyamg not available.")
addr_str = str(address) self._ip = self._ip_int_from_string(addr_str)
__salt__['file.write']('{0}-make.conf'.format(os.path.join(cdir, jname)), 'WITH_PKGNG=yes')
import salt.loader import salt.utils import salt.utils.cloud import salt.utils.validate.net from salt import syspaths
assert_panel4d_equal(panel4d.ix[labels, items, dates, cols], panel4d.reindex(labels=labels, items=items, major=dates, minor=cols))
result = df.take(order, axis=1) expected = df.ix[:, ['C', 'B', 'D']] assert_frame_equal(result, expected, check_names=False)
self.assertEqual(self.func(None), [])
set_cookie_data(cookie_storage, ['cookie', CookieStorage.not_finished]) set_session_data(session_storage, ['session'])
compression='infer', thousands=None, decimal=b'.', lineterminator=None, quotechar='"', quoting=csv.QUOTE_MINIMAL, escapechar=None, comment=None, encoding=None, dialect=None, tupleize_cols=False,
df = self.read_csv(StringIO(data.replace(',', ' ')), comment='#', delim_whitespace=True) tm.assert_almost_equal(df.values, expected)
prior = DiagonalGaussianPrior() vae = DummyVAE() prior.set_vae(vae) prior.initialize_parameters(nhid=5)
clamped_val = clamp * initial
field_name = models.CharField(max_length=64, db_index=True)
replacement_r = R.objects.create()
self.fitted = False
descriptor = modulestore().get_course(course_key) model = cls(descriptor) return model
os.remove(filename)
self.field_name = field_name self.file_name = file_name self.content_type = content_type self.content_length = content_length self.charset = charset self.content_type_extra = content_type_extra
do_vcs_install(manifest_in, cfg.versionfile_source, ipy) return 0
request.user.is_authenticated() and is_shopping_cart_enabled() and Order.does_user_have_cart(request.user) and Order.user_cart_has_items( request.user, [PaidCourseRegistration, CourseRegCodeItem] )
try: intercepted_function(raise_error=FakeInputException) except FakeOutputException as ex: self.assertEqual(ex.message, expected_log_msg)
DATE_INPUT_FORMATS = [
if self.ndim > 3: raise NotImplementedError('Cannot fillna with a method for > ' '3dims')
num_enrollments = len(enrollments) self.assertDictContainsSubset({'attempted': num_enrollments, 'succeeded': num_enrollments, 'failed': 0}, result)
if not validate_trust_root(openid_request): return default_render_failure(request, "Invalid OpenID trust root")
for cache in caches.all(): self.assertIsNone(cache.get(key)) cache.set(key, "Not None")
class SomeParentModel(models.Model): name = models.CharField(max_length=1)
field_value = [getInnerText(k).strip() for k in keys] obj_pk = default_manager.db_manager(self.db).get_by_natural_key(*field_value).pk
if hasattr(table, 'columns'): for level in table.columns.names[1:]: if margins_name in table.columns.get_level_values(level): raise ValueError(exception_msg)
try: ds[len(ds)] except OGRIndexError: pass else: self.fail('Expected an IndexError!')
X, Y = np.meshgrid(xgrid, ygrid[::-1])
result = self.client.login(username=self.USERNAME, password=self.NEW_PASSWORD) self.assertTrue(result)
return provider_respond(server, openid_request, response, results)
_response = _request("GET", options['url'] + options['db'] + "/_design/salt")
([[10, 10, 8, 11], [9, 8, 1, 1], [9, 7, 4, 10]], 15 ),
return self.find_css(css).first.text[0]
stdout = list_(runas=runas) service_lines = [line for line in stdout.splitlines()]
self.spatial_index = spatial_index
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
reset_student_attempts( self.course_key, user, problem_location, requesting_user=user, delete_module=True, )
self.assertTrue(image_url.endswith('src_course_image-png-{}x{}.jpg'.format(*target)))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
df = DataFrame(np.random.randn(10, 3)) df.iloc[2:7, 0] = np.nan df.iloc[3:5, 2] = np.nan
layer_to_state = dbm.make_layer_to_state(1) v_state = layer_to_state[v] y_state = layer_to_state[y]
scaler_batch = MaxAbsScaler().fit(X)
return [mock.call(self.store, course.id) for course in courses]
return (user_id, role_id, tenant_id)
file = request.FILES['file_field'] obj = FileModel() obj.testfile.save(file.name, file) return HttpResponse('%d' % obj.pk)
from __future__ import absolute_import import logging
courses = [ course_with_prereq, CourseFactory.create(start=self.NEXT_WEEK, mobile_available=True), CourseFactory.create(visible_to_staff_only=True, mobile_available=True), CourseFactory.create(start=self.LAST_WEEK, mobile_available=True, visible_to_staff_only=False), ]
item = self.cart.orderitem_set.all().select_subclasses()[0] self.assertEquals(item.unit_cost, self.get_discount(self.cost))
if is_panel:
self.assertEqual(self._mock_paver_sh.call_count, 1)
name = models.CharField(blank=False, max_length=80) def __str__(self): return self.name
make_thumbnail('images/no_image.png', thumb_file, 200, 140)
EX_THIN_PYTHON_INVALID = 10 EX_THIN_DEPLOY = 11 EX_THIN_CHECKSUM = 12 EX_MOD_DEPLOY = 13 EX_SCP_NOT_FOUND = 14
y_upper = clf.predict(xx)
clf = svm.SVC(kernel='linear', C=1.0) clf.fit(X, y)
pass
with self.assertRaises(UnsupportedRevisionError): self.store.get_item(self.fake_location, revision=ModuleStoreEnum.RevisionOption.draft_preferred)
return Series(self._df_raw, index=self._result_index)
continue
for supported_code in supported_lang_codes: if supported_code.startswith(generic_lang_code + '-'): return supported_code
add_user_with_status_unrequested(user) course_creator_status = get_course_creator_status(user)
if not (is_fitted or has_partial_fit): raise NotFittedError("Fit training data before predicting")
icrv_blocks = get_course_blocks(course_key, VERIFICATION_BLOCK_CATEGORY)
DATE_INPUT_FORMATS = [
import salt.utils import salt.exceptions import salt.ext.six as six from salt.utils.odict import OrderedDict
for xblock in all_blocks: for __, field in xblock.fields.iteritems(): if field.is_set_on(xblock): __ = field.read_from(xblock)
return tab
course_key = self.course_key.to_deprecated_string() self._add_course_mode(mode_slug='verified') self.add_reg_code(course_key, mode_slug='verified')
if not formatted: indent = "" nextLevelIndent = "" nl = ""
self.courseware_page.start_timed_exam()
return self.page_num + 1
resp = self._change_enrollment('unenroll') self.assertEqual(resp.status_code, 200)
check_is_fitted(self, "coefs_") y_scores = self.decision_function(X) y_scores = ACTIVATIONS[self.out_activation_](y_scores) return self.label_binarizer_.inverse_transform(y_scores)
self.api_response(data={"last_visited_module_id": unicode(initial_unit.location)})
raise NotImplementedError( "The database backend doesn't support cloning databases. " "Disable the option to run tests in parallel processes.")
raise RuntimeError("Infinite loop detected")
import salt.ext.six as six
post_params = sign(self.CLIENT_POST_PARAMS)
func.restype = c_int
return len(np.unique(X.nonzero()[1]))
result = ser.copy() result[index[1]] = 5 expected = pd.Series([0, 5], index=index) assert_series_equal(result, expected)
self.shape = tuple(shape) self.num_channels = num_channels if axes is None: axes = self.default_axes assert len(axes) == 4 self.axes = tuple(axes)
return str(s).replace('<', '&lt;').replace('>', '&gt;')
assert self.author.name is not None
access_flag = 1
obj_view = service_instance.content.viewManager.CreateContainerView( container_ref, [obj_type], True)
text = f.widget.format_value(result) self.assertEqual(text, '01:30:05 PM 21/12/2010')
import salt.version import salt.utils
if current_options: current_options = current_options[next(iter(current_options))] if default_options: default_options = default_options[next(iter(default_options))]
self.assertEqual(response.status_code, 406) msg = Messages.NO_DEFAULT_ENROLLMENT_MODE.format(course_id=self.course.id) self.assertResponseMessage(response, msg)
self.wait_for_element_visibility(ccx_name_selector, 'CCX name field is visible') self.q(css=ccx_name_selector).fill(ccx_name)
from django.db import connections connection = connections[DEFAULT_DB_ALIAS] connection.allow_thread_sharing = True connection.cursor() connections_dict[id(connection)] = connection
label_to_fold = np.zeros(len(unique_labels))
self.assertRaises(KeyError, self.cf.register_option, 'a', 1, 'doc')
rval = 1./ (self.model.alpha + self.model.w ) rval.name = 'var_s1' return rval
current_fetch_url = None if remote in remotes: current_fetch_url = remotes[remote]['fetch']
sampling_algorithm = dict((key, value) for key, value in sampling_algorithm.items() if key in selected_algorithm)
pass
unenroll_email( course_id=ccx_key, student_email=staff.email, email_students=send_email, email_params=email_params, )
base_url = reverse('create_mode', args=[unicode(self.course.id)]) self.client.get(base_url)
import copy import logging import os import re from distutils.version import LooseVersion as _LooseVersion
ip_int ^= self._ALL_ONES try: return self._prefix_from_ip_int(ip_int) except ValueError: self._report_invalid_netmask(ip_str)
color_args = ['r', 'g', 'b'] ax = _check_plot_works(series.plot.pie, colors=color_args)
_upload_file(self.srt_file, self.item_descriptor.location, os.path.split(self.srt_file.name)[1])
return start(name)
assert_array_almost_equal(tpr, tpr_correct, decimal=2) assert_equal(fpr.shape, tpr.shape) assert_equal(fpr.shape, thresholds.shape)
@ignore_warnings(category=DeprecationWarning) def score(self, g, X): return g.score(X).sum()
y_pred = self.init_.predict(X) begin_at_stage = 0
request_lowstate = { "client": "local", "tgt": "*", "fun": "test.fib", "arg": ["10"] }
leaf_ptr = self.dummy_leaf_.next_leaf_ leaves = [] while leaf_ptr is not None: leaves.append(leaf_ptr) leaf_ptr = leaf_ptr.next_leaf_ return leaves
self.assertTrue(element_has_text( page=course_outline_page, css_selector='.add-item a.button-new', text='New Unit' ))
return
block_locator = self._map_revision_to_branch(block_locator) return super(DraftVersioningModuleStore, self).get_block_generations(block_locator)
return redirect_with_get('signin_user', request.GET)
_maybe_remove(store, 'wp2') store.put('wp2', wp, format='table')
import salt.utils
with mock_create_basket(expect_called=False): response = self._post_to_view()
features = [
self.assertEqual(private_school.director, private_director)
from mako.lookup import TemplateLookup lookup = TemplateLookup(directories=[os.path.dirname(tmplpath)])
if self.mode == 'sqlalchemy': res3 = DataFrame() i = 0 sizes = [5, 5, 5, 5, 2]
account_manager = salt.utils.vmware.get_inventory(service_instance).accountManager
new_ssl_option.append("{0} '{1}'".format(normal_key, opt[key].replace("'", '')))
warn("order is deprecated, use sort_values(...)", FutureWarning, stacklevel=2) return self.sort_values(inplace=inplace, ascending=ascending, na_position=na_position)
return self.client.post(self.url, self._post_body(user, client, token_type))
log = logging.getLogger(__name__)
import salt.ext.six as six
self.values, values = None, self.values return values
assert_equals( '"' + mock_static_content.get_canonicalized_asset_path.return_value + '"', replace_static_urls(STATIC_SOURCE, DATA_DIRECTORY, course_id=COURSE_KEY) )
button_classes = self.q(css=BROWSE_BUTTON_CSS).attrs('class') if len(button_classes) == 0: return False return 'is-active' in button_classes[0]
assert_raises(ValueError, dbscan, [[0], [1]], sample_weight=[2]) assert_raises(ValueError, dbscan, [[0], [1]], sample_weight=[2, 3, 4])
definition = LicenseMixin.parse_license_from_xml(definition, xml_object)
expected = ts[1:3]
import re
response = self.client.get(self.url) expected_html = ( 'Enable Student-Generated Certificates' if is_enabled else 'Disable Student-Generated Certificates' ) self.assertContains(response, expected_html)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
axes = _check_plot_works(df.hist, by='classroom') self._check_axes_shape(axes, axes_num=3, layout=(2, 2))
raise SaltCloudSystemExit( 'The request_instance action must be called with -a or --action.' )
if remaining is None: yield b''.join(self) return
if (not course_enrollment.refundable()) or skip_refund: return
for student in students[5:6]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.deleted, mode='honor' )
if where is None and start is None and stop is None: s.group._f_remove(recursive=True)
self.post_data.update({ "name": "Frederick Clegg",
from salt.modules import haproxyconn
connection = connections[self.db] geodetic = geo_field.geodetic(connection) geography = geo_field.geography
if LOCAL_DEBUG: print msg if output_type == 'html': f.write(msg + '\n<br>\n')
from __future__ import unicode_literals
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM')
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21")
assert_frame_equal(df.sample(n=1, axis='columns', weights=second_column_weight), df[['col2']])
X_nan = np.arange(4).reshape(2, 2).astype(np.float) X_nan[0, 0] = np.nan assert_raises(ValueError, check_array, X_nan)
self.wait_for_field('image') self.wait_for_ajax() return self.q(css='.message-banner p').text[0]
X, y = datasets.make_hastie_10_2(n_samples=12000, random_state=1)
@property def outdim(self): return wkb_writer_get_outdim(self.ptr)
classes = ('credit-eligibility', 'eligibility-heading') method = self.assertContains if is_requirement_displayed else self.assertNotContains
_check_unary_op(operator.inv)
if delta_remaining < delta_min: ret['comment'] = 'Certificate will expire in {0}, which is less than {1}'.format(delta_remaining, delta_min) return ret
cumprod_xs = self.tsframe.cumprod(axis=1) self.assertEqual(np.shape(cumprod_xs), np.shape(self.tsframe))
self.submit_question_answer('p1', {'2_1': 'Incorrect'})
template_name_suffix = "_archive_day"
(False, False), (False, True),
query_features = task_input.get('features') student_data = enrolled_students_features(course_id, query_features) header, rows = format_dictlist(student_data, query_features)
return self.as_sql(compiler, connection, template='STATEMENT_TIMESTAMP()')
_, n_features = self.means_.shape
def __init__(self, message='Test'): super(Unauthorized, self).__init__(message) self.msg = message
assert_policy_entries( [ADVANCED_MODULES_KEY, DISPLAY_NAME_KEY, "Show Calculator"], ["[]", DISPLAY_NAME_VALUE, "false"])
import salt.config import salt.transport.ipc
self.assertEqual(gc1, gc2)
self.find_css('.signatory-title-input').first.fill(value)
with tm.assertRaisesRegexp(ValueError, 'tuple-index'): self.ts[:, 2] with tm.assertRaisesRegexp(ValueError, 'tuple-index'): self.ts[:, 2] = 2
clf = GradientBoostingClassifier(n_estimators=100, random_state=1) assert_raises(ValueError, clf.fit, X, y + [0, 1])
from sklearn import datasets, svm, metrics
from __future__ import absolute_import, generators, with_statement import time import logging import salt import os import os.path
with warnings.catch_warnings(): warnings.filterwarnings("ignore", message=".*(empty slice|0 for slice).*", category=RuntimeWarning)
self.assert_redirect_to_register_looks_correct(actions.do_complete(backend, social_views._do_login))
'permissive_pki_access': bool,
if not g: raise GDALException('Cannot create OGR Geometry from input: %s' % str(geom_input)) self.ptr = g
assert world.css_visible('iframe') check_lti_iframe_content("This is LTI tool. Success.")
estimators = dict((cov_type, GaussianMixture(n_components=n_classes, covariance_type=cov_type, max_iter=20, random_state=0)) for cov_type in ['spherical', 'diag', 'tied', 'full'])
Person.objects.create(name="Foo McBar") self.assertEqual(list(StatusPerson.objects.all()), [])
for idxr in [lambda x: x.ix, lambda x: x]:
return (200, headers, self.read_data_file('testshib_metadata.xml'))
if is_timedelta: res = arr[res_indexer] lag = arr[lag_indexer]
qs = City.objects.all() with self.assertRaises(TypeError): qs.kml('name')
cet = CourseEmailTemplate.objects.get(name='foo') self.assertIsNotNone(cet)
if kwargs.get('sfun') in ['wait_rm_key', 'wait_rm']: return rm_( name, kwargs.get('profile'))
result = df.iloc[-1, -1] exp = df.ix['j', 'D'] self.assertEqual(result, exp)
IntegerUnique.objects.create(i=1, j=1) with self.assertRaises(IntegrityError): IntegerUnique.objects.create(i=1, j=2)
providers = OAuth2ProviderConfig.objects.all() self.assertEquals(len(providers), 1) self.assertEquals(providers[pcount].id, provider1.id)
X.setflags(write=False) X_df_readonly = pd.DataFrame(X) with warnings.catch_warnings(record=True): X_df_ro_indexed = safe_indexing(X_df_readonly, inds)
from __future__ import unicode_literals
pylint_pattern = re.compile(r".(\d+):\ \[(\D\d+.+\]).")
return (-2 * self.score(X).sum() + self._n_parameters() * np.log(X.shape[0]))
user = User(username=username, email=email, is_active=False) user.set_password(password)
self._set_microsite_config_from_obj(microsite.site.domain, domain, microsite)
self.settings_page.a11y_audit.config.set_rules({ "ignore": [
from __future__ import unicode_literals
for j, col in enumerate(f.columns):
else: rs_c.columns = df.columns assert_frame_equal(df, rs_c, check_names=False)
num_drafts = self._get_draft_counts(course) self.assertEqual(num_drafts, 1)
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
disk_names = [] for disk in eligible: disk_names.append(disk.canonicalName) ret.update({host_name: {'Disks Added': disk_names}})
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
import integration import salt.utils
log.error('The master key has changed, the salt master could ' 'have been subverted, verify salt master\'s public ' 'key') return ''
ax1, ax2 = df.hist(column='height', by=df.gender, sharex=True)
import salt.ext.six as six
self.assertEquals(preview.latex_preview('2^3^(4+5)'), '2^{3^{4+5}}')
expected_index = pd.Index(o[::-1]) expected_index.name = None
lexer = shlex.shlex(options[1:-1].encode('utf8')) lexer.quotes = "'" lexer.whitespace = ", "
from __future__ import absolute_import
elif ((self.is_timedelta_lhs and (self.is_timedelta_rhs or self.is_offset_rhs)) or (self.is_timedelta_rhs and (self.is_timedelta_lhs or self.is_offset_lhs))):
from __future__ import absolute_import
self.cart = Order.get_cart_for_user(self.user) CertificateItem.add_to_order(self.cart, self.verified_course_key, self.cost, 'verified') self.cart.start_purchase()
return dict(zip(self.varlist, self.vlblist))
for image_uuid in __salt__['vmadm.list'](order='image_uuid'): if image_uuid in images: continue images.append(image_uuid)
import salt.utils.dictupdate as dictupdate
retval = self.service.set_credit_requirement_status( self.user.id, self.course.id, 'grade', 'grade' ) self.assertIsNone(retval)
self.assertEqual(str(a), b'Girl wins \xe2\x82\xac12.500 in lottery')
ports = list(map(int, str(ports).split(',')))
return len(self.non_form_errors()) +\ sum(len(form_errors) for form_errors in self.errors)
result = self[item] del self[item] try: result._reset_cacher() except AttributeError: pass return result
handler = SysLogHandler(**syslog_opts)
if hasattr(instance, '_changed_fields'): del instance._changed_fields
if endswith_lf(line): yield line else: buffer_ = line
if mask.any():
self.assertOLXIsPublishedOnly(block_list_to_delete) self.delete_item(block_list_to_delete, revision=revision) self._check_for_item_deletion(block_list_to_delete, result) self.assertOLXIsDeleted(block_list_children)
if item_name is not None: if item_name not in ordering: ordering.append(item_name) else: if name not in ordering: ordering.append(name)
import logging
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 1) self.assertEqual(user_partititons[0].name, 'Name 1')
ordering = self.get_ordering(request, qs) qs = qs.order_by(*ordering)
for mode in test_modes: key = 'Mode: {0}'.format(mode)
DEBUG_TOOLBAR_MONGO_STACKTRACES = True
log = logging.getLogger(__name__)
days_good_for = settings.VERIFY_STUDENT["DAYS_GOOD_FOR"] return self.created_at + timedelta(days=days_good_for)
reset = key_node.tag == u'!reset'
self.assertRaises(TypeError, self._holder)
PY2 = sys.version_info[0] == 2 PY3 = sys.version_info[0] == 3
return vcapi.get_driver_count() + rcapi.get_driver_count()
class_name = getattr(block, 'unmixed_class', block.__class__).__name__
assign_default_role(instance.course_id, instance.user)
output = self.engine.render_to_string('filter-syntax20') self.assertEqual(output, "")
return object.__repr__(self)
self.shell.exec_cmd('rm \'$HOME/{0}\''.format(target_shim_file))
task_id = str(uuid4())
from __future__ import absolute_import, print_function import os
pickle.dumps(Item.objects.all())
args = [self.system, '--settings=acceptance'] if self.fasttest: args.append('--skip-collect') call_task('pavelib.assets.update_assets', args=args)
def geometry_columns(self): raise NotImplementedError('Subclasses of BaseSpatialOperations must provide a geometry_columns() method.')
import salt.ext.six as six
self.assert_enrollment_status(as_server=True, mode=CourseMode.VERIFIED)
cs_setx = CsOperation('GEOSCoordSeq_setX') cs_sety = CsOperation('GEOSCoordSeq_setY') cs_setz = CsOperation('GEOSCoordSeq_setZ')
self.client.login(username='testclient', password='password')
import salt.payload import salt.utils import salt.utils.files import salt.utils.jid import salt.exceptions
first_result = SoftwareSecurePhotoVerification.get_initial_verification(user=user) self.assertIsNotNone(first_result)
rng2 = rng[[1, 0, 2]]
import salt.utils
from __future__ import absolute_import import logging import socket import pprint
HTTPServer.shutdown(self)
with warnings.catch_warnings(record=True) as recorded_warnings: kwargs_warn_until(
if not ensure_views(): return []
import integration import salt.utils
return cls.current().platform_key if cls.is_enabled() else ''
self.assertTrue(search_paths[0].endswith(etc_deploy_path))
password = self.cleaned_data["password1"] self.user.set_password(password) if commit: self.user.save() return self.user
DATETIME_INPUT_FORMATS = [
self.space._validate_impl(is_numeric, batch[0])
import matplotlib matplotlib.use('Agg')
if val == val and val != %(nan_val)s: nobs[lab, j] += 1 resx[lab, j] = val
sample_weight = np.empty(X.shape[0], dtype=np.float64) sample_weight[:] = 1. / X.shape[0]
cat = Categorical.from_array(Series(data), ordered=True) levels = cat.categories
- file: {good_file}
f1 = FormForTestingIsValid(data) self.assertTrue(f1.is_valid())
response = self.client.get(reverse('signup'), follow=True) self.assertEqual(response.status_code, 404)
log.debug( 'Gateway {0} on port {1} is reachable.'.format( test_ssh_host, test_ssh_port ) )
raise NotImplementedError("__eq__ not implemented in class %s." % type(self))
filter_func = filter_func or (lambda __: True)
self.assertEqual(response.status_code, 403)
self.assertTrue(self.store.has_changes(xblock))
import os import logging import re
import_course_from_xml(self.store, self.user.id, root_dir) imported_word_cloud = self.store.get_item(course_id.make_usage_key('word_cloud', 'untitled'))
idx = self.panel.items[0] idx_lag = self.panel.items[1] shifted = self.panel.shift(1, axis='items') assert_frame_equal(self.panel[idx], shifted[idx_lag])
result = f.clean('13:30') self.assertEqual(result, time(13, 30, 0))
return "django_time_extract('%s', %s)" % (lookup_type.lower(), field_name)
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS)
p = DataFrame({'first': [3, 4, 5, 8], 'second': [0, 0, 0, 3]})
xblock = modulestore().get_item(location) xblock.visible_to_staff_only = True self.store.update_item(xblock, self.user.id)
return (px_x, px_y)
from __future__ import absolute_import import os
if hasattr(klass, '_default_manager'): return klass._default_manager.all() return klass
if axis == 0: X = X.transpose() mask = mask.transpose()
return {date_field: date}
return CreditEligibility.is_user_eligible_for_credit(course_key, username)
pass
manager.public_method() with self.assertRaises(AttributeError): manager._private_method()
return (NullSpace(), '')
from django.contrib.contenttypes.fields import ( GenericForeignKey, GenericRelation, ) from django.contrib.contenttypes.models import ContentType from django.db import models from django.utils.encoding import python_2_unicode_compatible
if self.structure: ordered_blocks = OrderedDict() self._traverse_tree(self.structure['root'], self.structure['blocks'], ordered_blocks) return ordered_blocks
response = self._credit_provider_callback(request_uuid, "approved", sig="invalid") self.assertEqual(response.status_code, 403)
import salt.utils.dictupdate as dictupdate from salt.utils import exactly_one from salt.exceptions import SaltInvocationError, CommandExecutionError
EmptyPromise( lambda: self.q(css=self.certficate_css + " .action-add").present, 'Add certificate button is displayed' ).fulfill()
num_bytes_read += len(field_name) + 2 if (settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None and num_bytes_read > settings.DATA_UPLOAD_MAX_MEMORY_SIZE): raise RequestDataTooBig('Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.')
from __future__ import unicode_literals
df = tm.makeTimeDataFrame() assertRaisesRegexp(TypeError, 'hierarchical', df.count, level=0)
self.elapsed = 0 self.total_errors = 0 self.counters = dict.fromkeys(self._benchmark_keys, 0) self.messages = {}
import logging
system_config.domain_join = None system_config.win_rm = None
return self.getlist(key)
return None
return sum(self[i].point_count for i in range(self.geom_count))
self.assertEqual(response.status_code, expected_status) parsed_content = json.loads(response.content) self.assertEqual(parsed_content, expected_content)
(options, __) = parser.parse_args(arglist, values=new_options)
store = HDFStore(path, mode='a', driver='H5FD_CORE', driver_core_backing_store=0) store['df'] = df store.append('df2', df)
registration_code_redemption = RegistrationCodeRedemption.registration_code_used_for_enrollment( course_enrollment) paid_course_reg_item = PaidCourseRegistration.get_course_item_for_user_enrollment( user=user, course_id=course_id, course_enrollment=course_enrollment )
transcripts_info = video_descriptor.get_transcripts_info() transcript_langs = video_descriptor.available_translations(transcripts_info, verify_assets=False)
sparse = self.dense1.to_sparse() sparse3 = self.dense3.to_sparse()
self.assertEqual(formset[0], forms[0]) try: formset[3] self.fail('Requesting an invalid formset index should raise an exception') except IndexError: pass
if self.database.connection.alive(): return True else: raise HeartbeatFailure("Can't connect to {}".format(self.database.name), 'mongo')
"Test for Annotation Xmodule functional logic."
return no_edit_link
self.problem_page.q( css='div.problem input.ctinput[type="{}"]'.format(self.choice_type) ).nth(input_num).click()
self.assertFalse(3.0 in s)
data = np.empty(nd_state[1], dtype=nd_state[2]) np.ndarray.__setstate__(data, nd_state)
q = Parent(name='Elizabeth') q.save()
for key, value in state.items(): setattr(settings, key, value)
full = _get_config_file(user, config)
return self.user
col_mean, col_var, n_total_samples = \ _incremental_mean_and_var(X, last_mean=self.mean_, last_variance=self.var_, last_sample_count=self.n_samples_seen_)
import salt.utils.decorators
rbmA_params = [numpy.asarray(q, dtype=config.floatX) for q in rbmA_params] rbmB_params = [numpy.asarray(q, dtype=config.floatX) for q in rbmB_params]
y_multirf = regr_multirf.predict(X_test) y_rf = regr_rf.predict(X_test)
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): from pandas.io.wb import search, download, get_countries
self.geom_field = field_name self.coord_dim = coord_dim fields_val = model_field
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 1)
try: app_name = get_commands()[command_name] except KeyError: raise CommandError("Unknown command: %r" % command_name)
self._assert_enable_certs_button_is_disabled()
self.assertEqual(original.__class__, unpickled.__class__) self.assertEqual(original.args, unpickled.args)
cv = list(check_cv(cv, X, y, classifier=is_classifier(estimator))) scorer = check_scoring(estimator, scoring=scoring)
df = DataFrame({'col1': [1], 'col2': ['a'], 'col3': [10.1]})
)
_ALIASES = {'x_compat': 'xaxis.compat'} _DEFAULT_KEYS = ['xaxis.compat']
result = s.shift() self.assertTrue('datetime64[ns, US/Eastern]' in str(result)) self.assertTrue('NaT' in str(result))
data = read_sas(self.file01) tm.assert_frame_equal(data, data_csv)
binding_status = {'created': False}
input_box = self.student_email_input.first.results[0] input_box.send_keys(email_addres)
node = _guess_node_id(node) apiserver_url = _guess_apiserver(apiserver_url) if apiserver_url is None: return False
all_assets = course_assets[asset_key.asset_type] md = AssetMetadata(asset_key, asset_key.path) md.from_storable(all_assets[asset_idx]) md.update(attr_dict)
if len(self.estimators_) > 1: self.estimators_.pop(-1) return None, None, None
if fit_intercept: grad[-2] = -2. * np.sum(weighted_non_outliers) / sigma grad[-2] -= 2. * epsilon * np.sum(sw_outliers)
if pkg_ver: if installed_pkg_ver != pkg_ver: pkgs_to_install.append(pkg) else: pkgs_satisfied.append(installed_name_ver)
certificate.course_title = course_title_override
return social_auth.uid[len(self.lti_consumer_key) + 1:]
_unique_labels = _FN_UNIQUE_LABELS.get(label_type, None) if not _unique_labels: raise ValueError("Unknown label type: %s" % repr(ys))
def f(): s.loc[3.0]
if line_stripped.startswith('@'): output.extend([line]) if 'savefig' in line:
estimator.set_params(alpha=.5)
projected_2 = rp.transform(data) assert_array_equal(projected_1, projected_2)
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.get_orphans(course_key, **kwargs))
show_email_settings_for = frozenset( enrollment.course_id for enrollment in course_enrollments if ( BulkEmailFlag.feature_enabled(enrollment.course_id) ) )
if isinstance(block_key, BlockUsageLocator): return block_key.map_into_course(course_key) elif not isinstance(block_key, BlockKey): block_key = BlockKey(*block_key)
if str_instance and hex_regex.match(geom_input): geom_input = six.memoryview(a2b_hex(geom_input.upper().encode())) str_instance = False
def _class_to_alias(self, cls): return self._index_type_map.get(cls, '')
if 'class_' in attrs: attrs['class'] = attrs.pop('class_')
if bool(actual_data) != bool(data): ret.update({item: {'old': actual_data, 'new': data}})
assert np.all((ps == 0) + (ps == 1)) assert np.all((hs == 0) + (hs == 1))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath
if full_funcname not in self._dict: self._dict[full_funcname] = func if funcname not in mod_dict: setattr(mod_dict, funcname, func) mod_dict[funcname] = func self._apply_outputter(func, mod)
self.assertContains(response, "Explore courses")
def f(): df = orig.copy() df.loc["j", :] = ["c", 2]
if other is not None: other = _ensure_index(other) if (other is None or labels.equals(other)) and labels.equals(ax): return obj
_config_filename_ = 'master' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'api')
expected = DataFrame(index=[0, 1], columns=[0, 1], dtype=object)
if self.op == '/' and env.scope['truediv']: self.func = op.truediv
import salt.utils
request = get_request_for_user(user) request.method = method request.META = {'CONTENT_TYPE': ['application/json']} request.body = body request.session = session or {} return request
indexer = np.arange(len(df.columns))[isnull(df.columns)]
title_css = ".csv-upload .message-title" detail_css = ".csv-upload .summary-item" return self._get_messages(title_css, detail_css)
xblock_info = self._get_xblock_info(chapter.location) self._verify_visibility_state(xblock_info, VisibilityState.ready) self.assertFalse(course.self_paced)
password_label = _(u"Password")
response = self.client.get_html('/course/edX/test') self.assertEquals(response.status_code, 404)
details.update(self._course_details)
has_partial_range = tree.xpath('responseparam[@partial_range]') if has_partial_range: partial_range = float(has_partial_range[0].get('partial_range', default='2')) else: partial_range = 2
if not arglist and not parse_argv: arglist = [] (options, args) = parser.parse_args(arglist) options.reporter = None
import integration
store.append('df3', df)
return np.asarray(self)
'USE_YOUTUBE_OBJECT_API': False,
if os.system('sphinx-build -b latex -d build/doctrees ' 'source build/latex'): raise SystemExit("Building LaTeX failed.")
if not hasattr(self, 'label'): self.label = app_name.rpartition(".")[2]
import sys import atexit import logging import threading import logging.handlers
completion_date = get_last_exam_completion_date(course_key, username)
all_assets[asset_idx] = mdata.to_storable() return all_assets
html_static_path = ['_static']
def process_response(self, request, response): response['Content-Security-Policy'] = "default-src 'self'" return response
if isinstance(value, UsageKey): return value return course_key.make_usage_key_from_deprecated_string(value)
config_course_cohorts( course, is_cohorted=True, auto_cohorts=[] )
assert_equal(est.estimators_[0, 0].max_depth, 1) for i in range(1, 11): assert_equal(est.estimators_[-i, 0].max_depth, 2)
return ret
conditions_map = {
from salt.states import serverdensity_device
for k in tstore.keys(): if tstore.get_storer(k).is_table: new_t = tstore.get_storer(k) orig_t = store.get_storer(k)
lowest_passing_grade = DecimalField(max_digits=5, decimal_places=2, null=True)
attr = getattr(student, feature) try: DjangoJSONEncoder().default(attr) return attr except TypeError: return unicode(attr)
for section in course.get_children(): curr_section = {} curr_section['display_name'] = own_metadata(section).get('display_name', '') data = [] c_subsection = 0
return self.make_theano_batch(name=name, dtype=dtype, batch_size=batch_size)
return values, False, other, False
if data.get('essential'): return super(IDTokenHandler, self).claim_staff_courses(data) else: return None
if self._aborting: return
icon_class = None icon_image = None secondary = False
course_publish_orphans = self.store.get_orphans(course_locator_publish)
pass
if normalize == 'columns': column_margin = column_margin / column_margin.sum() table = concat([table, column_margin], axis=1) table = table.fillna(0)
self.assertEqual(PlayedWithNote.objects.count(), 0)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.5, random_state=random_state)
return resource_filename(self.module, os.path.join(self.base_dir, name))
cv = ShuffleSplit(n_iter=100, test_size=0.2, random_state=0)
out_array[:, :, i] = tile_raster_images( X[i], img_shape, tile_shape, tile_spacing, scale_rows_to_unit_interval, output_pixel_vals)
ret['hash_type'] = __opts__['hash_type']
from salt.utils.rsax931 import RSAX931Signer, RSAX931Verifier
try: import salt.utils.openstack.neutron as suoneu HAS_NEUTRON = True except NameError as exc: HAS_NEUTRON = False
]
assert_equal(cv_repr, repr(cv))
self.shell.process_input_line('bookmark -d ipy_savedir', store_history=False) self.shell.clear_cout()
blocks = df.as_blocks(copy=False) for dtype, _df in blocks.items(): if column in _df: _df.ix[:, column] = _df[column] + 1
return self.paginator_class( queryset, per_page, orphans=orphans, allow_empty_first_page=allow_empty_first_page, **kwargs)
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch, call )
if self.SchemaEditorClass is None: raise NotImplementedError( 'The SchemaEditorClass attribute of this database wrapper is still None') return self.SchemaEditorClass(self, *args, **kwargs)
class DeconstructibleInstances(object): def deconstruct(self): return ('DeconstructibleInstances', [], {})
students_require_certificates = enrolled_students.filter( generatedcertificate__course_id=course_id, generatedcertificate__status__in=statuses_to_regenerate ) return list(students_require_certificates)
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 5)
overlay_info = [[GMarker, markers, 'markers'], [GPolygon, polygons, 'polygons'], [GPolyline, polylines, 'polylines']]
df = DataFrame([1, 2, 3], index=date_range('1/1/2013', '1/3/2013')) result = self.encode_decode(df) assert_frame_equal(result, df)
pass
args = ['base_command', 'testlabel', '--settings=alternate_settings', '-a', 'x'] self._test(args)
for i, k in enumerate(key): mask &= df.iloc[:, i] == k
data[:, 5] = data[:, 4] / data[:, 5]
alphas = alphas[:n_iter + 1] coefs = coefs[:n_iter + 1]
tags = tags or [u'auto_refund'] create_zendesk_ticket(name, email, subject, body, tags)
epoch_num = 6 termination_criterion = EpochCounter(epoch_num)
friends = models.ManyToManyField('self', through="Relationship")
return [ self.create_student( username='student_{}'.format(index), email='student_{}@example.com'.format(index) ) for index in xrange(number_of_students) ]
result = sparse[orig % 2 == 1] exp = orig[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
if vm_info['profile'] and config.is_profile_configured( __opts__, __active_provider_name__ or 'virtualbox', vm_info['profile'] ) is False: return False
test_uuid = uuid.UUID(token, version=1) self.assertEqual(token, test_uuid.hex)
self._compare_with_tz(store.select( 'df_tz', where=Term('A>=df.A[3]')), df[df.A >= df.A[3]])
CourseEnrollment.enroll(user_who_created_course, course_key)
self.assertIsNone(rewrite_video_url("", ""))
mean_square_grad = sharedX(param.get_value() * 0.)
h.update(r['Salt']) r['Hash'] = h.hexdigest()
exc_info_on_loglevel=logging.DEBUG
value = value.astimezone(timezone) if hasattr(timezone, 'normalize'): value = timezone.normalize(value) return value
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
f.DEFAULT_CHUNK_SIZE = 4 self.assertEqual(list(f), [b'one\r\n', b'two\r\n', b'three'])
self.blocks = defaultdict(list)
text = f.widget.format_value(result) self.assertEqual(text, "01:30:00 PM 21/12/2010")
filename = sanitize_filename(' '.join(tooltip.split(' ')[3:]))
return HttpResponse()
if value == '{}': return {} return super(CustomJSONField, self).to_python(value)
X = np.array([[1, 2], [2, 1], [-2, 1], [-2, -1]]) y_ref = np.array([2, 0, 1, 2])
assert_almost_equal(lrap_score([[1], [0], [1], [0]], [[0.5], [0.5], [0.5], [0.5]]), 1.)
np.maximum(R, 0, tmp) tmp.flat[::n_samples + 1] = R.flat[::n_samples + 1]
show_authors = False
response = self._auto_auth({ 'username': 'test', 'course_id': course_id, 'redirect': True, 'staff': 'true', }, status_code=302)
_update_microsite_context(context, configuration)
with self._secondary_action_menu_open("#comment_{}".format(comment_id)): return self._is_element_visible("#comment_{} .action-delete".format(comment_id))
return [self.result._output_field_or_none]
seq_css = "ol#sequence-list>li:nth-of-type({0})>.nav-item".format(seq_index + 1) self.q(css=seq_css).first.click() self.wait_for_ajax()
return '{0} not found'.format(name)
_register_xlsx('openpyxl', 'xlsxwriter')
self.hashed_files[hash_key] = cache_name
import urllib.parse quote = urllib.parse.quote
service = SERVICES.get(name, None) if service: fake_server = service['class'](port_num=service['port']) setattr(world, name, fake_server)
super(MultiprocessingProcess, self).__init__(*args, **kwargs)
self.submit_question_answer('H1P1', {'2_1': 'Correct', '2_2': 'Incorrect'})
some_sample_ids = (2286, 3274, 14042) for sample_id in some_sample_ids: idx1 = s1.tolist().index(sample_id) idx2 = s2.tolist().index(sample_id)
if self.optimizer not in self._optimizer_types: raise ValueError("optimizer should be one of %s" % self._optimizer_types)
parents = block_structure.get_parents(block_key) min_all_parents_start_date = min( cls.get_merged_start_date(block_structure, parent_key) for parent_key in parents ) if parents else None
network = int(self.network_address) broadcast = int(self.broadcast_address) for x in long_range(network + 1, broadcast): yield self._address_class(x)
Xs = []
lm = LayerMapping(County, co_shp, co_mapping, source_srs=4269) lm = LayerMapping(County, co_shp, co_mapping, source_srs='NAD83')
new_items.append(mapping[int(item)])
exc_info_on_loglevel=logging.DEBUG
if strategy == "median": cols_to_keep = ~np.isnan(X_true).any(axis=0) else: cols_to_keep = ~np.isnan(X_true).all(axis=0)
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'gogrid', vm_['profile'], vm_=vm_) is False: return False
self.do_shuffle(self.xml, problem) self.do_answer_pool(self.xml, problem)
CourseModeFactory.create(course_id=self.COURSE_KEY, mode_slug=CourseMode.HONOR) with self._mock_xqueue() as mock_queue: certs_api.generate_example_certificates(self.COURSE_KEY)
management.call_command( 'loaddata', 'feature.json', verbosity=0, )
return ItemFactory.create( parent_location=parent_location, category=category, display_name=display_name, publish_item=False, user_id=self.user.id, **kwargs )
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
self.assert_account_settings_context_looks_correct(account_settings_context(request), user, linked=True) self.assert_social_auth_exists_for_user(request.user, strategy)
response = self.get_response() list(storage) storage.update(response) session_storing = self.stored_session_messages_count(storage, response) self.assertEqual(session_storing, 0)
for middleware_method in self._exception_middleware: response = middleware_method(request, exception) if response: return response raise
output = self.engine.render_to_string('i18n05', {'anton': 'yyy'}) self.assertEqual(output, 'xxxyyyxxx')
self.assertFalse( self.run_function('softwareupdate.update_available', ['spongebob']))
raise NotImplementedError
subtask_id = initial_subtask_status.task_id new_subtask = send_course_email.subtask( ( entry_id, email_id, to_list, global_email_context, initial_subtask_status.to_dict(), ), task_id=subtask_id, routing_key=routing_key, ) return new_subtask
return np.log(x / (1. - x))
self.assertTrue(self.video.is_button_shown('transcript_button')) self._verify_caption_text('Welcome to edX.')
topics = self.discussion_topics return [d["id"] for d in topics.values()]
os.write(fh_, str(os.getpid()))
import re self.assertTrue(re.search(r'^\d{2}:\d{2} \w{2}$', win_tm))
return hash(str(self))
cmdret = _psql_prepare_and_run(['-f', sqlfile.name], user=user, runas=runas, host=host, port=port, password=password, maintenance_db=dbname) return cmdret
rng = np.random.RandomState(0) X = rng.normal(size=(10, 4)) y = multioutput_estimator_convert_y_2d(name, X[:, 0]) regressor = Regressor()
return lib.astype_unicode(arr.ravel()).reshape(arr.shape)
if sl_: tmpret = _get_template_texts(source_list=sl_, template=template, defaults=defaults, context=context) if not tmpret['result']: return tmpret text = tmpret['data']
from salttesting.helpers import ( ensure_in_syspath, ) ensure_in_syspath('../../')
params = self.get_params() updates = OrderedDict(izip_no_length_check(params, params)) self.modify_updates(updates) f = function([], updates=updates) f()
from salttesting.unit import TestCase from salttesting.helpers import ensure_in_syspath
elif existing['code'] == 404: ret['comment'] = 'A Monitor with this name was not found.' else: ret = _load_result(existing, ret)
self.assertEqual(cl.result_count, 1)
assert_almost_equal(errors, errors2) assert_almost_equal(values, values2)
languages_data_folder = sys.argv[1] dataset = load_files(languages_data_folder)
with mock.patch.object(requests, 'post') as mock_post: mock_post.return_value.text = snuggletex_resp
df = _make_frame() df.to_csv(path, tupleize_cols=False) result = read_csv(path, header=[0, 1], index_col=[ 0], tupleize_cols=False) assert_frame_equal(df, result)
_default_logging_level_ = 'warning' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'master') _loglevel_config_setting_name_ = 'cli_salt_cp_log_file'
if self.read_committed is True: if connection.vendor == 'mysql': cursor = connection.cursor() cursor.execute("SET TRANSACTION ISOLATION LEVEL READ COMMITTED")
conn.create_instance_profile(name) log.info('Created {0} instance profile.'.format(name))
exc_info_on_loglevel=logging.DEBUG
self.assertIsInstance(self.droopy.books, PublishedBookManager) self.assertIsInstance(self.b2.authors, PersonManager)
if entrance_exam_minimum_score_pct is None: entrance_exam_minimum_score_pct = _get_default_entrance_exam_minimum_pct()
expected.index = index expected.index.names = result.index.names tm.assert_frame_equal(expected, result)
self.set_time("#start_time", time)
key = "subtask-{}".format(task_id) cache.delete(key)
if patches.shape[-1] == 1: return patches.reshape((n_patches, p_h, p_w)) else: return patches
old_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, self.user_partition) self.assertIn(old_group.id, [0, 1])
system_info = win32net.NetServerGetInfo(None, 101)
course_key = request.data.get('course_key') try: course_key = CourseKey.from_string(course_key) except InvalidKeyError: raise InvalidCourseKey(course_key)
lib_key_pacific = self._create_library(org="PacificX", library="libP") lib_key_atlantic = self._create_library(org="AtlanticX", library="libA")
from __future__ import absolute_import import re import os import logging
walk_l = list(_depth_limited_walk(name, max_depth)) walk_d = {} for i in walk_l: walk_d[i[0]] = (i[1], i[2])
return context["is_requester_privileged"] or _is_author(cc_content, context)
cov = ShrunkCovariance(shrinkage=0.5) cov.fit(X) assert_array_almost_equal( shrunk_covariance(empirical_covariance(X), shrinkage=0.5), cov.covariance_, 4)
return [note for note in data if note.get(field_name) == value]
return has_access(requesting_user, CourseStaffRole.ROLE, course_key)
from __future__ import unicode_literals
return [(unicode(path_item.usage_key), path_item.display_name) for path_item in path]
return conv2d( x, self._filters, image_shape=self._img_shape, filter_shape=self._filters_shape, subsample=self._subsample, border_mode=self._border_mode, )
return urljoin(self.internal_service_url, '/api/v{}/'.format(self.api_version_number))
return [ parent_block_key for parent_block_key, value in structure['blocks'].iteritems() if block_key in value.fields.get('children', []) ]
Book.objects.using('other').create(title="Dive into Python", published=datetime.date(2009, 5, 4))
assert_raises(ValueError, pipe.set_params, anova__C=0.1)
from salt.cli.batch import Batch
data = {"time": eventtime} data.update(payload)
problem_name, correctness = scenarios[name] problem = problems[problem_name]
unique_pcts = np.unique(percentiles) if len(unique_pcts) < len(percentiles): raise ValueError("percentiles cannot contain duplicates") percentiles = unique_pcts
class MyAppConfig(AppConfig): path = 'foo' ac = MyAppConfig('label', Stub()) self.assertEqual(ac.path, 'foo')
log = logging.getLogger(__name__)
for sub_grid in self.param_grid: if not sub_grid: if ind == 0: return {} else: ind -= 1 continue
reversible = True
self.events = []
course.cohort_config = {'cohorted': False} self.assertFalse(course.is_cohorted)
firewalld.__grains__ = {} firewalld.__salt__ = {} firewalld.__context__ = {} firewalld.__opts__ = {}
REQUIRED_PARAMETERS = [ 'roles', 'context_id', 'oauth_version', 'oauth_consumer_key', 'oauth_signature', 'oauth_signature_method', 'oauth_timestamp', 'oauth_nonce', 'user_id' ]
tmp = X[i, :].copy() X[i, :] = X[j, :] X[j, :] = tmp
if req["namespace"] == old_req.namespace and req["name"] == old_req.name: found_flag = True break
num_examples = {'train': 32561, 'test': 16281}[which_set] assert len(content) == num_examples, (len(content), num_examples)
#pylint: disable=E0602
'pub_ret': bool,
if len(set(ret).intersection(minions)) >= len(minions): return ret
from __future__ import absolute_import
with self.assertNumQueries(0): RestrictedCourse.is_restricted_course(new_course_id) RestrictedCourse.is_disabled_access_check(new_course_id)
HAS_GRP = False
for mode in [CourseMode.DEFAULT_MODE_SLUG, CourseMode.VERIFIED]: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
try: xp = getattr(obj, method).__getitem__(_axify(obj, key, axis)) except: xp = getattr(obj, method).__getitem__(key)
join_index, join_columns = None, None ilidx, iridx = None, None clidx, cridx = None, None
if not getattr(view, 'csrf_exempt', False): inner = csrf_protect(inner) return update_wrapper(inner, view)
except Exception: log.exception("error executing xblock handler") raise
data = StringIO(data) for obj in serializers.deserialize("json", data, using=self.connection.alias): obj.save()
msg = "Specified problem does not support rescoring." raise UpdateProblemModuleStateError(msg)
exhaust(field_stream)
verifications = SoftwareSecurePhotoVerification.objects.filter(user=user)
print("Estimated B") print(np.round(pls2.coef_, 1)) pls2.predict(X)
if xblock_access is not None: block.group_access = xblock_access update_block(self.course)
import os import urlparse
ipc_client.connect()
frame_ctor_list_of_dict = Benchmark("DataFrame(dict_list)", setup, start_date=datetime(2011, 12, 20))
rerun_course_data = {'source_course_key': unicode(source_course_key)} if not destination_course_data: destination_course_data = self.destination_course_data rerun_course_data.update(destination_course_data) destination_course_key = _get_course_id(self.store, destination_course_data)
cert_type=server
try: lookup_key = _lookup_syslog_config(key) except KeyError: ret['comment'] = '\'{0}\' is not a valid config variable.'.format(key) return ret
response = self.session.post( url, data=self._encode_post_dict(details), headers=self.headers, )
course = CourseFactory.create(org='edX', course='999') self.assertEquals(course_image_url(course), '/c4x/edX/999/asset/{0}'.format(course.course_image))
return self.q(css='.wrapper-content ' + self.certficate_css + ' .no-content').present
import gzip
if not success: raise IOError("Could not acquire valid {driver} browser session.".format(driver=browser_driver))
if role == 'instructor': world.instructor = InstructorFactory(course_key=world.course_key) world.enroll_user(world.instructor, world.course_key)
topo = self.train_set.get_batch_topo(1) assert topo.ndim == 4
caption_line_selector = ".subtitles li[data-index='{index}']".format(index=line_number - 1) attributes = self.q(css=caption_line_selector).attrs('class') return 'focused' in attributes
from_friend = models.ForeignObject( Person, on_delete=models.CASCADE, from_fields=['from_friend_country', 'from_friend_id'], to_fields=['person_country_id', 'id'], related_name='from_friend')
html_module = self.store.get_item(course_id.make_usage_key('html', 'nonportable')) self.assertIn('/static/foo.jpg', html_module.data)
self.settings_detail.refresh_page() self.settings_detail.wait_for_prerequisite_course_options() self.assertTrue(is_option_value_selected( browser_query=self.settings_detail.pre_requisite_course_options, value=pre_requisite_course_id ))
reset_time = datetime.now(UTC) + timedelta(seconds=300) with freeze_time(reset_time): response = self.client.post(url) self.assertEquals(response.status_code, 404)
tasks.update_course_structure.delay(unicode(course_key)) raise CourseStructureNotAvailableError
if not self.is_in_table: return None
with super(CreateCommentUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
body.update(self.construct_managers())
if issubclass(values.dtype.type, compat.string_types): values = np.array(values, dtype=object, copy=True)
context.update(get_certificate_header_context(is_secure=request.is_secure())) context.update(get_certificate_footer_context())
trace = traceback.format_exc() self.assertEqual(trace, '')
try: new_configuration = GroupConfiguration(request.body, course).get_user_partition() except GroupConfigurationsValidationError as err: return JsonResponse({"error": err.message}, status=400)
if isinstance(instances, str) or isinstance(instances, six.text_type): instances = [instances] conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)
self.factory(loss="foobar")
self.url = 'git+' + self.url
n_splits = int(n_features / block_size) X2 = X ** 2 emp_cov_trace = np.sum(X2, axis=0) / n_samples mu = np.sum(emp_cov_trace) / n_features
return models.Application.objects.create( name=name, user=user, client_id=client_id, client_type=models.Application.CLIENT_PUBLIC, authorization_grant_type=models.Application.GRANT_PASSWORD, redirect_uris=redirect_uri, )
assert_greater(gpr.log_marginal_likelihood(gpr.kernel_.theta), gpr.log_marginal_likelihood(gpr.kernel.theta))
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if draft_as_non_draft_loc in to_process_dict: to_process_dict[draft_as_non_draft_loc] = draft
return self.q(css=".field-exam-review-rules").visible
iris = load_iris() score = cross_val_score(rfe, iris.data, iris.target) assert_greater(score.min(), .7)
inner_img = img[:, ring_w:img.shape[1] - ring_w, ring_w:img.shape[2] - ring_w]
for choice in choices_list: choicegroup.remove(choice)
return security_group_rule_id
start_match = quote_regex.search(template, start_index, end_index) if start_match is None: return None else: return start_match.start()
channel = sc.server.channels.find(_m['channel'])
headers = super(WeightActs, self).c_headers() headers.append('weight_acts.cuh') return headers
compute_full_tree = self.n_clusters < max(100, .02 * n_samples)
BULK_EMAIL_ROUTING_KEY_SMALL_JOBS = LOW_PRIORITY_QUEUE
return ''.join(traceback.format_exception(*exc_info))
for attr in self._attributes: setattr(self, attr, kwargs.get(attr, getattr(parent, attr)))
self.fields = block_data.get('fields', {})
return [JsTestSubSuite(test_id, **self.opts) for test_id in Env.JS_TEST_ID_KEYS]
exec_(final_template, _globals)
self.assert_user_setting_event_emitted( setting='profile_image_uploaded_at', old=TEST_UPLOAD_DT, new=None )
import salt.ext.six as six
elem.clear() elem.send_keys(value) elem.send_keys(Keys.TAB) self.save()
colors = _get_standard_colors(num_colors=3, colormap=self.colormap, color=None) self._boxes_c = colors[0] self._whiskers_c = colors[0] self._medians_c = colors[2]
sparse = self.dense1.to_sparse(fill_value=0) sparse2 = self.dense2.to_sparse(fill_value=0)
with self.settings(STATICFILES_DIRS=[static_dir]): output = self._collectstatic_output(clear=True) self.assertNotIn(self.warning_string, output)
self.assertTrue(microsite.BACKEND.has_configuration_set()) Microsite.objects.all().delete() self.assertFalse(microsite.BACKEND.has_configuration_set())
text = f.widget.format_value(result) self.assertEqual(text, "13:30:05")
return levheader + "[" + levstring.replace(" < ... < ", " ... ") + "]"
source = utils.find_staff_lock_source(item) self.assertEqual(source.location, expected_source.location) self.assertTrue(source.visible_to_staff_only)
self.assertNotContains(response, "How it Works") self.assertNotContains(response, "Find courses") self.assertNotContains(response, "Schools & Partners")
root = etree.Element("glassets") with self.assertRaises(ContractNotRespected): AssetMetadata.add_all_assets_as_xml(root, self.course_assets)
include, exclude = map( lambda x: frozenset(map(com._get_dtype_from_object, x)), selection) for dtypes in (include, exclude): com._invalidate_string_dtypes(dtypes)
security_descriptor = win32security.GetFileSecurity( path, win32security.OWNER_SECURITY_INFORMATION) owner_sid = security_descriptor.GetSecurityDescriptorOwner()
for update in self.search_results.Updates: if update.InstallationBehavior.CanRequestUserInput: log.debug(U'Skipped update {0} - requests user input'.format(update.title)) continue
raw_query_string = get_bytes_from_wsgi(self.environ, 'QUERY_STRING', '') return http.QueryDict(raw_query_string, encoding=self._encoding)
cache_key = programs_config.CACHE_KEY if programs_config.is_cache_enabled and not user.is_staff else None return get_edx_api_data(programs_config, user, 'programs', resource_id=program_id, cache_key=cache_key)
ORA_STUB_URL = os.environ.get('ora_url', 'http://localhost:8041')
elif (self.closed() and not is_survey_question) or needs_reset: return False else: return True
pass
os.environ.get('TMPDIR', tempfile.gettempdir()) if salt.utils.is_darwin() else '/tmp'
return xblock._edit_info.get('subtree_edited_by')
from salttesting import TestCase, skipIf from salttesting.mock import ( create_autospec, MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
has_large_values = (abs_vals > 1e6).any() has_small_values = ((abs_vals < 10**(-self.digits)) & (abs_vals > 0)).any()
modulestore = MockModulestore() modulestore.set_blocks({ block_key: MockXBlock(block_key, children=children, modulestore=modulestore) for block_key, children in enumerate(children_map) }) return modulestore
self._create_courses_and_enrollments( (self.TEST_ORG, True), (self.TEST_ORG, True), (self.TEST_ORG, True), )
self._assert_queue_task(mock_send, cert)
output = self.engine.render_to_string('autoescape-stringiterations01', {'var': 'K&R'}) self.assertEqual(output, 'K,&amp;,R,')
(all_events_pattern, saltnado_websockets.AllEventsHandler), (formatted_events_pattern, saltnado_websockets.FormattedEventsHandler),
self.assertNotContains(resp, 'This is a Test Microsite footer')
self.assertURLEqual( '{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format(change_user_url), '{}?_changelist_filters=is_superuser__exact%3D0%26is_staff__exact%3D0'.format(change_user_url) )
get_request_dict = {CapaFactory.input_key(): '3.14'} module.check_problem(get_request_dict)
_list = self.run_function('beacons.list', return_yaml=False) self.assertIn('ps', _list)
new_flags.sort(cmp=lambda x, y: cmp(x.lstrip('-'), y.lstrip('-')))
if self._use_centered_tss: return 1 - self.sm_ols.ssr / self.sm_ols.centered_tss else: return 1 - self.sm_ols.ssr / self.sm_ols.uncentered_tss
if self.merge and not conflicts: self.stdout.write("No conflicts detected to merge.") return
old = Index([1, 4]) new = Index(lrange(5, 10)) filler = _algos.backfill_int64(old.values, new.values)
elif result is True: already_installed_comments.append(out['comment'])
return tuple(template_dirs)
from __future__ import unicode_literals
if node.value == '': node.value = '0'
self.panel4d['lQ'] = 'foo' self.assertEqual(self.panel4d['lQ'].values.dtype, np.object_)
if not settings.FEATURES['ADVANCED_SECURITY']: return False min_days_between_reset = settings.ADVANCED_SECURITY_CONFIG.get( 'MIN_DAYS_FOR_STAFF_ACCOUNTS_PASSWORD_RESETS' ) return min_days_between_reset
@python_2_unicode_compatible class Person(models.Model): name = models.CharField(max_length=100)
params = {'amount': donation_amount} if course_id is not None: params['course_id'] = course_id
return self.courses.values()
thread_context = getattr(thread, "context", "course") if thread_context == "course" and not utils.discussion_category_id_access(course, request.user, discussion_id): raise Http404
return self.q(css=self._bounded_selector(child_class.BODY_SELECTOR)).map( lambda el: child_class(self.browser, el.get_attribute('data-locator'))).results
IS_PY3 = sys.version_info > (3,)
if hasattr(importlib, 'invalidate_caches'): importlib.invalidate_caches()
if self.embargoed_countries == '': return [] return [country.strip().upper() for country in self.embargoed_countries.split(',')]
sample = v[:min(3, len(v))] inferred_type = lib.infer_dtype(sample)
prepr = '[%s]' % ','.join(map(pprint_thing, self)) return '%s(%s)' % (self.__class__.__name__, prepr)
contentstore().generate_thumbnail(unlock_content, dimensions=(16, 16)) contentstore().generate_thumbnail(lock_content, dimensions=(16, 16))
out = six.StringIO() call_command("makemigrations", stdout=out) self.assertIn("No changes detected", out.getvalue())
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'digital_ocean', vm_['profile'], vm_=vm_) is False: return False
self.assertIsInstance(Paginator([1, 2, 3], 2).page_range, type(six.moves.range(0)))
if not isinstance(self.obj, NDFrame): return False
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
extra['tz_aware'] = extra.get('tz_aware', True)
import os import logging import smtplib from email.utils import formatdate
initial_photo_response = requests.get(initial_data["UserPhoto"]) self.assertEqual(initial_photo_response.status_code, 200)
result = df.sort_values(by=['grade']) expected = df.iloc[[1, 2, 5, 0, 3, 4]] tm.assert_frame_equal(result, expected)
@property def tuple(self): "Returns a tuple of the point." return self._cs.tuple
import warnings
self.assertTrue(self._has_changes(locations['grandparent'])) self.assertTrue(self._has_changes(locations['parent']))
self.course_id = course_key self.cached_metadata = cached_metadata
if request.user.is_authenticated(): return redirect(redirect_to)
if isinstance(key, (int, np.integer)): pass
if not constant_time_compare(self._make_token_with_timestamp(user, ts), token): return False
self.delete_item(store, self.html_unit.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
self._fields[key.field_name] = value
CREDIT_TASK_MAX_RETRIES = 5
return self.block.values._get_val_at(loc)
self.assertTrue(filecmp.cmp(path_test, path_out))
new_axes = [] for a in self._AXIS_ORDERS: new_axes.append(getattr(self, a).union(getattr(other, a)))
X1, y1 = load_svmlight_file(datafile)
req_status = api.get_credit_requirement_status(self.course_key, "bob", namespace="grade", name="grade") self.assertEqual(req_status, [])
tab_id_locator = request.json['tab_id_locator']
self.login_staff() self.assertEqual(self.get_progress_detail(), u'0/2')
raet_publish.__opts__ = {}
queryset = (
auth_name, oracle_flag = sd['auth_name'] if postgis or (oracle and oracle_flag): self.assertTrue(srs.auth_name.startswith(auth_name))
ret['changes']['added'] = create_result
def f(): cat.remove_categories(["c"])
return dict( itertools.chain.from_iterable( store.heartbeat().iteritems() for store in self.modulestores ) )
return LOOKUP[namespace].get_template(name)
tree = etree.Element(problemtree.tag) for item in problemtree: item_xhtml = self._extract_html(item) if item_xhtml is not None: tree.append(item_xhtml)
cv_score = cv_estimate(3)
Y = np.dot(X, B) + np.random.normal(size=n * q).reshape((n, q)) + 5
UID_FIELD = "id"
objarr = obj
terms = [ (("labels=['l1', 'l2']"),), Term("labels=['l1', 'l2']"), ]
from __future__ import unicode_literals
if tblib is None: err = err[0], err[1], None self.check_picklable(test, err) self.events.append(('addExpectedFailure', self.test_index, err))
if instance_id is None: return { 'Error': 'A valid instance_id or resource_id was not specified.' }
rng = date_range('1/1/2000', '1/30/2000', tz='UTC') frame = DataFrame(np.random.randn(len(rng), 4), index=rng)
module = CapaFactory.create(max_attempts="1", attempts="1") self.assertTrue(module.closed())
master_config_path = _absolute_path(master_config_path, config_dir)
with warnings.catch_warnings(record=True) as warns:
api.set_credit_requirement_status(username, self.course_key, "grade", "grade") self.assert_grade_requirement_status('satisfied', 0)
_config_filename_ = 'minion' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'minion') _setup_mp_logging_listener_ = True
ls = salt.utils.alias_function(list_tab, 'ls')
return self.q(css="#register-name").attrs('value')[0]
assert_equal(type(X_transformed), np.ndarray)
import integration import salt.utils
opts['providers'] = providers_config
filepath = SettingsPage.get_asset_path(file_to_upload) self.q(css=self.upload_image_browse_button_selector).results[0].send_keys(filepath) self.q(css=self.upload_image_upload_button_selector).results[0].click()
self.assertListEqual( self.get_item_from_modulestore(self.seq2_usage_key).children, [] )
from __future__ import unicode_literals
raise SaltCloudSystemExit( 'The query_instance action must be called with -a or --action.' )
instructor_user = UserFactory( username='test_instructor_user', email='test_instructor_user@openedx.org', password='test' ) CourseInstructorRole(self.master_course_key).add_users(instructor_user)
test_view = views.CustomSingleObjectView() test_view.context_object_name = 'pony' context = test_view.get_context_data() self.assertEqual(context['pony'], test_view.object)
if avz not in zones: raise SaltCloudException( 'The specified availability zone isn\'t valid in this region: ' '{0}\n'.format( avz ) )
now_no_ms = now.replace(microsecond=0) if now == now_no_ms: now = now.replace(microsecond=1)
raise SyntaxError("unknown encoding: " + encoding)
return (self._version, self.network_address, self.netmask)
self.assertEqual(iptables.build_rule(dports=['!80', 443], proto='tcp'), '-p tcp -m multiport ! --dports 80,443')
if id_: id_ += '_0' return id_
curried.__name__ = curried_with_axis.__name__ = name
if 'numeric_only' in compat.signature(f).args: self.assertRaisesRegexp(NotImplementedError, name, f, self.series, numeric_only=True)
from salttesting.unit import skipIf, TestCase from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
dtype = capi.get_band_datatype(self._ptr) if as_string: dtype = GDAL_PIXEL_TYPES[dtype] return dtype
diabetes_X = diabetes.data[:, np.newaxis, 2]
from datetime import datetime
import salt.utils
from __future__ import absolute_import
try: import boto import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
auth.logout(request)
log.info( 'Assuming network_mode \'{0}\' is a network.'.format( kwargs['network_mode']) )
self.assertRaises(ValueError, s.interpolate, method='linear', limit_direction='abc')
df = DataFrame({'col': self.bseries})
Author.objects.create(name="Ted")
return self.q(css='h1.page-header-title').text
if self.inferred_type not in ['floating', 'mixed-integer-float', 'string', 'unicode', 'mixed']: return self._invalid_indexer('label', key)
dtypes = [np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint32, np.uint64, np.float32, np.float64]
form = self.get_form(expected_valid=True) self.assertDictEqual(form.cleaned_data, expected_cleaned_data)
}, "formats": { },
df['float_3'] = Series([1.] * len(df), dtype='float64') self.assertRaises(ValueError, store.append, 'df', df)
return student.views.index(request, user=request.user)
self.process_root(root, export_fs)
errors = [] for manager in cls._meta.managers: errors.extend(manager.check(**kwargs)) return errors
self.client = AjaxEnabledTestClient()
self.assertFalse('test.missing_func' in self.loader._dict)
output = self.engine.render_to_string('basic-syntax01') self.assertEqual(output, "something cool")
self.violations = [v for v in self.violations if not self._is_commented(v, line_comment_delim)]
from __future__ import absolute_import
HAS_PWD = False
__virtualname__ = 'logstash'
self.assertEqual(ONE_TO_MANY_CLASSES, {f.__class__ for f in o2m_type_fields})
import salt.utils import salt.utils.itertools from salt.exceptions import SaltInvocationError
return _concat_compat([np.array(x, copy=False, dtype=object) for x in to_concat], axis=0)
#pylint: disable=E0602
SIMPLE_CHILDREN_MAP = [[1, 2], [3, 4], [], [], []]
self._grading_policy['RAW_GRADER'] = value self.grading_policy['GRADER'] = value
self.assertTrue(np.issubdtype(result.dtype, np.floating))
transform = SkewedChi2Sampler(skewedness=c, n_components=1000, random_state=42) X_trans = transform.fit_transform(X) Y_trans = transform.transform(Y)
_hacked_nodes = frozenset(['Assign', 'Module', 'Expr'])
n_features = 2 n_classes = 2 n_samples = 1000 X, y = make_blobs(n_samples=n_samples, n_features=n_features, centers=n_classes, random_state=11)
data = { 'form-TOTAL_FORMS': '2', 'form-INITIAL_FORMS': '2', 'form-0-id': str(poem.pk), 'form-0-name': 'foo',
raise
dateutil_result = parse(date_str, dayfirst=dayfirst, yearfirst=yearfirst) self.assertEqual(dateutil_result, expected)
return False
return (matplotlib.__version__ >= LooseVersion('1.3.1') or matplotlib.__version__[0] == '0')
return f.fileno() if hasattr(f, 'fileno') else f
xs = self.mixed_frame.ix[5] exp = self.mixed_frame.xs(self.mixed_frame.index[5]) assert_series_equal(xs, exp)
new_conf.append(new_line)
alt_text = self.BANNER_ALT_MESSAGES.get(status) if alt_text: self.assertContains(response, alt_text)
if self.course_key is None: self.course_key = CourseKeyField.Empty entries = User.objects.filter( courseaccessrole__role=self._role_name, courseaccessrole__org=self.org, courseaccessrole__course_id=self.course_key ) return entries
pillar.fetch_remotes()
'cms.lib.xblock.tagging',
view, args, kwargs = resolve(url) response = view(request, *args, **kwargs)
if not self.models_ready: raise AppRegistryNotReady("Models aren't loaded yet.")
INVOICE_CORP_ADDRESS = "Please place your corporate address\nin this configuration" INVOICE_PAYMENT_INSTRUCTIONS = "This is where you can\nput directions on how people\nbuying registration codes"
for name in names: if name not in self.names_to_del: self.names_to_del.append(name)
if bootstrap_features: features = random_state.randint(0, n_features, max_features) else: features = sample_without_replacement(n_features, max_features, random_state=random_state)
kwargs = {} roles = [role.name for role in user.role_entities]
self.assertEqual(reverse('with_parameter', kwargs={'parameter': 'x'}), '/test-setlang/x/') lang_code = self._get_inactive_language_code()
name = name.split('.')[0]
certificate_count = 3 for __ in xrange(certificate_count): self.generate_certificate(course_id=self.course.id, mode='honor', status=CertificateStatuses.downloadable)
with self.assertRaisesRegexp(CommandError, ".* requires one or more arguments.*"): call_command('reindex_library')
return ((com._count_not_none(*axes.values()) == self._AXIS_LEN) and method is None and level is None and not self._is_mixed_type)
self.names, self.index_names, self.col_names, passed_names = ( self._extract_multi_indexer_columns( self._reader.header, self.index_names, self.col_names, passed_names ) )
user_account = vim.host.LocalAccountManager.AccountSpecification() user_account.id = username user_account.password = new_password
return OrderItemSubclassPK(type(self), self.pk)
ir = IsotonicRegression(increasing='auto', out_of_bounds="xyz")
global Image if Image is None: raise RuntimeError("You are trying to use PIL-dependent functionality" " but don't have PIL installed.")
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
Ioinits = { 'lane_stack': '.salt.lane.manor.stack', }
item = self.cart.orderitem_set.all().select_subclasses()[0] self.assertEquals(item.unit_cost, self.get_discount(self.cost))
linter = JavaScriptLinter() results = FileResults('') linter.check_javascript_file_is_safe(data['template'], results) self._validate_data_rules(data, results)
response = self.client.get(reverse('admin:admin_views_section_add')) self.assertContains(response, 'bodyclass_consistency_check ')
from salt.renderers import gpg from salt.exceptions import SaltRenderError
non_editable_fields.extend([LibraryContentFields.mode, LibraryContentFields.source_library_version]) return non_editable_fields
self.assertEqual(len(courses), 1) self.verify_course(courses[0])
score = float(score) if not 0 <= score <= 1: raise LTIError('score value outside the permitted range of 0-1.')
self.cache = caches['default']
for key, value in attrs.items(): self.assertEquals(getattr(video, key), value)
if pat in _registered_options: return [pat]
import salt.utils
old_time = datetime.datetime.now(UTC) self.store.publish(component.location, publish_user) updated_component = self.store.get_item(component.location)
return _get_group_index_sorter(self.labels, self.ngroups)
if self._extra and rhs._extra: raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")
self.all_verticals = [] self.all_units = []
plot_batch_errors(all_errors, n_components, batch_sizes, data)
self.courseware_page.click_next_button_on_top() self.assert_navigation_state('Test Section 1', 'Test Subsection 1,1', 1, next_enabled=True, prev_enabled=True)
return sorted(get_editable_fields(obj, self.context))
with ensure_clean_store(self.path) as store:
return cls.read_data_file('{}.key'.format(key_name))
default_response = None
METRICS_WITH_NORMALIZE_OPTION = [ "accuracy_score", "jaccard_similarity_score", "zero_one_loss", ]
scores = [x[1] for x in grid.grid_scores_] scores = np.array(scores).reshape(len(C_range), len(gamma_range))
intersphinx_mapping = { 'python2': ('http://docs.python.org/2', None), 'python3': ('http://docs.python.org/3', None) }
hashed_pwd = gen_hash('salt', password, 'sha512')
if self._dtype is None:
return self.is_datetime or self.is_timedelta
elif not (is_array and not (issubclass(value.dtype.type, np.integer) or value.dtype == np.object_)): value = _possibly_infer_to_datetimelike(value)
return function([], T.cast(T.argmax(self.estimated_rewards), 'int32'))
with self.assertRaisesRegexp(GitExportError, unicode(GitExportError.CANNOT_PULL)): git_export_utils.export_to_git( course_key, 'https://user:blah@example.com/r.git')
try:
idx = DatetimeIndex(['2016-05-16', 'NaT', NaT, np.NaN])
upload_csv_to_report_store(rows, 'grade_report', course_id, start_date)
if kernel != kernel_white: K1 = kernel(X) K2 = pairwise_kernels(X, metric=kernel) assert_array_almost_equal(K1, K2)
access_key_id, secret_access_key, token = creds(provider)
s = Series([]) self.assertRaises(IndexError, s.__getitem__, -1)
from salt.states import portage_config
#latex_paper_size = 'letter'
if not len(self.obj.columns): raise ValueError("cannot set a frame with no defined " "columns")
if self.connect_callback is not None: def handle_future(future): response = future.result() self.io_loop.add_callback(self.connect_callback, response) future.add_done_callback(handle_future)
self.assertEqual( get_list_or_404(Article.by_a_sir, title__icontains="Run"), [article] )
default_test_id = ( "{system}/djangoapps/*" " common/djangoapps/*" " openedx/core/djangoapps/*" " openedx/tests/*" " openedx/core/lib/*" )
self._set_opt_in_pref(self.user, "org_alias", False)
return self.is_proctored_enabled
__virtualname__ = 'gentoolkit'
return [] if all else None
sorted_mappings = sorted(mappings, key=lambda m: (-len(m[0]), m[0]))
import json import logging
self.panel4d['lP'] = self.panel4d['l1'] > 0 self.assertEqual(self.panel4d['lP'].values.dtype, np.bool_)
return u''.join(filter(None, parts))
self.assertEqual(res.context['next_month'], None) self.assertEqual(res.context['previous_month'], datetime.date(2006, 5, 1))
self.assertFalse(response_data['success']) self.assertEquals(expected_error, response_data['error']) self.assertFalse(self.user.email_user.called)
'ADDITIONAL_OPTIONS': { 'trashcan': { 'bucket': 'trash_fs' } }
return date - datetime.timedelta(self._get_weekday(date))
data = { "form-TOTAL_FORMS": "2", "form-INITIAL_FORMS": "2", "form-MAX_NUM_FORMS": "0",
return _check_range_and_return('rotation change', label, -4, 4)
self.assertEqual( self.run_function('timezone.set_zone', ['spongebob']), 'ERROR executing \'timezone.set_zone\': ' 'Invalid Timezone: spongebob')
X, y = make_multilabel_classification(allow_unlabeled=False, random_state=0) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
return self
df = DataFrame({"a": [True, False], "b": [1, 0]})
with super(ForumDiscussionSearchUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
elif is_panel: single_aligner = (single_aligner and (aligners[1] or aligners[2]))
default_enrollment_mode = audit_mode or honor_mode
field = expression.output_field if value is None and field.empty_strings_allowed: value = '' if field.get_internal_type() == 'BinaryField': value = b'' return value
self.assertIn(self.user_name, self.certificates_section.last_certificate_exception.text) self.assertIn(expected_notes, self.certificates_section.last_certificate_exception.text)
self.assertEqual( self.run_function('shadow.get_last_change', [NO_USER]), 'ERROR: User not found: {0}'.format(NO_USER))
if vm.guest.toolsStatus == "toolsOk": status = 'VMware tools is already up to date' return status
a = "this is \xe0 test" expected = 'this is a test' assert_equal(strip_accents_ascii(a), expected)
photo_id_image = ( decode_image_data(photo_id_data) if photo_id_data is not None else None )
result = f.clean('1:30 PM 21-12-2010') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
return self._data.dtype
for val, field in zip(args, fields_iter): if val is DEFERRED: continue setattr(self, field.attname, val)
if diagonal == 'hist': ax.hist(values, **hist_kwds)
assert_greater(np.abs(s[:k] - sa).max(), 0.1)
COMMENTS_STUB_URL = os.environ.get('comments_url', 'http://localhost:4567')
codeparam_element = etree.SubElement(response_element, "codeparam")
self.assertIs(Series.str, strings.StringMethods) self.assertIsInstance(Series(['']).str, strings.StringMethods)
self.command.handle('fake/course/id', all=False) self.assertTrue(mock_log.exception.called)
team_membership = team['membership'] del team['membership']
from pandas.sparse.api import SparseSeries return SparseSeries
mock_user = MagicMock() mock_user.is_authenticated.return_value = False self.assertEqual(views.user_groups(mock_user), [])
'DISPLAY_ANALYTICS_ENROLLMENTS': True,
with tm.assertRaises(gbq.InvalidSchema): gbq.to_gbq(df_different_schema, destination_table, PROJECT_ID, if_exists='append')
CommitOnSuccessManager.ENABLED = False OuterAtomic.ALLOW_NESTED = True if not hasattr(OuterAtomic, 'atomic_for_testcase_calls'): OuterAtomic.atomic_for_testcase_calls = 0 OuterAtomic.atomic_for_testcase_calls += 1 return wrapped_func(*args, **kwargs)
if current_node not in yield_results:
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
course = CourseFactory.create(static_asset_path="foo") self.assertEquals( course_image_url(course), '/static/foo/images/course_image.jpg' )
cursor = self.connection._cursor() try: cursor.execute('SELECT %s' % func) row = cursor.fetchone() finally: cursor.close() return row[0]
axes = [_ensure_index(columns), _ensure_index(index)]
assert_series_equal(ts.reindex(i), ts.iloc[j], check_index_type=False)
log.warning( 'Minion id {0} is not who it says it is!'.format( load['id'] ) ) return {}
resp_status = self.client.get( reverse_course_url( 'import_status_handler', self.course.id, kwargs={'filename': os.path.split(self.bad_tar)[1]} ) )
salt '*' schedule.list show_disabled=False
EmptyPromise( lambda: self.q(css='.signatory-panel-delete').present, 'Delete icon is displayed' ).fulfill()
default_range = self.check_fid_range(fid_range)
return bool(len(self.resolvers))
dt = Series(date_range('2012-1-1', periods=3, freq='D')) dt.iloc[2] = np.nan dt2 = dt[::-1]
lhs = np.datetime64(datetime(2013, 12, 6)) rhs = Timestamp('now') nat = Timestamp('nat')
try: json = self.module_data[location] except KeyError: json = self.modulestore._find_one(location) self.module_data[location] = json return json
cls.e2 = ExtraInfo.objects.create(info='e2', note=n2, value=41) e1 = ExtraInfo.objects.create(info='e1', note=cls.n1, value=42)
from salttesting import skipIf, TestCase from salttesting.helpers import ( ensure_in_syspath, TestsLoggingHandler, ForceImportErrorOn ) from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
if hasattr(_active, "value"): del _active.value
if sys.platform == "win32": _moved_attributes += [ MovedModule("winreg", "_winreg"), ]
from __future__ import unicode_literals
has_zoneinfo_database = True
from __future__ import absolute_import import logging
f = lambda x: x.sortlevel(0, inplace=True) _check_f(data.set_index(['a', 'b']), f)
panel['a2'] = df2 tm.assert_frame_equal(panel.loc['a1'], df1) tm.assert_frame_equal(panel.loc['a2'], df2)
offsets = [pd.offsets.Hour(2), timedelta(hours=2), np.timedelta64(2, 'h'), Timedelta(hours=2)]
changing_email = False if "email" in update: changing_email = True new_email = update["email"] del update["email"]
if name == 'Arthur Dent': return HttpResponse('Hi, Arthur') else: return HttpResponse('Howdy, %s' % name)
for (x, is_constant, no_nans) in self.data: functions = self.base_functions
nv.validate_repeat(args, kwargs) return self._shallow_copy(self._values.repeat(n))
scaling = 0.3 coef_grid, scores_path = lasso_stability_path(X, y, scaling=scaling, random_state=42, n_resampling=30)
AutoAuthPage(self.browser, username=username, email=email, course_id=self.course_id, staff=staff).visit()
for child_location in xblock.children: child = block_structure.get_xblock(child_location) group = child_to_group.get(child_location, None) child.group_access[partition_for_this_block.id] = [group] if group else []
return self._data.values[i]
many_to_many = True many_to_one = False one_to_many = False one_to_one = False
from __future__ import unicode_literals
self.assertTrue(np.isnan(s2[0])) self.assertFalse(np.isnan(s[0]))
if desc: system_info['comment'] = desc.decode('utf-8') else: return False
def _asarray_compat(x): if isinstance(x, ABCSeries): return x._values else: return np.asarray(x)
return copy.copy(self)
offset_s = self._get_offset(offset, normalize=True) expected = Timestamp(expected.date())
action_name = ugettext_noop('cohorted') task_fn = partial(cohort_students_and_upload, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
super(SurveyForm, self).save(*args, **kwargs)
if 'snapshot_ids' in kwargs: kwargs['snapshot_id'] = kwargs['snapshot_ids']
result = self.client.login(username=self.USERNAME, password=self.NEW_PASSWORD) self.assertTrue(result)
applied, state = self.detect_soft_applied(state, migration) if applied: fake = True
ssh_key_name = config.get_cloud_config_value( 'ssh_key_name', vm_, __opts__, search_global=False )
selection_indicator = self.selenium.find_element_by_css_selector( '%s .action-counter' % form_id) self.assertEqual(selection_indicator.text, "0 of 1 selected")
self.assertTrue(filesystem.exists(exported_asset_name)) self.assertEqual(len(exported_static_files), 1)
return DatabaseErrorWrapper(self)
return ContentType.objects.get_for_model(self.model, for_concrete_model=self.for_concrete_model)
X = np.arange(100)[:, np.newaxis] y = np.ones(100) y[:50] = 0.0
PASSWORD_HASHERS = ( 'django.contrib.auth.hashers.SHA1PasswordHasher', 'django.contrib.auth.hashers.MD5PasswordHasher', )
assert_raises(ValueError, plot_partial_dependence, clf, iris.data, [0, 1], grid_resolution=grid_resolution)
time.sleep(5)
with patch.object(mail.message.EmailMessage, 'send') as mock_send: mock_send.side_effect = Exception("Kaboom!") cart.purchase()
if self._module_system: delattr(self._module_system, name) delattr(self._descriptor_system, name)
def items(self): return Article.objects.all()
from __future__ import unicode_literals
try: SpatialRefSys.objects.using(database).get(srid=srs.srid) except SpatialRefSys.DoesNotExist: SpatialRefSys.objects.using(database).create(**kwargs)
try: return parse_url(url).scheme in _VALID_URLS except: return False
if self.backward: return self.check_string_backward(expected, given)
with self.assertRaises(ValueError): dive.editor = marty
self._test_email_address_failures(SMTPDataError(554, "Email address is blacklisted"))
if process_all: locales = all_locales else: locales = locale or all_locales locales = set(locales) - set(exclude)
def count(self, val): "Standard list count method" count = 0 for i in self: if val == i: count += 1 return count
ransac_estimator.fit(X, y)
if salt.utils.is_true(kwargs.get('refresh', True)): refresh_db(saltenv)
self.assertNotEqual(t(3), t(2)) self.assertNotEqual(t(3), t(-3))
mock_plain = MagicMock() with patch.object(parallels, 'prlctl', mock_plain): parallels.list_vms(runas=runas) mock_plain.assert_called_once_with('list', [], runas=runas)
predictions = cross_val_predict(clf, X, y) assert_equal(predictions.shape, (150,))
target = source.transform(3086)
n_samples, n_features = X.shape
Book.authors.through.objects.using('default').delete()
world.wait_for( lambda _: len(world.browser.windows) == 2, timeout=5, timeout_msg="Timed out waiting for the LTI window to appear." )
if is_pointer_tag(node): definition['filename'] = [filepath, filepath]
'timestamp': datetime.datetime(2013, 5, 19, 20), 'value': decimal.Decimal('3.14'),
unpickled_scorer = pickle.loads(pickle.dumps(scorer)) score3 = unpickled_scorer(clf, X_test, y_test) assert_almost_equal(score1, score3)
msg += _('Email address must end in {domain}').format(domain="@{0}".format(email_domain)) return msg
return b'Name\xff: %s'.decode() % self.name
cov_x_y = cov(x, y) cov_y_x = cov(y, x) assert_equal(cov_x_y, cov_y_x)
if self.post_dict.get('roles'): role = '<h5>Role: {}</h5>'.format(self.post_dict['roles']) else: role = ''
self.assertEqual(list(dive.authors.all().values_list('name', flat=True)), ['Mark Pilgrim'])
self.assertEqual(len(site_configuration_history), 1)
ret = __salt__['k8s.folder_absent'](name, node, apiserver)
response = self.process_response(secure=True) self.assertEqual(response["strict-transport-security"], "max-age=600; includeSubDomains")
def capfirst(x): return x and force_text(x)[0].upper() + force_text(x)[1:] capfirst = keep_lazy_text(capfirst)
from __future__ import absolute_import
return ACCESS_GRANTED
DATE_FORMAT = 'j F Y' TIME_FORMAT = 'h:i A' MONTH_DAY_FORMAT = 'j F' SHORT_DATE_FORMAT = 'j M Y'
import contextlib import logging import hashlib import os import shutil import ftplib from tornado.httputil import parse_response_start_line, HTTPInputError
self.wait_for_element_visibility( self._bounded_selector(self.EDITOR_SELECTOR), "Note Editor is visible." )
MANAGERS = ADMINS
with mock.patch('requests.post', side_effect=Timeout) as mock_post: self.call_create_zendesk_ticket() self.assertTrue(mock_post.called)
self.assertIn('<span class="important-dates-item-text">$10</span>', resp.content)
created_courses = [] for course_number in course_numbers: created_courses.append(CourseFactory.create(number=course_number))
return (tenant_id, subnet, router, network, floatingip, port, security_group, security_group_rule)
for i in range(X.shape[0]): assert_almost_equal(np.linalg.norm(X[0].data, 1), 1.0)
return course_metadata_utils.url_name_for_course_location(self.location)
import salt.ext.six as six from Crypto.Cipher import PKCS1_OAEP
tm.assert_numpy_array_equal(res, expected)
def f(): s[l]
for sys in systems: sh(django_cmd(sys, settings, "collectstatic --noinput > /dev/null")) print("\t\tFinished collecting {} assets.".format(sys))
status = 'satisfied' reason = {'final_grade': grade_summary['percent']}
field_data['attempts'] = int(attempts)
clear_data_home(data_home=data_home) assert_false(os.path.exists(data_home))
result = f.clean('12-21-2010 13:30') self.assertEqual(result, datetime(2010, 12, 21, 13, 30))
if len(i8) and self.is_monotonic: if i8[0] != tslib.iNaT: return self._box_func(i8[0])
CourseEnrollmentFactory(user=self.student, course_id=self.course.id)
self._old_models = apps.app_configs['model_options'].models.copy()
self.q(css='.dropdown').first.click()
out, err = DETAILS['server'].sendline(cmd)
for name, settings in six.iteritems(config.copy()): if '.' in name: log.warning( 'Please switch to the new providers configuration syntax' )
from __future__ import absolute_import
from __future__ import print_function
self.get_readlock(local_name) self.release_writelock()
ac = AppConfig('label', Stub(__path__=['a'], __file__='b/__init__.py')) self.assertEqual(ac.path, 'a')
self.assertEqual(context['currency_symbol'], '$') self.assertEqual(context['currency'], 'usd')
from salt.pillar import hg_pillar HGLIB = hg_pillar.hglib
honor.suggested_prices = '5, 10, 15' honor.save() self.assertTrue(CourseMode.has_payment_options(self.course_key))
if not any(r for r in trusted_roots if fnmatch.fnmatch(trust_root, r)): log.error('non-trusted root') return False
df = DataFrame({'text': ['some words'] + [None] * 9}) expected = df.dtypes
appended = self.mixed_frame[:5].append(self.mixed_frame[5:]) assert_frame_equal(appended, self.mixed_frame)
self._assertOLXBase(block_list, draft=True, published=False)
self.assertRaises(KeyError, lambda: self.df2.loc['e'])
problem.save() self.assertIn('graceperiod', own_metadata(problem)) self.assertEqual(problem.graceperiod, new_graceperiod)
assert False, "Tried to Extract from an invalid type."
space, source = data_specs if isinstance(space, CompositeSpace): sub_spaces = space.components sub_sources = source else: sub_spaces = (space,) sub_sources = (source,)
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
self.assertIn('timestamp', parameters) parsed_date = from_timestamp(parameters['timestamp']) self.assertLess(parsed_date, datetime.datetime.now(pytz.UTC))
raise NotImplementedError('subclasses of SyndicationFeed must provide a write() method')
return traverse_post_order( start_node=self.root_block_usage_key, get_children=self.get_children, filter_func=filter_func, )
ii = iter_offset - 1
if bulk_ops_record.is_root: self._start_outermost_bulk_operation(bulk_ops_record, course_key)
y_subpopulation = np.zeros((max(n_subsamples, n_features))) lstsq, = get_lapack_funcs(('gelss',), (X_subpopulation, y_subpopulation))
self.assertFalse(CourseMode.is_professional_mode(None))
idx = self.index.copy() target = idx.copy() idx.names = target.names = [None, None]
html_favicon = 'logos/favicon.ico'
import sys from salt.ext.six.moves import map if sys.version_info < (2, 7): import unittest2 as unittest else: import unittest
k = np.asarray(k) indexer = _update_indexer(_convert_to_indexer(k), indexer=indexer)
msg = '(regex_error/$" is not a valid regular expression' with self.assertRaisesMessage(ImproperlyConfigured, msg): reverse(views.empty_view)
ots = self.ts.astype('O') ots[::2] = None repr(ots)
self.course_fix = CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] )
sreq.destroy()
new_settings = get_agent_settings() failed_settings = dict()
self.assertEqual(iptables.build_rule(jump='CLUSTERIP', **{'new': ''}), '--jump CLUSTERIP --new ')
return timezone.localize(value, is_dst=is_dst)
self.assertContains(response, '<h3 id="admin_list-admin_actions">admin_actions</h3>', html=True) self.assertContains(response, '<li><a href="#admin_list-admin_actions">admin_actions</a></li>', html=True)
return self.get_selector('#disabled-btn-start-generating-certificates')
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request) self.assertEqual(courses_list_by_groups, []) self.assertEqual(courses_list, courses_list_by_groups)
from __future__ import absolute_import
return _render_certificate_template(request, context, course, user_certificate)
#pylint: disable=E0602
self.assertEqual( chicago_json, City.objects.geojson(bbox=True, crs=True, precision=5).get(name='Chicago').geojson )
self.assertEqual(Student._meta.ordering, [])
self._verify_masquerade_for_all_groups()
_city_file = '' _country_file = ''
for student in students_require_certs: task_progress.attempted += 1 status = generate_user_certificates( student, course_id, course=course )
class LegacySupport(object):
s_2 = -0.5 * (np.diag(K) - np.einsum('ij, ij -> j', C, C)) \
problem.display_name = "updated before calling revert" self.store.update_item(problem, self.user_id) self.store.revert_to_published(self.vertical_x1a, self.user_id)
replaces = []
dive = Book.objects.using('other').get(title="Dive into Python")
if values.dtype == np.object_: if convert_numeric: try: new_values = lib.maybe_convert_numeric(values, set(), coerce_numeric=True)
evt = salt.utils.event.get_event('minion', opts=self.opts, listen=False) evt.fire_event({'complete': True}, tag='/salt/minion/minion_schedule_saved')
response.set('id', response_id_str) response_id += 1
from salt.pillar.sql_base import SqlBaseExtPillar
from __future__ import absolute_import
self.assertChildren(block, self.all_children)
_config_filename_ = 'proxy' _default_logging_logfile_ = os.path.join(syspaths.LOGS_DIR, 'proxy')
from __future__ import absolute_import, print_function import logging
return os.access(parent_dir, os.W_OK)
from __future__ import division, print_function
self.assertFalse(any(settings.PDF_RECEIPT_TERMS_AND_CONDITIONS in s for s in pdf_content))
return list(self.asobject)
config['course_org_filter'] = organizations[0] self.current_request_configuration.data = config
X, Y = make_blobs(n_samples=50, centers=2, random_state=0, cluster_std=0.60)
from salt.modules import mysql
grouped = PanelGroupBy(obj, grouper=grouper, axis=self.axis)
get_request_dict = {} result = module.reset_problem(get_request_dict)
self.assertFalse(self.store.has_changes(test_course)) self.assertFalse(self.store.has_changes(chapter))
#html_domain_indices = True
from __future__ import absolute_import
raise ValueError("Cannot use a custom kernel function. " "Precompute the kernel matrix instead.")
return http.HttpResponseBadRequest(template.render())
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
cummin = self.tsframe.cummin() expected = self.tsframe.apply(Series.cummin) tm.assert_frame_equal(cummin, expected)
return {'name': self.name, 'closed': False, '_committed': True, '_file': None}
salt '*' vsphere.get_host_datetime my.esxi.host root bad-password
raise
from __future__ import absolute_import
sql, params = self.sql_with_params() return sql % params
if len(stats) < h_len: h_len = len(stats) dev_stats[disk].append(stats)
supports_date_lookup_using_string = True
from __future__ import absolute_import import logging
from salt.states import mac_package as macpackage
variables, functions = add_defaults(variables, functions, case_sensitive)
saltcloudmod.__salt__ = {}
cache_page(60 * 15), cache_control(private=True), never_cache,
repofile = repos[repo]['file'] header, filerepos = _parse_repo_file(repofile)
idx = tm.makeDateIndex(100)
if messages is None: break if messages: self._used_storages.add(storage) all_messages.extend(messages) if all_retrieved: break
if op in ['__eq__', '__ne__']: return getattr(np.array(self), op)(np.array(other))
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.assertContains(response, "<li class=\"wrapper-organization\">", 1)
db_query = models.StudentModule.objects.filter( course_id__exact=course_id, module_type__exact="sequential", ).values('module_state_key').annotate(count_sequential=Count('module_state_key'))
_write_metric(num_violations, (Env.METRICS_DIR / "jshint"))
return self.find_courses_by_search_target('wiki_slug', wiki_slug)
if isinstance(value, string_types) and ' ' in value: value = re.sub(r'\s+', '\t', value)
for model_state in self.apps.real_models: if (model_state.app_label, model_state.name_lower) in related_models: states_to_be_rendered.append(model_state)
class_sep = 1e6 make = partial(make_classification, class_sep=class_sep, n_redundant=0, n_repeated=0, flip_y=0, shift=0, scale=1, shuffle=False)
updates.append('{0}: {1}'.format( self.install_results.GetUpdateResult(i).ResultCode, self.install_collection.Item(i).Title))
location = course_key.make_usage_key('course', 'test') link = utils.get_lms_link_for_item(location) self.assertEquals(link, "//localhost:8000/courses/mitX/101/test/jump_to/i4x://mitX/101/course/test")
thumbnail_location = asset.get('thumbnail_location', None) if thumbnail_location: thumbnail_location = course_key.make_asset_key( 'thumbnail', thumbnail_location[4])
return self.q(css="div.problem div.capa_inputtype.textline div.correct span.status").is_present()
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, source_course_key): component = self.store.get_item(published_xblock.location) self.assertEqual(component.display_name, updated_display_name)
class_members = set() for cls in classes: class_members.update([cls.__name__ + '.' + x[0] for x in inspect.getmembers(cls)])
if dot_models.Application.objects.filter(client_id=self._get_client_id(request)).exists(): return self.dot_adapter else: return self.dop_adapter
if xblock.category == 'chapter': return xblock
expErrMsg = "Interpolation methods other than " with tm.assertRaisesRegexp(ValueError, expErrMsg): self.ts.quantile(0.9, interpolation='nearest')
return self._bookmarks_cache(course_key, fetch=True)
X_bernoulli = [[1, 100, 0], [0, 1, 0], [0, 100, 1]] X_multinomial = [[0, 1], [1, 3], [4, 0]]
log = logging.getLogger(__name__)
assert len(funcs) > 1, 'At least 2 callables must be passed to compose' return reduce(_compose2, funcs)
pref = UserPreference.get_value(user, 'testkey_none') self.assertIsNone(pref)
import salt.ext.six as six
$ ./manage.py lms resubmit_error_certificates -c edX/DemoX/Fall_2015 -c edX/DemoX/Spring_2016
step = 1 if key.step is None else key.step if key.start is None: start = l - 1 if step < 0 else 0 else: start = key.start
self.q(css='button.signatory-panel-close').click() self.mode = 'details' self.wait_for_signatory_detail_view()
delete = self.run_cloud('-d {0} --assume-yes'.format(self.INSTANCE_NAME)) delete_str = ''.join(delete)
FEATURES['ENABLE_SOFTWARE_SECURE_FAKE'] = True
test_model = CourseMetadata.fetch(self.fullcourse) self.assertNotIn('edxnotes', test_model)
raise SaltCloudSystemExit( 'The query_instance action must be called with -a or --action.' )
expected_energy_p = model.energy( layer_to_chains[model.visible_layer], [layer_to_chains[layer] for layer in model.hidden_layers] ).mean()
AWS_API_DESCRIPTION = _dict_to_json_pretty({"provisioned_by": "Salt boto_apigateway.present State", "context": "See deployment or stage description"})
try: userSID, domainName, objectType = win32security.LookupAccountName(None, user) except pywinerror: err += 'User does not exist\n'
self.widgets[0].choices = choices
raise NotImplementedError()
c1 = Categorical(["a", "b", "c", "a"]) self.assertFalse(c1.ordered)
def __get_pillar_files_from_s3_meta(s3_meta): return [k for k in s3_meta if 'Key' in k]
raise EntitiesForbidden(name, None, base, sysid, pubid, notation_name)
assert_series_equal(model.y_predict, model.predict(x=x))
handlers = [handlers]
new_settings = get_container_setting(name=name, container=container, settings=settings.keys()) failed_settings = dict()
centers = km.cluster_centers_ assert_equal(centers.shape, (n_clusters, n_features))
name_placeholder = _(u"Jane Doe")
return self.page_num > 1
raise ItemNotFoundError(course_key)
enabled = [] for line in service_lines: if line.startswith('PID'): continue
if target.is_unique:
rval = np.log(x) rval -= rval.mean() return rval
for i, octet in enumerate(octets):
self.minions = {}
link = link[3:]
i18n_service = self.runtime.service(self.mock_block, 'i18n') self.assertIsNotNone(i18n_service) self.assertIsInstance(i18n_service, ModuleI18nService)
if name in list_folders(location): return '{0} already exists'.format(name)
def isatty(self): return True
assert_equal(len(np.unique(km.labels_)), 3)
_ = lambda text: text
form = self._admin_form("verified", upgrade_deadline=self.UPGRADE_DEADLINE)
response = self.client.get('/login_protected_view_custom_redirect/') self.assertRedirects(response, '/accounts/login/?redirect_to=/login_protected_view_custom_redirect/')
if 'enabled' in kwargs: return _enabled_used_error(ret)
import salt.utils import salt.utils.itertools from salt.utils.decorators import which as _which
pass
super(XBlockTestCase, self).setUp()
time.sleep(3)
s = s.partition(b"\0")[0] return s.decode(self._encoding or self._default_encoding)
result = prefix_middleware.process_request(request) self.assertIsNone(result)
__virtualname__ = 'group'
return ret
'context_processors.doc_url',
data = 'a,b,c\n4,5,6\n#comment' result = self.read_csv(StringIO(data), comment='#') tm.assert_frame_equal(result, expected)
return self.has_access
response = self.client.get(shortcut_url, follow=True) self.assertTemplateUsed(response, 'admin/login.html')
problem = self.build_problem(answer=script)
from salt.exceptions import SaltSystemExit
from __future__ import unicode_literals
from __future__ import division
result = func(Series([]), Series([]), 50, min_periods=min_periods) tm.assert_series_equal(result, Series([]))
lib_names = ['gdal111', 'gdal110', 'gdal19', 'gdal18', 'gdal17']
module = descriptor
import salt.daemons.masterapi
set_crontab(
tm.assert_series_equal(result, dense_result, check_dtype=False)
m = re.search(br'<a href="([^"]*)"[^>]* id="lookup_id_inquisition"', response.content)
return self.q(css='ul.listing-courses .course-item')
import msgpack if msgpack.loads(msgpack.dumps([1, 2, 3]), use_list=True) is None: raise ImportError
from salt.modules import win_system
return self.tag_function
name = self.env.add_tmp(np.float32(left.value)) left = self.term_type(name, self.env)
f1 = IntegerField(localize=True) self.assertWidgetRendersTo(f1, '<input id="id_f" name="f" type="text" required />')
lookup_value = '[^/.]+'
from salt.states import selinux
return [ m['content_id'] for m in find_gating_milestones( course.id, None, 'requires', {'id': user.id} ) ]
try: return dateutil.parser.parse(datestr).replace(tzinfo=utc) except ValueError: raise DashboardError(_("Unable to parse date: ") + datestr)
self.assertTrue(self._has_changes(locations['grandparent'])) self.assertTrue(self._has_changes(locations['parent']))
return deepcopy(problemtree)
return combined
from lms.djangoapps.ccx.utils import get_ccx_from_ccx_locator return get_ccx_from_ccx_locator(course_id)
if ax.freq is not None or ax.inferred_freq is not None:
n_samples = 60 n_features = 20
CourseFixture( self.course_info['org'], self.course_info['number'], self.course_info['run'], self.course_info['display_name'] ).install()
return None
import salt.ext.six as six
name = str(name)
from __future__ import absolute_import import os import sys import shutil import tempfile import textwrap import copy
for length in [248, 249, 250, 251, 252]:
input_attrs['id'] = '%s_%s' % (id_, i)
create_course(step, course)
vmin_orig = vmin
if not hasattr(os, 'fork'): return 1 try: return int(os.environ['DJANGO_TEST_PROCESSES']) except KeyError: return multiprocessing.cpu_count()
@functools.wraps(fn) def wrapped(*args, **kwargs): orig_mode = config.mode if orig_mode in ["DebugMode", "DEBUG_MODE"]: config.mode = "FAST_RUN"
n_runs = 5
self.win_downloader = self.update_session.CreateUpdateDownloader() self.win_downloader.Updates = self.download_collection
import logging import re
for line in header.split(b'\r\n'): try: name, (value, params) = _parse_header(line) except ValueError: continue
self.q(css='a[data-section=certificates]').first.click() certificates_section = CertificatesPage(self.browser) certificates_section.wait_for_page() return certificates_section
from codecs import lookup, BOM_UTF8 import re from io import TextIOWrapper, open cookie_re = re.compile("coding[:=]\s*([-\w.]+)")
with tm.assertRaises(ValueError): DataFrame({'a': 0.7})
(plaintext, err_from_stderr) = process.communicate( input=html_message.encode('utf-8') )
return structure['blocks'].get(block_key)
EDX_PLATFORM_REVISION = dealer.git.Backend(path=REPO_ROOT).revision
uid = uinfo['uid']
class Meta(object): model = CourseCohort
max_scores_cache = MaxScoresCache("test_max_scores_cache") max_scores_cache.fetch_from_remote(self.locations)
destroy(vm_['name'])
enable_mktg_site = microsite.get_value( 'ENABLE_MKTG_SITE', settings.FEATURES.get('ENABLE_MKTG_SITE', False) ) if enable_mktg_site: return name in settings.MKTG_URLS else: return name in settings.MKTG_URL_LINK_MAP
if out['retcode']: ret = out['stderr'].strip() else: ret = True return ret
r = self._get_resampler(obj) r._set_binner() return r.binner, r.grouper, r.obj
from salt.modules import status from salt.exceptions import CommandExecutionError
SignalHandler.course_published.disconnect(listen_for_course_publish)
class WriteSaltVersion(Command):
raise TemplateDoesNotExist(', '.join(not_found))
response_content = {'test_response': 'test_content'} self.server.config['default'] = response_content
sel = np.zeros(self.num_examples, dtype=bool) sel[next_index] = True next_index = sel
return self.target_type
@skipUnlessDBFeature('test_db_allows_multiple_connections') def test_signal(self): data = {}
user: fred password: saltybacon private_key: /root/mykey.pem private_key: mykey
Restaurant.objects.all().delete()
if relevant_verification is not None: if relevant_verification.status == "approved": status = VERIFY_STATUS_APPROVED elif relevant_verification.status == "submitted": status = VERIFY_STATUS_SUBMITTED
self.get_data_specs(model)[0].validate(data)
from __future__ import absolute_import import os import logging import socket import pprint
from __future__ import unicode_literals
if kw_function_args: args = [ "{0}='{1}'".format(key, value) for key, value in kw_function_args.iteritems() ]
modal.policy = 'Lab' modal.save()
self.coefs_ = [] self.intercepts_ = []
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index=0, chapter='fooey', page='xyzzy')
tot_bytes = win32api.GlobalMemoryStatusEx()['TotalPhys'] grains['mem_total'] = int(tot_bytes / (1024 ** 2))
world.wait_for_ajax_complete()
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
import logging
err_msg = None
sliced = self.frame.ix[:, -3:]
self.n_layers_ = len(layer_units)
self.assertTrue(self.open_assessment.has_score)
pass
from salt.states import mac_keychain as keychain
for browser_lang in lang_headers: if browser_lang in system_released_languages: if request.session.get(LANGUAGE_SESSION_KEY, None) is None: request.session[LANGUAGE_SESSION_KEY] = unicode(browser_lang) break
s3.query( key=creds.key, keyid=creds.keyid, kms_keyid=creds.kms_keyid, bucket=bucket, service_url=creds.service_url, path=_quote(path), local_file=cached_file_path, verify_ssl=creds.verify_ssl, location=creds.location )
aid = self.answer_ids[-1] new_cmap.set_hint_and_mode(aid, hint_text, hintmode)
return self.find_css('.signatory-panel-body .signatory-organization-value').first.text[0]
span_element = rendered_html.find('span') self.assertEqual(span_element.get('attr'), "TEST")
self.assertEqual(sorted_deps[-1], M2MThroughAB)
pass
if isinstance(grade_response, dict) and 'msg' in grade_response: grade_response['msg'] = "<div>{0}</div>".format(grade_response['msg'])
for submodule in submodules: if submodule.__name__.startswith(mod.__name__ + '.'): reload(submodule) self._reload_submodules(submodule)
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
return self._check_login_or_register_page(self.register_page_url, "registerUrl")
try: import boto3 from botocore.exceptions import ClientError HAS_BOTO = True except ImportError: HAS_BOTO = False
assert_raises(ValueError, partial_dependence, {}, [0], X=X)
if block_type in self.disabled_xblock_types: return self.default_class return super(DescriptorSystem, self).load_block_type(block_type)
from __future__ import absolute_import
from __future__ import unicode_literals
if 'FEATURES' in ENV_TOKENS: del ENV_TOKENS['FEATURES']
from salt.utils import namespaced_function import salt.ext.six as six import salt.utils.cloud import salt.config as config from salt.utils import http from salt import syspaths
if isinstance(pillar_rows, list): for row in pillar_rows: rows.append(row) else: rows.append(pillar_rows)
FEATURES['ENABLE_CSMH_EXTENDED'] = True INSTALLED_APPS += ('coursewarehistoryextended',)
settings.LOCALE_PATHS = (theme_root / 'conf/locale',) + settings.LOCALE_PATHS
matching_events = self.get_matching_events_from_time(start_time=start_time, event_filter=event_filter) return len(matching_events) >= number_of_matches, matching_events
require_http_methods(["GET"]), require_GET, require_POST, require_safe, condition(lambda r: None, lambda r: None),
ret['comment'] = 'The state of "{0}" was changed!'.format(profile)
with self.assertRaises(InvalidSessionKey): self.backend()._key_to_file("a\\b\\c")
target_fields = self.get_path_info()[-1].target_fields if len(target_fields) > 1: raise exceptions.FieldError("Can't use target_field for multicolumn relations.") return target_fields[0]
if hasattr(self.beta_tester, '_roles'): del self.beta_tester._roles self.assertFalse(CourseBetaTesterRole(self.course.id).has_user(self.beta_tester))
import logging
if not uninstaller: log.error('Error: No installer or uninstaller configured ' 'for package {0}'.format(name)) ret[target] = {'no uninstaller': version_num} continue
from __future__ import absolute_import import json import logging import os.path import pprint import socket import urllib import yaml
try: searcher.index(cls.DISCOVERY_DOCUMENT_TYPE, [course_info])
attempt.delete() status = SoftwareSecurePhotoVerification.user_status(user) self.assertEquals(status, ('must_reverify', "No photo ID was provided."))
'SHOW_BUMPER_PERIODICITY': 7 * 24 * 3600,
if INSTANCE_NAME in [i.strip() for i in self.run_cloud('--query')]: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
supports_forward_references = True
CreateExtension('uuid-ossp'), HStoreExtension(), TrigramExtension(), UnaccentExtension(),
self.course_nav.go_to_vertical('Test Problem 2')
import salt.utils json = salt.utils.import_json()
if delta < 0: return self._cache.decr(key, -delta) try: val = self._cache.incr(key, delta)
param.update({key: str(data).lower()})
comment, passed, retries = _download(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( patch, MagicMock, NO_MOCK, NO_MOCK_REASON )
MIGRATION_MODULES = { 'social.apps.django_app.default': 'social.apps.django_app.default.south_migrations' }
from salt.states import linux_acl
if not path: raise ValueError('no path specified')
from salt.utils.odict import OrderedDict from salt.modules import jboss7
script = "calculated_ans = 'x+x'"
pieces["closest-tag"] = None count_out = run_command(GITS, ["rev-list", "HEAD", "--count"], cwd=root)
msg = msg.replace('&#60;', '&lt;')
bands.append(band_result)
super(SAMLProviderConfig, self).clean() self.other_settings = clean_json(self.other_settings, dict)
for i, item in enumerate(block_items):
self.assertEqual(self.func(None), [sessions.W010])
context = get_ccx_creation_dict(course) messages.error(request, context['use_ccx_con_error_message']) return render_to_response('ccx/coach_dashboard.html', context)
else:
X = StandardScaler().fit_transform(X)
cls.objects.create(checkpoint=checkpoint, user=user, status=status)
return '/boot/grub/menu.lst'
self.kind = 'timestamp'
return self.q(css='.cohorts-state-section').visible or self.q(css='.new-cohort-form').visible
return ( cls.is_restricted_course(unicode(course_id)) and cls._get_restricted_courses_from_cache().get(unicode(course_id))["disable_access_check"] )
prefix = self.idp_slug + ":" return self.backend_name == social_auth.provider and social_auth.uid.startswith(prefix)
from __future__ import unicode_literals
self.config.pop(cli_log_file_datefmt)
def __init__(self): self.store = [] def add(self, level, message, extra_tags=''): self.store.append(message)
if graceperiodjson is not None: if 'grace_period' in graceperiodjson: graceperiodjson = graceperiodjson['grace_period']
settings_dict = self.connection.settings_dict val = settings_dict['TEST'].get(key, default) if val is None: val = TEST_DATABASE_PREFIX + settings_dict[prefixed] return val
self.get_extended_hints(student_answers, new_cmap)
self.q(css='a[data-section=student_admin]').first.click() student_admin_section = StudentAdminPage(self.browser) student_admin_section.wait_for_page() return student_admin_section
'syndic_max_event_process_time': float,
self._studio_add_content(0)
class SongForm(Form): name = CharField() composers = MultipleChoiceField()
iterator = SequentialSubsetIterator(10, 3, 5)
EmptyPromise( lambda: self.q(css=enrollment_button).present, "Enrollment button" ).fulfill() self.q(css=enrollment_button).click()
success = 'correct' for answer_id in correct_map: if not correct_map.is_correct(answer_id): success = 'incorrect'
released_languages = [ Language(tuple[0], tuple[1]) for tuple in settings.LANGUAGES if tuple[0] in released_language_codes ]
vocabulary = defaultdict() vocabulary.default_factory = vocabulary.__len__
self.assertTrue(CourseStructure.objects.filter(course_id=self.course.id).exists()) response = self.http_get_for_course() self.assertEqual(response.status_code, 200)
mean_x2 = mean(x * x) assert_equal(var_x, mean_x2 - (mean_x * mean_x))
X_scaled_back = scaler.inverse_transform(X_scaled) assert_array_almost_equal(X_scaled_back, X)
__virtualname__ = 'pkg'
cached_calls = [ [num_uncached_mongo_calls, num_uncached_sql_queries], [num_cached_mongo_calls, num_cached_sql_queries], ] for expected_mongo_calls, expected_sql_queries in cached_calls: with self.assertNumQueries(expected_sql_queries): with check_mongo_calls(expected_mongo_calls): call_single_thread()
request.upload_handlers.insert(0, QuotaUploadHandler()) return file_upload_echo(request)
df.to_csv(path) result = self.read_csv(path, index_col=0, parse_dates=['B']) tm.assert_frame_equal(result, df)
all_assets.extend(course_assets.setdefault(asset_key.block_type, [])) idx = all_assets.find(asset_key)
if created: self._ddog_increment(evt_time, 'set_many.state_created') else: self._ddog_increment(evt_time, 'set_many.state_updated')
self.assertLess(ordered_sigs.index('s3'), ordered_sigs.index('s1'))
homework_1_score = 1.0 / 2 homework_2_score = (1.0 + 2.0) / 4 self.check_grade_percent(round((homework_1_score + homework_2_score) / 2, 2))
data = { 'username': 'inactive', 'password': 'password', }
ps = tm.makePeriodSeries() shifted = ps.tshift(1) unshifted = shifted.tshift(-1)
default = models.Manager()
angle = 0.0 perplexity = 10 n_samples = 100 for n_components in [2, 3]: n_features = 5 degrees_of_freedom = float(n_components - 1.0)
if ret.get('Exists'): log.info('DSC Compile Config: {0}'.format(ret)) return ret
from __future__ import absolute_import
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
if self._needs_reindex_multi(axes, method, level): try: return self._reindex_multi(axes, copy, fill_value) except: pass
field = field.ljust(140)
mode_display_name = models.CharField(max_length=255, verbose_name=_("Display Name"))
import logging
'html5_sources': ['http://www.example.com/source.mp4'], 'data': ''
pca = PCA(n_components=n_digits).fit(data) bench_k_means(KMeans(init=pca.components_, n_clusters=n_digits, n_init=1), name="PCA-based", data=data) print(79 * '_')
pass
orig = pd.Series([1, 0, 0, 4], dtype=np.int64) sparse = orig.to_sparse(fill_value=0)
self.logout() self.login(self.student_user.email, 'test')
class GetDateShowHiddenInitial(Form): mydate = DateField(widget=SelectDateWidget, show_hidden_initial=True)
if self.structure_json: return json.loads(self.structure_json) return None
pkg_params = {name: kwargs.get('version')}
return get_callable(settings.CSRF_FAILURE_VIEW)
def make_panel(): index = 5 cols = 3
try: dive.editor = marty except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
indices = np.searchsorted(sorted_labels, labels[:n_labels]) tp_sum = tp_sum[indices] true_sum = true_sum[indices] pred_sum = pred_sum[indices]
from pandas.core.groupby import PanelGroupBy axis = self._get_axis_number(axis) return PanelGroupBy(self, function, axis=axis)
parser = TextParser(lines, index_col=0, chunksize=2, skiprows=[1]) chunks = list(parser) tm.assert_frame_equal(chunks[0], df[1:3])
self.start_lineno = start_lineno self.end_lineno = end_lineno self.text = text
self.test_create_account()
self.item.youtube_id_1_0 = None with self.assertRaises(ValueError): self.item.get_transcript(transcripts)
profile = UserProfile.objects.get(user=user) return profile.name
try: return self._loaded_field_names_cache except AttributeError: collection = {} self.deferred_to_data(collection, self.get_loaded_field_names_cb) self._loaded_field_names_cache = collection return collection
errors.extend(m for m in e.error_list if m not in errors)
self.profile.meta = {u'foo': u'bar'} self.profile.save() self.assert_no_events_were_emitted()
c.execute('PRAGMA foreign_keys = %s' % int(self._initial_pragma_fk))
rev = rev.lower() remote_rev = rev remote_rev_type = 'sha1'
self.options.update({'use_decimal': False})
queue = [(usage_key, ())] while len(queue) > 0:
mod.__deepcopy__ = lambda x: mod
if len(self._flat_data_specs[1]) == 0: X = () self.run_prereqs(X, d) a(*X)
assert preprocessor.P_.shape == (self.X.shape[1], self.X.shape[1]) assert_allclose(np.dot(preprocessor.P_, preprocessor.inv_P_), identity, rtol=1e-4)
return make_immutable_fields_list( "concrete_fields", (f for f in self.fields if f.concrete) )
users_state = {}
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return x * (x > 0)
result = f.clean('21.12.2010') self.assertEqual(result, date(2010, 12, 21))
PARENTAL_CONSENT_AGE_LIMIT = 13
values = Series([u(' aa '), u(' bb \n'), NA, u('cc ')])
DATE_INPUT_FORMATS = [
continue
assets_by_type = defaultdict(lambda: SortedAssetList(iterable=course_assets.get(asset_type, [])))
return self.find_css('.wrapper-delete-button').first.attrs('data-tooltip')[0]
return theano.tensor.constant(np.asarray(value, dtype=theano.config.floatX))
_update_badge_context(context, course, user)
dtype = bool f = lambda x: bool(regex.match(x))
silent = kwargs.pop('silent', False)
return len(self.q(css='.page-content-secondary .team-member'))
MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'
X = X_digits_binary[:50] y = y_digits_binary[:50]
grains['os'] = grains['osfullname'] = 'Solaris' grains['osrelease'] = ''
HAS_MARKUPSAFE = False
final_attrs['value'] = force_text(self.format_value(value))
service.__salt__ = {} service.__opts__ = {}
top_level_logger.propagate = True
self.assertEqual(list(storage), example_messages)
fill_value = _get_fill_value(dtype, fill_value=fill_value, fill_value_typ=fill_value_typ)
from salttesting import TestCase, skipIf from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON )
from salt.exceptions import CommandExecutionError, SaltInvocationError
f('int64') f('float64')
return _error(ret, u_check)
self.mock_tracker.reset_mock()
self.assertTrue(os.path.islink(os.path.join(settings.STATIC_ROOT, 'test.txt')))
from __future__ import absolute_import import os import sys import random import subprocess import time
BULK_EMAIL_RETRY_DELAY_BETWEEN_SENDS = 0.02
raise ValueError("class_weight provided should be a " "dict or 'balanced'")
exc_info_on_loglevel=logging.DEBUG
max_value_length = settings.TRACK_MAX_EVENT / 4
out, err = self.run_django_admin(args) self.assertNoOutput(out) self.assertOutput(err, "already exists")
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
return False
result = first.difference(first._tuple_index) self.assertTrue(result.equals(first[:0]))
from salt.states import npm
try: lti_consumer = LtiConsumer.get_or_supplement( params.get('tool_consumer_instance_guid', None), params['oauth_consumer_key'] ) except LtiConsumer.DoesNotExist: return HttpResponseForbidden()
from salt.modules import debconfmod import os
throughputs = benchmark_throughputs(configuration) plot_benchmark_throughput(throughputs, configuration)
fresh_pillar = self.fetch_pillar() self.cache[self.minion_id] = {self.saltenv: fresh_pillar} log.debug('Pillar cache miss for minion {0}'.format(self.minion_id))
self.store.publish(item_location, self.user_id) item = self.store.get_item(item_location) self.assertTrue(self.store.has_published_version(item))
self.course = CourseFactory.create(default_store=store) self.course.course_image = '' url = course_image_url(self.course) self.assertEqual('static/test.png', url)
mask = str(mask).upper()
self.assertEqual(self.func(None), [base.W004])
os.environ.clear() os.environ.update(_orig_environ)
def boot_time(): return psutil.BOOT_TIME
with self.settings(PIPELINE_ENABLED=True): js_include = compressed_js('base_application') self.assertIn(u'lms-base-application.js', js_include)
params.update(default_flow_style=False, indent=__opts__['output_indent'])
if isinstance(value, Categorical): if not value.categories.equals(self.categories): raise ValueError("Cannot set a Categorical with another, " "without identical categories")
from __future__ import absolute_import import os import base64 import logging
if len(terms) == 1: return _align_core_single_unary_op(terms[0])
return response
with self.assertNumQueries(0): self.assertFalse( self.bookmark_service.set_bookmarked(usage_key=UsageKey.from_string("i4x://ed/ed/ed/interactive")) )
import salt.utils.pagerduty from salt.ext.six import string_types
chunks = list(r) self.assertEqual(chunks, [b'hello', b'world']) for chunk in chunks: self.assertIsInstance(chunk, six.binary_type)
pass
pass
from __future__ import absolute_import
return dataset.y.mean(axis=0)
from __future__ import absolute_import import json import copy
raise NotImplementedError()
pass
from __future__ import absolute_import
ellapsed = datetime.now() - start timeout = ellapsed.seconds + 3
from __future__ import absolute_import
arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))
return stdout
response = self._response() self.assertFalse(response.is_rendered) response.render() self.assertTrue(response.is_rendered)
import salt.utils.event
X = iris.data batch_size = X.shape[0] // 3 ipca = IncrementalPCA(n_components=2, batch_size=batch_size) pca = PCA(n_components=2) pca.fit_transform(X)
raise NotImplementedError()
self.mapping = mapping self.model = model
if values is None:
all_models_with_cache = (m for m in self.all_models if not m._meta.abstract) for m in all_models_with_cache: self.assertNotIn('_relation_tree', m._meta.__dict__)
result = s.str.extract('(_)', expand=False) exp = Series([NA, NA, NA], dtype=object) tm.assert_series_equal(result, exp)
svc_realpath = _get_svc_path(name)[0] down_file = os.path.join(svc_realpath, 'down')
return self.get_setting_element(self.PROBLEM_TYPE_LABEL).get_attribute('value')
return T.maximum(0.0, x)
c.value = 2 c.save() c.value = 3 c.save(force_update=True)
items_in_tree = self.store.get_items(course_key, include_orphans=False)
from salt.states import keystone
pass
return Registration.objects.get(user__email=email)
self.assertCalcEqual(True, [False, 'and', False, 'or', True])
self.go_to_sequential_position(2) execute_video_steps(tab2_video_names)
df[df[::-1] == 2] = 3 values[values == 2] = 3 assert_almost_equal(df.values, values)
form = modelform_factory(Person, fields="__all__") self.assertEqual(list(form.base_fields), ["name"])
assert_almost_equal(result._y.values.flat, [1, 4, 5], check_dtype=False)
user = UserSerializer() class Meta(object): model = UserPreference depth = 1
pred = grid_search.fit(train_data, target_train).predict(test_data) assert_array_equal(pred, target_test)
result = f.clean('1:30:05 PM') self.assertEqual(result, time(13, 30, 5))
warnings.warn("irow(i) is deprecated. Please use .iloc[i]", FutureWarning, stacklevel=2) return self._ixs(i, axis=0)
CreditCourse.objects.create( course_key=self.course.id, enabled=True, )
r = FOREST_REGRESSORS[name](random_state=0) assert_false(hasattr(r, "classes_")) assert_false(hasattr(r, "n_classes_"))
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
mode = (0o0777 ^ mask) & 0o0666 os.chmod(img_dest, mode)
master_doc = 'index'
table = self.table self.selection = Selection( self, where, start=start, stop=stop, **kwargs) values = self.selection.select_coords()
current_network_settings = _parse_current_network_settings()
exterior_ring = property(_get_ext_ring, _set_ext_ring) shell = exterior_ring
if logout_first: self.client.logout() self.client.login(username=self.user.username, password=self.user_password)
if not connection.features.gis_enabled or not connection.features.supports_raster: raise ImproperlyConfigured('Raster fields require backends with raster support.')
return modulestore().make_course_key(org, course, run).make_usage_key(block_type, block_id)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath, destructiveTest
page.wait_for_component_menu() click_css(page, 'button>span.large-html-icon', menu_index, require_notification=False)
from __future__ import absolute_import import copy
urlpatterns += ( url(r'^certificates/', include('certificates.urls', app_name="certificates", namespace="certificates")),
return np.all([kernel.is_stationary() for kernel in self.kernels])
p.bestchild = None self.assertIsNone(p.bestchild)
from __future__ import unicode_literals
return isinstance(part, slice) or com.is_list_like(part)
if 'user_partition_id' not in old_content or old_content['user_partition_id'] != self.user_partition_id: selected_partition = self.get_selected_partition() if selected_partition is not None:
config.enabled = False config.save() self.assertFalse(VerifiedTrackCohortedCourse.is_verified_track_cohort_enabled(course_key))
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
return False
ADD_GROUP = __random_string() DEL_GROUP = __random_string() CHANGE_GROUP = __random_string() ADD_USER = __random_string() REP_USER_GROUP = __random_string()
block_relations, transformer_data, block_data_map = zunpickle(zp_data_from_cache) block_structure = BlockStructureModulestoreData(root_block_usage_key) block_structure._block_relations = block_relations block_structure._transformer_data = transformer_data block_structure._block_data_map = block_data_map
cls._ix = None
re.compile(r'^/admin/'),
if cc_thread['closed']: raise PermissionDenied
@myattr_dec @myattr2_dec def func(): pass
return '%s'
return redirect_with_get('login', request.GET, False)
import threading self._w_monitor = ZeroMQSocketMonitor(self._socket) t = threading.Thread(target=self._w_monitor.start_poll) t.start()
pass
return self
second.name = 'name' result = first.difference(second) self.assertEqual(result.name, 'name')
module.system.DEBUG = True
with self.assertRaises(TemplateSyntaxError): FilterExpression("article._hidden|upper", p)
def _tile_columns(self): raise NotImplementedError('TODO')
base_estimator = LinearRegression() ransac_estimator = RANSACRegressor(base_estimator, min_samples=2, residual_threshold=0.0, random_state=0)
idx = pd.Index([0, 1, 2])
self.assertEqual(cl.queryset.count(), 1)
try: import salt.modules.shadow as shadow HAS_SHADOW = True except ImportError: HAS_SHADOW = False
testing_mode = os.environ.get('PANDAS_TESTING_MODE', 'None') if 'deprecate' in testing_mode: warnings.simplefilter('ignore', _testing_mode_warnings)
buckets = 10 bucket_width = 1. / float(buckets) for i in xrange(buckets): lower_lim = i * bucket_width upper_lim = (i+1) * bucket_width
data_x = data['images'][set_indices] data_x = np.cast['float32'](data_x) data_x = data_x[ex_range] data_x = data_x.reshape(data_x.shape[0], image_size ** 2)
ext_user = User.objects.get(email=self.ext_user.email) self.assertTrue(auth.user_has_role(ext_user, CourseStaffRole(self.course.id)))
for balancer in status: if not status[balancer]: ret['errors'].append(balancer) elif status[balancer]['activation'] != activation: ret['wrong_state'].append(balancer)
names = [o.limited_length.name for o in objs] self.assertEqual(names[0], 'tests/%s' % filename) six.assertRegex(self, names[1], 'tests/fi_%s.ext' % FILE_SUFFIX_REGEX)
return self.client.get(reverse('xdomain_proxy'))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock ensure_in_syspath('../../')
key = self.index.get_loc(key)
import salt.utils.compat import salt.utils.odict as odict from salt.exceptions import SaltInvocationError
self.assertEqual(len(self._get_enrollments()), 1)
s['select_field'] = AreaField('sq_m')
message_cache_key = ( 'embargo.message_url_path.courseware.{course_key}' ).format(course_key=self.course.id) cache.delete(message_cache_key)
output = self.engine.render_to_string('inheritance05') self.assertEqual(output, '1234')
return self.translations.get(msgid, msgid)
else: self.send_response(200)
course_id = CourseKeyField.Empty
def __init__(self, collection, page, num_pages, thread_count=0, corrected_text=None): self.collection = collection self.page = page self.num_pages = num_pages self.thread_count = thread_count self.corrected_text = corrected_text
httpretty.register_uri( httpretty.GET, "http://localhost:4567/api/v1/threads/{id}".format(id=thread_id), body="", status=status_code )
return super(SoftDeleteCouponManager, self).get_queryset().filter(is_active=True)
text_content.append(lt_object.get_text().encode('utf-8'))
X_train_fit, y_train_fit = slow_model._build_y(X_train, y_train, sample_weight=weights, trim_duplicates=False) slow_model._build_f(X_train_fit, y_train_fit)
y1 = np.append(y1, [2] * 4) y2 = np.append(y2, [2] * 4) assert_equal(cohen_kappa_score(y1, y2, labels=[0, 1]), kappa)
if isinstance(self._orig, Index): if is_bool_dtype(result): return result
remove_users(self.admin, CourseCreatorRole(), self.user) self.assertTrue(user_has_role(self.user, CourseCreatorRole()))
return g.wkt
config = _load_config()
problem = self.build_problem(answer='(1, ]') input_dict = {'1_2_1': '3'} with self.assertRaises(StudentInputError): problem.grade_answers(input_dict)
with self.connection.temporary_connection() as cursor: cursor.execute('SELECT %s()' % func) return cursor.fetchone()[0]
self.problem.system.is_author_mode = True self.assertEqual("original_get_html", self.problem.get_html())
ellps1 = sd['ellipsoid'] prec = sd['eprec']
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, Mock, patch, NO_MOCK, NO_MOCK_REASON )
response = self.client.post( reverse('change_enrollment'), { 'course_id': course.id.to_deprecated_string(), 'enrollment_action': 'enroll' } ) return response
return SON([ (key, id_dict[key]) for key in ('tag', 'org', 'course', 'category', 'name', 'revision') ])
response = self.client.post(self.url, { "email": "invalid@example.com", "password": self.PASSWORD, }) self.assertHttpForbidden(response)
prunable = [] snapshots = {} for key in schedule.keys(): snapshots[key] = []
if __opts__.get('requests_lib', False): from requests.exceptions import HTTPError else: from urllib2 import HTTPError
self.closed = False self.terminated = False
solver = 'svd'
pass
def f(): s[l] = 0
X = np.asarray(iris.data, dtype=dtype) y = iris.target assert_array_equal(est.fit(X, y).predict(X), y)
self.assertEqual(upper('\xeb'), '\xcb')
kwargs['name'] = repo
repo = repo.split('\\') definition = name.split('.') repo.extend(definition)
slug = hashlib.sha256(slug).hexdigest()
if not isinstance(config, dict): return False, ('Configuration for memusage ' 'beacon must be a dictionary.') return True, 'Valid beacon configuration'
a = A aaaa = AAAA ns = NS spf = SPF mx = MX
import copy
cls.course_hidden_visibility = CourseFactory.create( display_name='Hidden_course', org='TestMicrositeX', catalog_visibility=CATALOG_VISIBILITY_NONE, emit_signals=True, )
child_to_delete_location = self.problem_y1a_1 old_parent_location = self.vertical_y1a self.store.delete_item(child_to_delete_location, self.user_id)
nv.validate_resampler_func('std', args, kwargs) return self._downsample('std', ddof=ddof)
return UserPartition.from_json(self.configuration)
return ''
salt.utils.files.process_read_exception(exc, key)
import salt.utils import salt.utils.decorators as decorators from salt.utils.odict import OrderedDict
return self.thread.context
bad1 = copy(city_mapping) bad1['foobar'] = 'FooField'
return self.q(css='.bookmarks-empty-header').text[0]
script_element = rendered_html.find('script') self.assertEqual(None, script_element)
ssh_dir = os.path.dirname(full) if user: uinfo = __salt__['user.info'](user)
from salttesting import TestCase, skipIf from salttesting.mock import ( patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
return (load, (filename, self._mmap_mode))
auth = _auth(profile=profile)
updated_deadline = VerificationDeadline.deadline_for_course(self.course.id) self.assertEqual(updated_deadline, new_deadline)
upload_csv_to_report_store(rows, 'student_profile_info', course_id, start_date)
@task(default_retry_delay=settings.CREDIT_TASK_DEFAULT_RETRY_DELAY, max_retries=settings.CREDIT_TASK_MAX_RETRIES)
from salt.exceptions import SaltRenderError import salt.utils.templates
test_data = state_run['cmd_|-test_two_changing_states_|-echo "Success!"_|-run']['comment'] expected_result = 'Command "echo "Success!"" run' self.assertIn(expected_result, test_data)
'LOG_POSTPAY_CALLBACKS': True,
stream.write('Server-side exception handling payload') stream.close()
if is_object_dtype(value.dtype): value = _possibly_infer_to_datetimelike(value)
first_name_label = _(u"First Name")
__virtualname__ = 'system'
self._update_cutoff()
classes = np.unique(y) class_weight = compute_class_weight("balanced", classes, y) class_weight_dict = dict(zip(classes, class_weight)) return class_weight_dict
self.create_credentials_config() self.mock_credentials_api(self.user) actual = get_user_credentials(self.user) self.assertEqual(actual, self.CREDENTIALS_API_RESPONSE['results'])
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salt.utils import decorators from salt.version import SaltStackVersion from salt.exceptions import CommandExecutionError
if settings.FEATURES["USE_CUSTOM_THEME"]: template = "theme-" + template
for arg in [True, False]: with tm.assertRaises(TypeError): read_html(self.spam_data, header=arg)
outp = Series(ujson.decode(ujson.encode(s))).sort_values() self.assertTrue((s == outp).values.all())
course_key = CourseKey.from_string(course_id) with modulestore().bulk_operations(course_key): return _progress(request, course_key, student_id)
continue
course = self.process_xml(xml.CourseFactory.build()) self.assertEquals(course_image_url(course), '/static/xml_test_course/images/course_image.jpg')
self.q(css='a.nav-item').filter(text='All Topics')[0].click()
try: email = CourseEmail.create( course_id, request.user, targets, subject, message, template_name=template_name, from_addr=from_addr ) except ValueError as err: return HttpResponseBadRequest(repr(err))
result = self.get_result(allow_cache_miss) self.verify_result_with_fallback_and_youtube(result)
_mock_counts.return_value = {} with self.assertRaises(SystemExit): call_task('pavelib.quality.run_safelint')
if mode == "login": return external_auth_login(request) elif mode == "register": return external_auth_register(request)
weights[rng.rand(n_samples) < 0.1] = 0
for student in students[6:7]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=CertificateStatuses.notpassing, mode='honor' )
assert_raises(ValueError, k_means, X, n_clusters=X.shape[0] + 1)
request = get_request_for_user(self.user) answer_entrance_exam_problem(self.course, request, self.problem_1)
attempt = SoftwareSecurePhotoVerification.objects.create(user=self.user) attempt.mark_ready() attempt.submit()
handle_svc = win32service.CreateService(handle_scm, name, display_name, win32service.SERVICE_ALL_ACCESS, service_type, start_type, error_control, bin_path, load_order_group, 0, dependencies, account_name, account_password)
result = result.replace("'", "") return result
'ENABLE_EDXNOTES': False,
@cached_property def related_manager_cls(self): return create_generic_related_manager( self.rel.model._default_manager.__class__, self.rel, )
return '{scheme}://{host}{path}'.format( scheme=self.scheme, host=self._get_raw_host(), path=self.get_full_path(), )
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
return response
if m_p > m_n: u = x_p / x_p_nrm v = y_p / y_p_nrm sigma = m_p else: u = x_n / x_n_nrm v = y_n / y_n_nrm sigma = m_n
user = cc.User.from_django_user(request.user) commentable = cc.Commentable.find(commentable_id) user.unfollow(commentable) return JsonResponse({})
return DataFrame(self._std_err_raw, columns=self.beta.columns, index=self._result_index)
res1, res2 = s.align(df) tm.assert_series_equal(res1, exp2) tm.assert_frame_equal(res2, exp1)
self.caption = caption return self
constants = random_state.randn(5)
@skip("Not supported by DjangoXBlockUserStateClient") def test_iter_blocks_deleted_block(self): pass
y_predicted = clf.predict(docs_test)
kwargs = {}
c1 = TT.as_tensor_variable(c1) c2 = TT.as_tensor_variable(c2) maxiter = n_iters
self.column = column self.colour1 = colour1 self.colour2 = colour2 self.categorical = False
rows = [] rows.append([datetime(2010, 1, 1), 1]) rows.append([datetime(2010, 1, 2), 'hi'])
ng + obj
if self.level > exc_info_on_loglevel: return formatted_record
if library: return component_templates
if (isinstance(self, SparseSGDClassifierTestCase) or isinstance(self, SparseSGDRegressorTestCase)): decay = .01
random_state = check_random_state(0) y1 = random_state.randint(0, 2, size=(20, )) y2 = random_state.randint(0, 2, size=(20, ))
salt '*' vsphere.get_syslog_config my.esxi.host root bad-password
pass
from __future__ import absolute_import import logging import time
if check_dtypes: self.assertTrue((rs.dtypes == df.dtypes).all())
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return self._id is getattr( other, '_id', Ellipsis) and self._id is not None
if self.has_spatial_indexes: self.assertSpatialIndexExists('gis_neighborhood', 'heatmap')
index_col, expected = None, DataFrame([], columns=list('xyz')), tm.assert_frame_equal(self.read_csv( StringIO(data), index_col=index_col), expected)
assert_equal(len(folds), len(labels)) for i in np.unique(folds): assert_greater_equal(tolerance, abs(sum(folds == i) - ideal_n_labels_per_fold))
self.student = UserFactory( username=self.STUDENT_USERNAME, email=self.STUDENT_EMAIL, password=self.STUDENT_PASSWORD, )
while remaining != 0: assert remaining > 0, 'remaining bytes to read should never go negative'
asset_url = '' try: template_asset = CertificateTemplateAsset.objects.get(asset_slug=asset_slug) asset_url = template_asset.asset.url except CertificateTemplateAsset.DoesNotExist: pass return asset_url
y = np.zeros((10, 3)) y[5:, 0] = 1 y[:, 1] = 1 y[:, 2] = 1
output = os.popen('mongo --eval "print(\'running\')"').read() return output and "running" in output
return self.slug_field
from __future__ import absolute_import, with_statement from distutils.version import LooseVersion import time import inspect import logging
SOCIAL_MEDIA_FOOTER_NAMES = [ "facebook", "twitter", "youtube", "linkedin", "google_plus", "reddit", ]
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
__func_alias__ = { 'list_': 'list' }
tm.assert_contains_all(self.strIndex, self.strIndex) tm.assert_contains_all(self.dateIndex, self.dateIndex)
assert_almost_equal(copy.labels, original.labels) self.assertIsNot(copy.labels, original.labels)
return location.replace(revision=MongoRevisionKey.published)
continue
shutil.rmtree(cachedir, ignore_errors=True)
expected_msg = u'Error: ȧƈƈḗƞŧḗḓ ŧḗẋŧ ƒǿř ŧḗşŧīƞɠ' self.assertEqual(expected_msg, result['success'])
ret = self.run_function('state.sls', mods='testappend.step-2') self.assertSaltTrueReturn(ret)
HAS_LIBS = False HAS_SIX = False try: import requests
if not encoded_videos: video_url = self.html5_sources[0] if self.html5_sources else self.source if video_url: encoded_videos["fallback"] = { "url": video_url,
reg.activate() reg.save()
datetime_instance = datetime.datetime(2014, 3, 4) timedelta_instance = datetime.timedelta(seconds=1) timestamp_instance = date_range(datetime_instance, periods=1, freq='D')[0]
from __future__ import absolute_import import logging
component_types = COMPONENT_TYPES[:]
g = GEOSGeometry('POINT (5 23 17)') g.srid = 4326
X = self._x_trans.values Y = self._y_trans.values.squeeze() beta, _, _, _ = np.linalg.lstsq(X, Y) return beta
self.assertEqual(course_date, expected_course_date)
transformer_weights={ 'subject': 0.8, 'body_bow': 0.5, 'body_stats': 1.0, },
import salt.utils
self.course_hierarchy = self.get_course_hierarchy() self.blocks = self.build_course(self.course_hierarchy) self.course = self.blocks['course']
import salt.config import salt.loader from salt.modules import boto_elb
ranges = world.css_find(range_css) assert_equal(len(ranges), 2) assert_not_equal(ranges.last.value, 'Failure')
this_yaml = test_yaml_which_set % {'which_set': 'valid'} try: trainer = yaml_parse.load(this_yaml) trainer.main_loop() raise AssertionError except ValueError: pass
create_polygon = GeomOutput('GEOSGeom_createPolygon', None) create_empty_polygon = GeomOutput('GEOSGeom_createEmptyPolygon', None) create_collection = GeomOutput('GEOSGeom_createCollection', None)
CourseEnrollmentFactory( is_active=True, course_id=self.course.id, user=self.user )
if ssh_interface == 'private_ips' and private_ip_assignment is False: create_private_ip(node_id) private_ip_assignment = True
with self.assertNumQueries(6): self._get_list()
self.a1.publications.set([self.p1, self.p2])
elif self._is_correct_lti_request(): params = {k: v for k, v in self.post_dict.items() if k != 'oauth_signature'}
response = self.client.get('/logout/') self.assertIn('no-store', response['Cache-Control'])
X = np.arange(100).reshape(10, 10) y = np.array([0] * 5 + [1] * 5)
initial_forms = len(self.initial) if self.initial else 0
res = Q(filter_,thing) if isinstance(filter_, type({})): for k in res: res[k] = list(res[k]) return res else: return list(res)
return get_members(mailchimp, list_id, 'cleaned')
return xblock._edit_info.get('edited_on')
log.error("Unable to add Credit requirement status for user with id %d", attempt.user.id)
problem = new_loncapa_problem(xml_str) problem.done = True problem.student_answers = {'1_2_1': 'choice_1'}
import os import logging
X[0, 2] *= 2 assert_equal(X[0, 2], 5)
serializers._serializers = {}
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
return 1 - (0.5 ** (1 / n_subsamples) * (n_samples - n_subsamples + 1) + n_subsamples - 1) / n_samples
self.assertFalse(self._is_location_published(self.problem_usage_key))
state = models.CharField(max_length=50)
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
from __future__ import unicode_literals
os.umask(0o777)
_ = lambda text: text
VENDOR_EXT_PATTERN = re.compile('^x-')
from __future__ import absolute_import
self.assertTrue(certificate_generation_history.exists())
self.assertIsInstance(val1, bool) self.assertIsInstance(val2, bool) self.assertEqual(val1, True) self.assertEqual(val2, False)
import yaml
return isinstance(v, str) and len(v.strip()) == 0
if "MultiTask" in name: return np.reshape(y, (-1, 1)) return y
from __future__ import absolute_import
CIFAR_FOLDER = "./cifar-10-batches-py/" SVHN_FOLDER = "./SVHN/"
locals().update(_mk_common_exceptions())
self.assertEqual(second_request["parameters"]["user_full_name"], "Bobby")
return
def test_compare_phases_ignored(self): self.assertTrue(compare_chemical_expression( "H2O(s) + CO2", "H2O+CO2", ignore_state=True))
self._initialize(y, layer_units)
return token.application
self.variance = variance = 3.0 self.samples = self.prng.normal(scale=variance ** 0.5, size=100000)
chan_elem = feed.getElementsByTagName('channel') self.assertEqual(len(chan_elem), 1) chan = chan_elem[0]
@skipIf(not salt.utils.is_linux(), 'These tests can only be run on linux') class UseraddModuleTest(integration.ModuleCase):
self.assertEqual(_get_release_date(response), 'Unscheduled') _assert_settings_link_present(response)
with connection.schema_editor() as editor: editor.remove_field(LocalAuthorWithM2M, new_field) with self.assertRaises(DatabaseError): self.column_classes(new_field.remote_field.through)
chapter = self._find_url_name(toc, chapter_url_name) if chapter: return self._find_url_name(chapter['sections'], section_url_name) return None
license_text = self.q(css='section.license span.license-text') if license_text.is_present(): return license_text.text[0] return None
draft_node_list = []
html_theme_path = ['themes']
salt 'jerry' system.reboot && \\ salt-run state.event 'salt/minion/jerry/start' count=1 quiet=True && \\ salt 'jerry' state.highstate
import salt.config import salt.loader
data_home = get_data_home(data_home=data_home) data_home = join(data_home, 'mldata') if not exists(data_home): os.makedirs(data_home)
return False
feed_type = feedgenerator.Atom1Feed subtitle = TestRss2Feed.description def items(self): return Entry.objects.exclude(pk=5)
chef.__grains__ = {} chef.__salt__ = {} chef.__context__ = {}
opt_args['objective_error'] = objective_error opt_args['kwargs']['angle'] = self.angle opt_args['kwargs']['verbose'] = self.verbose
import tornado.testing import tornado.gen from tornado.testing import AsyncTestCase
module = CapaFactory.create() module.get_progress = Mock(wraps=module.get_progress) module.get_html() module.get_progress.assert_called_once_with()
a = svm.SVC(C=1, kernel=lambda x, y: x * y.T, probability=True, random_state=0) b = base.clone(a)
y = f(X).ravel()
_sample_even_odd(W_list, b_list, new_nsamples, beta, odd=marginalize_odd) _activation_even_odd(W_list, b_list, new_nsamples, beta, odd=not marginalize_odd)
migration.mutate_state(state, preserve=False)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
assert_almost_equal(metric(y1_sparse_indicator, y2_sparse_indicator), measure, err_msg="%s failed representation invariance " "between dense and sparse indicator " "formats." % name)
if not pending_models: return []
attempts = random.randint(1, 10) module = CapaFactory.create(attempts=attempts - 1, max_attempts=attempts) self.assertEqual(module.check_button_name(), "Final Check")
data = re.sub('0{6,}[0-9]', '', data)
cached_file = __salt__['cp.is_cached'](cache_file, saltenv) if not cached_file: cached_file = __salt__['cp.cache_file'](cache_file, saltenv)
#latex_use_parts = False
mode = CourseModeFactory.create() mode.course_id = self.course.id mode.min_price = min_price mode.mode_slug = mode_slug mode.expiration_date = expiration_date mode.save() return mode
if is_frame: single_aligner = single_aligner and aligners[0]
pass
import salt.ext.six as six try: import boto import boto3 from boto.exception import BotoServerError HAS_BOTO = True except ImportError: HAS_BOTO = False
fmt = formats.pop(formats.index(time_format)) formats.insert(0, fmt) format_found = True
if LooseVersion(version) < '0.16.0': tm.assert_frame_equal(result, expected, check_categorical=False) else: tm.assert_frame_equal(result, expected)
pass
ret['result'] = True ret['comment'] = 'property {0} is absent'.format(name)
tm.assert_series_equal(pd.to_datetime(s, infer_datetime_format=False), pd.to_datetime(s, infer_datetime_format=True))
import salt.utils.s3 from salt.modules import s3
self.assertIn("Add field silly_date to sillymodel", out.getvalue())
import logging import json import datetime
errstring = "Error: too few arguments" with self.assertRaisesRegexp(CommandError, errstring): call_command('export')
continue
import salt.utils
return units_name.lower() in self.geodetic_units if units_name else self.srid == 4326
Membership.objects.create(membership_country_id=self.soviet_union.id, person_id=self.george.id, group_id=self.cia.id)
user_partititons = self.course.user_partitions self.assertEqual(len(user_partititons), 1) self.assertEqual(len(user_partititons[0].groups), 3)
self.assertFalse(self._has_changes(locations['grandparent'])) self.assertFalse(self._has_changes(locations['parent']))
x = np.array([1e-40] * 1000000) logx = np.log(x) assert_almost_equal(np.exp(logsumexp(logx)), x.sum())
assets, count = content_store.get_all_content_for_course(course.id) self.assertEqual(count, 2)
self.assertTrue(all(isinstance(course, CourseSummary) for course in courses_list_by_staff))
result._set_names(names)
responsetype_cls = responsetypes.registry.get_class_for_tag(response.tag) responder = responsetype_cls(response, inputfields, self.context, self.capa_system, self.capa_module) self.responders[response] = responder
from salt.ext.six import string_types
if isinstance(o, Index) and o.is_boolean(): continue
with translation.override('de'): output = self.engine.render_to_string('i18n16') self.assertEqual(output, '<')
response = self.client.get("/nested_view/") self.assertIsInstance(response.context, RequestContext) self.assertEqual(response.context['nested'], 'yes')
qs = qs.filter(**remaining_lookup_params)
for X in (X_dense, X_sparse_pruned, X_sparse_unpruned):
if is_updated or asides_updated: new_structure = self.version_structure(course_key, original_structure, user_id) block_data = self._get_block_from_structure(new_structure, block_key)
return self.q(css='.hidden-contents').visible
return self[u'name']
self.assert_grade(problem, "invalid_option", "incorrect")
req = self._get_GET_csrf_cookie_request() CsrfViewMiddleware().process_view(req, csrf_exempt(token_view), (), {}) resp = token_view(req) self._check_token_present(resp)
__func_alias__ = { 'set_': 'set' }
from __future__ import absolute_import
klone = mpoly.clone() self.assertEqual(sr.wkt, klone.srs.wkt)
result = idx.delete(5)
frame["F"] = ["text" if item % 2 == 0 else np.nan for item in range(30)]
LogoutPage(self.browser).visit() self._make_har_file(login_page)
def __call__(self, est, X, y): return 1
algorithm = "pbkdf2_sha1" digest = hashlib.sha1
def capture(f, mapping=mapping): new_f = lambda *args: f(mapping.flatten(args, return_tuple=True)) return new_f
self.assertEqual( get_object_or_404(Article.objects.all(), title__contains="Run"), article )
s1 = Series([np.nan, True]) s2 = Series([np.nan, False])
try: import boto.sqs HAS_BOTO = True except ImportError: HAS_BOTO = False
def bind_parameter(self, cursor): param = cursor.cursor.var(Database.NUMBER) cursor._insert_id_var = param return param
check_array(X, accept_sparse='csr') return self
remote_rev = None remote_rev_type = None
CourseEnrollment.enroll(self.instructor, self.course.id) self.test_send_to_all()
exc_info_on_loglevel=logging.DEBUG
return key in self._info_axis
if updated_user.password != old_password_hash: entry = PasswordHistory() entry.create(updated_user)
log = logging.getLogger(__name__)
X, y = make_classification(n_samples=200, n_features=100, n_informative=3, random_state=0)
import_static_content( data_path, self.static_content_store, dest_id, subpath='static', verbose=self.verbose )
def __format__(self, specifier, **kwargs): amount = super(EuroDecimal, self).__format__(specifier, **kwargs) return '€ {}'.format(amount)
X_1, y_1 = datasets.make_classification(n_samples=n_samples, n_features=n_features, n_informative=5, random_state=1)
self.assertRaises(KeyError, s.__getitem__, (2000, 3, 4))
raise NotImplementedError("> 1 ndim Categorical are not " "supported at this time")
n_leaves = n_samples
answer_element = etree.SubElement(codeparam_element, "answer_display") answer_element.text = str(answer_display)
proxyfile = '/etc/salt/proxy' status_file, msg_new, msg_old = _proxy_conf_file(proxyfile, test) changes_new.extend(msg_new) changes_old.extend(msg_old) status_proc = False
caches['default'] response = default_view(request, '11') self.assertEqual(response.content, b'Hello World 1')
assert_frame_equal(expected, df)
text_content_first = email_payload_first[0]._payload[0]._payload self.assertIn( 'credit from Hogwarts School of Witchcraft and Wizardry for', text_content_first )
self.install_results = None
_srid_cache[connection.alias] = {}
import salt.loader import salt.config import integration from salt.exceptions import SaltRenderError from salt.ext.six.moves import StringIO
return {'cond_module': cond_descriptor, 'source_module': source_descriptor, 'child_module': child_descriptor}
params["username"] = params["password"] = "test_username_and_password" assert_password_error("Username and password fields cannot match")
mappings = getattr(settings, 'HOSTNAME_MODULESTORE_DEFAULT_MAPPINGS', None)
connectivity = connectivity + connectivity.T
def db_type(self, connection): return 'MEDIUMBLOB'
self.object = form.save() return super(ModelFormMixin, self).form_valid(form)
from __future__ import absolute_import
raise NotImplementedError(str(type(self))+" does not implement " +\ "get_total_state_space()")
est = DBSCAN().fit(X, sample_weight=sample_weight) core4 = est.core_sample_indices_ label4 = est.labels_ assert_array_equal(core1, core4) assert_array_equal(label1, label4)
__remove_null_logging_handler()
from __future__ import unicode_literals
assert_panel_equal(p.ix[items, :, :], p.reindex(items=items))
leaf = len(lookup.prefetch_through.split(LOOKUP_SEP)) - 1 == level
n_components = 100 n_features = 1000 A = gaussian_random_matrix(n_components, n_features, random_state=0)
y = label_binarize(y, classes=[0, 1, 2]) n_classes = y.shape[1]
queryset = cls.objects.filter( course_id=course_id, module_type='problem', grade__isnull=False ) if "read_replica" in settings.DATABASES: return queryset.using("read_replica") else: return queryset
from salt.states import win_update
with self.assertRaises(AttributeError): getattr(post, "attached_%(class)s_set")
for dtype in ['float64', 'int64']:
return cls("%s: (%s:pk=%s) field_value was '%s'" % (original_exc, model, fk, field_value))
comment, passed, retries = _search(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
self.assertInHTML( '<input type="text" name="products_delivered" ' 'value="12.000" id="id_products_delivered" required />', form6.as_ul() )
pass
TEST_DIR = path(__file__).dirname() TEST_DATA_DIR = 'common/test/data/' PLATFORM_ROOT = TEST_DIR.parent.parent.parent.parent TEST_DATA_ROOT = PLATFORM_ROOT / TEST_DATA_DIR
versions = get_course_versions(unicode(self.course.id)) draft_version = versions['draft-branch'] published_version = versions['published-branch']
plsca = PLSCanonical(n_components=2) plsca.fit(X_train, Y_train) X_train_r, Y_train_r = plsca.transform(X_train, Y_train) X_test_r, Y_test_r = plsca.transform(X_test, Y_test)
return True
from __future__ import absolute_import
call_command('reindex_course_team', self.team1.team_id) mock_index.assert_called_once_with(self.team1) mock_index.reset_mock()
sess_cookies = None
chapter = ItemFactory.create(parent_location=self.course.location, display_name=TEST_SECTION_NAME)
import sys _stdin = sys.stdin sys.stdin = SimpleMock(sys.stdin, "encoding", encoding) yield sys.stdin = _stdin
CertificateGenerationConfiguration(enabled=True).save()
for field, objects in other._known_related_objects.items(): self._known_related_objects.setdefault(field, {}).update(objects)
import gtk gtkInstalled = True
method = None
data.extend([np.ones((1, 784))] * 2)
class FrameworkForm(Form): name = CharField() language = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')])
result = CategoricalIndex(categories=categories).insert(0, 'a') expected = CategoricalIndex(['a'], categories=categories) tm.assert_index_equal(result, expected, exact=True)
simplefilter('ignore')
import salt.returners import salt.utils.jid import salt.exceptions
from __future__ import absolute_import import logging
result = f.clean('13:30:05.000155') self.assertEqual(result, time(13, 30, 5, 155))
tags = list(set(tags))
from salt.modules import http import salt.utils.http
with self.assertRaises(ResponseError): problem.grade_answers({'1_2_1': '42'})
if key == "ROOT" or key == "COURSES": continue
layer_to_chains = model.sampling_procedure.sample( layer_to_chains, self.theano_rng, num_steps=self.num_gibbs_steps )
SOCIAL_MEDIA_FOOTER_URLS = {}
self.init_.fit(X, y, sample_weight)
date > /tmp/salt-run: cmd.run
self.assertTrue(self._search_for_content(self.EDITED_SEARCH_STRING))
self.assertContains(response, "\n0 recommendations\n")
err_string = "Invalid course_key: '{0}'".format(invalid_key) with self.assertRaisesRegexp(CommandError, err_string): call_command('reindex_course', invalid_key)
def __init__(self, location, msg): super(SerializationError, self).__init__(msg) self.location = location
try: marty.edited.set([pro, dive], bulk=False) except ValueError: self.fail("Assignment across primary/replica databases with a common source should be ok")
with self.assertRaises(CommandError): management.call_command(('explode',))
helper(not_html_encoded, ensure_ascii=True, encode_html_chars=False) helper(not_html_encoded, ensure_ascii=False, encode_html_chars=False)
out = StringIO() assert_raises(IndexError, export_graphviz, clf, out, class_names=[])
c_uchar_p = POINTER(c_ubyte)
return self.q(css=self._discussion_selector + " " + selector)
if not settings.FEATURES.get('MILESTONES_APP', False): return None from milestones import api as milestones_api return milestones_api.add_course_milestone(course_id, relationship, milestone)
selector = self.get_element_selector(CSS_CLASS_NAMES['error_message']) return self.q(css=selector).visible
class PennsylvaniaCity(City): county = models.CharField(max_length=30) founded = models.DateTimeField(null=True)
self.navigate_to_video() execute_video_steps(tab1_video_names)
self.assertIn('level-element', html)
return self._df_resid_raw
return self.q(css=CLASS_SELECTORS['slider_range']).visible
admin_obj = admin_class(model, self) if admin_class is not ModelAdmin and settings.DEBUG: system_check_errors.extend(admin_obj.check())
data = fetch_species_distributions()
component = self.store.get_item(component.location) component.display_name = 'Changed Display Name' self.store.update_item(component, self.user_id)
from __future__ import absolute_import, print_function import os import sys from subprocess import Popen, PIPE, STDOUT
result = td.max() expected = Timedelta('2 days') self.assertEqual(result, expected)
return serializer.data
source_suffix = '.rst'
if HAS_LDAP: return __virtualname__ return (False, 'The ldapmod execution module cannot be loaded: ' 'ldap config not present.')
from salt.states import cmd
htpasswd.__salt__ = {} htpasswd.__opts__ = {'test': False}
tm._skip_if_no_pytz() import pytz
return "ROLLBACK TO SAVEPOINT %s" % self.quote_name(sid)
from salt.modules import ilo
def default(self, obj): if isinstance(obj, datetime): return get_default_time_display(obj) return json.JSONEncoder.default(self, obj)
class FormWithMedia(Form): field1 = CharField(max_length=20, widget=MyWidget1()) field2 = CharField(max_length=20, widget=MyWidget2())
new_auth = object.__new__(cls) new_auth.__singleton_init__(opts, io_loop=io_loop) loop_instance_map[key] = new_auth
cls.req_server_channel = salt.transport.server.ReqServerChannel.factory(cls.master_opts) cls.req_server_channel.pre_fork(cls.process_manager)
with warnings.catch_warnings(): warnings.simplefilter("ignore") check_cv_coverage(skf_3, X2, y, labels=None, expected_n_iter=3)
'log_datefmt': str,
httpretty.register_uri( httpretty.POST, re.compile(r"http://localhost:4567/api/v1/(\w+)/threads"), body=_get_thread_callback(thread_data) )
X = sp.csr_matrix(X, copy=copy)
if not CourseEnrollment.is_enrolled(user, self.course_id): raise NotEnrolledInCourseForTeam if CourseTeamMembership.user_in_team_for_course(user, self.course_id): raise AlreadyOnTeamInCourse return CourseTeamMembership.objects.create( user=user, team=self )
pipeline = Pipeline([ ('vect', CountVectorizer()), ('tfidf', TfidfTransformer()), ('clf', SGDClassifier()), ])
if settings.THEME_NAME == "": settings.THEME_NAME = None return
user = CourseCreator.objects.get(user=user) if user.state != CourseCreator.GRANTED: user.state = CourseCreator.PENDING user.save()
if expected_labels != [self.VISIBILITY_LABEL_ALL]: expected_labels.append(self.VISIBILITY_LABEL_SPECIFIC) self.assertItemsEqual(expected_labels, [option.text for option in visibility_editor.selected_options])
resp = self.client.get('/copyright') self.assertEqual(resp.status_code, 404)
if preserve_state \ and orig_state == 'stopped' \ and state(name) != 'stopped': stop(name)
go_to_section("data_download")
_config_filename_ = 'cloud'
user.__salt__ = {} user.__opts__ = {} user.__grains__ = {}
DATE_INPUT_FORMATS = [
lc_block = self._refresh_children(lc_block) check()
return port
terminal_width, terminal_height = get_terminal_size()
from __future__ import absolute_import
return self._field_data
self.login_page.password_reset(email="nobody@nowhere.com")
return self._cohort_name(self.q(css=self._bounded_selector(".group-header-title .title-value")).text[0])
iris = load_iris() X = iris.data y = iris.target transft = TransfT() pipeline = Pipeline([('mock', transft)])
self.assertFalse(result, msg="User should not have access because the user isn't staff.")
self.verify_validation_update_usage_info(expected_result, mocked_message)
pos_switch = pos_label == 0 if pos_switch: pos_label = -neg_label
return False
if attr == 'parent_sequential_url': attr = 'parent_url' xml_attrs[attr] = val
import salt.ext.six.moves.http_client
call_command('flush', verbosity=0, interactive=False, load_initial_data=False)
if ndim != 0: ndim += 1
if not sparse.isspmatrix_lil(connectivity): if not sparse.isspmatrix(connectivity): connectivity = sparse.lil_matrix(connectivity) else: connectivity = connectivity.tolil()
return swapped_for
continue
self.assertRegexpMatches(html, r'&#34;group_name&#34;: &#34;student_cohort&#34;')
self._make_eligible() self._purchase_credit() request_uuid = self._initiate_request() self._set_request_status(request_uuid, "rejected")
if not prefix.endswith('/'): prefix += '/' _prefixes.value = prefix
score = estimator.predict_proba(X)[:, 1]
multioutput = None
px_x = round(npix + (lon * self._degpp[zoom]))
ContentType.objects.clear_cache()
if salt.utils.is_windows(): fp_.close() try: os.unlink(fn_) except OSError: pass
self.assertEqual(event.dt, dt.replace(tzinfo=EAT))
from __future__ import absolute_import import os import yaml import signal import shutil
return self.set_ordered(True, inplace=inplace)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.5, random_state=0)
if hasattr(variable, 'name') and variable.name is not None: return variable.name return anon
many_to_many = False many_to_one = True one_to_many = False one_to_one = False
dr = pd.timedelta_range('1d', '5d', freq='H', name='timebucket') self.assertEqual(dr[1:].name, dr.name)
self.foundCategories = _gather_update_categories(self.download_collection) log.debug('found categories: {0}'.format(str(self.foundCategories))) return True
serializer = CreditProviderCallbackSerializer(data=data, provider=provider) serializer.is_valid(raise_exception=True)
levels = np.linspace(0, Z.max(), 25) plt.contourf(X, Y, Z, levels=levels, cmap=plt.cm.Reds)
length, width = self.full_shape stride = values.shape[1] result_width = width * stride result_shape = (length, result_width)
self.student = UserFactory(username=uname, password=password, email=email)
backend_name = forms.ChoiceField(choices=((name, name) for name in _PSA_SAML_BACKENDS))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
course = CourseFactory.create() course.display_coursenumber = escaping_content
self.assertRaises( IntegrityError, BadgeClass.get_badge_class, slug='new_slug', issuing_component='new_component', image_file_handle=get_image('good') )
self.assertFalse(xb_user.opt_attrs[ATTR_KEY_IS_AUTHENTICATED]) self.assertIsNone(xb_user.full_name) self.assertListEqual(xb_user.emails, [])
try: return CourseTeam.objects.get(team_id=team_id) except CourseTeam.DoesNotExist: raise Http404
modal = self.edit() modal.is_explicitly_locked = is_locked modal.save()
if serialized.startswith("="): serialized = serialized[1:].strip()
if is_array and value.dtype.kind in ['M', 'm']: dtype = value.dtype
print("Computing Spectral embedding") embedder = manifold.SpectralEmbedding(n_components=2, random_state=0, eigen_solver="arpack") t0 = time() X_se = embedder.fit_transform(X)
self.import_page.upload_tarball(self.tarball_name) self.assertEqual(self.import_page.finished_target_url(), self.landing_page.url)
from __future__ import absolute_import import os import random import string
kwargs_str = get_kwargs_str(field_name)
if options['course']: try: course_key = CourseKey.from_string(options['course']) except InvalidKeyError: course_key = SlashSeparatedCourseKey.from_deprecated_string(options['course'])
from __future__ import unicode_literals
config.delete() self.assertEqual(len(self.group_configurations_page.content_groups), 0)
definition, children = cls.load_definition(definition_xml, runtime, def_id, id_generator)
if inspect: for container in containers: container_id = container.get('Id') if container_id: inspect = _get_container_infos(container_id) container['detail'] = inspect.copy()
language = UserPreference.get_value(data['user'], LANGUAGE_KEY)
if 'max-age' in cc and 'max_age' in kwargs: kwargs['max_age'] = min(int(cc['max-age']), kwargs['max_age'])
return self.children(CourseOutlineChild)
region_str = "[ [1,1], [5,10], [0,10] ]"
SORT_REVISION_FAVOR_DRAFT = ('_id.revision', pymongo.DESCENDING)
problem = self.build_problem(answer=".*tre+", regexp=True) self.assert_grade(problem, "There is a tree", "correct")
self.get_data_specs(model)[0].validate(data) X = data return self.cost(X, model.reconstruct(X))
estimator_weight = self.learning_rate * ( np.log((1. - estimator_error) / estimator_error) + np.log(n_classes - 1.))
self.descriptor.display_name = '\x1e' with self.assertRaises(ValueError): self.descriptor.definition_to_xml(None)
result = df1.loc[(slice('A2')), :] expected = df1 assert_frame_equal(result, expected)
self._test_view('sitemap_xml', 'application/xml')
VerificationDeadline.set_deadline(course_key, verification_deadline)
s['select_field'] = AreaField(Area.unit_attname(geo_field.units_name(connection)))
self.assertTrue(config['blah'])
descriptor = descriptor.get_children()[0] self.course_descriptor_no_inheritance_check(descriptor)
from salt.states import reg
node_depth = np.zeros(shape=n_nodes) is_leaves = np.zeros(shape=n_nodes, dtype=bool)
cacher_needs_updating = self._check_is_chained_assignment_possible() setitem(key, value) if cacher_needs_updating: self._maybe_update_cacher()
df = tm.makeDataFrame()
from __future__ import absolute_import import json import logging import pprint import time
modulestore().update_item(course_updates, user.id)
return self._get_groups(self.content_groups_css)
url( r'^courses/{}/edxnotes'.format( settings.COURSE_ID_PATTERN, ), include('edxnotes.urls'), name='edxnotes_endpoints', ),
module = CapaFactory.create(due=self.yesterday_str) self.assertFalse(module.should_show_check_button())
managed = False
result = mixed.min(axis=1) expected = Series([1, 1, 1.], index=[0, 1, 2]) tm.assert_series_equal(result, expected)
self.assertIn('/courses/' + self.course_key.to_deprecated_string() + '/jump_to_id/vertical_test', html)
from __future__ import absolute_import import logging import re
course_id = _get_course_id(self.store, test_course_data) delete_course_and_groups(course_id, self.user.id) with self.assertRaises(ItemNotFoundError): are_permissions_roles_seeded(course_id)
assert_equal(np.sum(s_clf.coef_ != 0.0), n_informative)
recons.columns = df.columns
for blk in self.blocks: newb = make_block(values=blk.values[slicer], klass=blk.__class__, fastpath=True, placement=blk.mgr_locs) new_blocks.append(newb)
from salt.utils.schema import (Schema, StringItem, ArrayItem, OneOfItem)
foo = repr(self.frame) self.frame.info(verbose=False, buf=buf)
return self.q(css='{} input[name=entrance-exam-student-select-grade]'.format(self.EE_CONTAINER))
self.temp_dir_1 = mkdtemp() self.temp_dir_2 = mkdtemp(dir="")
blank_formset = self.make_choiceformset([('', '')]) self.assertFalse(blank_formset.has_changed())
scheme = value.split('://')[0].lower() if scheme not in self.schemes: raise ValidationError(self.message, code=self.code)
if groups[0] != 0: groups.insert(0, 0)
raise NotImplementedError('A DateView must provide an implementation of get_dated_items()')
try: output = radd(left, right) except TypeError: raise
utils.get_programs(self.user)
task_folder = task_service.GetFolder(location)
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
loaded = yaml.load(yamlfile) logger.info(loaded) assert loaded['corruptor'] is loaded['dae'].corruptor
from salt.exceptions import SaltException
self.assertEqual(len(testStack.rxMsgs), 0) testStack.serviceAll() self.assertEqual(len(testStack.rxMsgs), 1)
if 'pub_key' not in vm_ and 'priv_key' not in vm_: log.debug('Generating keys for \'{0[name]}\''.format(vm_))
from __future__ import absolute_import
#sys.exit(retcode)
dev_index = dev_list.index(rd_name)
if repo and not fromrepo: fromrepo = repo
row = (y*outshp[1]+x)*inshp[0]*ksize + l + fmapi*ksize if ws else\ y*outshp[1] + x
return ( self.q(css="#login-anchor").is_present() and self.q(css="#register-anchor").is_present() and self.current_form is not None )
pass
with self.assertRaises(AssertionError): self.kvs.set(self.other_key_factory(self.existing_field_name), "new_value")
active_script = "return " + title_selector + " === document.activeElement;" return self.browser.execute_script(active_script)
age_sum = distinct_authors.aggregate(Sum('age')) self.assertEqual(age_sum['age__sum'], 103)
source = "/foo/bar/fubar.pkg" package_id = "com.foo.fubar.pkg"
CourseEnrollment.enroll(self.user, self.course.id)
walk_to_end(ch, pattern_iter)
with self.assertRaises(AssertionError): self.storage.delete('')
if estimator_error == 0: break
mcc = assert_warns_message(RuntimeWarning, 'invalid value encountered', matthews_corrcoef, [0, 0, 0, 0], [0, 0, 0, 0])
self._cache.delete(self._encode_root_cache_key(root_block_usage_key)) logger.info( "Deleted BlockStructure %r from the cache.", root_block_usage_key, )
keys1 = ['@' + str(i) for i in range(5)] val1 = np.arange(5, dtype='int64')
time_left = max_time - time.time() progress.waitForCompletion(time_left * 1000)
self.q(css=self._bounded_selector(".annotator-edit")).first.click() self.wait_for_editor_visibility() return self
repr(fbeta_score)
c1 = b1.centroid c2 = c1.transform(2276, clone=True) Parcel.objects.create(name='P2', city=pcity, center1=c1, center2=c2, border1=b1, border2=b1)
self.assertEqual(len(utils.get_accessible_discussion_modules(course, self.user)), 1)
from salttesting.helpers import ensure_in_syspath, destructiveTest from salt.ext.six.moves import range ensure_in_syspath('../../')
extlinks = {'issue': ('https://github.com/pydata/pandas/issues/%s', 'GH'), 'wiki': ('https://github.com/pydata/pandas/wiki/%s', 'wiki ')}
if not value: return '' try: return timeuntil(value, arg) except (ValueError, TypeError): return ''
driver = Driver(ds_input.get('driver', 'MEM'))
name = ET.SubElement(content, 'name') name.text = vm_['name']
super(Point, self).__init__(point, srid=srid)
resp = self.client.post( self.postback_url, self.student_answers ) self.assertEquals(resp.status_code, 200) self._assert_no_redirect(self.course)
new_names = list(names) new_levels = list(levels)
print(metrics.classification_report(y_test, y_predicted, target_names=dataset.target_names))
if 'driver' not in ds_input: ds_input['driver'] = self.driver.name
required_fields = set(fields) all_fields = set(self.fields.keys()) for field_name in all_fields - required_fields: self.fields.pop(field_name)
cmd = "dscl . -create /Users/{0} Password '*'".format(name) salt.utils.mac_utils.execute_return_success(cmd)
time.sleep(5)
raise NotImplementedError('subclasses of BaseDatabaseIntrospection may require a get_key_columns() method')
df = DataFrame({'key': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'value': range(9)})
parsed_url = parse_url(filepath_or_buffer) s3_host = os.environ.get('AWS_S3_HOST', 's3.amazonaws.com')
end = datetime(year=2013, month=11, day=2, hour=0, minute=0, tzinfo=pytz.utc)
__context__.pop('pkg.list_pkgs', None) new = list_pkgs() ret = salt.utils.compare_dicts(old, new)
version_num = kwargs['version']
pred_decision = column_or_1d(pred_decision) pred_decision = np.ravel(pred_decision)
pass
from safe_lxml import defuse_xml_libs defuse_xml_libs()
DEFAULT_CONTENT_TYPE = 'text/html' DEFAULT_CHARSET = 'utf-8'
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.assertEqual( actual_url, '/static/default_{size}.png'.format(size=expected_pixels) )
mock_tracker.assert_any_call( event_name, kwargs, )
with self.assertRaises(TypeError): modelform_factory(Person, fields="__all__", formfield_callback='not a function or callable')
try: return arr.argsort(kind=kind) except TypeError: return arr.argsort(kind='quicksort')
compare(slice('2011-01-01', '2011-01-6')) compare(slice('2011-01-06', '2011-01-8')) compare(slice('2011-01-06', '2011-01-12'))
return self.flatten() == other.flatten()
'max_open_files': int,
df['test'] = df['a'].apply(lambda x: '_' if x == 'aaa' else x)
about_base = marketing_urls.get('ROOT', None)
for k in kwargs: assert k in [f.attname for f in self._meta.fields], \ "Author.__init__ got an unexpected parameter: %s" % k
self.factory(shuffle="false")
from __future__ import division, absolute_import, print_function
problem_state = json.loads(studentmodule.state) problem_state["attempts"] = 0
SUPPORTED_BSD_LIKE = ['FreeBSD', 'NetBSD', 'OpenBSD']
with salt.utils.fopen(proc_fn, 'w+b') as fp_: fp_.write(salt.payload.Serial(self.opts).dumps(ret))
conn_args = {} for arg in ['host', 'port', 'db', 'password']: if arg in connection_args: conn_args[arg] = connection_args[arg]
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
kwargs['w'] = 1
mock_problem_key = Mock(return_value=u'') mock_problem_key.course_key = self.course_key with patch.object(UsageKey, 'from_string') as patched_from_string: patched_from_string.return_value = mock_problem_key
log.removeHandler(handler)
def get_memmap_info(memmap): assert isinstance(memmap, numpy.memmap)
block_sizes = ('hw_sector_size', 'minimum_io_size', 'physical_block_size', 'logical_block_size') discard_sizes = ('discard_max_bytes', 'discard_max_hw_bytes', )
self.table = self._create_table_setup()
try: return get_draft() except ItemNotFoundError: return get_published()
err = ItemNotFoundError mock_get_course.return_value = err
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
if ancestor: direct_children_only = lambda parent: parent == ancestor ancestors.append(create_xblock_info( ancestor, include_child_info=include_child_info, course_outline=course_outline, include_children_predicate=direct_children_only )) collect_ancestor_info(get_parent_xblock(ancestor))
'python_bin': None, 'user': 'sandbox',
for enrollment in manual_enrollments: self.assertEqual(enrollment.enrollment.mode, CourseMode.HONOR)
age = years_ago - 1 self.assertEqual(self.profile.age, age)
from django.db.backends import utils return utils.format_number(value, self.max_digits, self.decimal_places)
return keep_lazy(six.text_type)(func)
dc = set(self.data_columns) base_pos = len(self._indexables)
if 'detached' not in published._class_tags and published.start is not None: return datetime.now(UTC) > published.start
expand = kwargs.get('expand', False)
X, y = make_hastie_10_2(n_samples=20, random_state=1) clf = BaggingClassifier(n_estimators=5, warm_start=True, oob_score=True) assert_raises(ValueError, clf.fit, X, y)
algorithm = GDAL_RESAMPLE_ALGORITHMS[resampling]
from __future__ import absolute_import import os import logging import socket import pprint import yaml
self.assertEqual(response.status_code, 200)
return '{0} not found'.format(name)
pass
def f(): s.categories = [1, 2, 3, 4]
release = version
from __future__ import absolute_import
if widths is not None: colspecs, col = [], 0 for w in widths: colspecs.append((col, col + w)) col += w
self.read_csv(log_file, index_col=0, parse_dates=[0], date_parser=f)
return self.q(css=self._bounded_selector('.notoggleforyou')).present
def parse_command_line(self): args = distutils.dist.Distribution.parse_command_line(self)
assert_almost_equal(s2, s3)
if not self._can_hold_element(value): dtype, _ = com._maybe_promote(arr_value.dtype) values = values.astype(dtype)
segment_context = full_segment_event.get('context')
request._cache_update_cache = False return response
if formset: media = self.media + formset.media else: media = self.media
self._submit_photos(face_image=self.IMAGE_DATA + "1112") reverification_data = self._get_post_data()
from __future__ import absolute_import import logging import os import datetime
module_store = modulestore() course_items = import_course_from_xml( module_store, self.user.id, TEST_DATA_DIR, ['toy'], static_content_store=contentstore(), verbose=True ) course = course_items[0] verify_asset_locked_state(False)
cleansed['func_args'] = CLEANSED_SUBSTITUTE cleansed['func_kwargs'] = CLEANSED_SUBSTITUTE
self._assert_num_attempts(students, initial_attempts) self._test_run_with_task(reset_problem_attempts, 'reset', num_students) self._assert_num_attempts(students, 0)
parameters = {'n_estimators': (1, 2), 'base_estimator__C': (1, 2)}
html_theme = "djangodocs"
from salt.ext.six.moves.urllib.parse import urlparse
inds = index.to_int_index().indices + total_length
url(r'^get_students_problem_grades$', 'class_dashboard.dashboard_data.get_students_problem_grades', name="get_students_problem_grades"),
if not hasattr(cls, "_plugins"): plugins = {}
return _slugify(value)
tsne = TSNE(n_iter=199) assert_raises_regexp(ValueError, "n_iter .*", tsne.fit_transform, np.array([[0.0]]))
comment, passed, retries = _search(quidditch, retries) if not passed: return (comment, str(passed))
programs = get_programs(self.client.user) self.run_modes = self._flatten(programs)
grouped = self.three_group.groupby(['A', 'B']) result = grouped.nth(0) expected = grouped.first() assert_frame_equal(result, expected)
with option_context('mode.chained_assignment', None): for key, group in grouped: res = f(group) assert_frame_equal(res, result.ix[key])
def test__get_cron_cmdstr(self): self.assertEqual('crontab /tmp', cron._get_cron_cmdstr(STUB_PATH))
from __future__ import unicode_literals
self.client.force_login(self.u1)
if Microsite.objects.all()[:1].exists(): return True else: return False
shifted4 = ps.shift(1, freq='B') assert_series_equal(shifted2, shifted4)
v = timedelta(seconds=1) result = to_timedelta(v, box=False) expected = np.timedelta64(timedelta(seconds=1)) self.assertEqual(result, expected)
user = User.objects.get(username=self.USERNAME) request = RequestFactory().get("/api/user/v1/accounts/") request.user = user account_settings = get_account_settings(request)
y = y[:m]
return getattr(settings, 'SOCIAL_AUTH_SAML_SP_PRIVATE_KEY', '')
copy = self.series.copy() copy[ordered > 0] = 0
self.assertEqual(urlize('usa.gov'), '<a href="http://usa.gov" rel="nofollow">usa.gov</a>')
return value
continue
def test_stat_unexpected_keyword(self): obj = self._construct(5) starwars = 'Star Wars' errmsg = 'unexpected keyword'
clf = svm.LinearSVC(penalty='l2', dual=True, random_state=0).fit(X, Y) assert_array_equal(clf.predict(T), true_result)
idx = self.panel4d.major_axis[0] - bday self.assertRaises(Exception, self.panel4d.major_xs, idx)
settings.WIKI_ENABLED = True self.course.allow_public_wiki_access = True self.assertIsNotNone(self.get_wiki_tab(self.user, self.course))
self.set_state_from_lcp() return response
myminion: 2:7.4.160-1.el7
if not api_enabled(request, course_key): log.debug('Notes are disabled for course: {0}'.format(course_id)) raise Http404
carg = carg.astype(object) parsed = lib.try_parse_year_month_day(carg / 10000, carg / 100 % 100, carg % 100) return tslib.array_to_datetime(parsed, errors=errors)
return Response(status=status.HTTP_204_NO_CONTENT)
key = com._apply_if_callable(key, self.obj)
if isinstance(opts, list): opts = ','.join(opts) lines = [] change = False present = False automaster_file = "/etc/auto_master"
ContentType.objects.clear_cache()
#source_encoding = 'utf-8-sig'
output = self.engine.render_to_string('i18n17', {'anton': 'α & β'}) self.assertEqual(output, 'α &amp; β')
iface_data['inet']['ethtool_keys'] = sorted(ethtool)
ret.append('.'.join(comps[:comps.index('ko')]))
from safe_lxml import defuse_xml_libs defuse_xml_libs()
about_dictionary = { item.location.name: item.data for item in modulestore.get_items(course.id, qualifiers={"category": "about"}) }
'edxmako', 'pipeline', 'static_replace',
def fit(self, X, y): return self def score(self, X, y): return 1.0
if code in self.expected: return if self.print_filename and not self.file_errors: print(self.filename) self.file_errors += 1 self.total_errors += 1 return code
del input_payload['current_time']
index = MultiIndex.from_arrays([np.arange(4000)] * 3) df = DataFrame(np.random.randn(4000), index=index, dtype=np.int32)
pass
return reclass_top(minion_id, **reclass_opts)
u'resource_link_id': self.get_resource_link_id(), u'lis_result_sourcedid': self.get_lis_result_sourcedid(),
archive_object = MicrositeHistory( key=instance.key, site=instance.site, values=instance.values, ) archive_object.save()
if mod_loc.name not in name: return False
try: ManualPrimaryKeyTest.objects.update_or_create(id=1, data="Different") except IntegrityError: formatted_traceback = traceback.format_exc() self.assertIn('obj.save', formatted_traceback)
self.assertIn(a, Article.objects.all()) self.assertTrue(Article.objects.filter(id=a.id).exists())
data = JUNK_FOOD_DOCS + NOTJUNK_FOOD_DOCS
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
lr_tracker = LearningRateTracker() algorithm = SGD(learning_rate, cost, batch_size=batch_size, monitoring_batches=3, monitoring_dataset=monitoring_dataset, termination_criterion=termination_criterion, update_callbacks=[linear_decay, lr_tracker], set_batch_size=False)
if self.learning_rate <= 0: raise ValueError("learning_rate must be greater than zero")
ix_vals = lmap(np.array, zip(*self.index.values))
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(boston.data, boston.target, random_state=rng)
files = files_string.split(",") upload_css = 'a.upload-button' world.css_click(upload_css)
with self.assertRaisesMessage(ImportError, "Oops"): with self.settings(INSTALLED_APPS=['import_error_package']): pass
'ENABLE_COSMETIC_DISPLAY_PRICE': False,
class OFTInteger(Field): _double = False _bit64 = False
return module.get_explicitly_set_fields_by_scope(Scope.settings)
user: myuser@pam or myuser@pve password: mypassword url: hypervisor.domain.tld driver: proxmox verify_ssl: True
student = request.user
pass
return name + '-clear'
if is_comment_too_deep(parent=None): return JsonError(_("Comment level too deep")) return _create_comment(request, CourseKey.from_string(course_id), thread_id=thread_id)
from __future__ import unicode_literals
assert_series_equal(actual, expected)
if values.ndim == 1 and isinstance(values, np.ndarray): values = values.reshape((1, values.shape[0]))
self.status = 'refunded' self.save() orderitems = OrderItem.objects.filter(order=self).select_subclasses() self._emit_order_event('Refunded Order', orderitems)
if self.rerandomize in [RANDOMIZATION.ALWAYS, RANDOMIZATION.ONRESET] and self.is_submitted(): return True else: if self.is_correct(): return False else: return self.show_reset_button
self.expect = contextualize_text(xml.get('expect') or xml.get('answer'), self.context)
else: ret = _load_result(existing, ret)
result['uuid'] = uuid() base_attr = ['block_size', 'bucket_size', 'cache_available_percent', 'cache_replacement_policy', 'congested']
return np.isnan(other) and self.hasnans
return self.client.post(url, post_args)
try: import six except ImportError: HAS_SIX = False
monitoring_train = DenseDesignMatrix(X=X) monitoring_test = DenseDesignMatrix(X=Y)
btrfs.__grains__ = {} btrfs.__salt__ = {} btrfs.__context__ = {}
unicode_text = "好 各位同学".decode('utf-8')
fmt = '%%(function)s(%s)' % settings['procedure_fmt']
dummy = 'void'
response = self.client.get('/login_protected_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')
problem_page.click_hint()
instructor = InstructorFactory(course_key=self.course.id) self.client.logout() self.client.login(username=instructor.username, password='test')
try: role_name = cls.ROLE REGISTERED_ACCESS_ROLES[role_name] = cls except AttributeError: log.exception(u"Unable to register Access Role with attribute 'ROLE'.") return cls
world.wait_for_ajax_complete()
dense_results = BaggingRegressor( base_estimator=CustomSVR(), random_state=1, **params ).fit(X_train, y_train).predict(X_test)
mgr = create_mgr('a: f8; b: i8; c: f8; d: i8; e: f8;' 'f: bool; g: f8-2')
return True
attribute = getattr(module, attribute_name) setattr(attribute_replacement, __BACKUP_ATTRIBUTE_NAME, attribute) setattr(module, attribute_name, attribute_replacement) return is_patched(module, attribute_name)
local_master = True
ANALYTICS_DASHBOARD_URL = ENV_TOKENS.get("ANALYTICS_DASHBOARD_URL", ANALYTICS_DASHBOARD_URL) ANALYTICS_DASHBOARD_NAME = ENV_TOKENS.get("ANALYTICS_DASHBOARD_NAME", PLATFORM_NAME + " Insights")
with self.assertRaises(AssertionError): self.assertURLEqual( 'http://testserver{}?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'.format( change_user_url ), 'http://testserver{}?_changelist_filters=is_staff__exact%3D1%26is_superuser__exact%3D1'.format( change_user_url ) )
from __future__ import unicode_literals
try: import ssl HAS_SSL = True
from __future__ import absolute_import
Child(name='xyzzy', parent=None)
coord_dim = model_field.dim
self.assertContains(response, '<h2>Author-book relationships</h2>') self.assertContains(response, 'Add another Author-book relationship') self.assertContains(response, 'id="id_Author_books-TOTAL_FORMS"')
res = cat.remove_categories("c") self.assert_categorical_equal(cat, old) self.assert_categorical_equal(res, new)
response.data["start"] = (self.page.number - 1) * self.get_page_size(self.request)
if isinstance(block_locator.block_id, LocalId): self.local_modules[block_locator] = module
if not payload_hash: payload_hash = hashlib.sha256(data).hexdigest()
if isinstance(authored_data, LmsFieldData):
D = fa C = fpa db = b - a * one
res = HttpResponse('abc') conditional_content_removal(req, res) self.assertEqual(res.content, b'abc')
return _get_next_prev(self, date, is_previous=True, period='month')
Membership.objects.create( membership_country_id=self.soviet_union.id, person_id=self.george.id, group_id=self.cia.id)
if scipy.__version__ < LooseVersion('0.9'): raise nose.SkipTest("skipping corr rank because of scipy version " "{0}".format(scipy.__version__))
try: return _int_to_bytes(address, 16, 'big') except: raise ValueError("Address negative or too large for IPv6")
import salt.syspaths as syspaths
from salt.exceptions import SaltInvocationError, CommandExecutionError from salt.ext.six import string_types, integer_types import salt.utils
return comdat['stderr']
if cls.is_white_label(course_id, modes_dict=modes_dict): return False
'salt_event_pub_hwm': 2000, 'event_publisher_pub_hwm': 1000, 'event_match_type': 'startswith', 'minion_restart_command': [], 'pub_ret': True,
trigger_time = datetime.now(UTC) return CoursewareSearchIndexer.index( store, self.course.id, triggered_at=trigger_time, reindex_age=(trigger_time - since_time) )
if suffix: raise ValueError("Bad freq suffix %s" % suffix) return cls()
return self.widgets[0].choices
time.sleep(1)
instructor_task = self._create_email_subtask_entry( total=total, attempted=attempted, succeeded=succeeded, skipped=skipped, task_state=SUCCESS, ) return self._test_get_status_from_result(instructor_task.task_id)
self.course_entry = CourseEnvelope(course_entry_override.course_key, self.course_entry.structure)
try: from mpl_toolkits.basemap import Basemap basemap = True except ImportError: basemap = False
from __future__ import unicode_literals
if self._channel_name is None: v = monitor.channels['objective'].val_record else: v = monitor.channels[self._channel_name].val_record
if rbm == rbm_list[-1]: if targets: assert len(rbm.hidden_layers) == 2 else: assert len(rbm.hidden_layers) == 1 else: assert len(rbm.hidden_layers) == 1
ngrams_nnz = X.nnz assert_true(ngrams_nnz > token_nnz) assert_true(ngrams_nnz < 2 * token_nnz)
ModeCreationPage( self.browser, self.course_id, mode_slug=u'verified', mode_display_name=u'Verified Certificate', min_price=10, suggested_prices='10,20' ).visit()
course_names = self.dashboard_page.wait_for_page().available_courses self.assertIn(self.course_info["display_name"], course_names)
a = Series(data=np.arange(4) * (1 + 2j), index=[0, 0, 1, 1]) expected = Series((1 + 2j, 5 + 10j))
y_train = self.y_train_ if y_train.ndim == 1: y_train = y_train[:, np.newaxis]
partial_credit = xml.xpath('.')[0].get('partial_credit', default=False)
self.enrollment.update_enrollment(mode=CourseMode.HONOR)
result = to_datetime('') self.assertIs(result, NaT)
result = np.empty(values.shape, dtype='float64') result.fill(np.nan) return result
from __future__ import unicode_literals
if len(ret) == 1 and not pkg_glob: try: return next(six.itervalues(ret)) except StopIteration: return '' return ret
container.add_missing_groups() self.verify_groups(container, ['Group B', 'Second Group', 'Group D'], ['Group ID 0'])
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
if X.flags.c_contiguous: return check_array(X.T, copy=False, order='F'), True else: return check_array(X, copy=False, order='F'), False
self.total_violations += 1 self.totals_by_rule[violation.rule.rule_id] += 1
self.record_visit_outline()
self._verify_xblock_info_state(xblock_info, 'visibility_state', expected_state, path, should_equal)
continue
result = ser.copy() result[sel] = 1 expected = pd.Series(1, index=index) assert_series_equal(result, expected)
procedure_args, geo_field = self._spatial_setup(func, field_name=kwargs.get('field_name'))
db = self._db or router.db_for_read(self.model, instance=self.instance) return queryset.using(db).filter(**self.core_filters)
import salt.utils
return self.system.render_template('module-error.html', { 'staff_access': False, 'data': "", 'error': "", })
context = test_view.get_context_data() self.assertEqual(context['object_list'], test_view.queryset)
storage.request.session[storage.session_key] = storage.serialize_messages(messages) if hasattr(storage, '_loaded_data'): del storage._loaded_data
self.assertTrue(self.run_function('xattr.clear', [TEST_FILE]))
__virtualname__ = 'hg'
from __future__ import absolute_import import os.path
return regenerate_certificates( self.create_task_request(self.instructor), self.course.id, [CertificateStatuses.downloadable, CertificateStatuses.generating] )
self.field_data_cache = FieldDataCache.cache_for_descriptor_descendents( self.course_key, self.request.user, self.toy_course, depth=2 )
return security_group
super(GitExportError, self).__init__(unicode(message))
header_row = OrderedDict([('id', 'Student ID'), ('email', 'Email'), ('username', 'Username')])
if iface_type not in ['slave']: return __salt__['cmd.run']('ifup {0}'.format(iface)) return None
rp = SparseRandomProjection(n_components=10, dense_output=True, random_state=0) rp.fit(data) assert isinstance(rp.transform(data), np.ndarray)
dataset = datasets.load_digits() X = dataset['data'] y = dataset['target']
columns = lzip(*arg)[0]
return self.course_locations[string].course_key
return fnd
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'qingcloud', vm_['profile'], vm_=vm_) is False: return False
add_message(request, constants.SUCCESS, message, extra_tags=extra_tags, fail_silently=fail_silently)
(None, {'private': True}, {'private'}), ('', {'private': True}, {'private'}),
self.assertValueQuerysetEqual( ExtraInfo.objects.values('note'), [{'note': 1}, {'note': 2}] )
sorted_grid_scores = list(sorted(search.grid_scores_, key=lambda x: x.mean_validation_score)) best_score = sorted_grid_scores[-1].mean_validation_score assert_equal(search.best_score_, best_score)
tp = y_true == y_pred tp_bins = y_true[tp] if sample_weight is not None: tp_bins_weights = np.asarray(sample_weight)[tp] else: tp_bins_weights = None
clf = LinearSVC() X, y_idx = make_blobs(n_samples=100, n_features=2, random_state=42, centers=3, cluster_std=3.0)
pass
CLIENT_TIMEOUT = 60
self.name = self.user.profile.name self.status = "ready" self.save()
non_outliers = linear_loss[~outliers_mask] weighted_non_outliers = sample_weight[~outliers_mask] * non_outliers weighted_loss = np.dot(weighted_non_outliers.T, non_outliers) squared_loss = weighted_loss / sigma
index_col, expected = False, DataFrame([], columns=list('xyz')), tm.assert_frame_equal(self.read_csv( StringIO(data), index_col=index_col), expected)
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
'ENABLE_VIDEO_BEACON': False,
ax[0, 0].hist(X[:, 0], bins=bins, fc='#AAAAFF', normed=True) ax[0, 0].text(-3.5, 0.31, "Histogram")
return self.values.astype('datetime64[ns]').values
with self.assertNumQueries(0): mtv = ModelToValidate(number=10, name='Some Name') mtv.full_clean()
from __future__ import unicode_literals
self.prefix = os.path.join(self.RESOURCE_PREFIX, module)
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) self.assertEqual(initial_group_id_to_child, split_test.group_id_to_child)
topo_tensors = norb.get_topological_view(single_tensor=False) expected_topo_tensors = tuple(expected_topo_tensor[:, i, ...] for i in range(2))
df = DataFrame(np.random.rand(10, 3), index=list(string.ascii_letters[:10]))
ind2 = self.index.set_labels(new_labels[0], level=0) assert_matching(ind2.labels, [new_labels[0], labels[1]]) assert_matching(self.index.labels, labels)
memcached_params = {} for _cache_params in settings.CACHES.values(): if _cache_params['BACKEND'].startswith('django.core.cache.backends.memcached.'): memcached_params = _cache_params
self._assert_requirements_displayed(response, [ PayAndVerifyView.PHOTO_ID_REQ, PayAndVerifyView.WEBCAM_REQ, ])
self.assertTrue(CourseEnrollment.is_enrolled(self.user, self.course_key)) delete_course_and_groups(self.course_key, self.user.id)
if self.axis == 1: X = check_array(X, accept_sparse='csr', dtype=FLOAT_DTYPES, force_all_finite=False, copy=self.copy)
avg_X2 = np.dot(responsibilities.T, X * X) * norm avg_means2 = gmm.means_ ** 2 avg_X_means = gmm.means_ * weighted_X_sum * norm return avg_X2 - 2 * avg_X_means + avg_means2 + min_covar
if not old_method and new_method: setattr(base, old_method_name, wrapper(new_method))
tenant = __salt__['keystone.tenant_get'](name=name, profile=profile, **connection_args)
self.assertFalse( utils.is_commentable_cohorted(course.id, to_id("General")), "Course doesn't even have a 'General' topic" )
shutil.copyfile(path_in, path_test)
validate_args(self.fname, (None,), 2, dict(out=None))
from salt.states import blockdev import salt.utils
response = self.client.get(self.courseware_url) self.assertEqual(response.status_code, 200)
import integration from salt.states import pip_state
return "original_get_html"
import salt.utils import salt.utils.process
from __future__ import absolute_import
return StaticContent.ASSET_URL_RE.match(path_string) is not None
if N == 0: return
salt '*' win_wua.list_update 12345678-abcd-1234-abcd-1234567890ab
return vb_machinestate_to_tuple(machinestate)[0]
return self._data.get_values()
textline_element = response_element.find("div") self.assertEqual(textline_element.text, 'Input Template Render')
email_body_plain = render_to_string('credit_notifications/credit_eligibility_email.txt', context) msg_alternative.attach(SafeMIMEText(email_body_plain, _subtype='plain', _charset='utf-8'))
t = self.engine.from_string('{{ my_doodad.value }}') self.assertEqual(t.render(c), '')
sequential = self.store.create_child( self.user_id, chapter.location, 'sequential', block_id='subsection_one' ) self.store.publish(sequential.location, self.user_id)
bandwidth = estimate_bandwidth(X, n_samples=200) assert_true(0.9 <= bandwidth <= 1.5)
LETTUCE_SELENIUM_CLIENT = os.environ.get('LETTUCE_SELENIUM_CLIENT', 'local')
raise NotImplementedError("merging with both multi-indexes is not " "implemented")
return usage_id
mask = self.frame['A'][::-1] > 1
error_code = models.CharField(blank=True, max_length=50)
self.user.password = u'new password' self.user.save() self.assert_user_setting_event_emitted(setting='password', old=None, new=None)
self.assertFalse(self.video.is_error_message_shown)
lookup_name = 'exact'
indexer = np.sort(np.concatenate([b.mgr_locs.as_array for b in blocks])) inv_indexer = lib.get_reverse_indexer(indexer, self.shape[0])
return structure_key
for name in SPARSE_TREES: yield check_min_weight_fraction_leaf, name, "multilabel", True
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:00")
return get_connection(using).savepoint()
display_output(data, opts=self.minion_opts) self.assertTrue(True)
LTI_AGGREGATE_SCORE_PASSBACK_DELAY = ENV_TOKENS.get( 'LTI_AGGREGATE_SCORE_PASSBACK_DELAY', LTI_AGGREGATE_SCORE_PASSBACK_DELAY )
possible_sizes = [x.chunk_size for x in upload_handlers if x.chunk_size] self._chunk_size = min([2 ** 31 - 4] + possible_sizes)
from salt.states import ini_manage
new_author = Author.objects.get(pk=author.pk) self.assertEqual(new_author.publication, None)
print "running action..." action(eobjs.email)
LogoutPage(self.browser).visit()
for param, value in params.items(): self.assertIn(param, allowed_params) self.assertIn('{}={}'.format(param, value[0]), expected)
X_csr_scaled = scale(X_csr, with_mean=False, with_std=False, copy=True) assert_array_almost_equal(X_csr.toarray(), X_csr_scaled.toarray())
parent = models.ForeignKey("mutually_referential.Parent", models.CASCADE)
return self.q(css='.course-run>.value').text
request = mock.Mock() self.view.check_throttles(request)
df = DataFrame({'A': self.ts})
try: from code_block_timer import CodeBlockTimer except ImportError: CodeBlockTimer = None
lookup_kwargs = self._make_single_date_lookup(date) qs = qs.filter(**lookup_kwargs)
import salt.utils from salt.exceptions import CommandExecutionError
variation = close - open
io_loop.start()
self.assertTrue( ('Got ' in comment and 'Generated script' in comment) or ('setuptools>=0.7' in comment) )
image = __salt__['glance.image_show'](image['id'])
raise RemoteDataError("No data fetched using " "{0!r}".format(method.__name__))
raise Exception('Unable to find available messageid')
context = {} _update_context_with_basic_info(context, course_id, platform_name, configuration) invalid_template_path = 'certificates/invalid.html'
self.assertContains(self.response, "<td>suffix=&#39;ltd&#39;</td>")
self.assertQuerysetEqual(Article.objects.all(), ['<Article: Parrot programs in Python>'])
from __future__ import absolute_import import logging
try: field = model._meta.get_field(item) except FieldDoesNotExist: try: field = getattr(model, item) except AttributeError: field = None
return self.name_to_event_type_map[self.name]
problem_item = self.store.create_item(self.user_id, test_course_key, 'problem', 'Problem_Item') self.assertFalse(self.store.has_published_version(problem_item))
import integration from salt.utils.process import clean_proc from salt.utils import event
idx = self.create_index() self.assertRaises(NotImplementedError, idx.shift, 1) self.assertRaises(NotImplementedError, idx.shift, 1, 2)
'user_message': _(u"The ordering {ordering} is not supported").format(ordering=ordering),
opts = _parse_network_settings(settings, current_network_settings)
if settings.USE_X_FORWARDED_PORT and 'HTTP_X_FORWARDED_PORT' in self.META: port = self.META['HTTP_X_FORWARDED_PORT'] else: port = self.META['SERVER_PORT'] return str(port)
if self.check_pidfile(): os.unlink(self.config['pidfile'])
convert_dates = self.convert_dates if convert_dates is True: convert_dates = [] convert_dates = set(convert_dates)
self.setup_mongo_course() result_fragment = self.module.render(STUDENT_VIEW, context=self.default_context) self.assertIn('View Unit in Studio', result_fragment.content)
urls = microsite.get_value("urls", default={}) return urls.get(name) or EMPTY_URL
return self.q(css=".field-time-limit").visible
return u'<p class="error_msg">{msg}</p>'.format(msg=msg)
if isinstance(instance, Invoice): InvoiceHistory.save_invoice_snapshot(instance) elif hasattr(instance, 'invoice'): InvoiceHistory.save_invoice_snapshot(instance.invoice)
offset = BQuarterBegin(n=-1, startingMonth=1) self.assertEqual(datetime(2007, 4, 3) + offset, datetime(2007, 4, 2))
update_wrapper(self, fn)
from __future__ import unicode_literals
grid_search.scoring = 'sklearn' assert_raises(ValueError, grid_search.fit, X, y)
self.video.reload_page()
salt.utils.reinit_crypto() os.close(stdout_child_fd) os.close(stderr_child_fd)
self.assertTrue('Activate Course Enrollment' in response.content)
if len(result) > 0: raise nose.SkipTest("Invalid results")
print_monitor_cv.main(filename, all=True)
self.cohort_default_student_username = "cohort_default_student" self.cohort_default_student_email = "cohort_default_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_default_student_username, email=self.cohort_default_student_email, no_login=True ).visit()
return np.sqrt(self.sm_ols.mse_resid)
try: json.loads(self.configuration) except ValueError: raise ValidationError('Must be valid JSON string.')
if PY35 and is_platform_windows(): raise nose.SkipTest("native2 read fails oddly on windows / 3.5")
hosts = list(set(hosts)) return hosts
#
exp = Float64Index([1.0, 2.0, 3.0], name='x') self.assert_index_equal(idx.fillna(2), exp)
self.assert_can_access(self.beta_user, self.alpha_module.discussion_id, thread_id, False)
return self.q(css='a.action-{}'.format(widget_name))
import logging
root_dir = path(mkdtemp_clean()) export_course_to_xml( self.store, content_store, course_id, root_dir, 'test_no_xml_attributes' )
MODULESTORE_FIELD_OVERRIDE_PROVIDERS = ()
import warnings import numpy as np from scipy import linalg
from __future__ import absolute_import
comment, passed, retries = _download(win_updater, retries) ret['comment'] += comment if not passed: ret['result'] = False return ret
return [update['Title'] for update in updates_verbose]
dive.save() self.assertEqual(dive._state.db, 'default')
X = [[1, 1, 0], [1, 1, 0], [1, 0, 0]] tr = TfidfTransformer(smooth_idf=False, norm='l2')
return ln
update = salt.utils.alias_function(refresh_db, 'update')
X = [[0], [0]] Y = [[1], [2]] D = paired_manhattan_distances(X, Y) assert_array_almost_equal(D, [1., 2.])
if key[0] == parent[0]: continue parent = self.check_key(parent, key[0]) if parent is not None: self.graph.add_dependency(migration, key, parent, skip_validation=True)
self.assertEqual(initial_data["PhotoIDKey"], reverification_data["PhotoIDKey"])
shifter = 10 ** max(xbins, ybins) _xpiece = xlabels * shifter _ypiece = ylabels
req.method = 'HEAD'
course5 = CourseFactory.create(org='otherorg', number='999') course5_key = course5.id
return any(form.has_changed() for form in self)
draft = 'draft' published = None
exc_info_on_loglevel=logging.DEBUG
md4 = hashlib.new("md4") md4.update(string) return md4.hexdigest()
lib_page.a11y_audit.config.set_rules({ "ignore": [
<script type="{}"> ${{x | n, dump_js_escaped_json}} </script>
self.assertEqual( other_cmap.get_overall_message(), self.cmap.get_overall_message() )
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
CourseEnrollmentFactory.create( user=user, course_id=course_key, mode=mode )
ret = utils.find_json(test_sample_json) self.assertDictEqual(ret, expected_ret)
total_num_subtasks = _get_number_of_subtasks(total_num_items, items_per_task) subtask_id_list = [str(uuid4()) for _ in range(total_num_subtasks)]
return self.q(css='.page-header .breadcrumbs')[0].text
requirements = CreditRequirement.objects.filter(course__course_key=course_key, active=True)
return capi.get_band_ysize(self._ptr)
self.assertEqual(draft_version, new_draft_version) self.assertNotEqual(published_version, new_published_version)
import ioflo.base.deeding
autoreload.raise_last_exception()
self.problem_section = ItemFactory.create(parent_location=chapter.location, category='sequential', metadata={'graded': True, 'format': 'Homework'}, display_name=self.TEST_SECTION_NAME)
return self.q(css=self._bounded_selector("a.link-to-group-settings")).first.click()
if not sparse.issparse(X) or has_sw: solver = 'cholesky' else: solver = 'sparse_cg'
parent = self._get_raw_parent_location(as_published(location), ModuleStoreEnum.RevisionOption.draft_preferred) if parent: self._update_single_item(parent, update) self._update_ancestors(parent, update)
patcher = mock.patch('terrain.stubs.xqueue.Timer') timer = patcher.start() timer.side_effect = FakeTimer self.addCleanup(patcher.stop)
bias = T.dvector() kerns = T.dvector() input = T.dmatrix() rng = N.random.RandomState(3423489)
@override_settings(ROOT_URLCONF='test_client_regress.urls') class UrlconfSubstitutionTests(SimpleTestCase):
try: from salt._compat import ElementTree as ET HAS_ELEMENT_TREE = True except ImportError: HAS_ELEMENT_TREE = False
def db_for_write(self, model, **hints): return "other"
request = RequestCache.get_current_request() return getattr(request, 'user', None)
problem_vertical = ItemFactory.create( parent_location=problem_section.location, category='vertical', display_name=problem_vertical_name ) problem_vertical_list.append(problem_vertical)
def f(grp): if grp.name == 'Pony': return None return grp.iloc[0]
'SQUELCH_PII_IN_LOGS': False,
from pandas.compat.numpy import *
path = os.path.join(curpath(), 'cut_data.csv')
self.refresh_course()
pass
if oob: indexer = slice(0, 0) else: indexer = slice(3, 5) self.check(result, s, indexer, False)
add_user_to_cohort(cohorts[cohort_index], self.user.username)
n_trials = 10000
microsite.set_by_domain(self.microsite_subdomain) self.assertTrue(microsite.is_request_in_microsite())
membership = Membership.objects.create( membership_country_id=self.usa.id, person_id=self.bob.id, group_id=self.cia.id)
return []
self.user.profile.mailing_address = None self.user.profile.save()
content = contentstore('trashcan').find(asset_key, throw_on_not_found=False) self.assertIsNotNone(content)
import salt.utils.event from salt.ext import six
def allow_migrate(self, db, app_label, **hints): return hints.get('foo', False)
stripped, ccx = strip_ccx(to_strip) yield stripped, partial(restore_ccx_collection, ccx_id=ccx)
return (lon, lat)
for resolver in resolvers: if parsed_expr.assigner in resolver: resolver[parsed_expr.assigner] = ret break else: resolvers += ({parsed_expr.assigner: ret},)
except(KeyError, ValueError): raise ValueError( u"Invalid submission: {val} for {key}".format(val=data[key], key=key) )
GeometryCollection._allowed = (Point, LineString, LinearRing, Polygon, MultiPoint, MultiLineString, MultiPolygon)
return year_end == dt or \ self.get_year_end(dt - relativedelta(months=1)) == dt
o = o.repeat(range(1, len(o) + 1)) o.name = 'a'
while 'rows' in query_reply and current_row < total_rows: page = query_reply['rows'] result_pages.append(page) current_row += len(page)
data['ItemB'] = data['ItemB'][:-1] self.assertRaises(Exception, Panel, data)
chapter_aside.data_field = 'another one value' self.store.update_item(new_chapter, self.user_id, asides=[chapter_aside])
cap = pcapy.open_live(self.iface, 65536, 1, 0)
if not wait_for_created(data['upid'], timeout=300): return {'Error': 'Unable to create {0}, command timed out'.format(name)}
unescaped = unescaped[:-len(trail)]
dest = self._extrn_path(url, saltenv, cachedir=cachedir) makedirs = True
import salt.client.ssh import salt.runner
os.path.join(os.path.dirname(__file__), '..', '../..', 'sphinxext')
from __future__ import unicode_literals
X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1], [6, 3], [-4, 7]]
assert_raises(ValueError, scale, X_csr, with_mean=True) assert_raises(ValueError, StandardScaler(with_mean=True).fit, X_csr)
assert_true(check_random_state(None) is np.random.mtrand._rand) assert_true(check_random_state(np.random) is np.random.mtrand._rand)
print("Compute structured hierarchical clustering...") st = time.time()
if lib_names: for lib_name in lib_names: lib_path = find_library(lib_name) if lib_path is not None: break
if not content_type: self.send_error(406)
casted.get_loc(5)
dist_dict = defaultdict(int) dist_dict.update(single_source_shortest_path_length(dist_matrix, i))
with assertRaisesRegexp(ValueError, 'Index has duplicate keys'): df.set_index('A', verify_integrity=True)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
expected_message = self.get_dashboard_analytics_message() self.assertTrue(expected_message in response.content)
for db_alias in self.dbs.keys(): sh("cp {db_cache} {db}".format(db_cache=self.db_caches[db_alias], db=self.dbs[db_alias]))
from salt.modules import linux_lvm from salt.exceptions import CommandExecutionError
self._func_path = '.'.join([func.__class__.__module__, func.__class__.__name__])
providers = salt.loader.log_handlers(opts)
import salt.ext.six as six from salt.ext.six import string_types, text_type from salt.ext.six.moves.urllib.parse import urlparse
new_indexed_count = self.index_recent_changes(store, before_time) self.assertEqual(new_indexed_count, 5)
pass
contains_aggregate = False
extract_dir_relative = path.relpath(extract_dir, settings.DATA_DIR)
self.split_test_module.user_partition_id = 2 [active_children, inactive_children] = split_test_module.active_and_inactive_children() self.assertEqual(active_children, []) self.assertEqual(inactive_children, children)
self.assertEqual(len(new_stores), len(old_stores)) for new_store in new_stores: self.assertStoreValuesEqual(new_store, old_stores[new_store['NAME']])
from __future__ import absolute_import
client.user_credentials.post({ 'username': username, 'credential': {'program_id': program_id}, 'attributes': [] })
'string_max_length': get_config_value('string_max_length'),
return self.q(css=self._bounded_selector(".check-all-inline-discussions:checked"))
if logging_settings: logging_config_func(logging_settings)
module_class = SplitTestModule
'Content-Type': 'application/x-www-form-urlencoded',
is_mi_columns = isinstance(self.columns, MultiIndex) try: if key in self.columns and not is_mi_columns: return self._getitem_column(key) except: pass
return 'Enrollment data is now available in <a href="http://example.com/courses/{}" ' \ 'target="_blank">Example</a>.'.format(unicode(self.course.id))
default_z += T.alloc(*([0.]+[shape[elem] for elem in self.h_space.axes])).astype(default_z.dtype) assert default_z.ndim == 4
import datetime start = datetime.datetime.now() idx = DatetimeIndex(start=start, freq="1d", periods=10) df = DataFrame(lrange(10), index=idx)
cc_user = cc.User.from_django_user(request.user) cc_user.default_sort_key = request.GET.get('sort_key') cc_user.save()
import warnings import operator import weakref import gc
delattr(self._modulestore, name)
self.assertOrphanCount(course.id, 0) self.assertOrphanCount(published_branch, 1) self.assertIn(orphan, self.store.get_items(published_branch))
xblock_info = self._get_xblock_info(chapter.location) self._verify_visibility_state(xblock_info, VisibilityState.live)
assert expected_mutual_information(np.array([[70000]]), 70000) <= 1
if len(dbm.hidden_layers) > 2: state_below = dbm.hidden_layers[-3].upward_state(H_hat[-3]) else: state_below = dbm.visible_layer.upward_state(V)
ax._plot_data = [] ax.clear()
if self_referential: seen_self = sum( from_model == getattr(field.remote_field, 'model', None) for field in self.remote_field.through._meta.fields )
#pylint: disable=E0602
results_by_url = {} root = None
import salt.ext.six as six
try: os.makedirs(self._temp_folder) os.chmod(self._temp_folder, FOLDER_PERMISSIONS) except OSError as e: if e.errno != errno.EEXIST: raise e
with DefaultStorage().open(task_input['file_name']) as f: total_assignments = 0 for _line in unicodecsv.DictReader(UniversalNewlineIterator(f)): total_assignments += 1
return "no_params_with_context - Expected result (context value: %s)" % context['value']
suite = BokChoyTestSuite('', default_store='invalid') name = 'tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') )
return self.view(np.ndarray)
scores = as_float_array(scores, copy=True) scores[np.isnan(scores)] = np.finfo(scores.dtype).min return scores
with extend_sys_path(dirname): import_module('test_only_new_module') filenames = set(autoreload.gen_filenames(only_new=True)) self.assertEqual(filenames, {npath(filename)})
registration_code = CourseRegistrationCode.objects.all()[0].code redeem_url = reverse('register_code_redemption', args=[registration_code]) self.login_user()
new_course_key = self.course_key.replace(course=self.course_key.course.upper()) resp = self._create_course_with_given_location(new_course_key) self.assertEqual(resp.status_code, 200)
disturb_mem.disturb_mem() rng = np.random.RandomState([2012, 11, 27, 8])
#[group for groups in ['external_auth'][extra['eauth']]]):
self._asides.append(aside)
self.assertIn(map_key(actual_item_location), actual_item_map.keys())
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.params['wkt'] = wkt
testing.assert_array_equal(F.transform(X), np.around(X, decimals=3))
correct_map = CorrectMap() if 'correct_map' in state_dict: correct_map.set_dict(state_dict['correct_map'])
from theano.tensor.nnet.conv import conv2d, ConvOp
tm.assert_almost_equal(tuple(x), x_rec)
self.srid = srid
},
with override_settings(REGISTRATION_EXTRA_FIELDS={"country": "required"}): response = self.client.get(self.url) self.assertHttpOK(response)
print(msg) self.exit(1)
check_node(sibling.location, None, after_create, self.user_id, None, after_create, self.user_id)
y_ = np.dot(f, self.beta) + np.dot(r, self.gamma)
exc_info_on_loglevel=logging.DEBUG
if self.contentstore: self.contentstore.delete_all_course_assets(course_key) super(ModuleStoreWriteBase, self).delete_course(course_key, user_id)
return
pass
from __future__ import absolute_import
self.assertEqual(ax.patches[0].get_x(), -0.25) self.assertEqual(ax.patches[-1].get_x(), 5.15)
unit['hidden'] = False for child in unit.get('children', ()): unhide(child)
pass
accept_header = self.request.headers.get('Accept', '*/*') parsed_accept_header = [cgi.parse_header(h)[0] for h in accept_header.split(',')]
raise NotImplementedError('subclasses of FileUploadHandler must provide a receive_data_chunk() method')
network.__salt__ = {} network.__grains__ = {} network.__opts__ = {}
from __future__ import division, absolute_import, print_function
clean_warning_registry() with warnings.catch_warnings(record=True) as w: warnings.simplefilter('always')
return True
self.assertTrue(form.is_valid()) form.save() self.assertEqual(len(mail.outbox), 0)
from __future__ import absolute_import
if '.' + transcript_format not in self.q(css=transcript_selector).text[0]: return False
print("training score : %.3f (%s)" % (clf.score(X, y), multi_class))
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch
from __future__ import absolute_import import os import shutil
hidden_layer_sizes = self.hidden_layer_sizes if not hasattr(hidden_layer_sizes, "__iter__"): hidden_layer_sizes = [hidden_layer_sizes] hidden_layer_sizes = list(hidden_layer_sizes)
cached_file_path = _get_cached_file_name( fnd['bucket'], load['saltenv'], fnd['path'])
self.assert_enrollment_activation(False, selected_mode)
test_command = 'sysbench --num-threads=64 --test=memory ' test_command += '--memory-oper={0} --memory-scope={1} ' test_command += '--memory-block-size=1K --memory-total-size=32G run ' result = None ret_val = {}
from salt.version import SaltStackVersion
from __future__ import absolute_import import os import logging import time from collections import MutableMapping
self.assertContains(resp, "Home") self.assertContains(resp, "Course")
tab_id = self._active_sequence_tab.attrs('id')[0] return int(tab_id.split('_')[1])
create_kwargs = salt.utils.clean_kwargs(**copy.deepcopy(kwargs)) send_signal = create_kwargs.pop('send_signal', False)
cache_key = self._cache_key_for_kvs_key(kvs_key) if cache_key not in self._cache: raise KeyError(kvs_key.field_name) field_object = self._cache[cache_key] return json.loads(field_object.value)
if self.algorithm in _STOCHASTIC_ALGOS: self._fit_stochastic(X, y, activations, deltas, coef_grads, intercept_grads, layer_units, incremental)
self._envelope = args[0]
self.assertEqual( chicago_json, City.objects.annotate( geojson=functions.AsGeoJSON('point', bbox=True, crs=True, precision=5) ).get(name='Chicago').geojson )
_globals = {}
raise ValueError( "%s doesn't support multi-label classification" % ( self.__class__.__name__))
assert_true(resample() is None)
self.writable_chapter_location = self.store = self.fake_location = None self.course_locations = {}
self.course_nav.go_to_section('Test Section', 'Test Subsection')
result = g.agg(np.sum) assert_series_equal(result, expect)
for mode_slug in course_modes: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode_slug, mode_display_name=mode_slug, )
instance = self.run_cloud('-p ec2-test {0}'.format(INSTANCE_NAME)) ret_str = '{0}:'.format(INSTANCE_NAME)
return self.q(css='.form-create.create-user .user-email-input').visible
return self.alpha_
lev_loc = len(level) level = level.insert(lev_loc, k)
return do_ntranslate(singular, plural, number, 'ngettext')
n_classes = 3 plot_colors = "bry" plot_step = 0.02
link = world.retry_on_exception( lambda: _find_matching_button(category, component_type), ignored_exceptions=AssertionError )
uniqs = self.unique() n = len(uniqs) if dropna and com.isnull(uniqs).any(): n -= 1 return n
if index is None: extract_index(list(data.values()))
if self.contentstore: self.contentstore.copy_all_course_assets(source_course_id, dest_course_id) return dest_course_id
self.assertIn( 'Invalid value passed for path.', self.run_function('system.set_startup_disk', ['spongebob']))
random_state = self.random_state_ if random_init else None
content_location = StaticContent.compute_location( location.course_key, asset_name ) try: contentstore().find(content_location) except NotFoundError: return False else: return True
return none_fill(row[0]), row[1:]
try: result = wua_installer.Install()
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
est = pickle.loads(pickle.dumps(est)) assert_true(sparse.issparse(est.coef_)) pred = est.predict(X) assert_array_equal(pred, pred_orig)
try: while True: observer.join(2) except KeyboardInterrupt: observer.stop() print("\nStopped asset watcher.")
while not lines[0].startswith('{') and not lines[0].startswith('['): lines = lines[1:]
phase_variable = 'PYLEARN2_TRAIN_PHASE' phase_value = 'phase%d' % (number + 1) os.environ[phase_variable] = phase_value
import salt.ext.six as six
self.assertTrue( self.run_function('softwareupdate.schedule_enable', [False])) self.assertFalse(self.run_function('softwareupdate.schedule_enabled'))
verified, _ = self.create_mode('verified', 'Verified', min_price=5) self.assertTrue(CourseMode.has_payment_options(self.course_key))
from __future__ import unicode_literals
os.utime(path_test, (fstats_orig.st_mtime-age, fstats_orig.st_atime-age))
if db['NAME'] == ":memory:": return None
with self.assertRaisesRegexp(CommandError, unicode(GitExportError.BAD_COURSE)): call_command('git_export', 'foo/bar:baz', 'silly', stderr=StringIO.StringIO())
for chan_i in xrange(out_shp[-1]): channel = output[..., chan_i] start_idx = defoveate_channel(channel, rings, dense_X, start_idx)
to_process_non_drafts = super(DraftModuleStore, self)._query_children_for_cache_children(course_key, items)
raise NotImplementedError
while j < lenidx and (values[j] < r_bin or (closed == 'right' and values[j] == r_bin)): j += 1
if r_fmt: result.append(r_fmt % col) params += [r_params] return [(" ".join(result), tuple(chain.from_iterable(params)))]
return courseware.views.views.courses(request)
original_course = self.source_modulestore.get_course(source_course_key, **kwargs) if original_course is None: raise ItemNotFoundError(unicode(source_course_key))
s = Series(self.ts.index) rs = s.tolist() self.assertEqual(self.ts.index[0], rs[0])
plt.figure(1, figsize=(3, 2.2)) plt.imshow(face, cmap=plt.cm.gray, vmin=vmin, vmax=256)
enrollment.deactivate() self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_unenrollment_event_was_emitted(user, course_id)
manager = vb_get_manager() machines = manager.getArray(vb_get_box(), "machines") return [ vb_xpcom_to_attribute_dict(machine, "IMachine", **kwargs) for machine in machines ]
self.off = np.array(self.off, dtype=np.int32) self.val = np.array(self.val, dtype=np.int32)
__func_alias__ = { 'get_': 'get', 'set_': 'set', 'rm_': 'rm', 'ls_': 'ls' }
pass
for c in df.columns: if c not in bifw: bifw[c] = df[c] bifw = bifw.reindex(columns=df.columns)
if instance in vmconfig['current'] and vmconfig['current'][instance] is not None: for current_cfg in vmconfig['current'][instance]: remove_instance = True
area = area.dtype.type(area)
from __future__ import unicode_literals
self.course.user_partitions = partitions self.course = self.store.update_item(self.course, ModuleStoreEnum.UserID.test)
for user in users: CourseEnrollment.enroll(user, course_key)
if len(language[0]) > 1: return translation.get_language_info(language[0]) else: return translation.get_language_info(str(language))
if opts['root_dir']: tmpdir = os.path.join(opts['root_dir'], 'tmp') else: tmpdir = opts['root_dir']
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
from __future__ import absolute_import
login = self.client.post(login_url, self.super_login) self.assertRedirects(login, self.index_url) self.assertFalse(login.context)
url += '?auto' try: response = _urlopen(url, timeout=timeout).read().splitlines() except URLError: return 'error'
courses = CourseOverview.get_all_courses( org=org, filter_=filter_, ) if org == microsite_org else []
self.q(css=self.content_groups_css + " .new-button").first.click()
axarr = np.empty(nplots, dtype=object)
template = kwargs.pop('template', 'gis/google/google-multi.js')
attempt.mark_ready() self._assert_course_verification_status(VERIFY_STATUS_NEED_TO_VERIFY)
return self.conditional.log_conditional(X, theta)
from __future__ import absolute_import
factory = self._index_factory() return factory(*args, **kwargs)
X, y = make_blobs(n_samples=100, centers=10) brc = Birch(n_clusters=10) brc.fit(X)
idx = pd.TimedeltaIndex(['1 day', pd.NaT, '3 day'])
if settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None: read_size = settings.DATA_UPLOAD_MAX_MEMORY_SIZE - num_bytes_read
FILE_CHARSET = 'utf-8'
fmt = CustomFormatter() handler = CustomStreamHandler(stdout=stdout, stderr=stderr, formatter=fmt) top_level_logger.addHandler(handler)
der_cert = der[0] #der_algo = der[1] der_sig = der[2]
stack_data.append({ 'color': percent, 'value': count_grade, 'tooltip': tooltip, 'module_url': child.location.to_deprecated_string(), })
pass
with urlopen(url) as response: data = response.read()
self.verify_content_existence(self.store, root_dir, course_id, 'tabs', 'static_tab', '.html')
change_info = self.run_function('user.info', [CHANGE_USER]) if change_info: self.run_function('user.delete', [CHANGE_USER])
preds2 = np.zeros_like(y) for train, test in cv.split(X, y): est.fit(X[train], y[train]) preds2[test] = est.predict(X[test])
raise NotImplementedError()
self.mean_ = np.mean(X, axis=0) X -= self.mean_
from __future__ import unicode_literals
key = self.lti_consumer.consumer_key secret = SignatureValidator(self.lti_consumer).get_client_secret(key, None) self.assertEqual(secret, self.lti_consumer.consumer_secret)
certs_api.set_cert_generation_enabled(self.course.id, True)
self._auto_auth(self.USERNAME, self.EMAIL, False) self.courseware_search_page.visit()
return JsonResponse( _("Successfully removed invalid due date extension (unit has no due date).") )
X_blobs, _ = make_blobs(n_samples=100, centers=10, random_state=0) X_blobs = sparse.csr_matrix(X_blobs)
import integration import salt.utils
self.assertEqual(new, City.objects.get(name='NullCity').point)
original.to_stata(path) written_and_read_again = self.read_dta(path) res = written_and_read_again.set_index('index') tm.assert_frame_equal(res, expected, check_categorical=False)
used_ids = set(p.id for p in course.user_partitions) return generate_int_id(used_ids=used_ids)
remove_master_course_staff_from_ccx( self.course, self.ccx_locator, self.ccx.display_name, send_email=True ) self.assertEqual(len(outbox), len(list_staff_master_course) + len(list_instructor_master_course))
arr = np.random.randn(10) df = DataFrame(arr, index=[1, 2, 3, 4, 5, 1, 2, 3, 4, 5])
if 'tgt' not in load or 'jid' not in load or 'fun' not in load \ or 'arg' not in load: return False
self.assertNotIn(self.module_key, self.loader)
def __init__(self, **kwargs): super(FilebasedMicrositeBackend, self).__init__(**kwargs)
f = TypedMultipleChoiceField(choices=[(1, "+1"), (-1, "-1")], coerce=int, required=False, empty_value=None) self.assertIsNone(f.clean([]))
self.client.logout() response = self.client.get(self.path, content_type=JSON_CONTENT_TYPE) self.assertEqual(response.status_code, 401)
'1|no_arguments', '1|one_argument:"1"', '1|one_opt_argument', '1|one_opt_argument:"1"', '1|two_one_opt_arg:"1"',
return self.q(css=self._bounded_selector('p.card-description')).map(lambda e: e.text).results
self.mean_ = numpy.mean(X, axis=0) X -= self.mean_
mixing = rng.randn(6, 2) m = np.dot(mixing, s)
return True
data = 'a,b,c\n4,5,6\n\r' result = self.read_csv(StringIO(data)) tm.assert_frame_equal(result, expected)
self.assert_grade(problem, json.dumps({0: 4}), "correct") self.assert_grade(problem, json.dumps({0: 5}), "incorrect")
'disable_modules': list,
self.verify_success_on_file_content( 'username,email,cohort\nfoo_username,bar_email,baz_cohort', mock_store_upload, mock_cohort_task )
resp = self.client.get_json(course_update_url) payload = json.loads(resp.content) self.assertTrue(len(payload) == 1)
log = logging.getLogger(__name__)
return algos.take_nd(self.labels, self.sort_idx, allow_fill=False)
if re_pattern: minion_id = re.sub(re_pattern, re_replace, minion_id)
templates_path = add_base(['_templates'])
username = User.objects.get(email='staffmember@example.com').username self.assertContains(response, "Hello, %s." % username)
def test_replace_conversion_series_from_object(self): from_key = 'object' for to_key in self.rep: self._assert_replace_conversion(from_key, to_key, how='series')
assert_true(ocur == X.shape[1])
getattr(delegator, method)(delegator_data.fit_args[0])
global _USE_NUMEXPR if _NUMEXPR_INSTALLED: _USE_NUMEXPR = v
if self.actions is None or IS_POPUP_VAR in request.GET: return OrderedDict()
pca = PCA(n_components=8).fit(data_train)
#html_static_path.append('source/_static')
mod_random.__grains__ = {} mod_random.__salt__ = {} mod_random.__context__ = {} mod_random.__opts__ = {}
_, _, X_offset, _, X_scale = _preprocess_data(X, y, fit_intercept, normalize, return_mean=True) mean_dot = X_offset * np.sum(y)
terms_text = _(u"Terms of Service") terms_link = u"<a href=\"{url}\">{terms_text}</a>".format( url=marketing_link("TOS"), terms_text=terms_text )
X -= X.min() - .1 y_names = np.array(["one", "two", "three"])[y]
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = ' '
if not wait_for_state(vmobj['vmid'], 'stopped'): return {'Error': 'Unable to stop {0}, command timed out'.format(name)}
store = modulestore() with store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course.id): store.publish(course.location, ModuleStoreEnum.UserID.test)
if properties: optlist = [] for prop in properties.keys():
pieces["short"] = mo.group(3)
test_view = views.CustomSingleObjectView() context = test_view.get_context_data() self.assertEqual(context['object'], test_view.object)
ms = ModelState.from_model(Novel) with self.assertRaises(InvalidBasesError): ms.render(apps)
user_login_failed.send(sender=__name__, credentials=_clean_credentials(credentials))
return not isinstance(key, slice) and not is_list_like_indexer(key)
return self.course.id.make_usage_key('problem', problem_url_name)
assert_extra_field_error()
self.jobs = {}
tsdf = DataFrame(np.random.randn(1000, 3), columns=['A', 'B', 'C'], index=date_range('1/1/2000', periods=1000))
updates = dict([(key, val) for key, val in kwargs.items() if not key.startswith('__')])
self.assertEqual( chan.getElementsByTagName('atom:link')[0].getAttribute('href'), 'http://example.com/syndication/rss091/' )
import glob import shutil import logging import os
with self.assertRaises(ProtectedError): related.delete()
width, height = image_obj.size self.assertEqual(width, height) actual_sizes[width] = name
log_ais_w = numpy.zeros(batch_size, dtype=floatX)
self.assertRaises(NotImplementedError, s.any, bool_only=True) self.assertRaises(NotImplementedError, s.all, bool_only=True)
instance = cls.current() json_data = json.loads(instance.configuration) if instance.enabled else {} return json_data
__salt__['raid.save_config']()
memcached.host: 127.0.0.1 memcached.port: 11211
if not np.any(Y_ == i): continue plt.scatter(X[Y_ == i, 0], X[Y_ == i, 1], .8, color=color)
component = self.store.create_child( self.user_id, test_course.location, 'vertical', )
self.assertTrue(qs.count() in [0, 1])
self.assertTrue(filecmp.cmp(path_test + '.bak', path_in))
r = parse(self.io, parser=parser)
pattern = non_named_group_matcher.sub("<var>", pattern)
self.assertEqual(csv.replace('\r\n', '\n').strip(), self.CORRECT_CSV.strip())
return _is_safe_url(url, host) and _is_safe_url(url.replace('\\', '/'), host)
return date.replace(month=1, day=1)
return self.backend.events[idx]
return (geom_type.num in self.MULTI_TYPES and model_field.__class__.__name__ == 'Multi%s' % geom_type.django)
new_values = self.values.tz_localize(None).asi8.take(indexer)
line_re = re.compile('.*?\n')
return
self.assertRaises(Exception, _check, self.zframe) self.assertRaises(Exception, _check, self.fill_frame)
user = StaffFactory.create(course_key=course.id) self.assertTrue(access._has_access_course(user, 'enroll', course))
if i == 0: layer_below = self.dbm.visible_layer else: layer_below = self.dbm.hidden_layers[i-1] state_below = layer_to_state[layer_below] state_below = layer_below.upward_state(state_below)
for branch in [ModuleStoreEnum.RevisionOption.published_only, ModuleStoreEnum.RevisionOption.draft_only]: super(DraftVersioningModuleStore, self).fix_not_found( self._map_revision_to_branch(course_key, branch), user_id )
self.assertEqual(len(actual), 2) self.assertEqual(actual, expected)
from __future__ import unicode_literals
return instr
return self.instance.pk % 2 != 0
log.shutdown_multiprocessing_logging_listener(daemonizing=True)
('cart', 'cart'),
with self.assertNumQueries(0): self._assert_group_assignment(user, VerificationPartitionScheme.ALLOW)
return psutil.TOTAL_PHYMEM
DECIMAL_SEPARATOR = ',' THOUSAND_SEPARATOR = '.'
with self.assertRaisesMessage(IntegrityError, "Problem installing fixture"): management.call_command( 'loaddata', 'forward_ref_bad_data.json', verbosity=0, )
version = '%s' % (pandas.__version__)
if kwargs: payload_kwargs['kwargs'] = kwargs
from __future__ import unicode_literals
try: import rfc3987 HAS_RFC3987 = True except ImportError: HAS_RFC3987 = False
return self.q(css=self.thread_selector + " " + selector)
for key, value in six.iteritems(kwargs): setattr(self, key, value)
import salt.utils from salt.exceptions import CommandExecutionError
correct_ans = CapaFactory.create(showanswer='finished', max_attempts="1", attempts="0", due=self.tomorrow_str, correct=True) self.assertTrue(correct_ans.answer_available())
self.config.pop(self._logfile_config_setting_name_)
self.assertEqual(self.user_login_failed, [{'password': '********************', 'username': 'test'}])
if self._is_frame and axis == 1: name = 0 obj = sample._constructor({name: obj})
if fpath is None: fpath = DEFAULT_TOKEN_FILE return auth_file.Storage(fpath)
random_state.randint(MAX_INT, size=len(self.estimators_))
if conf.get('normalize', True): return sharedX(data_x, borrow=True) else: return theano.shared(theano._asarray(data_x), borrow=True)
problem_descriptor = modulestore().get_item(usage_key) problems[unicode(usage_key)] = problem_descriptor
cv = StratifiedKFold(n_folds=6) classifier = svm.SVC(kernel='linear', probability=True, random_state=random_state)
if 'host' not in payload: payload.update({"host": self.host})
qs = Article.objects.order_by('invalid_column') with self.assertRaises(FieldError): list(qs) with self.assertRaises(FieldError): list(qs)
return self._hidden_activation(inputs)
return middleware.RequestCache.get_request_cache(name)
get_storage_container_metadata = show_storage_container_metadata
ssh_gateway_config['ssh_gateway_password'] = config.get_cloud_config_value( 'ssh_gateway_password', vm_, __opts__, default=None, search_global=False )
elif virtual is True and virtualname != module_name: if virtualname is not True: module_name = virtualname
result = {} for key, value in zip(self.binlabels, self.bins): if key is not tslib.NaT: result[key] = value return result
from .utils.validation import check_array data = check_array(data, accept_sparse='csr') row_ind, col_ind = self.get_indices(i) return data[row_ind[:, np.newaxis], col_ind]
ts = self.tsframe['A']
_, mod = include('a-non-pydsl-sls', 'a-pydsl-sls')
results = [s for s in store.select('df', chunksize=chunksize)] result = concat(results) tm.assert_frame_equal(expected, result)
assert_series_equal(nat_series_dtype_timestamp - NaT, nat_series_dtype_timestamp) assert_series_equal(-NaT + nat_series_dtype_timestamp, nat_series_dtype_timestamp)
rng = np.random.RandomState(0) X = rng.randn(97, 149) Y = rng.randn(111, 149)
html_translator_class = "djangodocs.DjangoHTMLTranslator"
cumprod = self.tsframe.cumprod() expected = self.tsframe.apply(Series.cumprod) tm.assert_frame_equal(cumprod, expected)
if merged_group_ids is not None: self._access[partition.id] = merged_group_ids
cs_getordinate = CsOperation('GEOSCoordSeq_getOrdinate', ordinate=True, get=True) cs_setordinate = CsOperation('GEOSCoordSeq_setOrdinate', ordinate=True)
y = 0.5 * X.ravel()
examples = examples[1:]
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath
__virtualname__ = 'zabbix'
n_components = 150
iris = datasets.load_iris() X = iris.data[:, [0, 2]] y = iris.target
resp = self.assert_enrollment_status(expected_status=status.HTTP_400_BAD_REQUEST)
enrollment_mode = request.GET.get('enrollment_mode', 'honor')
opennebula.__active_provider_name__ = '' opennebula.__opts__ = {} VM_NAME = 'my-vm'
from __future__ import unicode_literals
if os.name == 'nt': socket.inet_pton = inet_pton socket.inet_ntop = inet_ntop
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.cohort_default_student_username = "cohort_default_student" self.cohort_default_student_email = "cohort_default_student@example.com" StudioAutoAuthPage( self.browser, username=self.cohort_default_student_username, email=self.cohort_default_student_email, no_login=True ).visit()
list(DirectoryEntry.objects.all().select_related())
self.assert_grade_requirement_status(None, 0)
from __future__ import unicode_literals
axes = df.groupby('classroom').boxplot(ax=axes)
with ensure_clean_store(self.path) as store: store.append('df2', df) store.append('df2', df)
self.assertHTMLEqual( a['mydate'].as_hidden(), '<input type="hidden" name="mydate" value="2008-4-1" id="id_mydate" />', )
self.assertIn('test.ping', funcs)
ROLE = "support" def __init__(self, *args, **kwargs): super(SupportStaffRole, self).__init__(self.ROLE, *args, **kwargs)
wkt_reader_create = GEOSFuncFactory('GEOSWKTReader_create', restype=WKT_READ_PTR) wkt_reader_destroy = GEOSFuncFactory('GEOSWKTReader_destroy', argtypes=[WKT_READ_PTR])
mouse_hover_action = ActionChains(self.browser).move_to_element(element) mouse_hover_action.perform()
self._cache = cache
pass
from student.roles import CourseCcxCoachRole, CourseInstructorRole, CourseStaffRole course_locator = course_id
ASSET_XSD_PATH = PLATFORM_ROOT / "common" / "lib" / "xmodule" / "xmodule" / "assetstore" / "tests" / ASSET_XSD_FILE
assert_almost_equal((3.0 * RBF(2.0))(X), (RBF(2.0) * 3.0)(X))
css = prefix + ' .wrapper-collection' return [GroupConfiguration(self, prefix, index) for index in xrange(len(self.q(css=css)))]
from __future__ import absolute_import
self.send_get(self.anonymous_client, expected_status=401) self.send_put(self.anonymous_client, "new_value", expected_status=401) self.send_delete(self.anonymous_client, expected_status=401)
self.options.config_dir = os.path.abspath(self.options.config_dir)
if not hasattr(self, 'mask_weights'): self.mask_weights = None if not hasattr(self, 'max_col_norm'): self.max_col_norm = None
SECRET_KEY = '85920908f28904ed733fe576320db18cabd7b6cd'
self.loc[label] = value return self
with assertRaisesRegexp(TypeError, 'cannot specify cols with a ' 'MultiIndex'): df.to_csv(path, tupleize_cols=False, columns=['foo', 'bar'])
return self.find_css('.staff-lock .tip-warning').visible
import salt.ext.six as six import salt.utils
pred = sum(_samme_proba(estimator, n_classes, X) for estimator in self.estimators_)
self.q(css='{} .section-name'.format(parent_css)).first.click()
new_self = self.__class__(self.obj, self.name)
if conn.vendor == 'sqlite' and conn.is_in_memory_db(conn.settings_dict['NAME']): conn.allow_thread_sharing = True connections_override[conn.alias] = conn
from_address = theming_helpers.get_value( 'email_from_address', settings.DEFAULT_FROM_EMAIL ) user = User.objects.get(id=user_id) user.email_user(subject, message, from_address)
from __future__ import absolute_import import logging
if not is_safe_url(url=next_page, host=request.get_host()): next_page = request.path
self.add_license_to_xml(xml_object, default="all-rights-reserved")
img = circle1 + circle2 mask = img.astype(bool) img = img.astype(float)
user_partitions = UserPartitionList( help=_("The list of group configurations for partitioning students in content experiments."), default=[], scope=Scope.settings )
coloring_matrix = np.random.normal(size=(n_features, n_features)) X_train = np.dot(base_X_train, coloring_matrix) X_test = np.dot(base_X_test, coloring_matrix)
'CERTIFICATES_HTML_VIEW': False,
while re.search(RSTR_RE, stderr): stderr = re.split(RSTR_RE, stderr, 1)[1].strip()
names = ['Dummy', 'X', 'Dummy_2']
m = Memory(cachedir=lfw_home, compress=6, verbose=0) load_func = m.cache(_fetch_lfw_pairs)
obj.save()
import integration
from salt.exceptions import CommandExecutionError
directories_to_create.reverse() for directory_to_create in directories_to_create: log.debug('Creating directory: %s', directory_to_create) mkdir(directory_to_create, user=user, group=group, mode=mode)
self._assert_receipt_contains("tax purposes") self._assert_receipt_contains(self.course.display_name)
if form_value: cc_content.flagAbuse(user, cc_content) else: cc_content.unFlagAbuse(user, cc_content, removeAll=False)
bulk_write_record = self._get_bulk_ops_record(course_key) if bulk_write_record.active: return bulk_write_record.modules[version_guid].get(block_id, None) else: return None
self.assertIsNone(response.data[field_name])
n_classes = 4 n_samples = 100
from __future__ import absolute_import
self.assertEqual(self.team_membership11.last_activity_at, current_last_activity)
with self.cursor() as cursor: cursor.execute("CREATE EXTENSION IF NOT EXISTS postgis")
rsync.__salt__ = {}
import sys import time import binascii from datetime import datetime import hashlib import hmac import logging import salt.config import re
course_key = CourseKeyField(max_length=255, db_index=True)
if location.category in DIRECT_ONLY_CATEGORIES: return location return location.replace(revision=MongoRevisionKey.draft)
assert False, "student_view should produce valid html"
df = self.tsframe.fillna(0).astype(int) df.cumprod(0) df.cumprod(1)
SALT_KEEPALIVE = 99
keystone.__salt__ = {}
response = self.fetch('/', method='POST', body=json.dumps(valid_lowstate), headers={'Content-Type': self.content_type_map['json']})
self.assertEqual('', get_format('THOUSAND_SEPARATOR'))
if drop and method == 'lasso':
values = Series(values) self.parent.put(self._get_metadata_path(key), values, format='table', encoding=self.encoding, nan_rep=self.nan_rep)
self.client.login(username=self.user.username, password="password")
data[:, 3] /= data[:, 5]
normalize = False
self.user.is_active = user_is_active
self.course = CourseFactory()
single.shell.send( trans_tar, '{0}/salt_state.tgz'.format(__opts__['thin_dir']))
if salt.utils.is_windows() or 'systemd-detect-virt' in cmd or 'prtdiag' in cmd: continue failed_commands.add(command)
if not os.path.isdir(repo_dir): os.mkdir(repo_dir) self.addCleanup(shutil.rmtree, repo_dir)
from __future__ import absolute_import
event_info = dict() event_info['module_id'] = self.capa_module.location.to_deprecated_string() event_info['problem_part_id'] = self.id
from __future__ import absolute_import
return str(self)
problem = self.build_problem(options=["hasnot", "hasn't", "has'nt"], correct_option="hasn't")
self._updates.append(update)
if self.child_descriptor is None: return [] return [self.child_descriptor]
self.forward_events = tornado.ioloop.PeriodicCallback(self._forward_events, self.opts['syndic_event_forward_timeout'] * 1000, io_loop=self.io_loop) self.forward_events.start()
if maxdepth is not None: relpieces = relname.split('/') if not relpieces[-1]: relpieces = relpieces[:-1] if len(relpieces) > maxdepth + 1: continue
if len(successes) < len(res_index): res_index = res_index.take(successes)
assert_equal(lfw_pairs_train.pairs.shape, (10, 2, 62, 47))
class Greatest(Func): function = 'GREATEST'
self.write_data(chunksize, dropna=dropna)
if has_access(user, u'staff', descriptor.location, course_id): system.error_descriptor_class = ErrorDescriptor else: system.error_descriptor_class = NonStaffErrorDescriptor
student_answer = self.student_answers.get(choicegroup.get('id')) expl_id_for_student_answer = None
sorted_df = frame.sort_values(by='A') indexer = frame['A'].argsort().values expected = frame.ix[frame.index[indexer]] assert_frame_equal(sorted_df, expected)
self._enroll(course.id, "verified")
modulestore().get_item(usage_key)
if (X.dtype == X_checked.dtype and X.format == X_checked.format): assert_true(X is X_checked)
for candidate in candidates: if system.resources_fs.exists(candidate): filepath = candidate break
return False
self.assertEqual( include(self.url_patterns, 'namespace', 'app_name'), (self.url_patterns, 'app_name', 'namespace') )
if service != 'README': ret.add(service)
mask = counts == I
blocked_states.append('IM') cauth.embargoed_countries = 'US, AQ, IM' cauth.save() currently_blocked = EmbargoedState.current().embargoed_countries_list
self.q(css=self.VIEW_MODE_OPTIONS_CSS).filter(lambda el: el.text.strip() == view_mode).first.click() self.wait_for_ajax()
import salt.pillar import salt.utils from salt.defaults import DEFAULT_TARGET_DELIM from salt.exceptions import CommandExecutionError
self.assertEqual(len(w), 1)
if exploded_grant[position_tracker + 1] == '@': phrase = 'pre-host'
groups = grouped.groups indices = grouped.indices
return getattr(section, self.name)[new_key]
user = User.objects.get(email=email) user.is_active = True user.save()
'pillar_merge_lists': bool,
encoding = geoip_encodings[record['charset']] for char_field in geoip_char_fields: if record[char_field]: record[char_field] = record[char_field].decode(encoding)
it = TableIterator(self, s, func, where=where, nrows=s.nrows, start=start, stop=stop, iterator=iterator, chunksize=chunksize, auto_close=auto_close)
if not isnull(new_values).all(): values = new_values
self.assert_index_equal(right.union(left), the_union)
if isinstance(loc, (slice, np.ndarray)): new_axes[axis] = new_axes[axis][loc] else: new_axes.pop(axis)
selector = self.get_element_selector(CSS_CLASS_NAMES['video_time']) current_seek_position = self.q(css=selector).text[0] return current_seek_position.split('/')[0].strip()
return cls._simple_new(subarr, sparse_index, fill_value)
return ( course1['org'] == course2['display_organization'] and course1['number'] == course2['display_coursenumber'] and course1['run'] == course2['run'] )
SOCIAL_SHARING_SETTINGS = ENV_TOKENS.get('SOCIAL_SHARING_SETTINGS', SOCIAL_SHARING_SETTINGS)
import salt.ext.six as six
msg = 'Related Field got invalid lookup: editor' with self.assertRaisesMessage(FieldError, msg): Article.objects.filter(author__editor__name='James')
config = CourseOverviewImageConfig.current() course_overview = CourseOverview.get_from_id(course.id) image_urls = course_overview.image_urls
result = df.drop_duplicates('AAA') expected = df[:2] tm.assert_frame_equal(result, expected)
mask = left_indexer == -1 if mask.all(): key_col = rvals else: key_col = Index(lvals).where(~mask, rvals)
n_classes_ = [n_classes_] classes_ = [classes_] class_prior_ = [class_prior_] constant = [constant]
config.toggle()
STATUS_STARTED = 'started' STATUS_SUCCESS = 'success' STATUS_ERROR = 'error'
result = f.clean('12-21-2010') self.assertEqual(result, date(2010, 12, 21))
self.addCleanup(mock_sh.stop)
NON_VERIFIED_MODES = [HONOR, AUDIT, NO_ID_PROFESSIONAL_MODE]
import salt.utils import salt.utils.locales import salt.utils.cloud import salt.ext.six
v_1 = DictVectorizer().fit([d_sorted]) v_2 = DictVectorizer().fit([d_shuffled])
utf8_charset = Charset.Charset('utf-8')
if name in names: ret[name] = version_num
if d_idx < 0: n_prec = len(digits[:d_idx]) else: n_prec = len(digits) + d_idx
for axes_row in all_axes: for axes in axes_row: axes.get_xaxis().set_visible(False) axes.get_yaxis().set_visible(False)
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
session_data = None
import salt.client import salt.utils.virt import salt.utils.cloud import salt.key from salt.exceptions import SaltClientError
filenames = set(autoreload.gen_filenames(only_new=True)) self.assertEqual(filenames, set())
from sklearn.externals.six.moves import cStringIO as StringIO import sys old_stdout = sys.stdout try: sys.stdout = StringIO()
assert_warns_message(DeprecationWarning, "class_weight='auto' heuristic is deprecated", model.fit, X, y)
saltenv=saltenv, pillarenv=kwargs.get('pillarenv'), pillar_override=kwargs.get('pillar'), )
self.assertEqual( self.store.has_published_version(course1_item), self.store.has_published_version(course2_item) )
from salt.states import glusterfs import salt.utils.cloud import salt.modules.glusterfs as mod_glusterfs
log.debug( 'The \'{0}\' cloud driver defined under \'{1}\' provider ' 'alias is unable to get the locations information'.format( driver, alias ) ) continue
concat([panel1, panel3], axis=1, verify_integrity=True)
out, err = self.run_django_admin(args) self.assertNoOutput(out) self.assertOutput(err, "already exists")
maxDiff = None
self.assertEqual(component.edited_by, self.user_id) old_edited_on = component.edited_on
ws = create_connection('wss://localhost:8000/all_events/d0ce6c1a37e99dcc0374392f272fe19c0090cca7')
log = logging.getLogger(__name__)
if photo_id_image is not None: initial_verification = None
self.cursor = position
self.values = Int64Index(np.arange(self.table.nrows)) return self
def long_range(start, end): while start < end: yield start start += 1
ax = df.plot.barh(width=width) for r in ax.patches: self.assertEqual(r.get_height(), width / len(df.columns))
fields = Person._meta.get_fields() with self.assertRaisesMessage(AttributeError, msg): fields += ["errors"]
self.publish((('html', 'html00'),))
from __future__ import absolute_import import logging
self.asset_collection.update( {'_id': course_assets.doc_id}, {'$set': {self._make_mongo_asset_key(asset_key.asset_type): all_asset_info}} ) return 1
for k, v in compat.iteritems(other): if k in d: raise Exception('Duplicate regressor: %s' % k) d[k] = v
if 'warnings' in cdata: ret.setdefault('warnings', []).extend(cdata['warnings'])
form = Form() form_set = FormSet(instance=User())
with self.assertRaises(ValueError): setattr(c, "parent", First(id=1, second=1))
eps_range = np.linspace(0.01, 0.99, 100)
self.assertContains(response, k, status_code=500) self.assertNotContains(response, v, status_code=500)
class UserProfile(models.Model): user = models.OneToOneField(User, models.CASCADE, primary_key=True)
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
branch = (branch == 'trunk' and 'base' or branch)
resp = self.client.get_html('/home/') self.assertEqual(resp.status_code, 302)
return csv.reader(f, dialect=dialect, **kwds)
for saltenv, buckets in six.iteritems(_get_buckets()): bucket_files = {} for bucket_name in buckets: s3_meta = __get_s3_meta(bucket_name)
id_cache = os.path.join(root_dir, config_dir.lstrip(os.path.sep), 'minion_id')
dict(safe_zip(range(-5, 6), range(-5, 6))),
return super(GISLookup, self).process_rhs(compiler, connection)
self.store.mappings.clear() library = self.store.get_library(library_key) self.assertEqual(library.location.library_key, library_key)
pref = os.path.join(self.dirpath, basename + '.csv') dfref = read_csv(pref, index_col=0, parse_dates=True, engine='python') return dfref
params["email"] = "not_an_email_address" assert_email_error("A properly formatted e-mail is required")
try: return (right_start == left_end + offset) or right_start in left except (ValueError):
data = list(series.values) samplings = [random.sample(data, size) for _ in range(samples)]
self.request.session[LANGUAGE_SESSION_KEY] = 'en' set_user_preference(self.user, LANGUAGE_KEY, 'eo') self.middleware.process_request(self.request)
chunk[key] = name
node_position_model = manifold.LocallyLinearEmbedding( n_components=2, eigen_solver='dense', n_neighbors=6)
world.browser.execute_script('window.confirm = function(){return false;} ; window.alert = function(){return;}')
return (vpnservice, desc)
test_df = DataFrame({'groups': [0, 0, 1, 1], 'random_vars': [8, 7, 4, 5]})
tm.assertRaises(TypeError, lambda: lib.max_len_string_array(arr.astype('U')))
self.assertEqual(url, f.clean(url))
try: ret = self.run_function( 'state.template_str', ['\n'.join(template)] )
directory = os.path.dirname(os.path.realpath(__file__)) filename = 'generated.pyx' path = os.path.join(directory, filename)
if self.capa_system.xqueue is None: return {'success': False, 'message': _('Cannot connect to the queue')}
predicted = cross_val_predict(lr, boston.data, y, cv=10)
[heappush(inertia, (ini[idx], k, coord_col[idx])) for idx in range(n_additions)]
assert world.is_css_present(sel)
elif self.algorithm == 'l-bfgs': self._fit_lbfgs(X, y, activations, deltas, coef_grads, intercept_grads, layer_units) return self
continue
if kwargs: salt.utils.warn_until( 'Carbon', 'kwargs must be passed inside the low under "kwargs"' )
self.DEFAULT_TIMEOUT = caches[DEFAULT_CACHE_ALIAS].default_timeout
if value is None: return ret
obj_spec = vmodl.query.PropertyCollector.ObjectSpec( obj=obj_view, skip=True, selectSet=[traversal_spec] )
return u"{verification_reminder} {refund_reminder}".format( verification_reminder=verification_reminder, refund_reminder=refund_reminder )
comb[comb < 1] = 5 expected = Series([5, 1, 2, 5, 1, 2], index=[0, 1, 2, 0, 1, 2]) assert_series_equal(comb, expected)
if value: wait_for(lambda _: css_value(css_selector, index=index))
sliced = self.frame.ix[-2:, :] expected = self.frame.reindex(index=self.frame.index[-2:]) tm.assert_sp_frame_equal(sliced, expected)
df3 = DataFrame({"a": [1, 2, 3, 4], "b": [1, 2, 3, 4]})
good_status, is_tarball_mimetype = self.export_page.download_tarball() self.assertTrue(good_status) self.assertTrue(is_tarball_mimetype)
return self._geom_attribute('point_on_surface', **kwargs)
X = X.tocsr()
super(BadImplementationAbstractEnrollmentReportProvider, self)
verify_file_presence(False)
import salt.ext.six as six try: import zmq HAS_ZMQ = True except ImportError: HAS_ZMQ = False
from __future__ import unicode_literals
mongo_store.collection.update( self.vertical_x1b.to_deprecated_son('_id.'), {'$push': {'definition.children': unicode(self.problem_x1a_1)}} )
raise NotImplementedError(str(type(self)) + " does not implement continue_learning.")
self.verify_pdf_certificate()
return {"result": "inclusion_one_default_from_template - Expected result: %s, %s" % (one, two)}
resp = self.create_xblock(category='static_tab') usage_key = self.response_usage_key(resp)
if form.is_valid(): form.save( from_email=theming_helpers.get_value('default_from_email', settings.DEFAULT_FROM_EMAIL), domain_override=orig_host, use_https=is_secure ) else: raise UserNotFound
check(u"('hasnt','hasn't')", [u'hasnt', u'hasn\'t'])
exec(compile(open(SALT_VERSION).read(), SALT_VERSION, 'exec'))
from __future__ import unicode_literals
implied_column_null = False
return self.accessor_cls
self.assertTrue(router.allow_migrate_model('default', User)) self.assertTrue(router.allow_migrate_model('default', Book))
import logging
X2, Y2, p_c, p_w_c = make_multilabel_classification( n_samples=25, n_features=20, n_classes=3, random_state=0, allow_unlabeled=allow_unlabeled, return_distributions=True)
from __future__ import unicode_literals
digits = datasets.load_digits()
if len(name) > 10: name = name[:10] return name.replace(' ', '_').strip()
thumbnail_content, thumbnail_location = static_content_store.generate_thumbnail(content)
kwargs['close_fds'] = True
from __future__ import absolute_import
self.assertFalse(self.page.experiment_group_configurations[0].is_expanded) self.assertTrue(self.page.experiment_group_configurations[1].is_expanded)
for i in range(X.shape[0]): assert_almost_equal(np.linalg.norm(X[0].data, 2), 1.0)
log = logging.getLogger(__name__)
with self.assertNumQueries(1): bacon.tags.add(t1, t2) self.assertEqual(t1.content_object, bacon) self.assertEqual(t2.content_object, bacon)
try: float(slug) except ValueError: return False return True
import xlwt engine_kwargs['engine'] = engine super(_XlwtWriter, self).__init__(path, **engine_kwargs)
response = self.client.get(self.programs_path) self.assertRedirects( response, '{login_url}?next={programs}'.format( login_url=settings.LOGIN_URL, programs=self.programs_path ) )
STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'
metadata_translations = { 'slug': 'url_name', 'name': 'display_name', }
translation = CurrentTranslation(ArticleTranslation, models.CASCADE, ['id'], ['article'])
try: config = salt.template.compile_template( sls_file, renderers, __opts__['renderer'], __opts__['renderer_blacklist'], __opts__['renderer_whitelist'])
manager = getattr(self.model, kwargs.pop('manager')) manager_class = create_generic_related_manager(manager.__class__, rel) return manager_class(instance=self.instance)
try: post_dict = urlparse.parse_qs(contents, keep_blank_values=True) return { key: list_val[0] for key, list_val in post_dict.items() }
from salt.modules import linux_sysctl from salt.modules import systemd from salt.exceptions import CommandExecutionError
from salt.ext import six
self.assertRaises(Exception, self.bseries.__getitem__, len(self.bseries) + 1)
if partial_text: wait_for(lambda _: css_html(css_selector, index=index), timeout=8)
lc_block = self._add_library_content_block(course, self.lib_key) lc_block = self._refresh_children(lc_block) self.assertEqual(len(lc_block.children), 1)
if name == 'ROOT': return settings.MKTG_URLS.get('ROOT') return settings.MKTG_URLS.get('ROOT') + settings.MKTG_URLS.get(name)
self.assertFalse(module_has_submodule(egg_module, 'no_such_module')) with self.assertRaises(ImportError): import_module('egg_module.no_such_module')
CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded'
self.assertTemplateNotUsed(response, 'GET Template')
vbox_guest.__salt__ = {} vbox_guest.__opts__ = {}
mean = X.mean(axis=0) std = X.std(axis=0) X = (X - mean) / std
EmptyPromise( lambda: cohort_name == cohort_management_page.get_selected_cohort(), "Waiting for new cohort" ).fulfill() cohort_management_page.add_students_to_selected_cohort([student])
self.assertEqual(self.video.speed, '0.50x')
author_book_auto_m2m_intermediate = Author.books.through.objects.get(author=author, book=book) self.author_book_auto_m2m_intermediate_id = author_book_auto_m2m_intermediate.pk
from __future__ import absolute_import
return six.iteritems(super(MultiValueDict, self))
self.q(css=self._bounded_selector(self.NAME_INPUT_SELECTOR)).results[0].send_keys(Keys.ENTER) self.wait_for_ajax()
return self._create_progress_entry(student, task_state=SUCCESS)
sql_string = 'NOT (%s)' % sql_string
next_date = offset.apply(cur) if next_date >= cur: raise ValueError('Offset %s did not decrement date' % offset) cur = next_date
form = self._admin_form(course_mode)
import pandas
self.login_page.visit()
self.profile.gender = gender self.profile.save()
result = df.loc[idx['2016-01-01':'2016-02-01', :], :] expected = df tm.assert_frame_equal(result, expected)
data_types = {} data_types_suffix = {} data_type_check_constraints = {} ops = None vendor = 'unknown' SchemaEditorClass = None
if service[1]: if include_enabled: enabled_services.update({service[0]: sorted(service[1].split())}) continue if include_disabled: disabled_services.update({service[0]: []})
subject = ''.join(subject.splitlines()) body = loader.render_to_string(email_template_name, context)
self._indexables.extend([ IndexCol(name=name, axis=axis, pos=i) for i, (axis, name) in enumerate(self.attrs.index_cols) ])
if indexer is None: return Int64Index([])._values return indexer._values
from __future__ import absolute_import
TRANSFORMER_VERSION_KEY = '_version'
self.assertEqual(resp.data, {"state": desired_state})
if not hasattr(self, 'freeze_set'): self.freeze_set = set([])
return self.find_css("#due_time").present
result = Index(np.array(self), name=self.name) new_target, indexer, _ = result._reindex_non_unique( np.array(target))
emit_field_changed_events( user_profile, user_profile.user, sender._meta.db_table, excluded_fields=['meta'] )
uncommented_start_index = self._uncommented_start_index(mako_template, start_index) if uncommented_start_index != start_index: start_index = uncommented_start_index continue
self.assertEqual(response.status_code, 200)
if score is None: self.clear_user_module_score(real_user) return Response(status=200)
p = Place.objects.get(name="Demon Dogs") r = p.restaurant
del DEFAULT_FILE_STORAGE MEDIA_ROOT = "/edx/var/edxapp/uploads"
for problem in problem_set: stack_data = []
self.m2m_data = None
if expr_form == 'range' and HAS_RANGE: tgt = self._convert_range_to_list(tgt) expr_form = 'list'
est = TreeEstimator() assert_raises(NotFittedError, est.predict, T)
if profile not in valid_profiles: raise salt.exceptions.SaltInvocationError('Invalid Profile Name')
if correct: self.problem_page.click_choice("choice_0") self.problem_page.click_choice("choice_2") else: self.problem_page.click_choice("choice_1")
from __future__ import absolute_import
def test_bytes_io(self): _skip_if_no_xlrd()
CSRF_COOKIE_SECURE = ENV_TOKENS.get('CSRF_COOKIE_SECURE', False)
ind = date_range("2012-12-01", periods=10, tz="utc") ind = ind.drop(ind[-1])
for draft in to_process_drafts: draft_loc = Location._from_deprecated_son(draft["_id"], course_key.run) draft_as_non_draft_loc = as_published(draft_loc)
self.times_called += 1 if self.times_called % 2 == 0: return True, 'Task Completed' return False, 'Task Errored In Some Way'
DateTimeAwareJSONEncoder = DjangoJSONEncoder
self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
expiry_age = self.get_expiry_age(expiry=self._expiry_date(session_data)) if expiry_age <= 0: session_data = {} self.delete() self.create()
self.apps.render_multiple(states_to_be_rendered)
allow_multiple = False
return comdat['stderr']
s = Series(np.arange(100), name='foo')
out = opts['output']
from __future__ import unicode_literals
info = _get_info(self.info, i) info['names'] = list(a.names) info['type'] = a.__class__.__name__
self.assertEqual(self.func(None), [])
output = self.engine.render_to_string('basic-syntax10', {'var': SomeClass()}) self.assertEqual(output, 'OtherClass.method')
X_train, X_test, y_train, y_test, sw_train, sw_test = \ train_test_split(X, y, sample_weight, test_size=0.9, random_state=42)
self.assertNotIn('user', constructed)
class DatetimeConverter(dates.DateConverter):
cauth = EmbargoedState(embargoed_countries='US, AQ') cauth.save() currently_blocked = EmbargoedState.current().embargoed_countries_list
self._check_text_labels(xlabels, [''] * len(xlabels)) ylabels = ax.get_yticklabels() self._check_text_labels(ylabels, [''] * len(ylabels))
template = engines['django'].from_string('bar{{ baz }}') response.template_name = template response.render() self.assertEqual(response.content, b'foo')
from __future__ import absolute_import import datetime import json import logging import pprint import time try: import slackclient HAS_SLACKCLIENT = True except ImportError: HAS_SLACKCLIENT = False
choices = self.xml.xpath('choicegroup/choice') return [choice.get("name") for choice in choices]
if settings.APPEND_SLASH and uri.endswith('/') and referer == uri[:-1]: return True
NO_BOTO_MODULE = True BOTO_NOT_CONFIGURED = True try: import boto NO_BOTO_MODULE = False try: boto.connect_iam() BOTO_NOT_CONFIGURED = False except boto.exception.NoAuthHandlerFound: pass except ImportError: pass
if not salt.utils.istextfile(path): raise SaltInvocationError( 'Cannot perform string replacements on a binary file: {0}'.format(path))
self.assertEqual(response.status_code, 200) msg = Messages.NO_ECOM_API.format(username=self.user.username, course_id=self.course.id) self.assertResponseMessage(response, msg)
username_label = _(u"Public username")
answer_objs = SurveyAnswer.objects.filter( user=self.user, form=self.survey )
cret = mod_run_check( run_check_cmd_kwargs, onlyif, unless ) if isinstance(cret, dict): ret.update(cret) return ret
return zlib.compress(pickle.dumps(data, pickle.HIGHEST_PROTOCOL))
warnings.warn("SparsePanel is deprecated and will be removed in a " "future version", FutureWarning, stacklevel=2)
sources = xml_element.get('sources') if sources: return [location.strip() for location in sources.split(';')]
from salt.modules import hipchat
from selenium.webdriver.common.by import By from selenium.webdriver.support import expected_conditions as ec self.wait_until( ec.text_to_be_present_in_element_value( (By.CSS_SELECTOR, css_selector), text), timeout )
for i in range(0, 4): np.testing.assert_allclose(fl.get_params()[i].eval(), mlp_composite.get_params()[i].eval())
import salt.ext.six as six
import salt.utils import salt.utils.cloud import salt.utils.xmlutil import salt.utils.vmware from salt.exceptions import SaltCloudSystemExit
with disable_overrides(): original_due_date = getattr(unit, 'due', None)
if is_css_present(css_selector): return retry_on_exception(lambda: css_find(css_selector)[index].value) else: return ""
root_usage_key = self._create_vertical()
next_url = request.GET.get('next') if next_url: return redirect(next_url) else: return redirect('/course/')
y_true += [0]*n_classes y_pred += [0]*n_classes
return db == 'default'
self.cursor().execute("BEGIN")
from __future__ import unicode_literals
return self.find_courses(data['user'], CourseInstructorRole.ROLE, data.get('values'))
from salt.cloud.clouds import gce from salt.exceptions import SaltCloudSystemExit
add_instructor(destination_course_key, request.user, request.user)
from __future__ import absolute_import
sparse_classifier = IsolationForest( n_estimators=10, random_state=1, **params).fit(X_train_sparse) sparse_results = sparse_classifier.predict(X_test_sparse)
description = "A CourseKey object, saved to the DB in the form of a string" KEY_CLASS = CourseKey
sl = ['AAPL', 'AMZN', 'GOOG'] web.get_data_yahoo(sl, '2012')
from __future__ import absolute_import
return start(name)
return self.q(css='.action-delete').first
from __future__ import absolute_import from copy import deepcopy
pass
CourseOverviewImageSet.objects.create(course_overview=overview)
repr(slo)
return 'bookmarked' if self.q(css='.bookmark-button.bookmarked').present else ''
set_prerequisite_courses(course.id, [unicode(pre_requisite_course.id)]) completed_milestones = milestones_achieved_by_user(student, unicode(pre_requisite_course.id)) self.assertEqual(len(completed_milestones), 0)
self._check_if_open() return self._handle.root
copy = copy if copy is not None else self.copy return binarize(X, threshold=self.threshold, copy=copy)
return (subnet, router, name, admin_state_up)
raise salt.exceptions.SaltSystemExit( 'The minimum required python version to run salt-ssh is "2.6".' )
raise NotImplementedError()
df = DataFrame({'foo': [0, 1], 'bar': [3, 4], 'val': np.random.randn(2)})
p._set_list(2, (50, 3141)) self.assertEqual(p.coords, (50.0, 3141.0), 'Point _set_list')
from __future__ import absolute_import
rs = mi_int.iloc[:, 2] xp = mi_int.ix[:, 2] assert_series_equal(rs, xp)
assert_false(hasattr(seq, 'attempts'))
self.assertFalse( CourseEnrollment.is_enrolled(self.ext_user, self.course.id), 'Did not expect ext_user to be enrolled in course' )
if _mini_batch_convergence( self, iteration_idx, n_iter, tol, n_samples, centers_squared_diff, batch_inertia, convergence_context, verbose=self.verbose): break
from salt.modules import win_ntp
if self.user: user = self.user.resolve(context) if not user.is_authenticated: flatpages = flatpages.filter(registration_required=False) else: flatpages = flatpages.filter(registration_required=False)
self.assertTrue(hasattr(mgr2, "_is_consolidated")) self.assertTrue(hasattr(mgr2, "_known_consolidated"))
unique_together = (('microsite', 'template_uri'),)
result = df.reindex(columns=lrange(5), fill_value=0.) expected = df.copy() expected[4] = 0. assert_frame_equal(result, expected)
msg_format += _(" (out of {total})")
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
grains['manufacturer'] = sysinfo['Manufacturer'] grains['productname'] = sysinfo['Product'] grains['uuid'] = sysinfo['UUID']
from salttesting import TestCase, skipIf from salttesting.mock import MagicMock, NO_MOCK, NO_MOCK_REASON, patch from salttesting.helpers import ensure_in_syspath
ret = self.run_run_plus(fun='fileserver.empty_dir_list', args=['backend="[roots]"']) self.assertIsInstance(ret['fun'], list)
try: resolved = resolved.value except (AttributeError): pass
y_grid_pred = trees.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:, 1]
out = out + out.T
coef = 1. / (binomial(k, n_features) * (n_features - k))
if dt.weekday() == 6: return dt + timedelta(1) elif dt.weekday() == 5: return dt + timedelta(2) return dt
default_manager = models.Manager() objects = HiddenInventoryManager()
instance.image.delete(save=False) instance.delete()
result = expr._can_use_numexpr(operator.add, '+', self.frame, self.frame2, 'evaluate') self.assertTrue(result)
self.create_mode('no-id-professional', 'no-id-professional', min_price=5) self.assertTrue(CourseMode.has_payment_options(self.course_key))
output = self.run_cloud('-d {0} --assume-yes --log-level=debug'.format(machine_name)) return output.get(CONFIG_NAME, {}).get(PROVIDER_NAME, {})
shutil.move(output_file_name, session_file_name) renamed = True
unique_fields = set()
def setUp(self): super(DatabaseMicrositeTestCase, self).setUp() self.microsite = MicrositeFactory.create() MicrositeOrganizationMappingFactory.create(microsite=self.microsite, organization='TestMicrositeX')
import salt.ext.six as six
import salt.ext.six as six if six.PY3: import ipaddress else: import salt.ext.ipaddress as ipaddress
import salt.ext.six as six
return (name, kwargs)
if not self._value_labels_read: self._read_value_labels() return self.value_label_dict
elif existing['code'] == 404:
return parse(out)
return cls.objects.filter(registration_code__code=course_reg_code).exists()
from __future__ import absolute_import import json
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'ec2', vm_['profile'], vm_=vm_) is False: return False
raise ValueError('Bad rule name requested: %s.' % name)
if instance.state == CourseCreator.PENDING: send_admin_notification.send( sender=sender, user=instance.user )
line_reader = StringIO(source).readline for toknum, tokval, _, _, _ in tokenize.generate_tokens(line_reader): yield toknum, tokval
Group.objects.all().delete() for i in range(objects_count): Group.objects.create(name='test band')
return int(label.split(' (')[1].split(')')[0])
start = datetime(2010, 1, 1) end = datetime(2013, 1, 27)
'ENABLE_STUDENT_HISTORY_VIEW': True,
if categories is None: category_match = True else: for category in update.Categories: if category.Name in categories: category_match = True
__virtualname__ = 'shadow'
graded = False
email = staff.email password = 'test' self.login(email, password) self.enroll(self.course, verify=True)
self.assertNotContains(resp, self.ext_user.email)
if self.number == self.paginator.num_pages: return self.paginator.count return self.number * self.paginator.per_page
ret.setdefault('updated tags', []).append(ref_name)
from pylearn2.utils import utlc
properties_current = __salt__['zpool.get'](name)[name]
api.set_credit_requirement_status(username, self.course_key, "grade", "grade", status="failed") self.assert_grade_requirement_status('failed', 0)
import salt.utils
XML_IMPORT_ARGS = inspect.getargspec(XmlImportData.__init__).args
from __future__ import unicode_literals
from __future__ import absolute_import try: import iptc IPTC_IMPORTED = True except ImportError: IPTC_IMPORTED = False
for B in combinations(features, k): for b in product(*[values[B[j]] for j in range(k)]): mask_b = np.ones(n_samples, dtype=np.bool)
MESSAGE = _('Unable to get git log')
from __future__ import unicode_literals
import integration
completed_funcs = []
course_programs = _get_course_programs(user, [enrollment.course_id for enrollment in course_enrollments])
import salt.ext.six as six import salt.utils from salt.ext.six import string_types from salt.exceptions import CommandExecutionError import salt.utils.systemd import string
context['last_accessed_courseware_url'] = None if SelfPacedConfiguration.current().enable_course_home_improvements: context['last_accessed_courseware_url'] = get_last_accessed_courseware(course, request, user)
self.assertFalse(transaction.get_rollback()) transaction.set_rollback(True)
cloud_downtime = random.randint(0, opts.splay) print('Sleeping random period before calling salt-cloud: {0}'.format(cloud_downtime)) time.sleep(cloud_downtime)
result = to_datetime(df.astype(str)) assert_series_equal(result, expected)
self.assertIsNot(field1, ModelChoiceForm.base_fields['category']) self.assertIs(field1.widget.choices.field, field1)
rexp = re.compile('(?m)^ [*|-] ' r'([^ ].*)[\r\n].*\(([^\)]+)')
ret['result'] = True ret['comment'] = 'vm {0} is absent'.format(name)
z = self.sample_from_p_z(num_samples=num_samples, **kwargs) theta = self.decode_theta(z) X = self.sample_from_p_x_given_z(num_samples=num_samples, theta=theta)
raise NotImplementedError
troy = SpecialClient.objects.select_related('state').defer('value', 'state__name').get(name='Troy Buswell')
return self.output_space
if clear_load['fun'] != 'saltutil.find_job': log.warning( 'Authentication failure of type "token" occurred.' ) return ''
if '.' not in hextets[index]: hextets[index] = hextets[index].lstrip('0') if not hextets[index]: hextets[index] = '0'
mock_stop = MagicMock() with patch.object(parallels, 'prlctl', mock_stop): parallels.stop(name, runas=runas) mock_stop.assert_called_once_with('stop', [name], runas=runas)
return None
return self.find_css("#start_time").first.attrs('value')[0]
world.clear_courses()
test_data = state_run['cmd_|-test_non_failing_state_|-echo "Should not run"_|-run']['comment'] expected_result = 'State was not run because onfail req did not change' self.assertIn(expected_result, test_data)
self.reset_tracker() different_client = APIClient() different_client.login(username=different_user.username, password=TEST_PASSWORD) response = different_client.delete(self.url) self.check_response(response, 404)
CourseEnrollmentFactory(user=self.student, course_id=self.course.id)
return GeoIP_record_by_addr(self._city, c_char_p(enc_query))
y1 = np.array([[0, 1, 1], [1, 0, 1]]) y2 = np.array([[0, 0, 1], [1, 0, 1]])
urlpatterns = ( '',
'openedx.core.djangoapps.api_admin',
'pillar_source_merging_strategy': str,
if user: os.chown(ssh_dir, uinfo['uid'], uinfo['gid']) os.chmod(ssh_dir, 0o700)
course_page = self._goto_staff_page() course_page.set_staff_view_mode_specific_student(student_a_username) verify_expected_problem_visibility(self, course_page, [self.alpha_text, self.everyone_text])
latex_logo = "logos/scikit-learn-logo.png"
do_utc = False do_zone = False
self._is_valid_integer(key, axis)
import os import re import sys import tempfile import ast from pandas.compat import zip, range, map, lmap, u, cStringIO as StringIO import warnings
if tz is not None: result = result.tz_localize('UTC').tz_convert(tz) return result
ret = self.run_state('ssh_known_hosts.present', test=True, **kwargs) self.assertSaltNoneReturn(ret)
locator = course.location.map_into_course(CourseLocator(version_guid=previous_version)) self.assertTrue( modulestore().has_item(locator), "couldn't find in %s" % previous_version )
self.course_info_page.visit() self.tab_nav.go_to_tab('Course') acid_block = AcidView(self.browser, '.xblock-student_view[data-block-type=acid]') self.validate_acid_block_view(acid_block)
components = sp.csr_matrix((data, indices, indptr), shape=(n_components, n_features))
return self._validation_paragraph('not-configured').present
if feature_names is None: feature_names = [str(i) for i in range(gbrt.n_features)] elif isinstance(feature_names, np.ndarray): feature_names = feature_names.tolist()
self._assert_can_reverify()
class BandAdmin(ModelAdmin): fields = ['name', 'bio'] exclude = ['bio']
skip_if_no_sklearn() mapping = {'dataset_iterator': 'StratifiedDatasetShuffleSplit'} test_yaml = test_yaml_dataset_iterator % mapping trainer = yaml_parse.load(test_yaml) trainer.main_loop()
with super(CreateThreadUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
self._producer = producer self._empty = False self._leftover = b'' self.length = length self.position = 0 self._remaining = length self._unget_history = []
self._verify_editable(self._get_course_details_response(False))
result = sparse[sparse % 2 == 1] exp = orig[orig % 2 == 1].to_sparse() tm.assert_sp_series_equal(result, exp)
from __future__ import absolute_import
pass
if self.columns.is_unique:
for key, val in data.iteritems():
with closing(uploaded_file):
from __future__ import absolute_import
from __future__ import absolute_import import socket
self.df = DataFrame(np.random.randn(10000, 50)) self.df.to_csv('__test__.csv')
from __future__ import unicode_literals
return '{tabpanel_id} {css}'.format(tabpanel_id=getattr(self, 'tabpanel_id', ''), css=css)
from salt.states import kapacitor
jane = Author(name="Jane") with self.assertRaises(ImportError): serializers.serialize("yaml", [jane])
r'\[([A-f0-9:\.]+)\]\Z', re.IGNORECASE)
widget = TrueCheckbox
self.addEnterDeed("TestOptsSetupMaster") self.addEnterDeed("SaltRaetManorLaneSetup") self.addEnterDeed("PresenterTestSetup") act = self.addRecurDeed("SaltRaetPresenter")
self._assert_cert_status({ 'description': 'honor', 'status': 'started' })
split_test = self._update_partition_id(0) self.assertEqual(2, len(split_test.children)) initial_vertical_0_location = split_test.children[0] initial_vertical_1_location = split_test.children[1]
server_port = 4567 self.server_url = 'http://127.0.0.1:%d' % server_port
self.assertFalse(glusterfs.delete_volume('Newvolume3'))
self._dict = {}
ROLE = 'sales_admin' def __init__(self, *args, **kwargs): super(CourseSalesAdminRole, self).__init__(self.ROLE, *args, **kwargs)
Article.objects.filter(pk=a.pk).delete()
submissions_score_set_handler(None, **SUBMISSION_SET_KWARGS) self.get_user_mock.assert_called_once_with('anonymous_id')
self._mixin_after_parsed_funcs.append(self.__setup_extended_logging) self._mixin_after_parsed_funcs.append(self._setup_mp_logging_listener) self._mixin_after_parsed_funcs.append(self.__setup_console_logger)
from __future__ import absolute_import
salt.utils.cloud.bootstrap(vm_, __opts__)
'openedx.core.djangoapps.content.course_overviews', 'openedx.core.djangoapps.content.course_structures', 'lms.djangoapps.course_blocks',
self.assertEqual(counter.value, 0) self.assertEqual(pool._job_queue.qsize(), 1)
pairwise = True if pairwise is None else pairwise
INTERNAL_IPS = []
numpydoc.setup(app, get_doc_object)
ret[minion] = data['full_ret']
items = store.get_items(course.id, settings={'group_access': {'$exists': True}}) return GroupConfiguration._get_content_groups_items_usage_info(course, items)
dummy5 = _('This literal should be included.')
@python_2_unicode_compatible class Entry(models.Model): name = models.CharField(max_length=10) topics = models.ManyToManyField(Tag) related = models.ManyToManyField(Tag, related_name="similar")
import salt.crypt import salt.utils.event import salt.payload import salt.transport import salt.ext.six as six
self._state = threading.local() self._state.data = None self.global_data = {}
obj = SelfRefChild.objects.create(child_data=37, parent_data=42) obj.delete()
ret = __salt__['k8s.label_present'](name, value, node, apiserver)
comment, passed, retries = _download(quidditch, retries) if not passed: return (comment, str(passed))
import yaml
self.login_student() self.assertEqual(self.get_progress_detail(), u'2/2')
batch = _undo_op(batch, 'Cast')
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
y = np.zeros(n_eval) if eval_MSE: MSE = np.zeros(n_eval)
self.assertReturnNonEmptySaltType(ret) for state_id, state_result in six.iteritems(ret): self.assertSaltTrueReturn(dict([(state_id, state_result)]))
__opts__ = { 'pepa_roots': { 'base': '/srv/salt' }, 'pepa_delimiter': '..', 'pepa_validate': False }
class UserRegistration(Form): username = CharField(max_length=10, label=None) password = CharField(widget=PasswordInput)
response = self.client.get(self.get_change_url()) self.assertEqual(response.status_code, 200)
from salt.states import pkgng
return reverse_func(self.type, args=[course.id.to_deprecated_string(), self.url_slug])
for k in upd: dest[k] = upd[k]
self.assert_user_setting_event_emitted( setting='profile_image_uploaded_at', old=old, new=new )
'origin': 'git@github.com:MITx/content-mit-6002x.git',
self.assertRaises(TypeError, Int64Index, 5)
if os.path.isfile(cache_file): cache_file_mtime = os.path.getmtime(cache_file) else: cache_file_mtime = 0
binary_metric = (lambda y_true, y_score, average="macro": _average_binary_score( precision_score, y_true, y_score, average)) _check_averaging(binary_metric, y_true, y_pred, y_true_binarize, y_pred_binarize, is_multilabel=True)
self.df = self.df[self.df['key2'] > 1]
python_domain.PythonDomain.indices = []
arr = a.astype('U').astype(object) self.assertTrue(lib.max_len_string_array(arr), 3)
print("--- Sparse matrices")
cohort_a = CohortFactory.create(course_id=course.id, name=u'Cohørt A', users=[user_a]) CourseUserGroupPartitionGroup( course_user_group=cohort_a, partition_id=cohort_scheme_partition.id, group_id=cohort_scheme_partition.groups[0].id ).save()
if not os.path.exists(TMP_JID_DIR): os.makedirs(TMP_JID_DIR)
if indexnamerow: coffset = len(indexnamerow) - len(columns) index = index.set_names(indexnamerow[:coffset])
err = Exception mock_index_dictionary.return_value = err
self.refund_window_microseconds = int(refund_window.total_seconds() * 1000000)
from __future__ import absolute_import, print_function import os import sys import types import signal import getpass import logging import optparse import traceback import yaml from functools import partial
if len(labels & ser.index): ser = ser.reindex(labels) else: broadcast.append((n, len(labels)))
preprocessor = ZCA(filter_bias=0.0, n_components=3) preprocessed_X = self.get_preprocessed_data(preprocessor)
import salt.utils import salt.utils.mac_utils from salt.exceptions import SaltInvocationError
import integration import salt.utils
self.centroids_ = self.init_centroids_[:n_samples + 1, :] self.squared_norm_ = self.init_sq_norm_[:n_samples + 1]
response = self.client.get('/login_protected_method_view/') self.assertRedirects(response, '/accounts/login/?next=/login_protected_method_view/')
return dom.reset(0) == 0
"original_usage_version": None, "descendants": [],
if not user_partitions: return
students = self._create_students(5)
from salt.utils.winservice import Service, instart import salt import salt.defaults.exitcodes
ts = self.ts.copy() ts[::2] = np.NaN
self._submit_photos(face_image=self.IMAGE_DATA)
X, y = make_classification(n_samples=200, n_features=20, n_informative=3, n_redundant=2, n_repeated=0, n_classes=8, n_clusters_per_class=1, flip_y=0.0, class_sep=10, shuffle=False, random_state=0)
return result
from __future__ import absolute_import import os
centos7-2-iad-rackspace: provider: rackspace-iad size: general1-2 snapshot: <cinder snapshot id>
from __future__ import unicode_literals
self.assertEquals(len(mail.outbox), 3)
self._closed_captions_visibility(True)
T = column_or_1d(T) return 1. / (1. + np.exp(self.a_ * T + self.b_))
field_notes.append("Field renamed because it contained more than one '_' in a row.")
from __future__ import unicode_literals
try: import redis HAS_REDIS = True except ImportError: HAS_REDIS = False
from salttesting import TestCase, skipIf from salttesting.mock import ( mock_open, MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
self.position = position
self.loc[index, col] = value self._item_cache.pop(col, None)
assert_raises(ValueError, clf.fit(X_, y_).predict, rng.random_sample((3, 12)))
import salt.ext.six as six
if isinstance(basedir, six.string_types): basedir = [x.strip() for x in basedir.split(',')]
self.assertEqual(self.run_function('xattr.list', [TEST_FILE]), {})
X, y = make_regression(n_samples=200, n_features=20, n_informative=5, shuffle=False, random_state=0, noise=10)
return bool(os.stat( os.path.join('/etc/init.d', name)).st_mode & stat.S_IXUSR)
import logging
cr_ec2 = MockEC2() cr_ec2.user_id = user_id return [cr_ec2]
value = value.lstrip('@')
command = self.command.Command() return command.handle(*args, **kwargs)
self.assertEqual(p.centroid, pnt.centroid.tuple)
from __future__ import absolute_import, print_function import os.path import logging
continue
self.assertEqual(self.team_page.team_name, self.team['name']) self.assertTrue(self.team_page.edit_team_button_present)
CourseEnrollmentFactory(user=self.student, course_id=self.course.id)
pw_group.__grains__ = {} pw_group.__salt__ = {} pw_group.__context__ = {} pw_group.grinfo = {}
if self.in_atomic_block: raise TransactionManagementError( "This is forbidden when an 'atomic' block is active.")
def obj_func(theta, eval_gradient=True): if eval_gradient: lml, grad = self.log_marginal_likelihood( theta, eval_gradient=True) return -lml, -grad else: return -self.log_marginal_likelihood(theta)
return int(value) % int(arg) == 0
sys.path.insert(0, os.path.join( virtualenv.path_locations(env)[1], 'site-packages'))
info_repr_option = (get_option("display.large_repr") == "info") return info_repr_option and not (self._repr_fits_horizontal_() and self._repr_fits_vertical_())
if url is None: url = cls._get_message_url_path_from_db(course_key, access_point) cache.set(cache_key, url)
return ret
url = reverse('course_modes_choose', args=[unicode(self.course.id)]) response = self.client.get(url)
self.correct_responses[name] = self.COMPUTED_ANSWER_CORRECT self.incorrect_responses[name] = self.COMPUTED_ANSWER_INCORRECT
grid_search = GridSearchCV(pipeline, parameters, n_jobs=-1, verbose=1)
return date
self.assert_numpy_array_equal( pd.to_datetime(dts_with_oob, box=False, errors='ignore'), np.array( [dt.item() for dt in dts_with_oob], dtype='O' ) )
salt '*' vsphere.get_ntp_config my.esxi.host root bad-password
estimator = RandomForestRegressor(random_state=0, n_estimators=100) score = cross_val_score(estimator, X_full, y_full).mean() print("Score with the complete dataset = %.2f" % score)
raw = [ ('s1', ('s1_db', ['bravo', 'alpha'])) ]
from salt.states import process
self.set_year_of_birth(current_year - 10) self.profile.save() self.assertFalse(self.profile.has_profile_image)
self.root_block_usage_key = root_block_usage_key
if gated_content and unicode(section.location) in gated_content: continue if section.hide_from_toc: continue
index_sql = connection.schema_editor()._model_indexes_sql(Article) self.assertEqual(len(index_sql), 1)
if isinstance(data.index, DatetimeIndex): freq = getattr(data.index, 'freq', None)
grouped = self.df.groupby('A')
new_group = RandomUserPartitionScheme.get_group_for_user(self.MOCK_COURSE_ID, self.user, user_partition) self.assertEqual(old_group.id, new_group.id)
check(8, False) check(8, True)
self.assertGreater(len(block.children), 0, "meaningless test") moved_child = block.children.pop()
from __future__ import absolute_import
if a.ndim == 0: return idx
return not enabled(name, runas=runas)
def __singleton_init__(self, opts, **kwargs): self.opts = dict(opts)
return cls.objects.filter( username=username, course__enabled=True, deadline__gt=datetime.datetime.now(pytz.UTC) ).select_related('course')
return [ self._load_item( course_key, item, data_cache, using_descriptor_system=using_descriptor_system, apply_cached_metadata=self._should_apply_cached_metadata(item, depth), for_parent=for_parent, ) for item in items ]
self.two_day_delta_str = "2 days"
self.dashboard_page.visit()
return fnd
VERIFIED_MODES = [VERIFIED, PROFESSIONAL]
self.unit_page.xblocks[xblock_index].edit()
after_created = attempt.created_at + timedelta(seconds=1) query = SoftwareSecurePhotoVerification.objects.filter(user=user) result = SoftwareSecurePhotoVerification.verification_for_datetime(after_created, query) self.assertEqual(result, attempt)
if token.contents == 'else': nodelist = parser.parse(('endif',)) conditions_nodelists.append((None, nodelist)) token = parser.next_token()
location = models.CharField(max_length=100) supervillain = models.ForeignKey(SuperVillain, models.CASCADE) def __str__(self): return self.location
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
try: super(ClassDecoratedTestCase, self).test_max_recursion_error() except RuntimeError: self.fail()
self.options.log_file_level = self.config.get(cli_setting_name)
course_outline_page = CourseOutlinePage( self.browser, self.course_org, self.course_number, self.course_run ) course_outline_page.visit() course_outline_page.wait_for_page()
field_type = OGRGeomType(row[2]).django
from salt.modules import service import os
pass
AUTHOR_VIEW = 'author_view'
if xblock_name is None: xblock_name = TestCrowdsourceHinter.XBLOCK_NAMES[0] url = self.get_handler_url(handler, xblock_name) return self.client.post(url, json.dumps(resource), '')
assert_series_equal(timedelta_series - NaT, nat_series_dtype_timedelta) assert_series_equal(-NaT + timedelta_series, nat_series_dtype_timedelta)
snap_ids = _find_guids(info)
extend(state('.start').stateconf.require(stateconf='xxx::goal'))
resource = {"id": self.resource_id, 'reason': ''} self.check_event_response_by_http_status(test_case['handler'], resource, test_case['status'])
self.assertEqual({'k2': 'v2'}, grains['a_custom'])
cache.clear() self.course_key = CourseLocator(org='TestOrg', course='TestCourse', run='TestRun')
bools = np.isnan(self.frame) bools.sum(1) bools.sum(0)
log.warning( 'Minion id {0} is not who it says it is!'.format( load['id'] ) ) return False
for label, clf_err in error_rate.items(): xs, ys = zip(*clf_err) plt.plot(xs, ys, label=label)
obj = self.obj axis = 0 for i, key in enumerate(tup):
self.verify_server_task("studio", options)
from __future__ import absolute_import, with_statement import copy import ctypes import os import re import sys import time import errno import signal import stat import logging import multiprocessing import tempfile import traceback
query = self.q(css='.browse-teams') if query.present: query.first.click() self.wait_for_ajax()
return self._data.internal_values()
self.assertFalse(hasattr(request, '_files'))
self.assertTrue(self.xmodule.verify_oauth_body_sign.called)
if runas: os.seteuid(euid) os.setegid(egid) if exc is not None: raise CommandExecutionError( 'Exception encountered creating zipfile: {0}'.format(exc) )
from salt.states import win_powercfg as powercfg
from salttesting import skipIf, TestCase from salt.exceptions import SaltInvocationError from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, Mock, NO_MOCK, NO_MOCK_REASON, patch )
with modulestore().default_store(ModuleStoreEnum.Type.split): self.course = CourseFactory.create()
try: search = client.saved_searches[name] except KeyError: pass return search
return base64.urlsafe_b64encode(aes_encrypt(data, key))
return Response({"developer_message": developer_message}, status=status_code)
pred = np.argmax(sp_clf.decision_function(iris.data), 1) assert_array_almost_equal(pred, clf.predict(iris.data.toarray()))
from __future__ import absolute_import import logging import os
if xml_path: xml_text = xml_path
return coin_flip()
for device in devices: if not pvdisplay(device): raise CommandExecutionError('Device "{0}" was not affected.'.format(device))
self.aliases[cmd] = value
urlset = doc.firstChild self.assertEqual(urlset.getAttribute('xmlns'), 'http://www.sitemaps.org/schemas/sitemap/0.9')
rng = date_range('3/11/2012', '3/12/2012', freq='30T') self.assertRaises(NonExistentTimeError, rng.tz_localize, self.tz('US/Eastern'))
return False
from datetime import date, datetime
from __future__ import absolute_import, print_function import socket from struct import unpack import pcapy import sys
new_index = _ensure_index(new_index) new_index, indexer = self.axes[axis].reindex(new_index, method=method, limit=limit) return self.reindex_indexer(new_index, indexer, axis=axis, fill_value=fill_value, copy=copy)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
return Response(create_comment(request, request.data))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
break
if reload_items:
assert np.isfinite(data_x).all() assert np.isfinite(data_y).all() assert data_x.shape[0] == data_y.shape[0]
df = df_orig.copy()
'LICENSING': False,
self.course = self.store.get_course(self.course.id)
shifted = self.tsframe.tshift(1) unshifted = shifted.tshift(-1)
self.generated_certificate.invalidate()
self.assertQuerysetEqual( Order.objects.exclude(items__status=1).distinct(), ['<Order: 3>'])
self.suffix_map = {}
from __future__ import unicode_literals
if world.is_css_present('{}.is-shown'.format(saving_mini_css)): world.css_find('{}.is-hiding'.format(saving_mini_css))
return CourseAssetsFromStorage(course_key, doc_id, course_assets['assets'])
self.assert_account_settings_context_looks_correct(account_settings_context(request), user, linked=False) self.assert_social_auth_does_not_exist_for_user(user, strategy)
vmcfg = {} kwargs = salt.utils.clean_kwargs(**kwargs) for k, v in kwargs.iteritems(): vmcfg[k] = v
temp_dir_path = tempfile.mkdtemp() self.addCleanup(shutil.rmtree, temp_dir_path)
ret = __salt__['vsphere.system_info'](host=host, username=user, password=password)
result = ci[:3].append(ci[3:]) tm.assert_index_equal(result, ci, exact=True)
fn = None paths = ('/etc/yum/yum.conf', '/etc/yum.conf') for path in paths: if os.path.exists(path): fn = path break
log.debug('SQL Query: {0}'.format(cmd)) cur.execute(cmd) return True
result = df[['B', 'D']].interpolate(downcast=None) assert_frame_equal(result, df[['B', 'D']])
self.assertContains(response, "<td>Professional</td><td>2</td>")
for resource_id, resource in self.test_recommendations.iteritems(): for xblock_name in self.XBLOCK_NAMES: result = self.call_event('add_resource', resource, xblock_name)
ops.add_flex_arithmetic_methods(Series, **ops.series_flex_funcs) ops.add_special_arithmetic_methods(Series, **ops.series_special_funcs)
required_boto3_version = '1.2.1'
if lib_names: for lib_name in lib_names: lib_path = find_library(lib_name) if lib_path is not None: break
"DELETE FROM i_love_ponies WHERE special_thing LIKE '%Django%';" "DELETE FROM i_love_ponies WHERE special_thing LIKE '%%Ponies%%';" "DROP TABLE i_love_ponies",
from __future__ import absolute_import
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
precompute = np.empty(shape=(n_features, n_features), dtype=X.dtype, order='C') np.dot(X.T, X, out=precompute)
self.q(css=self.EXPAND_COLLAPSE_CSS).click()
with self.assertRaises(TemplateSyntaxError): self.engine.render_to_string('if-tag-single-eq', {'foo': 1})
X, y = _rescale_data(X, y, sample_weight)
def wkt_r(): if not thread_context.wkt_r: thread_context.wkt_r = _WKTReader() return thread_context.wkt_r
if _TRAFFICLINE: cmd = _traffic_line('-U') else: cmd = _traffic_ctl('server', 'start')
try: self._verify_modulestore_support(course_key, method) return True except NotImplementedError: return False
if role is not None: role().add_users(user)
assert_array_equal(clf.predict(T), true_result)
CONFIG_ROOT = path(os.environ.get('CONFIG_ROOT', ENV_ROOT))
all_assets, count = contentstore('trashcan').get_all_content_for_course(self.course.id) self.assertEqual(len(all_assets), 0) self.assertEqual(count, 0)
self.assertTrue(res_deep > res)
nnbrs = NearestNeighbors(algorithm='brute', metric='cosine').fit(X)
if (pip or distribute) and not os.path.exists(venv_setuptools): _install_script( 'https://bitbucket.org/pypa/setuptools/raw/default/ez_setup.py', path, venv_python, user, saltenv=saltenv, use_vt=use_vt )
self.assertEqual(mail.outbox[0].subject, expected_subject)
X = [[2, 1], [3, 1], [1, 3], [2, 3]] y = [0, 0, 1, 1]
import json import logging import random import string
values = Series([u("FOO"), NA, u("bar"), u("Blurg")])
return progress
top_level_logger.setLevel(logging.DEBUG if debug else logging.INFO)
response = self.client.get(self.do_redirect_url) self.assertEqual(response.status_code, 200)
cases = [(fidx1, fidx2), (didx1, didx2)]
unit = self.go_to_unit_page() component = unit.xblocks[1] self.modify_display_name_and_verify(component)
def run_autoencoder( self,
mock_threads.return_value = CommentClientPaginatedResult(collection=[], page=1, num_pages=1)
xblock_actions = {'deletable': True, 'draggable': True, 'childAddable': True} explanatory_message = None
if key: return salt.utils.traverse_dict_and_list(defaults, key, default) else: return defaults
return self._require_oauth_field("client_id")
import os import stat import logging
draft_problem = self.store.get_item(self.problem.location) self.assertTrue(getattr(draft_problem, 'is_draft', False))
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
return errors
self.client.ajax_post( self.seq1_url, data={'isPrereq': False} ) mock_remove_prereq.assert_called_with(self.seq1.location)
from __future__ import unicode_literals
dense[4:, :]
executor = MigrationExecutor(connection)
result._set_as_cached(label, self)
teams_configuration = {} teams_configuration["topics"] = [] if topics is None else topics if max_team_size is not None: teams_configuration["max_team_size"] = max_team_size self.course.teams_configuration = teams_configuration
@property def score(self): raise AttributeError
assert_array_equal(X, Xdigits)
from salt.states import host
scheme_extensions = None
from salt.exceptions import CommandExecutionError import salt.utils
rng = date_range("2012-11-15 00:00:00", periods=6, freq="H", tz="US/Central")
for t in df.itertuples(index=False): str(t)
def __init__(self): super(NullSpace, self).__init__()
return render(request, [], {})
self._clone_test_db(number, verbosity, keepdb)
MODULE_DOCS = __doc__
def __contains__(self, item): return True def __getitem__(self, item): return "notmigrations"
import salt.ext.six as six
debian_service.__grains__ = {} debian_service.__salt__ = {} debian_service.__context__ = {} debian_service.__opts__ = {}
mode = __salt__['config.manage_mode']('0600') owner, group, crontab_dir = _get_cron_info()
df = pd.DataFrame({'X': [1, 2, 3, 4], 'Y': list('aabb')}, index=list('ABCD'))
'openedx.core.djangoapps.self_paced',
import salt.modules.blockdev as blockdev import salt.utils
break
return [func(self.ptr, i) for i in range(len(self))]
if sig0[0] != '\x00': raise Exception('Number of unused bits is strange') sig = sig0[1:]
return [x for x in _services if _service_is_sysv(x)]
dog_stats_api.histogram( 'DjangoXBlockUserStateClient.{}'.format(evt_name), value, timestamp=evt_time, sample_rate=self.API_DATADOG_SAMPLE_RATE, )
rng = np.random.RandomState(0) n_samples, n_features = 500, 2
config = cls.current() if not config.enabled: return False return block_type in config.disabled_blocks.split()
return response
if not locale_info['charmap'] and not on_ubuntu: locale_info['charmap'] = locale_info['codeset'] locale = salt.utils.locales.join_locale(locale_info)
if params is None: params = {} data = copy(self.defaults) data.update(params) return self.request_body_xml_template.format(**data)
avg_weights = None
if self.n >= 0: nb_offset = 1 else: nb_offset = -1 self.next_bday = CustomBusinessDay(n=nb_offset, weekmask=weekmask, holidays=holidays, calendar=calendar)
log = logging.getLogger(__name__)
import os import re import shutil import logging
from __future__ import unicode_literals
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'rackspace', vm_['profile'], vm_=vm_) is False: return False
new_mgr = selfsorted._data.reshape_nd(axes=new_axes, labels=[major_labels, minor_labels], shape=shape, ref_items=selfsorted.columns)
class ContactForm(Form): subject = CharField() message = CharField(widget=Textarea)
old_name = None if "name" in update: old_name = existing_user_profile.name
visit_scenario_item('SECTION')
for name in names: ret[name] = '' pkgs = list_pkgs(versions_as_list=True) repo = ['-o', 'APT::Default-Release={0}'.format(fromrepo)] \ if fromrepo else None
for i, species in enumerate([BV_bunch, MM_bunch]): print("_" * 80) print("Modeling distribution of species '%s'" % species.name)
with tm.assert_produces_warning(FutureWarning): result_add = rng + other result_union = rng.union(other)
gp.fit(X, y)
@skipIfDBFeature('allows_auto_pk_0') def test_zero_as_autoval(self): with self.assertRaises(ValueError): models.Square.objects.create(id=0, root=0, square=1)
empty_strings_allowed = True empty_values = list(validators.EMPTY_VALUES)
if not isinstance(config, dict): return False, ('Configuration for diskusage beacon ' 'must be a dictionary.') return True, 'Valid beacon configuration'
self.assertEqual(len(httpretty.httpretty.latest_requests), count)
self.dataset_remote_dir = "" self.dataset_local_dir = ""
return EmptyPromise( lambda: self.q(css='#replace-courselike-button')[0], "Upload button appears", timeout=30 ).fulfill()
self.assertIn('/gitlogs/MITx/edx4edx/edx4edx', response.content)
geom2 = OGRGeometry(wkb) self.assertEqual(geom1, geom2)
course_url = u'/course/{}'.format(unicode(self.course.id)) self.assertEqual(xblock_studio_url(self.course), course_url)
Book.objects.get(title='Pro Django')
assign_srs = void_output(lgdal.OGR_G_AssignSpatialReference, [c_void_p, c_void_p], errcheck=False) get_geom_srs = srs_output(lgdal.OGR_G_GetSpatialReference, [c_void_p])
indexer_obj = Series(indexer_obj, self.tsframe.index)
assert_raises(ValueError, plot_partial_dependence, clf, X, [-1])
for user in users: get_cohort(user, self.course.id)
res_val = df.get_value("j", "cats") self.assertEqual(res_val, exp_val)
return super_float("".join(parse_result))
params = self._signed_callback_params(self.order.id, self.COST, "abcd") params['decision'] = u'CANCEL' result = process_postpay_callback(params)
import salt.ext.six as six
Y = np.dot(D, X)
profile = self.user.profile.__class__.objects.get(user=self.user) self.assertEqual(profile.has_profile_image, has_profile_image)
if modules_max_memory is True: resource.setrlimit(resource.RLIMIT_AS, old_mem_limit) self.module_refresh.value = False
order_by.extend(self.find_ordering_name( field, self.query.get_meta(), default_order=asc))
self._configure_course()
d = Series(np.random.randn(5)) x = d.rolling(window=2).skew() tm.assert_series_equal(all_nan, x)
student = require_student_from_identifier(request.GET.get('student')) course = get_course_by_id(SlashSeparatedCourseKey.from_deprecated_string(course_id)) return JsonResponse(dump_student_extensions(course, student))
self._submit_photos( face_image=self.IMAGE_DATA + "9999", photo_id_image=self.IMAGE_DATA + "1111", ) two_photo_reverification_data = self._get_post_data()
class CookieSessionTests(SessionTestsMixin, unittest.TestCase):
pending_change = PendingEmailChange.objects.filter(user=self.user) self.assertEqual(0, len(pending_change))
result = first.difference(first) self.assertEqual(len(result), 0) self.assertEqual(result.name, first.name)
raise NotImplementedError
with self.assertRaises(ctypes.ArgumentError): g.buffer(width, float(quadsegs))
self.run_validators(value) return qs
if not string.islower(): raise ValidationError(_(u"This value must be all lowercase."))
xblock = self.store.create_item( self.user_id, test_course.id, 'vertical', block_id='test_vertical' )
return True
return [OGRFieldTypes[capi.get_field_type(capi.get_field_defn(self._ldefn, i))] for i in range(self.num_fields)]
comps[1] = comps[1].lstrip('"').rstrip('"')
self.assertTrue(formset.is_valid()) formset.save() self.assertEqual(UserSite.objects.count(), 0)
code = "a = 0\n" + ("a += 1\n" * 12345)
globalpath = os.path.join( os.path.dirname(upath(sys.modules[settings.__module__].__file__)), 'locale') return [globalpath] + list(settings.LOCALE_PATHS)
return u"verification.{}.{}".format(user_id, unicode(course_key))
return self._validation_paragraph('error').present
return self.get_selector('div.certificate-invalidation-container table tr:last-child td')
assert_equal(var_x, std_x * std_x)
y_pred = clf.classes_.take(y_proba.argmax(axis=1), axis=0) assert_array_equal(y_pred, true_result)
A = np.abs(random_state.randn(10, 10)) A[:, 2 * np.arange(5)] = 0
microsite = Microsite.get_microsite_for_domain(domain)
with remove_ccx(course_key) as (course_key, restore): return restore(self._modulestore.create_item( user_id, course_key, block_type, block_id=block_id, fields=fields, **kwargs ))
self.assertEqual( course_overview.image_urls, { 'raw': expected_url, 'small': expected_url, 'large': expected_url, } ) return course_overview
response = requests.get(self.url) self.assertEqual(response.status_code, 400)
s = Series(['bd asdf jfg', 'kjasdflqw asdfnfk'])
with tm.assertRaises(gbq.TableCreationError): gbq.to_gbq(df, destination_table, PROJECT_ID, if_exists='fail')
def put(self, *args, **kwargs): return self.post(*args, **kwargs)
result = df.drop_duplicates(['C', 'B']) expected = df.ix[[0, 1, 2, 4]] tm.assert_frame_equal(result, expected)
from __future__ import absolute_import import copy
from __future__ import absolute_import
expected = self.ne.evaluate('nlhs {0} ghs'.format(op)) tm.assert_numpy_array_equal(result.values, expected)
return self._cohort_count( self._get_cohort_options().filter(lambda el: el.is_selected()).first.text[0] )
with self.assertRaises(Http404): get_list_or_404(a1.article_set, title__icontains="Shrubbery")
context = { "request": get_request_or_stub() }
center2 = models.PointField(srid=2276, db_column='mycenter') border1 = models.PolygonField() border2 = models.PolygonField(srid=2276)
self.assertIsNotNone(self.request.session)
from salt.modules import at
self.data = OrderedDict()
sparse = self.dense1.to_sparse(fill_value=0) sparse3 = self.dense3.to_sparse(fill_value=0)
if groups[-1] != ln: groups.append(ln)
self.student_answers = dict() self.correct_map = CorrectMap() self.done = False
GeneratedCertificateFactory.create( user=self.user, course_id=self.course.id, status=CertificateStatuses.downloadable, mode='honor' )
if include_self: query = X._fit_X else: query = None return query
y_true[np.where(y_true == 0)] = -1 y_true_copy = y_true.copy() _test_precision_recall_curve(y_true, probas_pred) assert_array_equal(y_true_copy, y_true)
enable_self_generated_certs.delay(unicode(course_key))
STUDENTMODULEHISTORYEXTENDED_OFFSET = ENV_TOKENS.get( 'STUDENTMODULEHISTORYEXTENDED_OFFSET', STUDENTMODULEHISTORYEXTENDED_OFFSET )
inspect_image(image)
Number.objects.filter(pk=self.n.pk).update(integer=F('integer').bitand(56))
cmd += '{0}'.format(pkg2inst)
course_id = CourseKeyField(max_length=255, db_index=True)
cls.live_server_url_test = [cls.live_server_url]
from __future__ import unicode_literals
f = lambda x: ((x.T - x.mean(1)) / x.std(1)).T
__func_alias__ = { 'set_': 'set' }
self.get_selector('#invalidate-certificate').click()
self.assertFalse(self.creator_admin.has_add_permission(self.request))
return router
X_composite = mlp_composite.get_input_space().make_theano_batch() X_first_part = mlp_first_part.get_input_space().make_theano_batch() X_second_part = mlp_second_part.get_input_space().make_theano_batch()
_context.update({ 'base_asset_url': StaticContent.get_base_url_path_for_course_assets(self.location.course_key), 'enable_latex_compiler': self.use_latex_compiler, 'editor': self.editor }) return _context
return super(NullBackend, self).get_template_path(relative_path, **kwargs)
with self.assertRaises(AttributeError): setattr(self.a, 'full_name', 'Paul McCartney')
def f(): s[l]
def check(result, expected): str(result) result.dtypes assert_frame_equal(result, expected)
% widget.pk
user = self.create_user_and_enroll('verified')
y = rng.randn(n_samples) r.fit(x, y) assert_equal(r.cv_values_.shape, (n_samples, n_alphas))
self.assertTrue(self.user.roles.filter(name="Student", course_id=self.course_key))
import salt.ext.six as six try: import boto import boto.rds2 logging.getLogger('boto').setLevel(logging.CRITICAL) HAS_BOTO = True except ImportError: HAS_BOTO = False
res = dfmix.copy() res.replace(regex=r'\s*\.\s*', value=nan, inplace=True) assert_frame_equal(dfmix, res.fillna('.'))
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, mock_open, patch, call, NO_MOCK, NO_MOCK_REASON )
if object_domain is not None: protocol = request.scheme return http.HttpResponseRedirect('%s://%s%s' % (protocol, object_domain, absurl)) else: return http.HttpResponseRedirect(absurl)
self.load_courses()
return compare_with_tolerance( evaluator({}, {}, ans1), evaluator({}, {}, ans2), self.tolerance )
result_count = paginator.count
tm.skip_if_no_ne('numexpr') df = DataFrame(np.random.randn(5, 2), columns=list('ab'))
return self._maybe_mask_results(_algos.arrmap_object( self.asobject.values, lambda x: np.nan if x is tslib.NaT else x.time()))
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, requires_system_grains ) ensure_in_syspath('../../')
__virtualname__ = 'etcd'
del self.origin del self.error_message self.__class__ = Node
y = np.linspace(0, resolution - 1, resolution) first_quarter = y < resolution / 4 y[first_quarter] = 3. y[np.logical_not(first_quarter)] = -1.
return self._global_actions[name]
assert_array_almost_equal(linkage_X_ward[:, 2], out_X_unstructured[4]) assert_array_almost_equal(linkage_X_ward[:, 2], out_X_structured[4])
for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue
return ItemFactory.create( parent_location=parent.location, category="problem", display_name="Group {} Sees This Problem".format(group), data="<h1>No Problem Defined Yet!</h1>", )
xblocks = self._get_nested_xblocks(self) if category: xblocks = [x for x in xblocks if x.category == category] return xblocks
raise ItemNotFoundError(course_key)
if not isinstance(course_key, CCXLocator): send_ccx_course_published.delay(unicode(course_key))
{% set port = 6379 %}
ContentType.objects.clear_cache()
if hasattr(os.path, 'samefile'): try: return os.path.samefile(src, dst) except OSError: return False
with self.assert_logged('SafeCookieData BWC parse error'): yield
self.assertRedirects(response, 'http://testserver/permanent_redirect_view/')
import logging
comps = file_name.split('/') file_path = '/'.join(comps[:-1]) if not os.path.exists(file_path): os.makedirs(file_path)
pmap[alias][driver] = []
cursor.close()
if k == 'values': continue if k not in q: raise ValueError( "min_itemsize has the key [%s] which is not an axis or " "data_column" % k)
continue
view = super(AtomicMixin, cls).as_view(**initkwargs) return cls.create_atomic_wrapper(view)
import logging
log.warning("Asset's course {} does not match other assets for course {} - not saved.".format( asset_md.asset_id.course_key, course_key )) continue
message = msg_format.format( action=action_name, succeeded=num_succeeded, attempted=num_attempted, total=num_total, skipped=num_skipped, student=student ) return (succeeded, message)
if not settings.FEATURES['AUTH_USE_CERTIFICATES']: return HttpResponseForbidden()
if any([salt.utils.is_true(kwargs.get(x)) for x in ('removed', 'purge_desired')]): return {}
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
session.create = lambda: None session.load()
if getattr(xblock, "in_entrance_exam", False): xblock_info["is_header_visible"] = False
try: matches = CONTENT_RE.search(request.META["HTTP_CONTENT_RANGE"]) content_range = matches.groupdict()
keep_lazy(HttpResponse), keep_lazy_text, lazy,
chapter_aside.data_field = 'new value' self.store.update_item(new_chapter, self.user_id, asides=[chapter_aside])
METRIC_UNDEFINED_MULTICLASS = [ "brier_score_loss", "matthews_corrcoef_score", ]
reg_code = CourseRegistrationCode.objects.get(code=reg_code.code) self.assertEqual(reg_code.is_valid, False)
calls = []
with self.assertRaises(Http404): get_object_or_404(Article.objects.none(), title__contains="Run")
d = self._decision_function(X) y_pred = self.classes_.take(d.argmax(1)) return y_pred
pass
data = compressor.flush() if data: out.write(data)
if backup is not False: shutil.copy2(path, '{0}{1}'.format(path, backup))
return (to_datetime(col, errors='coerce') .astype('datetime64[ns, UTC]'))
__func_alias__ = { 'apply_': 'apply' }
r = HttpResponse() r.set_cookie("a:.b/", 1) self.assertEqual(len(r.cookies.bad_cookies), 1)
yield super(SharedModuleStoreTestCase, cls).setUpClass()
values = self.mixed_int.as_matrix(['A', 'B', 'C']) self.assertEqual(values.dtype, np.int64)
validated_lti_params = self.get_validated_lti_params(self.strategy)
import logging import re
assert_array_equal(clf.apply(X), clf_2.apply(X))
import salt.config import salt.loader from salt.modules import boto_lambda from salt.exceptions import SaltInvocationError
from __future__ import division
cur_mend = self.m_offset.rollforward(other) cur_cmend = self.cbday.rollback(cur_mend)
ref_kml_regex = re.compile(r'^<Point><coordinates>-95.363\d+,29.763\d+,18</coordinates></Point>$') self.assertTrue(ref_kml_regex.match(h.kml))
standard_scaler = StandardScaler() Xtr_s = standard_scaler.fit_transform(X_train) Xte_s = standard_scaler.transform(X_test)
import salt.utils
import os
result = f.clean('1:30 PM') self.assertEqual(result, time(13, 30, 0))
self.assertEqual( len(Note.objects.order_by('extrainfo__info').distinct()), 3 )
from config_models.models import cache from embargo.models import IPFilter from embargo.forms import RestrictedCourseForm, IPFilterForm
pnt = Point(0, 0) self.assertEqual(0.0, pnt.length)
from __future__ import absolute_import import os import os.path import tempfile
self._submit_photos( face_image=self.IMAGE_DATA + "4567", photo_id_image=self.IMAGE_DATA + "8910", ) initial_data = self._get_post_data()
from __future__ import absolute_import import collections import fnmatch import os
index_path = reverse('admin:index', current_app=self.name) return HttpResponseRedirect(index_path)
def has_delete_permission(self, request, obj=None): return False
add_period = lambda x: '.' + x return map(add_period, cls.current().excluded_extensions.split())
return finders.FileSystemFinder().find(path)
value = None
url( r'^courses/{}/lti_rest_endpoints/'.format( settings.COURSE_ID_PATTERN, ), 'courseware.views.views.get_course_lti_endpoints', name='lti_rest_endpoints', ),
parser.skip_past('endcomment') return CommentNode()
self.make_course(pdf_textbooks=[PDF_BOOK]) with self.assertRaises(NoReverseMatch): self.make_url('pdf_book', book_index='fooey', chapter=1)
@ddt.data(*flatten(CONTAINER_XMODULES))
microsite.set_by_domain(self.microsite.site.domain) self.assertEqual( microsite.get_all_orgs(), set(self.microsite.get_organizations()) )
mean_dist = np.mean(pairwise_distances(query, X, metric='cosine')) neighbors = lshf.radius_neighbors(query, radius=mean_dist, return_distance=False)
log = logging.getLogger(__name__)
try: salt.utils.gitfs.GitPillar(__opts__) return __virtualname__ except FileserverConfigError: pass
with self.assertRaises(TemplateSyntaxError): Variable("article._hidden")
boston = datasets.load_boston() perm = rng.permutation(boston.target.size) boston.data = boston.data[perm] boston.target = boston.target[perm]
dbkey['run'] = _id_field['run']
youtube_id = deserialize_field(cls.youtube_id_1_0, pieces[1]) ret[speed] = youtube_id
return set(JIRA_RE.findall(text))
small_width = models.IntegerField(default=375) small_height = models.IntegerField(default=200)
self.assertBlockHasContent(child_usage_key, 'data', child_data)
if isinstance(value, Iterator): value = list(value) self.check_related_objects(field, value, opts)
return False
return professional_mode if professional_mode else verified_mode
X_train = np.array([[0, 0, 0], [1, 1, 1]]) y_train = [0, 1]
token = self.auth.mk_token(creds) if 'token' not in token: raise cherrypy.HTTPError(401, 'Could not authenticate using provided credentials')
mock = MagicMock(return_value=True) with patch.object(composer, '_valid_composer', mock): self.assertRaises(SaltInvocationError, composer.install, None)
df_grouped.apply(lambda x: noddy(x.value, x.weight))
message = self.q(css='div.wrapper-msg') if message.present: return message.text[0] return None
cond = np.logical_or(y == i, y == j) y = y[cond] y_binary = np.zeros_like(y) y_binary[y == j] = 1 return _partial_fit_binary(estimator, X[cond], y_binary)
response = method("/request_data/?foo=whiz") self.assertEqual(response.context['get-foo'], 'whiz')
self._assert_num_requests(1)
world.disable_jquery_animations()
for name, Tree in CLF_TREES.items(): clf = Tree(random_state=0)
outcomes, __ = OutcomeService.objects.get_or_create( lis_outcome_service_url=result_service, lti_consumer=lti_consumer )
vect = HashingVectorizer(analyzer='char', non_negative=True, binary=True, norm=None, dtype=np.float64) X = vect.transform(test_data) assert_equal(X.dtype, np.float64)
response = self.get_response(request)
return Env.BOK_CHOY_CACHE.set('test', 'test')
data_specs[0].np_validate(data) assert not [contains_nan(X) for X in data] raise NotImplementedError()
value = loader.construct_scalar(node) return float(value)
else: return HttpResponse(status=405)
if __opts__['test']: ret['comment'] = 'SELinux mode is set to be changed to {0}'.format( tmode) ret['result'] = None return ret
super(SupportViewCertificatesTests, self).setUp() SupportStaffRole().add_users(self.user)
_version_ary = __version__.split('.') CUR_VER = SaltStackVersion(_version_ary[0], _version_ary[1]) BORON = SaltStackVersion.from_name('Boron')
from salt.ext.six import string_types
self.assertEqual(module.attempts, 0)
data = _cast_to_stata_types(data)
data = { "form-TOTAL_FORMS": "1", "form-INITIAL_FORMS": "1", "form-MAX_NUM_FORMS": "0",
'unsubmitted': 'unanswered', 'incomplete': 'incorrect', 'queued': 'processing',
self.assertIsNone(getattr(self.request, 'session', None))
class PostDeleteHandler(object): def __init__(self, data): self.data = data
creation_counter = 0
try: validate_uploaded_image(uploaded_file) except ImageValidationError as error: return Response( {"developer_message": error.message, "user_message": error.user_message}, status=status.HTTP_400_BAD_REQUEST, )
from salttesting import skipIf, TestCase from salttesting.mock import MagicMock, patch, NO_MOCK, NO_MOCK_REASON from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self.dot_access_token.expires = datetime.utcnow() - timedelta(weeks=1) self.dot_access_token.save() self.assert_oauth_status(self.dot_access_token, status.HTTP_401_UNAUTHORIZED)
self.assertFalse(self.cohort_management_page.is_save_button_disabled(self.inline_key))
from django.utils.translation import ugettext as _
from __future__ import absolute_import
sp = SparseSeries(values, sparse_index=self.bseries.sp_index, copy=True) sp.sp_values[:5] = 100 self.assertEqual(values[0], 97)
Xy = np.empty(shape=n_features, dtype=common_dtype, order='C') np.dot(X.T, y, out=Xy)
subsection_css = ( ".course-navigation .chapter-content-container:nth-of-type({0}) " ".menu-item a p:nth-of-type(1)" ).format(section_index)
iris = datasets.load_iris()
train = yaml_parse.load(yaml_file) train.main_loop()
self.assertNotIn(npath(filename), autoreload.gen_filenames()) self.assertNotIn(npath(filename), autoreload.gen_filenames())
for ax in axes[:2]:
cls.partial_fit(X_train, y_train, classes=all_classes)
course = CourseFactory.create( org=course_location.org, number=course_location.course, run=course_location.run ) enrollment = CourseEnrollment.enroll(self.student, course.id) return course, enrollment
Created Private Key: "/etc/pki/my_little/certs/www.example.com.key Created CSR for "www.example.com": "/etc/pki/my_little/certs/www.example.com.csr"
atexit.register(self.release_readlock, lockdirName=lockdirName)
winrepo_cachefile = os.path.join(winrepo_dir, winrepo_cachefile)
cumsum = -np.cumsum(clf.oob_improvement_)
ser = Series(np.random.randn(1001), name=0) rep_str = repr(ser) self.assertIn("Name: 0", rep_str)
supports_timezones = True
Ensure myservice dashboard is managed: grafana.dashboard_present: - name: myservice - dashboard_from_pillar: default - rows_from_pillar: - systemhealth - requests
mock_response.status_code = 200 mock_post.return_value = mock_response
return ''
AUTH_PROVIDERS = ('pygit2',) AUTH_PARAMS = ('user', 'password', 'pubkey', 'privkey', 'passphrase', 'insecure_auth')
for vm_ in list_active_vms(): info[vm_] = _info(vm_)
return RequestFactory().post('/', {'client_id': client_id})
from __future__ import absolute_import
return EmptyPromise( lambda: self._is_on_tab(tab_name), "{0} is the current tab".format(tab_name) )
y = [3, 3, -1, -1, 3]
return Categorical(values=self._codes.copy(), categories=self.categories, ordered=self.ordered, fastpath=True)
self.assertIsNone(get_cache_key(request)) learn_cache_key(request, response)
if field.primary_key: continue
self.assertEqual(safe_key('test', 'prefix', 5), 'prefix:5:test')
resource = {"id": resource_id} edited_recommendations = { key: value + " edited" for key, value in self.test_recommendations[self.resource_id].iteritems() } resource.update(edited_recommendations) return resource
import salt.ext.six as six import salt.utils.dictupdate as dictupdate
def test_user_role(): return 'staff'
inviter = models.ForeignKey(Person, models.CASCADE, related_name='invitations_sent') invitee = models.ForeignKey(Person, models.CASCADE, related_name='invitations')
self.verify_lists_expected_cohorts([])
from __future__ import print_function
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
self.create_programs_config() mock_init.side_effect = Exception actual = utils.get_programs(self.user) self.assertEqual(actual, []) self.assertTrue(mock_init.called)
from __future__ import absolute_import import json import logging
if ret: run(name, 'touch \'{0}\''.format(SEED_MARKER), python_shell=False)
template_name_suffix = '_form'
n = n + 1
microsite.clear() return response
from __future__ import absolute_import
if not name == '/': name = name.rstrip('/')
import salt.ext.six as six
import logging log = logging.getLogger(__name__)
CourseModeFactory.create(mode_slug='honor', course_id=self.course.id) CourseModeFactory.create(mode_slug='verified', course_id=self.course.id, min_price=1)
with self.store.branch_setting(ModuleStoreEnum.Branch.draft_preferred, course_id): parent = mongo_store.get_parent_location(self.problem_x1a_1) self.assertEqual(parent, self.vertical_x1a)
self.assertIn('$', form.cleaned_data['password'])
self._test_visible_to_students(True, 'public_no_start', None, publish=True)
monitoring_dataset = DenseDesignMatrix(X=X)
data['Image'] = '{0}:{1}'.format(repo_name, repo_tag) data['Id'] = status
metric_str = metric if name in METRICS_WITH_POS_LABEL: metric_str = partial(metric_str, pos_label=pos_label_str)
a2 = Person(full_name_2='Paul McCartney') a2.save() self.assertEqual(a2.first_name, 'Paul')
from __future__ import unicode_literals
all_answer_ids = problem.get_answer_ids() all_answers = dict((answer_id, real_answers.get(answer_id, "")) for answer_id in all_answer_ids)
data['event_type'] = "re_validate" self.assert_request_status_code(200, url, method="POST", data=data)
with tm.assertRaises(ValueError): o.sample(n=3, frac=0.3)
response = self._load_dashboard() self.assertContains(response, "credit-eligibility-msg") self.assertContains(response, "purchase-credit-btn")
import os import re import subprocess import sys
'returner_dirs': list,
repofile = '' for arepo in repos: if arepo == repo: repofile = repos[arepo]['file']
self.navigate_to_video() self.assertFalse(self.video.is_button_shown('transcript_button'))
raise NotImplementedError('Distance operations not available on this spatial backend.')
scoring = self.default_scoring correct_points = scoring.get('correct') return dict([(inputfield.get('id'), correct_points) for inputfield in self.inputfields])
self.assertEqual(res.context['next_day'], None) self.assertEqual(res.context['previous_day'], datetime.date(2006, 5, 1))
parent_location = parent_location.map_into_course(target_id)
log = logging.getLogger(__file__)
self.course.grading_policy = grading_policy self.update_course(self.course, self.student_user.id) self.refresh_course()
re.compile(r'^/embargo/blocked-message/'),
queryset = queryset.filter(pk__in=selected)
state = dict(self.__dict__) state.pop('f_', None) return state
from __future__ import absolute_import import logging
raise NotImplementedError()
patched_client_login = Client.login
resp = self.create_xblock(parent_usage_key=self.seq_usage_key, category='problem', boilerplate='multiplechoice.yaml') self.problem_usage_key = self.response_usage_key(resp)
from_lisa_select_option = self.get_select_option(from_box, str(self.lisa.id))
self.file_mapping = salt.utils.odict.OrderedDict()
n_jobs = 1
module.system.render_template = Mock(return_value="<div>Test Template HTML</div>")
self.find_css('.action-edit .edit').first.click()
for mode in [CourseMode.DEFAULT_MODE_SLUG, CourseMode.VERIFIED]: CourseModeFactory.create( course_id=self.course.id, mode_slug=mode, mode_display_name=mode, )
bulk_write_record = self._get_bulk_ops_record(course_key) if bulk_write_record.active: bulk_write_record.definitions[definition['_id']] = definition else: self.db_connection.insert_definition(definition, course_key)
self.assertEqual(initially_enrolled, CourseEnrollment.is_enrolled(self.user, course_id))
if PY3: str(ci) else: compat.text_type(ci)
return {'html': self.get_problem_html(encapsulate=False)}
NOTIFICATION_EMAIL_CSS = ENV_TOKENS.get('NOTIFICATION_EMAIL_CSS', NOTIFICATION_EMAIL_CSS) NOTIFICATION_EMAIL_EDX_LOGO = ENV_TOKENS.get('NOTIFICATION_EMAIL_EDX_LOGO', NOTIFICATION_EMAIL_EDX_LOGO)
_check_caller_authority(caller, role) role.add_users(*users)
field = models.ManyToManyField("auth.Permission") name, path, args, kwargs = field.deconstruct()
import salt.utils
import integration import salt.utils
try: block = self.make_block(transf(values.astype(value.dtype))) return block.setitem(indexer=indexer, value=value, mgr=mgr)
from __future__ import absolute_import import logging import json
OGRGeomType(1) OGRGeomType(7) OGRGeomType('point') OGRGeomType('GeometrycollectioN') OGRGeomType('LINearrING') OGRGeomType('Unknown')
available_apps = ['model_fields']
self.assertProfessionalModeBypassed()
def __init__(self): super(MongoBulkOpsRecord, self).__init__() self.dirty = False
import logging import re
factory_dict = PROBLEM_DICT['multiple choice'] problem_xml = factory_dict['factory'].build_xml(**factory_dict['kwargs'])
import salt.config as config
self.conn.put_method.return_value = method_ret self.conn.put_integration.side_effect = ClientError(error_content, 'put_integration')
if validate: self.validate(existing_table)
DATADOG = AUTH_TOKENS.get("DATADOG", {}) DATADOG.update(ENV_TOKENS.get("DATADOG", {}))
with self.assertRaises(VersionConflictError): _fail = modulestore().create_child( user, new_course.location, 'chapter', fields={'display_name': 'chapter 3'}, )
from salt.states import win_license as license
list_escalation_policies = salt.utils.alias_function(list_policies, 'list_escalation_policies')
self.num = num
self.mock_block.service_declaration.return_value = None with self.assertRaises(NoSuchServiceError): self.runtime.service(self.mock_block, 'i18n')
if type(obj) is self.np.memmap: obj = self.np.asarray(obj) return Pickler.save(self, obj)
from salt.log.setup import LOG_LEVELS from salt.log.mixins import NewStyleClassMixIn import salt.utils.network
xml = self.render_to_xml(self.context) xpath = "//div[@class='indicator-container']/span[@class='status correct']" self.assert_has_xpath(xml, xpath, self.context)
self.assertRaises(KeyError, lambda: s.loc[4]) self.assertRaises(KeyError, lambda: s.ix[4]) self.assertRaises(KeyError, lambda: s[4])
dates = date_range('01-Jan-2014', '05-Jan-2014', freq='D') series = Series(1, index=dates)
return self.countdown > 0
result = s.iloc[18:30] expected = s.iloc[18:] assert_series_equal(result, expected)
if response is None: response = HttpResponse(content.stream_data()) response['Content-Length'] = content.length
super(TestProctoredExams, self).setUp() self.course = CourseFactory.create( org='edX', course='900', run='test_run', enable_proctored_exams=True )
io_loop = ioloop.IOLoop() io_loop.make_current()
from __future__ import unicode_literals
JINJA = jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'rh_ip') ) )
import salt.output import salt.utils import salt.loader import salt.template from salt.exceptions import CommandExecutionError, SaltRenderError
self._test_page("/logout", 302)
thumbs = store.get_all_content_thumbnails_for_course(course_loc) for thumb in thumbs: print "Deleting {0}...".format(thumb) store.delete(thumb['_id'])
return _get_next_prev(self, date, is_previous=True, period='week')
plt.matshow(cm) plt.title('Confusion matrix of the %s classifier' % name) plt.colorbar()
contents='ssh-rsa AAAAB3NzaC1kc3MAAACBAL0sQ9fJ5bYTEyY== root'
item.transcripts.pop(lang) reraised_message += ' ' + ex.message
if coordinates: where = self.s.read_coordinates(where=self.where) else: where = self.where
assert_raises(ValueError, svm.SVC(C=-1).fit, X, Y)
cmd = '--{0}-{1}={2} --permanent'.format(action, _type, name)
response = self.process_response(secure=True) self.assertEqual(response["strict-transport-security"], "max-age=600")
if kwargs.get('params', {}).get('course_id'): data.update({ "threads_count": 1, "comments_count": 2 })
description = models.TextField(null=True, blank=True)
break
self.assertTrue(isinstance(uniques, DatetimeIndex))
xpath = "//div[@class='block']/p/b" self.assert_has_text(xml, xpath, 'prompt HTML')
return (self._y.values - self._y_fitted_raw)
MAXSIZE = int((1 << 31) - 1)
self.assertEquals(293, self.response.content.count('grade_None'))
import cgi import yaml import tornado.httpserver import tornado.ioloop import tornado.web import tornado.gen from tornado.concurrent import Future from zmq.eventloop import ioloop import salt.ext.six as six
self.wait_for_element_visibility( ".wrapper-notification-error.is-shown .message", "Error message is visible" ) return self.error_notification.results[0].find_element_by_css_selector('.message').text
self.course_outline.select_advanced_tab()
from salt.ext.six import string_types
super(StudioValidation, self).__init__(xblock_id) self.summary = None
acceptable_ora_err = 'ORA-01543' if keepdb else None self._execute_allow_fail_statements(cursor, statements, parameters, verbosity, acceptable_ora_err)
src = os.path.normpath(src) link = os.path.normpath(link)
ManualEnrollmentAudit.create_manual_enrollment_audit( manual_enrollment_audit.enrolled_by, student.email, ALLOWEDTOENROLL_TO_ENROLLED, manual_enrollment_audit.reason, enrollment )
self.assertEqual(len([r for r in httpretty.httpretty.latest_requests if r.method == 'PATCH']), 0)
self.store.create_child( self.user_id, locations['parent'], 'vertical', block_id='new_child', )
estimator.fit(X_train)
from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
sparse_results = sparse_classifier.staged_decision_function( X_test_sparse) dense_results = dense_classifier.staged_decision_function(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
instructor_task.api.submit_cohort_students(request, course_key, filename)
_before, _blankline, after = text.partition('\n\n') return after
expected = ts[1:]
return ACCESS_DENIED if is_prerequisite_courses_enabled() else ACCESS_GRANTED
return course_metadata_utils.course_start_datetime_text( self.start, self.advertised_start, format_string, ugettext, strftime_localized )
return u"[{username}] {name}: {value}".format( name=self.name, value=self.value, username=self.user.username, )
return beta_from_design(dataset.y, **kwargs)
if self.request_cache is not None: self.request_cache.data.setdefault('course_cache', {})[course_version_guid] = system return system
with self.assertNumQueries(0): s.save(update_fields=[]) self.assertEqual(len(pre_save_data), 0) self.assertEqual(len(post_save_data), 0)
raise CoursewareAccessException(access_response)
event_iter = self.get_event_iter_returns(jid, minions, timeout=timeout)
from backports import ssl_match_hostname HAS_SSL_MATCH_HOSTNAME = True
self.x_sum *= self.gamma self.x_sum += x
print('=' * 80) print("NearestCentroid (aka Rocchio classifier)") results.append(benchmark(NearestCentroid()))
sample_weight = sample_weight / sample_weight.sum(dtype=np.float64)
query = Item.objects.exclude(creator__in=[self.a1, self.a2]).query self.assertNotIn(LOUTER, [x.join_type for x in query.alias_map.values()])
self.assertTrue(exam_attempts_section.is_search_text_field_visible)
raise RaisingObjectException(self.msg)
import sys if sys.version_info < (2, 7): import unittest2 as unittest else: import unittest
pass
ret['retcode'] = 1 return ret
self.assertEquals(preview.latex_preview('2*3'), r'2\cdot 3')
resp = self.client.delete(reverse_usage_url("xblock_handler", chapter1_usage_key)) self.assertEqual(resp.status_code, 204)
expression_wrapper = '(%s)' sql = connection.ops.combine_duration_expression(self.connector, expressions) return expression_wrapper % sql, expression_params
breadcrumbs = self.q(css=self.BOOKMARKED_BREADCRUMBS).text return [breadcrumb.replace('\n', '').split('-') for breadcrumb in breadcrumbs]
import salt.utils.validate.net from salt.exceptions import CommandExecutionError
check_ortho(pls_ca.x_scores_, "x scores are not orthogonal") check_ortho(pls_ca.y_scores_, "y scores are not orthogonal")
from __future__ import unicode_literals
for i in params: if _is_simple_type(i): _current_parameter = SimpleParameter(i) else: _current_parameter = TypedParameter() _parse_typed_parameter(i) _current_option.add_parameter(_current_parameter)
if request.method != 'POST': return HttpResponseNotAllowed('POST') request.backend.start() return complete(request, backend, *args, **kwargs)
from __future__ import absolute_import
url( r'^courses/{}/progress/(?P<student_id>[^/]*)/$'.format( settings.COURSE_ID_PATTERN, ), 'courseware.views.views.progress', name='student_progress', ),
user_partition_id = self.user_partition.id groups = self.user_partition.groups self.user_partition.scheme.current_group = groups[0]
proxy = False mongo_db = connect_to_mongodb( db, host, port=port, tz_aware=tz_aware, user=user, password=password, proxy=proxy, **kwargs )
if plen < (alen - dlen) or plen > alen: raise TemplateSyntaxError("%s requires %d arguments, %d provided" % (name, alen - dlen, plen))
if exif is None: image.save(string_io, format='JPEG') else: image.save(string_io, format='JPEG', exif=exif)
if not os.path.isfile(path): raise SaltInvocationError('File not found: {0}'.format(path))
providers_config = opts['providers']
fake_app = object()
cli_log_path, self.config.get( self._logfile_config_setting_name_, self._default_logging_logfile_ )
self.assertEqual(buf, control_buf)
p = Parent.objects.get(name="Parent") self.assertIsNone(p.bestchild)
max_scores_cache.fetch_from_remote(field_data_cache.scorable_locations)
_get_si()
self.assertTrue(os.path.exists(migration_file)) with codecs.open(migration_file, "r", encoding="utf-8") as fp: content = fp.read()
self.assertTrue('success' in result and not result['success'])
logout_url = reverse('logout') response = self.client.post(logout_url)
n_samples, n_features = iris.data.shape target = iris.target_names[iris.target] clf = LogisticRegression(random_state=0).fit(iris.data, target)
system = self.get_system() descriptor = system.process_xml(xml_str_in)
args = [name, '--id', snap_name]
return cls(xblock_wrapper.browser, xblock_wrapper.locator)
return (router, ext_network)
self.check_caches("mstc_cache_test_key")
n = NestedObjects(using=DEFAULT_DB_ALIAS) Car.objects.create() n.collect([Vehicle.objects.first()])
from salt.log.mixins import NewStyleClassMixIn from salt.log.setup import LOG_LEVELS
with self.assertNumQueries(1): all_deadlines = VerificationDeadline.deadlines_for_courses(course_keys) self.assertEqual(all_deadlines, {})
raise NotImplementedError
bkdir = os.path.join(bkroot, src_dir)
frame = self.frame.copy() frame2 = self.frame.copy()
with ensure_clean_store(self.path) as store:
objs = [t.read(where=_where, columns=columns, **kwargs) for t in tbls]
shutil.rmtree(root_dir)
self.assertRaises(Exception, date_range, datetime(2011, 11, 11), datetime(2011, 11, 12), freq=offset)
result = diffs.min() self.assertEqual(result[0], diffs.ix[0, 'A']) self.assertEqual(result[1], diffs.ix[0, 'B'])
empty_distribution = grades.answer_distributions(self.course.id)
from pandas.core.config import get_default_val terminal_width = get_default_val('display.width') terminal_height = get_default_val('display.height')
self._conv_op = GpuDnnConv() self._desc = GpuDnnConvDesc(border_mode=border_mode, subsample=self._subsample, conv_mode='conv')
Application.objects.filter(user=self.request.user).delete() return super(ApiRequestStatusView, self).form_valid(form)
d = dict([(a, ax) for a, ax in zip(self._AXIS_ORDERS, axes)]) d.update(kwargs) return d
hasher = HashingVectorizer(n_features=opts.n_features, stop_words='english', non_negative=True, norm=None, binary=False) vectorizer = make_pipeline(hasher, TfidfTransformer())
prob /= prob.sum(axis=1).reshape((prob.shape[0], -1)) return prob
#html_logo = 'images/theano_logo-200x67.png' #html_logo = 'images/theano_logo_allblue_200x46.png'
request = RequestFactory().get('/') request.user = student return request
return True
DECIMAL_SEPARATOR = '.' THOUSAND_SEPARATOR = ','
autodetector = MigrationAutodetector( loader.project_state(), ProjectState.from_apps(apps), questioner, )
with check_mongo_calls_range(max_finds=5, max_sends=3): self._update_partitions(reload_items=False)
non_image_drivers = ['nova', 'virtualbox']
repr(s)
certificate_html_view_configuration_model = apps.get_model("certificates", "CertificateHtmlViewConfiguration") certificate_html_view_configuration_model.objects.all().delete()
y = np.array([3, 7, 5, 9, 8, 7, 10]) x = np.arange(len(y))
X = np.arange(10 * 10, dtype='float64').reshape(10, 10) Y = np.ones((10, 1), dtype=int)
super(Donation, cls).add_to_order(order, currency=currency)
self.assertNumContains(sql, 'tbl_tbsp', 1) self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)
self.assertNotContains(response, '<h2>Author-book relationships</h2>') self.assertNotContains(response, 'Add another Author-Book Relationship') self.assertNotContains(response, 'id="id_Author_books-TOTAL_FORMS"')
raise ValueError( 'Second argument should be a filename, %s (type %s) was given' % (filename, type(filename)) )
if ret_str in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
'id': unicode(location)
log = logging.getLogger(__name__)
if name in self.RESERVED_WORDS: name = '_' + name
if course is None: course = modulestore().get_course(xblock.location.course_key)
if preference_visibility == PRIVATE_VISIBILITY: self._verify_private_account_response(response, account_privacy=PRIVATE_VISIBILITY) else: self._verify_full_shareable_account_response(response, ALL_USERS_VISIBILITY, badges_enabled=True)
self.assertEqual(iptables.build_rule(jump='LOG', **{'log-prefix': 'long prefix'}), '--jump LOG --log-prefix "long prefix"')
if path_cache is not None: path_cache[block_key] = True
accept = parse_accept_header(request.META.get("HTTP_ACCEPT", "")) return media_type in [t for (t, p, q) in accept]
return name + '_id'
rs = self.dtc.convert(np_datetime64_compat('2012-01-01'), None, None) self.assertEqual(rs, xp)
import salt.config import salt.loader
def __get_s3_meta(bucket, key=key, keyid=keyid): return s3.query( key=key, keyid=keyid, kms_keyid=keyid, bucket=bucket, service_url=service_url, verify_ssl=verify_ssl, location=location, return_bin=False)
from __future__ import absolute_import import sqlite3 import os
confirm_prompt(self, cancel=True)
val = rng[0] exp = Timestamp('3/11/2012 03:00', tz='US/Eastern')
result = to_datetime(df[['year', 'month', 'day']].to_dict()) assert_series_equal(result, expected)
Attribute('mode', 'python'), Attribute('linenumbers', 'true'), Attribute('tabsize', 4, transform=int),
from __future__ import unicode_literals
return cls.current().cdn_user_agents
return self.q(css=self._bounded_selector('.remove-admin-role')).text[0]
print( ' {LIGHT_RED}*{ENDC} {0} Failed to sync {2}: ' '{1}'.format( name, output['ret'], modules_kind, **self.colors) ) return False
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON ) from salttesting.helpers import ensure_in_syspath
instance_map = weakref.WeakKeyDictionary()
os.chdir('/') os.setsid() os.umask(18)
class WKBWriteFunc(GEOSFuncFactory): argtypes = [WKB_WRITE_PTR, GEOM_PTR, POINTER(c_size_t)] restype = c_uchar_p errcheck = staticmethod(check_sized_string)
return errors
format_is_iso8601 = _format_is_iso(format) if format_is_iso8601: require_iso8601 = not infer_datetime_format format = None
import logging import copy
today_fmt = '%B %d, %Y'
result = sql.read_sql_table('test_datetime', self.conn) result = result.drop('index', axis=1) tm.assert_frame_equal(result, df)
(ok_, err, sl_) = _unify_sources_and_hashes(source=source, source_hash=source_hash, sources=sources, source_hashes=source_hashes) if not ok_: return _error(ret, err)
import salt.loader
#html_sidebars = {}
response = self._get_page( 'verify_student_upgrade_and_verify', course.id, expected_status_code=302 ) self._assert_redirects_to_dashboard(response)
if not self.is_suppress: return [data]
multi_device_support = False
EDXNOTES_PUBLIC_API = 'http://localhost:8042/api/v1' EDXNOTES_INTERNAL_API = 'http://localhost:8042/api/v1'
if hasattr(X, 'T'): assert_raises(ValueError, transformer.transform, X.T)
from __future__ import absolute_import
features = np.arange(n_features)[support_] self.estimator_ = clone(self.estimator) self.estimator_.fit(X[:, features], y)
for attempt in xrange(self.INVALID_ATTEMPTS): self._change_password(email=self.NEW_EMAIL)
msg = self.style.HTTP_SUCCESS(msg)
from __future__ import absolute_import
clf = QuadraticDiscriminantAnalysis(reg_param=0.01) with ignore_warnings(): clf.fit(X2, y6) y_pred = clf.predict(X2) assert_array_equal(y_pred, y6)
return 0.95
d = Donut(name='Apple Fritter') d.baked_time = datetime.datetime(year=2007, month=4, day=20, hour=16, minute=19, second=59) d.save()
cart = Order.get_cart_for_user(request.user) cart.clear()
resp = self.client.get(course_wiki_page, follow=False, HTTP_REFERER=referer) self.assertEqual(resp.status_code, 302)
import warnings warn_filters = warnings.filters warnings.filterwarnings('ignore', category=FutureWarning, module=".*format")
from __future__ import unicode_literals
self.assertTrue(_int64_overflow_possible(gr.grouper.shape))
return remove_root(root, sorted(glob2.glob('{root}/{glob}'.format(root=root, glob=glob))))
from __future__ import unicode_literals
from salttesting import skipIf from salttesting.helpers import ( destructiveTest, ensure_in_syspath, skip_if_binaries_missing ) from salttesting.mock import NO_MOCK, NO_MOCK_REASON, Mock, patch ensure_in_syspath('../../')
items = raw data = items
if not isinstance(config, dict): return False, ('Configuration for twilio_txt_msg beacon ' 'must be a dictionary.') return True, 'Valid beacon configuration'
self.context['options'] = [(id_num, '<b>Option {0}</b>'.format(id_num)) for id_num in range(5)] self.context['value'] = 2
library_fixture.add_children( XBlockFixtureDesc("problem", "Bad Problem", data='<'), )
self._ordering_clash = bool(self.ordering and self.order_with_respect_to)
if hasattr(self.query, 'cursor') and self.query.cursor: self.query.cursor.close()
return queryset
import salt.utils.jid import salt.returners
task_folder = task_service.GetFolder(location) task_definition = task_folder.GetTask(name).Definition actions = task_definition.Actions
self.stdout.write(errors)
return salt.utils.pem_finger(os.path.join(__opts__['pki_dir'], 'minion.pub'), sum_type=__opts__.get('hash_type', 'md5'))
new_data = new_data.reshape((4, 11, -1)) real_data = digits.data[:44].reshape((4, 11, -1))
block_locator = course_key.make_usage_key( block_type=block_key.type, block_id=block_key.id, )
self.certificates_section.refresh()
enet.set_params(alpha=alpha_optim) coef_ = enet.fit(X, y).coef_
current_locks = list_holds(full=_yum() == 'yum')
'INDIVIDUAL_DUE_DATES': False,
attributes = ['Attribute' + str(i) for i in range(1)] attribute_values = ['Value' + str(i) for i in range(5)]
opts = tuple(s for s in styles if s in opt_dict.keys()) if opts: definition['opts'] = opts
from __future__ import absolute_import import copy import logging import re
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath, expensiveTest
config.add_subpackage('__check_build') config.add_subpackage('_build_utils')
connection_router = ConnectionRouter([TestRouter(), WriteRouter()]) self.assertListEqual([r.__class__.__name__ for r in connection_router.routers], ['TestRouter', 'WriteRouter'])
from __future__ import absolute_import
try: code = six.get_function_code(attr) except AttributeError: code = six.get_function_code(attr.__call__)
pass
return form.cleaned_data.get(DELETION_FIELD_NAME, False)
deploy_scripts_search_path[idx] = entry continue
range = range map = map zip = zip filter = filter reduce = functools.reduce long = int unichr = chr
continue
_list = self.run_function('beacons.list', return_yaml=False) self.assertTrue(_list['enabled'])
pipeline.items.append(preprocessing.GlobalContrastNormalization( sqrt_bias=10., use_std=True))
error_msg = _('Invalid grader reply. Please contact the course staff.') oldcmap.set(self.answer_id, msg=error_msg) return oldcmap
out = np.empty((len(indexer), arr.shape[1]), dtype='float32')
monitoring_dataset = DenseDesignMatrix(X=X)
if 'arg' in chunk and not isinstance(chunk['arg'], list): chunk['arg'] = [chunk['arg']]
docs_train, docs_test, y_train, y_test = train_test_split( dataset.data, dataset.target, test_size=0.25, random_state=None)
ssh = salt.client.ssh.SSH(opts)
return self._validation_paragraph('error').text[0]
import django try: django.setup()
if isinstance(obj, slice): return self._convert_slice_indexer(obj, axis)
try: return User.objects.get(username=requested_username) except User.DoesNotExist: raise Http404( "Requested user '{requested_username}' does not exist.".format(requested_username=requested_username) )
raise
self.assertIn( 'Invalid value passed for seconds.', self.run_funcdtion('system.set_restart_delay', [70]))
if not settings.FEATURES.get('ALLOW_WIKI_ROOT_ACCESS', False): raise PermissionDenied()
saltenv = env
return type(form)(class_name, (form,), form_class_attrs)
MODULESTORE = TEST_DATA_SPLIT_MODULESTORE
def is_file(thing): return hasattr(thing, "read") and callable(thing.read)
set_crontab(
courses_list_by_groups, __ = _accessible_courses_list_from_groups(self.request)
y_in_classes = in1d(y, classes) y_seen = y[y_in_classes] indices = np.searchsorted(sorted_class, y_seen) indptr = np.hstack((0, np.cumsum(y_in_classes)))
if (idx < len(lines) and _starts_till(lines[idx + 1], cnd) < 0) or idx + 1 == len(lines): out.append(cnd)
f = function([X], output, mode="DEBUG_MODE") f(np.zeros((1, 1)).astype(X.dtype))
else: ret = _load_result(new, ret)
self.X -= union.mean(axis=0, dtype='float64') std = union.std(axis=0, dtype='float64') std[std < 1e-3] = 1e-3 self.X /= std
redirect_to = get_next_url_for_login_page(request)
htmlhelp_basename = 'theanodoc'
self.assertContains( self.client.ajax_post(course_update_url, {'garbage': 1}), 'Failed to save', status_code=400 )
if not self.env_is_exposed(tgt_env): return None try: int(tgt_ref, 16) except ValueError: return None
if dispatch == 'preview_chemcalc': return self.preview_chemcalc(data) return {}
from __future__ import absolute_import import os import copy import errno import signal import hashlib import logging import weakref from random import randint
tm.assert_frame_equal(lexsorted_df, not_lexsorted_df)
self.assert_has_text(xml, "//span[@class='status']/span[@class='sr']", status_mark, exact=False)
_ = args _ = kwargs
url = self.reverse_url(reverse_args, **kwargs) response = self.url_method(url, **kwargs) if expected_response_code is not None: self.assertEqual(response.status_code, expected_response_code) return response
CourseEnrollmentFactory.create(user=self.user, course_id=self.course.id, is_active=True)
response = self.client.get(reverse('admin:admin_views_section_add')) self.assertContains(response, '<body class=" app-admin_views model-section ')
self.votes = Counter()
from __future__ import unicode_literals
exclude_patterns = ['build', 'links.rst']
self.provider_id = provider_id
a_sorted = self.frame['A'].sortlevel(0)
new_mean_squared_grad = ( self.decay * mean_square_grad + (1 - self.decay) * T.sqr(grads[param]) )
auto_created = False
self.q(css='a.nav-item').filter(text=topic)[0].click()
return [fold.set_input_space(space) for fold in self._folds]
iterator = SequentialSubsetIterator(10, 3, 3) for i in range(3): iterator.next()
copy_X = self.copy_X and self.fit_intercept
repo_opts = dict( (x, kwargs[x]) for x in kwargs if not x.startswith('__') and x not in ('saltenv',) )
from __future__ import absolute_import
book, created = Book.objects.get_or_create(title="Pro Django") self.assertFalse(created)
if subset is None: subset = self.obj
pass
repofile = '' for repo in repos: if repo == name: repofile = repos[repo]['file']
if not organizations_enabled(): return None from organizations import api as organizations_api return organizations_api.add_organization_course(organization_data=organization_data, course_key=course_id)
boston = datasets.load_boston() boston.data, boston.target = shuffle(boston.data, boston.target, random_state=rng)
dt = Timestamp('20130101 09:10:11') result = dt.round('D') expected = Timestamp('20130101') self.assertEqual(result, expected)
subset_choices = [correct_choice] rng.shuffle(incorrect_choices) subset_choices += incorrect_choices[:num_incorrect] rng.shuffle(subset_choices)
args = [name] if snap_name: args.extend(['--name', snap_name]) if desc: args.extend(['--description', desc])
return int(round(value.total_seconds() * 1000000))
return AccountLegacyProfileSerializer.get_profile_image(user_profile, user_profile.user)
re.compile(r'^Schedule & Details Settings \|'): [ "jquery", "js/base", "js/models/course", "js/models/settings/course_details", "js/views/settings/main"],
if kwargs.get('refresh', True): refresh_db()
if constraint not in constraints: constraints[constraint] = { "columns": [], "primary_key": pk, "unique": unique, "foreign_key": None, "check": check,
from __future__ import absolute_import, print_function import fnmatch import logging import os
enrollment_mode, is_active = CourseEnrollment.enrollment_mode_for_user(student, course_key) show_generate_cert_btn = ( is_active and CourseMode.is_eligible_for_certificate(enrollment_mode) and certs_api.cert_generation_enabled(course_key) )
names = F.readline().strip().split(',')
stack.addRemote(RemoteYard(stack=stack, name='manor', lanename=lanename, dirpath=sockdirpath)) console.concise("Created Jobber Stack {0}\n".format(stack.name)) return stack
else: mpriv = self.opts['pki_dir'] + '/' + 'master_sign.pem' if os.path.isfile(mpriv): self.privkey = mpriv
try: store.close() except: pass
self.assertEqual(CourseMode.auto_enroll_mode(self.course_key, modes), result)
expected = { "action": "add", "results": [ { "identifier": identifier, "error": False, "userDoesNotExist": False } ] }
from openedx.core.djangoapps.credit import api, tasks
self.factory(alpha=-.1)
globals().update(dynamic_benchmarks)
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch )
winrepo.__salt__ = {} winrepo.__opts__ = {}
from salt.exceptions import CommandExecutionError, SaltRenderError import salt.utils import salt.utils.gitfs import logging import salt.minion import salt.loader import salt.template
version_history = modulestore().get_block_generations(updated_problem.location) self.assertEqual(version_history.locator.version_guid, first_problem.location.version_guid)
keys = keys.astype(dtype)
raise NotImplementedError('subclasses of BaseCache must provide an add() method')
level = logging.CRITICAL
with self.assertRaises(ValueError): self.settings_service.get_settings_bucket(None)
return cls.objects.filter(course_id=course_key, status=status).count()
class TestForm(Form): foo = CharField(widget=HiddenInput) bar = CharField(widget=HiddenInput)
'ENABLE_THIRD_PARTY_AUTH': False,
self.assertEqual(ax.collections[0].cmap.name, 'Greys')
@setup(inheritance_templates) def test_inheritance39(self): output = self.engine.render_to_string('inheritance39', {'optional': True}) self.assertEqual(output, '1new23')
return JsonResponse({ 'url': reverse_url('course_handler'), 'destination_course_key': unicode(destination_course_key) })
dev['hash'] = all_devices['hash'] log.info('Found device %s in Zenoss', device) return dev
gt = OGRGeomType('Geometry') self.assertEqual(0, gt.num) self.assertEqual('Unknown', gt.name)
from __future__ import unicode_literals
- attributes: cross_zone_load_balancing: enabled: false - profile: myelbprofile
location = self.old_course_key.make_usage_key('discussion', block_id='Discussion1') self.draft_mongo.delete_item(location, self.user_id)
resp = self._change_enrollment('enroll') self.assertEqual(resp.status_code, 200) self.assertEqual(resp.content, full_url)
salt '*' vsphere.vmotion_enable my.esxi.host root bad-password
with tm.assert_produces_warning(FutureWarning): frame.sort(columns='A') with tm.assert_produces_warning(FutureWarning): frame.sort()
call_command('loaddata', *self.fixtures, **{'verbosity': 0, 'database': db_name})
cache.delete_many([instance_key(model, x) for x in instance_or_pk])
get_version = { 'Linux': linux_vmstats, 'FreeBSD': freebsd_vmstats, }
df = DataFrame(np.ones((4, 2)))
tmp_profile_dir = tempfile.mkdtemp(prefix='profile_') profname = 'auto_profile_sphinx_build' pdir = os.path.join(tmp_profile_dir,profname) profile = ProfileDir.create_profile_dir(pdir)
logging.debug("[%s]: %s" % (self, msg))
digits = load_digits() X, y = digits.data[:50], digits.target[:50] X_test = sparse.csr_matrix(digits.data[50:100])
raise SaltInvocationError('Command must be specified')
if photo_verifications: return photo_verifications[0].expiration_datetime.strftime(date_format)
if self.path.startswith("/set_config"): return StubHttpRequestHandler.do_PUT(self) self._send_handler_response("PUT")
return [ credentials_factories.UserCredential( id=1, username='test', credential=credentials_factories.ProgramCredential( program_id=1 ) ), credentials_factories.UserCredential( id=2, username='test', credential=credentials_factories.ProgramCredential( program_id=2 ) ) ]
rcon = salt.utils.which('restorecon') if rcon: cmd = [rcon, fconfig] subprocess.call(cmd)
task_folder = task_service.GetFolder(location) task = task_folder.GetTask(name)
class Person(Form): first_name = CharField() last_name = CharField()
if not os.path.isfile(full): return 'Authorized keys file {0} not present'.format(full)
if mismatch: return False
from salt.modules import win_certutil as certutil
length = arr.size if hasattr(arr, 'size') else len(arr) return np.nan if length == 0 else np.mean(arr, *args, **kwargs)
post = __salt__['git.config_set']( cwd=repo, key=name, value=value, multivar=multivar, user=user, **{'global': global_} )
if isinstance(value, float): return datetime.timedelta(seconds=value)
__salt__['dockerng.start']( name, )
with self.settings(STATIC_URL='/test/'): self.assertEqual(staticfiles_storage.base_url, '/test/')
hwaddr = salt.utils.alias_function(hw_addr, 'hwaddr')
for engine in self.current_engines: tm.skip_if_no_ne(engine) ev = pd.eval(ex, engine=self.engine, parser=self.parser) tm.assert_almost_equal(ev, result)
self.enroll_student(self.STUDENTS[0]['email'], self.STUDENTS[0]['password']) self.attempt_upload_file_and_verify_result(test_case, 'import_resources', self.initial_configuration)
spelling_word_list_filename = 'spelling_wordlist'
result = df.set_index(['A', df['B'].values], drop=False) expected = df.set_index(['A', 'B'], drop=False)
from __future__ import absolute_import
return self.make_call( reverse('team_membership_detail', args=[team_id, username]), expected_status, 'get', data, **kwargs )
data['stdout'] = '' if is_json else data.get('stdout', '')[:idx] state['changes'] = data
del self._actions[name]
return type(self)()
self.assertEqual(res.context['next_week'], None) self.assertEqual(res.context['previous_week'], datetime.date(2008, 9, 28))
return "{}/library/{}/team/".format(BASE_URL, unicode(self.locator))
num_braces = 0
plt.figure() fig = plt.gcf() cls_runtime = [] for cls_name, stats in sorted(cls_stats.items()): cls_runtime.append(stats['total_fit_time'])
block = self.make_block(new_values) if convert: block = block.convert(by_item=True, numeric=False)
modulestore().update_item(descriptor, request.user.id)
WORKS_WITH_STORES = (ModuleStoreEnum.Type.split, )
from __future__ import unicode_literals
response = client2.post(self.url, creds) self._assert_response(response, success=True)
problem_page.click_hint() self.assertIn("Hint (1 of 2): mathjax should work1", problem_page.extract_hint_text_from_html) problem_page.verify_mathjax_rendered_in_hint()
import salt.utils
try: item = cls.objects.select_related('microsite').get(organization=org) return item.microsite except ObjectDoesNotExist: return None
if (('python2.7/site-packages/gunicorn/workers/sync.py' in exc_str) and ('[Errno 11] Resource temporarily unavailable' in exc_str)): exc_str = ''
expr_s = re.sub( r'script([a-zA-Z0-9]+)', '\\mathcal{\\1}', expr_s )
activate('nl')
from salttesting import skipIf from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
self._create_cert(self.courses[0].id, self.user, CertificateStatuses.error, mode)
b = kubectl_out.get("data", {}) self.assertTrue(isinstance(kubectl_out, dict)) self.assertEqual(expected_data, b)
self.q(css='.create-team .action-cancel').first.click() self.wait_for_ajax()
return {'access_token', 'token_type', 'expires_in', 'scope'}
self.client.logout() ModuleStoreTestCase.tearDown(self)
from __future__ import absolute_import import sys
from __future__ import unicode_literals
kernel = self.kernel if callable(kernel): kernel = 'precomputed'
with warnings.catch_warnings(record=True) as ws: for i, line in enumerate(input_lines): if line.endswith(';'): is_semicolon = True
Yt = IncrementalPCA(n_components=2).fit(X).transform(Xt)
user_exam_summary = get_attempt_status_summary( usage_info.user.id, unicode(block_key.course_key), unicode(block_key), ) return user_exam_summary and user_exam_summary['status'] != ProctoredExamStudentAttemptStatus.declined
ptr_type = c_void_p
STUDENT_VIEW = 'student_view'
raise NotImplementedError('subclasses of BaseFinder must provide a find() method')
clf = GradientBoostingClassifier(n_estimators=10, random_state=1) clf.fit(iris.data, iris.target)
self.expect_error_on_file_content( 'username,email\n', "The file must contain a 'cohort' column containing cohort names." )
if compzone is True: ret['result'] = True messages.append('Timezone {0} already set'.format(name)) else: do_zone = True
if values[0] < binner[0]: raise ValueError("Values falls before first bin")
if FEATURES.get('ENABLE_CSMH_EXTENDED'): INSTALLED_APPS += ('coursewarehistoryextended',)
return self.q(css='button.action-linkedin-profile')
filerepos = _parse_repo_file(repofile)[1] return filerepos[name]
self.solar_team.add_user(self.users[user])
result = user_function(*args, **kwds) stats[MISSES] += 1 return result
destroy(vm_['name'])
continue
iris = datasets.load_iris()
self.assertRaises(ValueError, lambda: ci.set_categories( list('cab'), inplace=True))
if timezone.is_aware(value): raise ValueError("SQLite backend does not support timezone-aware times.")
item = self.cart.orderitem_set.all().select_subclasses()[0] self.assertEquals(item.unit_cost, self.get_discount(self.cost))
output = self.engine.render_to_string('inheritance20') self.assertEqual(output, '1&a3_')
return self.oauth2_adapter.create_public_client( name='Test Public Application', user=user, client_id=client_id, redirect_uri=DUMMY_REDIRECT_URL, )
return self.store.get_modulestore_type(self.course.id) == ModuleStoreEnum.Type.split
return CallableFalse
import os import yaml
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath ensure_in_syspath('../../')
true_and_pred = y_true.multiply(y_pred) tp_sum = count_nonzero(true_and_pred, axis=sum_axis, sample_weight=sample_weight) pred_sum = count_nonzero(y_pred, axis=sum_axis, sample_weight=sample_weight) true_sum = count_nonzero(y_true, axis=sum_axis, sample_weight=sample_weight)
orig = RangeIndex(10) orig.name = 'original'
else: if bootstrap: indices = random_state.randint(0, n_samples, max_samples) else: indices = sample_without_replacement(n_samples, max_samples, random_state=random_state)
self.syndic_mode = self.opts.get('syndic_mode', 'sync') self.syndic_failover = self.opts.get('syndic_failover', 'random')
self.assertTrue(hasattr(request, '_files'))
X_ = np.asarray(X) grid = np.unique(X_[:, 0]) pdp_2, axes = partial_dependence(clf, [0], grid=grid)
from salt.states import ipset
f = lambda x: x.reset_index(inplace=True) _check_f(data.set_index('a'), f)
if N.size(imgshp)==2: imgshp = (1,)+imgshp
response = self.client.get('/account/register/', HTTP_ACCEPT_LANGUAGE='pl-pl') self.assertRedirects(response, '/en/account/register/')
return state
try: problem.grade_answers({'1_2_1': '42'})
if service not in current_settings: changes_needed = True break
if not request.user.is_authenticated(): raise PermissionDenied delete_user_preference(request.user, NOTIFICATION_PREF_KEY) return HttpResponse(status=204)
PUBLIC_RSA_KEY = None PRIVATE_RSA_KEY = None
email_params = get_email_params(self.course, True) email_params["email_address"] = "user@example.com" email_params["full_name"] = "Jean Reno" return email_params
if example_range: ex_range = slice(example_range[0], example_range[1]) else: ex_range = slice(None)
return TransformPoint(self, 'scale')
super(TestLibraryAccess, self).setUp() self.non_staff_user, self.non_staff_user_password = self.create_non_staff_user()
command.extend(['--', filename])
result = [] for image in res['stdout'].splitlines(): image = [var for var in image.split(" ") if var] result.append(image[2])
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import MagicMock, patch
nlev = _int64_cut_off(shape)
with self.assertRaises(forms.ValidationError): f.clean('1:30:05 PM')
self.xml_data = "course info 463139"
def _warning_function(): warnings.warn("deprecation warning", DeprecationWarning)
X = check_array(X, accept_sparse=['csr', 'csc'])
with patch_edxnotes_api_settings(None): self.assertRaises(ImproperlyConfigured, get_endpoint_function)
return '{}[data-locator="{}"] {}'.format( self.BODY_SELECTOR, self.locator, selector )
if uid is None: user = list_users() uid = user[username]['index']
troy = SpecialClient.objects.select_related('state').only('name', 'state').get(name='Troy Buswell')
if not compat.PY3: __idiv__ = disable
return type(self._value)
if line.startswith('pool') and line.endswith('write'): continue if line.endswith('bandwidth'): continue
tm.assert_index_equal(df.set_index([df.index, df.index]).index, mi2)
event.__grains__ = {} event.__salt__ = {} event.__context__ = {} event.__opts__ = {}
self.args = args
from __future__ import absolute_import
assert_false(hasattr(SequenceDescriptor, attribute))
n_samples, self.n_features_ = X.shape y = self._validate_y(y)
self.set_group_access(self.vertical, {1: []}) self.set_group_access(self.problem, {2: [3, 4]})
continue
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../../')
for path in [DATA_HOME, LOAD_FILES_ROOT]: _remove_dir(path)
return _("regenerated") if self.is_regeneration else _("generated")
self.original_attrs = {}
def rval(a): return (a * self.y_cache).sum(axis=1) return rval
module = CapaFactory.create(rerandomize=RANDOMIZATION.ALWAYS, done=False) self.assertTrue(module.should_show_save_button())
errors = to_list(errors)
self.assertIsNone(file_move_safe(self.file_a, self.file_b, allow_overwrite=True))
self.profile.profile_image_uploaded_at = datetime.datetime.now() self.profile.save() self.assertFalse(self.profile.has_profile_image)
course = CourseFactory.create() create_account(self.USERNAME, self.PASSWORD, self.EMAIL)
ret['comment'] = 'Database {0} is not present, so it cannot ' \ 'be removed'.format(name) return ret
if content and content[-1] == '\n': content = content[:-1]
from salt.utils.schema import (Schema, IPv4Item, ) from salt.config.schemas.common import (MinionDefaultInclude, IncludeConfig )
if key not in fields: return False, None field = fields[key] if xblock is not None: return field.is_set_on(block), getattr(xblock, key) else: return True, field
self.set_group_access(self.vertical, {1: []}) self.set_group_access(self.html, {2: None})
response = self.client.post(reverse('admin:course_modes_coursemode_add'), data=data) self.assertRedirects(response, reverse('admin:course_modes_coursemode_changelist'))
group.__salt__ = {} group.__opts__ = {}
if dt.weekday() == 5: return dt - timedelta(1) elif dt.weekday() == 6: return dt + timedelta(1) return dt
return 0
freq = result.index.freq tm.assert_equal(freq + Day(1), Day(2))
if not hasattr(user, '_roles'): user._roles = RoleCache(user)
CourseEmailTemplate = apps.get_model("bulk_email", "CourseEmailTemplate") if not CourseEmailTemplate.objects.exists(): call_command("loaddata", "course_email_template.json")
num_labels_by_type = numpy.array(norb.SmallNORB.num_labels_by_type, 'int') num_labels_by_type[instance_index] = len(new_to_old_instance)
for c in City.objects.num_points(): self.assertEqual(1, c.num_points)
"median_absolute_error",
wi = W_list[i] hi_mean += T.dot(samples[i-1], wi) * beta
new_dtype = this_dtype if this_dtype != other_dtype: new_dtype = com._lcd_dtypes(this_dtype, other_dtype) series = series.astype(new_dtype) otherSeries = otherSeries.astype(new_dtype)
structure_entry = self._lookup_course(structure_id, head_validation=head_validation) root = structure_entry.structure['root'] result = self._load_items(structure_entry, [root], depth, **kwargs) return result[0]
self.assertEqual(self.func(None), [])
self.assertNotIn( 'test_content_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.content) ) self.assertNotIn( 'test_settings_field', new_version.get_explicitly_set_fields_by_scope(scope=Scope.settings) )
for lib in self.libs: for x in xrange(5): self.update_lib(lib) self.loader.clear() self._verify_libs()
totals = totals.dropna(
query = "SELECT * FROM raw_query_coffee" coffees = Coffee.objects.all() self.assertSuccessfulRawQuery(Coffee, query, coffees)
plen = len(provided) + 1 func = getattr(func, '_decorated_function', func)
from salt.states import mysql_grants
orig = pd.Series([1, 2, 3, 4], dtype=np.int64) sparse = orig.to_sparse()
return {"library": unicode(normalized_structure_key)}
context.update(course.cert_html_view_overrides)
raise NotImplementedError
return 'table_name'
repr(s)
self.assertEqual(self.func(None), [base.W008])
else: raise NotImplemented("cannot align with a higher dimensional " "NDFrame")
filename_numpy = '/Users/wesm/tmp/numpy.npz' filename_larry = '/Users/wesm/tmp/archive.hdf5' filename_pandas = '/Users/wesm/tmp/pandas_tmp'
self.original_usage = edit_info.get('original_usage', None) self.original_usage_version = edit_info.get('original_usage_version', None)
self.valid_clear_load['fun'] = 'sys.doc' self.assertNotEqual(fire_event_mock.call_args[0][0]['fun'], 'sys.doc')
df = DataFrame(dict(A=Series(lrange(3), index=date_range( '2000-1-1', periods=3, freq='H', tz=gettz('US/Eastern')))))
return self.as_blocks()
if exc.errno != errno.EEXIST: raise
df = DataFrame(tm.getSeriesData()) df['foo'] = 'bar'
self.assertEqual(expected_item.fields, actual_item.fields)
result = obj.rename(**{axis: arg}) expected = obj.copy() setattr(expected, axis, list('abcd')) self._compare(result, expected)
import salt.ext.six as six
return self.q(css='#dashboard-search-results')
U *= sqrt(X.shape[0])
self.assertTrue(self.video.is_video_rendered('youtube'))
with tm.assertRaises(ValueError): df.hist(layout=(1, 1))
recorder.record_applied("migrations", "5_auto") loader.build_graph() self.assertEqual(num_nodes(), 2)
time.sleep(1) return info(name).get('shell') == shell
self.logout() self.login(self.test_user.email, 'test')
def setUp(self): super(TestDisabledXBlockTypes, self).setUp()
df1 = self.read_html(self.spam_data, '.*Water.*') df2 = self.read_html(self.spam_data, 'Unit') assert_framelist_equal(df1, df2)
self._update_head(course_locator, index_entry, course_locator.branch, new_structure['_id'])
self.coach = AdminFactory.create(password="test") self.client.login(username=self.coach.username, password="test")
return cls.PROFESSIONAL in modes_dict or cls.NO_ID_PROFESSIONAL_MODE in modes_dict
'USE_MICROSITES': False,
with self.assertRaisesRegexp(ValueError, r"(?i)course not found"): perform_delegate_email_batches(entry.id, course_id, task_input, "action_name")
with self.assertRaises(ValueError): Interstate.objects.length()
response = self.session.post( STUDIO_BASE_URL + '/course/', data=self._encode_post_dict(self._course_dict), headers=self.headers )
face = sp.misc.imresize(face, 0.10) / 255.
def is_iterable(x): "A implementation independent way of checking for iterables" try: iter(x) except TypeError: return False else: return True
return self.temps[key]
group = group.ix[:, found]
if [ -z '$debian_chroot' ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) fi
response = self.client.get(reverse("dashboard")) self.assertHttpOK(response)
union = first.union(first) self.assertIs(union, first)
if int(sec_event % 30) == 0: cw = CacheWorker(self.opts) cw.start()
'course', 'org', 'url_name', 'filename', 'xml_attributes')
print(('%10s ' + '%16s ' * (len(header_fields) - 1)) % tuple(header_fields))
if template not in salt.utils.templates.TEMPLATE_REGISTRY: raise CommandExecutionError( 'Attempted to render file paths with unavailable engine ' '{0}'.format(template) )
#html_sidebars = {}
rng = np.random.RandomState(0) rand_data = RandomData(rng) n_features = rand_data.n_features n_components = rand_data.n_components
@Appender('DEPRECATED: ' + _data_method_doc) def data(self, **kwargs):
if user_found_by_email_lookup and LoginFailures.is_feature_enabled(): LoginFailures.increment_lockout_counter(user_found_by_email_lookup)
strip_filenames(initial_course) strip_filenames(exported_course)
return sum([getsizeof(getattr(self, v)) for v in ['_start', '_stop', '_step']])
def env_func(f, argtypes): "For getting OGREnvelopes." f.argtypes = argtypes f.restype = None f.errcheck = check_envelope return f
return narr - 1 - inds
return self.q(css=self._bounded_selector('.action-delete:not(.is-disabled) .remove-user')).present
RETAIN_TO_DEPTH = { 'first_of_year': 1, 'first_of_month': 2, 'first_of_day': 3, 'first_of_hour': 4, 'most_recent': 5, }
from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch
if 'provider' in vm_: vm_['driver'] = vm_.pop('provider')
return self.q(css=self.search_bar_selector).present
user_id = entry.requester.id task_id = entry.task_id
logrotate.__salt__ = {}
COURSE_SCOPE = 'course'
course = self.store.create_course('org_x', 'course_y', 'run_z', self.user_id) signal_handler.send.assert_called_with('course_published', course_key=course.id)
import re import os.path import logging import difflib
DATE_INPUT_FORMATS = [
return [{ 'name': field[1], 'type': field[2], 'size': get_field_size(field[2]), 'null_ok': not field[3], 'default': field[4],
from pygments.lexer import Lexer, do_insertions from pygments.lexers.agile import (PythonConsoleLexer, PythonLexer, PythonTracebackLexer) from pygments.token import Comment, Generic
return Series(self._y_predict_raw[self._valid_obs_labels], index=self._result_index)
if source: cmd = '{0} -s {1}'.format(cmd, source)
self.assertEqual(result.get(), "succeeded") rerun_state = CourseRerunState.objects.find_first(course_key=split_rerun_id) self.assertEqual(rerun_state.state, CourseRerunUIStateManager.State.SUCCEEDED)
'course_action_state',
self.do_targeted_feedback(self.tree) html = contextualize_text(etree.tostring(self._extract_html(self.tree)), self.context) return html
zypper.__salt__ = dict() zypper.__context__ = dict() zypper.rpm = None
return _offset_map[name].copy()
full_event = dict(event, **task_info)
df = DataFrame([[1, 2]]) res = df.mask(DataFrame([[True, False]])) expec = DataFrame([[nan, 2]]) assert_frame_equal(res, expec)
if args.validate: __opts__['pepa_validate'] = True
newXBlock = self.store.publish(xblock.location, self.user_id) self.assertFalse(self.store.has_changes(newXBlock))
if tag_key is None: tag_key = self.__class__.__name__ self._tag_key = tag_key
response = self.client.post( '/i18n/setlang/', data={'language': 'en'}, follow=True, HTTP_REFERER='/nl/vertaald/' ) self.assertRedirects(response, '/en/translated/')
depth = len(b_list)
urlpatterns += ( url(r'^api/', include('edx_proctoring.urls')), )
for video in self.previous_uploads: self.assertIn(video["edx_video_id"], response.content)
self.assertGreater(len(modules), 10)
pass #destroy(vm_['name'])
isgeographic = int_output(lgdal.OSRIsGeographic, [c_void_p]) islocal = int_output(lgdal.OSRIsLocal, [c_void_p]) isprojected = int_output(lgdal.OSRIsProjected, [c_void_p])
self.connection.ensure_connection()
return Response(status=400, data=form_errors)
from salt.modules import solr import os
self.polycollection_factor = 2
if stdout is None and stderr is None: self.assertFalse(term.isalive())
alldata = [x[1] for x in data]
<%block name="requirejs"> {expression} </%block>
existing_config = None if __salt__['chronos.has_job'](name): existing_config = __salt__['chronos.job'](name)['job']
if not os.path.exists(dataset_conf_path): os.makedirs(dataset_conf_path)
expected = [(o, o) for o in options] self.assertEqual(f(input), expected)
contains_nontext = False
return ['platform', 'version', 'expire_at', 'enabled', 'created_at', 'updated_at']
return (self.network_address.is_private and self.broadcast_address.is_private)
for _ in range(3): uninstalled = False frozen = sh("pip freeze", capture=True)
label_to_row_indices = _make_label_to_row_indices(dataset.y)
assert_raises(ValueError, check_symmetric, arr_bad)
if not base.startswith(resolved(settings.DATA_DIR)): raise SuspiciousOperation("Attempted to import course outside of data dir")
class NotReferenced(models.Model): pass
res = cat.remove_categories("c", inplace=True) self.assert_categorical_equal(cat, new) self.assertIsNone(res)
SupportStaffRole().remove_users(self.admin) response = self.client.get('/support/') self.assertTrue(response.status_code, 302)
self.section = get_module_for_descriptor( self.effective_user, self.request, self.section, self.field_data_cache, self.course_key, self.position, course=self.course, )
result = store.select('df', where=where) tm.assert_frame_equal(result, expected)
return self.runtime.get_published_on(self)
command = 'Add-WindowsFeature' management_tools = '' if LooseVersion(__grains__['osversion']) >= LooseVersion('6.2'): command = 'Install-WindowsFeature' management_tools = '-IncludeManagementTools'
LOGGER.debug(self._format_msg(format_str, *args))
get_request_dict = {CapaFactory.input_key(): '3.14'} module.check_problem(get_request_dict)
np.testing.assert_equal(mlp.get_total_input_dimension(['h0', 'h1']), 4) inp = theano.tensor.matrix()
self.assertEqual(self.func(None), [])
import salt.ext.six as six
import ipdb ipdb.set_trace() assert True
closest_subcluster.update(subcluster) self.init_centroids_[closest_index] = \ self.subclusters_[closest_index].centroid_ self.init_sq_norm_[closest_index] = \ self.subclusters_[closest_index].sq_norm_ return False
from __future__ import absolute_import
from __future__ import absolute_import, print_function, with_statement import signal import logging import weakref import traceback import collections
return f_stat_to_dict(self._f_stat_raw)
self.assertQuerysetEqual( self.get_ordered_articles()[5:], ["<Article: Article 6>", "<Article: Article 7>"] )
df = self.df.copy() df['bad'] = np.nan agged = df.groupby(['A', 'B']).mean()
in_cart = False reg_then_add_to_cart_link = ""
import salt.utils import salt.payload
self.assertEqual(response.status_code, 400) res_json = json.loads(response.content)
MONGO_PORT_NUM = int(os.environ.get('EDXAPP_TEST_MONGO_PORT', '27017')) MONGO_HOST = os.environ.get('EDXAPP_TEST_MONGO_HOST', 'localhost')
CourseEnrollment.enroll(self.user, course_id or self.course.id)
import os import logging
for device in devices: if pvdisplay(device): raise CommandExecutionError('Device "{0}" was not affected.'.format(device))
n_samples_per_fold = np.zeros(self.n_folds)
self.assertTrue('datetime64[ns, US/Eastern]' in str(s))
from __future__ import unicode_literals
append_axis = list(a) if existing_table is not None: indexer = len(self.non_index_axes) exist_axis = existing_table.non_index_axes[indexer][1] if append_axis != exist_axis:
problem = self.build_problem( choice_type='checkbox', choices=[False, False, True, True, False], credit_type='halves' )
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_id) if has_instructor_access_for_class(request.user, course_key): try: data = dashboard_data.get_d3_section_grade_distrib(course_key, section)
conn = OlderConnectionMock() self.assertEqual(pg_version.get_version(conn), 90300)
if callable(getattr(self.stream, 'getvalue', None)): return self.stream.getvalue()
if isinstance(stream, StringIO): self.assertEqual(string_data, stream.getvalue()) else: self.assertEqual(string_data, stream.content.decode('utf-8'))
response = explicit_default_with_prefix_view(request, '5') self.assertEqual(response.content, b'Hello World 4')
self._pool = None warnings.warn( 'Multiprocessing-backed parallel loops cannot be nested,' ' setting n_jobs=1', stacklevel=3) return 1
from __future__ import unicode_literals
elif usage_key.category in DIRECT_ONLY_CATEGORIES: return get_published()
FEATURES['AUTOMATIC_AUTH_FOR_TESTING'] = True
url = reverse('instructor_dashboard', kwargs={'course_id': self.course.id.to_deprecated_string()}) response = self.client.get(url)
from __future__ import absolute_import import logging import salt.utils.vault
self.user = {}
for field, error_list in self._errors.items(): if not isinstance(error_list, self.error_class): self._errors[field] = self.error_class(error_list)
mdata = AssetMetadata(asset_key, asset_key.path) mdata.from_storable(all_assets[asset_idx]) mdata.update(attr_dict)
log = logging.getLogger(__name__)
log.setup_temp_logger( getattr(self.options, 'log_level', 'error') )
item.sub = filename
self.a.idols.add(self.d)
TestModel.objects.create(name='Test Object') self.i18n_model = I18nTestModel.objects.create(name='Test Object')
ret['comment'] = 'stage {0} does not exist'.format(self._stage_name)
if definition is None: definition = self.db_connection.get_definition(definition_guid, course_key) bulk_write_record.definitions[definition_guid] = definition if definition is not None: bulk_write_record.definitions_in_db.add(definition_guid)
action_name = 'generating_exec_summary_report' task_fn = partial(upload_exec_summary_report, xmodule_instance_args) return run_main_task(entry_id, task_fn, action_name)
return dict(_list_hosts())
from __future__ import absolute_import import os.path
data = request.POST.copy() data.pop(helpers.ACTION_CHECKBOX_NAME, None) data.pop("index", None)
'default_include': str,
dropout_input_mask_value = 0.
from pandas import Series return Series(self._data.get_ftypes(), index=self._info_axis, dtype=np.object_)
step = None if 0 in cost_matrix.shape else _step1
u = np.zeros((n_targets, n_eval))
subsection_css = 'a[href*="Test_Subsection_2/"]' world.css_click(subsection_css)
return etag.strip('"').replace('\\"', '"').replace('\\\\', '\\') if etag else etag
if self._middleware_chain is None: self.load_middleware()
return [self._get_axis(axi) for axi in self._get_plane_axes_index(axis)]
dt_obj = salt.utils.date_cast(newtime)
return page.q(css='.wrapper-notification-mini.is-hiding').present
assert_raises(ValueError, scale, X_csr, with_mean=False, axis=1)
return self.browser.get_cookie(cookie_name)
__virtualname__ = 'service'
certs_list = self.run_function('keychain.list_certs') if CERT_ALIAS in certs_list: self.run_function('keychain.uninstall', [CERT_ALIAS])
if __salt__['mysql.grant_exists']( grant, database, user, host, grant_option, escape, **connection_args):
input_dict = {'1_2_1': '1', '1_2_2': '2', '1_2_3': '3'} correct_map = problem.grade_answers(input_dict)
'openedx.core.djangoapps.self_paced',
_export_field_content(item, item_dir)
from __future__ import absolute_import import logging import salt.utils
path = url.path if not path.startswith('/'): path = urljoin(response.request['PATH_INFO'], path)
return self.q(css='.action-publish').first
r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'es-us'} r.META = {} self.assertEqual(g(r), 'es')
extra_fields = microsite.get_value( 'REGISTRATION_EXTRA_FIELDS', getattr(settings, 'REGISTRATION_EXTRA_FIELDS', {}) )
def is_nonempty(x): try: return x.shape[axis] > 0 except Exception: return True
tagger_get_structure.sample_rate = 1
svd = TruncatedSVD(opts.n_components) normalizer = Normalizer(copy=False) lsa = make_pipeline(svd, normalizer)
label = field.related_model._meta.verbose_name
dr = date_range(datetime(2011, 3, 13), periods=48, freq=datetools.Minute(30), tz=pytz.utc)
GEOM_PTR = POINTER(GEOSGeom_t) PREPGEOM_PTR = POINTER(GEOSPrepGeom_t) CS_PTR = POINTER(GEOSCoordSeq_t) CONTEXT_PTR = POINTER(GEOSContextHandle_t)
self.mixed_frame.ix[5:20, 'foo'] = nan self.mixed_frame.ix[-10:, 'A'] = nan
modulestore().get_course(self.course.id, depth=None)
self.assertFileContains('subdir/test.txt', 'Can we find')
self.assertAlmostEqual(self.ts.cov(self.ts), self.ts.std() ** 2)
ps = tm.makePeriodFrame() shifted = ps.tshift(1) unshifted = shifted.tshift(-1)
import salt.utils from salt.exceptions import CommandExecutionError from salt.utils import locales
def_ms = modulestore() course = def_ms.get_course(SlashSeparatedCourseKey('MITx', 'edx4edx', 'edx4edx')) CourseStaffRole(course.id).add_users(self.user)
merged_start_value = max(min_all_parents_start_date, block_start)
self.options.log_file = self.config.get( self._logfile_config_setting_name_ )
norb_train = FoveatedNORB(which_set="train", scale=1, restrict_instances=[4, 6, 7, 8])
from __future__ import absolute_import, print_function
self.upgrade_page.indicate_contribution()
if len(result) and mask.any(): result.loc[mask] = np.nan
from __future__ import absolute_import
log.info('Creating master maintenance process') self.process_manager.add_process(Maintenance, args=(self.opts,))
from __future__ import absolute_import
return event['event_type'] == self.USER_SETTINGS_CHANGED_EVENT_NAME
_testing_mode_warnings = (DeprecationWarning, compat.ResourceWarning)
results = np.array(np.where(state.marked == 1)).T
sys.stderr.write( 'WARNING: CONFIG \'{0}\' directory does not exist.\n'.format( self.options.config_dir ) )
separator = u' <b>{}</b> '.format(_('or')) return {self.answer_id: separator.join(self.correct_answer)}
path = os.path.expanduser(path)
with MongoContentstoreBuilder().build() as contentstore: with self.build_with_contentstore(contentstore) as modulestore: yield contentstore, modulestore
house.main_room = self.rooms[-3] house.save()
df.ix['c', 'timestamp'] = nan self.assertTrue(com.isnull(df.ix['c', 'timestamp']))
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch )
return getattr(self._modulestore, name)
ais_nodata('mnistvh.mat', do_exact=do_exact, betas=betas)
print problem.get_html()
self._verify_unit_warning( self.UnitState(is_released=False, publish_state=self.PublishState.NEVER_PUBLISHED, is_locked=False), self.NEVER_PUBLISHED_WARNING )
import warnings import numbers import numpy as np from scipy import linalg from scipy.stats import chi2
Ensure mysecgroup exists: boto_secgroup.present: - name: mysecgroup - description: My security group - profile: keyid: GKTADJGHEIQSXMKKRBJ08H key: askdjghsdfjkghWupUjasdflkdfklgjsdfjajkghs region: us-east-1
for course in _COURSES: if course_id == course['course_id']: return course
with self.assertRaises(DatabaseError): list(Person.objects.all().select_for_update(nowait=True))
self.set_state_from_lcp()
xpath = "//div[@class='indicator-container']/span" self.assert_no_xpath(xml, xpath, self.context)
clf = svm.LinearSVC(penalty='l2', loss='hinge', dual=True, random_state=0) clf.fit(X, Y) assert_array_equal(clf.predict(T), true_result)
X = [[1]] Y = [0]
UserPreference.objects.get_or_create( user=user, key=NOTIFICATION_PREF_KEY, defaults={ "value": UsernameCipher.encrypt(user.username) } )
dt += timedelta(days=1)
today = date.today() TUESDAY = 2 days_until_tuesday = (TUESDAY - today.isoweekday()) % 7 return today + timedelta(days=days_until_tuesday)
@python_2_unicode_compatible class UnsafeClass: def __str__(self): return 'you & me'
pass
if not is_entrance_exams_enabled(): return False if not course.entrance_exam_enabled: return False if not course.entrance_exam_id: return False return True
return self.q(css='.bookmarks-results-header').text[0]
if isinstance(estimator, DBSCAN): return if "random_state" in estimator.get_params(): estimator.set_params(random_state=random_state)
ret = show_instance(name=vm_['name'], call='action')
if not os.path.exists(path): error = '"{0} not found.'.format(path) log.error(error) raise CommandExecutionError(error)
MAILCHIMP_NEW_USER_LIST_ID = ENV_TOKENS.get("MAILCHIMP_NEW_USER_LIST_ID")
return meth
if course_user_group is None: course_user_group, __ = CourseUserGroup.create(cohort_name, course_id) course_cohort, __ = cls.objects.get_or_create( course_user_group=course_user_group, defaults={'assignment_type': assignment_type} ) return course_cohort
from salt import syspaths import salt.config import salt.loader from salt.client import mixins from salt.utils.error import raise_error
weights_with_nan = [np.nan] * 10 weights_with_nan[5] = 0.5 self._compare( o.sample(n=1, axis=0, weights=weights_with_nan), o.iloc[5:6])
from __future__ import absolute_import import logging import os import re import datetime
def f(): df = orig_df.copy()
if force: log.warn('force option is unsupported on MacOS, ignoring')
raise NotImplementedError('subclasses of BaseStorage must provide a _store() method')
if __Location__ != '': return __Location__
df = self.hist_df
result = self.series.copy() result[mask] = self.series * 2 expected = self.series * 2 assert_series_equal(result[mask], expected[mask])
hex = '0101000020E610000000000000000014400000000000003740' p1 = fromstr(hex) self.assertEqual(4326, p1.srid)
scores = cval.cross_val_score(clf, X_sparse, X) assert_array_equal(scores, clf.score(X_sparse, X))
self.assertEqual(AwardNote.objects.count(), 0)
if response.status_code == 404: if self.should_redirect_with_slash(request): return self.response_redirect_class(self.get_full_path_with_slash(request))
return "simple_only_unlimited_args - Expected result: %s" % ', '.join(six.text_type(arg) for arg in args)
from __future__ import unicode_literals
return cls.objects.create( enrolled_by=user, enrolled_email=email, state_transition=state_transition, reason=reason, enrollment=enrollment )
self.assert_requirement_status(grade, due_date, None)
time.sleep(0.01) continue
for sql in self.geometry_sql: self.execute(sql) self.geometry_sql = []
self.wait_for_field(field_id) query = self.q(css='.u-field-{} {}'.format(field_id, field_type)) if query.present: query.first.click()
self.client.logout() super(TestUsersDefaultRole, self).tearDown()
proc_args.insert(0, sys.executable)
self.label_distributions_ = np.multiply( clamp_weights, self.label_distributions_) + y_static remaining_iter -= 1
clf = self.factory(loss="log", alpha=0.01, n_iter=10).fit(X2, Y2)
if physical_line.rstrip() == physical_line: return len(physical_line), "W292 no newline at end of file"
new_values = tslib.date_normalize(self.asi8, self.tz) return DatetimeIndex(new_values, freq='infer', name=self.name, tz=self.tz)
log = logging.getLogger(__name__)
kwargs['timeout'] = timeout
from pylearn2.gui.patch_viewer import PatchViewer
user = User.objects.get(email=staff_email) token = default_token_generator.make_token(user) uidb36 = int_to_base36(user.id)
for batch in chunk(formated_data, SUBSCRIBE_BATCH_SIZE): result = mailchimp.listBatchSubscribe(id=list_id, batch=batch, double_optin=False, update_existing=True)
time.sleep(time_between_creation)
return image.resize((side_length, side_length), Image.ANTIALIAS)
n_classes = int(y.max()) + 1 if loss == 'multinomial' else 1
return _possibly_downcast_to_dtype(result, dtype)
import salt.transport.ipc import salt.config
the_dir = tempfile.mkdtemp(suffix=suffix, prefix=prefix, dir=dir) atexit.register(cleanup_tempdir, the_dir) return the_dir
from edx_proctoring.api import get_all_exams_for_course
poudriere.__salt__ = {}
if not cmd_path: return False elif not _which('ldd'): raise CommandNotFoundError('ldd')
GeoIPRecord_delete = lgeoip.GeoIPRecord_delete GeoIPRecord_delete.argtypes = [RECTYPE] GeoIPRecord_delete.restype = None
pythoncom.CoInitialize() task_service = win32com.client.Dispatch("Schedule.Service") task_service.Connect()
except (TypeError, ValueError, InvalidTabsException) as err: return HttpResponseBadRequest( django.utils.html.escape(err.message), content_type="text/plain" )
with super(UpdateThreadUnicodeTestCase, cls).setUpClassAndTestData(): cls.course = CourseFactory.create()
import integration import salt.utils from salttesting.helpers import ( destructiveTest )
from __future__ import unicode_literals
return True
return "<CourseFixture: org='{org}', number='{number}', run='{run}'>".format(**self._course_dict)
else:
pillar_mock = MagicMock(return_value=pillar_value) filestate.__salt__['pillar.get'] = pillar_mock
import sys import contextlib import os from salt.ext.six.moves import range from salt.ext.six.moves import map
n_samples = X.shape[0] X_train, y_train = X[:n_samples / 2], y[:n_samples / 2] X_test, y_test = X[n_samples / 2:], y[n_samples / 2:]
user_requested_access(self.user) self.assertEqual('granted', get_course_creator_status(self.user))
LIMITED_RETRY_ERRORS = ( SMTPConnectError, SMTPServerDisconnected, AWSConnectionError, )
plot_calibration_curve(GaussianNB(), "Naive Bayes", 1)
WebDriverWait(browser, 6).until(EC.alert_is_present()) return browser.switch_to.alert
from _dummy_thread import get_ident as _get_ident
ovr = OneVsRestClassifier(LinearSVC(random_state=0)) assert_raises(ValueError, lambda x: ovr.coef_, None)
y = iris.target colors = "bry"
actual = grouped_df.pid.transform(len) assert_series_equal(actual, expected)
self.update_structure(destination_course, destination_structure) self._update_head(destination_course, index_entry, destination_course.branch, destination_structure['_id'])
algorithm, variety, raw_params, salt, data = bits version = 0x10
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import CommandExecutionError
return eval(xml.text)
'tcp_pull_port': int,
with modulestore().default_store(ModuleStoreEnum.Type.split): course = CourseFactory.create()
for block in value._data.blocks: self.assertTrue(block.values.flags.writeable) block.values[0] += rhs[block.dtype]
page = StaffPage(self.browser, self.course_id) EmptyPromise(page.is_browser_on_page, 'Browser is on staff page in LMS').fulfill() return page
mcc = assert_warns_message(RuntimeWarning, 'invalid value encountered', matthews_corrcoef, y_true, rng.randint(-100, 100) * np.ones(20, dtype=int))
return getattr(self.queryables.get(self.lhs), 'meta', None)
if _np_version_under1p9: raise nose.SkipTest("Numpy version is under 1.9")
course = course or self.course role = Role.objects.create(name=role_name, course_id=course.id) role.users = users
def __init__(self, location, content): self.location = location self.content = content def get_id(self): return self.location.to_deprecated_son()
value.encode(charset)
return K, np.empty((X.shape[0], X.shape[0], 0))
model.dataset = dataset
urlpath.delete()
df['x'] = 'none' df.ix[2:7, 'x'] = ''
init_params = init_params[1:]
self.votes.update(votes)
idx1 = pd.PeriodIndex([pd.NaT, '2011-01-01', '2011-01-02', '2011-01-03'], freq='D') self.assertTrue(idx1.is_monotonic)
X = check_array(X, accept_sparse='csr') return safe_sparse_dot(X, self.components_.T)
_valid(status, comment='Kill signal \'{0}\' successfully' ' sent to the container \'{1}\''.format(signal, container), id_=container)
head, tail = reordered_frame[:10].copy(), reordered_frame head['A'] = 1
rhs = -2 * df.iloc[3:0:-1, 2:0:-1]
if self.include_arguments: return sum(self._stacks[stack].values()) else: return self._stacks[stack]
for middleware_method in self._request_middleware: response = middleware_method(request) if response: break
rng = np.random.RandomState(0) noise = 0.1 * rng.randn(Npts, 1) X = np.concatenate((X, noise), 1)
self.assertRaises( ValidationError, CourseCompleteImageConfiguration(mode='test2', icon=get_image('unbalanced')).full_clean )
if not issubclass(cls, AppConfig): raise ImproperlyConfigured( "'%s' isn't a subclass of AppConfig." % entry)
self.expect_error_on_file_content( '', "The file must end with the extension '.csv'.", file_suffix='.notcsv' )
self.__xml = False self.__no_lock = False self.__no_raise = False self.__refresh = False
course2.certificates_display_behavior = 'early_no_info' cert_status = {'status': 'unavailable'} self.assertEqual(_cert_info(user, course2, cert_status, course_mode), {})
f = lambda *args: 0 assert_raises(ValueError, make_scorer, f, needs_threshold=True, needs_proba=True)
FILE_UPLOAD_PERMISSIONS = None
raise NotImplementedError
try: os.remove(path) except IOError: pass return None
result = df.sort_values(by=['grade', 'id']) expected = df.iloc[[2, 1, 5, 4, 3, 0]] tm.assert_frame_equal(result, expected)
actual = grouped_df.pid.transform(len) assert_series_equal(actual, expected)
return super(PythonSerializer, self).getvalue()
raise NotImplementedError
item = self.store.get_item(usage_key) if verify_is_draft: self.assertTrue(getattr(item, 'is_draft', False)) return item
assert_greater(np.min(decision_func[-2:]), np.max(decision_func[:-2])) assert_array_equal(pred, 6 * [1] + 2 * [-1])
self.create_programs_config() self.mock_programs_api(status_code=500) actual = utils.get_programs(self.user) self.assertEqual(actual, [])
ul_longer = ul + [2] ul_longer._IndexError = TypeError ul._IndexError = TypeError self.assertNotEqual(ul_longer, pl) self.assertGreater(ul_longer, ul)
self.attributes["commentable_id"] = self.attributes["id"] self.retrieved = True return self
from salt.ext.six.moves import shlex_quote as _cmd_quote
import salt.utils
rings = tuple(r for r in poly) self.assertEqual(poly, Polygon(rings[0], rings[1:]))
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
payload['email'] = user.email
self.assertEqual(len(Tag.objects.order_by('parent')), 5)
store.save(content)
return None
log = logging.getLogger(__name__)
data.pop() for minion, ret in data: ret[minion] = json.loads(ret)
self._update_release_dates(self.date_one, self.date_one, self.date_one) self._verify_release_date_source(self.sequential, self.chapter)
yield val
self.navigate_to_course_unit() self.edit_component() self.open_advanced_tab() self.video.upload_handout(handout_filename) if save_settings: self.save_unit_settings()
INSTANCE_NAME = __random_name() PROVIDER_NAME = 'profitbricks' DRIVER_NAME = 'profitbricks'
return (router, name, admin_state_up, kwargs)
angle = np.arctan(u[1] / u[0])
self.assertNotContains(response, '<h2>Author-book relationships</h2>') self.assertNotContains(response, 'Add another Author-Book Relationship') self.assertNotContains(response, 'id="id_Author_books-TOTAL_FORMS"')
return constant_time_compare( _unsalt_cipher_token(request_csrf_token), _unsalt_cipher_token(csrf_token), )
if os.name == 'nt': from ctypes import WinDLL lwingdal = WinDLL(lib_path)
if not isinstance(config, dict): return False, ('Configuration for ps beacon must be a dictionary.') return True, 'Valid beacon configuration'
pass
from pandas.tseries.resample import get_resampler_for_grouping return get_resampler_for_grouping(self, rule, *args, **kwargs)
with timezone.override(timezone.get_fixed_timezone(-300)): self.assertFalse(self.storage.exists('test.file.tz.off'))
from __future__ import absolute_import import logging import os import pprint import time
COURSE_REGEX = re.compile(r'^(.*?/courses/)(?!v[0-9]+/[^/]+){}'.format(settings.COURSE_ID_PATTERN))
from __future__ import absolute_import
kwds.setdefault('c', plt.rcParams['patch.facecolor'])
with self.assertRaises(pickle.PickleError): cache.add('unpicklable', Unpicklable())
clf_weights = svm.SVC() clf_weights.fit(X, y, sample_weight=sample_weight_last_ten)
series = self.frame.xs(self.frame.index[0])
return None
rng = np.random.RandomState(0) rand_data = RandomData(rng, scale=7) n_components = rand_data.n_components
for course_mode in CourseMode.objects.filter(course_id=self.course.id): course_mode.sku = None course_mode.save()
for probe_name in new_probes_keys_set: new_probes[probe_name] = expected_probes.pop(probe_name)
return self._geom_attribute('envelope', **kwargs)
if self._multi_take_opportunity(tup): return self._multi_take(tup)
if not _np_version_under1p9: raise nose.SkipTest("Numpy version is greater than 1.9")
from __future__ import unicode_literals
html_theme = 'agogo'
keep_lambda = np.ones(n_features, dtype=bool)
import os
import salt.utils from salt.exceptions import CommandExecutionError
assert_equal(X_r2inv.getnnz(), X_r.getnnz())
import salt import salt.utils.odict import salt.utils import salt.utils.dictupdate import salt.utils.network from salt.exceptions import CommandExecutionError, SaltInvocationError import salt.utils.cloud import salt.config
return len(self.aes) + 1
new_values = self.values.take_nd(indexer, fill_value=fill_value)
from __future__ import absolute_import try: import pwd except ImportError: pass import logging import time
url(r'^api/courses/', include('course_api.urls')),
if not inplace: result = self.copy() else: result = self if result.is_consolidated: return result result._consolidate_inplace() return result
self.assertEqual(len(list(Comment.objects.all())), 4)
if not hasattr(self, 'W_lr_scale'): self.W_lr_scale = None
return u'{0}@test.com'.format(username)
class FileSessionTests(SessionTestsMixin, unittest.TestCase):
course_id, _ = strip_ccx(course_id) with self._modulestore.branch_setting(branch_setting, course_id): yield
self.label_index_to_name = ('category', 'instance', 'elevation', 'azimuth', 'lighting condition')
self.check_val('True', True)
msg = _format_terse(tcolor, comps, ret, colors, tabular) hstrs.append(msg) continue
keep_looping = False for alias, entries in six.iteritems(providers.copy()): for driver, details in six.iteritems(entries):
if 'order' in signature(np.copy).parameters: def safe_copy(X): return np.copy(X, order='K') else: safe_copy = np.copy
return np.sum(self.score_samples(X))
import os import uuid import pprint import logging try:
X = make_low_rank_matrix(n_samples=n_samples, n_features=n_features, effective_rank=rank, tail_strength=0.1, random_state=0) assert_equal(X.shape, (n_samples, n_features))
__proxyenabled__ = ['rest_sample']
self.dom_id = dom_id self.extra_context = extra_context self.js_module = js_module self.template = template self.kml_urls = kml_urls
self.request.user = self.effective_user
yield_results[current_node] = should_yield_node
self.user_partition.scheme.current_group = groups[1] group2 = self.partition_service.get_group(self.user_partition) self.assertEqual(group2, groups[1])
result = requests.get( "http://169.254.169.254/latest/dynamic/instance-identity/document", proxies={'http': ''}, timeout=AWS_METADATA_TIMEOUT, )
([[10, 10, 8], [9, 8, 1], [9, 7, 4]], 18 ),
ground_truth_coef = rng.randn(n_features) y = np.dot(X, ground_truth_coef)
return False
s = Series([0, 1, np.nan, 3, 4, 5])
pass
self.url = reverse( self.url_endpoint_name, kwargs={'username': self.user.username, 'preference_key': preference_key} )
certs = _list_certs()
return self.tag_function(name)
try: import psycopg2 import psycopg2.extras HAS_PG = True except ImportError: HAS_PG = False
for c in self.values_axes:
from openedx.core.djangoapps.credit.api import set_credit_requirement_status
est.fit(data, y) threshold = 0.5 * np.mean(est.feature_importances_) mask = est.feature_importances_ > threshold assert_array_equal(X_transform, data[:, mask])
self.assertEqual(getattr(obj, op)(), datetime(2011, 11, 1))
'datadog',
sel = self.series[ordered > 0] exp = self.series[self.series > 0] assert_series_equal(sel, exp)
if instance.id and not instance.contacted: old_instance = ApiAccessRequest.objects.get(pk=instance.id) if instance.status != old_instance.status: _send_decision_email(instance)
HOMEPAGE_COURSE_MAX = None
df = DataFrame({'date': [pd.Timestamp('20130101').tz_localize('UTC'), pd.NaT]})
else: response.status_code = 403 response.content = msg
return reverse_course_url( 'group_configurations_detail_handler', self.course.id, kwargs={'group_configuration_id': cid}, )
seed = module.seed self.assertTrue(seed is not None)
verbose_name=_("Changed by"),
'ENABLE_SERVICE_STATUS': False,
MESSAGE = _('Unable to switch to specified branch. Please check your branch name.')
adjustable_paths = [ path for path in paths if matches_patterns(path, self._patterns.keys()) ]
password_label = _(u"Password")
from salttesting import TestCase, skipIf from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
date_config = vim.HostDateTimeConfig(ntpConfig=ntp_config)
greek += [x.capitalize() for x in greek]
app_module = import_module(app_name)
teams_per_topic = 10 topics = self.setup_topics(num_topics=self.NUM_TOPICS, teams_per_topic=teams_per_topic) self.assert_serializer_output(topics, num_teams_per_topic=teams_per_topic, num_queries=1)
num_vis = rng.randint(1,11) n_classes = rng.randint(1, 11)
keep_lambda = lambda_ < self.threshold_lambda coef_[~keep_lambda] = 0
self.run_function('keychain.uninstall', [CERT_ALIAS]) certs_list = self.run_function('keychain.list_certs')
login = self.client.login(username='testclient', password='password') self.assertTrue(login, 'Could not log in')
manager = CourseImportManager(*args, **kwargs) return list(manager.run_imports())
return force_str(signature)
self.set_info()
X = np.zeros((5, 5)) assert_array_equal(clf.predict(X), np.zeros(5))
with self.assertRaises(SearchIndexingError): reindex_course_and_check_access(self.course.id, self.user)
return self._geomgen(capi.geom_diff, other)
get_edx_api_data(program_config, self.user, 'programs', cache_key=cache_key) get_edx_api_data(program_config, self.user, 'programs', resource_id=resource_id, cache_key=cache_key)
CLIENT_TIMEOUT = 60
from __future__ import absolute_import import socket import logging import threading from multiprocessing import Queue
provider = generics.get_object_or_404(CreditProvider, provider_id=provider_id)
itr = read_stata( fname, iterator=True, convert_dates=convert_dates, convert_categoricals=convert_categoricals) pos = 0 for j in range(5):
self.assert_query_params_equal(httpretty.last_request(), expected_params)
amount_value = decimal.Decimal(amount).quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_DOWN)
self.split_modulestore.fix_not_found(course_version_locator, user_id)
root_dir = path(mkdtemp_clean()) export_course_to_xml(self.store, content_store, course_id, root_dir, 'test_roundtrip')
return super(XmlDescriptor, cls).parse_xml( etree.fromstring(xml_data), system,
import salt.utils
self.assertEqual(module.attempts, 1)
self.assertQuerysetEqual( Book.published_objects.all(), [ "How to program", ], lambda b: b.title )
self._assert_course_verification_status(None)
tls.__grains__ = {} tls.__salt__ = {} tls.__context__ = {} tls.__opts__ = {}
return cls._reso_freq_map[resostr]
params, response = _validate_post_params(request.POST) if response is not None: return response
assert_almost_equal(matthews_corrcoef(y_true, y_true), 1.0)
cv = check_cv(self.cv, classifier=False)
if not activation_key: activation_key = uuid.uuid4().hex
_tables() s = self.get_storer(key) if s is None: return
X = np.asmatrix(X)
self.related_updates.setdefault(model, []).append((field, None, value))
ret.update({host_name: {'Error': error}})
continue
UserProfile(user=user).save()
sampling_algorithm = {}
minibatch_iterators = iter_minibatches(data_stream, minibatch_size) total_vect_time = 0.0
if isinstance(plotf, compat.string_types): from pandas.tools.plotting import _plot_klass plotf = _plot_klass[plotf]._plot
class SpecialArticle(Article): pass
from __future__ import absolute_import import os
master_doc = 'index'
self._verify_branch_setting(ModuleStoreEnum.Branch.draft_preferred) _verify_revision_is_published(location)
self.assertRaises(ValueError, lambda: df1 == df2)
warnings.simplefilter('always') sp.csr_matrix([1.0, 2.0, 3.0]).max(axis=0)
pass
result = df.groupby('A', as_index=False).cumsum() assert_frame_equal(result, expected)
return [self.visible_layer] + self.hidden_layers
if self.corruption_level < 1e-5: return x
ransac_estimator.fit(X, yyy)
def constant_time_compare(val1, val2): return hmac.compare_digest(force_bytes(val1), force_bytes(val2))
return client.programs.complete.post({'completed_courses': course_certificates})['program_ids']
df = DataFrame(data={'i64': [2**62]}) df.to_sql('test_bigint', self.conn, index=False) result = sql.read_sql_table('test_bigint', self.conn)
data = rng.binomial(1, 0.5, size=np.size(indices)) * 2 - 1
('NLS_LANG', '.UTF8'), ('ORA_NCHAR_LITERAL_REPLACE', 'TRUE'),
E = (np.diag(A) + np.diag(R)) > 0 e[:, it % convergence_iter] = E K = np.sum(E, axis=0)
wp = self.panel.to_panel() wp2 = wp.reindex(major=wp.major_axis[:-1]) lp2 = wp2.to_frame()
tol = 2 if oracle else 5
store = self._get_modulestore_for_courselike(course_key) if hasattr(store, method): return store else: raise NotImplementedError(u"Cannot call {} on store {}".format(method, store))
self.assertIn("Error", resp.content)
return self.q(css='.components-list-heading-text').text[0]
'rule': None
if isinstance(value, basestring): return value return json.dumps(value, cls=EdxJSONEncoder)
return wrapper
graph.data = np.exp(-graph.data / graph.data.std())
tag = self.resolve(yaml.nodes.ScalarNode, node.value, [True, True]) deep = False
assert_raises(AssertionError, assert_raise_message, (ValueError, AttributeError), "test", _no_raise)
left_index = np.searchsorted(tree, bin_X & left_mask) right_index = np.searchsorted(tree, bin_X | right_mask, side='right') return left_index, right_index
return
if _is_url(io): io = _urlopen(io) io, _, _ = get_filepath_or_buffer(io)
return descriptor.id
course = self.store.delete_course(course_key, self.user_id)
if not len(dtypes) or _ALLOWED_DTYPES[dtype_check] >= dtypes: return True
self.order_by = rhs.order_by[:] if rhs.order_by else self.order_by self.extra_order_by = rhs.extra_order_by or self.extra_order_by
likelihood = (i * likelihood + x_likelihood) / (i + batch_size0)
if not include_expired: found_course_modes = found_course_modes.filter( Q(_expiration_datetime__isnull=True) | Q(_expiration_datetime__gte=now) )
response = self.client.post(self.url, { "email": self.EMAIL, "password": self.PASSWORD, }) self.assertHttpOK(response)
set_credit_requirement_status( user.username, course_key, 'reverification', checkpoint.checkpoint_location, status='declined' )
if descriptor_orig_usage_key is not None: tracking_context['module']['original_usage_key'] = unicode(descriptor_orig_usage_key) tracking_context['module']['original_usage_version'] = unicode(descriptor_orig_version)
if instance is None: return self return self.related_manager_cls(instance)
pass
dpkg.__grains__ = {} dpkg.__salt__ = {} dpkg.__context__ = {}
new_params = estimator.get_params() for param_name, original_value in original_params.items(): new_value = new_params[param_name]
mock_get.return_value = Mock(status_code=200, text=response_success, content=response_success) transcript_name = transcripts_utils.youtube_video_transcript_name(youtube_text_api) self.assertEqual(transcript_name, 'Custom')
urlpatterns += ( url(r'^xdomain_proxy.html$', 'cors_csrf.views.xdomain_proxy', name='xdomain_proxy'), )
request._dont_enforce_csrf_checks = not self.enforce_csrf_checks
if not user: user = AnonymousUser()
for mode in available_modes: CourseModeFactory.create(mode_slug=mode, course_id=self.course.id)
df = DataFrame(self.frame, copy=True) column = df.columns[0]
assert layer_name is None
self.assertNotIn("strict-transport-security", self.process_response(secure=False))
self.oauth_page.confirm() self.oauth_page.wait_for_element_absence( 'input[name=authorize]', 'Authorization button is not present' )
last_indent = start if verbose >= 3: print("... " + line.rstrip())
self.W = sharedX(W, name='W') self.v = sharedX(v, name='v') self.mean = sharedX(mean, name='mean')
rng = check_random_state(0) X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=rng)
urlpatterns += ( url(r'^404$', handler404), url(r'^500$', handler500), )
self.assertTrue(notnull(f(self.series))) self.assertTrue(isnull(f(self.series, skipna=False)))
children = self.get_item_from_modulestore(self.seq_usage_key).children self.assertEqual(unit1_usage_key, children[1]) self.assertEqual(unit2_usage_key, children[2])
response = requests.get(self.url + "?test_param=") self.assertEqual(response.status_code, 400)
return _after_ignition_network_profile(cmd, ret, name, network_profile, path, nic_opts)
MESSAGE = None def __init__(self, message=None): if message is None: message = self.message super(GitImportError, self).__init__(message)
self.q(css="#verify_now_button").click() PaymentAndVerificationFlow(self.browser, self._course_id, entry_point='verify-now').wait_for_page()
old_url = staticfiles_storage.base_url staticfiles_storage.base_url = '/test/' try: self.assertEqual(static('path'), '/test/path') finally: staticfiles_storage.base_url = old_url
CourseEnrollment.unenroll_by_email("jack@fake.edx.org", course_id) self.assertFalse(CourseEnrollment.is_enrolled(user, course_id)) self.assert_unenrollment_event_was_emitted(user, course_id)
root_dir = self.server.config.get('root_dir') path = '{}{}'.format(root_dir, path) return path.split('?')[0]
browsers = [] browser = None
self.assertTrue(expected_published_prefix in unit.last_published_text) self.assertTrue(expected_saved_prefix in unit.last_saved_text)
if depth == 0: self.get_module.side_effect = lambda x: LeafModuleFactory(descriptor_cls=HtmlDescriptor) else: self.get_module.side_effect = lambda x: ContainerModuleFactory( descriptor_cls=VerticalBlock, depth=depth - 1 )
self.publish_item(store, self.vertical.location) self.reindex_course(store) response = self.search() self.assertEqual(response["total"], 4)
return OrderedDict(settings.LANGUAGES)
url(r'raises/$', views.raises),
self.user.profile.year_of_birth = 1980 self.user.profile.profile_image_uploaded_at = TEST_PROFILE_IMAGE_UPLOAD_DT self.user.profile.save()
asset_key = make_asset_id(course_id, asset) asset_md = AssetMetadata(asset_key) asset_md.from_xml(asset) all_assets.append(asset_md)
cmd = list2cmdline(['wmic', 'os', 'get', 'lastbootuptime']) outs = __salt__['cmd.run'](cmd)
call_command('import', self.content_dir, self.course_dir) self.assertIsNotNone(store.get_course(self.truncated_key))
self.assertRaises(TypeError, td.astype, 'int32')
if 'schedule' not in opts: opts['schedule'] = {}
for row in rows: yield [unicode(item).encode('utf-8') for item in row]
if existing['code'] == 200:
unit = self.go_to_unit_page() test_block = unit.xblocks[1] title_on_unit_page = test_block.name container = test_block.go_to_container() self.assertEqual(container.name, title_on_unit_page)
MIN_DOCKER = (1, 4, 0) MIN_DOCKER_PY = (1, 4, 0)
self.assertRaises( ValueError, store.select_column, 'df', 'values_block_0')
next_items[i] = (plc[min_len:], trim_join_unit(unit, min_len))
for lib in self.list_libraries(): if all([lib[key] == kwargs[key] for key in kwargs]): return True return False
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
to_json_val = {'type': self.type, 'name': self.name} if self.is_hidden: to_json_val.update({'is_hidden': True}) return to_json_val
import salt.utils.http import salt.ext.six as six from salt._compat import ElementTree as ET
with patch_edxnotes_api_settings("http://example.com"): self.assertEqual("http://example.com/", get_endpoint_function())
if hasattr(self, '_target_space'): return self._target_space else: return self.get_output_space()
import re import inspect
return conn.validate_template(template_body, template_url)
sparse_results = sparse_classifier.staged_predict(X_test_sparse) dense_results = dense_classifier.staged_predict(X_test) for sprase_res, dense_res in zip(sparse_results, dense_results): assert_array_equal(sprase_res, dense_res)
import salt.utils import salt.utils.jid import salt.ext.six as six
if unit.is_null: null_upcast_classes[upcast_cls].append(dtype) else: upcast_classes[upcast_cls].append(dtype)
if 'custom_check' in self.text_customization:
import glob autosummary_generate = glob.glob("*.rst")
if X.shape[1] == 1: ddof = 0
self.select = [] for col in rhs.select: self.add_select(col.relabeled_clone(change_map))
self.assertFalse(check_password(None, make_password('lètmein')))
self.assertIn("logo_image", json_data)
raise TypeError("Model.censor_updates has been replaced by " "Model.modify_updates.")
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, Mock, patch
_schema = self._update_schema_to_aws_notation(schema) _schema.update({'$schema': _Swagger.JSON_SCHEMA_DRAFT_4, 'title': '{0} Schema'.format(model)})
return LtiConsumer( consumer_name='Consumer Name', consumer_key='Consumer Key', consumer_secret='Consumer Secret' )
raise exc
for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys): self._generate_added_field(app_label, model_name, field_name)
pillar_root = os.path.abspath(self.options.pillar_root) self.config['pillar_roots'] = {'base': _expand_glob_path([pillar_root])}
num_braces = 0
with self.assertRaises(ItemNotFoundError): modulestore().get_item(course.location.for_branch(BRANCH_NAME_PUBLISHED))
self.find_css('.action-edit .edit').first.click()
return self.EXPORTED_COURSE_AFTER_DIR_NAME.format(unicode(uuid.uuid4())[:8])
db_config = { 'host': MONGO_HOST, 'port': MONGO_PORT_NUM, 'db': 'test_xmodule', }
S, rows, cols = make_checkerboard((30, 30), 3, noise=0.5, random_state=0)
self.assertIn(draft_html.location, public_vertical.children)
'openedx.core.djangoapps.theming',
#ax.plot([1], [1], [1], color=c, label=label)
if self._dirty: self.redo_theano()
df = DataFrame(self.frame, copy=True) column = df.columns[0]
if isinstance(sources, str): sources = sources.split(',') for src in sources: _get_src(tree_base, src, saltenv)
max_cols = self.max_cols max_rows = self.max_rows
pass
'organizations',
left = left + right * 0 right = right + left * 0
DEFAULT_SITE_ID = 1
qtBindingInstalled = True try: from PyQt4 import QtGui except ImportError: try: from PySide import QtGui except ImportError: qtBindingInstalled = False
return object.__new__(cls)
X_checked = assert_warns(DeprecationWarning, check_array, [42], ensure_2d=True) assert_array_equal(np.array([[42]]), X_checked)
self.assertGreaterEqual(iteration_over_courses_time_1.elapsed, iteration_over_groups_time_1.elapsed) self.assertGreaterEqual(iteration_over_courses_time_2.elapsed, iteration_over_groups_time_2.elapsed)
ret.add('base')
response = self.client.get(reverse('admin:admin_views_section_changelist')) self.assertContains(response, '<body class=" app-admin_views model-section ')
kwarg_re = re.compile(r"(?:(\w+)=)?(.+)")
expected_message = self.emails[0].html_message returned_email_info = email_info[0] received_message = returned_email_info[u'email'][u'html_message'] self.assertEqual(expected_message, received_message)
class Team(models.Model): name = models.CharField(max_length=100)
from pandas.core.config import get_option encoding = get_option("display.encoding") return self.__unicode__().encode(encoding, 'replace')
from salt.exceptions import ( SaltCloudNotFound, SaltCloudException, SaltCloudSystemExit, SaltCloudConfigError )
continue
try: Profile.objects.get_or_create(person=Person(id=1)) except IntegrityError: pass else: self.skipTest("This backend does not support integrity checks.")
self.assertEqual(response.status_code, 400)
for tz in ['US/Eastern', 'Asia/Tokyo']: idx = pd.DatetimeIndex(['2011-01-01 09:00', pd.NaT, '2011-01-01 11:00'])
queue_instances(vm_['instance_id_list'])
with self.assertNumQueries(6): override_field_for_ccx(self.ccx, chapter, 'start', ccx_start)
edit_link = "//" + settings.CMS_BASE + '/container/' + unicode(block.location)
cmd.extend(packages)
self.minions = self._spawn_minions()
if self.app_configs: raise RuntimeError("populate() isn't reentrant")
if refresh: refresh_db()
from __future__ import absolute_import import re import sys
same_index = self.bseries.reindex(self.bseries.index) tm.assert_sp_series_equal(self.bseries, same_index) self.assertIsNot(same_index, self.bseries)
mock_run.return_value = xml_command_fail self.assertFalse(glusterfs.add_volume_bricks('Newvolume1', ['new:/path']))
for alias, driver, name in vms_to_destroy: ret = processed[alias][driver][name] if not ret: continue
self.assertFalse(self.cohort_management_page.is_category_selected())
for db_name in self._databases_names(include_mirrors=False): inhibit_post_migrate = ( self.available_apps is not None or
if vm_['profile'] and config.is_profile_configured(__opts__, __active_provider_name__ or 'azure', vm_['profile'], vm_=vm_) is False: return False
self.assertEqual(response.status_code, 302)
STRUCT_SIZE = {
if obj.ndim == 1: for a in arg: try: colg = self._gotitem(obj.name, ndim=1, subset=obj) results.append(colg.aggregate(a))
if not referer: return True
termination_criterion = EpochCounter(5)
try: message = force_text(exception.args[0]) except (IndexError, UnicodeDecodeError): message = '(Could not get exception message)'
def import_epsg(self, epsg): "Imports the Spatial Reference from the EPSG code (an integer)." capi.from_epsg(self.ptr, epsg)
headers_str = "{}\n\n{}".format(method, header_string(headers_dict)) body_str = body_string(body_dict) message = headers_str + body_str return message
iris = load_iris() perm = rng.permutation(iris.target.size) iris.data = iris.data[perm] iris.target = iris.target[perm]
view = RedirectView() response = view.dispatch(self.rf.head('/foo/')) self.assertEqual(response.status_code, 410)
dr.hour
self.setup_system_xmodule_mocks_for_lti20_request_test() mock_request = self.get_signed_lti20_mock_request(self.GOOD_JSON_PUT) response = self.xmodule.lti_2_0_result_rest_handler(mock_request, None) self.assertEqual(response.status_code, 404)
return PushNotificationConfig.is_enabled()
if sp_version >= (0, 12): solvers.append('lbfgs')
image = image * 255. image = np.cast['uint8'](image)
with self.assertRaises(GDALException): setattr(band, 'nodata_value', 10)
import elementtree.ElementTree as ElementTree
timezone.__salt__ = {} timezone.__opts__ = {}
'ID': val
contentstore().delete(content.get_id()) del_cached_content(content.location)
tm.assertIsInstance(result, PeriodIndex)
assert_frame_equal(frame, align(res), check_dtype=how not in ('right', 'outer'))
precs_chol_diag = 1. / np.sqrt(covars_diag) log_prob = _estimate_log_gaussian_prob_diag(X, means, precs_chol_diag) assert_array_almost_equal(log_prob, log_prob_naive)
from __future__ import absolute_import import os
self.assertEqual([x.get_text() for x in ax.get_legend().get_texts()], base_expected[:i] + base_expected[i + 1:])
raise
self.dashboard_page.visit()
classifier.set_params(class_weight='balanced') coef_balanced = classifier.fit(X, y).coef_.copy()
ts = Timestamp('20130501T071545.123456789') self.assertEqual(ts.value, expected_value) self.assertIn(expected_repr, repr(ts))
receipt_id = models.CharField( db_index=True, default=generateUUID, max_length=255, )
from __future__ import absolute_import
self.send_response(200) self.send_header('Content-type', 'application/json') self.end_headers() self.wfile.write(response)
return self.get_selector('#btn-start-generating-certificates')
with self.assertRaises(TypeError): cntry_g.country_code(17) with self.assertRaises(TypeError): cntry_g.country_name(GeoIP2)
values = self.values + n * self.freq.n if self.hasnans: values[self._isnan] = tslib.iNaT return PeriodIndex(data=values, name=self.name, freq=self.freq)
self.assertIsNone( CourseEnrollment.enroll_by_email("not_jack@fake.edx.org", course_id) ) self.assert_no_events_were_emitted()
if isinstance(fill_value, np.ndarray): if issubclass(fill_value.dtype.type, (np.datetime64, np.timedelta64)): fill_value = tslib.iNaT else:
(12, True, u"False")
writer = MigrationWriter(new_migration) with open(writer.path, "wb") as fh: fh.write(writer.as_string())
self.assertAcceptEquals( 'rel;q=1.0, rel;q=0.5', self.process_request(accept='rel-ter;q=1.0, rel;q=0.5') )
clf = BernoulliNB(alpha=1.0) clf.fit(X, Y)
for iter_ in range(self.n_iter):
CourseRerunState.objects.failed(course_key=destination_course_key) logging.exception(u'Course Rerun Error')
result = self.collection.update( {'_id': location.to_deprecated_son()}, {'$set': update}, multi=False, upsert=allow_not_found,
data = { "form-TOTAL_FORMS": "3", "form-INITIAL_FORMS": "3", "form-MAX_NUM_FORMS": "0",
return [self.indices[name] for name in names]
return { field: course.fields[field] for field in CourseSummary.course_info_fields if field in course.fields }
if rerandomize in [RANDOMIZATION.NEVER, 'false', RANDOMIZATION.PER_STUDENT]: self.assertEqual(seed, _reset_and_get_seed(module))
if self.required: raise ValidationError(self.error_messages['required'], code='required')
context['company_tos_urltext'] = _("Terms of Service &amp; Honor Code")
req = self._get_POST_csrf_cookie_request() req2 = CsrfViewMiddleware().process_view(req, post_form_view, (), {}) self.assertEqual(403, req2.status_code)
from salt.ext.six.moves import map from salt.exceptions import CommandNotFoundError
if not _is_master() and _get_none_or_value(host) is None: err = [ 'solr.pre_indexing_check can only be called by "master" minions'] return _get_return_dict(False, err)
self.setUp()
__func_alias__ = { 'reload_': 'reload' }
from __future__ import print_function from __future__ import absolute_import import os import sys import errno import logging import traceback from salt.ext.six import string_types
return escape("Hello {0}!".format(context['name']))
self.axis = axis return self
master_doc = 'contents'
self.wait_for_element_visibility(upload_btn_selector, 'upload button is present')
self.client.logout() response = getattr(self.client, method)(self.path, content_type=JSON_CONTENT_TYPE) self.assertEqual(response.status_code, 401)
self.pub_channel.on_recv(self._process_cmd_socket)
mat = ma.masked_all((2, 3), dtype=int) frame = DataFrame(mat, columns=['A', 'B', 'C'], index=[1, 2])
if params.get('decision') == u'CANCEL': raise CCProcessorUserCancelled()
X, y = 3 * diabetes.data, diabetes.target G = np.dot(X.T, X) Xy = np.dot(X.T, y)
if len(possible_ids) == 0: return 'noname'
ContentType.objects.clear_cache() with self.assertNumQueries(1): ContentType.objects.get_for_model(ContentType)
with RemoveGroupsAndPermissions(): class ExtensionUser(AbstractUser): date_of_birth = models.DateField()
with self.assertRaises(RuntimeError): Apps(installed_apps=None)
self.assertDictEqual(cookie_data1.__dict__, cookie_data2.__dict__)
def f(): s[l]
from __future__ import unicode_literals
assert max(pd.max(), hd.max()) < .17
import salt.utils import salt.ext.six as six from salt.exceptions import CommandExecutionError
self.xml_data = "static 463139" self.xml_url = "8e4cce2b4aaf4ba28b1220804619e41f"
after_due_date = CapaFactory.create(showanswer='closed', max_attempts="1", attempts="0", due=self.yesterday_str)
self.assertTrue(len(controllers) == 0)
ac = AppConfig('label', Stub(__path__=['a', 'a'])) self.assertEqual(ac.path, 'a')
EDX_PLATFORM_REVISION = 'unknown'
timedelta_NaT = np.timedelta64('NaT')
x_plot = np.linspace(0, 10, 100)
with self.assertRaises(ValueError): InvalidModelForm(instance=Category)
course = modulestore().get_course(course_key) if course is None: return HttpResponse(status=400)
weight_cdf = sample_weight[sorted_idx].cumsum() percentile_idx = np.searchsorted( weight_cdf, (percentile / 100.) * weight_cdf[-1]) return array[sorted_idx[percentile_idx]]
clustering = AgglomerativeClustering( n_clusters=10, connectivity=connectivity.toarray(), affinity="manhattan", linkage="ward") assert_raises(ValueError, clustering.fit, X)
to_process = [] if children: to_process = self._query_children_for_cache_children(course_key, children)
if self.multi_class == 'multinomial': classes_ = [None] warm_start_coef = [warm_start_coef]
pass
return redirect('about_course', course_id.to_deprecated_string())
self.assertTrue(self.run_function('softwareupdate.reset_catalog')) self.assertEqual(self.run_function('softwareupdate.get_catalog'), 'Default')
return [item['data']['content'] for item in response['results']]
func.restype = c_int func.errcheck = partial(check_errcode, cpl=cpl)
import salt.ext.six as six
Env.METRICS_DIR.makedirs_p()
greek.append('infty')
import salt.ext.six as six HAS_LIBS = False try: import splunklib.client import requests HAS_LIBS = True except ImportError: pass
return date + datetime.timedelta(days=1)
self.assertFalse(linode._validate_name('foo;bar'))
try: return CourseTeamMembership.objects.get(user__username=username, team=team) except CourseTeamMembership.DoesNotExist: raise Http404
container = unit.xblocks[1].go_to_container() return container
self.assertRaises(ValueError, df.__setitem__, tuple(['test']), np.ones((4, 2)))
dependencies_map = {}
html_logo = 'logos/scikit-learn-logo-small.png'
self._add_block(self._block_relations, root_block_usage_key)
import salt.crypt import salt.payload import salt.utils import salt.utils.network import salt.utils.event from salt.exceptions import SaltClientError
self.assertFalse(user.badgeassertion_set.all())
import salt.utils
return self.q(css="table.allowance-table tr.allowance-items").present
if fill_value is None: fill_value = self.fill_value return self.make_block_same_class(self.values.take(indexer), fill_value=fill_value, placement=self.mgr_locs)
moosefs.__salt__ = {}
service_url: amazonaws.com
import salt.utils from salt.modules import state
if base_rev is None: fast_forward = True else: fast_forward = __salt__['git.merge_base']( target, refs=[base_rev, remote_rev], is_ancestor=True, user=user)
return self.lhs in self.queryables
if self.opts.get('quiet', False): return
return LibrarySearchIndexer.do_library_reindex(store, self.library.location.library_key)
key_values = {}
raise CommandExecutionError('Service not found: {0}'.format(name))
urlpath = None article = None
file1 = open(filename) file2 = open(filename) r = HttpResponse(file1) r.content = file2 self.assertTrue(file1.closed) self.assertTrue(file2.closed)
arr = randn(50) arr[:10] = np.NaN arr[-10:] = np.NaN s = Series(arr)
iph = unpack('!BBHHHBBH4s4s', ip_header)
from __future__ import absolute_import import logging
ax = self._info_axis if ax.is_unique: lower = self._get_item_cache(ax[item]) else: lower = self.take(item, axis=self._info_axis_number, convert=True) return lower
from __future__ import absolute_import import logging import re
sigmoid = CalibratedClassifierCV(est, cv=2, method='sigmoid')
raise SaltSystemExit('Cannot complete login due to an incorrect user name or password.')
from salt.modules import systemd
from __future__ import absolute_import
debconfmod.__grains__ = {} debconfmod.__salt__ = {} debconfmod.__context__ = {} debconfmod.__opts__ = {}
raise ReferentialIntegrityError( u"{} parents claim {}".format(len(parents), location) )
assert X.ndim == 2 return T.nnet.softmax(X*self.P)
with self.assertRaises(forms.ValidationError): f.clean('2010-12-21 13:30:05')
from salt.config import minion_config
n_neighbors = 10 n_samples = 1000
storage, path = paths[name] with storage.open(path) as original_file:
assert code is not None if isinstance(code, offsets.DateOffset): code = code.rule_code return code.upper()
from __future__ import absolute_import import logging
__virtualname__ = 'bluetooth'
stamp = Timestamp('1850-01-01', tz='US/Eastern') repr(stamp)
self.assertEqual(list(qs.values_list('title', flat=True)), ['Dive into Python'])
depth = len(samples)
return name
import salt.utils from salt.state import STATE_INTERNAL_KEYWORDS as _STATE_INTERNAL_KEYWORDS from salt.exceptions import SaltException from salt.ext import six
exp_gml = exp_gml.replace('GeometryCollection', 'MultiGeometry')
actual = grouped_df.filter(lambda x: len(x) > 1) expected = df.iloc[expected_indexes] assert_frame_equal(actual, expected)
__virtualname__ = 'esxi'
if service_name == 'SSH' or service_name == 'ssh': temp_service_name = 'TSM-SSH' else: temp_service_name = service_name
from __future__ import absolute_import import logging import msgpack import socket import os import weakref import time import traceback
for needle_haystack in test_data[1:]: self.assertIn(self.lazy_wrap(needle), haystack) self.assertIn(self.lazy_wrap(needle), self.lazy_wrap(haystack))
from __future__ import absolute_import
result = f.clean('12/21/2010') self.assertEqual(result, date(2010, 12, 21))
'reverification',
monitoring_train = DenseDesignMatrix(X=X) monitoring_test = DenseDesignMatrix(X=Y)
self.dbs[db].remove()
for current_cfg in vmconfig['current'][instance]: if vmconfig_type['instance'][instance] not in state_cfg: continue
if isinstance(lookup.rhs, (tuple, list)): rhs_val = lookup.rhs[0] spheroid = lookup.rhs[-1] == 'spheroid' else: rhs_val = lookup.rhs spheroid = False
if self.is_captions_visible() != captions_new_state: self.click_player_button('transcript_button')
s = Series([], index=[]) self.assertEqual(s.sum(), 0)
with self.assertRaises(CourseActionStateItemNotFoundError): CourseRerunState.objects.find_first(course_key=destination_course_key)
return self.q(css='.page-header .page-title')[0].text
self.ignored_asset_keys.add(key_name)
scheme = u"https" if settings.HTTPS == "on" else u"http" return u'{}://{}'.format(scheme, settings.SITE_NAME)
__class__ = property(new_method_proxy(operator.attrgetter("__class__"))) __eq__ = new_method_proxy(operator.eq) __ne__ = new_method_proxy(operator.ne) __hash__ = new_method_proxy(hash)
session_data = self._get_session(no_load=must_create)
self.assertEqual(ogc_hex, pnt_2d.hex) self.assertEqual(ogc_hex_3d, pnt_3d.hex)
state_value = getattr(_virtualboxManager.constants, "SessionState_" + expected_state) return xp_session.state == state_value
y = np.mod(np.arange(len(y)), 3)
import salt.utils
scalar = np.int64(1337904000000000).view('M8[us]') as_obj = scalar.astype('O')
row = df.ix[4] row.name = 5 result = df.append(row) expected = df.append(df[-1:], ignore_index=True) assert_frame_equal(result, expected)
from salt.utils import network
self.key = key return None
estimators = [ ('Eigenfaces - RandomizedPCA', decomposition.RandomizedPCA(n_components=n_components, whiten=True), True),
self.assertIn('msgctxt "Special blocktrans context wrapped in double quotes"', po_contents) self.assertIn('msgctxt "Special blocktrans context wrapped in single quotes"', po_contents)
UNICODETEST_WITH_SIGNS = 'Testing Unicode \N{COPYRIGHT SIGN},\N{TRADE MARK SIGN},\N{REGISTERED SIGN} '+TIMESTR UNICODETEST_WITHOUT_SIGNS = 'Testing Unicode'+TIMESTR UNICODE_TEST_KEY = 'UnicodeKey \N{TRADE MARK SIGN} '+TIME_INT_UNICODE UNICODE_TEST_KEY_DEL = 'Delete Me \N{TRADE MARK SIGN} '+TIME_INT_UNICODE
self._pool = None warnings.warn( 'Multiprocessing backed parallel loops cannot be nested' ' below threads, setting n_jobs=1', stacklevel=3) return 1
trans_tar = salt.client.ssh.state.prep_trans_tar( __context__['fileclient'], chunks, file_refs, __pillar__, id_=st_kwargs['id_'])
BSD = ('OpenBSD', 'FreeBSD')
if not os.path.exists(os.path.dirname(file_path)): os.makedirs(os.path.dirname(file_path))
self.assertFalse( makeFY5253LastOfMonthQuarter( 1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1) .year_has_extra_week(datetime(2010, 12, 25)))
for p in user_partitions: has_selected = any(g["selected"] for g in p["groups"]) has_selected_groups = has_selected_groups or has_selected
import salt from salt.modules import syslog_ng
for key in kwargs: args["openid." + key] = kwargs[key]
return self.student_view(context)
config.delete() self.assertEqual(len(self.page.experiment_group_configurations), 0)
return self.tz
shutil.copyfile(path_in, path_test)
the_system = test_capa_system() the_system.render_template = mock.Mock() the_system.render_template.return_value = "<div>Input Template Render</div>"
needs_i8_conversion = com.needs_i8_conversion(new_dtype) if needs_i8_conversion: this_dtype = new_dtype arr = func(series, otherSeries, True) else: arr = func(series, otherSeries)
import salt.fileserver import salt.utils import salt.utils.url
from __future__ import absolute_import import json import yaml import os
columns = {} self.query.deferred_to_data(columns, self.query.get_loaded_field_names_cb) return columns
from salttesting import TestCase from salttesting.helpers import ensure_in_syspath
managed = False
inner_varname = Word(alphas + "_", alphanums + "_") varname = Group(inner_varname)("variable") varname.setParseAction(self.variable_parse_action)
course_cohort_settings = get_course_cohort_settings(course_key) if not course_cohort_settings.is_cohorted: return request_cache.data.setdefault(cache_key, None)
self.assertEquals(preview.latex_preview('2||3'), r'2\|3')
return floatingip_id
_mock_counts.return_value = {'total': 0} with self.assertRaises(SystemExit): call_task('pavelib.quality.run_safelint', options={"thresholds": "invalid"})
import logging
return dict(zip(('user', 'course_key', 'course_mode', 'processor'), patched_create_order.call_args[0]))
CourseEnrollment.enroll(student, ccx_locator)
for bucket_name in _get_buckets(): s3_meta = __get_s3_meta(bucket_name)
__func_alias__ = { 'list_': 'list', 'ls_': 'ls' }
assert_raises(ValueError, gs.fit, X, y)
return dict(compat.iteritems(self))
from __future__ import unicode_literals
data_y = data_y - 1
reindexed = self.frame.reindex(self.frame.index, copy=False) reindexed['F'] = reindexed['A'] self.assertIn('F', self.frame)
from __future__ import absolute_import
from __future__ import absolute_import
return salt.utils.pem_finger(os.path.join(__opts__['pki_dir'], 'minion_master.pub'), sum_type=__opts__.get('hash_type', 'md5'))
return response
self.assertEqual(Foo.objects.get(friend__contains=b'\xc3\xa7'), fx)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
from salttesting import TestCase, skipIf from salttesting.helpers import ensure_in_syspath from salttesting.mock import ( MagicMock, patch, NO_MOCK, NO_MOCK_REASON )
parent_url = None if parent_loc is not None: parent_url = parent_loc.to_deprecated_string()
configured_probes = rpm_probes_config.get('out', {}) if not isinstance(defaults, dict): defaults = {} expected_probes = _expand_probes(probes, defaults)
self.check_event_response_by_key('endorse_resource', resource, test_case['key'], test_case['val'])
output = self._collectstatic_output(clear=True) self.assertNotIn(self.warning_string, output)
from salt.modules import ddns
notes = self.server.get_all_notes() self.assertGreater(len(notes), 0, "Notes are empty.") return notes
adjusted_rand_scorer = make_scorer(adjusted_rand_score)
url(r'^generate_example_certificates$', 'instructor.views.api.generate_example_certificates', name='generate_example_certificates'),
if names: snap_ids = _find_guids(res)
css_include = compressed_css('style-main-v1') self.assertIn(u'lms-main-v1.css', css_include)
from __future__ import absolute_import
assert_equal(np.size(sample_without_replacement(0, 0)), 0)
df = DataFrame(np.arange(12).reshape(3, 4), columns=dups, dtype='float64') self.assertRaises(ValueError, lambda: df[df.A > 6])
if not already_paid: url = reverse('verify_student_upgrade_and_verify', kwargs=course_kwargs)
#epub_exclude_files = []
self.assertRaises(parser.CParserError, TextReader, StringIO(data), delimiter=',', header=5, as_recarray=True)
target = GDALRaster(ds_input, write=True)
assert_almost_equal(dists[2], 1)
self._click_button('advanced_tab')
for student in students[:2]: GeneratedCertificateFactory.create( user=student, course_id=self.course.id, status=status, )
import logging import salt.utils
out, err = DETAILS['server'].sendline(cmd)
procArgs = (None, cmd, security_attributes, security_attributes, 1, 0, user_environment, None, startup_info)
if verification_deadline is not None: if upgrade_deadline is not None and verification_deadline < upgrade_deadline: raise forms.ValidationError("Verification deadline must be after the upgrade deadline.")
self.assertEqual(len(list(self.panel4d.iteritems())), len(self.panel4d.labels))
try: os.remove(name) except OSError as e: if e.errno != errno.ENOENT: raise
version = '%s' % (pandas.__version__)
from __future__ import unicode_literals
X, y = make_classification(n_samples=1000, n_features=10, n_informative=3, n_redundant=0, n_repeated=0, n_classes=2, random_state=0, shuffle=False)
disabled = ()
set_idxs = safe_zip(*minibatch)[0]
self.assertEqual(self.course.user_partitions, [])
self.system.modulestore.update_item(self, None)
is_dst = np.hstack((is_dst, is_dst)) localized = di.tz_localize(tz, ambiguous=is_dst) dr = dr.append(dr) self.assert_index_equal(dr, localized)
self.token = None
course_key = SlashSeparatedCourseKey.from_deprecated_string(course_key_string)
return { 'id': user.id, }
response = self.client.get(collector_url) self.assertContains(response, 'name="whatsit_set-0-index"')
default_grade = '-1'
'name': block.display_name_with_default_escaped, 'category': block.category, 'id': unicode(block.location)
self.wait_for_ajax()
self.assertEqual(self.run_function('xattr.list', [NO_FILE]), 'ERROR: File not found: {0}'.format(NO_FILE))
plt.title(model_title)
text = f.widget.format_value(result) self.assertEqual(text, "2010-12-21 13:30:05")
ret['destroy'] = exist.difference(defined)
return (vpnservice, kwargs)
self.instructor = InstructorFactory(course_key=self.course.id) self.staff = [ StaffFactory(course_key=self.course.id) for __ in xrange(STAFF_COUNT) ]
X_mb = X[:10] X_mb_csr = X_csr[:10] x_mb_squared_norms = x_squared_norms[:10] x_mb_squared_norms_csr = x_squared_norms_csr[:10]
Xf = np.asfortranarray(X) est = TreeEstimator() est.fit(Xf, y) assert_almost_equal(est.predict(T), true_result)
from __future__ import unicode_literals
rs = mi_labels.loc[('i', 'X')] xp = mi_labels.ix[('i', 'X')] assert_frame_equal(rs, xp)
self.assertItemsEqual( data.keys(), ['company_about_url', 'company_privacy_url', 'company_tos_url'] )
raise NotImplementedError
if self.system.anonymous_student_id: return self.data.replace("%%USER_ID%%", self.system.anonymous_student_id) return self.data
import salt.utils from salt.exceptions import SaltInvocationError
assert_array_almost_equal(huber_warm.coef_, huber_warm_coef, 1)
self.assertIsNone( certs_api.get_certificate_for_user(self.student_no_cert.username, self.course_1.id) )
def check_col(key, name, size): self.assertEqual(getattr(store.get_storer( key).table.description, name).itemsize, size)
raise RuntimeError('Invalid password provided.')
return [tuple(items.split("=")) for items in opt]
self.assertNotEqual(draft_version, published_version)
wkb_w.srid = True self.assertEqual(hex3d_srid, wkb_w.write_hex(g)) self.assertEqual(wkb3d_srid, wkb_w.write(g))
gmm = mixture.GaussianMixture(n_components=n_components, covariance_type=cv_type) gmm.fit(X) bic.append(gmm.bic(X)) if bic[-1] < lowest_bic: lowest_bic = bic[-1] best_gmm = gmm
X_mean = X.mean(axis=-1) X -= X_mean[:, np.newaxis]
indexer_axis = list(range(ndim)) for a in axis: indexer_axis.remove(a) indexer_axis = indexer_axis[0]
if 'FEATURES' in ENV_TOKENS: del ENV_TOKENS['FEATURES']
if error: ret['changes'] = {} ret['result'] = False ret['comment'] = str(error)
procedure_fmt = '%(geo_col)s,%(geom)s'
new_file.insert(0, marker_end + '\n') new_file.insert(0, content) new_file.insert(0, marker_start + '\n') done = True
return self.get_comment_list_url(obj, endorsed=True)
assert_raises(VerificationException, attempt.submit)
task_entry = self._create_input_entry() with self.assertRaises(ValueError): task_class(task_entry.id, self._get_xmodule_instance_args())
self.edit_info = EditInfo(**block_data.get('edit_info', {}))
try: dot = callback.rindex('.') except ValueError: return callback, '' return callback[:dot], callback[dot + 1:]
import logging
axes = df.plot.hist(rot=50, fontsize=8, orientation='horizontal') self._check_ticks_props(axes, xrot=0, yrot=50, ylabelsize=8)
try: import requests HAS_REQUESTS = True except ImportError: HAS_REQUESTS = False
pass
raise NotImplementedError('Full-text search is not implemented for this database backend')
week_of_months = week_of_months[week_of_months < 4] if len(week_of_months) == 0 or len(week_of_months) > 1: return None
problem_location = self.problem_location(problem_url_name) modx_url = self.modx_url(problem_location, 'problem_show') resp = self.client.post(modx_url) return resp
self.assertRaises(ValueError, self.read_csv, StringIO(data), names=['a', 'b'], usecols=[1], header=None)
self.assertEqual( StudentModule.objects.filter( student=self.module_to_reset.student, course_id=self.module_to_reset.course_id, ).count(), 0 )
from salttesting import skipIf, TestCase from salttesting.helpers import ensure_in_syspath from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, patch ensure_in_syspath('../')
GITHUB_REPO_ROOT = ENV_TOKENS.get('GITHUB_REPO_ROOT', GITHUB_REPO_ROOT)
self.navigate_to_video()
new_columns = this.columns.union(other.columns) do_fill = fill_value is not None
return name + "\x00" * (length - len(name))
self.points = self.latlng_from_coords(poly.shell.coords)
simplefilter('ignore')
try: import Crypto.Random HAS_CRYPTO = True except ImportError: HAS_CRYPTO = False
n_features = 501 n_relevant_features = 3 noise_level = .2 coef_min = .2 n_samples = 25 block_size = n_relevant_features
FOOTER_ORGANIZATION_IMAGE = "images/logo.png"
link = link.replace('\\', '/')
objs = tuple(objs)
new_block.graceperiod = timedelta(1) self.store.update_item(new_block, self.user.id)
app.add_domain(NumpyPythonDomain) app.add_domain(NumpyCDomain)
y = A x = {'B' : B, 'C' : C}
self.assertIsInstance(form.cleaned_data['multi_choice_optional'], models.query.QuerySet) self.assertIsInstance(form.cleaned_data['multi_choice'], models.query.QuerySet)
clf = clone(model) clf = model.fit(X, y)
Z = kmeans.predict(np.c_[xx.ravel(), yy.ravel()])
s = 'Month 1, 1999' assert to_datetime(s, errors='ignore') == s
raise ValueError( 'Wrong number of arguments for %s:\n' ' %s was called.' % (_signature_str(name, arg_spec), _function_called_str(name, args, kwargs)) )
accuracy_scorer = make_scorer(accuracy_score) f1_scorer = make_scorer(f1_score)
import salt.utils
iris = load_iris() X = iris.data[:, [0, 2]] y = iris.target X = X[y != 2] y = y[y != 2]
import salt.utils from salt.exceptions import SaltInvocationError
y = np.mod(np.arange(len(y)), 3)
from __future__ import absolute_import
return ret
self._test_visible_to_students(False, 'private_no_start', None)
retcode = 1 if outstr: raise
import integration import salt.utils
import salt.ext.six as six
self.user.is_active = False self.user.save()
self.log_ais_w = numpy.zeros(n_runs, dtype=config.floatX)
dive.authors.set([mark])
import salt.utils
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
CONFIG_PREFIX = SERVICE_VARIANT + "." if SERVICE_VARIANT else ""
if alias not in self.query.alias_map or self.query.alias_refcount[alias] == 1: result.append(', %s' % self.quote_name_unless_alias(alias))
return 1 / numpy.cosh(arg)
source = name
pass
from salt.states import augeas
import salt.utils import salt.utils.decorators as decorators from salt.exceptions import SaltException
with tm.assert_produces_warning(FutureWarning, check_stacklevel=False): return f(obj, window=window, min_periods=min_periods, freq=freq, center=center, **kwargs)
datetime_frame_columns.columns = ( datetime_frame_columns.columns .map(lambda x: x.strftime('%Y%m%d')))
return False
data.take(indexer, out=out, axis=i)
if '_when' in data and data['_when'] != when: data['_when_run'] = True data['_when'] = when seconds = when - now
n_samples, n_features = X.shape max_features = ensemble.max_features
return None, phi_a1
from salt.ext.six import string_types
class IndexTogetherSingleList(models.Model): headline = models.CharField(max_length=100) pub_date = models.DateTimeField()
class RequestMiddleware(TestMiddleware): def process_request(self, request): super(RequestMiddleware, self).process_request(request) return HttpResponse('Request Middleware')
self._check_ax_scales(ax, yaxis='log')
OverrideFieldData.provider_classes = None OverrideModulestoreFieldData.provider_classes = None
return self.cleaned_data
self.assertTrue(self.run_function('system.set_restart_delay', [90])) self.assertEqual( self.run_function('system.get_restart_delay'), '90 seconds')
course_overviews = CourseOverview.objects.all()
from salt.modules import znc
check_node(child.location, None, after_create, self.user_id, None, after_create, self.user_id)
return {self.answer_id: self.initial_display}
for cls in [BernoulliNB, MultinomialNB, GaussianNB]: assert_raises(ValueError, cls().fit, X2, y2[:-1])
from salttesting import skipIf, TestCase from salttesting.mock import ( NO_MOCK, NO_MOCK_REASON, MagicMock, patch)
cached_pkg = uninstaller
countdown = ((2 ** retry_index) * base_delay) * random.uniform(.75, 1.25)
knn_graph = kneighbors_graph(X, 30, include_self=False)
if wait_to_finish: salt.utils.cloud.run_func_until_ret_arg(fun=describe_snapshots, kwargs={'snapshot_id': snapshot_id}, fun_call=call, argument_being_watched='status', required_argument_response='completed')
single = salt.client.ssh.Single( __opts__, cmd, fsclient=__context__['fileclient'], minion_opts=__salt__.minion_opts, **st_kwargs)
'django.contrib.admin',
return False
import salt.output.highstate
task_key = hashlib.md5(task_key_stub).hexdigest() return submit_task(request, task_type, task_class, course_key, task_input, task_key)
return request.session.get('partial_pipeline')
return self.lti_consumer.consumer_key == client_key
course = self.store.get_course(self.course.id, depth=None)
if validation.empty: validation.set_summary(summary)
self.page.visit()
return _na_map(sep.join, arr)
if isinstance(value, Decimal): value = float(value) if value is not None and self.area_att: value = Area(**{self.area_att: value}) return value
def __and__(self, other): "Returns the intersection of this Geometry and the other." return self.intersection(other)
from __future__ import unicode_literals
from salttesting import TestCase, skipIf from salttesting.mock import NO_MOCK, NO_MOCK_REASON, MagicMock, call, patch from salttesting.helpers import ensure_in_syspath
import re
return os.path.join(tempfile.gettempdir(), path)
from . import core from . import worker from . import maint from . import reactor from . import zero from . import jobber from . import dummy
text = f.widget.format_value(result) self.assertEqual(text, "21.12.2010")
if response.status_code != 200: log.error( "Outcome service response: Unexpected status code %s", response.status_code ) return False
process.start()
self.certificates_section.refresh()
states[migration] = state state = migration.mutate_state(state, preserve=True) migrations_to_run.remove(migration)
return Fragment(self.get_html())
import salt.utils
courses = sorted( courses, key=lambda course: (course.has_ended(), course.start is None, course.start), reverse=False ) return courses
result = _permute(index[:-5]).union(_permute(index[10:])) tm.assert_index_equal(result, index)
transform = AdditiveChi2Sampler(sample_steps=3) X_trans = transform.fit_transform(X) Y_trans = transform.transform(Y)
import salt.crypt import salt.payload import salt.master import salt.transport.frame import salt.utils.event import salt.ext.six as six from salt.utils.cache import CacheCli
return self.str_versions
ret['changes'] = exc.info.get('changes', {}) ret['comment'] = exc.strerror_without_changes
ret['result'] = None return ret
super(CertificatesDetailHandlerTestCase, self).setUp('contentstore.views.certificates.tracker')
ax.xaxis.set_major_locator(MaxNLocator(nbins=6, prune='lower')) tick_formatter = ScalarFormatter() tick_formatter.set_powerlimits((-3, 4)) ax.xaxis.set_major_formatter(tick_formatter)
from salt.modules import grub_legacy from salt.exceptions import CommandExecutionError
if len(children) == 3: return LatexRendered( children[1].latex, parens=children[0].latex, tall=children[1].tall ) else: return children[0]
return v[::-1], W[:, ::-1]
continue
scipy_works = False
from django.db import models class UnimportantThing(models.Model): importance = models.IntegerField() def get_absolute_url(self): return '/importance/%d/' % (self.importance,)
module = get_module( user, request, problem.scope_ids.usage_id, field_data_cache, )._xmodule module.system.publish(problem, 'grade', grade_dict)
pnt1, pnt2 = feat.geom, city.point self.assertAlmostEqual(pnt1.x, pnt2.x, 5) self.assertAlmostEqual(pnt1.y, pnt2.y, 5)
if ret in query: self.run_cloud('-d {0} --assume-yes'.format(INSTANCE_NAME))
clf.intercept_scaling = 100 clf.fit(X, y) intercept1 = clf.intercept_ assert_less(intercept1, -1)
axes = self.input_space.axes assert len(axes) == 4
self.run_command('write_salt_version')
import salt.utils import salt.modules.selinux from salt.exceptions import CommandExecutionError, FileLockError, MinionError
return self.values.view('i8')
self.course.start = _LAST_WEEK self.assertTrue(self.course.has_started()) self.course.start = _NEXT_WEEK self.assertFalse(self.course.has_started())
def f(): return 42